/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"
#include "app_mems.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "sd_functions.h"
#include "stdio.h"
#include "sd_benchmark.h"
#include "iks4a1_motion_sensors.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef struct
{
    uint32_t timestamp;
    IKS4A1_MOTION_SENSOR_Axes_t acceleration;
    IKS4A1_MOTION_SENSOR_Axes_t angular_velocity;
} sensors_data_t;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define BASE_TIME_TIM1		100					// in ms
#define AMOUNT_DATA		    30					// amount of data to read

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim1;

/* USER CODE BEGIN PV */
static sensors_data_t sensor_data[AMOUNT_DATA] = { 0 };
static volatile size_t data_ready = 0;
static volatile size_t count_data = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write( int file, char * ptr, int len )
{
    for( int i = 0; i < len; i++ )
    {
        ITM_SendChar( *ptr++ );
    }
    return len;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  MX_SPI1_Init();
  MX_MEMS_Init();
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT( &htim1 );
    /*sd_mount();
    sd_list_files();
    sd_unmount();*/

    /*
     sd_mount();
     sd_read_file("F1/F1F2/File5.TXT", bufr, 50, &br);
     printf("DATA from File:::: %s\n\n",bufr);
     sd_unmount();
     */

    //  sd_mount();
    //  sd_read_file("File1.TXT", bufr, 80, &br);
    //  printf("DATA from File:::: %s\n\n",bufr);
    //  sd_unmount();
    //  sd_mount();
    //  sd_write_file("FILE6.TXT", "This file is created by the cubeIDE\n");
    //  sd_read_file("File6.txt", bufr, 80, &br);
    //  printf("DATA from File:::: %s\n\n",bufr);
    //  sd_list_files();
    //  sd_unmount();
    //#define max_records 20
    //  CsvRecord myrecords[max_records];
    //  int record_count = 0;
    //  sd_mount();
    //  sd_read_csv("F1/F1F2/File4.csv", myrecords, max_records, &record_count);
    //  sd_unmount();
    //    sd_mount();
    //    sd_append_file("File6.txt", "This is Appended Text\n");
    //    sd_read_file("File6.txt", bufr, 80, &br);
    //    printf("DATA from File:::: %s\n\n",bufr);
    //
    //    sd_delete_file("File1.txt");
    //    sd_list_files();
    //    sd_unmount();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while( 1 )
    {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
    /* USER CODE BEGIN 3 */
        if( data_ready )
        {
            const char name_file[] = { "sensor_data.csv" };
            const char header_csv[] = "Timestamp,Accel_X,Accel_Y,Accel_Z,Gyro_X,Gyro_Y,Gyro_Z\n";
            // Save data to SD card
            sd_list_files();
            sd_mount();
            sd_write_file( name_file, header_csv ); // Write header

            for( size_t i = 0; i < AMOUNT_DATA; i++ )
            {
                char line[128] = { 0 };
                snprintf( line, sizeof( line ), "%lu,%ld,%ld,%ld,%ld,%ld,%ld\n", (unsigned long) sensor_data[i].timestamp, (long) sensor_data[i].acceleration.x,
                          (long) sensor_data[i].acceleration.y, (long) sensor_data[i].acceleration.z, (long) sensor_data[i].angular_velocity.x,
                          (long) sensor_data[i].angular_velocity.y, (long) sensor_data[i].angular_velocity.z );
                sd_append_file( name_file, line );
            }
            sd_unmount();
        }

        /*      if (data_ready) {
         data_ready = 0;

         sd_mount();
         FIL file;
         if (f_open(&file, "sensor_data.csv", FA_WRITE | FA_OPEN_APPEND) == FR_OK) {
         if (f_size(&file) == 0) {
         f_printf(&file, "Timestamp,Accel_X,Accel_Y,Accel_Z,Gyro_X,Gyro_Y,Gyro_Z\n");
         }
         for (size_t i = 0; i < TIME_READ; i++) {
         f_printf(&file, "%lu,%ld,%ld,%ld,%ld,%ld,%ld\n",
         (unsigned long)sensor_data[i].timestamp,
         (long)sensor_data[i].acceleration.x,
         (long)sensor_data[i].acceleration.y,
         (long)sensor_data[i].acceleration.z,
         (long)sensor_data[i].angular_velocity.x,
         (long)sensor_data[i].angular_velocity.y,
         (long)sensor_data[i].angular_velocity.z);
         }
         f_close(&file);
         }
         sd_unmount();
         }*/
    }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 8399;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 999;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef * htim )
{
    static uint32_t prev = 0;
    if( htim->Instance == TIM1 )  // Check if the interrupt comes from TIM1
    {
        // Your code to be executed every second
        if( count_data < AMOUNT_DATA )
        {
            if( IKS4A1_MOTION_SENSOR_GetAxes(
            IKS4A1_LSM6DSV16X_0,
                                              MOTION_ACCELERO, &sensor_data[count_data].acceleration ) != 0 )
            {
                // Handle error
            }
            if( IKS4A1_MOTION_SENSOR_GetAxes(
            IKS4A1_LSM6DSV16X_0,
                                              MOTION_GYRO, &sensor_data[count_data].angular_velocity ) != 0 )
            {
                // Handle error
            }
            uint32_t now = HAL_GetTick();
            sensor_data[count_data].timestamp = count_data * BASE_TIME_TIM1; //now - prev;
            printf( "Now: %lu, Prev: %lu, Delta: %lu\n", (unsigned long) now, (unsigned long) prev, (unsigned long) sensor_data[count_data].timestamp );
            prev = now;
            count_data++;

        }
        else
        {
            data_ready = 1;           // avisa a thread principal
        }
    }
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while( 1 )
    {
    }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
