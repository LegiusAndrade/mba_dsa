
fw_acquisition_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001779c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df8  08017940  08017940  00018940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018738  08018738  0001a284  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08018738  08018738  00019738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018740  08018740  0001a284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018740  08018740  00019740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018744  08018744  00019744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  20000000  08018748  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c54  20000284  080189cc  0001a284  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ed8  080189cc  0001aed8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003de35  00000000  00000000  0001a2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000651f  00000000  00000000  000580e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003778  00000000  00000000  0005e608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002b1b  00000000  00000000  00061d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f393  00000000  00000000  0006489b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003844c  00000000  00000000  00083c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af550  00000000  00000000  000bc07a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016b5ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fd80  00000000  00000000  0016b610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0017b390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000284 	.word	0x20000284
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08017924 	.word	0x08017924

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000288 	.word	0x20000288
 80001dc:	08017924 	.word	0x08017924

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f86:	b0bd      	sub	sp, #244	@ 0xf4
 8000f88:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8a:	f00b f967 	bl	800c25c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8e:	f000 f8b3 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f92:	f000 f9cb 	bl	800132c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f96:	f000 f9a1 	bl	80012dc <MX_DMA_Init>
  MX_SPI2_Init();
 8000f9a:	f000 f919 	bl	80011d0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000f9e:	f000 f94d 	bl	800123c <MX_TIM1_Init>
  MX_MEMS_Init();
 8000fa2:	f010 faf9 	bl	8011598 <MX_MEMS_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim1);
 8000fa6:	484e      	ldr	r0, [pc, #312]	@ (80010e0 <main+0x15c>)
 8000fa8:	f00f faf4 	bl	8010594 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
    {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8000fac:	f010 fafa 	bl	80115a4 <MX_MEMS_Process>
    /* USER CODE BEGIN 3 */
      if (data_ready)
 8000fb0:	4b4c      	ldr	r3, [pc, #304]	@ (80010e4 <main+0x160>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0f9      	beq.n	8000fac <main+0x28>
	{
	  const char name_file[] =
 8000fb8:	4b4b      	ldr	r3, [pc, #300]	@ (80010e8 <main+0x164>)
 8000fba:	f107 04c4 	add.w	r4, r7, #196	@ 0xc4
 8000fbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    { "sensor_data.csv" };
	  const char header_csv[] =
 8000fc4:	4b49      	ldr	r3, [pc, #292]	@ (80010ec <main+0x168>)
 8000fc6:	f107 040c 	add.w	r4, r7, #12
 8000fca:	461d      	mov	r5, r3
 8000fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fdc:	e884 0003 	stmia.w	r4, {r0, r1}
	      "Timestamp,Accel_X,Accel_Y,Accel_Z,Gyro_X,Gyro_Y,Gyro_Z\n";
	  // Save data to SD card
	  sd_mount ();
 8000fe0:	f000 fb50 	bl	8001684 <sd_mount>
	  sd_write_file (name_file, header_csv); // Write header
 8000fe4:	f107 020c 	add.w	r2, r7, #12
 8000fe8:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8000fec:	4611      	mov	r1, r2
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fbde 	bl	80017b0 <sd_write_file>

	  for (size_t i = 0; i < TIME_READ; i++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8000ffa:	e069      	b.n	80010d0 <main+0x14c>
	    {
	      char line[128] =
 8000ffc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001000:	2280      	movs	r2, #128	@ 0x80
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f014 fe6b 	bl	8015ce0 <memset>
		{ 0 };
	      snprintf (line, sizeof(line), "%lu,%ld,%ld,%ld,%ld,%ld,%ld\n",
			(unsigned long) sensor_data[i].timestamp,
 800100a:	4939      	ldr	r1, [pc, #228]	@ (80010f0 <main+0x16c>)
 800100c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001010:	4613      	mov	r3, r2
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	1a9b      	subs	r3, r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	607b      	str	r3, [r7, #4]
			(long) sensor_data[i].acceleration.x,
 800101e:	4934      	ldr	r1, [pc, #208]	@ (80010f0 <main+0x16c>)
 8001020:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001024:	4613      	mov	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	1a9b      	subs	r3, r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	3304      	adds	r3, #4
 8001030:	6819      	ldr	r1, [r3, #0]
			(long) sensor_data[i].acceleration.y,
 8001032:	482f      	ldr	r0, [pc, #188]	@ (80010f0 <main+0x16c>)
 8001034:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001038:	4613      	mov	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	1a9b      	subs	r3, r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4403      	add	r3, r0
 8001042:	3308      	adds	r3, #8
 8001044:	6818      	ldr	r0, [r3, #0]
			(long) sensor_data[i].acceleration.z,
 8001046:	4c2a      	ldr	r4, [pc, #168]	@ (80010f0 <main+0x16c>)
 8001048:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800104c:	4613      	mov	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	1a9b      	subs	r3, r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4423      	add	r3, r4
 8001056:	330c      	adds	r3, #12
 8001058:	681c      	ldr	r4, [r3, #0]
			(long) sensor_data[i].angular_velocity.x,
 800105a:	4d25      	ldr	r5, [pc, #148]	@ (80010f0 <main+0x16c>)
 800105c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001060:	4613      	mov	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	1a9b      	subs	r3, r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	442b      	add	r3, r5
 800106a:	3310      	adds	r3, #16
 800106c:	681d      	ldr	r5, [r3, #0]
			(long) sensor_data[i].angular_velocity.y,
 800106e:	4e20      	ldr	r6, [pc, #128]	@ (80010f0 <main+0x16c>)
 8001070:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001074:	4613      	mov	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	1a9b      	subs	r3, r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4433      	add	r3, r6
 800107e:	3314      	adds	r3, #20
 8001080:	681e      	ldr	r6, [r3, #0]
			(long) sensor_data[i].angular_velocity.z);
 8001082:	4a1b      	ldr	r2, [pc, #108]	@ (80010f0 <main+0x16c>)
 8001084:	603a      	str	r2, [r7, #0]
 8001086:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800108a:	4613      	mov	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	1a9b      	subs	r3, r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	4413      	add	r3, r2
 8001096:	3318      	adds	r3, #24
 8001098:	681b      	ldr	r3, [r3, #0]
	      snprintf (line, sizeof(line), "%lu,%ld,%ld,%ld,%ld,%ld,%ld\n",
 800109a:	f107 0c44 	add.w	ip, r7, #68	@ 0x44
 800109e:	9305      	str	r3, [sp, #20]
 80010a0:	9604      	str	r6, [sp, #16]
 80010a2:	9503      	str	r5, [sp, #12]
 80010a4:	9402      	str	r4, [sp, #8]
 80010a6:	9001      	str	r0, [sp, #4]
 80010a8:	9100      	str	r1, [sp, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a11      	ldr	r2, [pc, #68]	@ (80010f4 <main+0x170>)
 80010ae:	2180      	movs	r1, #128	@ 0x80
 80010b0:	4660      	mov	r0, ip
 80010b2:	f014 fd07 	bl	8015ac4 <sniprintf>
	      sd_append_file (name_file, line);
 80010b6:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80010ba:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fbdd 	bl	8001880 <sd_append_file>
	  for (size_t i = 0; i < TIME_READ; i++)
 80010c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80010ca:	3301      	adds	r3, #1
 80010cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80010d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d991      	bls.n	8000ffc <main+0x78>
	    }
	  sd_unmount ();
 80010d8:	f000 fb48 	bl	800176c <sd_unmount>
  MX_MEMS_Process();
 80010dc:	e766      	b.n	8000fac <main+0x28>
 80010de:	bf00      	nop
 80010e0:	200003b8 	.word	0x200003b8
 80010e4:	20000454 	.word	0x20000454
 80010e8:	08017960 	.word	0x08017960
 80010ec:	08017970 	.word	0x08017970
 80010f0:	20000400 	.word	0x20000400
 80010f4:	08017940 	.word	0x08017940

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b094      	sub	sp, #80	@ 0x50
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	2230      	movs	r2, #48	@ 0x30
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f014 fdea 	bl	8015ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	4b29      	ldr	r3, [pc, #164]	@ (80011c8 <SystemClock_Config+0xd0>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	4a28      	ldr	r2, [pc, #160]	@ (80011c8 <SystemClock_Config+0xd0>)
 8001126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800112a:	6413      	str	r3, [r2, #64]	@ 0x40
 800112c:	4b26      	ldr	r3, [pc, #152]	@ (80011c8 <SystemClock_Config+0xd0>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	4b23      	ldr	r3, [pc, #140]	@ (80011cc <SystemClock_Config+0xd4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001144:	4a21      	ldr	r2, [pc, #132]	@ (80011cc <SystemClock_Config+0xd4>)
 8001146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <SystemClock_Config+0xd4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001158:	2302      	movs	r3, #2
 800115a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115c:	2301      	movs	r3, #1
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001160:	2310      	movs	r3, #16
 8001162:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001164:	2302      	movs	r3, #2
 8001166:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001168:	2300      	movs	r3, #0
 800116a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800116c:	2310      	movs	r3, #16
 800116e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001170:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001174:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001176:	2304      	movs	r3, #4
 8001178:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800117a:	2307      	movs	r3, #7
 800117c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117e:	f107 0320 	add.w	r3, r7, #32
 8001182:	4618      	mov	r0, r3
 8001184:	f00d fd4c 	bl	800ec20 <HAL_RCC_OscConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800118e:	f000 f991 	bl	80014b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001192:	230f      	movs	r3, #15
 8001194:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001196:	2302      	movs	r3, #2
 8001198:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800119e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2102      	movs	r1, #2
 80011ae:	4618      	mov	r0, r3
 80011b0:	f00d ffae 	bl	800f110 <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011ba:	f000 f97b 	bl	80014b4 <Error_Handler>
  }
}
 80011be:	bf00      	nop
 80011c0:	3750      	adds	r7, #80	@ 0x50
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40007000 	.word	0x40007000

080011d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011d4:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <MX_SPI2_Init+0x64>)
 80011d6:	4a18      	ldr	r2, [pc, #96]	@ (8001238 <MX_SPI2_Init+0x68>)
 80011d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011da:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <MX_SPI2_Init+0x64>)
 80011dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011e2:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <MX_SPI2_Init+0x64>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e8:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <MX_SPI2_Init+0x64>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <MX_SPI2_Init+0x64>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <MX_SPI2_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <MX_SPI2_Init+0x64>)
 80011fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001200:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001202:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <MX_SPI2_Init+0x64>)
 8001204:	2220      	movs	r2, #32
 8001206:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001208:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <MX_SPI2_Init+0x64>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800120e:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <MX_SPI2_Init+0x64>)
 8001210:	2200      	movs	r2, #0
 8001212:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001214:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <MX_SPI2_Init+0x64>)
 8001216:	2200      	movs	r2, #0
 8001218:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <MX_SPI2_Init+0x64>)
 800121c:	220a      	movs	r2, #10
 800121e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	@ (8001234 <MX_SPI2_Init+0x64>)
 8001222:	f00e f995 	bl	800f550 <HAL_SPI_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800122c:	f000 f942 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200002a0 	.word	0x200002a0
 8001238:	40003800 	.word	0x40003800

0800123c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001250:	463b      	mov	r3, r7
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001258:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <MX_TIM1_Init+0x98>)
 800125a:	4a1f      	ldr	r2, [pc, #124]	@ (80012d8 <MX_TIM1_Init+0x9c>)
 800125c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8399;
 800125e:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <MX_TIM1_Init+0x98>)
 8001260:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001264:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <MX_TIM1_Init+0x98>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800126c:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <MX_TIM1_Init+0x98>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001272:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <MX_TIM1_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001278:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <MX_TIM1_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <MX_TIM1_Init+0x98>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001284:	4813      	ldr	r0, [pc, #76]	@ (80012d4 <MX_TIM1_Init+0x98>)
 8001286:	f00f f935 	bl	80104f4 <HAL_TIM_Base_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001290:	f000 f910 	bl	80014b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001294:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001298:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	4619      	mov	r1, r3
 80012a0:	480c      	ldr	r0, [pc, #48]	@ (80012d4 <MX_TIM1_Init+0x98>)
 80012a2:	f00f fac9 	bl	8010838 <HAL_TIM_ConfigClockSource>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80012ac:	f000 f902 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b8:	463b      	mov	r3, r7
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <MX_TIM1_Init+0x98>)
 80012be:	f00f fccb 	bl	8010c58 <HAL_TIMEx_MasterConfigSynchronization>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80012c8:	f000 f8f4 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	200003b8 	.word	0x200003b8
 80012d8:	40010000 	.word	0x40010000

080012dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	4b10      	ldr	r3, [pc, #64]	@ (8001328 <MX_DMA_Init+0x4c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001328 <MX_DMA_Init+0x4c>)
 80012ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001328 <MX_DMA_Init+0x4c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	200e      	movs	r0, #14
 8001304:	f00b f91b 	bl	800c53e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001308:	200e      	movs	r0, #14
 800130a:	f00b f934 	bl	800c576 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	200f      	movs	r0, #15
 8001314:	f00b f913 	bl	800c53e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001318:	200f      	movs	r0, #15
 800131a:	f00b f92c 	bl	800c576 <HAL_NVIC_EnableIRQ>

}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800

0800132c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	@ 0x28
 8001330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 0314 	add.w	r3, r7, #20
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b26      	ldr	r3, [pc, #152]	@ (80013e0 <MX_GPIO_Init+0xb4>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	4a25      	ldr	r2, [pc, #148]	@ (80013e0 <MX_GPIO_Init+0xb4>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	6313      	str	r3, [r2, #48]	@ 0x30
 8001352:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <MX_GPIO_Init+0xb4>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <MX_GPIO_Init+0xb4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a1e      	ldr	r2, [pc, #120]	@ (80013e0 <MX_GPIO_Init+0xb4>)
 8001368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <MX_GPIO_Init+0xb4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b18      	ldr	r3, [pc, #96]	@ (80013e0 <MX_GPIO_Init+0xb4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a17      	ldr	r2, [pc, #92]	@ (80013e0 <MX_GPIO_Init+0xb4>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <MX_GPIO_Init+0xb4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <MX_GPIO_Init+0xb4>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a10      	ldr	r2, [pc, #64]	@ (80013e0 <MX_GPIO_Init+0xb4>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <MX_GPIO_Init+0xb4>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	2180      	movs	r1, #128	@ 0x80
 80013b6:	480b      	ldr	r0, [pc, #44]	@ (80013e4 <MX_GPIO_Init+0xb8>)
 80013b8:	f00b ff16 	bl	800d1e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80013bc:	2380      	movs	r3, #128	@ 0x80
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c8:	2302      	movs	r3, #2
 80013ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	4804      	ldr	r0, [pc, #16]	@ (80013e4 <MX_GPIO_Init+0xb8>)
 80013d4:	f00b fc88 	bl	800cce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	@ 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020800 	.word	0x40020800

080013e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void
HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  static uint32_t prev = 0;
  if (htim->Instance == TIM1)  // Check if the interrupt comes from TIM1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a2a      	ldr	r2, [pc, #168]	@ (80014a0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d14d      	bne.n	8001496 <HAL_TIM_PeriodElapsedCallback+0xae>
    {
      __HAL_TIM_SET_AUTORELOAD(htim, 999); // Set the time to 100ms interrupt
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001402:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800140a:	60da      	str	r2, [r3, #12]
      // Your code to be executed every second
      if (count_data < TIME_READ)
 800140c:	4b25      	ldr	r3, [pc, #148]	@ (80014a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d840      	bhi.n	8001496 <HAL_TIM_PeriodElapsedCallback+0xae>
	{
	  if (IKS4A1_MOTION_SENSOR_GetAxes (
	      IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO, &sensor_data[count_data].acceleration) != 0)
 8001414:	4b23      	ldr	r3, [pc, #140]	@ (80014a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001416:	681a      	ldr	r2, [r3, #0]
	  if (IKS4A1_MOTION_SENSOR_GetAxes (
 8001418:	4613      	mov	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	1a9b      	subs	r3, r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4a21      	ldr	r2, [pc, #132]	@ (80014a8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001422:	4413      	add	r3, r2
 8001424:	3304      	adds	r3, #4
 8001426:	461a      	mov	r2, r3
 8001428:	2102      	movs	r1, #2
 800142a:	2001      	movs	r0, #1
 800142c:	f00a f97a 	bl	800b724 <IKS4A1_MOTION_SENSOR_GetAxes>
	    {
	      // Handle error
	    }
	  if (IKS4A1_MOTION_SENSOR_GetAxes (
	      IKS4A1_LSM6DSV16X_0, MOTION_GYRO, &sensor_data[count_data].angular_velocity) != 0)
 8001430:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001432:	681a      	ldr	r2, [r3, #0]
	  if (IKS4A1_MOTION_SENSOR_GetAxes (
 8001434:	4613      	mov	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	1a9b      	subs	r3, r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	3310      	adds	r3, #16
 800143e:	4a1a      	ldr	r2, [pc, #104]	@ (80014a8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001440:	4413      	add	r3, r2
 8001442:	461a      	mov	r2, r3
 8001444:	2101      	movs	r1, #1
 8001446:	2001      	movs	r0, #1
 8001448:	f00a f96c 	bl	800b724 <IKS4A1_MOTION_SENSOR_GetAxes>
	    {
	      // Handle error
	    }
	  uint32_t now = HAL_GetTick ();
 800144c:	f00a ff6c 	bl	800c328 <HAL_GetTick>
 8001450:	60f8      	str	r0, [r7, #12]
	  sensor_data[count_data].timestamp = (prev == 0) ? 0 : (now - prev);
 8001452:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d004      	beq.n	8001464 <HAL_TIM_PeriodElapsedCallback+0x7c>
 800145a:	4b14      	ldr	r3, [pc, #80]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	1ad2      	subs	r2, r2, r3
 8001462:	e000      	b.n	8001466 <HAL_TIM_PeriodElapsedCallback+0x7e>
 8001464:	2200      	movs	r2, #0
 8001466:	4b0f      	ldr	r3, [pc, #60]	@ (80014a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001468:	6819      	ldr	r1, [r3, #0]
 800146a:	480f      	ldr	r0, [pc, #60]	@ (80014a8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800146c:	460b      	mov	r3, r1
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	1a5b      	subs	r3, r3, r1
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4403      	add	r3, r0
 8001476:	601a      	str	r2, [r3, #0]
	  prev = now;
 8001478:	4a0c      	ldr	r2, [pc, #48]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6013      	str	r3, [r2, #0]
	  count_data++;
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	3301      	adds	r3, #1
 8001484:	4a07      	ldr	r2, [pc, #28]	@ (80014a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001486:	6013      	str	r3, [r2, #0]
	  if (count_data >= TIME_READ)
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d902      	bls.n	8001496 <HAL_TIM_PeriodElapsedCallback+0xae>
	    {
	      data_ready = 1;           // avisa a thread principal
 8001490:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]
      else
	{

	}
    }
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40010000 	.word	0x40010000
 80014a4:	20000458 	.word	0x20000458
 80014a8:	20000400 	.word	0x20000400
 80014ac:	2000045c 	.word	0x2000045c
 80014b0:	20000454 	.word	0x20000454

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq ();
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <Error_Handler+0x8>

080014c0 <SD_disk_status>:
#include "diskio.h"
#include "sd_spi.h"
#include "ff_gen_drv.h"


DSTATUS SD_disk_status(BYTE drv) {
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SD_disk_status+0x14>
        return STA_NOINIT;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <SD_disk_status+0x16>
    return 0;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <SD_disk_initialize>:

DSTATUS SD_disk_initialize(BYTE drv) {
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SD_disk_initialize+0x14>
        return STA_NOINIT;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e007      	b.n	8001506 <SD_disk_initialize+0x24>

    return (SD_SPI_Init() == SD_OK) ? 0 : STA_NOINIT;
 80014f6:	f000 fb51 	bl	8001b9c <SD_SPI_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	bf14      	ite	ne
 8001500:	2301      	movne	r3, #1
 8001502:	2300      	moveq	r3, #0
 8001504:	b2db      	uxtb	r3, r3
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	4603      	mov	r3, r0
 800151e:	73fb      	strb	r3, [r7, #15]
    if (pdrv != 0 || count == 0)
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <SD_disk_read+0x1c>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <SD_disk_read+0x20>
        return RES_PARERR;
 800152c:	2304      	movs	r3, #4
 800152e:	e010      	b.n	8001552 <SD_disk_read+0x42>
    if (!card_initialized) return RES_NOTRDY;
 8001530:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <SD_disk_read+0x4c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <SD_disk_read+0x2c>
 8001538:	2303      	movs	r3, #3
 800153a:	e00a      	b.n	8001552 <SD_disk_read+0x42>
    return (SD_ReadBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	68b8      	ldr	r0, [r7, #8]
 8001542:	f000 fc1d 	bl	8001d80 <SD_ReadBlocks>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	bf14      	ite	ne
 800154c:	2301      	movne	r3, #1
 800154e:	2300      	moveq	r3, #0
 8001550:	b2db      	uxtb	r3, r3
}
 8001552:	4618      	mov	r0, r3
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200006a1 	.word	0x200006a1

08001560 <SD_disk_write>:

DRESULT SD_disk_write(BYTE pdrv,  BYTE *buff, DWORD sector, UINT count) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	4603      	mov	r3, r0
 800156e:	73fb      	strb	r3, [r7, #15]
    if (pdrv || !count) return RES_PARERR;
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d102      	bne.n	800157c <SD_disk_write+0x1c>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <SD_disk_write+0x20>
 800157c:	2304      	movs	r3, #4
 800157e:	e010      	b.n	80015a2 <SD_disk_write+0x42>
    if (!card_initialized) return RES_NOTRDY;
 8001580:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <SD_disk_write+0x4c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <SD_disk_write+0x2c>
 8001588:	2303      	movs	r3, #3
 800158a:	e00a      	b.n	80015a2 <SD_disk_write+0x42>
    return (SD_WriteBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	68b8      	ldr	r0, [r7, #8]
 8001592:	f000 fcc9 	bl	8001f28 <SD_WriteBlocks>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf14      	ite	ne
 800159c:	2301      	movne	r3, #1
 800159e:	2300      	moveq	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200006a1 	.word	0x200006a1

080015b0 <SD_disk_ioctl>:

DRESULT SD_disk_ioctl(BYTE pdrv, BYTE cmd, void *buff) {
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	603a      	str	r2, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]
 80015bc:	460b      	mov	r3, r1
 80015be:	71bb      	strb	r3, [r7, #6]
    if (pdrv != 0)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SD_disk_ioctl+0x1a>
        return RES_PARERR;
 80015c6:	2304      	movs	r3, #4
 80015c8:	e022      	b.n	8001610 <SD_disk_ioctl+0x60>

    switch (cmd) {
 80015ca:	79bb      	ldrb	r3, [r7, #6]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d81e      	bhi.n	800160e <SD_disk_ioctl+0x5e>
 80015d0:	a201      	add	r2, pc, #4	@ (adr r2, 80015d8 <SD_disk_ioctl+0x28>)
 80015d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d6:	bf00      	nop
 80015d8:	080015e9 	.word	0x080015e9
 80015dc:	080015f9 	.word	0x080015f9
 80015e0:	080015ed 	.word	0x080015ed
 80015e4:	08001605 	.word	0x08001605
    case CTRL_SYNC:
        return RES_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	e011      	b.n	8001610 <SD_disk_ioctl+0x60>
    case GET_SECTOR_SIZE:
        *(WORD *)buff = 512;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015f2:	801a      	strh	r2, [r3, #0]
        return RES_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	e00b      	b.n	8001610 <SD_disk_ioctl+0x60>
    case GET_SECTOR_COUNT:
        *(DWORD *)buff = 0x10000; // Example: 32MB SD card (65536 * 512)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015fe:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	e005      	b.n	8001610 <SD_disk_ioctl+0x60>
    case GET_BLOCK_SIZE:
        *(DWORD *)buff = 1;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]
        return RES_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <SD_disk_ioctl+0x60>
    default:
        return RES_PARERR;
 800160e:	2304      	movs	r3, #4
    }
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <sd_get_space_kb>:
//		printf("Format failed: f_mkfs returned %d\r\n", res);
//	}
//		return res;
//}

int sd_get_space_kb(void) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
	FATFS *pfs;
	DWORD fre_clust, tot_sect, fre_sect, total_kb, free_kb;
	FRESULT res = f_getfree(sd_path, &fre_clust, &pfs);
 8001622:	f107 0208 	add.w	r2, r7, #8
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	4619      	mov	r1, r3
 800162a:	4814      	ldr	r0, [pc, #80]	@ (800167c <sd_get_space_kb+0x60>)
 800162c:	f013 fe6a 	bl	8015304 <f_getfree>
 8001630:	4603      	mov	r3, r0
 8001632:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8001634:	7ffb      	ldrb	r3, [r7, #31]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <sd_get_space_kb+0x22>
 800163a:	7ffb      	ldrb	r3, [r7, #31]
 800163c:	e01a      	b.n	8001674 <sd_get_space_kb+0x58>

	tot_sect = (pfs->n_fatent - 2) * pfs->csize;
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	3b02      	subs	r3, #2
 8001644:	68ba      	ldr	r2, [r7, #8]
 8001646:	8952      	ldrh	r2, [r2, #10]
 8001648:	fb02 f303 	mul.w	r3, r2, r3
 800164c:	61bb      	str	r3, [r7, #24]
	fre_sect = fre_clust * pfs->csize;
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	895b      	ldrh	r3, [r3, #10]
 8001652:	461a      	mov	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	fb02 f303 	mul.w	r3, r2, r3
 800165a:	617b      	str	r3, [r7, #20]
	total_kb = tot_sect / 2;
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	085b      	lsrs	r3, r3, #1
 8001660:	613b      	str	r3, [r7, #16]
	free_kb = fre_sect / 2;
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	085b      	lsrs	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
	printf("💾 Total: %lu KB, Free: %lu KB\r\n", total_kb, free_kb);
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	6939      	ldr	r1, [r7, #16]
 800166c:	4804      	ldr	r0, [pc, #16]	@ (8001680 <sd_get_space_kb+0x64>)
 800166e:	f014 f9b9 	bl	80159e4 <iprintf>
	return FR_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3720      	adds	r7, #32
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000460 	.word	0x20000460
 8001680:	080179a8 	.word	0x080179a8

08001684 <sd_mount>:

int sd_mount(void) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
	FRESULT res;
	extern uint8_t sd_is_sdhc(void);

	printf("Linking SD driver...\r\n");
 800168a:	4829      	ldr	r0, [pc, #164]	@ (8001730 <sd_mount+0xac>)
 800168c:	f014 fa12 	bl	8015ab4 <puts>
	if (FATFS_LinkDriver(&SD_Driver, sd_path) != 0) {
 8001690:	4928      	ldr	r1, [pc, #160]	@ (8001734 <sd_mount+0xb0>)
 8001692:	4829      	ldr	r0, [pc, #164]	@ (8001738 <sd_mount+0xb4>)
 8001694:	f013 ff38 	bl	8015508 <FATFS_LinkDriver>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d004      	beq.n	80016a8 <sd_mount+0x24>
		printf("FATFS_LinkDriver failed\n");
 800169e:	4827      	ldr	r0, [pc, #156]	@ (800173c <sd_mount+0xb8>)
 80016a0:	f014 fa08 	bl	8015ab4 <puts>
		return FR_DISK_ERR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e03f      	b.n	8001728 <sd_mount+0xa4>
	}

	printf("Initializing disk...\r\n");
 80016a8:	4825      	ldr	r0, [pc, #148]	@ (8001740 <sd_mount+0xbc>)
 80016aa:	f014 fa03 	bl	8015ab4 <puts>
	DSTATUS stat = disk_initialize(0);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f010 fef0 	bl	8012494 <disk_initialize>
 80016b4:	4603      	mov	r3, r0
 80016b6:	71fb      	strb	r3, [r7, #7]
	if (stat != 0) {
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00c      	beq.n	80016d8 <sd_mount+0x54>
		printf("disk_initialize failed: 0x%02X\n", stat);
 80016be:	79fb      	ldrb	r3, [r7, #7]
 80016c0:	4619      	mov	r1, r3
 80016c2:	4820      	ldr	r0, [pc, #128]	@ (8001744 <sd_mount+0xc0>)
 80016c4:	f014 f98e 	bl	80159e4 <iprintf>
		printf("FR_NOT_READY\tTry Hard Reset or Check Connection/Power\r\n");
 80016c8:	481f      	ldr	r0, [pc, #124]	@ (8001748 <sd_mount+0xc4>)
 80016ca:	f014 f9f3 	bl	8015ab4 <puts>
		printf("Make sure \"MX_FATFS_Init\" is not being called in the main function\n"\
 80016ce:	481f      	ldr	r0, [pc, #124]	@ (800174c <sd_mount+0xc8>)
 80016d0:	f014 f9f0 	bl	8015ab4 <puts>
				"You need to disable its call in CubeMX->Project Manager->Advance Settings->Uncheck Generate code for MX_FATFS_Init\r\n");
		return FR_NOT_READY;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e027      	b.n	8001728 <sd_mount+0xa4>
	}

	printf("Attempting mount at %s...\r\n", sd_path);
 80016d8:	4916      	ldr	r1, [pc, #88]	@ (8001734 <sd_mount+0xb0>)
 80016da:	481d      	ldr	r0, [pc, #116]	@ (8001750 <sd_mount+0xcc>)
 80016dc:	f014 f982 	bl	80159e4 <iprintf>
	res = f_mount(&fs, sd_path, 1);
 80016e0:	2201      	movs	r2, #1
 80016e2:	4914      	ldr	r1, [pc, #80]	@ (8001734 <sd_mount+0xb0>)
 80016e4:	481b      	ldr	r0, [pc, #108]	@ (8001754 <sd_mount+0xd0>)
 80016e6:	f012 ffd7 	bl	8014698 <f_mount>
 80016ea:	4603      	mov	r3, r0
 80016ec:	71bb      	strb	r3, [r7, #6]
	if (res == FR_OK)
 80016ee:	79bb      	ldrb	r3, [r7, #6]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d113      	bne.n	800171c <sd_mount+0x98>
	{
		printf("SD card mounted successfully at %s\r\n", sd_path);
 80016f4:	490f      	ldr	r1, [pc, #60]	@ (8001734 <sd_mount+0xb0>)
 80016f6:	4818      	ldr	r0, [pc, #96]	@ (8001758 <sd_mount+0xd4>)
 80016f8:	f014 f974 	bl	80159e4 <iprintf>
		printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 80016fc:	f000 fa42 	bl	8001b84 <sd_is_sdhc>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <sd_mount+0x86>
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <sd_mount+0xd8>)
 8001708:	e000      	b.n	800170c <sd_mount+0x88>
 800170a:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <sd_mount+0xdc>)
 800170c:	4619      	mov	r1, r3
 800170e:	4815      	ldr	r0, [pc, #84]	@ (8001764 <sd_mount+0xe0>)
 8001710:	f014 f968 	bl	80159e4 <iprintf>

		// Capacity and free space reporting
		sd_get_space_kb();
 8001714:	f7ff ff82 	bl	800161c <sd_get_space_kb>
		return FR_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	e005      	b.n	8001728 <sd_mount+0xa4>
//		}
//		return res;
//	}

	// Any other mount error
	printf("Mount failed with code: %d\r\n", res);
 800171c:	79bb      	ldrb	r3, [r7, #6]
 800171e:	4619      	mov	r1, r3
 8001720:	4811      	ldr	r0, [pc, #68]	@ (8001768 <sd_mount+0xe4>)
 8001722:	f014 f95f 	bl	80159e4 <iprintf>
	return res;
 8001726:	79bb      	ldrb	r3, [r7, #6]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	080179cc 	.word	0x080179cc
 8001734:	20000460 	.word	0x20000460
 8001738:	0801823c 	.word	0x0801823c
 800173c:	080179e4 	.word	0x080179e4
 8001740:	080179fc 	.word	0x080179fc
 8001744:	08017a14 	.word	0x08017a14
 8001748:	08017a34 	.word	0x08017a34
 800174c:	08017a6c 	.word	0x08017a6c
 8001750:	08017b24 	.word	0x08017b24
 8001754:	20000464 	.word	0x20000464
 8001758:	08017b40 	.word	0x08017b40
 800175c:	08017b68 	.word	0x08017b68
 8001760:	08017b74 	.word	0x08017b74
 8001764:	08017b7c 	.word	0x08017b7c
 8001768:	08017b8c 	.word	0x08017b8c

0800176c <sd_unmount>:


int sd_unmount(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
	FRESULT res = f_mount(NULL, sd_path, 1);
 8001772:	2201      	movs	r2, #1
 8001774:	490a      	ldr	r1, [pc, #40]	@ (80017a0 <sd_unmount+0x34>)
 8001776:	2000      	movs	r0, #0
 8001778:	f012 ff8e 	bl	8014698 <f_mount>
 800177c:	4603      	mov	r3, r0
 800177e:	71fb      	strb	r3, [r7, #7]
	printf("SD card unmounted: %s\r\n", (res == FR_OK) ? "OK" : "Failed");
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <sd_unmount+0x1e>
 8001786:	4b07      	ldr	r3, [pc, #28]	@ (80017a4 <sd_unmount+0x38>)
 8001788:	e000      	b.n	800178c <sd_unmount+0x20>
 800178a:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <sd_unmount+0x3c>)
 800178c:	4619      	mov	r1, r3
 800178e:	4807      	ldr	r0, [pc, #28]	@ (80017ac <sd_unmount+0x40>)
 8001790:	f014 f928 	bl	80159e4 <iprintf>
	return res;
 8001794:	79fb      	ldrb	r3, [r7, #7]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000460 	.word	0x20000460
 80017a4:	08017bac 	.word	0x08017bac
 80017a8:	08017bb0 	.word	0x08017bb0
 80017ac:	08017bb8 	.word	0x08017bb8

080017b0 <sd_write_file>:

int sd_write_file(const char *filename, const char *text) {
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80017bc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80017c0:	6018      	str	r0, [r3, #0]
 80017c2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80017c6:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80017ca:	6019      	str	r1, [r3, #0]
	FIL file;
	UINT bw;
	FRESULT res = f_open(&file, filename, FA_CREATE_ALWAYS | FA_WRITE);
 80017cc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80017d0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80017d4:	f107 000c 	add.w	r0, r7, #12
 80017d8:	220a      	movs	r2, #10
 80017da:	6819      	ldr	r1, [r3, #0]
 80017dc:	f012 ffa2 	bl	8014724 <f_open>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	if (res != FR_OK) return res;
 80017e6:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <sd_write_file+0x44>
 80017ee:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80017f2:	e03e      	b.n	8001872 <sd_write_file+0xc2>

	res = f_write(&file, text, strlen(text), &bw);
 80017f4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80017f8:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	f7fe fcef 	bl	80001e0 <strlen>
 8001802:	4604      	mov	r4, r0
 8001804:	f107 0308 	add.w	r3, r7, #8
 8001808:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 800180c:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8001810:	f107 000c 	add.w	r0, r7, #12
 8001814:	4622      	mov	r2, r4
 8001816:	6809      	ldr	r1, [r1, #0]
 8001818:	f013 f94e 	bl	8014ab8 <f_write>
 800181c:	4603      	mov	r3, r0
 800181e:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	f_close(&file);
 8001822:	f107 030c 	add.w	r3, r7, #12
 8001826:	4618      	mov	r0, r3
 8001828:	f013 fb39 	bl	8014e9e <f_close>
	printf("Write %u bytes to %s\r\n", bw, filename);
 800182c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001830:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001834:	6819      	ldr	r1, [r3, #0]
 8001836:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800183a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	480e      	ldr	r0, [pc, #56]	@ (800187c <sd_write_file+0xcc>)
 8001842:	f014 f8cf 	bl	80159e4 <iprintf>
	return (res == FR_OK && bw == strlen(text)) ? FR_OK : FR_DISK_ERR;
 8001846:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10e      	bne.n	800186c <sd_write_file+0xbc>
 800184e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001852:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	f7fe fcc2 	bl	80001e0 <strlen>
 800185c:	4602      	mov	r2, r0
 800185e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001862:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <sd_write_file+0xc0>
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <sd_write_file+0xc2>
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8001878:	46bd      	mov	sp, r7
 800187a:	bd90      	pop	{r4, r7, pc}
 800187c:	08017bd0 	.word	0x08017bd0

08001880 <sd_append_file>:

int sd_append_file(const char *filename, const char *text) {
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8001886:	af00      	add	r7, sp, #0
 8001888:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800188c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001890:	6018      	str	r0, [r3, #0]
 8001892:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001896:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800189a:	6019      	str	r1, [r3, #0]
	FIL file;
	UINT bw;
	FRESULT res = f_open(&file, filename, FA_OPEN_ALWAYS | FA_WRITE);
 800189c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80018a0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80018a4:	f107 000c 	add.w	r0, r7, #12
 80018a8:	2212      	movs	r2, #18
 80018aa:	6819      	ldr	r1, [r3, #0]
 80018ac:	f012 ff3a 	bl	8014724 <f_open>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	if (res != FR_OK) return res;
 80018b6:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d002      	beq.n	80018c4 <sd_append_file+0x44>
 80018be:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80018c2:	e058      	b.n	8001976 <sd_append_file+0xf6>

	res = f_lseek(&file, f_size(&file));
 80018c4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80018c8:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f013 fb0c 	bl	8014ef2 <f_lseek>
 80018da:	4603      	mov	r3, r0
 80018dc:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	if (res != FR_OK) {
 80018e0:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d007      	beq.n	80018f8 <sd_append_file+0x78>
		f_close(&file);
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	4618      	mov	r0, r3
 80018ee:	f013 fad6 	bl	8014e9e <f_close>
		return res;
 80018f2:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80018f6:	e03e      	b.n	8001976 <sd_append_file+0xf6>
	}

	res = f_write(&file, text, strlen(text), &bw);
 80018f8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80018fc:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001900:	6818      	ldr	r0, [r3, #0]
 8001902:	f7fe fc6d 	bl	80001e0 <strlen>
 8001906:	4604      	mov	r4, r0
 8001908:	f107 0308 	add.w	r3, r7, #8
 800190c:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8001910:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8001914:	f107 000c 	add.w	r0, r7, #12
 8001918:	4622      	mov	r2, r4
 800191a:	6809      	ldr	r1, [r1, #0]
 800191c:	f013 f8cc 	bl	8014ab8 <f_write>
 8001920:	4603      	mov	r3, r0
 8001922:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	f_close(&file);
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	4618      	mov	r0, r3
 800192c:	f013 fab7 	bl	8014e9e <f_close>
	printf("Appended %u bytes to %s\r\n", bw, filename);
 8001930:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001934:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001938:	6819      	ldr	r1, [r3, #0]
 800193a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800193e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	480e      	ldr	r0, [pc, #56]	@ (8001980 <sd_append_file+0x100>)
 8001946:	f014 f84d 	bl	80159e4 <iprintf>
	return (res == FR_OK && bw == strlen(text)) ? FR_OK : FR_DISK_ERR;
 800194a:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10e      	bne.n	8001970 <sd_append_file+0xf0>
 8001952:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001956:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	f7fe fc40 	bl	80001e0 <strlen>
 8001960:	4602      	mov	r2, r0
 8001962:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001966:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <sd_append_file+0xf4>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <sd_append_file+0xf6>
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 800197c:	46bd      	mov	sp, r7
 800197e:	bd90      	pop	{r4, r7, pc}
 8001980:	08017be8 	.word	0x08017be8

08001984 <HAL_SPI_TxCpltCallback>:

#if USE_DMA
volatile int dma_tx_done = 0;
volatile int dma_rx_done = 0;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	if (hspi == &SD_SPI_HANDLE) dma_tx_done = 1;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a06      	ldr	r2, [pc, #24]	@ (80019a8 <HAL_SPI_TxCpltCallback+0x24>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d102      	bne.n	800199a <HAL_SPI_TxCpltCallback+0x16>
 8001994:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <HAL_SPI_TxCpltCallback+0x28>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200002a0 	.word	0x200002a0
 80019ac:	20000698 	.word	0x20000698

080019b0 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi2) dma_rx_done = 1;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a06      	ldr	r2, [pc, #24]	@ (80019d4 <HAL_SPI_TxRxCpltCallback+0x24>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d102      	bne.n	80019c6 <HAL_SPI_TxRxCpltCallback+0x16>
 80019c0:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_SPI_TxRxCpltCallback+0x28>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	200002a0 	.word	0x200002a0
 80019d8:	2000069c 	.word	0x2000069c

080019dc <SD_TransmitByte>:
#endif

static void SD_TransmitByte(uint8_t data) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&SD_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 80019e6:	1df9      	adds	r1, r7, #7
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ec:	2201      	movs	r2, #1
 80019ee:	4803      	ldr	r0, [pc, #12]	@ (80019fc <SD_TransmitByte+0x20>)
 80019f0:	f00d fe37 	bl	800f662 <HAL_SPI_Transmit>
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200002a0 	.word	0x200002a0

08001a00 <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af02      	add	r7, sp, #8
    uint8_t dummy = 0xFF, data = 0;
 8001a06:	23ff      	movs	r3, #255	@ 0xff
 8001a08:	71fb      	strb	r3, [r7, #7]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	71bb      	strb	r3, [r7, #6]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dummy, &data, 1, HAL_MAX_DELAY);
 8001a0e:	1dba      	adds	r2, r7, #6
 8001a10:	1df9      	adds	r1, r7, #7
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2301      	movs	r3, #1
 8001a1a:	4804      	ldr	r0, [pc, #16]	@ (8001a2c <SD_ReceiveByte+0x2c>)
 8001a1c:	f00d ff65 	bl	800f8ea <HAL_SPI_TransmitReceive>
    return data;
 8001a20:	79bb      	ldrb	r3, [r7, #6]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200002a0 	.word	0x200002a0

08001a30 <SD_TransmitBuffer>:

static void SD_TransmitBuffer(const uint8_t *buffer, uint16_t len) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	807b      	strh	r3, [r7, #2]
#if USE_DMA
    dma_tx_done = 0;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <SD_TransmitBuffer+0x34>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
    HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t *)buffer, len);
 8001a42:	887b      	ldrh	r3, [r7, #2]
 8001a44:	461a      	mov	r2, r3
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4807      	ldr	r0, [pc, #28]	@ (8001a68 <SD_TransmitBuffer+0x38>)
 8001a4a:	f00e f8f7 	bl	800fc3c <HAL_SPI_Transmit_DMA>
    while (!dma_tx_done);
 8001a4e:	bf00      	nop
 8001a50:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <SD_TransmitBuffer+0x34>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0fb      	beq.n	8001a50 <SD_TransmitBuffer+0x20>
#else
    HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t *)buffer, len, HAL_MAX_DELAY);
#endif
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000698 	.word	0x20000698
 8001a68:	200002a0 	.word	0x200002a0

08001a6c <SD_ReceiveBuffer>:

static void SD_ReceiveBuffer(uint8_t *buffer, uint16_t len) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	807b      	strh	r3, [r7, #2]
#if USE_DMA
	static uint8_t tx_dummy[512];
    for (int i = 0; i < len; i++) tx_dummy[i] = 0xFF;  // Fill with 0xFF
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e007      	b.n	8001a8e <SD_ReceiveBuffer+0x22>
 8001a7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001abc <SD_ReceiveBuffer+0x50>)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	22ff      	movs	r2, #255	@ 0xff
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	887b      	ldrh	r3, [r7, #2]
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	dbf3      	blt.n	8001a7e <SD_ReceiveBuffer+0x12>
    dma_rx_done = 0;
 8001a96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <SD_ReceiveBuffer+0x54>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
    HAL_SPI_TransmitReceive_DMA(&hspi2, tx_dummy, buffer, len);
 8001a9c:	887b      	ldrh	r3, [r7, #2]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	4906      	ldr	r1, [pc, #24]	@ (8001abc <SD_ReceiveBuffer+0x50>)
 8001aa2:	4808      	ldr	r0, [pc, #32]	@ (8001ac4 <SD_ReceiveBuffer+0x58>)
 8001aa4:	f00e f97c 	bl	800fda0 <HAL_SPI_TransmitReceive_DMA>
    while (!dma_rx_done);
 8001aa8:	bf00      	nop
 8001aaa:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <SD_ReceiveBuffer+0x54>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0fb      	beq.n	8001aaa <SD_ReceiveBuffer+0x3e>
#else
    for (uint16_t i = 0; i < len; i++) {
        buffer[i] = SD_ReceiveByte();
    }
#endif
}
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200006a4 	.word	0x200006a4
 8001ac0:	2000069c 	.word	0x2000069c
 8001ac4:	200002a0 	.word	0x200002a0

08001ac8 <SD_WaitReady>:

static SD_Status SD_WaitReady(void) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
    uint32_t timeout = HAL_GetTick() + 500;
 8001ace:	f00a fc2b 	bl	800c328 <HAL_GetTick>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001ad8:	607b      	str	r3, [r7, #4]
    uint8_t resp;
    do {
        resp = SD_ReceiveByte();
 8001ada:	f7ff ff91 	bl	8001a00 <SD_ReceiveByte>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	70fb      	strb	r3, [r7, #3]
        if (resp == 0xFF) return SD_OK;
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	2bff      	cmp	r3, #255	@ 0xff
 8001ae6:	d101      	bne.n	8001aec <SD_WaitReady+0x24>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e006      	b.n	8001afa <SD_WaitReady+0x32>
    } while (HAL_GetTick() < timeout);
 8001aec:	f00a fc1c 	bl	800c328 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d8f0      	bhi.n	8001ada <SD_WaitReady+0x12>
    return SD_ERROR;
 8001af8:	2301      	movs	r3, #1
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	6039      	str	r1, [r7, #0]
 8001b0c:	71fb      	strb	r3, [r7, #7]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	71bb      	strb	r3, [r7, #6]
    uint8_t response, retry = 0xFF;
 8001b12:	23ff      	movs	r3, #255	@ 0xff
 8001b14:	73fb      	strb	r3, [r7, #15]

    SD_WaitReady();
 8001b16:	f7ff ffd7 	bl	8001ac8 <SD_WaitReady>
    SD_TransmitByte(0x40 | cmd);
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ff5a 	bl	80019dc <SD_TransmitByte>
    SD_TransmitByte(arg >> 24);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	0e1b      	lsrs	r3, r3, #24
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff54 	bl	80019dc <SD_TransmitByte>
    SD_TransmitByte(arg >> 16);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	0c1b      	lsrs	r3, r3, #16
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ff4e 	bl	80019dc <SD_TransmitByte>
    SD_TransmitByte(arg >> 8);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	0a1b      	lsrs	r3, r3, #8
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ff48 	bl	80019dc <SD_TransmitByte>
    SD_TransmitByte(arg);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff43 	bl	80019dc <SD_TransmitByte>
    SD_TransmitByte(crc);
 8001b56:	79bb      	ldrb	r3, [r7, #6]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ff3f 	bl	80019dc <SD_TransmitByte>

    do {
        response = SD_ReceiveByte();
 8001b5e:	f7ff ff4f 	bl	8001a00 <SD_ReceiveByte>
 8001b62:	4603      	mov	r3, r0
 8001b64:	73bb      	strb	r3, [r7, #14]
    } while ((response & 0x80) && --retry);
 8001b66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	da05      	bge.n	8001b7a <SD_SendCommand+0x78>
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f1      	bne.n	8001b5e <SD_SendCommand+0x5c>

    return response;
 8001b7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <sd_is_sdhc>:

static uint8_t sdhc = 0;
uint8_t sd_is_sdhc(void) {
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
    return sdhc;
 8001b88:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <sd_is_sdhc+0x14>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	200006a0 	.word	0x200006a0

08001b9c <SD_SPI_Init>:
uint8_t card_initialized = 0;

SD_Status SD_SPI_Init(void) {
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
    uint8_t i, response;
    uint8_t r7[4];
    uint32_t retry;

    SD_CS_HIGH();
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	2180      	movs	r1, #128	@ 0x80
 8001ba6:	4873      	ldr	r0, [pc, #460]	@ (8001d74 <SD_SPI_Init+0x1d8>)
 8001ba8:	f00b fb1e 	bl	800d1e8 <HAL_GPIO_WritePin>
    for (i = 0; i < 10; i++) SD_TransmitByte(0xFF);
 8001bac:	2300      	movs	r3, #0
 8001bae:	73fb      	strb	r3, [r7, #15]
 8001bb0:	e005      	b.n	8001bbe <SD_SPI_Init+0x22>
 8001bb2:	20ff      	movs	r0, #255	@ 0xff
 8001bb4:	f7ff ff12 	bl	80019dc <SD_TransmitByte>
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	73fb      	strb	r3, [r7, #15]
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	2b09      	cmp	r3, #9
 8001bc2:	d9f6      	bls.n	8001bb2 <SD_SPI_Init+0x16>

    SD_CS_LOW();
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2180      	movs	r1, #128	@ 0x80
 8001bc8:	486a      	ldr	r0, [pc, #424]	@ (8001d74 <SD_SPI_Init+0x1d8>)
 8001bca:	f00b fb0d 	bl	800d1e8 <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD0, 0, 0x95);
 8001bce:	2295      	movs	r2, #149	@ 0x95
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f7ff ff95 	bl	8001b02 <SD_SendCommand>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	73bb      	strb	r3, [r7, #14]
    SD_CS_HIGH();
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2180      	movs	r1, #128	@ 0x80
 8001be0:	4864      	ldr	r0, [pc, #400]	@ (8001d74 <SD_SPI_Init+0x1d8>)
 8001be2:	f00b fb01 	bl	800d1e8 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8001be6:	20ff      	movs	r0, #255	@ 0xff
 8001be8:	f7ff fef8 	bl	80019dc <SD_TransmitByte>
    if (response != 0x01) return SD_ERROR;
 8001bec:	7bbb      	ldrb	r3, [r7, #14]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d001      	beq.n	8001bf6 <SD_SPI_Init+0x5a>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e0ba      	b.n	8001d6c <SD_SPI_Init+0x1d0>

    SD_CS_LOW();
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2180      	movs	r1, #128	@ 0x80
 8001bfa:	485e      	ldr	r0, [pc, #376]	@ (8001d74 <SD_SPI_Init+0x1d8>)
 8001bfc:	f00b faf4 	bl	800d1e8 <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD8, 0x000001AA, 0x87);
 8001c00:	2287      	movs	r2, #135	@ 0x87
 8001c02:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001c06:	2008      	movs	r0, #8
 8001c08:	f7ff ff7b 	bl	8001b02 <SD_SendCommand>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 4; i++) r7[i] = SD_ReceiveByte();
 8001c10:	2300      	movs	r3, #0
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	e00c      	b.n	8001c30 <SD_SPI_Init+0x94>
 8001c16:	7bfc      	ldrb	r4, [r7, #15]
 8001c18:	f7ff fef2 	bl	8001a00 <SD_ReceiveByte>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f104 0310 	add.w	r3, r4, #16
 8001c24:	443b      	add	r3, r7
 8001c26:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d9ef      	bls.n	8001c16 <SD_SPI_Init+0x7a>
    SD_CS_HIGH();
 8001c36:	2201      	movs	r2, #1
 8001c38:	2180      	movs	r1, #128	@ 0x80
 8001c3a:	484e      	ldr	r0, [pc, #312]	@ (8001d74 <SD_SPI_Init+0x1d8>)
 8001c3c:	f00b fad4 	bl	800d1e8 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8001c40:	20ff      	movs	r0, #255	@ 0xff
 8001c42:	f7ff fecb 	bl	80019dc <SD_TransmitByte>

    sdhc = 0;
 8001c46:	4b4c      	ldr	r3, [pc, #304]	@ (8001d78 <SD_SPI_Init+0x1dc>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
    retry = HAL_GetTick() + 1000;
 8001c4c:	f00a fb6c 	bl	800c328 <HAL_GetTick>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001c56:	60bb      	str	r3, [r7, #8]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001c58:	7bbb      	ldrb	r3, [r7, #14]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d15a      	bne.n	8001d14 <SD_SPI_Init+0x178>
 8001c5e:	79bb      	ldrb	r3, [r7, #6]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d157      	bne.n	8001d14 <SD_SPI_Init+0x178>
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	2baa      	cmp	r3, #170	@ 0xaa
 8001c68:	d154      	bne.n	8001d14 <SD_SPI_Init+0x178>
        do {
            SD_CS_LOW();
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2180      	movs	r1, #128	@ 0x80
 8001c6e:	4841      	ldr	r0, [pc, #260]	@ (8001d74 <SD_SPI_Init+0x1d8>)
 8001c70:	f00b faba 	bl	800d1e8 <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8001c74:	22ff      	movs	r2, #255	@ 0xff
 8001c76:	2100      	movs	r1, #0
 8001c78:	2037      	movs	r0, #55	@ 0x37
 8001c7a:	f7ff ff42 	bl	8001b02 <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0x40000000, 0xFF);
 8001c7e:	22ff      	movs	r2, #255	@ 0xff
 8001c80:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001c84:	2029      	movs	r0, #41	@ 0x29
 8001c86:	f7ff ff3c 	bl	8001b02 <SD_SendCommand>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 8001c8e:	2201      	movs	r2, #1
 8001c90:	2180      	movs	r1, #128	@ 0x80
 8001c92:	4838      	ldr	r0, [pc, #224]	@ (8001d74 <SD_SPI_Init+0x1d8>)
 8001c94:	f00b faa8 	bl	800d1e8 <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8001c98:	20ff      	movs	r0, #255	@ 0xff
 8001c9a:	f7ff fe9f 	bl	80019dc <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8001c9e:	7bbb      	ldrb	r3, [r7, #14]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <SD_SPI_Init+0x114>
 8001ca4:	f00a fb40 	bl	800c328 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d8dc      	bhi.n	8001c6a <SD_SPI_Init+0xce>

        if (response != 0x00) return SD_ERROR;
 8001cb0:	7bbb      	ldrb	r3, [r7, #14]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <SD_SPI_Init+0x11e>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e058      	b.n	8001d6c <SD_SPI_Init+0x1d0>

        SD_CS_LOW();
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2180      	movs	r1, #128	@ 0x80
 8001cbe:	482d      	ldr	r0, [pc, #180]	@ (8001d74 <SD_SPI_Init+0x1d8>)
 8001cc0:	f00b fa92 	bl	800d1e8 <HAL_GPIO_WritePin>
        response = SD_SendCommand(CMD58, 0, 0xFF);
 8001cc4:	22ff      	movs	r2, #255	@ 0xff
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	203a      	movs	r0, #58	@ 0x3a
 8001cca:	f7ff ff1a 	bl	8001b02 <SD_SendCommand>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	73bb      	strb	r3, [r7, #14]
        uint8_t ocr[4];
        for (i = 0; i < 4; i++) ocr[i] = SD_ReceiveByte();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	73fb      	strb	r3, [r7, #15]
 8001cd6:	e00c      	b.n	8001cf2 <SD_SPI_Init+0x156>
 8001cd8:	7bfc      	ldrb	r4, [r7, #15]
 8001cda:	f7ff fe91 	bl	8001a00 <SD_ReceiveByte>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	f104 0310 	add.w	r3, r4, #16
 8001ce6:	443b      	add	r3, r7
 8001ce8:	f803 2c10 	strb.w	r2, [r3, #-16]
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	73fb      	strb	r3, [r7, #15]
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d9ef      	bls.n	8001cd8 <SD_SPI_Init+0x13c>
        SD_CS_HIGH();
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	2180      	movs	r1, #128	@ 0x80
 8001cfc:	481d      	ldr	r0, [pc, #116]	@ (8001d74 <SD_SPI_Init+0x1d8>)
 8001cfe:	f00b fa73 	bl	800d1e8 <HAL_GPIO_WritePin>
        if (ocr[0] & 0x40) sdhc = 1;
 8001d02:	783b      	ldrb	r3, [r7, #0]
 8001d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d02a      	beq.n	8001d62 <SD_SPI_Init+0x1c6>
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d78 <SD_SPI_Init+0x1dc>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001d12:	e026      	b.n	8001d62 <SD_SPI_Init+0x1c6>
    } else {
        do {
            SD_CS_LOW();
 8001d14:	2200      	movs	r2, #0
 8001d16:	2180      	movs	r1, #128	@ 0x80
 8001d18:	4816      	ldr	r0, [pc, #88]	@ (8001d74 <SD_SPI_Init+0x1d8>)
 8001d1a:	f00b fa65 	bl	800d1e8 <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8001d1e:	22ff      	movs	r2, #255	@ 0xff
 8001d20:	2100      	movs	r1, #0
 8001d22:	2037      	movs	r0, #55	@ 0x37
 8001d24:	f7ff feed 	bl	8001b02 <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0, 0xFF);
 8001d28:	22ff      	movs	r2, #255	@ 0xff
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2029      	movs	r0, #41	@ 0x29
 8001d2e:	f7ff fee8 	bl	8001b02 <SD_SendCommand>
 8001d32:	4603      	mov	r3, r0
 8001d34:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 8001d36:	2201      	movs	r2, #1
 8001d38:	2180      	movs	r1, #128	@ 0x80
 8001d3a:	480e      	ldr	r0, [pc, #56]	@ (8001d74 <SD_SPI_Init+0x1d8>)
 8001d3c:	f00b fa54 	bl	800d1e8 <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8001d40:	20ff      	movs	r0, #255	@ 0xff
 8001d42:	f7ff fe4b 	bl	80019dc <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8001d46:	7bbb      	ldrb	r3, [r7, #14]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <SD_SPI_Init+0x1bc>
 8001d4c:	f00a faec 	bl	800c328 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d8dd      	bhi.n	8001d14 <SD_SPI_Init+0x178>
        if (response != 0x00) return SD_ERROR;
 8001d58:	7bbb      	ldrb	r3, [r7, #14]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <SD_SPI_Init+0x1c8>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e004      	b.n	8001d6c <SD_SPI_Init+0x1d0>
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001d62:	bf00      	nop
    }

    card_initialized = 1;
 8001d64:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <SD_SPI_Init+0x1e0>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
    return SD_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd90      	pop	{r4, r7, pc}
 8001d74:	40020800 	.word	0x40020800
 8001d78:	200006a0 	.word	0x200006a0
 8001d7c:	200006a1 	.word	0x200006a1

08001d80 <SD_ReadBlocks>:

SD_Status SD_ReadBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <SD_ReadBlocks+0x16>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e054      	b.n	8001e40 <SD_ReadBlocks+0xc0>

    if (count == 1) {
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d14b      	bne.n	8001e34 <SD_ReadBlocks+0xb4>
    	if (!sdhc) sector *= 512;
 8001d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e48 <SD_ReadBlocks+0xc8>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <SD_ReadBlocks+0x2a>
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	025b      	lsls	r3, r3, #9
 8001da8:	60bb      	str	r3, [r7, #8]
        SD_CS_LOW();
 8001daa:	2200      	movs	r2, #0
 8001dac:	2180      	movs	r1, #128	@ 0x80
 8001dae:	4827      	ldr	r0, [pc, #156]	@ (8001e4c <SD_ReadBlocks+0xcc>)
 8001db0:	f00b fa1a 	bl	800d1e8 <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD17, sector, 0xFF) != 0x00) {
 8001db4:	22ff      	movs	r2, #255	@ 0xff
 8001db6:	68b9      	ldr	r1, [r7, #8]
 8001db8:	2011      	movs	r0, #17
 8001dba:	f7ff fea2 	bl	8001b02 <SD_SendCommand>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d006      	beq.n	8001dd2 <SD_ReadBlocks+0x52>
            SD_CS_HIGH();
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	2180      	movs	r1, #128	@ 0x80
 8001dc8:	4820      	ldr	r0, [pc, #128]	@ (8001e4c <SD_ReadBlocks+0xcc>)
 8001dca:	f00b fa0d 	bl	800d1e8 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e036      	b.n	8001e40 <SD_ReadBlocks+0xc0>
        }

        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8001dd2:	f00a faa9 	bl	800c328 <HAL_GetTick>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	33c8      	adds	r3, #200	@ 0xc8
 8001dda:	617b      	str	r3, [r7, #20]
        do {
            token = SD_ReceiveByte();
 8001ddc:	f7ff fe10 	bl	8001a00 <SD_ReceiveByte>
 8001de0:	4603      	mov	r3, r0
 8001de2:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 8001de4:	7cfb      	ldrb	r3, [r7, #19]
 8001de6:	2bfe      	cmp	r3, #254	@ 0xfe
 8001de8:	d006      	beq.n	8001df8 <SD_ReadBlocks+0x78>
        } while (HAL_GetTick() < timeout);
 8001dea:	f00a fa9d 	bl	800c328 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d8f2      	bhi.n	8001ddc <SD_ReadBlocks+0x5c>
 8001df6:	e000      	b.n	8001dfa <SD_ReadBlocks+0x7a>
            if (token == 0xFE) break;
 8001df8:	bf00      	nop
        if (token != 0xFE) {
 8001dfa:	7cfb      	ldrb	r3, [r7, #19]
 8001dfc:	2bfe      	cmp	r3, #254	@ 0xfe
 8001dfe:	d006      	beq.n	8001e0e <SD_ReadBlocks+0x8e>
            SD_CS_HIGH();
 8001e00:	2201      	movs	r2, #1
 8001e02:	2180      	movs	r1, #128	@ 0x80
 8001e04:	4811      	ldr	r0, [pc, #68]	@ (8001e4c <SD_ReadBlocks+0xcc>)
 8001e06:	f00b f9ef 	bl	800d1e8 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e018      	b.n	8001e40 <SD_ReadBlocks+0xc0>
        }

        SD_ReceiveBuffer(buff, 512);
 8001e0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7ff fe2a 	bl	8001a6c <SD_ReceiveBuffer>
        SD_ReceiveByte();  // CRC
 8001e18:	f7ff fdf2 	bl	8001a00 <SD_ReceiveByte>
        SD_ReceiveByte();
 8001e1c:	f7ff fdf0 	bl	8001a00 <SD_ReceiveByte>
        SD_CS_HIGH();
 8001e20:	2201      	movs	r2, #1
 8001e22:	2180      	movs	r1, #128	@ 0x80
 8001e24:	4809      	ldr	r0, [pc, #36]	@ (8001e4c <SD_ReadBlocks+0xcc>)
 8001e26:	f00b f9df 	bl	800d1e8 <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8001e2a:	20ff      	movs	r0, #255	@ 0xff
 8001e2c:	f7ff fdd6 	bl	80019dc <SD_TransmitByte>
        return SD_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e005      	b.n	8001e40 <SD_ReadBlocks+0xc0>
    } else {
        return SD_ReadMultiBlocks(buff, sector, count);
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	68b9      	ldr	r1, [r7, #8]
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 f809 	bl	8001e50 <SD_ReadMultiBlocks>
 8001e3e:	4603      	mov	r3, r0
    }
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	200006a0 	.word	0x200006a0
 8001e4c:	40020800 	.word	0x40020800

08001e50 <SD_ReadMultiBlocks>:

SD_Status SD_ReadMultiBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <SD_ReadMultiBlocks+0x16>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e058      	b.n	8001f18 <SD_ReadMultiBlocks+0xc8>
    if (!sdhc) sector *= 512;
 8001e66:	4b2e      	ldr	r3, [pc, #184]	@ (8001f20 <SD_ReadMultiBlocks+0xd0>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d102      	bne.n	8001e74 <SD_ReadMultiBlocks+0x24>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	025b      	lsls	r3, r3, #9
 8001e72:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8001e74:	2200      	movs	r2, #0
 8001e76:	2180      	movs	r1, #128	@ 0x80
 8001e78:	482a      	ldr	r0, [pc, #168]	@ (8001f24 <SD_ReadMultiBlocks+0xd4>)
 8001e7a:	f00b f9b5 	bl	800d1e8 <HAL_GPIO_WritePin>
    if (SD_SendCommand(18, sector, 0xFF) != 0x00) {
 8001e7e:	22ff      	movs	r2, #255	@ 0xff
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	2012      	movs	r0, #18
 8001e84:	f7ff fe3d 	bl	8001b02 <SD_SendCommand>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d031      	beq.n	8001ef2 <SD_ReadMultiBlocks+0xa2>
        SD_CS_HIGH();
 8001e8e:	2201      	movs	r2, #1
 8001e90:	2180      	movs	r1, #128	@ 0x80
 8001e92:	4824      	ldr	r0, [pc, #144]	@ (8001f24 <SD_ReadMultiBlocks+0xd4>)
 8001e94:	f00b f9a8 	bl	800d1e8 <HAL_GPIO_WritePin>
        return SD_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e03d      	b.n	8001f18 <SD_ReadMultiBlocks+0xc8>
    }

    while (count--) {
        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8001e9c:	f00a fa44 	bl	800c328 <HAL_GetTick>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	33c8      	adds	r3, #200	@ 0xc8
 8001ea4:	617b      	str	r3, [r7, #20]

        do {
            token = SD_ReceiveByte();
 8001ea6:	f7ff fdab 	bl	8001a00 <SD_ReceiveByte>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 8001eae:	7cfb      	ldrb	r3, [r7, #19]
 8001eb0:	2bfe      	cmp	r3, #254	@ 0xfe
 8001eb2:	d006      	beq.n	8001ec2 <SD_ReadMultiBlocks+0x72>
        } while (HAL_GetTick() < timeout);
 8001eb4:	f00a fa38 	bl	800c328 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d8f2      	bhi.n	8001ea6 <SD_ReadMultiBlocks+0x56>
 8001ec0:	e000      	b.n	8001ec4 <SD_ReadMultiBlocks+0x74>
            if (token == 0xFE) break;
 8001ec2:	bf00      	nop

        if (token != 0xFE) {
 8001ec4:	7cfb      	ldrb	r3, [r7, #19]
 8001ec6:	2bfe      	cmp	r3, #254	@ 0xfe
 8001ec8:	d006      	beq.n	8001ed8 <SD_ReadMultiBlocks+0x88>
            SD_CS_HIGH();
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2180      	movs	r1, #128	@ 0x80
 8001ece:	4815      	ldr	r0, [pc, #84]	@ (8001f24 <SD_ReadMultiBlocks+0xd4>)
 8001ed0:	f00b f98a 	bl	800d1e8 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e01f      	b.n	8001f18 <SD_ReadMultiBlocks+0xc8>
        }

        SD_ReceiveBuffer(buff, 512);
 8001ed8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7ff fdc5 	bl	8001a6c <SD_ReceiveBuffer>
        SD_ReceiveByte();  // discard CRC
 8001ee2:	f7ff fd8d 	bl	8001a00 <SD_ReceiveByte>
        SD_ReceiveByte();
 8001ee6:	f7ff fd8b 	bl	8001a00 <SD_ReceiveByte>

        buff += 512;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001ef0:	60fb      	str	r3, [r7, #12]
    while (count--) {
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	1e5a      	subs	r2, r3, #1
 8001ef6:	607a      	str	r2, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1cf      	bne.n	8001e9c <SD_ReadMultiBlocks+0x4c>
    }

    SD_SendCommand(12, 0, 0xFF);  // STOP_TRANSMISSION
 8001efc:	22ff      	movs	r2, #255	@ 0xff
 8001efe:	2100      	movs	r1, #0
 8001f00:	200c      	movs	r0, #12
 8001f02:	f7ff fdfe 	bl	8001b02 <SD_SendCommand>
    SD_CS_HIGH();
 8001f06:	2201      	movs	r2, #1
 8001f08:	2180      	movs	r1, #128	@ 0x80
 8001f0a:	4806      	ldr	r0, [pc, #24]	@ (8001f24 <SD_ReadMultiBlocks+0xd4>)
 8001f0c:	f00b f96c 	bl	800d1e8 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF); // Extra 8 clocks
 8001f10:	20ff      	movs	r0, #255	@ 0xff
 8001f12:	f7ff fd63 	bl	80019dc <SD_TransmitByte>

    return SD_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	200006a0 	.word	0x200006a0
 8001f24:	40020800 	.word	0x40020800

08001f28 <SD_WriteBlocks>:

SD_Status SD_WriteBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <SD_WriteBlocks+0x16>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e051      	b.n	8001fe2 <SD_WriteBlocks+0xba>

    if (count == 1) {
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d148      	bne.n	8001fd6 <SD_WriteBlocks+0xae>
    	if (!sdhc) sector *= 512;
 8001f44:	4b29      	ldr	r3, [pc, #164]	@ (8001fec <SD_WriteBlocks+0xc4>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d102      	bne.n	8001f52 <SD_WriteBlocks+0x2a>
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	025b      	lsls	r3, r3, #9
 8001f50:	60bb      	str	r3, [r7, #8]
        SD_CS_LOW();
 8001f52:	2200      	movs	r2, #0
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	4826      	ldr	r0, [pc, #152]	@ (8001ff0 <SD_WriteBlocks+0xc8>)
 8001f58:	f00b f946 	bl	800d1e8 <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD24, sector, 0xFF) != 0x00) {
 8001f5c:	22ff      	movs	r2, #255	@ 0xff
 8001f5e:	68b9      	ldr	r1, [r7, #8]
 8001f60:	2018      	movs	r0, #24
 8001f62:	f7ff fdce 	bl	8001b02 <SD_SendCommand>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <SD_WriteBlocks+0x52>
            SD_CS_HIGH();
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2180      	movs	r1, #128	@ 0x80
 8001f70:	481f      	ldr	r0, [pc, #124]	@ (8001ff0 <SD_WriteBlocks+0xc8>)
 8001f72:	f00b f939 	bl	800d1e8 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e033      	b.n	8001fe2 <SD_WriteBlocks+0xba>
        }

        SD_TransmitByte(0xFE);
 8001f7a:	20fe      	movs	r0, #254	@ 0xfe
 8001f7c:	f7ff fd2e 	bl	80019dc <SD_TransmitByte>
        SD_TransmitBuffer(buff, 512);
 8001f80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f7ff fd53 	bl	8001a30 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);
 8001f8a:	20ff      	movs	r0, #255	@ 0xff
 8001f8c:	f7ff fd26 	bl	80019dc <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 8001f90:	20ff      	movs	r0, #255	@ 0xff
 8001f92:	f7ff fd23 	bl	80019dc <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 8001f96:	f7ff fd33 	bl	8001a00 <SD_ReceiveByte>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 8001f9e:	7dfb      	ldrb	r3, [r7, #23]
 8001fa0:	f003 031f 	and.w	r3, r3, #31
 8001fa4:	2b05      	cmp	r3, #5
 8001fa6:	d006      	beq.n	8001fb6 <SD_WriteBlocks+0x8e>
            SD_CS_HIGH();
 8001fa8:	2201      	movs	r2, #1
 8001faa:	2180      	movs	r1, #128	@ 0x80
 8001fac:	4810      	ldr	r0, [pc, #64]	@ (8001ff0 <SD_WriteBlocks+0xc8>)
 8001fae:	f00b f91b 	bl	800d1e8 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e015      	b.n	8001fe2 <SD_WriteBlocks+0xba>
        }

        while (SD_ReceiveByte() == 0);
 8001fb6:	bf00      	nop
 8001fb8:	f7ff fd22 	bl	8001a00 <SD_ReceiveByte>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0fa      	beq.n	8001fb8 <SD_WriteBlocks+0x90>
        SD_CS_HIGH();
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	2180      	movs	r1, #128	@ 0x80
 8001fc6:	480a      	ldr	r0, [pc, #40]	@ (8001ff0 <SD_WriteBlocks+0xc8>)
 8001fc8:	f00b f90e 	bl	800d1e8 <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8001fcc:	20ff      	movs	r0, #255	@ 0xff
 8001fce:	f7ff fd05 	bl	80019dc <SD_TransmitByte>

        return SD_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e005      	b.n	8001fe2 <SD_WriteBlocks+0xba>
    } else {
        return SD_WriteMultiBlocks(buff, sector, count);
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f80a 	bl	8001ff4 <SD_WriteMultiBlocks>
 8001fe0:	4603      	mov	r3, r0
    }
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200006a0 	.word	0x200006a0
 8001ff0:	40020800 	.word	0x40020800

08001ff4 <SD_WriteMultiBlocks>:

SD_Status SD_WriteMultiBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <SD_WriteMultiBlocks+0x16>
 8002006:	2301      	movs	r3, #1
 8002008:	e059      	b.n	80020be <SD_WriteMultiBlocks+0xca>
    if (!sdhc) sector *= 512;
 800200a:	4b2f      	ldr	r3, [pc, #188]	@ (80020c8 <SD_WriteMultiBlocks+0xd4>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d102      	bne.n	8002018 <SD_WriteMultiBlocks+0x24>
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	025b      	lsls	r3, r3, #9
 8002016:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8002018:	2200      	movs	r2, #0
 800201a:	2180      	movs	r1, #128	@ 0x80
 800201c:	482b      	ldr	r0, [pc, #172]	@ (80020cc <SD_WriteMultiBlocks+0xd8>)
 800201e:	f00b f8e3 	bl	800d1e8 <HAL_GPIO_WritePin>
    if (SD_SendCommand(25, sector, 0xFF) != 0x00) {
 8002022:	22ff      	movs	r2, #255	@ 0xff
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	2019      	movs	r0, #25
 8002028:	f7ff fd6b 	bl	8001b02 <SD_SendCommand>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d02e      	beq.n	8002090 <SD_WriteMultiBlocks+0x9c>
        SD_CS_HIGH();
 8002032:	2201      	movs	r2, #1
 8002034:	2180      	movs	r1, #128	@ 0x80
 8002036:	4825      	ldr	r0, [pc, #148]	@ (80020cc <SD_WriteMultiBlocks+0xd8>)
 8002038:	f00b f8d6 	bl	800d1e8 <HAL_GPIO_WritePin>
        return SD_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e03e      	b.n	80020be <SD_WriteMultiBlocks+0xca>
    }

    while (count--) {
        SD_TransmitByte(0xFC);  // Start multi-block write token
 8002040:	20fc      	movs	r0, #252	@ 0xfc
 8002042:	f7ff fccb 	bl	80019dc <SD_TransmitByte>

        SD_TransmitBuffer((uint8_t *)buff, 512);
 8002046:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f7ff fcf0 	bl	8001a30 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);  // dummy CRC
 8002050:	20ff      	movs	r0, #255	@ 0xff
 8002052:	f7ff fcc3 	bl	80019dc <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 8002056:	20ff      	movs	r0, #255	@ 0xff
 8002058:	f7ff fcc0 	bl	80019dc <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 800205c:	f7ff fcd0 	bl	8001a00 <SD_ReceiveByte>
 8002060:	4603      	mov	r3, r0
 8002062:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 8002064:	7dfb      	ldrb	r3, [r7, #23]
 8002066:	f003 031f 	and.w	r3, r3, #31
 800206a:	2b05      	cmp	r3, #5
 800206c:	d006      	beq.n	800207c <SD_WriteMultiBlocks+0x88>
            SD_CS_HIGH();
 800206e:	2201      	movs	r2, #1
 8002070:	2180      	movs	r1, #128	@ 0x80
 8002072:	4816      	ldr	r0, [pc, #88]	@ (80020cc <SD_WriteMultiBlocks+0xd8>)
 8002074:	f00b f8b8 	bl	800d1e8 <HAL_GPIO_WritePin>
            return SD_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e020      	b.n	80020be <SD_WriteMultiBlocks+0xca>
        }

        while (SD_ReceiveByte() == 0);  // busy wait
 800207c:	bf00      	nop
 800207e:	f7ff fcbf 	bl	8001a00 <SD_ReceiveByte>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0fa      	beq.n	800207e <SD_WriteMultiBlocks+0x8a>
        buff += 512;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800208e:	60fb      	str	r3, [r7, #12]
    while (count--) {
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	1e5a      	subs	r2, r3, #1
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1d2      	bne.n	8002040 <SD_WriteMultiBlocks+0x4c>
    }

    SD_TransmitByte(0xFD);  // STOP_TRAN token
 800209a:	20fd      	movs	r0, #253	@ 0xfd
 800209c:	f7ff fc9e 	bl	80019dc <SD_TransmitByte>
    while (SD_ReceiveByte() == 0);  // busy wait
 80020a0:	bf00      	nop
 80020a2:	f7ff fcad 	bl	8001a00 <SD_ReceiveByte>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0fa      	beq.n	80020a2 <SD_WriteMultiBlocks+0xae>

    SD_CS_HIGH();
 80020ac:	2201      	movs	r2, #1
 80020ae:	2180      	movs	r1, #128	@ 0x80
 80020b0:	4806      	ldr	r0, [pc, #24]	@ (80020cc <SD_WriteMultiBlocks+0xd8>)
 80020b2:	f00b f899 	bl	800d1e8 <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 80020b6:	20ff      	movs	r0, #255	@ 0xff
 80020b8:	f7ff fc90 	bl	80019dc <SD_TransmitByte>

    return SD_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	200006a0 	.word	0x200006a0
 80020cc:	40020800 	.word	0x40020800

080020d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	4b10      	ldr	r3, [pc, #64]	@ (800211c <HAL_MspInit+0x4c>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	4a0f      	ldr	r2, [pc, #60]	@ (800211c <HAL_MspInit+0x4c>)
 80020e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020e6:	4b0d      	ldr	r3, [pc, #52]	@ (800211c <HAL_MspInit+0x4c>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	603b      	str	r3, [r7, #0]
 80020f6:	4b09      	ldr	r3, [pc, #36]	@ (800211c <HAL_MspInit+0x4c>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	4a08      	ldr	r2, [pc, #32]	@ (800211c <HAL_MspInit+0x4c>)
 80020fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002100:	6413      	str	r3, [r2, #64]	@ 0x40
 8002102:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_MspInit+0x4c>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800

08002120 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	@ 0x28
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a47      	ldr	r2, [pc, #284]	@ (800225c <HAL_SPI_MspInit+0x13c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	f040 8087 	bne.w	8002252 <HAL_SPI_MspInit+0x132>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002144:	2300      	movs	r3, #0
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	4b45      	ldr	r3, [pc, #276]	@ (8002260 <HAL_SPI_MspInit+0x140>)
 800214a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214c:	4a44      	ldr	r2, [pc, #272]	@ (8002260 <HAL_SPI_MspInit+0x140>)
 800214e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002152:	6413      	str	r3, [r2, #64]	@ 0x40
 8002154:	4b42      	ldr	r3, [pc, #264]	@ (8002260 <HAL_SPI_MspInit+0x140>)
 8002156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002158:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002160:	2300      	movs	r3, #0
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	4b3e      	ldr	r3, [pc, #248]	@ (8002260 <HAL_SPI_MspInit+0x140>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002168:	4a3d      	ldr	r2, [pc, #244]	@ (8002260 <HAL_SPI_MspInit+0x140>)
 800216a:	f043 0302 	orr.w	r3, r3, #2
 800216e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002170:	4b3b      	ldr	r3, [pc, #236]	@ (8002260 <HAL_SPI_MspInit+0x140>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800217c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218a:	2303      	movs	r3, #3
 800218c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800218e:	2305      	movs	r3, #5
 8002190:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002192:	f107 0314 	add.w	r3, r7, #20
 8002196:	4619      	mov	r1, r3
 8002198:	4832      	ldr	r0, [pc, #200]	@ (8002264 <HAL_SPI_MspInit+0x144>)
 800219a:	f00a fda5 	bl	800cce8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800219e:	4b32      	ldr	r3, [pc, #200]	@ (8002268 <HAL_SPI_MspInit+0x148>)
 80021a0:	4a32      	ldr	r2, [pc, #200]	@ (800226c <HAL_SPI_MspInit+0x14c>)
 80021a2:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80021a4:	4b30      	ldr	r3, [pc, #192]	@ (8002268 <HAL_SPI_MspInit+0x148>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002268 <HAL_SPI_MspInit+0x148>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002268 <HAL_SPI_MspInit+0x148>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002268 <HAL_SPI_MspInit+0x148>)
 80021b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021bc:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021be:	4b2a      	ldr	r3, [pc, #168]	@ (8002268 <HAL_SPI_MspInit+0x148>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021c4:	4b28      	ldr	r3, [pc, #160]	@ (8002268 <HAL_SPI_MspInit+0x148>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80021ca:	4b27      	ldr	r3, [pc, #156]	@ (8002268 <HAL_SPI_MspInit+0x148>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021d0:	4b25      	ldr	r3, [pc, #148]	@ (8002268 <HAL_SPI_MspInit+0x148>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021d6:	4b24      	ldr	r3, [pc, #144]	@ (8002268 <HAL_SPI_MspInit+0x148>)
 80021d8:	2200      	movs	r2, #0
 80021da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80021dc:	4822      	ldr	r0, [pc, #136]	@ (8002268 <HAL_SPI_MspInit+0x148>)
 80021de:	f00a f9e5 	bl	800c5ac <HAL_DMA_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80021e8:	f7ff f964 	bl	80014b4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002268 <HAL_SPI_MspInit+0x148>)
 80021f0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80021f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002268 <HAL_SPI_MspInit+0x148>)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80021f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002270 <HAL_SPI_MspInit+0x150>)
 80021fa:	4a1e      	ldr	r2, [pc, #120]	@ (8002274 <HAL_SPI_MspInit+0x154>)
 80021fc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80021fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002270 <HAL_SPI_MspInit+0x150>)
 8002200:	2200      	movs	r2, #0
 8002202:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002204:	4b1a      	ldr	r3, [pc, #104]	@ (8002270 <HAL_SPI_MspInit+0x150>)
 8002206:	2240      	movs	r2, #64	@ 0x40
 8002208:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800220a:	4b19      	ldr	r3, [pc, #100]	@ (8002270 <HAL_SPI_MspInit+0x150>)
 800220c:	2200      	movs	r2, #0
 800220e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002210:	4b17      	ldr	r3, [pc, #92]	@ (8002270 <HAL_SPI_MspInit+0x150>)
 8002212:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002216:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002218:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <HAL_SPI_MspInit+0x150>)
 800221a:	2200      	movs	r2, #0
 800221c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800221e:	4b14      	ldr	r3, [pc, #80]	@ (8002270 <HAL_SPI_MspInit+0x150>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002224:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HAL_SPI_MspInit+0x150>)
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800222a:	4b11      	ldr	r3, [pc, #68]	@ (8002270 <HAL_SPI_MspInit+0x150>)
 800222c:	2200      	movs	r2, #0
 800222e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002230:	4b0f      	ldr	r3, [pc, #60]	@ (8002270 <HAL_SPI_MspInit+0x150>)
 8002232:	2200      	movs	r2, #0
 8002234:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002236:	480e      	ldr	r0, [pc, #56]	@ (8002270 <HAL_SPI_MspInit+0x150>)
 8002238:	f00a f9b8 	bl	800c5ac <HAL_DMA_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8002242:	f7ff f937 	bl	80014b4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a09      	ldr	r2, [pc, #36]	@ (8002270 <HAL_SPI_MspInit+0x150>)
 800224a:	649a      	str	r2, [r3, #72]	@ 0x48
 800224c:	4a08      	ldr	r2, [pc, #32]	@ (8002270 <HAL_SPI_MspInit+0x150>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002252:	bf00      	nop
 8002254:	3728      	adds	r7, #40	@ 0x28
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40003800 	.word	0x40003800
 8002260:	40023800 	.word	0x40023800
 8002264:	40020400 	.word	0x40020400
 8002268:	200002f8 	.word	0x200002f8
 800226c:	40026058 	.word	0x40026058
 8002270:	20000358 	.word	0x20000358
 8002274:	40026070 	.word	0x40026070

08002278 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a12      	ldr	r2, [pc, #72]	@ (80022d0 <HAL_TIM_Base_MspInit+0x58>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d11d      	bne.n	80022c6 <HAL_TIM_Base_MspInit+0x4e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <HAL_TIM_Base_MspInit+0x5c>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002292:	4a10      	ldr	r2, [pc, #64]	@ (80022d4 <HAL_TIM_Base_MspInit+0x5c>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6453      	str	r3, [r2, #68]	@ 0x44
 800229a:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <HAL_TIM_Base_MspInit+0x5c>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	2018      	movs	r0, #24
 80022ac:	f00a f947 	bl	800c53e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80022b0:	2018      	movs	r0, #24
 80022b2:	f00a f960 	bl	800c576 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2100      	movs	r1, #0
 80022ba:	2019      	movs	r0, #25
 80022bc:	f00a f93f 	bl	800c53e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022c0:	2019      	movs	r0, #25
 80022c2:	f00a f958 	bl	800c576 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40010000 	.word	0x40010000
 80022d4:	40023800 	.word	0x40023800

080022d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022dc:	bf00      	nop
 80022de:	e7fd      	b.n	80022dc <NMI_Handler+0x4>

080022e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <HardFault_Handler+0x4>

080022e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <MemManage_Handler+0x4>

080022f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f4:	bf00      	nop
 80022f6:	e7fd      	b.n	80022f4 <BusFault_Handler+0x4>

080022f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <UsageFault_Handler+0x4>

08002300 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800232e:	f009 ffe7 	bl	800c300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800233c:	4802      	ldr	r0, [pc, #8]	@ (8002348 <DMA1_Stream3_IRQHandler+0x10>)
 800233e:	f00a fa3b 	bl	800c7b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200002f8 	.word	0x200002f8

0800234c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002350:	4802      	ldr	r0, [pc, #8]	@ (800235c <DMA1_Stream4_IRQHandler+0x10>)
 8002352:	f00a fa31 	bl	800c7b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000358 	.word	0x20000358

08002360 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002364:	4802      	ldr	r0, [pc, #8]	@ (8002370 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002366:	f00e f977 	bl	8010658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200003b8 	.word	0x200003b8

08002374 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002378:	4802      	ldr	r0, [pc, #8]	@ (8002384 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800237a:	f00e f96d 	bl	8010658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200003b8 	.word	0x200003b8

08002388 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002392:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <BSP_I2C1_Init+0x58>)
 8002394:	4a13      	ldr	r2, [pc, #76]	@ (80023e4 <BSP_I2C1_Init+0x5c>)
 8002396:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002398:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <BSP_I2C1_Init+0x60>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	4912      	ldr	r1, [pc, #72]	@ (80023e8 <BSP_I2C1_Init+0x60>)
 80023a0:	600a      	str	r2, [r1, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d117      	bne.n	80023d6 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80023a6:	480e      	ldr	r0, [pc, #56]	@ (80023e0 <BSP_I2C1_Init+0x58>)
 80023a8:	f00b ff1c 	bl	800e1e4 <HAL_I2C_GetState>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d111      	bne.n	80023d6 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80023b2:	480b      	ldr	r0, [pc, #44]	@ (80023e0 <BSP_I2C1_Init+0x58>)
 80023b4:	f000 f936 	bl	8002624 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10b      	bne.n	80023d6 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80023be:	4808      	ldr	r0, [pc, #32]	@ (80023e0 <BSP_I2C1_Init+0x58>)
 80023c0:	f000 f8fc 	bl	80025bc <MX_I2C1_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80023ca:	f06f 0307 	mvn.w	r3, #7
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	e001      	b.n	80023d6 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80023d6:	687b      	ldr	r3, [r7, #4]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	200008a4 	.word	0x200008a4
 80023e4:	40005400 	.word	0x40005400
 80023e8:	200008f8 	.word	0x200008f8

080023ec <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80023f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002434 <BSP_I2C1_DeInit+0x48>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d014      	beq.n	8002428 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80023fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002434 <BSP_I2C1_DeInit+0x48>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	3b01      	subs	r3, #1
 8002404:	4a0b      	ldr	r2, [pc, #44]	@ (8002434 <BSP_I2C1_DeInit+0x48>)
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <BSP_I2C1_DeInit+0x48>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10b      	bne.n	8002428 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002410:	4809      	ldr	r0, [pc, #36]	@ (8002438 <BSP_I2C1_DeInit+0x4c>)
 8002412:	f000 f94f 	bl	80026b4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002416:	4808      	ldr	r0, [pc, #32]	@ (8002438 <BSP_I2C1_DeInit+0x4c>)
 8002418:	f00b f844 	bl	800d4a4 <HAL_I2C_DeInit>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002422:	f06f 0307 	mvn.w	r3, #7
 8002426:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002428:	687b      	ldr	r3, [r7, #4]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200008f8 	.word	0x200008f8
 8002438:	200008a4 	.word	0x200008a4

0800243c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	@ 0x28
 8002440:	af04      	add	r7, sp, #16
 8002442:	60ba      	str	r2, [r7, #8]
 8002444:	461a      	mov	r2, r3
 8002446:	4603      	mov	r3, r0
 8002448:	81fb      	strh	r3, [r7, #14]
 800244a:	460b      	mov	r3, r1
 800244c:	81bb      	strh	r3, [r7, #12]
 800244e:	4613      	mov	r3, r2
 8002450:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002456:	89ba      	ldrh	r2, [r7, #12]
 8002458:	89f9      	ldrh	r1, [r7, #14]
 800245a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800245e:	9302      	str	r3, [sp, #8]
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2301      	movs	r3, #1
 800246a:	480c      	ldr	r0, [pc, #48]	@ (800249c <BSP_I2C1_WriteReg+0x60>)
 800246c:	f00b fb8e 	bl	800db8c <HAL_I2C_Mem_Write>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00c      	beq.n	8002490 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002476:	4809      	ldr	r0, [pc, #36]	@ (800249c <BSP_I2C1_WriteReg+0x60>)
 8002478:	f00b fec2 	bl	800e200 <HAL_I2C_GetError>
 800247c:	4603      	mov	r3, r0
 800247e:	2b04      	cmp	r3, #4
 8002480:	d103      	bne.n	800248a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002482:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	e002      	b.n	8002490 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800248a:	f06f 0303 	mvn.w	r3, #3
 800248e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002490:	697b      	ldr	r3, [r7, #20]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200008a4 	.word	0x200008a4

080024a0 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08a      	sub	sp, #40	@ 0x28
 80024a4:	af04      	add	r7, sp, #16
 80024a6:	60ba      	str	r2, [r7, #8]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4603      	mov	r3, r0
 80024ac:	81fb      	strh	r3, [r7, #14]
 80024ae:	460b      	mov	r3, r1
 80024b0:	81bb      	strh	r3, [r7, #12]
 80024b2:	4613      	mov	r3, r2
 80024b4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80024ba:	89ba      	ldrh	r2, [r7, #12]
 80024bc:	89f9      	ldrh	r1, [r7, #14]
 80024be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024c2:	9302      	str	r3, [sp, #8]
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	2301      	movs	r3, #1
 80024ce:	480c      	ldr	r0, [pc, #48]	@ (8002500 <BSP_I2C1_ReadReg+0x60>)
 80024d0:	f00b fc56 	bl	800dd80 <HAL_I2C_Mem_Read>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00c      	beq.n	80024f4 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80024da:	4809      	ldr	r0, [pc, #36]	@ (8002500 <BSP_I2C1_ReadReg+0x60>)
 80024dc:	f00b fe90 	bl	800e200 <HAL_I2C_GetError>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d103      	bne.n	80024ee <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80024e6:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	e002      	b.n	80024f4 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80024ee:	f06f 0303 	mvn.w	r3, #3
 80024f2:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80024f4:	697b      	ldr	r3, [r7, #20]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200008a4 	.word	0x200008a4

08002504 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af02      	add	r7, sp, #8
 800250a:	4603      	mov	r3, r0
 800250c:	6039      	str	r1, [r7, #0]
 800250e:	80fb      	strh	r3, [r7, #6]
 8002510:	4613      	mov	r3, r2
 8002512:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002518:	88bb      	ldrh	r3, [r7, #4]
 800251a:	88f9      	ldrh	r1, [r7, #6]
 800251c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002520:	9200      	str	r2, [sp, #0]
 8002522:	683a      	ldr	r2, [r7, #0]
 8002524:	480b      	ldr	r0, [pc, #44]	@ (8002554 <BSP_I2C1_Send+0x50>)
 8002526:	f00b f801 	bl	800d52c <HAL_I2C_Master_Transmit>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00c      	beq.n	800254a <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8002530:	4808      	ldr	r0, [pc, #32]	@ (8002554 <BSP_I2C1_Send+0x50>)
 8002532:	f00b fe65 	bl	800e200 <HAL_I2C_GetError>
 8002536:	4603      	mov	r3, r0
 8002538:	2b04      	cmp	r3, #4
 800253a:	d003      	beq.n	8002544 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800253c:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	e002      	b.n	800254a <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002544:	f06f 0303 	mvn.w	r3, #3
 8002548:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800254a:	68fb      	ldr	r3, [r7, #12]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	200008a4 	.word	0x200008a4

08002558 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af02      	add	r7, sp, #8
 800255e:	4603      	mov	r3, r0
 8002560:	6039      	str	r1, [r7, #0]
 8002562:	80fb      	strh	r3, [r7, #6]
 8002564:	4613      	mov	r3, r2
 8002566:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800256c:	88bb      	ldrh	r3, [r7, #4]
 800256e:	88f9      	ldrh	r1, [r7, #6]
 8002570:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002574:	9200      	str	r2, [sp, #0]
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	480b      	ldr	r0, [pc, #44]	@ (80025a8 <BSP_I2C1_Recv+0x50>)
 800257a:	f00b f8d5 	bl	800d728 <HAL_I2C_Master_Receive>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00c      	beq.n	800259e <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8002584:	4808      	ldr	r0, [pc, #32]	@ (80025a8 <BSP_I2C1_Recv+0x50>)
 8002586:	f00b fe3b 	bl	800e200 <HAL_I2C_GetError>
 800258a:	4603      	mov	r3, r0
 800258c:	2b04      	cmp	r3, #4
 800258e:	d003      	beq.n	8002598 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002590:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	e002      	b.n	800259e <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002598:	f06f 0303 	mvn.w	r3, #3
 800259c:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800259e:	68fb      	ldr	r3, [r7, #12]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	200008a4 	.word	0x200008a4

080025ac <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80025b0:	f009 feba 	bl	800c328 <HAL_GetTick>
 80025b4:	4603      	mov	r3, r0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a14      	ldr	r2, [pc, #80]	@ (800261c <MX_I2C1_Init+0x60>)
 80025cc:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a13      	ldr	r2, [pc, #76]	@ (8002620 <MX_I2C1_Init+0x64>)
 80025d2:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025e6:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f00a fe0b 	bl	800d21c <HAL_I2C_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002610:	7bfb      	ldrb	r3, [r7, #15]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40005400 	.word	0x40005400
 8002620:	000186a0 	.word	0x000186a0

08002624 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	@ 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262c:	2300      	movs	r3, #0
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	4b1e      	ldr	r3, [pc, #120]	@ (80026ac <I2C1_MspInit+0x88>)
 8002632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002634:	4a1d      	ldr	r2, [pc, #116]	@ (80026ac <I2C1_MspInit+0x88>)
 8002636:	f043 0302 	orr.w	r3, r3, #2
 800263a:	6313      	str	r3, [r2, #48]	@ 0x30
 800263c:	4b1b      	ldr	r3, [pc, #108]	@ (80026ac <I2C1_MspInit+0x88>)
 800263e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002648:	2340      	movs	r3, #64	@ 0x40
 800264a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800264c:	2312      	movs	r3, #18
 800264e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002654:	2303      	movs	r3, #3
 8002656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8002658:	2304      	movs	r3, #4
 800265a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800265c:	f107 0314 	add.w	r3, r7, #20
 8002660:	4619      	mov	r1, r3
 8002662:	4813      	ldr	r0, [pc, #76]	@ (80026b0 <I2C1_MspInit+0x8c>)
 8002664:	f00a fb40 	bl	800cce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002668:	2380      	movs	r3, #128	@ 0x80
 800266a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800266c:	2312      	movs	r3, #18
 800266e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002674:	2303      	movs	r3, #3
 8002676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002678:	2304      	movs	r3, #4
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	4619      	mov	r1, r3
 8002682:	480b      	ldr	r0, [pc, #44]	@ (80026b0 <I2C1_MspInit+0x8c>)
 8002684:	f00a fb30 	bl	800cce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002688:	2300      	movs	r3, #0
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	4b07      	ldr	r3, [pc, #28]	@ (80026ac <I2C1_MspInit+0x88>)
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	4a06      	ldr	r2, [pc, #24]	@ (80026ac <I2C1_MspInit+0x88>)
 8002692:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002696:	6413      	str	r3, [r2, #64]	@ 0x40
 8002698:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <I2C1_MspInit+0x88>)
 800269a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80026a4:	bf00      	nop
 80026a6:	3728      	adds	r7, #40	@ 0x28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40020400 	.word	0x40020400

080026b4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80026bc:	4b08      	ldr	r3, [pc, #32]	@ (80026e0 <I2C1_MspDeInit+0x2c>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	4a07      	ldr	r2, [pc, #28]	@ (80026e0 <I2C1_MspDeInit+0x2c>)
 80026c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80026c6:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80026c8:	2140      	movs	r1, #64	@ 0x40
 80026ca:	4806      	ldr	r0, [pc, #24]	@ (80026e4 <I2C1_MspDeInit+0x30>)
 80026cc:	f00a fc90 	bl	800cff0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80026d0:	2180      	movs	r1, #128	@ 0x80
 80026d2:	4804      	ldr	r0, [pc, #16]	@ (80026e4 <I2C1_MspDeInit+0x30>)
 80026d4:	f00a fc8c 	bl	800cff0 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40020400 	.word	0x40020400

080026e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	e00a      	b.n	8002710 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026fa:	f3af 8000 	nop.w
 80026fe:	4601      	mov	r1, r0
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	60ba      	str	r2, [r7, #8]
 8002706:	b2ca      	uxtb	r2, r1
 8002708:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	3301      	adds	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	429a      	cmp	r2, r3
 8002716:	dbf0      	blt.n	80026fa <_read+0x12>
  }

  return len;
 8002718:	687b      	ldr	r3, [r7, #4]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	e009      	b.n	8002748 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	60ba      	str	r2, [r7, #8]
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f009 fd29 	bl	800c194 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	3301      	adds	r3, #1
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	429a      	cmp	r2, r3
 800274e:	dbf1      	blt.n	8002734 <_write+0x12>
  }
  return len;
 8002750:	687b      	ldr	r3, [r7, #4]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <_close>:

int _close(int file)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002762:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002766:	4618      	mov	r0, r3
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002782:	605a      	str	r2, [r3, #4]
  return 0;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <_isatty>:

int _isatty(int file)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800279a:	2301      	movs	r3, #1
}
 800279c:	4618      	mov	r0, r3
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027cc:	4a14      	ldr	r2, [pc, #80]	@ (8002820 <_sbrk+0x5c>)
 80027ce:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <_sbrk+0x60>)
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027d8:	4b13      	ldr	r3, [pc, #76]	@ (8002828 <_sbrk+0x64>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d102      	bne.n	80027e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e0:	4b11      	ldr	r3, [pc, #68]	@ (8002828 <_sbrk+0x64>)
 80027e2:	4a12      	ldr	r2, [pc, #72]	@ (800282c <_sbrk+0x68>)
 80027e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027e6:	4b10      	ldr	r3, [pc, #64]	@ (8002828 <_sbrk+0x64>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4413      	add	r3, r2
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d207      	bcs.n	8002804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f4:	f013 fad2 	bl	8015d9c <__errno>
 80027f8:	4603      	mov	r3, r0
 80027fa:	220c      	movs	r2, #12
 80027fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002802:	e009      	b.n	8002818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002804:	4b08      	ldr	r3, [pc, #32]	@ (8002828 <_sbrk+0x64>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800280a:	4b07      	ldr	r3, [pc, #28]	@ (8002828 <_sbrk+0x64>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	4a05      	ldr	r2, [pc, #20]	@ (8002828 <_sbrk+0x64>)
 8002814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002816:	68fb      	ldr	r3, [r7, #12]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20018000 	.word	0x20018000
 8002824:	00000400 	.word	0x00000400
 8002828:	200008fc 	.word	0x200008fc
 800282c:	20000ed8 	.word	0x20000ed8

08002830 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002834:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <SystemInit+0x20>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283a:	4a05      	ldr	r2, [pc, #20]	@ (8002850 <SystemInit+0x20>)
 800283c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002840:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002854:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800288c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002858:	f7ff ffea 	bl	8002830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800285c:	480c      	ldr	r0, [pc, #48]	@ (8002890 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800285e:	490d      	ldr	r1, [pc, #52]	@ (8002894 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002860:	4a0d      	ldr	r2, [pc, #52]	@ (8002898 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002864:	e002      	b.n	800286c <LoopCopyDataInit>

08002866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800286a:	3304      	adds	r3, #4

0800286c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800286c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800286e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002870:	d3f9      	bcc.n	8002866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002872:	4a0a      	ldr	r2, [pc, #40]	@ (800289c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002874:	4c0a      	ldr	r4, [pc, #40]	@ (80028a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002878:	e001      	b.n	800287e <LoopFillZerobss>

0800287a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800287a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800287c:	3204      	adds	r2, #4

0800287e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800287e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002880:	d3fb      	bcc.n	800287a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002882:	f013 fa91 	bl	8015da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002886:	f7fe fb7d 	bl	8000f84 <main>
  bx  lr    
 800288a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800288c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002894:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 8002898:	08018748 	.word	0x08018748
  ldr r2, =_sbss
 800289c:	20000284 	.word	0x20000284
  ldr r4, =_ebss
 80028a0:	20000ed8 	.word	0x20000ed8

080028a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028a4:	e7fe      	b.n	80028a4 <ADC_IRQHandler>
	...

080028a8 <LIS2DUXS12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_RegisterBusIO(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_IO_t *pIO)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d103      	bne.n	80028c4 <LIS2DUXS12_RegisterBusIO+0x1c>
  {
    ret = LIS2DUXS12_ERROR;
 80028bc:	f04f 33ff 	mov.w	r3, #4294967295
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	e088      	b.n	80029d6 <LIS2DUXS12_RegisterBusIO+0x12e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	7b1a      	ldrb	r2, [r3, #12]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	695a      	ldr	r2, [r3, #20]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	699a      	ldr	r2, [r3, #24]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	619a      	str	r2, [r3, #24]
    pObj->IO.Delay     = pIO->Delay;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	69da      	ldr	r2, [r3, #28]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	61da      	str	r2, [r3, #28]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a36      	ldr	r2, [pc, #216]	@ (80029e0 <LIS2DUXS12_RegisterBusIO+0x138>)
 8002908:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a35      	ldr	r2, [pc, #212]	@ (80029e4 <LIS2DUXS12_RegisterBusIO+0x13c>)
 800290e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	69da      	ldr	r2, [r3, #28]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d103      	bne.n	800292e <LIS2DUXS12_RegisterBusIO+0x86>
    {
      ret = LIS2DUXS12_ERROR;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	e053      	b.n	80029d6 <LIS2DUXS12_RegisterBusIO+0x12e>
    }
    else if (pObj->IO.Init() != LIS2DUXS12_OK)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4798      	blx	r3
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <LIS2DUXS12_RegisterBusIO+0x9a>
    {
      ret = LIS2DUXS12_ERROR;
 800293a:	f04f 33ff 	mov.w	r3, #4294967295
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	e049      	b.n	80029d6 <LIS2DUXS12_RegisterBusIO+0x12e>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DUXS12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d11c      	bne.n	8002984 <LIS2DUXS12_RegisterBusIO+0xdc>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002950:	2b00      	cmp	r3, #0
 8002952:	d140      	bne.n	80029d6 <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          /* Exit from deep power down only the first time in SPI mode */
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f8f4 	bl	8002b42 <LIS2DUXS12_ExitDeepPowerDownSPI>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <LIS2DUXS12_RegisterBusIO+0xbe>
          {
            ret = LIS2DUXS12_ERROR;
 8002960:	f04f 33ff 	mov.w	r3, #4294967295
 8002964:	60fb      	str	r3, [r7, #12]
          }
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x50;
 8002966:	2350      	movs	r3, #80	@ 0x50
 8002968:	72fb      	strb	r3, [r7, #11]

          if (LIS2DUXS12_Write_Reg(pObj, LIS2DUXS12_CTRL1, data) != LIS2DUXS12_OK)
 800296a:	7afb      	ldrb	r3, [r7, #11]
 800296c:	461a      	mov	r2, r3
 800296e:	2110      	movs	r1, #16
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f000 fbf6 	bl	8003162 <LIS2DUXS12_Write_Reg>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d02c      	beq.n	80029d6 <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 800297c:	f04f 33ff 	mov.w	r3, #4294967295
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	e028      	b.n	80029d6 <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_SPI_4WIRES_BUS)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d10e      	bne.n	80029aa <LIS2DUXS12_RegisterBusIO+0x102>
      {
        /* Exit from deep power down only the first time in SPI mode */
        if (pObj->is_initialized == 0U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002992:	2b00      	cmp	r3, #0
 8002994:	d11f      	bne.n	80029d6 <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f8d3 	bl	8002b42 <LIS2DUXS12_ExitDeepPowerDownSPI>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d019      	beq.n	80029d6 <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 80029a2:	f04f 33ff 	mov.w	r3, #4294967295
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	e015      	b.n	80029d6 <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_I2C_BUS)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10e      	bne.n	80029d0 <LIS2DUXS12_RegisterBusIO+0x128>
      {
        /* Exit from deep power down only the first time in I2C mode */
        if (pObj->is_initialized == 0U)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10c      	bne.n	80029d6 <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          if (LIS2DUXS12_ExitDeepPowerDownI2C(pObj) != LIS2DUXS12_OK)
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f8ab 	bl	8002b18 <LIS2DUXS12_ExitDeepPowerDownI2C>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d006      	beq.n	80029d6 <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 80029c8:	f04f 33ff 	mov.w	r3, #4294967295
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	e002      	b.n	80029d6 <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else
      {
        ret = LIS2DUXS12_ERROR;
 80029d0:	f04f 33ff 	mov.w	r3, #4294967295
 80029d4:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 80029d6:	68fb      	ldr	r3, [r7, #12]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	0800361d 	.word	0x0800361d
 80029e4:	08003653 	.word	0x08003653

080029e8 <LIS2DUXS12_Init>:
  * @brief  Initialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Init(LIS2DUXS12_Object_t *pObj)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  lis2duxs12_i3c_cfg_t val;

  if(pObj->IO.BusType != LIS2DUXS12_I3C_BUS)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d01f      	beq.n	8002a38 <LIS2DUXS12_Init+0x50>
  {
    /* Disable I3C */
    if (lis2duxs12_i3c_configure_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3320      	adds	r3, #32
 80029fc:	f107 0214 	add.w	r2, r7, #20
 8002a00:	4611      	mov	r1, r2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 fb0a 	bl	800401c <lis2duxs12_i3c_configure_get>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <LIS2DUXS12_Init+0x2c>
    {
      return LIS2DUXS12_ERROR;
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a12:	e05c      	b.n	8002ace <LIS2DUXS12_Init+0xe6>
    }
    val.asf_on = PROPERTY_ENABLE;
 8002a14:	7d7b      	ldrb	r3, [r7, #21]
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	757b      	strb	r3, [r7, #21]
    if (lis2duxs12_i3c_configure_set(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3320      	adds	r3, #32
 8002a20:	f107 0214 	add.w	r2, r7, #20
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f001 fac0 	bl	8003fac <lis2duxs12_i3c_configure_set>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <LIS2DUXS12_Init+0x50>
    {
      return LIS2DUXS12_ERROR;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295
 8002a36:	e04a      	b.n	8002ace <LIS2DUXS12_Init+0xe6>
    }
  }

  /* Set main memory bank */
  if (LIS2DUXS12_Set_Mem_Bank(pObj, (uint8_t)LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 8002a38:	2100      	movs	r1, #0
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fbac 	bl	8003198 <LIS2DUXS12_Set_Mem_Bank>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <LIS2DUXS12_Init+0x64>
  {
    return LIS2DUXS12_ERROR;
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4a:	e040      	b.n	8002ace <LIS2DUXS12_Init+0xe6>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. Enable BDU. */
  if (lis2duxs12_init_set(&(pObj->Ctx), LIS2DUXS12_SENSOR_ONLY_ON) != LIS2DUXS12_OK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3320      	adds	r3, #32
 8002a50:	2100      	movs	r1, #0
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 fec4 	bl	80037e0 <lis2duxs12_init_set>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <LIS2DUXS12_Init+0x7c>
  {
    return LIS2DUXS12_ERROR;
 8002a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a62:	e034      	b.n	8002ace <LIS2DUXS12_Init+0xe6>
  }

  /* FIFO mode selection */
  lis2duxs12_fifo_mode_t fifo_mode =
 8002a64:	f107 030c 	add.w	r3, r7, #12
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	809a      	strh	r2, [r3, #4]
    .operation = LIS2DUXS12_BYPASS_MODE,
    .store     = LIS2DUXS12_FIFO_1X,
    .watermark = 0,
  };

  if (lis2duxs12_fifo_mode_set(&(pObj->Ctx), fifo_mode) != LIS2DUXS12_OK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f103 0020 	add.w	r0, r3, #32
 8002a74:	f107 030c 	add.w	r3, r7, #12
 8002a78:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a7c:	f001 fb33 	bl	80040e6 <lis2duxs12_fifo_mode_set>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d002      	beq.n	8002a8c <LIS2DUXS12_Init+0xa4>
  {
    return LIS2DUXS12_ERROR;
 8002a86:	f04f 33ff 	mov.w	r3, #4294967295
 8002a8a:	e020      	b.n	8002ace <LIS2DUXS12_Init+0xe6>
  }

  /* Select default output data rate */
  pObj->acc_odr = 100.0f;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a12      	ldr	r2, [pc, #72]	@ (8002ad8 <LIS2DUXS12_Init+0xf0>)
 8002a90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Select default high performance mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_HIGH_PERFORMANCE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2202      	movs	r2, #2
 8002a96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Output data rate: power down, full scale: 2g */
  lis2duxs12_md_t mode =
 8002a9a:	f107 0308 	add.w	r3, r7, #8
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	460a      	mov	r2, r1
 8002aa2:	801a      	strh	r2, [r3, #0]
 8002aa4:	460a      	mov	r2, r1
 8002aa6:	709a      	strb	r2, [r3, #2]
  {
    .odr = LIS2DUXS12_OFF,
    .fs  = LIS2DUXS12_2g,
  };

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3320      	adds	r3, #32
 8002aac:	f107 0208 	add.w	r2, r7, #8
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 ffe2 	bl	8003a7c <lis2duxs12_mode_set>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <LIS2DUXS12_Init+0xdc>
  {
    return LIS2DUXS12_ERROR;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac2:	e004      	b.n	8002ace <LIS2DUXS12_Init+0xe6>
  }

  pObj->is_initialized = 1;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	42c80000 	.word	0x42c80000

08002adc <LIS2DUXS12_DeInit>:
  * @brief  Deinitialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_DeInit(LIS2DUXS12_Object_t *pObj)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DUXS12_ACC_Disable(pObj) != LIS2DUXS12_OK)
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f8ad 	bl	8002c44 <LIS2DUXS12_ACC_Disable>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <LIS2DUXS12_DeInit+0x1a>
  {
    return LIS2DUXS12_ERROR;
 8002af0:	f04f 33ff 	mov.w	r3, #4294967295
 8002af4:	e00c      	b.n	8002b10 <LIS2DUXS12_DeInit+0x34>
  }

  /* Reset output data rate */
  pObj->acc_odr = 0.0f;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set low power mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_LOW_POWER;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 0;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <LIS2DUXS12_ExitDeepPowerDownI2C>:
  * @brief  Exit from deep power down in I2C
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownI2C(LIS2DUXS12_Object_t *pObj)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint8_t val;

  /* Perform dummy read in order to exit from deep power down in I2C mode.
   * NOTE: No return value check - expected first read fail. */
  (void)lis2duxs12_device_id_get(&(pObj->Ctx), &val);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3320      	adds	r3, #32
 8002b24:	f107 020f 	add.w	r2, r7, #15
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fe46 	bl	80037bc <lis2duxs12_device_id_get>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b34:	2019      	movs	r0, #25
 8002b36:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <LIS2DUXS12_ExitDeepPowerDownSPI>:
  * @brief  Exit from deep power down in SPI
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownSPI(LIS2DUXS12_Object_t *pObj)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  /* Write IF_WAKE_UP register to exit from deep power down in SPI mode*/
  (void)lis2duxs12_exit_deep_power_down(&(pObj->Ctx));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3320      	adds	r3, #32
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f001 f960 	bl	8003e14 <lis2duxs12_exit_deep_power_down>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b58:	2019      	movs	r0, #25
 8002b5a:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <LIS2DUXS12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ReadID(LIS2DUXS12_Object_t *pObj, uint8_t *Id)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	6039      	str	r1, [r7, #0]
  uint8_t val;

  if (lis2duxs12_device_id_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3320      	adds	r3, #32
 8002b74:	f107 020f 	add.w	r2, r7, #15
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fe1e 	bl	80037bc <lis2duxs12_device_id_get>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <LIS2DUXS12_ReadID+0x26>
  {
    return LIS2DUXS12_ERROR;
 8002b86:	f04f 33ff 	mov.w	r3, #4294967295
 8002b8a:	e003      	b.n	8002b94 <LIS2DUXS12_ReadID+0x2e>
  }

  *Id = val;
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	701a      	strb	r2, [r3, #0]

  return LIS2DUXS12_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <LIS2DUXS12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DUXS12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_GetCapabilities(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Capabilities_t *Capabilities)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc        = 1;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro       = 0;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto    = 0;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower   = 1;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS  = 0;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS   = 16;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2210      	movs	r2, #16
 8002bc8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS   = 0;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr = 0.0f;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr  = 800.0f;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	4a06      	ldr	r2, [pc, #24]	@ (8002bf4 <LIS2DUXS12_GetCapabilities+0x58>)
 8002bdc:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr  = 0.0f;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	619a      	str	r2, [r3, #24]
  return LIS2DUXS12_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	44480000 	.word	0x44480000

08002bf8 <LIS2DUXS12_ACC_Enable>:
  * @brief  Enable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Enable(LIS2DUXS12_Object_t *pObj)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <LIS2DUXS12_ACC_Enable+0x16>
  {
    return LIS2DUXS12_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e016      	b.n	8002c3c <LIS2DUXS12_ACC_Enable+0x44>
  }

  /* Output data rate selection. */
  if (LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->power_mode) != LIS2DUXS12_OK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fadb 	bl	80031dc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <LIS2DUXS12_ACC_Enable+0x3a>
  {
    return LIS2DUXS12_ERROR;
 8002c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c30:	e004      	b.n	8002c3c <LIS2DUXS12_ACC_Enable+0x44>
  }

  pObj->acc_is_enabled = 1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <LIS2DUXS12_ACC_Disable>:
  * @brief  Disable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Disable(LIS2DUXS12_Object_t *pObj)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  float_t Odr;
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <LIS2DUXS12_ACC_Disable+0x16>
  {
    return LIS2DUXS12_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e046      	b.n	8002ce8 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (LIS2DUXS12_ACC_GetOutputDataRate(pObj, &Odr) != LIS2DUXS12_OK)
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f893 	bl	8002d8c <LIS2DUXS12_ACC_GetOutputDataRate>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <LIS2DUXS12_ACC_Disable+0x2e>
  {
    return LIS2DUXS12_ERROR;
 8002c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c70:	e03a      	b.n	8002ce8 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (Odr == 800.0f)
 8002c72:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c76:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002cf0 <LIS2DUXS12_ACC_Disable+0xac>
 8002c7a:	eef4 7a47 	vcmp.f32	s15, s14
 8002c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c82:	d10e      	bne.n	8002ca2 <LIS2DUXS12_ACC_Disable+0x5e>
  {
    if (LIS2DUXS12_ACC_SetOutputDataRate(pObj, 400.0f) != LIS2DUXS12_OK)
 8002c84:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8002cf4 <LIS2DUXS12_ACC_Disable+0xb0>
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 f94b 	bl	8002f24 <LIS2DUXS12_ACC_SetOutputDataRate>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <LIS2DUXS12_ACC_Disable+0x56>
    {
      return LIS2DUXS12_ERROR;
 8002c94:	f04f 33ff 	mov.w	r3, #4294967295
 8002c98:	e026      	b.n	8002ce8 <LIS2DUXS12_ACC_Disable+0xa4>
    }

    /* Wait for 3 ms based on datasheet */
    pObj->Ctx.mdelay(3);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9e:	2003      	movs	r0, #3
 8002ca0:	4798      	blx	r3
  }

  /* Output data rate selection - power down. */
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3320      	adds	r3, #32
 8002ca6:	f107 0208 	add.w	r2, r7, #8
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 ffa1 	bl	8003bf4 <lis2duxs12_mode_get>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d002      	beq.n	8002cbe <LIS2DUXS12_ACC_Disable+0x7a>
  {
    return LIS2DUXS12_ERROR;
 8002cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cbc:	e014      	b.n	8002ce8 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  mode.odr = LIS2DUXS12_OFF;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	723b      	strb	r3, [r7, #8]

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3320      	adds	r3, #32
 8002cc6:	f107 0208 	add.w	r2, r7, #8
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 fed5 	bl	8003a7c <lis2duxs12_mode_set>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <LIS2DUXS12_ACC_Disable+0x9a>
  {
    return LIS2DUXS12_ERROR;
 8002cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cdc:	e004      	b.n	8002ce8 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  pObj->acc_is_enabled = 0;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	44480000 	.word	0x44480000
 8002cf4:	43c80000 	.word	0x43c80000

08002cf8 <LIS2DUXS12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetSensitivity(LIS2DUXS12_Object_t *pObj, float_t *Sensitivity)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3320      	adds	r3, #32
 8002d0a:	f107 0208 	add.w	r2, r7, #8
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 ff6f 	bl	8003bf4 <lis2duxs12_mode_get>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <LIS2DUXS12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8002d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d20:	e026      	b.n	8002d70 <LIS2DUXS12_ACC_GetSensitivity+0x78>
  }

  switch (mode.fs)
 8002d22:	7a7b      	ldrb	r3, [r7, #9]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d81b      	bhi.n	8002d60 <LIS2DUXS12_ACC_GetSensitivity+0x68>
 8002d28:	a201      	add	r2, pc, #4	@ (adr r2, 8002d30 <LIS2DUXS12_ACC_GetSensitivity+0x38>)
 8002d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2e:	bf00      	nop
 8002d30:	08002d41 	.word	0x08002d41
 8002d34:	08002d49 	.word	0x08002d49
 8002d38:	08002d51 	.word	0x08002d51
 8002d3c:	08002d59 	.word	0x08002d59
  {
    case LIS2DUXS12_2g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_2G;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	4a0d      	ldr	r2, [pc, #52]	@ (8002d78 <LIS2DUXS12_ACC_GetSensitivity+0x80>)
 8002d44:	601a      	str	r2, [r3, #0]
      break;
 8002d46:	e012      	b.n	8002d6e <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_4g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_4G;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4a0c      	ldr	r2, [pc, #48]	@ (8002d7c <LIS2DUXS12_ACC_GetSensitivity+0x84>)
 8002d4c:	601a      	str	r2, [r3, #0]
      break;
 8002d4e:	e00e      	b.n	8002d6e <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_8g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_8G;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	4a0b      	ldr	r2, [pc, #44]	@ (8002d80 <LIS2DUXS12_ACC_GetSensitivity+0x88>)
 8002d54:	601a      	str	r2, [r3, #0]
      break;
 8002d56:	e00a      	b.n	8002d6e <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_16g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_16G;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d84 <LIS2DUXS12_ACC_GetSensitivity+0x8c>)
 8002d5c:	601a      	str	r2, [r3, #0]
      break;
 8002d5e:	e006      	b.n	8002d6e <LIS2DUXS12_ACC_GetSensitivity+0x76>

    default:
      *Sensitivity = -1.0f;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	4a09      	ldr	r2, [pc, #36]	@ (8002d88 <LIS2DUXS12_ACC_GetSensitivity+0x90>)
 8002d64:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6a:	60fb      	str	r3, [r7, #12]
      break;
 8002d6c:	bf00      	nop
  }

  return ret;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	3d79db23 	.word	0x3d79db23
 8002d7c:	3df9db23 	.word	0x3df9db23
 8002d80:	3e79db23 	.word	0x3e79db23
 8002d84:	3ef9db23 	.word	0x3ef9db23
 8002d88:	bf800000 	.word	0xbf800000

08002d8c <LIS2DUXS12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t *Odr)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual output data rate from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3320      	adds	r3, #32
 8002d9e:	f107 0208 	add.w	r2, r7, #8
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 ff25 	bl	8003bf4 <lis2duxs12_mode_get>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <LIS2DUXS12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8002db0:	f04f 33ff 	mov.w	r3, #4294967295
 8002db4:	e09b      	b.n	8002eee <LIS2DUXS12_ACC_GetOutputDataRate+0x162>
  }

  switch (mode.odr)
 8002db6:	7a3b      	ldrb	r3, [r7, #8]
 8002db8:	2b2f      	cmp	r3, #47	@ 0x2f
 8002dba:	f200 8090 	bhi.w	8002ede <LIS2DUXS12_ACC_GetOutputDataRate+0x152>
 8002dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8002dc4 <LIS2DUXS12_ACC_GetOutputDataRate+0x38>)
 8002dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc4:	08002e85 	.word	0x08002e85
 8002dc8:	08002e8f 	.word	0x08002e8f
 8002dcc:	08002e97 	.word	0x08002e97
 8002dd0:	08002eaf 	.word	0x08002eaf
 8002dd4:	08002e9f 	.word	0x08002e9f
 8002dd8:	08002ea7 	.word	0x08002ea7
 8002ddc:	08002eaf 	.word	0x08002eaf
 8002de0:	08002eb7 	.word	0x08002eb7
 8002de4:	08002ebf 	.word	0x08002ebf
 8002de8:	08002ec7 	.word	0x08002ec7
 8002dec:	08002ecf 	.word	0x08002ecf
 8002df0:	08002ed7 	.word	0x08002ed7
 8002df4:	08002edf 	.word	0x08002edf
 8002df8:	08002edf 	.word	0x08002edf
 8002dfc:	08002edf 	.word	0x08002edf
 8002e00:	08002edf 	.word	0x08002edf
 8002e04:	08002edf 	.word	0x08002edf
 8002e08:	08002edf 	.word	0x08002edf
 8002e0c:	08002edf 	.word	0x08002edf
 8002e10:	08002edf 	.word	0x08002edf
 8002e14:	08002e9f 	.word	0x08002e9f
 8002e18:	08002ea7 	.word	0x08002ea7
 8002e1c:	08002eaf 	.word	0x08002eaf
 8002e20:	08002eb7 	.word	0x08002eb7
 8002e24:	08002ebf 	.word	0x08002ebf
 8002e28:	08002ec7 	.word	0x08002ec7
 8002e2c:	08002ecf 	.word	0x08002ecf
 8002e30:	08002ed7 	.word	0x08002ed7
 8002e34:	08002edf 	.word	0x08002edf
 8002e38:	08002edf 	.word	0x08002edf
 8002e3c:	08002edf 	.word	0x08002edf
 8002e40:	08002edf 	.word	0x08002edf
 8002e44:	08002edf 	.word	0x08002edf
 8002e48:	08002edf 	.word	0x08002edf
 8002e4c:	08002edf 	.word	0x08002edf
 8002e50:	08002edf 	.word	0x08002edf
 8002e54:	08002edf 	.word	0x08002edf
 8002e58:	08002edf 	.word	0x08002edf
 8002e5c:	08002edf 	.word	0x08002edf
 8002e60:	08002edf 	.word	0x08002edf
 8002e64:	08002edf 	.word	0x08002edf
 8002e68:	08002edf 	.word	0x08002edf
 8002e6c:	08002edf 	.word	0x08002edf
 8002e70:	08002edf 	.word	0x08002edf
 8002e74:	08002edf 	.word	0x08002edf
 8002e78:	08002edf 	.word	0x08002edf
 8002e7c:	08002e85 	.word	0x08002e85
 8002e80:	08002e85 	.word	0x08002e85
  {
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_TRIG_PIN:
    case LIS2DUXS12_TRIG_SW:
      *Odr = 0.0f;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
      break;
 8002e8c:	e02e      	b.n	8002eec <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_1Hz6_ULP:
      *Odr = 1.6f;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	4a19      	ldr	r2, [pc, #100]	@ (8002ef8 <LIS2DUXS12_ACC_GetOutputDataRate+0x16c>)
 8002e92:	601a      	str	r2, [r3, #0]
      break;
 8002e94:	e02a      	b.n	8002eec <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_3Hz_ULP:
      *Odr = 3.0f;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	4a18      	ldr	r2, [pc, #96]	@ (8002efc <LIS2DUXS12_ACC_GetOutputDataRate+0x170>)
 8002e9a:	601a      	str	r2, [r3, #0]
      break;
 8002e9c:	e026      	b.n	8002eec <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_6Hz_LP:
    case LIS2DUXS12_6Hz_HP:
      *Odr = 6.0f;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	4a17      	ldr	r2, [pc, #92]	@ (8002f00 <LIS2DUXS12_ACC_GetOutputDataRate+0x174>)
 8002ea2:	601a      	str	r2, [r3, #0]
      break;
 8002ea4:	e022      	b.n	8002eec <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_12Hz5_LP:
    case LIS2DUXS12_12Hz5_HP:
      *Odr = 12.5f;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	4a16      	ldr	r2, [pc, #88]	@ (8002f04 <LIS2DUXS12_ACC_GetOutputDataRate+0x178>)
 8002eaa:	601a      	str	r2, [r3, #0]
      break;
 8002eac:	e01e      	b.n	8002eec <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_25Hz_ULP:
    case LIS2DUXS12_25Hz_LP:
    case LIS2DUXS12_25Hz_HP:
      *Odr = 25.0f;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	4a15      	ldr	r2, [pc, #84]	@ (8002f08 <LIS2DUXS12_ACC_GetOutputDataRate+0x17c>)
 8002eb2:	601a      	str	r2, [r3, #0]
      break;
 8002eb4:	e01a      	b.n	8002eec <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_50Hz_LP:
    case LIS2DUXS12_50Hz_HP:
      *Odr = 50.0f;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	4a14      	ldr	r2, [pc, #80]	@ (8002f0c <LIS2DUXS12_ACC_GetOutputDataRate+0x180>)
 8002eba:	601a      	str	r2, [r3, #0]
      break;
 8002ebc:	e016      	b.n	8002eec <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_100Hz_LP:
    case LIS2DUXS12_100Hz_HP:
      *Odr = 100.0f;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	4a13      	ldr	r2, [pc, #76]	@ (8002f10 <LIS2DUXS12_ACC_GetOutputDataRate+0x184>)
 8002ec2:	601a      	str	r2, [r3, #0]
      break;
 8002ec4:	e012      	b.n	8002eec <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_200Hz_LP:
    case LIS2DUXS12_200Hz_HP:
      *Odr = 200.0f;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	4a12      	ldr	r2, [pc, #72]	@ (8002f14 <LIS2DUXS12_ACC_GetOutputDataRate+0x188>)
 8002eca:	601a      	str	r2, [r3, #0]
      break;
 8002ecc:	e00e      	b.n	8002eec <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_400Hz_LP:
    case LIS2DUXS12_400Hz_HP:
      *Odr = 400.0f;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	4a11      	ldr	r2, [pc, #68]	@ (8002f18 <LIS2DUXS12_ACC_GetOutputDataRate+0x18c>)
 8002ed2:	601a      	str	r2, [r3, #0]
      break;
 8002ed4:	e00a      	b.n	8002eec <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_800Hz_LP:
    case LIS2DUXS12_800Hz_HP:
      *Odr = 800.0f;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	4a10      	ldr	r2, [pc, #64]	@ (8002f1c <LIS2DUXS12_ACC_GetOutputDataRate+0x190>)
 8002eda:	601a      	str	r2, [r3, #0]
      break;
 8002edc:	e006      	b.n	8002eec <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    default:
      *Odr = -1.0f;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8002f20 <LIS2DUXS12_ACC_GetOutputDataRate+0x194>)
 8002ee2:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8002ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee8:	60fb      	str	r3, [r7, #12]
      break;
 8002eea:	bf00      	nop
  }

  return ret;
 8002eec:	68fb      	ldr	r3, [r7, #12]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	3fcccccd 	.word	0x3fcccccd
 8002efc:	40400000 	.word	0x40400000
 8002f00:	40c00000 	.word	0x40c00000
 8002f04:	41480000 	.word	0x41480000
 8002f08:	41c80000 	.word	0x41c80000
 8002f0c:	42480000 	.word	0x42480000
 8002f10:	42c80000 	.word	0x42c80000
 8002f14:	43480000 	.word	0x43480000
 8002f18:	43c80000 	.word	0x43c80000
 8002f1c:	44480000 	.word	0x44480000
 8002f20:	bf800000 	.word	0xbf800000

08002f24 <LIS2DUXS12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t Odr)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use high performance mode */
  return LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DUXS12_HIGH_PERFORMANCE);
 8002f30:	2102      	movs	r1, #2
 8002f32:	ed97 0a00 	vldr	s0, [r7]
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f805 	bl	8002f46 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>
 8002f3c:	4603      	mov	r3, r0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Odr the output data rate value to be set
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(LIS2DUXS12_Object_t *pObj, float_t Odr, LIS2DUXS12_Power_Mode_t Power)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f52:	460b      	mov	r3, r1
 8002f54:	71fb      	strb	r3, [r7, #7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d108      	bne.n	8002f72 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x2c>
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Power);
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	4619      	mov	r1, r3
 8002f64:	ed97 0a02 	vldr	s0, [r7, #8]
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f937 	bl	80031dc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	e007      	b.n	8002f82 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x3c>
  }
  else
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Power);
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	4619      	mov	r1, r3
 8002f76:	ed97 0a02 	vldr	s0, [r7, #8]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 faac 	bl	80034d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>
 8002f80:	4603      	mov	r3, r0
  }
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <LIS2DUXS12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetFullScale(LIS2DUXS12_Object_t *pObj, int32_t *FullScale)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3320      	adds	r3, #32
 8002f9e:	f107 0208 	add.w	r2, r7, #8
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fe25 	bl	8003bf4 <lis2duxs12_mode_get>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <LIS2DUXS12_ACC_GetFullScale+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8002fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb4:	e027      	b.n	8003006 <LIS2DUXS12_ACC_GetFullScale+0x7a>
  }

  switch (mode.fs)
 8002fb6:	7a7b      	ldrb	r3, [r7, #9]
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d81b      	bhi.n	8002ff4 <LIS2DUXS12_ACC_GetFullScale+0x68>
 8002fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc4 <LIS2DUXS12_ACC_GetFullScale+0x38>)
 8002fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc2:	bf00      	nop
 8002fc4:	08002fd5 	.word	0x08002fd5
 8002fc8:	08002fdd 	.word	0x08002fdd
 8002fcc:	08002fe5 	.word	0x08002fe5
 8002fd0:	08002fed 	.word	0x08002fed
  {
    case LIS2DUXS12_2g:
      *FullScale =  2;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	601a      	str	r2, [r3, #0]
      break;
 8002fda:	e013      	b.n	8003004 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_4g:
      *FullScale =  4;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2204      	movs	r2, #4
 8002fe0:	601a      	str	r2, [r3, #0]
      break;
 8002fe2:	e00f      	b.n	8003004 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_8g:
      *FullScale =  8;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2208      	movs	r2, #8
 8002fe8:	601a      	str	r2, [r3, #0]
      break;
 8002fea:	e00b      	b.n	8003004 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_16g:
      *FullScale = 16;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2210      	movs	r2, #16
 8002ff0:	601a      	str	r2, [r3, #0]
      break;
 8002ff2:	e007      	b.n	8003004 <LIS2DUXS12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8002ffa:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8002ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8003000:	60fb      	str	r3, [r7, #12]
      break;
 8003002:	bf00      	nop
  }

  return ret;
 8003004:	68fb      	ldr	r3, [r7, #12]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop

08003010 <LIS2DUXS12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetFullScale(LIS2DUXS12_Object_t *pObj, int32_t FullScale)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3320      	adds	r3, #32
 800301e:	f107 020c 	add.w	r2, r7, #12
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f000 fde5 	bl	8003bf4 <lis2duxs12_mode_get>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <LIS2DUXS12_ACC_SetFullScale+0x26>
  {
    return LIS2DUXS12_ERROR;
 8003030:	f04f 33ff 	mov.w	r3, #4294967295
 8003034:	e01f      	b.n	8003076 <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
            : (FullScale <= 4) ? LIS2DUXS12_4g
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b02      	cmp	r3, #2
 800303a:	dd0b      	ble.n	8003054 <LIS2DUXS12_ACC_SetFullScale+0x44>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b04      	cmp	r3, #4
 8003040:	dd06      	ble.n	8003050 <LIS2DUXS12_ACC_SetFullScale+0x40>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b08      	cmp	r3, #8
 8003046:	dc01      	bgt.n	800304c <LIS2DUXS12_ACC_SetFullScale+0x3c>
 8003048:	2302      	movs	r3, #2
 800304a:	e004      	b.n	8003056 <LIS2DUXS12_ACC_SetFullScale+0x46>
 800304c:	2303      	movs	r3, #3
 800304e:	e002      	b.n	8003056 <LIS2DUXS12_ACC_SetFullScale+0x46>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <LIS2DUXS12_ACC_SetFullScale+0x46>
 8003054:	2300      	movs	r3, #0
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
 8003056:	737b      	strb	r3, [r7, #13]
            : (FullScale <= 8) ? LIS2DUXS12_8g
            :                    LIS2DUXS12_16g;

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3320      	adds	r3, #32
 800305c:	f107 020c 	add.w	r2, r7, #12
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fd0a 	bl	8003a7c <lis2duxs12_mode_set>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <LIS2DUXS12_ACC_SetFullScale+0x64>
  {
    return LIS2DUXS12_ERROR;
 800306e:	f04f 33ff 	mov.w	r3, #4294967295
 8003072:	e000      	b.n	8003076 <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  return LIS2DUXS12_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <LIS2DUXS12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxesRaw(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_AxesRaw_t *Value)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b088      	sub	sp, #32
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3320      	adds	r3, #32
 800308c:	f107 021c 	add.w	r2, r7, #28
 8003090:	4611      	mov	r1, r2
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fdae 	bl	8003bf4 <lis2duxs12_mode_get>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d002      	beq.n	80030a4 <LIS2DUXS12_ACC_GetAxesRaw+0x26>
  {
    return LIS2DUXS12_ERROR;
 800309e:	f04f 33ff 	mov.w	r3, #4294967295
 80030a2:	e01b      	b.n	80030dc <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3320      	adds	r3, #32
 80030a8:	f107 0208 	add.w	r2, r7, #8
 80030ac:	f107 011c 	add.w	r1, r7, #28
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fecf 	bl	8003e54 <lis2duxs12_xl_data_get>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <LIS2DUXS12_ACC_GetAxesRaw+0x44>
  {
    return LIS2DUXS12_ERROR;
 80030bc:	f04f 33ff 	mov.w	r3, #4294967295
 80030c0:	e00c      	b.n	80030dc <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  Value->x = data.raw[0];
 80030c2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	801a      	strh	r2, [r3, #0]
  Value->y = data.raw[1];
 80030ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	805a      	strh	r2, [r3, #2]
  Value->z = data.raw[2];
 80030d2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	809a      	strh	r2, [r3, #4]

  return LIS2DUXS12_OK;
 80030da:	2300      	movs	r3, #0
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3720      	adds	r7, #32
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <LIS2DUXS12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxes(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Axes_t *Acceleration)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3320      	adds	r3, #32
 80030f2:	f107 021c 	add.w	r2, r7, #28
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fd7b 	bl	8003bf4 <lis2duxs12_mode_get>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <LIS2DUXS12_ACC_GetAxes+0x26>
  {
    return LIS2DUXS12_ERROR;
 8003104:	f04f 33ff 	mov.w	r3, #4294967295
 8003108:	e027      	b.n	800315a <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3320      	adds	r3, #32
 800310e:	f107 0208 	add.w	r2, r7, #8
 8003112:	f107 011c 	add.w	r1, r7, #28
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fe9c 	bl	8003e54 <lis2duxs12_xl_data_get>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <LIS2DUXS12_ACC_GetAxes+0x44>
  {
    return LIS2DUXS12_ERROR;
 8003122:	f04f 33ff 	mov.w	r3, #4294967295
 8003126:	e018      	b.n	800315a <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  Acceleration->x = (int32_t)data.mg[0];
 8003128:	edd7 7a02 	vldr	s15, [r7, #8]
 800312c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003130:	ee17 2a90 	vmov	r2, s15
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)data.mg[1];
 8003138:	edd7 7a03 	vldr	s15, [r7, #12]
 800313c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003140:	ee17 2a90 	vmov	r2, s15
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)data.mg[2];
 8003148:	edd7 7a04 	vldr	s15, [r7, #16]
 800314c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003150:	ee17 2a90 	vmov	r2, s15
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	609a      	str	r2, [r3, #8]

  return LIS2DUXS12_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3720      	adds	r7, #32
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <LIS2DUXS12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Write_Reg(LIS2DUXS12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b082      	sub	sp, #8
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	460b      	mov	r3, r1
 800316c:	70fb      	strb	r3, [r7, #3]
 800316e:	4613      	mov	r3, r2
 8003170:	70bb      	strb	r3, [r7, #2]
  if (lis2duxs12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DUXS12_OK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f103 0020 	add.w	r0, r3, #32
 8003178:	1cba      	adds	r2, r7, #2
 800317a:	78f9      	ldrb	r1, [r7, #3]
 800317c:	2301      	movs	r3, #1
 800317e:	f000 faa0 	bl	80036c2 <lis2duxs12_write_reg>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <LIS2DUXS12_Write_Reg+0x2c>
  {
    return LIS2DUXS12_ERROR;
 8003188:	f04f 33ff 	mov.w	r3, #4294967295
 800318c:	e000      	b.n	8003190 <LIS2DUXS12_Write_Reg+0x2e>
  }

  return LIS2DUXS12_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <LIS2DUXS12_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LIS2DUXS12_MAIN_MEM_BANK, 1 - LIS2DUXS12_EMBED_FUNC_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Set_Mem_Bank(LIS2DUXS12_Object_t *pObj, uint8_t Val)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LIS2DUXS12_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]
  lis2duxs12_mem_bank_t reg;

  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
        :               LIS2DUXS12_MAIN_MEM_BANK;
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	bf0c      	ite	eq
 80031ae:	2301      	moveq	r3, #1
 80031b0:	2300      	movne	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
 80031b4:	72fb      	strb	r3, [r7, #11]

  if (lis2duxs12_mem_bank_set(&(pObj->Ctx), reg) != LIS2DUXS12_OK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3320      	adds	r3, #32
 80031ba:	7afa      	ldrb	r2, [r7, #11]
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 ff6b 	bl	800409a <lis2duxs12_mem_bank_set>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <LIS2DUXS12_Set_Mem_Bank+0x38>
  {
    ret = LIS2DUXS12_ERROR;
 80031ca:	f04f 33ff 	mov.w	r3, #4294967295
 80031ce:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80031d0:	68fb      	ldr	r3, [r7, #12]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80031e8:	460b      	mov	r3, r1
 80031ea:	71fb      	strb	r3, [r7, #7]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	3320      	adds	r3, #32
 80031f0:	f107 0214 	add.w	r2, r7, #20
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fcfc 	bl	8003bf4 <lis2duxs12_mode_get>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c>
  {
    return LIS2DUXS12_ERROR;
 8003202:	f04f 33ff 	mov.w	r3, #4294967295
 8003206:	e142      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d118      	bne.n	8003240 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x64>
  {
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
               : (Odr <= 3.0f) ? LIS2DUXS12_3Hz_ULP
 800320e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003212:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8003498 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2bc>
 8003216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321e:	d801      	bhi.n	8003224 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x48>
 8003220:	2301      	movs	r3, #1
 8003222:	e00b      	b.n	800323c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 8003224:	edd7 7a02 	vldr	s15, [r7, #8]
 8003228:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800322c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003234:	d801      	bhi.n	800323a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x5e>
 8003236:	2302      	movs	r3, #2
 8003238:	e000      	b.n	800323c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 800323a:	2303      	movs	r3, #3
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
 800323c:	753b      	strb	r3, [r7, #20]
 800323e:	e0a4      	b.n	800338a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               :                 LIS2DUXS12_25Hz_ULP;
  }
  else if (Power == LIS2DUXS12_LOW_POWER)
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d14f      	bne.n	80032e6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x10a>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_LP
 8003246:	edd7 7a02 	vldr	s15, [r7, #8]
 800324a:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800324e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003256:	d801      	bhi.n	800325c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x80>
 8003258:	2304      	movs	r3, #4
 800325a:	e042      	b.n	80032e2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 800325c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003260:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8003264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326c:	d801      	bhi.n	8003272 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x96>
 800326e:	2305      	movs	r3, #5
 8003270:	e037      	b.n	80032e2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8003272:	edd7 7a02 	vldr	s15, [r7, #8]
 8003276:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800327a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800327e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003282:	d801      	bhi.n	8003288 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xac>
 8003284:	2306      	movs	r3, #6
 8003286:	e02c      	b.n	80032e2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8003288:	edd7 7a02 	vldr	s15, [r7, #8]
 800328c:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 800349c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 8003290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003298:	d801      	bhi.n	800329e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xc2>
 800329a:	2307      	movs	r3, #7
 800329c:	e021      	b.n	80032e2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 800329e:	edd7 7a02 	vldr	s15, [r7, #8]
 80032a2:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 80034a0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 80032a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ae:	d801      	bhi.n	80032b4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80032b0:	2308      	movs	r3, #8
 80032b2:	e016      	b.n	80032e2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80032b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80032b8:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80034a4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 80032bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c4:	d801      	bhi.n	80032ca <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xee>
 80032c6:	2309      	movs	r3, #9
 80032c8:	e00b      	b.n	80032e2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80032ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80032ce:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 80034a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 80032d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032da:	d801      	bhi.n	80032e0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x104>
 80032dc:	230a      	movs	r3, #10
 80032de:	e000      	b.n	80032e2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80032e0:	230b      	movs	r3, #11
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
 80032e2:	753b      	strb	r3, [r7, #20]
 80032e4:	e051      	b.n	800338a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               : (Odr <= 100.0f) ? LIS2DUXS12_100Hz_LP
               : (Odr <= 200.0f) ? LIS2DUXS12_200Hz_LP
               : (Odr <= 400.0f) ? LIS2DUXS12_400Hz_LP
               :                   LIS2DUXS12_800Hz_LP;
  }
  else if (Power == LIS2DUXS12_HIGH_PERFORMANCE)
 80032e6:	79fb      	ldrb	r3, [r7, #7]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d14e      	bne.n	800338a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_HP
 80032ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80032f0:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80032f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fc:	d801      	bhi.n	8003302 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x126>
 80032fe:	2314      	movs	r3, #20
 8003300:	e042      	b.n	8003388 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003302:	edd7 7a02 	vldr	s15, [r7, #8]
 8003306:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800330a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800330e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003312:	d801      	bhi.n	8003318 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8003314:	2315      	movs	r3, #21
 8003316:	e037      	b.n	8003388 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003318:	edd7 7a02 	vldr	s15, [r7, #8]
 800331c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8003320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003328:	d801      	bhi.n	800332e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x152>
 800332a:	2316      	movs	r3, #22
 800332c:	e02c      	b.n	8003388 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800332e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003332:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800349c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 8003336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800333a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333e:	d801      	bhi.n	8003344 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8003340:	2317      	movs	r3, #23
 8003342:	e021      	b.n	8003388 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003344:	edd7 7a02 	vldr	s15, [r7, #8]
 8003348:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80034a0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 800334c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003354:	d801      	bhi.n	800335a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8003356:	2318      	movs	r3, #24
 8003358:	e016      	b.n	8003388 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800335a:	edd7 7a02 	vldr	s15, [r7, #8]
 800335e:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 80034a4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 8003362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336a:	d801      	bhi.n	8003370 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x194>
 800336c:	2319      	movs	r3, #25
 800336e:	e00b      	b.n	8003388 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003370:	edd7 7a02 	vldr	s15, [r7, #8]
 8003374:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80034a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 8003378:	eef4 7ac7 	vcmpe.f32	s15, s14
 800337c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003380:	d801      	bhi.n	8003386 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8003382:	231a      	movs	r3, #26
 8003384:	e000      	b.n	8003388 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003386:	231b      	movs	r3, #27
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
 8003388:	753b      	strb	r3, [r7, #20]
  else
  {
    /* Do nothing */
  }

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3320      	adds	r3, #32
 800338e:	f107 0214 	add.w	r2, r7, #20
 8003392:	4611      	mov	r1, r2
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fb71 	bl	8003a7c <lis2duxs12_mode_set>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d002      	beq.n	80033a6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ca>
  {
    return LIS2DUXS12_ERROR;
 80033a0:	f04f 33ff 	mov.w	r3, #4294967295
 80033a4:	e073      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Odr value */
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 80033a6:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d05b      	beq.n	8003464 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x288>
 80033ac:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d056      	beq.n	8003460 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x284>
 80033b2:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d051      	beq.n	800345c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x280>
 80033b8:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 80033ba:	2b14      	cmp	r3, #20
 80033bc:	d04c      	beq.n	8003458 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x27c>
 80033be:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 80033c0:	2b05      	cmp	r3, #5
 80033c2:	d047      	beq.n	8003454 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x278>
 80033c4:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 80033c6:	2b15      	cmp	r3, #21
 80033c8:	d042      	beq.n	8003450 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x274>
 80033ca:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d03d      	beq.n	800344c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x270>
 80033d0:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	d038      	beq.n	8003448 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x26c>
 80033d6:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 80033d8:	2b16      	cmp	r3, #22
 80033da:	d033      	beq.n	8003444 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x268>
 80033dc:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 80033de:	2b07      	cmp	r3, #7
 80033e0:	d02e      	beq.n	8003440 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x264>
 80033e2:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 80033e4:	2b17      	cmp	r3, #23
 80033e6:	d029      	beq.n	800343c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x260>
 80033e8:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d024      	beq.n	8003438 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x25c>
 80033ee:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 80033f0:	2b18      	cmp	r3, #24
 80033f2:	d01f      	beq.n	8003434 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x258>
 80033f4:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 80033f6:	2b09      	cmp	r3, #9
 80033f8:	d01a      	beq.n	8003430 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x254>
 80033fa:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 80033fc:	2b19      	cmp	r3, #25
 80033fe:	d015      	beq.n	800342c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x250>
 8003400:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 8003402:	2b0a      	cmp	r3, #10
 8003404:	d010      	beq.n	8003428 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x24c>
 8003406:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 8003408:	2b1a      	cmp	r3, #26
 800340a:	d00b      	beq.n	8003424 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x248>
 800340c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 800340e:	2b0b      	cmp	r3, #11
 8003410:	d006      	beq.n	8003420 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x244>
 8003412:	7d3b      	ldrb	r3, [r7, #20]
                  :                                     -1.0f;
 8003414:	2b1b      	cmp	r3, #27
 8003416:	d101      	bne.n	800341c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x240>
 8003418:	4b24      	ldr	r3, [pc, #144]	@ (80034ac <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 800341a:	e024      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 800341c:	4b24      	ldr	r3, [pc, #144]	@ (80034b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d4>)
 800341e:	e022      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 8003420:	4b22      	ldr	r3, [pc, #136]	@ (80034ac <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 8003422:	e020      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 8003424:	4b23      	ldr	r3, [pc, #140]	@ (80034b4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 8003426:	e01e      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 8003428:	4b22      	ldr	r3, [pc, #136]	@ (80034b4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 800342a:	e01c      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 800342c:	4b22      	ldr	r3, [pc, #136]	@ (80034b8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 800342e:	e01a      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 8003430:	4b21      	ldr	r3, [pc, #132]	@ (80034b8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 8003432:	e018      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 8003434:	4b21      	ldr	r3, [pc, #132]	@ (80034bc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 8003436:	e016      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 8003438:	4b20      	ldr	r3, [pc, #128]	@ (80034bc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 800343a:	e014      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 800343c:	4b20      	ldr	r3, [pc, #128]	@ (80034c0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 800343e:	e012      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 8003440:	4b1f      	ldr	r3, [pc, #124]	@ (80034c0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 8003442:	e010      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 8003444:	4b1f      	ldr	r3, [pc, #124]	@ (80034c4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 8003446:	e00e      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 8003448:	4b1e      	ldr	r3, [pc, #120]	@ (80034c4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 800344a:	e00c      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 800344c:	4b1d      	ldr	r3, [pc, #116]	@ (80034c4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 800344e:	e00a      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 8003450:	4b1d      	ldr	r3, [pc, #116]	@ (80034c8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 8003452:	e008      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 8003454:	4b1c      	ldr	r3, [pc, #112]	@ (80034c8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 8003456:	e006      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 8003458:	4b1c      	ldr	r3, [pc, #112]	@ (80034cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 800345a:	e004      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 800345c:	4b1b      	ldr	r3, [pc, #108]	@ (80034cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 800345e:	e002      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 8003460:	4b1b      	ldr	r3, [pc, #108]	@ (80034d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f4>)
 8003462:	e000      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 8003464:	4b1b      	ldr	r3, [pc, #108]	@ (80034d4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f8>)
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	6353      	str	r3, [r2, #52]	@ 0x34

  if (pObj->acc_odr == -1.0f)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003470:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8003474:	eef4 7a47 	vcmp.f32	s15, s14
 8003478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347c:	d102      	bne.n	8003484 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2a8>
  {
    return LIS2DUXS12_ERROR;
 800347e:	f04f 33ff 	mov.w	r3, #4294967295
 8003482:	e004      	b.n	800348e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Power value */
  pObj->power_mode = Power;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	79fa      	ldrb	r2, [r7, #7]
 8003488:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	3fcccccd 	.word	0x3fcccccd
 800349c:	42480000 	.word	0x42480000
 80034a0:	42c80000 	.word	0x42c80000
 80034a4:	43480000 	.word	0x43480000
 80034a8:	43c80000 	.word	0x43c80000
 80034ac:	44480000 	.word	0x44480000
 80034b0:	bf800000 	.word	0xbf800000
 80034b4:	43c80000 	.word	0x43c80000
 80034b8:	43480000 	.word	0x43480000
 80034bc:	42c80000 	.word	0x42c80000
 80034c0:	42480000 	.word	0x42480000
 80034c4:	41c80000 	.word	0x41c80000
 80034c8:	41480000 	.word	0x41480000
 80034cc:	40c00000 	.word	0x40c00000
 80034d0:	40400000 	.word	0x40400000
 80034d4:	3fcccccd 	.word	0x3fcccccd

080034d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80034e4:	460b      	mov	r3, r1
 80034e6:	71fb      	strb	r3, [r7, #7]
  /* Store the new Odr value */
  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d11a      	bne.n	8003524 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x4c>
  {
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
                    : (Odr <= 3.0f) ? 3.0f
 80034ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80034f2:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80034f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fe:	d802      	bhi.n	8003506 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8003500:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8003504:	e00b      	b.n	800351e <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
                    :                25.0f;
 8003506:	edd7 7a02 	vldr	s15, [r7, #8]
 800350a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800350e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003516:	d801      	bhi.n	800351c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x44>
 8003518:	4b33      	ldr	r3, [pc, #204]	@ (80035e8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x110>)
 800351a:	e000      	b.n	800351e <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
 800351c:	4b33      	ldr	r3, [pc, #204]	@ (80035ec <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	6353      	str	r3, [r2, #52]	@ 0x34
 8003522:	e055      	b.n	80035d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  }
  else if ((Power == LIS2DUXS12_LOW_POWER) || (Power == LIS2DUXS12_HIGH_PERFORMANCE))
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d002      	beq.n	8003530 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x58>
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	2b02      	cmp	r3, #2
 800352e:	d14f      	bne.n	80035d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  {
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
                    : (Odr <=  12.5f) ?  12.5f
 8003530:	edd7 7a02 	vldr	s15, [r7, #8]
 8003534:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8003538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003540:	d801      	bhi.n	8003546 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x6e>
 8003542:	4b2b      	ldr	r3, [pc, #172]	@ (80035f0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x118>)
 8003544:	e042      	b.n	80035cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  25.0f) ?  25.0f
 8003546:	edd7 7a02 	vldr	s15, [r7, #8]
 800354a:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800354e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003556:	d801      	bhi.n	800355c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x84>
 8003558:	4b26      	ldr	r3, [pc, #152]	@ (80035f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 800355a:	e037      	b.n	80035cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  50.0f) ?  50.0f
 800355c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003560:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8003564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356c:	d801      	bhi.n	8003572 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x9a>
 800356e:	4b1f      	ldr	r3, [pc, #124]	@ (80035ec <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8003570:	e02c      	b.n	80035cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 100.0f) ? 100.0f
 8003572:	edd7 7a02 	vldr	s15, [r7, #8]
 8003576:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80035f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x120>
 800357a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800357e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003582:	d801      	bhi.n	8003588 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8003584:	4b1d      	ldr	r3, [pc, #116]	@ (80035fc <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x124>)
 8003586:	e021      	b.n	80035cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 200.0f) ? 200.0f
 8003588:	edd7 7a02 	vldr	s15, [r7, #8]
 800358c:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003600 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x128>
 8003590:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003598:	d801      	bhi.n	800359e <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xc6>
 800359a:	4b1a      	ldr	r3, [pc, #104]	@ (8003604 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x12c>)
 800359c:	e016      	b.n	80035cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 400.0f) ? 400.0f
 800359e:	edd7 7a02 	vldr	s15, [r7, #8]
 80035a2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003608 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x130>
 80035a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ae:	d801      	bhi.n	80035b4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xdc>
 80035b0:	4b16      	ldr	r3, [pc, #88]	@ (800360c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x134>)
 80035b2:	e00b      	b.n	80035cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    :                   800.0f;
 80035b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80035b8:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003610 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x138>
 80035bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c4:	d801      	bhi.n	80035ca <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf2>
 80035c6:	4b13      	ldr	r3, [pc, #76]	@ (8003614 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x13c>)
 80035c8:	e000      	b.n	80035cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80035ca:	4b13      	ldr	r3, [pc, #76]	@ (8003618 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x140>)
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	6353      	str	r3, [r2, #52]	@ 0x34
  {
    /* Do nothing */
  }

  /* Store the new Power value */
  pObj->power_mode = Power;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	79fa      	ldrb	r2, [r7, #7]
 80035d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40400000 	.word	0x40400000
 80035ec:	41c80000 	.word	0x41c80000
 80035f0:	40c00000 	.word	0x40c00000
 80035f4:	41480000 	.word	0x41480000
 80035f8:	42480000 	.word	0x42480000
 80035fc:	42480000 	.word	0x42480000
 8003600:	42c80000 	.word	0x42c80000
 8003604:	42c80000 	.word	0x42c80000
 8003608:	43480000 	.word	0x43480000
 800360c:	43480000 	.word	0x43480000
 8003610:	43c80000 	.word	0x43c80000
 8003614:	43c80000 	.word	0x43c80000
 8003618:	44480000 	.word	0x44480000

0800361c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800361c:	b590      	push	{r4, r7, lr}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	461a      	mov	r2, r3
 8003628:	460b      	mov	r3, r1
 800362a:	72fb      	strb	r3, [r7, #11]
 800362c:	4613      	mov	r3, r2
 800362e:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	695c      	ldr	r4, [r3, #20]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	7b1b      	ldrb	r3, [r3, #12]
 800363c:	4618      	mov	r0, r3
 800363e:	7afb      	ldrb	r3, [r7, #11]
 8003640:	b299      	uxth	r1, r3
 8003642:	893b      	ldrh	r3, [r7, #8]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	47a0      	blx	r4
 8003648:	4603      	mov	r3, r0
}
 800364a:	4618      	mov	r0, r3
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	bd90      	pop	{r4, r7, pc}

08003652 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003652:	b590      	push	{r4, r7, lr}
 8003654:	b087      	sub	sp, #28
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	461a      	mov	r2, r3
 800365e:	460b      	mov	r3, r1
 8003660:	72fb      	strb	r3, [r7, #11]
 8003662:	4613      	mov	r3, r2
 8003664:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	691c      	ldr	r4, [r3, #16]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	7b1b      	ldrb	r3, [r3, #12]
 8003672:	4618      	mov	r0, r3
 8003674:	7afb      	ldrb	r3, [r7, #11]
 8003676:	b299      	uxth	r1, r3
 8003678:	893b      	ldrh	r3, [r7, #8]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	47a0      	blx	r4
 800367e:	4603      	mov	r3, r0
}
 8003680:	4618      	mov	r0, r3
 8003682:	371c      	adds	r7, #28
 8003684:	46bd      	mov	sp, r7
 8003686:	bd90      	pop	{r4, r7, pc}

08003688 <lis2duxs12_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                   uint16_t len)
{
 8003688:	b590      	push	{r4, r7, lr}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	461a      	mov	r2, r3
 8003694:	460b      	mov	r3, r1
 8003696:	72fb      	strb	r3, [r7, #11]
 8003698:	4613      	mov	r3, r2
 800369a:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d102      	bne.n	80036a8 <lis2duxs12_read_reg+0x20>
  {
    return -1;
 80036a2:	f04f 33ff 	mov.w	r3, #4294967295
 80036a6:	e008      	b.n	80036ba <lis2duxs12_read_reg+0x32>
  }

  return ctx->read_reg(ctx->handle, reg, data, len);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	685c      	ldr	r4, [r3, #4]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	68d8      	ldr	r0, [r3, #12]
 80036b0:	893b      	ldrh	r3, [r7, #8]
 80036b2:	7af9      	ldrb	r1, [r7, #11]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	47a0      	blx	r4
 80036b8:	4603      	mov	r3, r0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd90      	pop	{r4, r7, pc}

080036c2 <lis2duxs12_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                    uint16_t len)
{
 80036c2:	b590      	push	{r4, r7, lr}
 80036c4:	b085      	sub	sp, #20
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	461a      	mov	r2, r3
 80036ce:	460b      	mov	r3, r1
 80036d0:	72fb      	strb	r3, [r7, #11]
 80036d2:	4613      	mov	r3, r2
 80036d4:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d102      	bne.n	80036e2 <lis2duxs12_write_reg+0x20>
  {
    return -1;
 80036dc:	f04f 33ff 	mov.w	r3, #4294967295
 80036e0:	e008      	b.n	80036f4 <lis2duxs12_write_reg+0x32>
  }

  return ctx->write_reg(ctx->handle, reg, data, len);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681c      	ldr	r4, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	68d8      	ldr	r0, [r3, #12]
 80036ea:	893b      	ldrh	r3, [r7, #8]
 80036ec:	7af9      	ldrb	r1, [r7, #11]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	47a0      	blx	r4
 80036f2:	4603      	mov	r3, r0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd90      	pop	{r4, r7, pc}

080036fc <lis2duxs12_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lis2duxs12_from_fs2g_to_mg(int16_t lsb)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	4603      	mov	r3, r0
 8003704:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.061f;
 8003706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800370a:	ee07 3a90 	vmov	s15, r3
 800370e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003712:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003728 <lis2duxs12_from_fs2g_to_mg+0x2c>
 8003716:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800371a:	eeb0 0a67 	vmov.f32	s0, s15
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	3d79db23 	.word	0x3d79db23

0800372c <lis2duxs12_from_fs4g_to_mg>:

float_t lis2duxs12_from_fs4g_to_mg(int16_t lsb)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.122f;
 8003736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003742:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003758 <lis2duxs12_from_fs4g_to_mg+0x2c>
 8003746:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800374a:	eeb0 0a67 	vmov.f32	s0, s15
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	3df9db23 	.word	0x3df9db23

0800375c <lis2duxs12_from_fs8g_to_mg>:

float_t lis2duxs12_from_fs8g_to_mg(int16_t lsb)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	4603      	mov	r3, r0
 8003764:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.244f;
 8003766:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800376a:	ee07 3a90 	vmov	s15, r3
 800376e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003772:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003788 <lis2duxs12_from_fs8g_to_mg+0x2c>
 8003776:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800377a:	eeb0 0a67 	vmov.f32	s0, s15
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	3e79db23 	.word	0x3e79db23

0800378c <lis2duxs12_from_fs16g_to_mg>:

float_t lis2duxs12_from_fs16g_to_mg(int16_t lsb)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.488f;
 8003796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800379a:	ee07 3a90 	vmov	s15, r3
 800379e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037a2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80037b8 <lis2duxs12_from_fs16g_to_mg+0x2c>
 80037a6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80037aa:	eeb0 0a67 	vmov.f32	s0, s15
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	3ef9db23 	.word	0x3ef9db23

080037bc <lis2duxs12_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_WHO_AM_I, val, 1);
 80037c6:	2301      	movs	r3, #1
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	210f      	movs	r1, #15
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff ff5b 	bl	8003688 <lis2duxs12_read_reg>
 80037d2:	60f8      	str	r0, [r7, #12]

  return ret;
 80037d4:	68fb      	ldr	r3, [r7, #12]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <lis2duxs12_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_init_set(const stmdev_ctx_t *ctx, lis2duxs12_init_t val)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  lis2duxs12_status_t status;
  uint8_t cnt = 0;
 80037ec:	2300      	movs	r3, #0
 80037ee:	77fb      	strb	r3, [r7, #31]
  int32_t ret = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61bb      	str	r3, [r7, #24]

  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 80037f4:	f107 0214 	add.w	r2, r7, #20
 80037f8:	2301      	movs	r3, #1
 80037fa:	2110      	movs	r1, #16
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff ff43 	bl	8003688 <lis2duxs12_read_reg>
 8003802:	4602      	mov	r2, r0
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	4413      	add	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 800380a:	f107 0210 	add.w	r2, r7, #16
 800380e:	2301      	movs	r3, #1
 8003810:	2113      	movs	r1, #19
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff ff38 	bl	8003688 <lis2duxs12_read_reg>
 8003818:	4602      	mov	r2, r0
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	4413      	add	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
  switch (val)
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	2b03      	cmp	r3, #3
 8003824:	f200 80ca 	bhi.w	80039bc <lis2duxs12_init_set+0x1dc>
 8003828:	a201      	add	r2, pc, #4	@ (adr r2, 8003830 <lis2duxs12_init_set+0x50>)
 800382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382e:	bf00      	nop
 8003830:	08003931 	.word	0x08003931
 8003834:	08003841 	.word	0x08003841
 8003838:	080038bb 	.word	0x080038bb
 800383c:	08003977 	.word	0x08003977
  {
    case LIS2DUXS12_BOOT:
      ctrl4.boot = PROPERTY_ENABLE;
 8003840:	7c3b      	ldrb	r3, [r7, #16]
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	743b      	strb	r3, [r7, #16]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003848:	f107 0210 	add.w	r2, r7, #16
 800384c:	2301      	movs	r3, #1
 800384e:	2113      	movs	r1, #19
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff ff36 	bl	80036c2 <lis2duxs12_write_reg>
 8003856:	4602      	mov	r2, r0
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	4413      	add	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	2b00      	cmp	r3, #0
 8003862:	f040 80bb 	bne.w	80039dc <lis2duxs12_init_set+0x1fc>
        break;
      }

      do
      {
        ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003866:	f107 0210 	add.w	r2, r7, #16
 800386a:	2301      	movs	r3, #1
 800386c:	2113      	movs	r1, #19
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff ff0a 	bl	8003688 <lis2duxs12_read_reg>
 8003874:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d113      	bne.n	80038a4 <lis2duxs12_init_set+0xc4>
        {
          break;
        }

        /* boot procedure ended correctly */
        if (ctrl4.boot == 0U)
 800387c:	7c3b      	ldrb	r3, [r7, #16]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00f      	beq.n	80038a8 <lis2duxs12_init_set+0xc8>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <lis2duxs12_init_set+0xb8>
        {
          ctx->mdelay(25); /* 25 ms of boot time */
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2019      	movs	r0, #25
 8003896:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 8003898:	7ffb      	ldrb	r3, [r7, #31]
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	77fa      	strb	r2, [r7, #31]
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d9e1      	bls.n	8003866 <lis2duxs12_init_set+0x86>
 80038a2:	e002      	b.n	80038aa <lis2duxs12_init_set+0xca>
          break;
 80038a4:	bf00      	nop
 80038a6:	e000      	b.n	80038aa <lis2duxs12_init_set+0xca>
          break;
 80038a8:	bf00      	nop

      if (cnt >= 5U)
 80038aa:	7ffb      	ldrb	r3, [r7, #31]
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	f240 8097 	bls.w	80039e0 <lis2duxs12_init_set+0x200>
      {
        ret = -1;  /* boot procedure failed */
 80038b2:	f04f 33ff 	mov.w	r3, #4294967295
 80038b6:	61bb      	str	r3, [r7, #24]
      }
      break;
 80038b8:	e092      	b.n	80039e0 <lis2duxs12_init_set+0x200>
    case LIS2DUXS12_RESET:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 80038ba:	7d3b      	ldrb	r3, [r7, #20]
 80038bc:	f043 0320 	orr.w	r3, r3, #32
 80038c0:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 80038c2:	f107 0214 	add.w	r2, r7, #20
 80038c6:	2301      	movs	r3, #1
 80038c8:	2110      	movs	r1, #16
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff fef9 	bl	80036c2 <lis2duxs12_write_reg>
 80038d0:	4602      	mov	r2, r0
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	4413      	add	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f040 8082 	bne.w	80039e4 <lis2duxs12_init_set+0x204>
        break;
      }

      do
      {
        ret = lis2duxs12_status_get(ctx, &status);
 80038e0:	f107 030c 	add.w	r3, r7, #12
 80038e4:	4619      	mov	r1, r3
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f884 	bl	80039f4 <lis2duxs12_status_get>
 80038ec:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d113      	bne.n	800391c <lis2duxs12_init_set+0x13c>
        {
          break;
        }

        /* sw-reset procedure ended correctly */
        if (status.sw_reset == 0U)
 80038f4:	7b3b      	ldrb	r3, [r7, #12]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00f      	beq.n	8003920 <lis2duxs12_init_set+0x140>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <lis2duxs12_init_set+0x130>
        {
          ctx->mdelay(1); /* should be 50 us */
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2001      	movs	r0, #1
 800390e:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 8003910:	7ffb      	ldrb	r3, [r7, #31]
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	77fa      	strb	r2, [r7, #31]
 8003916:	2b04      	cmp	r3, #4
 8003918:	d9e2      	bls.n	80038e0 <lis2duxs12_init_set+0x100>
 800391a:	e002      	b.n	8003922 <lis2duxs12_init_set+0x142>
          break;
 800391c:	bf00      	nop
 800391e:	e000      	b.n	8003922 <lis2duxs12_init_set+0x142>
          break;
 8003920:	bf00      	nop

      if (cnt >= 5U)
 8003922:	7ffb      	ldrb	r3, [r7, #31]
 8003924:	2b04      	cmp	r3, #4
 8003926:	d95f      	bls.n	80039e8 <lis2duxs12_init_set+0x208>
      {
        ret = -1;  /* sw-reset procedure failed */
 8003928:	f04f 33ff 	mov.w	r3, #4294967295
 800392c:	61bb      	str	r3, [r7, #24]
      }
      break;
 800392e:	e05b      	b.n	80039e8 <lis2duxs12_init_set+0x208>
    case LIS2DUXS12_SENSOR_ONLY_ON:
      /* no embedded funcs are used */
      ctrl4.emb_func_en = PROPERTY_DISABLE;
 8003930:	7c3b      	ldrb	r3, [r7, #16]
 8003932:	f023 0310 	bic.w	r3, r3, #16
 8003936:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 8003938:	7c3b      	ldrb	r3, [r7, #16]
 800393a:	f043 0320 	orr.w	r3, r3, #32
 800393e:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 8003940:	7d3b      	ldrb	r3, [r7, #20]
 8003942:	f043 0310 	orr.w	r3, r3, #16
 8003946:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003948:	f107 0210 	add.w	r2, r7, #16
 800394c:	2301      	movs	r3, #1
 800394e:	2113      	movs	r1, #19
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff feb6 	bl	80036c2 <lis2duxs12_write_reg>
 8003956:	4602      	mov	r2, r0
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	4413      	add	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 800395e:	f107 0214 	add.w	r2, r7, #20
 8003962:	2301      	movs	r3, #1
 8003964:	2110      	movs	r1, #16
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff feab 	bl	80036c2 <lis2duxs12_write_reg>
 800396c:	4602      	mov	r2, r0
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	4413      	add	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
      break;
 8003974:	e039      	b.n	80039ea <lis2duxs12_init_set+0x20a>
    case LIS2DUXS12_SENSOR_EMB_FUNC_ON:
      /* complete configuration is used */
      ctrl4.emb_func_en = PROPERTY_ENABLE;
 8003976:	7c3b      	ldrb	r3, [r7, #16]
 8003978:	f043 0310 	orr.w	r3, r3, #16
 800397c:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 800397e:	7c3b      	ldrb	r3, [r7, #16]
 8003980:	f043 0320 	orr.w	r3, r3, #32
 8003984:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 8003986:	7d3b      	ldrb	r3, [r7, #20]
 8003988:	f043 0310 	orr.w	r3, r3, #16
 800398c:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 800398e:	f107 0210 	add.w	r2, r7, #16
 8003992:	2301      	movs	r3, #1
 8003994:	2113      	movs	r1, #19
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fe93 	bl	80036c2 <lis2duxs12_write_reg>
 800399c:	4602      	mov	r2, r0
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	4413      	add	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 80039a4:	f107 0214 	add.w	r2, r7, #20
 80039a8:	2301      	movs	r3, #1
 80039aa:	2110      	movs	r1, #16
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff fe88 	bl	80036c2 <lis2duxs12_write_reg>
 80039b2:	4602      	mov	r2, r0
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	4413      	add	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
      break;
 80039ba:	e016      	b.n	80039ea <lis2duxs12_init_set+0x20a>
    default:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 80039bc:	7d3b      	ldrb	r3, [r7, #20]
 80039be:	f043 0320 	orr.w	r3, r3, #32
 80039c2:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 80039c4:	f107 0214 	add.w	r2, r7, #20
 80039c8:	2301      	movs	r3, #1
 80039ca:	2110      	movs	r1, #16
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff fe78 	bl	80036c2 <lis2duxs12_write_reg>
 80039d2:	4602      	mov	r2, r0
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	4413      	add	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
      break;
 80039da:	e006      	b.n	80039ea <lis2duxs12_init_set+0x20a>
        break;
 80039dc:	bf00      	nop
 80039de:	e004      	b.n	80039ea <lis2duxs12_init_set+0x20a>
      break;
 80039e0:	bf00      	nop
 80039e2:	e002      	b.n	80039ea <lis2duxs12_init_set+0x20a>
        break;
 80039e4:	bf00      	nop
 80039e6:	e000      	b.n	80039ea <lis2duxs12_init_set+0x20a>
      break;
 80039e8:	bf00      	nop
  }
  return ret;
 80039ea:	69bb      	ldr	r3, [r7, #24]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3720      	adds	r7, #32
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <lis2duxs12_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_status_get(const stmdev_ctx_t *ctx, lis2duxs12_status_t *val)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  lis2duxs12_status_register_t status_register;
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_STATUS,
 80039fe:	f107 0210 	add.w	r2, r7, #16
 8003a02:	2301      	movs	r3, #1
 8003a04:	2125      	movs	r1, #37	@ 0x25
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff fe3e 	bl	8003688 <lis2duxs12_read_reg>
 8003a0c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&status_register, 1);
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003a0e:	f107 020c 	add.w	r2, r7, #12
 8003a12:	2301      	movs	r3, #1
 8003a14:	2110      	movs	r1, #16
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff fe36 	bl	8003688 <lis2duxs12_read_reg>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	4413      	add	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003a24:	f107 0208 	add.w	r2, r7, #8
 8003a28:	2301      	movs	r3, #1
 8003a2a:	2113      	movs	r1, #19
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff fe2b 	bl	8003688 <lis2duxs12_read_reg>
 8003a32:	4602      	mov	r2, r0
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	4413      	add	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]

  val->sw_reset = ctrl1.sw_reset;
 8003a3a:	7b3b      	ldrb	r3, [r7, #12]
 8003a3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003a40:	b2d9      	uxtb	r1, r3
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	7813      	ldrb	r3, [r2, #0]
 8003a46:	f361 0300 	bfi	r3, r1, #0, #1
 8003a4a:	7013      	strb	r3, [r2, #0]
  val->boot     = ctrl4.boot;
 8003a4c:	7a3b      	ldrb	r3, [r7, #8]
 8003a4e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003a52:	b2d9      	uxtb	r1, r3
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	7813      	ldrb	r3, [r2, #0]
 8003a58:	f361 0341 	bfi	r3, r1, #1, #1
 8003a5c:	7013      	strb	r3, [r2, #0]
  val->drdy     = status_register.drdy;
 8003a5e:	7c3b      	ldrb	r3, [r7, #16]
 8003a60:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003a64:	b2d9      	uxtb	r1, r3
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	7813      	ldrb	r3, [r2, #0]
 8003a6a:	f361 0382 	bfi	r3, r1, #2, #1
 8003a6e:	7013      	strb	r3, [r2, #0]

  return ret;
 8003a70:	697b      	ldr	r3, [r7, #20]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <lis2duxs12_mode_set>:
  * @param  val   set the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_set(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *val)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003a86:	f107 020c 	add.w	r2, r7, #12
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	2114      	movs	r1, #20
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff fdfa 	bl	8003688 <lis2duxs12_read_reg>
 8003a94:	6178      	str	r0, [r7, #20]

  ctrl5.odr = (uint8_t)val->odr & 0xFU;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	7b3b      	ldrb	r3, [r7, #12]
 8003aa2:	f362 1307 	bfi	r3, r2, #4, #4
 8003aa6:	733b      	strb	r3, [r7, #12]
  ctrl5.fs = (uint8_t)val->fs;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	785b      	ldrb	r3, [r3, #1]
 8003aac:	f003 0303 	and.w	r3, r3, #3
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	7b3b      	ldrb	r3, [r7, #12]
 8003ab4:	f362 0301 	bfi	r3, r2, #0, #2
 8003ab8:	733b      	strb	r3, [r7, #12]

  /* set the bandwidth */
  switch (val->odr)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b06      	cmp	r3, #6
 8003ac0:	d859      	bhi.n	8003b76 <lis2duxs12_mode_set+0xfa>
 8003ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac8 <lis2duxs12_mode_set+0x4c>)
 8003ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac8:	08003ae5 	.word	0x08003ae5
 8003acc:	08003ae5 	.word	0x08003ae5
 8003ad0:	08003ae5 	.word	0x08003ae5
 8003ad4:	08003ae5 	.word	0x08003ae5
 8003ad8:	08003aef 	.word	0x08003aef
 8003adc:	08003b0b 	.word	0x08003b0b
 8003ae0:	08003b37 	.word	0x08003b37
    /* no anti-aliasing filter present */
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_1Hz6_ULP:
    case LIS2DUXS12_3Hz_ULP:
    case LIS2DUXS12_25Hz_ULP:
      ctrl5.bw = 0x0;
 8003ae4:	7b3b      	ldrb	r3, [r7, #12]
 8003ae6:	f023 030c 	bic.w	r3, r3, #12
 8003aea:	733b      	strb	r3, [r7, #12]
      break;
 8003aec:	e04d      	b.n	8003b8a <lis2duxs12_mode_set+0x10e>

    /* low-power mode with ODR < 50 Hz */
    case LIS2DUXS12_6Hz_LP:
      switch (val->bw)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	789b      	ldrb	r3, [r3, #2]
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d003      	beq.n	8003afe <lis2duxs12_mode_set+0x82>
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
        case LIS2DUXS12_ODR_div_8:
          /* value not allowed */
          ret = -1;
 8003af6:	f04f 33ff 	mov.w	r3, #4294967295
 8003afa:	617b      	str	r3, [r7, #20]
          break;
 8003afc:	e004      	b.n	8003b08 <lis2duxs12_mode_set+0x8c>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003afe:	7b3b      	ldrb	r3, [r7, #12]
 8003b00:	f043 030c 	orr.w	r3, r3, #12
 8003b04:	733b      	strb	r3, [r7, #12]
          break;
 8003b06:	bf00      	nop
      }
      break;
 8003b08:	e03f      	b.n	8003b8a <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_12Hz5_LP:
      switch (val->bw)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	789b      	ldrb	r3, [r3, #2]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d005      	beq.n	8003b1e <lis2duxs12_mode_set+0xa2>
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d009      	beq.n	8003b2a <lis2duxs12_mode_set+0xae>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
          /* value not allowed */
          ret = -1;
 8003b16:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1a:	617b      	str	r3, [r7, #20]
          break;
 8003b1c:	e00a      	b.n	8003b34 <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 8003b1e:	7b3b      	ldrb	r3, [r7, #12]
 8003b20:	2202      	movs	r2, #2
 8003b22:	f362 0383 	bfi	r3, r2, #2, #2
 8003b26:	733b      	strb	r3, [r7, #12]
          break;
 8003b28:	e004      	b.n	8003b34 <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003b2a:	7b3b      	ldrb	r3, [r7, #12]
 8003b2c:	f043 030c 	orr.w	r3, r3, #12
 8003b30:	733b      	strb	r3, [r7, #12]
          break;
 8003b32:	bf00      	nop
      }
      break;
 8003b34:	e029      	b.n	8003b8a <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_25Hz_LP:
      switch (val->bw)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	789b      	ldrb	r3, [r3, #2]
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d015      	beq.n	8003b6a <lis2duxs12_mode_set+0xee>
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	dc03      	bgt.n	8003b4a <lis2duxs12_mode_set+0xce>
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d005      	beq.n	8003b52 <lis2duxs12_mode_set+0xd6>
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d009      	beq.n	8003b5e <lis2duxs12_mode_set+0xe2>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
          /* value not allowed */
          ret = -1;
 8003b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4e:	617b      	str	r3, [r7, #20]
          break;
 8003b50:	e010      	b.n	8003b74 <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_4:
          ctrl5.bw = 0x1;
 8003b52:	7b3b      	ldrb	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f362 0383 	bfi	r3, r2, #2, #2
 8003b5a:	733b      	strb	r3, [r7, #12]
          break;
 8003b5c:	e00a      	b.n	8003b74 <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 8003b5e:	7b3b      	ldrb	r3, [r7, #12]
 8003b60:	2202      	movs	r2, #2
 8003b62:	f362 0383 	bfi	r3, r2, #2, #2
 8003b66:	733b      	strb	r3, [r7, #12]
          break;
 8003b68:	e004      	b.n	8003b74 <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003b6a:	7b3b      	ldrb	r3, [r7, #12]
 8003b6c:	f043 030c 	orr.w	r3, r3, #12
 8003b70:	733b      	strb	r3, [r7, #12]
          break;
 8003b72:	bf00      	nop
      }
      break;
 8003b74:	e009      	b.n	8003b8a <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_100Hz_HP:
    case LIS2DUXS12_200Hz_HP:
    case LIS2DUXS12_400Hz_HP:
    case LIS2DUXS12_800Hz_HP:
    default:
      ctrl5.bw = (uint8_t)val->bw;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	789b      	ldrb	r3, [r3, #2]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	7b3b      	ldrb	r3, [r7, #12]
 8003b82:	f362 0383 	bfi	r3, r2, #2, #2
 8003b86:	733b      	strb	r3, [r7, #12]
      break;
 8003b88:	bf00      	nop
  }

  if (ret != 0)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <lis2duxs12_mode_set+0x118>
  {
    return ret;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	e02b      	b.n	8003bec <lis2duxs12_mode_set+0x170>
  }

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8003b94:	f107 0210 	add.w	r2, r7, #16
 8003b98:	2301      	movs	r3, #1
 8003b9a:	2112      	movs	r1, #18
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7ff fd73 	bl	8003688 <lis2duxs12_read_reg>
 8003ba2:	6178      	str	r0, [r7, #20]

  ctrl3.hp_en = (((uint8_t)val->odr & 0x30U) == 0x10U) ? 1U : 0U;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d101      	bne.n	8003bb4 <lis2duxs12_mode_set+0x138>
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	e000      	b.n	8003bb6 <lis2duxs12_mode_set+0x13a>
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	7c3b      	ldrb	r3, [r7, #16]
 8003bb8:	f362 0382 	bfi	r3, r2, #2, #1
 8003bbc:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d112      	bne.n	8003bea <lis2duxs12_mode_set+0x16e>
  {
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003bc4:	f107 020c 	add.w	r2, r7, #12
 8003bc8:	2301      	movs	r3, #1
 8003bca:	2114      	movs	r1, #20
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff fd78 	bl	80036c2 <lis2duxs12_write_reg>
 8003bd2:	6178      	str	r0, [r7, #20]
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8003bd4:	f107 0210 	add.w	r2, r7, #16
 8003bd8:	2301      	movs	r3, #1
 8003bda:	2112      	movs	r1, #18
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff fd70 	bl	80036c2 <lis2duxs12_write_reg>
 8003be2:	4602      	mov	r2, r0
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	4413      	add	r3, r2
 8003be8:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003bea:	697b      	ldr	r3, [r7, #20]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <lis2duxs12_mode_get>:
  * @param  val   get the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_get(const stmdev_ctx_t *ctx, lis2duxs12_md_t *val)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003bfe:	f107 020c 	add.w	r2, r7, #12
 8003c02:	2301      	movs	r3, #1
 8003c04:	2114      	movs	r1, #20
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff fd3e 	bl	8003688 <lis2duxs12_read_reg>
 8003c0c:	6178      	str	r0, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8003c0e:	f107 0210 	add.w	r2, r7, #16
 8003c12:	2301      	movs	r3, #1
 8003c14:	2112      	movs	r1, #18
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7ff fd36 	bl	8003688 <lis2duxs12_read_reg>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	4413      	add	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]

  switch (ctrl5.odr)
 8003c24:	7b3b      	ldrb	r3, [r7, #12]
 8003c26:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b0f      	cmp	r3, #15
 8003c2e:	f200 809b 	bhi.w	8003d68 <lis2duxs12_mode_get+0x174>
 8003c32:	a201      	add	r2, pc, #4	@ (adr r2, 8003c38 <lis2duxs12_mode_get+0x44>)
 8003c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c38:	08003c79 	.word	0x08003c79
 8003c3c:	08003c81 	.word	0x08003c81
 8003c40:	08003c89 	.word	0x08003c89
 8003c44:	08003c91 	.word	0x08003c91
 8003c48:	08003c99 	.word	0x08003c99
 8003c4c:	08003cb1 	.word	0x08003cb1
 8003c50:	08003cc9 	.word	0x08003cc9
 8003c54:	08003ce1 	.word	0x08003ce1
 8003c58:	08003cf9 	.word	0x08003cf9
 8003c5c:	08003d11 	.word	0x08003d11
 8003c60:	08003d29 	.word	0x08003d29
 8003c64:	08003d41 	.word	0x08003d41
 8003c68:	08003d69 	.word	0x08003d69
 8003c6c:	08003d69 	.word	0x08003d69
 8003c70:	08003d59 	.word	0x08003d59
 8003c74:	08003d61 	.word	0x08003d61
  {
    case 0x00:
      val->odr = LIS2DUXS12_OFF;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	701a      	strb	r2, [r3, #0]
      break;
 8003c7e:	e077      	b.n	8003d70 <lis2duxs12_mode_get+0x17c>
    case 0x01:
      val->odr = LIS2DUXS12_1Hz6_ULP;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	2201      	movs	r2, #1
 8003c84:	701a      	strb	r2, [r3, #0]
      break;
 8003c86:	e073      	b.n	8003d70 <lis2duxs12_mode_get+0x17c>
    case 0x02:
      val->odr = LIS2DUXS12_3Hz_ULP;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	701a      	strb	r2, [r3, #0]
      break;
 8003c8e:	e06f      	b.n	8003d70 <lis2duxs12_mode_get+0x17c>
    case 0x03:
      val->odr = LIS2DUXS12_25Hz_ULP;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2203      	movs	r2, #3
 8003c94:	701a      	strb	r2, [r3, #0]
      break;
 8003c96:	e06b      	b.n	8003d70 <lis2duxs12_mode_get+0x17c>
    case 0x04:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_6Hz_HP : LIS2DUXS12_6Hz_LP;
 8003c98:	7c3b      	ldrb	r3, [r7, #16]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <lis2duxs12_mode_get+0xb4>
 8003ca4:	2214      	movs	r2, #20
 8003ca6:	e000      	b.n	8003caa <lis2duxs12_mode_get+0xb6>
 8003ca8:	2204      	movs	r2, #4
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	701a      	strb	r2, [r3, #0]
      break;
 8003cae:	e05f      	b.n	8003d70 <lis2duxs12_mode_get+0x17c>
    case 0x05:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_12Hz5_HP : LIS2DUXS12_12Hz5_LP;
 8003cb0:	7c3b      	ldrb	r3, [r7, #16]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <lis2duxs12_mode_get+0xcc>
 8003cbc:	2215      	movs	r2, #21
 8003cbe:	e000      	b.n	8003cc2 <lis2duxs12_mode_get+0xce>
 8003cc0:	2205      	movs	r2, #5
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	701a      	strb	r2, [r3, #0]
      break;
 8003cc6:	e053      	b.n	8003d70 <lis2duxs12_mode_get+0x17c>
    case 0x06:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_25Hz_HP : LIS2DUXS12_25Hz_LP;
 8003cc8:	7c3b      	ldrb	r3, [r7, #16]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <lis2duxs12_mode_get+0xe4>
 8003cd4:	2216      	movs	r2, #22
 8003cd6:	e000      	b.n	8003cda <lis2duxs12_mode_get+0xe6>
 8003cd8:	2206      	movs	r2, #6
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	701a      	strb	r2, [r3, #0]
      break;
 8003cde:	e047      	b.n	8003d70 <lis2duxs12_mode_get+0x17c>
    case 0x07:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_50Hz_HP : LIS2DUXS12_50Hz_LP;
 8003ce0:	7c3b      	ldrb	r3, [r7, #16]
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <lis2duxs12_mode_get+0xfc>
 8003cec:	2217      	movs	r2, #23
 8003cee:	e000      	b.n	8003cf2 <lis2duxs12_mode_get+0xfe>
 8003cf0:	2207      	movs	r2, #7
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	701a      	strb	r2, [r3, #0]
      break;
 8003cf6:	e03b      	b.n	8003d70 <lis2duxs12_mode_get+0x17c>
    case 0x08:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_100Hz_HP : LIS2DUXS12_100Hz_LP;
 8003cf8:	7c3b      	ldrb	r3, [r7, #16]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <lis2duxs12_mode_get+0x114>
 8003d04:	2218      	movs	r2, #24
 8003d06:	e000      	b.n	8003d0a <lis2duxs12_mode_get+0x116>
 8003d08:	2208      	movs	r2, #8
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	701a      	strb	r2, [r3, #0]
      break;
 8003d0e:	e02f      	b.n	8003d70 <lis2duxs12_mode_get+0x17c>
    case 0x09:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_200Hz_HP : LIS2DUXS12_200Hz_LP;
 8003d10:	7c3b      	ldrb	r3, [r7, #16]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <lis2duxs12_mode_get+0x12c>
 8003d1c:	2219      	movs	r2, #25
 8003d1e:	e000      	b.n	8003d22 <lis2duxs12_mode_get+0x12e>
 8003d20:	2209      	movs	r2, #9
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	701a      	strb	r2, [r3, #0]
      break;
 8003d26:	e023      	b.n	8003d70 <lis2duxs12_mode_get+0x17c>
    case 0x0A:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_400Hz_HP : LIS2DUXS12_400Hz_LP;
 8003d28:	7c3b      	ldrb	r3, [r7, #16]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <lis2duxs12_mode_get+0x144>
 8003d34:	221a      	movs	r2, #26
 8003d36:	e000      	b.n	8003d3a <lis2duxs12_mode_get+0x146>
 8003d38:	220a      	movs	r2, #10
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	701a      	strb	r2, [r3, #0]
      break;
 8003d3e:	e017      	b.n	8003d70 <lis2duxs12_mode_get+0x17c>
    case 0x0B:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_800Hz_HP : LIS2DUXS12_800Hz_LP;
 8003d40:	7c3b      	ldrb	r3, [r7, #16]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <lis2duxs12_mode_get+0x15c>
 8003d4c:	221b      	movs	r2, #27
 8003d4e:	e000      	b.n	8003d52 <lis2duxs12_mode_get+0x15e>
 8003d50:	220b      	movs	r2, #11
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	701a      	strb	r2, [r3, #0]
      break;
 8003d56:	e00b      	b.n	8003d70 <lis2duxs12_mode_get+0x17c>
    case 0xe:
      val->odr = LIS2DUXS12_TRIG_PIN;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	222e      	movs	r2, #46	@ 0x2e
 8003d5c:	701a      	strb	r2, [r3, #0]
      break;
 8003d5e:	e007      	b.n	8003d70 <lis2duxs12_mode_get+0x17c>
    case 0xf:
      val->odr = LIS2DUXS12_TRIG_SW;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	222f      	movs	r2, #47	@ 0x2f
 8003d64:	701a      	strb	r2, [r3, #0]
      break;
 8003d66:	e003      	b.n	8003d70 <lis2duxs12_mode_get+0x17c>
    default:
      val->odr = LIS2DUXS12_OFF;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	701a      	strb	r2, [r3, #0]
      break;
 8003d6e:	bf00      	nop
  }

  switch (ctrl5.fs)
 8003d70:	7b3b      	ldrb	r3, [r7, #12]
 8003d72:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d81b      	bhi.n	8003db4 <lis2duxs12_mode_get+0x1c0>
 8003d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d84 <lis2duxs12_mode_get+0x190>)
 8003d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d82:	bf00      	nop
 8003d84:	08003d95 	.word	0x08003d95
 8003d88:	08003d9d 	.word	0x08003d9d
 8003d8c:	08003da5 	.word	0x08003da5
 8003d90:	08003dad 	.word	0x08003dad
  {
    case 0:
      val->fs = LIS2DUXS12_2g;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2200      	movs	r2, #0
 8003d98:	705a      	strb	r2, [r3, #1]
      break;
 8003d9a:	e00f      	b.n	8003dbc <lis2duxs12_mode_get+0x1c8>
    case 1:
      val->fs = LIS2DUXS12_4g;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	705a      	strb	r2, [r3, #1]
      break;
 8003da2:	e00b      	b.n	8003dbc <lis2duxs12_mode_get+0x1c8>
    case 2:
      val->fs = LIS2DUXS12_8g;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	2202      	movs	r2, #2
 8003da8:	705a      	strb	r2, [r3, #1]
      break;
 8003daa:	e007      	b.n	8003dbc <lis2duxs12_mode_get+0x1c8>
    case 3:
      val->fs = LIS2DUXS12_16g;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2203      	movs	r2, #3
 8003db0:	705a      	strb	r2, [r3, #1]
      break;
 8003db2:	e003      	b.n	8003dbc <lis2duxs12_mode_get+0x1c8>
    default:
      val->fs = LIS2DUXS12_2g;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	705a      	strb	r2, [r3, #1]
      break;
 8003dba:	bf00      	nop
  }

  switch (ctrl5.bw)
 8003dbc:	7b3b      	ldrb	r3, [r7, #12]
 8003dbe:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d81b      	bhi.n	8003e00 <lis2duxs12_mode_get+0x20c>
 8003dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd0 <lis2duxs12_mode_get+0x1dc>)
 8003dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dce:	bf00      	nop
 8003dd0:	08003de1 	.word	0x08003de1
 8003dd4:	08003de9 	.word	0x08003de9
 8003dd8:	08003df1 	.word	0x08003df1
 8003ddc:	08003df9 	.word	0x08003df9
  {
    case 0:
      val->bw = LIS2DUXS12_ODR_div_2;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2200      	movs	r2, #0
 8003de4:	709a      	strb	r2, [r3, #2]
      break;
 8003de6:	e00f      	b.n	8003e08 <lis2duxs12_mode_get+0x214>
    case 1:
      val->bw = LIS2DUXS12_ODR_div_4;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2201      	movs	r2, #1
 8003dec:	709a      	strb	r2, [r3, #2]
      break;
 8003dee:	e00b      	b.n	8003e08 <lis2duxs12_mode_get+0x214>
    case 2:
      val->bw = LIS2DUXS12_ODR_div_8;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2202      	movs	r2, #2
 8003df4:	709a      	strb	r2, [r3, #2]
      break;
 8003df6:	e007      	b.n	8003e08 <lis2duxs12_mode_get+0x214>
    case 3:
      val->bw = LIS2DUXS12_ODR_div_16;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	2203      	movs	r2, #3
 8003dfc:	709a      	strb	r2, [r3, #2]
      break;
 8003dfe:	e003      	b.n	8003e08 <lis2duxs12_mode_get+0x214>
    default:
      val->bw = LIS2DUXS12_ODR_div_2;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2200      	movs	r2, #0
 8003e04:	709a      	strb	r2, [r3, #2]
      break;
 8003e06:	bf00      	nop
  }

  return ret;
 8003e08:	697b      	ldr	r3, [r7, #20]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop

08003e14 <lis2duxs12_exit_deep_power_down>:
  * @param  val      Enter soft power down in SPI case
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_exit_deep_power_down(const stmdev_ctx_t *ctx)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  lis2duxs12_en_device_config_t en_device_config = {0};
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  en_device_config.soft_pd = PROPERTY_ENABLE;
 8003e20:	7a3b      	ldrb	r3, [r7, #8]
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	723b      	strb	r3, [r7, #8]
  ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_EN_DEVICE_CONFIG, (uint8_t *)&en_device_config, 1);
 8003e28:	f107 0208 	add.w	r2, r7, #8
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	213e      	movs	r1, #62	@ 0x3e
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff fc46 	bl	80036c2 <lis2duxs12_write_reg>
 8003e36:	60f8      	str	r0, [r7, #12]

  if (ctx->mdelay != NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <lis2duxs12_exit_deep_power_down+0x34>
  {
    ctx->mdelay(25); /* See AN5812 - paragraphs 3.1.1.1 and 3.1.1.2 */
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2019      	movs	r0, #25
 8003e46:	4798      	blx	r3
  }

  return ret;
 8003e48:	68fb      	ldr	r3, [r7, #12]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <lis2duxs12_xl_data_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_xl_data_get(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *md,
                               lis2duxs12_xl_data_t *data)
{
 8003e54:	b590      	push	{r4, r7, lr}
 8003e56:	b089      	sub	sp, #36	@ 0x24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  uint8_t buff[6];
  int32_t ret;
  uint8_t i;
  uint8_t j;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_OUT_X_L, buff, 6);
 8003e60:	f107 0210 	add.w	r2, r7, #16
 8003e64:	2306      	movs	r3, #6
 8003e66:	2128      	movs	r1, #40	@ 0x28
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f7ff fc0d 	bl	8003688 <lis2duxs12_read_reg>
 8003e6e:	61b8      	str	r0, [r7, #24]

  /* acceleration conversion */
  j = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	77bb      	strb	r3, [r7, #30]
  for (i = 0U; i < 3U; i++)
 8003e74:	2300      	movs	r3, #0
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e08f      	b.n	8003f9a <lis2duxs12_xl_data_get+0x146>
  {
    data->raw[i] = (int16_t)buff[j + 1U];
 8003e7a:	7fbb      	ldrb	r3, [r7, #30]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	3320      	adds	r3, #32
 8003e80:	443b      	add	r3, r7
 8003e82:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003e86:	7ffb      	ldrb	r3, [r7, #31]
 8003e88:	b211      	sxth	r1, r2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	4413      	add	r3, r2
 8003e92:	460a      	mov	r2, r1
 8003e94:	809a      	strh	r2, [r3, #4]
    data->raw[i] = (data->raw[i] * 256) + (int16_t) buff[j];
 8003e96:	7ffb      	ldrb	r3, [r7, #31]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	021b      	lsls	r3, r3, #8
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	7fba      	ldrb	r2, [r7, #30]
 8003eac:	3220      	adds	r2, #32
 8003eae:	443a      	add	r2, r7
 8003eb0:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	7ffb      	ldrb	r3, [r7, #31]
 8003eba:	b211      	sxth	r1, r2
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	4413      	add	r3, r2
 8003ec4:	460a      	mov	r2, r1
 8003ec6:	809a      	strh	r2, [r3, #4]
    j += 2U;
 8003ec8:	7fbb      	ldrb	r3, [r7, #30]
 8003eca:	3302      	adds	r3, #2
 8003ecc:	77bb      	strb	r3, [r7, #30]
    switch (md->fs)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	785b      	ldrb	r3, [r3, #1]
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d856      	bhi.n	8003f84 <lis2duxs12_xl_data_get+0x130>
 8003ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8003edc <lis2duxs12_xl_data_get+0x88>)
 8003ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003edc:	08003eed 	.word	0x08003eed
 8003ee0:	08003f13 	.word	0x08003f13
 8003ee4:	08003f39 	.word	0x08003f39
 8003ee8:	08003f5f 	.word	0x08003f5f
    {
      case LIS2DUXS12_2g:
        data->mg[i] = lis2duxs12_from_fs2g_to_mg(data->raw[i]);
 8003eec:	7ffb      	ldrb	r3, [r7, #31]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003efa:	7ffc      	ldrb	r4, [r7, #31]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff fbfd 	bl	80036fc <lis2duxs12_from_fs2g_to_mg>
 8003f02:	eef0 7a40 	vmov.f32	s15, s0
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	00a3      	lsls	r3, r4, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003f10:	e040      	b.n	8003f94 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_4g:
        data->mg[i] = lis2duxs12_from_fs4g_to_mg(data->raw[i]);
 8003f12:	7ffb      	ldrb	r3, [r7, #31]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	3304      	adds	r3, #4
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003f20:	7ffc      	ldrb	r4, [r7, #31]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff fc02 	bl	800372c <lis2duxs12_from_fs4g_to_mg>
 8003f28:	eef0 7a40 	vmov.f32	s15, s0
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	00a3      	lsls	r3, r4, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003f36:	e02d      	b.n	8003f94 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_8g:
        data->mg[i] = lis2duxs12_from_fs8g_to_mg(data->raw[i]);
 8003f38:	7ffb      	ldrb	r3, [r7, #31]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	4413      	add	r3, r2
 8003f42:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003f46:	7ffc      	ldrb	r4, [r7, #31]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fc07 	bl	800375c <lis2duxs12_from_fs8g_to_mg>
 8003f4e:	eef0 7a40 	vmov.f32	s15, s0
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	00a3      	lsls	r3, r4, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003f5c:	e01a      	b.n	8003f94 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_16g:
        data->mg[i] = lis2duxs12_from_fs16g_to_mg(data->raw[i]);
 8003f5e:	7ffb      	ldrb	r3, [r7, #31]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	4413      	add	r3, r2
 8003f68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003f6c:	7ffc      	ldrb	r4, [r7, #31]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff fc0c 	bl	800378c <lis2duxs12_from_fs16g_to_mg>
 8003f74:	eef0 7a40 	vmov.f32	s15, s0
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	00a3      	lsls	r3, r4, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003f82:	e007      	b.n	8003f94 <lis2duxs12_xl_data_get+0x140>
      default:
        data->mg[i] = 0.0f;
 8003f84:	7ffb      	ldrb	r3, [r7, #31]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
        break;
 8003f92:	bf00      	nop
  for (i = 0U; i < 3U; i++)
 8003f94:	7ffb      	ldrb	r3, [r7, #31]
 8003f96:	3301      	adds	r3, #1
 8003f98:	77fb      	strb	r3, [r7, #31]
 8003f9a:	7ffb      	ldrb	r3, [r7, #31]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	f67f af6c 	bls.w	8003e7a <lis2duxs12_xl_data_get+0x26>
    }
  }

  return ret;
 8003fa2:	69bb      	ldr	r3, [r7, #24]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3724      	adds	r7, #36	@ 0x24
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd90      	pop	{r4, r7, pc}

08003fac <lis2duxs12_i3c_configure_set>:
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_i3c_configure_set(const stmdev_ctx_t *ctx, const lis2duxs12_i3c_cfg_t *val)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 8003fb6:	f107 0208 	add.w	r2, r7, #8
 8003fba:	2301      	movs	r3, #1
 8003fbc:	2133      	movs	r1, #51	@ 0x33
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff fb62 	bl	8003688 <lis2duxs12_read_reg>
 8003fc4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d122      	bne.n	8004012 <lis2duxs12_i3c_configure_set+0x66>
  {
    i3c_cfg.bus_act_sel = (uint8_t)val->bus_act_sel;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	f003 0303 	and.w	r3, r3, #3
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	7a3b      	ldrb	r3, [r7, #8]
 8003fd8:	f362 0301 	bfi	r3, r2, #0, #2
 8003fdc:	723b      	strb	r3, [r7, #8]
    i3c_cfg.dis_drstdaa = val->drstdaa_en;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	785b      	ldrb	r3, [r3, #1]
 8003fe2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	7a3b      	ldrb	r3, [r7, #8]
 8003fea:	f362 1386 	bfi	r3, r2, #6, #1
 8003fee:	723b      	strb	r3, [r7, #8]
    i3c_cfg.asf_on = val->asf_on;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	785b      	ldrb	r3, [r3, #1]
 8003ff4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	7a3b      	ldrb	r3, [r7, #8]
 8003ffc:	f362 1345 	bfi	r3, r2, #5, #1
 8004000:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 8004002:	f107 0208 	add.w	r2, r7, #8
 8004006:	2301      	movs	r3, #1
 8004008:	2133      	movs	r1, #51	@ 0x33
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff fb59 	bl	80036c2 <lis2duxs12_write_reg>
 8004010:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004012:	68fb      	ldr	r3, [r7, #12]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <lis2duxs12_i3c_configure_get>:
  * @param  ctx   communication interface handler.(ptr)
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */int32_t lis2duxs12_i3c_configure_get(const stmdev_ctx_t *ctx, lis2duxs12_i3c_cfg_t *val)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 8004026:	f107 0208 	add.w	r2, r7, #8
 800402a:	2301      	movs	r3, #1
 800402c:	2133      	movs	r1, #51	@ 0x33
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff fb2a 	bl	8003688 <lis2duxs12_read_reg>
 8004034:	60f8      	str	r0, [r7, #12]

  val->drstdaa_en = i3c_cfg.dis_drstdaa;
 8004036:	7a3b      	ldrb	r3, [r7, #8]
 8004038:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800403c:	b2d9      	uxtb	r1, r3
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	7853      	ldrb	r3, [r2, #1]
 8004042:	f361 0341 	bfi	r3, r1, #1, #1
 8004046:	7053      	strb	r3, [r2, #1]
  val->asf_on = i3c_cfg.asf_on;
 8004048:	7a3b      	ldrb	r3, [r7, #8]
 800404a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800404e:	b2d9      	uxtb	r1, r3
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	7853      	ldrb	r3, [r2, #1]
 8004054:	f361 0300 	bfi	r3, r1, #0, #1
 8004058:	7053      	strb	r3, [r2, #1]

  switch (val->bus_act_sel)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b02      	cmp	r3, #2
 8004060:	d00e      	beq.n	8004080 <lis2duxs12_i3c_configure_get+0x64>
 8004062:	2b02      	cmp	r3, #2
 8004064:	dc10      	bgt.n	8004088 <lis2duxs12_i3c_configure_get+0x6c>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <lis2duxs12_i3c_configure_get+0x54>
 800406a:	2b01      	cmp	r3, #1
 800406c:	d004      	beq.n	8004078 <lis2duxs12_i3c_configure_get+0x5c>
 800406e:	e00b      	b.n	8004088 <lis2duxs12_i3c_configure_get+0x6c>
  {
    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]
      break;
 8004076:	e00b      	b.n	8004090 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2201      	movs	r2, #1
 800407c:	701a      	strb	r2, [r3, #0]
      break;
 800407e:	e007      	b.n	8004090 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2202      	movs	r2, #2
 8004084:	701a      	strb	r2, [r3, #0]
      break;
 8004086:	e003      	b.n	8004090 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS:
    default:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2203      	movs	r2, #3
 800408c:	701a      	strb	r2, [r3, #0]
      break;
 800408e:	bf00      	nop
  }

  return ret;
 8004090:	68fb      	ldr	r3, [r7, #12]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <lis2duxs12_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, STRED_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mem_bank_set(const stmdev_ctx_t *ctx, lis2duxs12_mem_bank_t val)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	460b      	mov	r3, r1
 80040a4:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80040a6:	f107 0208 	add.w	r2, r7, #8
 80040aa:	2301      	movs	r3, #1
 80040ac:	213f      	movs	r1, #63	@ 0x3f
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff faea 	bl	8003688 <lis2duxs12_read_reg>
 80040b4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10f      	bne.n	80040dc <lis2duxs12_mem_bank_set+0x42>
  {
    func_cfg_access.emb_func_reg_access = ((uint8_t)val & 0x1U);
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	7a3b      	ldrb	r3, [r7, #8]
 80040c6:	f362 13c7 	bfi	r3, r2, #7, #1
 80040ca:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80040cc:	f107 0208 	add.w	r2, r7, #8
 80040d0:	2301      	movs	r3, #1
 80040d2:	213f      	movs	r1, #63	@ 0x3f
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff faf4 	bl	80036c2 <lis2duxs12_write_reg>
 80040da:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80040dc:	68fb      	ldr	r3, [r7, #12]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <lis2duxs12_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_fifo_mode_set(const stmdev_ctx_t *ctx, lis2duxs12_fifo_mode_t val)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b08a      	sub	sp, #40	@ 0x28
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	1d3b      	adds	r3, r7, #4
 80040f0:	e883 0006 	stmia.w	r3, {r1, r2}
  lis2duxs12_fifo_ctrl_t fifo_ctrl;
  lis2duxs12_fifo_wtm_t fifo_wtm;
  lis2duxs12_fifo_batch_dec_t fifo_batch;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 80040f4:	f107 0220 	add.w	r2, r7, #32
 80040f8:	2301      	movs	r3, #1
 80040fa:	2113      	movs	r1, #19
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7ff fac3 	bl	8003688 <lis2duxs12_read_reg>
 8004102:	6278      	str	r0, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 8004104:	f107 021c 	add.w	r2, r7, #28
 8004108:	2301      	movs	r3, #1
 800410a:	2115      	movs	r1, #21
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f7ff fabb 	bl	8003688 <lis2duxs12_read_reg>
 8004112:	4602      	mov	r2, r0
 8004114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004116:	4413      	add	r3, r2
 8004118:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 800411a:	f107 0214 	add.w	r2, r7, #20
 800411e:	2301      	movs	r3, #1
 8004120:	2147      	movs	r1, #71	@ 0x47
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f7ff fab0 	bl	8003688 <lis2duxs12_read_reg>
 8004128:	4602      	mov	r2, r0
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	4413      	add	r3, r2
 800412e:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 8004130:	f107 0218 	add.w	r2, r7, #24
 8004134:	2301      	movs	r3, #1
 8004136:	2116      	movs	r1, #22
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f7ff faa5 	bl	8003688 <lis2duxs12_read_reg>
 800413e:	4602      	mov	r2, r0
 8004140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004142:	4413      	add	r3, r2
 8004144:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ret == 0)
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	2b00      	cmp	r3, #0
 800414a:	f040 808a 	bne.w	8004262 <lis2duxs12_fifo_mode_set+0x17c>
  {
    /* set FIFO mode */
    if (val.operation != LIS2DUXS12_FIFO_OFF)
 800414e:	793b      	ldrb	r3, [r7, #4]
 8004150:	2b08      	cmp	r3, #8
 8004152:	d00e      	beq.n	8004172 <lis2duxs12_fifo_mode_set+0x8c>
    {
      ctrl4.fifo_en = 1;
 8004154:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004158:	f043 0308 	orr.w	r3, r3, #8
 800415c:	f887 3020 	strb.w	r3, [r7, #32]
      fifo_ctrl.fifo_mode = ((uint8_t)val.operation & 0x7U);
 8004160:	793b      	ldrb	r3, [r7, #4]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	b2da      	uxtb	r2, r3
 8004168:	7f3b      	ldrb	r3, [r7, #28]
 800416a:	f362 0302 	bfi	r3, r2, #0, #3
 800416e:	773b      	strb	r3, [r7, #28]
 8004170:	e005      	b.n	800417e <lis2duxs12_fifo_mode_set+0x98>
    }
    else
    {
      ctrl4.fifo_en = 0;
 8004172:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004176:	f023 0308 	bic.w	r3, r3, #8
 800417a:	f887 3020 	strb.w	r3, [r7, #32]
    }

    /* set fifo depth (1X/2X) */
    fifo_ctrl.fifo_depth = (uint8_t)val.store;
 800417e:	797b      	ldrb	r3, [r7, #5]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	b2da      	uxtb	r2, r3
 8004186:	7f3b      	ldrb	r3, [r7, #28]
 8004188:	f362 1386 	bfi	r3, r2, #6, #1
 800418c:	773b      	strb	r3, [r7, #28]

    /* Set xl_only_fifo */
    fifo_wtm.xl_only_fifo = val.xl_only;
 800418e:	79bb      	ldrb	r3, [r7, #6]
 8004190:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004194:	b2da      	uxtb	r2, r3
 8004196:	7e3b      	ldrb	r3, [r7, #24]
 8004198:	f362 13c7 	bfi	r3, r2, #7, #1
 800419c:	763b      	strb	r3, [r7, #24]

    /* set batching info */
    if (val.batch.dec_ts != LIS2DUXS12_DEC_TS_OFF)
 800419e:	7a3b      	ldrb	r3, [r7, #8]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00f      	beq.n	80041c4 <lis2duxs12_fifo_mode_set+0xde>
    {
      fifo_batch.dec_ts_batch = (uint8_t)val.batch.dec_ts;
 80041a4:	7a3b      	ldrb	r3, [r7, #8]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	7d3b      	ldrb	r3, [r7, #20]
 80041ae:	f362 03c4 	bfi	r3, r2, #3, #2
 80041b2:	753b      	strb	r3, [r7, #20]
      fifo_batch.bdr_xl = (uint8_t)val.batch.bdr_xl;
 80041b4:	7a7b      	ldrb	r3, [r7, #9]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	7d3b      	ldrb	r3, [r7, #20]
 80041be:	f362 0302 	bfi	r3, r2, #0, #3
 80041c2:	753b      	strb	r3, [r7, #20]
    }

    fifo_ctrl.cfg_chg_en = val.cfg_change_in_fifo;
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	7f3b      	ldrb	r3, [r7, #28]
 80041ce:	f362 13c7 	bfi	r3, r2, #7, #1
 80041d2:	773b      	strb	r3, [r7, #28]

    /* set watermark */
    if (val.watermark > 0U)
 80041d4:	79bb      	ldrb	r3, [r7, #6]
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d014      	beq.n	800420a <lis2duxs12_fifo_mode_set+0x124>
    {
      fifo_ctrl.stop_on_fth = (val.fifo_event == LIS2DUXS12_FIFO_EV_WTM) ? 1 : 0;
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	bf0c      	ite	eq
 80041ec:	2301      	moveq	r3, #1
 80041ee:	2300      	movne	r3, #0
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	7f3b      	ldrb	r3, [r7, #28]
 80041f4:	f362 03c3 	bfi	r3, r2, #3, #1
 80041f8:	773b      	strb	r3, [r7, #28]
      fifo_wtm.fth = val.watermark;
 80041fa:	79bb      	ldrb	r3, [r7, #6]
 80041fc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8004200:	b2da      	uxtb	r2, r3
 8004202:	7e3b      	ldrb	r3, [r7, #24]
 8004204:	f362 0306 	bfi	r3, r2, #0, #7
 8004208:	763b      	strb	r3, [r7, #24]
    }

    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 800420a:	f107 0214 	add.w	r2, r7, #20
 800420e:	2301      	movs	r3, #1
 8004210:	2147      	movs	r1, #71	@ 0x47
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f7ff fa55 	bl	80036c2 <lis2duxs12_write_reg>
 8004218:	4602      	mov	r2, r0
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	4413      	add	r3, r2
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 8004220:	f107 0218 	add.w	r2, r7, #24
 8004224:	2301      	movs	r3, #1
 8004226:	2116      	movs	r1, #22
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f7ff fa4a 	bl	80036c2 <lis2duxs12_write_reg>
 800422e:	4602      	mov	r2, r0
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	4413      	add	r3, r2
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 8004236:	f107 021c 	add.w	r2, r7, #28
 800423a:	2301      	movs	r3, #1
 800423c:	2115      	movs	r1, #21
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7ff fa3f 	bl	80036c2 <lis2duxs12_write_reg>
 8004244:	4602      	mov	r2, r0
 8004246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004248:	4413      	add	r3, r2
 800424a:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 800424c:	f107 0220 	add.w	r2, r7, #32
 8004250:	2301      	movs	r3, #1
 8004252:	2113      	movs	r1, #19
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f7ff fa34 	bl	80036c2 <lis2duxs12_write_reg>
 800425a:	4602      	mov	r2, r0
 800425c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425e:	4413      	add	r3, r2
 8004260:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  return ret;
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004264:	4618      	mov	r0, r3
 8004266:	3728      	adds	r7, #40	@ 0x28
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d103      	bne.n	8004288 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8004280:	f04f 33ff 	mov.w	r3, #4294967295
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	e067      	b.n	8004358 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	7b1a      	ldrb	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	699a      	ldr	r2, [r3, #24]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a28      	ldr	r2, [pc, #160]	@ (8004364 <LIS2MDL_RegisterBusIO+0xf8>)
 80042c4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a27      	ldr	r2, [pc, #156]	@ (8004368 <LIS2MDL_RegisterBusIO+0xfc>)
 80042ca:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	69da      	ldr	r2, [r3, #28]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d103      	bne.n	80042ea <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 80042e2:	f04f 33ff 	mov.w	r3, #4294967295
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	e036      	b.n	8004358 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4798      	blx	r3
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 80042f6:	f04f 33ff 	mov.w	r3, #4294967295
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	e02c      	b.n	8004358 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d028      	beq.n	8004358 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800430c:	2b00      	cmp	r3, #0
 800430e:	d123      	bne.n	8004358 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d10d      	bne.n	8004334 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8004318:	2334      	movs	r3, #52	@ 0x34
 800431a:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 800431c:	7afb      	ldrb	r3, [r7, #11]
 800431e:	461a      	mov	r2, r3
 8004320:	2162      	movs	r1, #98	@ 0x62
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fb1b 	bl	800495e <LIS2MDL_Write_Reg>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d014      	beq.n	8004358 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800432e:	f04f 33ff 	mov.w	r3, #4294967295
 8004332:	e012      	b.n	800435a <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b03      	cmp	r3, #3
 800433a:	d101      	bne.n	8004340 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	e00c      	b.n	800435a <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3320      	adds	r3, #32
 8004344:	2101      	movs	r1, #1
 8004346:	4618      	mov	r0, r3
 8004348:	f000 ff79 	bl	800523e <lis2mdl_i2c_interface_set>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d002      	beq.n	8004358 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004352:	f04f 33ff 	mov.w	r3, #4294967295
 8004356:	e000      	b.n	800435a <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8004358:	68fb      	ldr	r3, [r7, #12]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	080049b5 	.word	0x080049b5
 8004368:	08004a37 	.word	0x08004a37

0800436c <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b03      	cmp	r3, #3
 800437a:	d144      	bne.n	8004406 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800437c:	f107 0208 	add.w	r2, r7, #8
 8004380:	2301      	movs	r3, #1
 8004382:	2162      	movs	r1, #98	@ 0x62
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fb97 	bl	8004ab8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8004390:	f04f 33ff 	mov.w	r3, #4294967295
 8004394:	e06c      	b.n	8004470 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004396:	f107 020c 	add.w	r2, r7, #12
 800439a:	2301      	movs	r3, #1
 800439c:	2160      	movs	r1, #96	@ 0x60
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fb8a 	bl	8004ab8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 80043aa:	f04f 33ff 	mov.w	r3, #4294967295
 80043ae:	e05f      	b.n	8004470 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 80043b0:	7a3b      	ldrb	r3, [r7, #8]
 80043b2:	f043 0310 	orr.w	r3, r3, #16
 80043b6:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 80043b8:	7a3b      	ldrb	r3, [r7, #8]
 80043ba:	f023 0302 	bic.w	r3, r3, #2
 80043be:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80043c0:	7b3b      	ldrb	r3, [r7, #12]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f362 0301 	bfi	r3, r2, #0, #2
 80043c8:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80043ca:	7b3b      	ldrb	r3, [r7, #12]
 80043cc:	f043 030c 	orr.w	r3, r3, #12
 80043d0:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80043d2:	f107 0208 	add.w	r2, r7, #8
 80043d6:	2301      	movs	r3, #1
 80043d8:	2162      	movs	r1, #98	@ 0x62
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fcab 	bl	8004d36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 80043e6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ea:	e041      	b.n	8004470 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80043ec:	f107 020c 	add.w	r2, r7, #12
 80043f0:	2301      	movs	r3, #1
 80043f2:	2160      	movs	r1, #96	@ 0x60
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fc9e 	bl	8004d36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d032      	beq.n	8004466 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004400:	f04f 33ff 	mov.w	r3, #4294967295
 8004404:	e034      	b.n	8004470 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3320      	adds	r3, #32
 800440a:	2101      	movs	r1, #1
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fe71 	bl	80050f4 <lis2mdl_block_data_update_set>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8004418:	f04f 33ff 	mov.w	r3, #4294967295
 800441c:	e028      	b.n	8004470 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3320      	adds	r3, #32
 8004422:	2102      	movs	r1, #2
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fde0 	bl	8004fea <lis2mdl_operating_mode_set>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8004430:	f04f 33ff 	mov.w	r3, #4294967295
 8004434:	e01c      	b.n	8004470 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3320      	adds	r3, #32
 800443a:	2103      	movs	r1, #3
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fdfa 	bl	8005036 <lis2mdl_data_rate_set>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8004448:	f04f 33ff 	mov.w	r3, #4294967295
 800444c:	e010      	b.n	8004470 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3320      	adds	r3, #32
 8004452:	2100      	movs	r1, #0
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fecc 	bl	80051f2 <lis2mdl_self_test_set>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004460:	f04f 33ff 	mov.w	r3, #4294967295
 8004464:	e004      	b.n	8004470 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f8a5 	bl	80045d0 <LIS2MDL_MAG_Disable>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 800448c:	f04f 33ff 	mov.w	r3, #4294967295
 8004490:	e004      	b.n	800449c <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d10b      	bne.n	80044ce <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80044b6:	2301      	movs	r3, #1
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	214f      	movs	r1, #79	@ 0x4f
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 fafb 	bl	8004ab8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00e      	beq.n	80044e6 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80044c8:	f04f 33ff 	mov.w	r3, #4294967295
 80044cc:	e00c      	b.n	80044e8 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3320      	adds	r3, #32
 80044d2:	6839      	ldr	r1, [r7, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fe7b 	bl	80051d0 <lis2mdl_device_id_get>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80044e0:	f04f 33ff 	mov.w	r3, #4294967295
 80044e4:	e000      	b.n	80044e8 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2200      	movs	r2, #0
 80044fe:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2200      	movs	r2, #0
 8004504:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2201      	movs	r2, #1
 800450a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2200      	movs	r2, #0
 8004510:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2200      	movs	r2, #0
 8004516:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2200      	movs	r2, #0
 800451c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2232      	movs	r2, #50	@ 0x32
 8004522:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	f04f 0200 	mov.w	r2, #0
 800452a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	4a04      	ldr	r2, [pc, #16]	@ (8004548 <LIS2MDL_GetCapabilities+0x58>)
 8004538:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	42c80000 	.word	0x42c80000

0800454c <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800455a:	2b01      	cmp	r3, #1
 800455c:	d101      	bne.n	8004562 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	e032      	b.n	80045c8 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b03      	cmp	r3, #3
 8004568:	d11d      	bne.n	80045a6 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800456a:	f107 020c 	add.w	r2, r7, #12
 800456e:	2301      	movs	r3, #1
 8004570:	2160      	movs	r1, #96	@ 0x60
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 faa0 	bl	8004ab8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800457e:	f04f 33ff 	mov.w	r3, #4294967295
 8004582:	e021      	b.n	80045c8 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8004584:	7b3b      	ldrb	r3, [r7, #12]
 8004586:	f023 0303 	bic.w	r3, r3, #3
 800458a:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800458c:	f107 020c 	add.w	r2, r7, #12
 8004590:	2301      	movs	r3, #1
 8004592:	2160      	movs	r1, #96	@ 0x60
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 fbce 	bl	8004d36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00e      	beq.n	80045be <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80045a0:	f04f 33ff 	mov.w	r3, #4294967295
 80045a4:	e010      	b.n	80045c8 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	3320      	adds	r3, #32
 80045aa:	2100      	movs	r1, #0
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fd1c 	bl	8004fea <lis2mdl_operating_mode_set>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80045b8:	f04f 33ff 	mov.w	r3, #4294967295
 80045bc:	e004      	b.n	80045c8 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e033      	b.n	800464e <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d11e      	bne.n	800462c <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80045ee:	f107 020c 	add.w	r2, r7, #12
 80045f2:	2301      	movs	r3, #1
 80045f4:	2160      	movs	r1, #96	@ 0x60
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fa5e 	bl	8004ab8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8004602:	f04f 33ff 	mov.w	r3, #4294967295
 8004606:	e022      	b.n	800464e <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004608:	7b3b      	ldrb	r3, [r7, #12]
 800460a:	2202      	movs	r2, #2
 800460c:	f362 0301 	bfi	r3, r2, #0, #2
 8004610:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004612:	f107 020c 	add.w	r2, r7, #12
 8004616:	2301      	movs	r3, #1
 8004618:	2160      	movs	r1, #96	@ 0x60
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fb8b 	bl	8004d36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00e      	beq.n	8004644 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004626:	f04f 33ff 	mov.w	r3, #4294967295
 800462a:	e010      	b.n	800464e <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3320      	adds	r3, #32
 8004630:	2102      	movs	r1, #2
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fcd9 	bl	8004fea <lis2mdl_operating_mode_set>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800463e:	f04f 33ff 	mov.w	r3, #4294967295
 8004642:	e004      	b.n	800464e <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float_t *Sensitivity)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8004666:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float_t *Odr)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3320      	adds	r3, #32
 800468a:	f107 020b 	add.w	r2, r7, #11
 800468e:	4611      	mov	r1, r2
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fcf7 	bl	8005084 <lis2mdl_data_rate_get>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 800469c:	f04f 33ff 	mov.w	r3, #4294967295
 80046a0:	e023      	b.n	80046ea <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80046a2:	7afb      	ldrb	r3, [r7, #11]
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d81b      	bhi.n	80046e0 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80046a8:	a201      	add	r2, pc, #4	@ (adr r2, 80046b0 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	080046c9 	.word	0x080046c9
 80046b8:	080046d1 	.word	0x080046d1
 80046bc:	080046d9 	.word	0x080046d9
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	4a0c      	ldr	r2, [pc, #48]	@ (80046f4 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80046c4:	601a      	str	r2, [r3, #0]
      break;
 80046c6:	e00f      	b.n	80046e8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	4a0b      	ldr	r2, [pc, #44]	@ (80046f8 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80046cc:	601a      	str	r2, [r3, #0]
      break;
 80046ce:	e00b      	b.n	80046e8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	4a0a      	ldr	r2, [pc, #40]	@ (80046fc <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80046d4:	601a      	str	r2, [r3, #0]
      break;
 80046d6:	e007      	b.n	80046e8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	4a09      	ldr	r2, [pc, #36]	@ (8004700 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80046dc:	601a      	str	r2, [r3, #0]
      break;
 80046de:	e003      	b.n	80046e8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80046e0:	f04f 33ff 	mov.w	r3, #4294967295
 80046e4:	60fb      	str	r3, [r7, #12]
      break;
 80046e6:	bf00      	nop
  }

  return ret;
 80046e8:	68fb      	ldr	r3, [r7, #12]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	41200000 	.word	0x41200000
 80046f8:	41a00000 	.word	0x41a00000
 80046fc:	42480000 	.word	0x42480000
 8004700:	42c80000 	.word	0x42c80000

08004704 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float_t Odr)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8004710:	edd7 7a00 	vldr	s15, [r7]
 8004714:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004718:	eef4 7ac7 	vcmpe.f32	s15, s14
 800471c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004720:	d801      	bhi.n	8004726 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8004722:	2300      	movs	r3, #0
 8004724:	e016      	b.n	8004754 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004726:	edd7 7a00 	vldr	s15, [r7]
 800472a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800472e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004736:	d801      	bhi.n	800473c <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8004738:	2301      	movs	r3, #1
 800473a:	e00b      	b.n	8004754 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800473c:	edd7 7a00 	vldr	s15, [r7]
 8004740:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80047c8 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8004744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474c:	d801      	bhi.n	8004752 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 800474e:	2302      	movs	r3, #2
 8004750:	e000      	b.n	8004754 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004752:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8004754:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b03      	cmp	r3, #3
 800475c:	d121      	bne.n	80047a2 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800475e:	f107 020c 	add.w	r2, r7, #12
 8004762:	2301      	movs	r3, #1
 8004764:	2160      	movs	r1, #96	@ 0x60
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f9a6 	bl	8004ab8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8004772:	f04f 33ff 	mov.w	r3, #4294967295
 8004776:	e022      	b.n	80047be <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	b2da      	uxtb	r2, r3
 8004780:	7b3b      	ldrb	r3, [r7, #12]
 8004782:	f362 0383 	bfi	r3, r2, #2, #2
 8004786:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004788:	f107 020c 	add.w	r2, r7, #12
 800478c:	2301      	movs	r3, #1
 800478e:	2160      	movs	r1, #96	@ 0x60
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fad0 	bl	8004d36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00f      	beq.n	80047bc <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 800479c:	f04f 33ff 	mov.w	r3, #4294967295
 80047a0:	e00d      	b.n	80047be <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3320      	adds	r3, #32
 80047a6:	7bfa      	ldrb	r2, [r7, #15]
 80047a8:	4611      	mov	r1, r2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fc43 	bl	8005036 <lis2mdl_data_rate_set>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 80047b6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ba:	e000      	b.n	80047be <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	42480000 	.word	0x42480000

080047cc <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *FullScale = 50;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2232      	movs	r2, #50	@ 0x32
 80047da:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	6039      	str	r1, [r7, #0]
  (void)pObj;
  (void)FullScale;

  return LIS2MDL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b084      	sub	sp, #16
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3320      	adds	r3, #32
 8004810:	f107 0208 	add.w	r2, r7, #8
 8004814:	4611      	mov	r1, r2
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fc92 	bl	8005140 <lis2mdl_magnetic_raw_get>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8004822:	f04f 33ff 	mov.w	r3, #4294967295
 8004826:	e00c      	b.n	8004842 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004828:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004830:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004838:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b088      	sub	sp, #32
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b03      	cmp	r3, #3
 8004860:	d134      	bne.n	80048cc <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8004862:	f107 0218 	add.w	r2, r7, #24
 8004866:	2306      	movs	r3, #6
 8004868:	2168      	movs	r1, #104	@ 0x68
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f924 	bl	8004ab8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <LIS2MDL_MAG_GetAxes+0x32>
    {
      return LIS2MDL_ERROR;
 8004876:	f04f 33ff 	mov.w	r3, #4294967295
 800487a:	e06c      	b.n	8004956 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 800487c:	7e7b      	ldrb	r3, [r7, #25]
 800487e:	b21b      	sxth	r3, r3
 8004880:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8004882:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004886:	b29b      	uxth	r3, r3
 8004888:	021b      	lsls	r3, r3, #8
 800488a:	b29b      	uxth	r3, r3
 800488c:	7e3a      	ldrb	r2, [r7, #24]
 800488e:	4413      	add	r3, r2
 8004890:	b29b      	uxth	r3, r3
 8004892:	b21b      	sxth	r3, r3
 8004894:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8004896:	7efb      	ldrb	r3, [r7, #27]
 8004898:	b21b      	sxth	r3, r3
 800489a:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 800489c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	021b      	lsls	r3, r3, #8
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	7eba      	ldrb	r2, [r7, #26]
 80048a8:	4413      	add	r3, r2
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	b21b      	sxth	r3, r3
 80048ae:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 80048b0:	7f7b      	ldrb	r3, [r7, #29]
 80048b2:	b21b      	sxth	r3, r3
 80048b4:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80048b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	021b      	lsls	r3, r3, #8
 80048be:	b29b      	uxth	r3, r3
 80048c0:	7f3a      	ldrb	r2, [r7, #28]
 80048c2:	4413      	add	r3, r2
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	b21b      	sxth	r3, r3
 80048c8:	82bb      	strh	r3, [r7, #20]
 80048ca:	e00d      	b.n	80048e8 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3320      	adds	r3, #32
 80048d0:	f107 0210 	add.w	r2, r7, #16
 80048d4:	4611      	mov	r1, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fc32 	bl	8005140 <lis2mdl_magnetic_raw_get>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 80048e2:	f04f 33ff 	mov.w	r3, #4294967295
 80048e6:	e036      	b.n	8004956 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 80048e8:	f107 030c 	add.w	r3, r7, #12
 80048ec:	4619      	mov	r1, r3
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff feb1 	bl	8004656 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80048f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80048f8:	ee07 3a90 	vmov	s15, r3
 80048fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004900:	edd7 7a03 	vldr	s15, [r7, #12]
 8004904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004908:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800490c:	ee17 2a90 	vmov	r2, s15
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004914:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004918:	ee07 3a90 	vmov	s15, r3
 800491c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004920:	edd7 7a03 	vldr	s15, [r7, #12]
 8004924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004928:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800492c:	ee17 2a90 	vmov	r2, s15
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004934:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004938:	ee07 3a90 	vmov	s15, r3
 800493c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004940:	edd7 7a03 	vldr	s15, [r7, #12]
 8004944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800494c:	ee17 2a90 	vmov	r2, s15
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3720      	adds	r7, #32
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	460b      	mov	r3, r1
 8004968:	70fb      	strb	r3, [r7, #3]
 800496a:	4613      	mov	r3, r2
 800496c:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b03      	cmp	r3, #3
 8004974:	d10b      	bne.n	800498e <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8004976:	1cba      	adds	r2, r7, #2
 8004978:	78f9      	ldrb	r1, [r7, #3]
 800497a:	2301      	movs	r3, #1
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f9da 	bl	8004d36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d010      	beq.n	80049aa <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8004988:	f04f 33ff 	mov.w	r3, #4294967295
 800498c:	e00e      	b.n	80049ac <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f103 0020 	add.w	r0, r3, #32
 8004994:	1cba      	adds	r2, r7, #2
 8004996:	78f9      	ldrb	r1, [r7, #3]
 8004998:	2301      	movs	r3, #1
 800499a:	f000 fb08 	bl	8004fae <lis2mdl_write_reg>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80049a4:	f04f 33ff 	mov.w	r3, #4294967295
 80049a8:	e000      	b.n	80049ac <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80049b4:	b590      	push	{r4, r7, lr}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	461a      	mov	r2, r3
 80049c0:	460b      	mov	r3, r1
 80049c2:	72fb      	strb	r3, [r7, #11]
 80049c4:	4613      	mov	r3, r2
 80049c6:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10e      	bne.n	80049f2 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	695c      	ldr	r4, [r3, #20]
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	7b1b      	ldrb	r3, [r3, #12]
 80049dc:	4618      	mov	r0, r3
 80049de:	7afb      	ldrb	r3, [r7, #11]
 80049e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	4619      	mov	r1, r3
 80049e8:	893b      	ldrh	r3, [r7, #8]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	47a0      	blx	r4
 80049ee:	4603      	mov	r3, r0
 80049f0:	e01d      	b.n	8004a2e <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d10b      	bne.n	8004a12 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	695c      	ldr	r4, [r3, #20]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	7b1b      	ldrb	r3, [r3, #12]
 8004a02:	4618      	mov	r0, r3
 8004a04:	7afb      	ldrb	r3, [r7, #11]
 8004a06:	b299      	uxth	r1, r3
 8004a08:	893b      	ldrh	r3, [r7, #8]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	47a0      	blx	r4
 8004a0e:	4603      	mov	r3, r0
 8004a10:	e00d      	b.n	8004a2e <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	695c      	ldr	r4, [r3, #20]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	7b1b      	ldrb	r3, [r3, #12]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	7afb      	ldrb	r3, [r7, #11]
 8004a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	4619      	mov	r1, r3
 8004a26:	893b      	ldrh	r3, [r7, #8]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	47a0      	blx	r4
 8004a2c:	4603      	mov	r3, r0
  }
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	371c      	adds	r7, #28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd90      	pop	{r4, r7, pc}

08004a36 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a36:	b590      	push	{r4, r7, lr}
 8004a38:	b087      	sub	sp, #28
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	461a      	mov	r2, r3
 8004a42:	460b      	mov	r3, r1
 8004a44:	72fb      	strb	r3, [r7, #11]
 8004a46:	4613      	mov	r3, r2
 8004a48:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10e      	bne.n	8004a74 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	691c      	ldr	r4, [r3, #16]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	7b1b      	ldrb	r3, [r3, #12]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	7afb      	ldrb	r3, [r7, #11]
 8004a62:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	4619      	mov	r1, r3
 8004a6a:	893b      	ldrh	r3, [r7, #8]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	47a0      	blx	r4
 8004a70:	4603      	mov	r3, r0
 8004a72:	e01d      	b.n	8004ab0 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d10b      	bne.n	8004a94 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	691c      	ldr	r4, [r3, #16]
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	7b1b      	ldrb	r3, [r3, #12]
 8004a84:	4618      	mov	r0, r3
 8004a86:	7afb      	ldrb	r3, [r7, #11]
 8004a88:	b299      	uxth	r1, r3
 8004a8a:	893b      	ldrh	r3, [r7, #8]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	47a0      	blx	r4
 8004a90:	4603      	mov	r3, r0
 8004a92:	e00d      	b.n	8004ab0 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	691c      	ldr	r4, [r3, #16]
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	7b1b      	ldrb	r3, [r3, #12]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	7afb      	ldrb	r3, [r7, #11]
 8004aa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	893b      	ldrh	r3, [r7, #8]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	47a0      	blx	r4
 8004aae:	4603      	mov	r3, r0
  }
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	371c      	adds	r7, #28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd90      	pop	{r4, r7, pc}

08004ab8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08c      	sub	sp, #48	@ 0x30
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	607a      	str	r2, [r7, #4]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	72fb      	strb	r3, [r7, #11]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004acc:	2301      	movs	r3, #1
 8004ace:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004ad2:	2340      	movs	r3, #64	@ 0x40
 8004ad4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8004ade:	233d      	movs	r3, #61	@ 0x3d
 8004ae0:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004ae2:	2315      	movs	r3, #21
 8004ae4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004ae8:	2316      	movs	r3, #22
 8004aea:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8004aee:	2317      	movs	r3, #23
 8004af0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 8004af4:	2314      	movs	r3, #20
 8004af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004afa:	2344      	movs	r3, #68	@ 0x44
 8004afc:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8004afe:	2302      	movs	r3, #2
 8004b00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8004b04:	2339      	movs	r3, #57	@ 0x39
 8004b06:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004b10:	2329      	movs	r3, #41	@ 0x29
 8004b12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004b16:	231e      	movs	r3, #30
 8004b18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 8004b22:	893b      	ldrh	r3, [r7, #8]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004b28:	2310      	movs	r3, #16
 8004b2a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004b34:	2340      	movs	r3, #64	@ 0x40
 8004b36:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f103 0020 	add.w	r0, r3, #32
 8004b40:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8004b44:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004b48:	2301      	movs	r3, #1
 8004b4a:	f000 fa30 	bl	8004fae <lis2mdl_write_reg>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8004b54:	f04f 33ff 	mov.w	r3, #4294967295
 8004b58:	e0e9      	b.n	8004d2e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f103 0020 	add.w	r0, r3, #32
 8004b60:	f107 021f 	add.w	r2, r7, #31
 8004b64:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8004b68:	2301      	movs	r3, #1
 8004b6a:	f000 fa20 	bl	8004fae <lis2mdl_write_reg>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8004b74:	f04f 33ff 	mov.w	r3, #4294967295
 8004b78:	e0d9      	b.n	8004d2e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f103 0020 	add.w	r0, r3, #32
 8004b80:	f107 020b 	add.w	r2, r7, #11
 8004b84:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f000 fa10 	bl	8004fae <lis2mdl_write_reg>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8004b94:	f04f 33ff 	mov.w	r3, #4294967295
 8004b98:	e0c9      	b.n	8004d2e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f103 0020 	add.w	r0, r3, #32
 8004ba0:	f107 021d 	add.w	r2, r7, #29
 8004ba4:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f000 fa00 	bl	8004fae <lis2mdl_write_reg>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8004bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb8:	e0b9      	b.n	8004d2e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f103 0020 	add.w	r0, r3, #32
 8004bc0:	f107 021e 	add.w	r2, r7, #30
 8004bc4:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8004bc8:	2301      	movs	r3, #1
 8004bca:	f000 f9f0 	bl	8004fae <lis2mdl_write_reg>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8004bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd8:	e0a9      	b.n	8004d2e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f103 0020 	add.w	r0, r3, #32
 8004be0:	f107 0220 	add.w	r2, r7, #32
 8004be4:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004be8:	2301      	movs	r3, #1
 8004bea:	f000 f9e0 	bl	8004fae <lis2mdl_write_reg>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8004bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf8:	e099      	b.n	8004d2e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f103 0020 	add.w	r0, r3, #32
 8004c00:	f107 021c 	add.w	r2, r7, #28
 8004c04:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8004c08:	2301      	movs	r3, #1
 8004c0a:	f000 f9b2 	bl	8004f72 <lis2mdl_read_reg>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8004c14:	f04f 33ff 	mov.w	r3, #4294967295
 8004c18:	e089      	b.n	8004d2e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004c1a:	7f3b      	ldrb	r3, [r7, #28]
 8004c1c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d102      	bne.n	8004c2a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004c24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004c28:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f103 0020 	add.w	r0, r3, #32
 8004c30:	f107 021c 	add.w	r2, r7, #28
 8004c34:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f000 f9b8 	bl	8004fae <lis2mdl_write_reg>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8004c44:	f04f 33ff 	mov.w	r3, #4294967295
 8004c48:	e071      	b.n	8004d2e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f103 0020 	add.w	r0, r3, #32
 8004c50:	f107 0214 	add.w	r2, r7, #20
 8004c54:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8004c58:	2306      	movs	r3, #6
 8004c5a:	f000 f98a 	bl	8004f72 <lis2mdl_read_reg>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8004c64:	f04f 33ff 	mov.w	r3, #4294967295
 8004c68:	e061      	b.n	8004d2e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f103 0020 	add.w	r0, r3, #32
 8004c70:	f107 021b 	add.w	r2, r7, #27
 8004c74:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8004c78:	2301      	movs	r3, #1
 8004c7a:	f000 f97a 	bl	8004f72 <lis2mdl_read_reg>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8004c84:	f04f 33ff 	mov.w	r3, #4294967295
 8004c88:	e051      	b.n	8004d2e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8004c8a:	7efa      	ldrb	r2, [r7, #27]
 8004c8c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004c90:	4013      	ands	r3, r2
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d1e6      	bne.n	8004c6a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f103 0020 	add.w	r0, r3, #32
 8004ca2:	f107 021b 	add.w	r2, r7, #27
 8004ca6:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8004caa:	2301      	movs	r3, #1
 8004cac:	f000 f961 	bl	8004f72 <lis2mdl_read_reg>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8004cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cba:	e038      	b.n	8004d2e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8004cbc:	7efa      	ldrb	r2, [r7, #27]
 8004cbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d1e6      	bne.n	8004c9c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f103 0020 	add.w	r0, r3, #32
 8004cd4:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8004cd8:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f000 f966 	bl	8004fae <lis2mdl_write_reg>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8004ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cec:	e01f      	b.n	8004d2e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f103 0020 	add.w	r0, r3, #32
 8004cf4:	893b      	ldrh	r3, [r7, #8]
 8004cf6:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	f000 f939 	bl	8004f72 <lis2mdl_read_reg>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8004d06:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0a:	e010      	b.n	8004d2e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f103 0020 	add.w	r0, r3, #32
 8004d12:	f107 0220 	add.w	r2, r7, #32
 8004d16:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f000 f947 	bl	8004fae <lis2mdl_write_reg>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8004d26:	f04f 33ff 	mov.w	r3, #4294967295
 8004d2a:	e000      	b.n	8004d2e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3730      	adds	r7, #48	@ 0x30
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b08c      	sub	sp, #48	@ 0x30
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	461a      	mov	r2, r3
 8004d42:	460b      	mov	r3, r1
 8004d44:	72fb      	strb	r3, [r7, #11]
 8004d46:	4613      	mov	r3, r2
 8004d48:	813b      	strh	r3, [r7, #8]
  (void)Length;
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004d50:	2340      	movs	r3, #64	@ 0x40
 8004d52:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8004d5c:	233c      	movs	r3, #60	@ 0x3c
 8004d5e:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004d60:	2315      	movs	r3, #21
 8004d62:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004d66:	2316      	movs	r3, #22
 8004d68:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8004d6c:	2317      	movs	r3, #23
 8004d6e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8004d76:	2314      	movs	r3, #20
 8004d78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004d7c:	2344      	movs	r3, #68	@ 0x44
 8004d7e:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8004d80:	2339      	movs	r3, #57	@ 0x39
 8004d82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 8004d86:	2380      	movs	r3, #128	@ 0x80
 8004d88:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004d8c:	2329      	movs	r3, #41	@ 0x29
 8004d8e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004d92:	231e      	movs	r3, #30
 8004d94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004d9e:	2310      	movs	r3, #16
 8004da0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004daa:	2340      	movs	r3, #64	@ 0x40
 8004dac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8004db0:	230e      	movs	r3, #14
 8004db2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f103 0020 	add.w	r0, r3, #32
 8004dbc:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8004dc0:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	f000 f8f2 	bl	8004fae <lis2mdl_write_reg>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8004dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd4:	e0c9      	b.n	8004f6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f103 0020 	add.w	r0, r3, #32
 8004ddc:	f107 021f 	add.w	r2, r7, #31
 8004de0:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8004de4:	2301      	movs	r3, #1
 8004de6:	f000 f8e2 	bl	8004fae <lis2mdl_write_reg>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8004df0:	f04f 33ff 	mov.w	r3, #4294967295
 8004df4:	e0b9      	b.n	8004f6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f103 0020 	add.w	r0, r3, #32
 8004dfc:	f107 020b 	add.w	r2, r7, #11
 8004e00:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8004e04:	2301      	movs	r3, #1
 8004e06:	f000 f8d2 	bl	8004fae <lis2mdl_write_reg>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8004e10:	f04f 33ff 	mov.w	r3, #4294967295
 8004e14:	e0a9      	b.n	8004f6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f103 0020 	add.w	r0, r3, #32
 8004e1c:	f107 021e 	add.w	r2, r7, #30
 8004e20:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8004e24:	2301      	movs	r3, #1
 8004e26:	f000 f8c2 	bl	8004fae <lis2mdl_write_reg>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d002      	beq.n	8004e36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8004e30:	f04f 33ff 	mov.w	r3, #4294967295
 8004e34:	e099      	b.n	8004f6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f103 0020 	add.w	r0, r3, #32
 8004e3c:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8004e40:	2301      	movs	r3, #1
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	f000 f8b3 	bl	8004fae <lis2mdl_write_reg>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8004e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e52:	e08a      	b.n	8004f6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f103 0020 	add.w	r0, r3, #32
 8004e5a:	f107 021d 	add.w	r2, r7, #29
 8004e5e:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8004e62:	2301      	movs	r3, #1
 8004e64:	f000 f8a3 	bl	8004fae <lis2mdl_write_reg>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8004e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e72:	e07a      	b.n	8004f6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f103 0020 	add.w	r0, r3, #32
 8004e7a:	f107 0220 	add.w	r2, r7, #32
 8004e7e:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004e82:	2301      	movs	r3, #1
 8004e84:	f000 f893 	bl	8004fae <lis2mdl_write_reg>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8004e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e92:	e06a      	b.n	8004f6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f103 0020 	add.w	r0, r3, #32
 8004e9a:	f107 021c 	add.w	r2, r7, #28
 8004e9e:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f000 f865 	bl	8004f72 <lis2mdl_read_reg>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8004eae:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb2:	e05a      	b.n	8004f6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004eb4:	7f3b      	ldrb	r3, [r7, #28]
 8004eb6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d102      	bne.n	8004ec4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004ebe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ec2:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f103 0020 	add.w	r0, r3, #32
 8004eca:	f107 021c 	add.w	r2, r7, #28
 8004ece:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f000 f86b 	bl	8004fae <lis2mdl_write_reg>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8004ede:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee2:	e042      	b.n	8004f6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f103 0020 	add.w	r0, r3, #32
 8004eea:	f107 0214 	add.w	r2, r7, #20
 8004eee:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8004ef2:	2306      	movs	r3, #6
 8004ef4:	f000 f83d 	bl	8004f72 <lis2mdl_read_reg>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8004efe:	f04f 33ff 	mov.w	r3, #4294967295
 8004f02:	e032      	b.n	8004f6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f103 0020 	add.w	r0, r3, #32
 8004f0a:	f107 021b 	add.w	r2, r7, #27
 8004f0e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8004f12:	2301      	movs	r3, #1
 8004f14:	f000 f82d 	bl	8004f72 <lis2mdl_read_reg>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8004f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f22:	e022      	b.n	8004f6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8004f24:	7efa      	ldrb	r2, [r7, #27]
 8004f26:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d1e6      	bne.n	8004f04 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f103 0020 	add.w	r0, r3, #32
 8004f3c:	f107 021b 	add.w	r2, r7, #27
 8004f40:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8004f44:	2301      	movs	r3, #1
 8004f46:	f000 f814 	bl	8004f72 <lis2mdl_read_reg>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8004f50:	f04f 33ff 	mov.w	r3, #4294967295
 8004f54:	e009      	b.n	8004f6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8004f56:	7efa      	ldrb	r2, [r7, #27]
 8004f58:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d1e6      	bne.n	8004f36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3730      	adds	r7, #48	@ 0x30
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <lis2mdl_read_reg>:
  *
  */
int32_t __weak lis2mdl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004f72:	b590      	push	{r4, r7, lr}
 8004f74:	b087      	sub	sp, #28
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	460b      	mov	r3, r1
 8004f80:	72fb      	strb	r3, [r7, #11]
 8004f82:	4613      	mov	r3, r2
 8004f84:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <lis2mdl_read_reg+0x20>
  {
    return -1;
 8004f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f90:	e009      	b.n	8004fa6 <lis2mdl_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	685c      	ldr	r4, [r3, #4]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	68d8      	ldr	r0, [r3, #12]
 8004f9a:	893b      	ldrh	r3, [r7, #8]
 8004f9c:	7af9      	ldrb	r1, [r7, #11]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	47a0      	blx	r4
 8004fa2:	6178      	str	r0, [r7, #20]

  return ret;
 8004fa4:	697b      	ldr	r3, [r7, #20]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd90      	pop	{r4, r7, pc}

08004fae <lis2mdl_write_reg>:
  *
  */
int32_t __weak lis2mdl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004fae:	b590      	push	{r4, r7, lr}
 8004fb0:	b087      	sub	sp, #28
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	60f8      	str	r0, [r7, #12]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	461a      	mov	r2, r3
 8004fba:	460b      	mov	r3, r1
 8004fbc:	72fb      	strb	r3, [r7, #11]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d102      	bne.n	8004fce <lis2mdl_write_reg+0x20>
  {
    return -1;
 8004fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fcc:	e009      	b.n	8004fe2 <lis2mdl_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681c      	ldr	r4, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	68d8      	ldr	r0, [r3, #12]
 8004fd6:	893b      	ldrh	r3, [r7, #8]
 8004fd8:	7af9      	ldrb	r1, [r7, #11]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	47a0      	blx	r4
 8004fde:	6178      	str	r0, [r7, #20]

  return ret;
 8004fe0:	697b      	ldr	r3, [r7, #20]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd90      	pop	{r4, r7, pc}

08004fea <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(const stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b084      	sub	sp, #16
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004ff6:	f107 0208 	add.w	r2, r7, #8
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	2160      	movs	r1, #96	@ 0x60
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff ffb7 	bl	8004f72 <lis2mdl_read_reg>
 8005004:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10f      	bne.n	800502c <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 800500c:	78fb      	ldrb	r3, [r7, #3]
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	b2da      	uxtb	r2, r3
 8005014:	7a3b      	ldrb	r3, [r7, #8]
 8005016:	f362 0301 	bfi	r3, r2, #0, #2
 800501a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800501c:	f107 0208 	add.w	r2, r7, #8
 8005020:	2301      	movs	r3, #1
 8005022:	2160      	movs	r1, #96	@ 0x60
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff ffc2 	bl	8004fae <lis2mdl_write_reg>
 800502a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800502c:	68fb      	ldr	r3, [r7, #12]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(const stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005042:	f107 0208 	add.w	r2, r7, #8
 8005046:	2301      	movs	r3, #1
 8005048:	2160      	movs	r1, #96	@ 0x60
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7ff ff91 	bl	8004f72 <lis2mdl_read_reg>
 8005050:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10f      	bne.n	8005078 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8005058:	78fb      	ldrb	r3, [r7, #3]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	b2da      	uxtb	r2, r3
 8005060:	7a3b      	ldrb	r3, [r7, #8]
 8005062:	f362 0383 	bfi	r3, r2, #2, #2
 8005066:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005068:	f107 0208 	add.w	r2, r7, #8
 800506c:	2301      	movs	r3, #1
 800506e:	2160      	movs	r1, #96	@ 0x60
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff ff9c 	bl	8004fae <lis2mdl_write_reg>
 8005076:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005078:	68fb      	ldr	r3, [r7, #12]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(const stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800508e:	f107 0208 	add.w	r2, r7, #8
 8005092:	2301      	movs	r3, #1
 8005094:	2160      	movs	r1, #96	@ 0x60
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7ff ff6b 	bl	8004f72 <lis2mdl_read_reg>
 800509c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800509e:	7a3b      	ldrb	r3, [r7, #8]
 80050a0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	d81a      	bhi.n	80050e0 <lis2mdl_data_rate_get+0x5c>
 80050aa:	a201      	add	r2, pc, #4	@ (adr r2, 80050b0 <lis2mdl_data_rate_get+0x2c>)
 80050ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b0:	080050c1 	.word	0x080050c1
 80050b4:	080050c9 	.word	0x080050c9
 80050b8:	080050d1 	.word	0x080050d1
 80050bc:	080050d9 	.word	0x080050d9
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2200      	movs	r2, #0
 80050c4:	701a      	strb	r2, [r3, #0]
      break;
 80050c6:	e00f      	b.n	80050e8 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2201      	movs	r2, #1
 80050cc:	701a      	strb	r2, [r3, #0]
      break;
 80050ce:	e00b      	b.n	80050e8 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2202      	movs	r2, #2
 80050d4:	701a      	strb	r2, [r3, #0]
      break;
 80050d6:	e007      	b.n	80050e8 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2203      	movs	r2, #3
 80050dc:	701a      	strb	r2, [r3, #0]
      break;
 80050de:	e003      	b.n	80050e8 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2200      	movs	r2, #0
 80050e4:	701a      	strb	r2, [r3, #0]
      break;
 80050e6:	bf00      	nop
  }

  return ret;
 80050e8:	68fb      	ldr	r3, [r7, #12]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop

080050f4 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	460b      	mov	r3, r1
 80050fe:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005100:	f107 0208 	add.w	r2, r7, #8
 8005104:	2301      	movs	r3, #1
 8005106:	2162      	movs	r1, #98	@ 0x62
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff ff32 	bl	8004f72 <lis2mdl_read_reg>
 800510e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10f      	bne.n	8005136 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005116:	78fb      	ldrb	r3, [r7, #3]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	b2da      	uxtb	r2, r3
 800511e:	7a3b      	ldrb	r3, [r7, #8]
 8005120:	f362 1304 	bfi	r3, r2, #4, #1
 8005124:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005126:	f107 0208 	add.w	r2, r7, #8
 800512a:	2301      	movs	r3, #1
 800512c:	2162      	movs	r1, #98	@ 0x62
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7ff ff3d 	bl	8004fae <lis2mdl_write_reg>
 8005134:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005136:	68fb      	ldr	r3, [r7, #12]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 800514a:	f107 020c 	add.w	r2, r7, #12
 800514e:	2306      	movs	r3, #6
 8005150:	2168      	movs	r1, #104	@ 0x68
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7ff ff0d 	bl	8004f72 <lis2mdl_read_reg>
 8005158:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800515a:	7b7b      	ldrb	r3, [r7, #13]
 800515c:	b21a      	sxth	r2, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005168:	b29b      	uxth	r3, r3
 800516a:	021b      	lsls	r3, r3, #8
 800516c:	b29b      	uxth	r3, r3
 800516e:	7b3a      	ldrb	r2, [r7, #12]
 8005170:	4413      	add	r3, r2
 8005172:	b29b      	uxth	r3, r3
 8005174:	b21a      	sxth	r2, r3
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800517a:	7bfa      	ldrb	r2, [r7, #15]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	3302      	adds	r3, #2
 8005180:	b212      	sxth	r2, r2
 8005182:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	3302      	adds	r3, #2
 8005188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800518c:	b29b      	uxth	r3, r3
 800518e:	021b      	lsls	r3, r3, #8
 8005190:	b29b      	uxth	r3, r3
 8005192:	7bba      	ldrb	r2, [r7, #14]
 8005194:	4413      	add	r3, r2
 8005196:	b29a      	uxth	r2, r3
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	3302      	adds	r3, #2
 800519c:	b212      	sxth	r2, r2
 800519e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80051a0:	7c7a      	ldrb	r2, [r7, #17]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	3304      	adds	r3, #4
 80051a6:	b212      	sxth	r2, r2
 80051a8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	3304      	adds	r3, #4
 80051ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	021b      	lsls	r3, r3, #8
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	7c3a      	ldrb	r2, [r7, #16]
 80051ba:	4413      	add	r3, r2
 80051bc:	b29a      	uxth	r2, r3
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	3304      	adds	r3, #4
 80051c2:	b212      	sxth	r2, r2
 80051c4:	801a      	strh	r2, [r3, #0]

  return ret;
 80051c6:	697b      	ldr	r3, [r7, #20]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 80051da:	2301      	movs	r3, #1
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	214f      	movs	r1, #79	@ 0x4f
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff fec6 	bl	8004f72 <lis2mdl_read_reg>
 80051e6:	60f8      	str	r0, [r7, #12]

  return ret;
 80051e8:	68fb      	ldr	r3, [r7, #12]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	460b      	mov	r3, r1
 80051fc:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80051fe:	f107 0208 	add.w	r2, r7, #8
 8005202:	2301      	movs	r3, #1
 8005204:	2162      	movs	r1, #98	@ 0x62
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff feb3 	bl	8004f72 <lis2mdl_read_reg>
 800520c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10f      	bne.n	8005234 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8005214:	78fb      	ldrb	r3, [r7, #3]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	b2da      	uxtb	r2, r3
 800521c:	7a3b      	ldrb	r3, [r7, #8]
 800521e:	f362 0341 	bfi	r3, r2, #1, #1
 8005222:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005224:	f107 0208 	add.w	r2, r7, #8
 8005228:	2301      	movs	r3, #1
 800522a:	2162      	movs	r1, #98	@ 0x62
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7ff febe 	bl	8004fae <lis2mdl_write_reg>
 8005232:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005234:	68fb      	ldr	r3, [r7, #12]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(const stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	460b      	mov	r3, r1
 8005248:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800524a:	f107 0208 	add.w	r2, r7, #8
 800524e:	2301      	movs	r3, #1
 8005250:	2162      	movs	r1, #98	@ 0x62
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7ff fe8d 	bl	8004f72 <lis2mdl_read_reg>
 8005258:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10f      	bne.n	8005280 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8005260:	78fb      	ldrb	r3, [r7, #3]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	b2da      	uxtb	r2, r3
 8005268:	7a3b      	ldrb	r3, [r7, #8]
 800526a:	f362 1345 	bfi	r3, r2, #5, #1
 800526e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005270:	f107 0208 	add.w	r2, r7, #8
 8005274:	2301      	movs	r3, #1
 8005276:	2162      	movs	r1, #98	@ 0x62
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff fe98 	bl	8004fae <lis2mdl_write_reg>
 800527e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005280:	68fb      	ldr	r3, [r7, #12]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <LPS22DF_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_RegisterBusIO(LPS22DF_Object_t *pObj, LPS22DF_IO_t *pIO)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d103      	bne.n	80052a8 <LPS22DF_RegisterBusIO+0x1c>
  {
    ret = LPS22DF_ERROR;
 80052a0:	f04f 33ff 	mov.w	r3, #4294967295
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	e051      	b.n	800534c <LPS22DF_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	7b1a      	ldrb	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	691a      	ldr	r2, [r3, #16]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	695a      	ldr	r2, [r3, #20]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	699a      	ldr	r2, [r3, #24]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005358 <LPS22DF_RegisterBusIO+0xcc>)
 80052e4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a1c      	ldr	r2, [pc, #112]	@ (800535c <LPS22DF_RegisterBusIO+0xd0>)
 80052ea:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	69da      	ldr	r2, [r3, #28]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d103      	bne.n	800530a <LPS22DF_RegisterBusIO+0x7e>
    {
      ret = LPS22DF_ERROR;
 8005302:	f04f 33ff 	mov.w	r3, #4294967295
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	e020      	b.n	800534c <LPS22DF_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22DF_OK)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4798      	blx	r3
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <LPS22DF_RegisterBusIO+0x92>
    {
      ret = LPS22DF_ERROR;
 8005316:	f04f 33ff 	mov.w	r3, #4294967295
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	e016      	b.n	800534c <LPS22DF_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	2b02      	cmp	r3, #2
 8005324:	d112      	bne.n	800534c <LPS22DF_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10d      	bne.n	800534c <LPS22DF_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x20;
 8005330:	2320      	movs	r3, #32
 8005332:	72fb      	strb	r3, [r7, #11]

          if (LPS22DF_Write_Reg(pObj, LPS22DF_IF_CTRL, data) != LPS22DF_OK)
 8005334:	7afb      	ldrb	r3, [r7, #11]
 8005336:	461a      	mov	r2, r3
 8005338:	210e      	movs	r1, #14
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f9f3 	bl	8005726 <LPS22DF_Write_Reg>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <LPS22DF_RegisterBusIO+0xc0>
          {
            ret = LPS22DF_ERROR;
 8005346:	f04f 33ff 	mov.w	r3, #4294967295
 800534a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800534c:	68fb      	ldr	r3, [r7, #12]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	08005ac9 	.word	0x08005ac9
 800535c:	08005aff 	.word	0x08005aff

08005360 <LPS22DF_Init>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Init(LPS22DF_Object_t *pObj)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800536e:	2b00      	cmp	r3, #0
 8005370:	d108      	bne.n	8005384 <LPS22DF_Init+0x24>
  {
    if (LPS22DF_Initialize(pObj) != LPS22DF_OK)
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fb4c 	bl	8005a10 <LPS22DF_Initialize>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <LPS22DF_Init+0x24>
    {
      return LPS22DF_ERROR;
 800537e:	f04f 33ff 	mov.w	r3, #4294967295
 8005382:	e004      	b.n	800538e <LPS22DF_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <LPS22DF_DeInit>:
  * @brief  Deinitialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_DeInit(LPS22DF_Object_t *pObj)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b082      	sub	sp, #8
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d111      	bne.n	80053cc <LPS22DF_DeInit+0x36>
  {
    if (LPS22DF_PRESS_Disable(pObj) != LPS22DF_OK)
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f882 	bl	80054b2 <LPS22DF_PRESS_Disable>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d002      	beq.n	80053ba <LPS22DF_DeInit+0x24>
    {
      return LPS22DF_ERROR;
 80053b4:	f04f 33ff 	mov.w	r3, #4294967295
 80053b8:	e00d      	b.n	80053d6 <LPS22DF_DeInit+0x40>
    }

    if (LPS22DF_TEMP_Disable(pObj) != LPS22DF_OK)
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f927 	bl	800560e <LPS22DF_TEMP_Disable>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <LPS22DF_DeInit+0x36>
    {
      return LPS22DF_ERROR;
 80053c6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ca:	e004      	b.n	80053d6 <LPS22DF_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <LPS22DF_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_ReadID(LPS22DF_Object_t *pObj, uint8_t *Id)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b084      	sub	sp, #16
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]
  lps22df_id_t val;
  if (lps22df_id_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3320      	adds	r3, #32
 80053ec:	f107 020c 	add.w	r2, r7, #12
 80053f0:	4611      	mov	r1, r2
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fc22 	bl	8005c3c <lps22df_id_get>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <LPS22DF_ReadID+0x26>
  {
    return LPS22DF_ERROR;
 80053fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005402:	e003      	b.n	800540c <LPS22DF_ReadID+0x2e>
  }

  *Id = val.whoami;
 8005404:	7b3a      	ldrb	r2, [r7, #12]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	701a      	strb	r2, [r3, #0]

  return LPS22DF_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <LPS22DF_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22DF sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_GetCapabilities(LPS22DF_Object_t *pObj, LPS22DF_Capabilities_t *Capabilities)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2200      	movs	r2, #0
 8005422:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2201      	movs	r2, #1
 8005428:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2201      	movs	r2, #1
 800542e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2200      	movs	r2, #0
 8005434:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2200      	movs	r2, #0
 800543a:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	f04f 0200 	mov.w	r2, #0
 8005442:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	4a08      	ldr	r2, [pc, #32]	@ (8005468 <LPS22DF_GetCapabilities+0x54>)
 8005448:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	4a06      	ldr	r2, [pc, #24]	@ (8005468 <LPS22DF_GetCapabilities+0x54>)
 800544e:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	615a      	str	r2, [r3, #20]
  return LPS22DF_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	43480000 	.word	0x43480000

0800546c <LPS22DF_PRESS_Enable>:
  * @brief  Enable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Enable(LPS22DF_Object_t *pObj)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <LPS22DF_PRESS_Enable+0x16>
  {
    return LPS22DF_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	e013      	b.n	80054aa <LPS22DF_PRESS_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f103 0220 	add.w	r2, r3, #32
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3333      	adds	r3, #51	@ 0x33
 800548c:	4619      	mov	r1, r3
 800548e:	4610      	mov	r0, r2
 8005490:	f000 fdb2 	bl	8005ff8 <lps22df_mode_set>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <LPS22DF_PRESS_Enable+0x34>
  {
    return LPS22DF_ERROR;
 800549a:	f04f 33ff 	mov.w	r3, #4294967295
 800549e:	e004      	b.n	80054aa <LPS22DF_PRESS_Enable+0x3e>
  }

  pObj->press_is_enabled = 1;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <LPS22DF_PRESS_Disable>:
  * @brief  Disable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Disable(LPS22DF_Object_t *pObj)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <LPS22DF_PRESS_Disable+0x16>
  {
    return LPS22DF_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	e030      	b.n	800552a <LPS22DF_PRESS_Disable+0x78>
  }

  /* Check if the LPS22DF temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d126      	bne.n	8005520 <LPS22DF_PRESS_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3320      	adds	r3, #32
 80054d6:	f107 020c 	add.w	r2, r7, #12
 80054da:	4611      	mov	r1, r2
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fde9 	bl	80060b4 <lps22df_mode_get>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <LPS22DF_PRESS_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 80054e8:	f04f 33ff 	mov.w	r3, #4294967295
 80054ec:	e01d      	b.n	800552a <LPS22DF_PRESS_Disable+0x78>
    }

    (void)memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3333      	adds	r3, #51	@ 0x33
 80054f2:	461a      	mov	r2, r3
 80054f4:	f107 030c 	add.w	r3, r7, #12
 80054f8:	8819      	ldrh	r1, [r3, #0]
 80054fa:	789b      	ldrb	r3, [r3, #2]
 80054fc:	8011      	strh	r1, [r2, #0]
 80054fe:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 8005500:	2300      	movs	r3, #0
 8005502:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3320      	adds	r3, #32
 8005508:	f107 020c 	add.w	r2, r7, #12
 800550c:	4611      	mov	r1, r2
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fd72 	bl	8005ff8 <lps22df_mode_set>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <LPS22DF_PRESS_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 800551a:	f04f 33ff 	mov.w	r3, #4294967295
 800551e:	e004      	b.n	800552a <LPS22DF_PRESS_Disable+0x78>
    }
  }

  pObj->press_is_enabled = 0;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <LPS22DF_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b082      	sub	sp, #8
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f90c 	bl	800575c <LPS22DF_GetOutputDataRate>
 8005544:	4603      	mov	r3, r0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <LPS22DF_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_SetOutputDataRate(LPS22DF_Object_t *pObj, float_t Odr)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005560:	2b01      	cmp	r3, #1
 8005562:	d106      	bne.n	8005572 <LPS22DF_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005564:	ed97 0a00 	vldr	s0, [r7]
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f961 	bl	8005830 <LPS22DF_SetOutputDataRate_When_Enabled>
 800556e:	4603      	mov	r3, r0
 8005570:	e005      	b.n	800557e <LPS22DF_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005572:	ed97 0a00 	vldr	s0, [r7]
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f9e6 	bl	8005948 <LPS22DF_SetOutputDataRate_When_Disabled>
 800557c:	4603      	mov	r3, r0
  }
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <LPS22DF_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetPressure(LPS22DF_Object_t *pObj, float_t *Value)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b084      	sub	sp, #16
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
 800558e:	6039      	str	r1, [r7, #0]
  uint32_t pressure_raw;

  if (lps22df_pressure_raw_get(&(pObj->Ctx), &pressure_raw) != LPS22DF_OK)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3320      	adds	r3, #32
 8005594:	f107 020c 	add.w	r2, r7, #12
 8005598:	4611      	mov	r1, r2
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fe56 	bl	800624c <lps22df_pressure_raw_get>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <LPS22DF_PRESS_GetPressure+0x26>
  {
    return LPS22DF_ERROR;
 80055a6:	f04f 33ff 	mov.w	r3, #4294967295
 80055aa:	e009      	b.n	80055c0 <LPS22DF_PRESS_GetPressure+0x3a>
  }

  *Value = lps22df_from_lsb_to_hPa((int32_t)pressure_raw);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fb12 	bl	8005bd8 <lps22df_from_lsb_to_hPa>
 80055b4:	eef0 7a40 	vmov.f32	s15, s0
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	edc3 7a00 	vstr	s15, [r3]

  return LPS22DF_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <LPS22DF_TEMP_Enable>:
  * @brief  Enable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Enable(LPS22DF_Object_t *pObj)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <LPS22DF_TEMP_Enable+0x16>
  {
    return LPS22DF_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	e013      	b.n	8005606 <LPS22DF_TEMP_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f103 0220 	add.w	r2, r3, #32
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3333      	adds	r3, #51	@ 0x33
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f000 fd04 	bl	8005ff8 <lps22df_mode_set>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <LPS22DF_TEMP_Enable+0x34>
  {
    return LPS22DF_ERROR;
 80055f6:	f04f 33ff 	mov.w	r3, #4294967295
 80055fa:	e004      	b.n	8005606 <LPS22DF_TEMP_Enable+0x3e>
  }

  pObj->temp_is_enabled = 1;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <LPS22DF_TEMP_Disable>:
  * @brief  Disable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Disable(LPS22DF_Object_t *pObj)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <LPS22DF_TEMP_Disable+0x16>
  {
    return LPS22DF_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	e030      	b.n	8005686 <LPS22DF_TEMP_Disable+0x78>
  }

  /* Check if the LPS22DF pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800562a:	2b00      	cmp	r3, #0
 800562c:	d126      	bne.n	800567c <LPS22DF_TEMP_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3320      	adds	r3, #32
 8005632:	f107 020c 	add.w	r2, r7, #12
 8005636:	4611      	mov	r1, r2
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fd3b 	bl	80060b4 <lps22df_mode_get>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <LPS22DF_TEMP_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 8005644:	f04f 33ff 	mov.w	r3, #4294967295
 8005648:	e01d      	b.n	8005686 <LPS22DF_TEMP_Disable+0x78>
    }

    (void)memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	3333      	adds	r3, #51	@ 0x33
 800564e:	461a      	mov	r2, r3
 8005650:	f107 030c 	add.w	r3, r7, #12
 8005654:	8819      	ldrh	r1, [r3, #0]
 8005656:	789b      	ldrb	r3, [r3, #2]
 8005658:	8011      	strh	r1, [r2, #0]
 800565a:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 800565c:	2300      	movs	r3, #0
 800565e:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3320      	adds	r3, #32
 8005664:	f107 020c 	add.w	r2, r7, #12
 8005668:	4611      	mov	r1, r2
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fcc4 	bl	8005ff8 <lps22df_mode_set>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <LPS22DF_TEMP_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 8005676:	f04f 33ff 	mov.w	r3, #4294967295
 800567a:	e004      	b.n	8005686 <LPS22DF_TEMP_Disable+0x78>
    }
  }

  pObj->temp_is_enabled = 0;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <LPS22DF_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b082      	sub	sp, #8
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 8005698:	6839      	ldr	r1, [r7, #0]
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f85e 	bl	800575c <LPS22DF_GetOutputDataRate>
 80056a0:	4603      	mov	r3, r0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <LPS22DF_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_SetOutputDataRate(LPS22DF_Object_t *pObj, float_t Odr)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b082      	sub	sp, #8
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d106      	bne.n	80056ce <LPS22DF_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 80056c0:	ed97 0a00 	vldr	s0, [r7]
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f8b3 	bl	8005830 <LPS22DF_SetOutputDataRate_When_Enabled>
 80056ca:	4603      	mov	r3, r0
 80056cc:	e005      	b.n	80056da <LPS22DF_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 80056ce:	ed97 0a00 	vldr	s0, [r7]
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f938 	bl	8005948 <LPS22DF_SetOutputDataRate_When_Disabled>
 80056d8:	4603      	mov	r3, r0
  }
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <LPS22DF_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetTemperature(LPS22DF_Object_t *pObj, float_t *Value)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
  int16_t temperature_raw;

  if (lps22df_temperature_raw_get(&(pObj->Ctx), &temperature_raw) != LPS22DF_OK)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3320      	adds	r3, #32
 80056f0:	f107 020e 	add.w	r2, r7, #14
 80056f4:	4611      	mov	r1, r2
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fdd1 	bl	800629e <lps22df_temperature_raw_get>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <LPS22DF_TEMP_GetTemperature+0x26>
  {
    return LPS22DF_ERROR;
 8005702:	f04f 33ff 	mov.w	r3, #4294967295
 8005706:	e00a      	b.n	800571e <LPS22DF_TEMP_GetTemperature+0x3c>
  }

  *Value = lps22df_from_lsb_to_celsius(temperature_raw);
 8005708:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fa7b 	bl	8005c08 <lps22df_from_lsb_to_celsius>
 8005712:	eef0 7a40 	vmov.f32	s15, s0
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	edc3 7a00 	vstr	s15, [r3]

  return LPS22DF_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <LPS22DF_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Write_Reg(LPS22DF_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	460b      	mov	r3, r1
 8005730:	70fb      	strb	r3, [r7, #3]
 8005732:	4613      	mov	r3, r2
 8005734:	70bb      	strb	r3, [r7, #2]
  if (lps22df_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22DF_OK)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f103 0020 	add.w	r0, r3, #32
 800573c:	1cba      	adds	r2, r7, #2
 800573e:	78f9      	ldrb	r1, [r7, #3]
 8005740:	2301      	movs	r3, #1
 8005742:	f000 fa15 	bl	8005b70 <lps22df_write_reg>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <LPS22DF_Write_Reg+0x2c>
  {
    return LPS22DF_ERROR;
 800574c:	f04f 33ff 	mov.w	r3, #4294967295
 8005750:	e000      	b.n	8005754 <LPS22DF_Write_Reg+0x2e>
  }

  return LPS22DF_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <LPS22DF_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
  lps22df_md_t val;

  if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3320      	adds	r3, #32
 800576e:	f107 0208 	add.w	r2, r7, #8
 8005772:	4611      	mov	r1, r2
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fc9d 	bl	80060b4 <lps22df_mode_get>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <LPS22DF_GetOutputDataRate+0x2a>
  {
    return LPS22DF_ERROR;
 8005780:	f04f 33ff 	mov.w	r3, #4294967295
 8005784:	e044      	b.n	8005810 <LPS22DF_GetOutputDataRate+0xb4>
  }

  switch (val.odr)
 8005786:	7a3b      	ldrb	r3, [r7, #8]
 8005788:	2b08      	cmp	r3, #8
 800578a:	d83c      	bhi.n	8005806 <LPS22DF_GetOutputDataRate+0xaa>
 800578c:	a201      	add	r2, pc, #4	@ (adr r2, 8005794 <LPS22DF_GetOutputDataRate+0x38>)
 800578e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005792:	bf00      	nop
 8005794:	080057b9 	.word	0x080057b9
 8005798:	080057c3 	.word	0x080057c3
 800579c:	080057cd 	.word	0x080057cd
 80057a0:	080057d7 	.word	0x080057d7
 80057a4:	080057df 	.word	0x080057df
 80057a8:	080057e7 	.word	0x080057e7
 80057ac:	080057ef 	.word	0x080057ef
 80057b0:	080057f7 	.word	0x080057f7
 80057b4:	080057ff 	.word	0x080057ff
  {
    case LPS22DF_ONE_SHOT:
      *Odr = 0.0f;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	f04f 0200 	mov.w	r2, #0
 80057be:	601a      	str	r2, [r3, #0]
      break;
 80057c0:	e025      	b.n	800580e <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_1Hz:
      *Odr = 1.0f;
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80057c8:	601a      	str	r2, [r3, #0]
      break;
 80057ca:	e020      	b.n	800580e <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_4Hz:
      *Odr = 4.0f;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80057d2:	601a      	str	r2, [r3, #0]
      break;
 80057d4:	e01b      	b.n	800580e <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_10Hz:
      *Odr = 10.0f;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	4a0f      	ldr	r2, [pc, #60]	@ (8005818 <LPS22DF_GetOutputDataRate+0xbc>)
 80057da:	601a      	str	r2, [r3, #0]
      break;
 80057dc:	e017      	b.n	800580e <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_25Hz:
      *Odr = 25.0f;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	4a0e      	ldr	r2, [pc, #56]	@ (800581c <LPS22DF_GetOutputDataRate+0xc0>)
 80057e2:	601a      	str	r2, [r3, #0]
      break;
 80057e4:	e013      	b.n	800580e <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_50Hz:
      *Odr = 50.0f;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	4a0d      	ldr	r2, [pc, #52]	@ (8005820 <LPS22DF_GetOutputDataRate+0xc4>)
 80057ea:	601a      	str	r2, [r3, #0]
      break;
 80057ec:	e00f      	b.n	800580e <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_75Hz:
      *Odr = 75.0f;
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	4a0c      	ldr	r2, [pc, #48]	@ (8005824 <LPS22DF_GetOutputDataRate+0xc8>)
 80057f2:	601a      	str	r2, [r3, #0]
      break;
 80057f4:	e00b      	b.n	800580e <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_100Hz:
      *Odr = 100.0f;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	4a0b      	ldr	r2, [pc, #44]	@ (8005828 <LPS22DF_GetOutputDataRate+0xcc>)
 80057fa:	601a      	str	r2, [r3, #0]
      break;
 80057fc:	e007      	b.n	800580e <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_200Hz:
      *Odr = 200.0f;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	4a0a      	ldr	r2, [pc, #40]	@ (800582c <LPS22DF_GetOutputDataRate+0xd0>)
 8005802:	601a      	str	r2, [r3, #0]
      break;
 8005804:	e003      	b.n	800580e <LPS22DF_GetOutputDataRate+0xb2>

    default:
      ret = LPS22DF_ERROR;
 8005806:	f04f 33ff 	mov.w	r3, #4294967295
 800580a:	60fb      	str	r3, [r7, #12]
      break;
 800580c:	bf00      	nop
  }

  return ret;
 800580e:	68fb      	ldr	r3, [r7, #12]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	41200000 	.word	0x41200000
 800581c:	41c80000 	.word	0x41c80000
 8005820:	42480000 	.word	0x42480000
 8005824:	42960000 	.word	0x42960000
 8005828:	42c80000 	.word	0x42c80000
 800582c:	43480000 	.word	0x43480000

08005830 <LPS22DF_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Enabled(LPS22DF_Object_t *pObj, float_t Odr)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	ed87 0a00 	vstr	s0, [r7]
  lps22df_md_t new_val;

  if (lps22df_mode_get(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3320      	adds	r3, #32
 8005840:	f107 020c 	add.w	r2, r7, #12
 8005844:	4611      	mov	r1, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fc34 	bl	80060b4 <lps22df_mode_get>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <LPS22DF_SetOutputDataRate_When_Enabled+0x28>
  {
    return LPS22DF_ERROR;
 8005852:	f04f 33ff 	mov.w	r3, #4294967295
 8005856:	e06c      	b.n	8005932 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                : (Odr <=   4.0f) ? LPS22DF_4Hz
 8005858:	edd7 7a00 	vldr	s15, [r7]
 800585c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005868:	d801      	bhi.n	800586e <LPS22DF_SetOutputDataRate_When_Enabled+0x3e>
 800586a:	2301      	movs	r3, #1
 800586c:	e042      	b.n	80058f4 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 800586e:	edd7 7a00 	vldr	s15, [r7]
 8005872:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800587a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800587e:	d801      	bhi.n	8005884 <LPS22DF_SetOutputDataRate_When_Enabled+0x54>
 8005880:	2302      	movs	r3, #2
 8005882:	e037      	b.n	80058f4 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005884:	edd7 7a00 	vldr	s15, [r7]
 8005888:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800588c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005894:	d801      	bhi.n	800589a <LPS22DF_SetOutputDataRate_When_Enabled+0x6a>
 8005896:	2303      	movs	r3, #3
 8005898:	e02c      	b.n	80058f4 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 800589a:	edd7 7a00 	vldr	s15, [r7]
 800589e:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80058a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058aa:	d801      	bhi.n	80058b0 <LPS22DF_SetOutputDataRate_When_Enabled+0x80>
 80058ac:	2304      	movs	r3, #4
 80058ae:	e021      	b.n	80058f4 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80058b0:	edd7 7a00 	vldr	s15, [r7]
 80058b4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800593c <LPS22DF_SetOutputDataRate_When_Enabled+0x10c>
 80058b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c0:	d801      	bhi.n	80058c6 <LPS22DF_SetOutputDataRate_When_Enabled+0x96>
 80058c2:	2305      	movs	r3, #5
 80058c4:	e016      	b.n	80058f4 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80058c6:	edd7 7a00 	vldr	s15, [r7]
 80058ca:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005940 <LPS22DF_SetOutputDataRate_When_Enabled+0x110>
 80058ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058d6:	d801      	bhi.n	80058dc <LPS22DF_SetOutputDataRate_When_Enabled+0xac>
 80058d8:	2306      	movs	r3, #6
 80058da:	e00b      	b.n	80058f4 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80058dc:	edd7 7a00 	vldr	s15, [r7]
 80058e0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8005944 <LPS22DF_SetOutputDataRate_When_Enabled+0x114>
 80058e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058ec:	d801      	bhi.n	80058f2 <LPS22DF_SetOutputDataRate_When_Enabled+0xc2>
 80058ee:	2307      	movs	r3, #7
 80058f0:	e000      	b.n	80058f4 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80058f2:	2308      	movs	r3, #8
  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 80058f4:	733b      	strb	r3, [r7, #12]
                : (Odr <=  50.0f) ? LPS22DF_50Hz
                : (Odr <=  75.0f) ? LPS22DF_75Hz
                : (Odr <= 100.0f) ? LPS22DF_100Hz
                :                   LPS22DF_200Hz;

  if (lps22df_mode_set(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3320      	adds	r3, #32
 80058fa:	f107 020c 	add.w	r2, r7, #12
 80058fe:	4611      	mov	r1, r2
 8005900:	4618      	mov	r0, r3
 8005902:	f000 fb79 	bl	8005ff8 <lps22df_mode_set>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <LPS22DF_SetOutputDataRate_When_Enabled+0xe2>
  {
    return LPS22DF_ERROR;
 800590c:	f04f 33ff 	mov.w	r3, #4294967295
 8005910:	e00f      	b.n	8005932 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f103 0220 	add.w	r2, r3, #32
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3333      	adds	r3, #51	@ 0x33
 800591c:	4619      	mov	r1, r3
 800591e:	4610      	mov	r0, r2
 8005920:	f000 fbc8 	bl	80060b4 <lps22df_mode_get>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <LPS22DF_SetOutputDataRate_When_Enabled+0x100>
  {
    return LPS22DF_ERROR;
 800592a:	f04f 33ff 	mov.w	r3, #4294967295
 800592e:	e000      	b.n	8005932 <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  return LPS22DF_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	42480000 	.word	0x42480000
 8005940:	42960000 	.word	0x42960000
 8005944:	42c80000 	.word	0x42c80000

08005948 <LPS22DF_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Disabled(LPS22DF_Object_t *pObj, float_t Odr)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                       : (Odr <=   4.0f) ? LPS22DF_4Hz
 8005954:	edd7 7a00 	vldr	s15, [r7]
 8005958:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800595c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005964:	d801      	bhi.n	800596a <LPS22DF_SetOutputDataRate_When_Disabled+0x22>
 8005966:	2301      	movs	r3, #1
 8005968:	e042      	b.n	80059f0 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 800596a:	edd7 7a00 	vldr	s15, [r7]
 800596e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800597a:	d801      	bhi.n	8005980 <LPS22DF_SetOutputDataRate_When_Disabled+0x38>
 800597c:	2302      	movs	r3, #2
 800597e:	e037      	b.n	80059f0 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005980:	edd7 7a00 	vldr	s15, [r7]
 8005984:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005988:	eef4 7ac7 	vcmpe.f32	s15, s14
 800598c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005990:	d801      	bhi.n	8005996 <LPS22DF_SetOutputDataRate_When_Disabled+0x4e>
 8005992:	2303      	movs	r3, #3
 8005994:	e02c      	b.n	80059f0 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005996:	edd7 7a00 	vldr	s15, [r7]
 800599a:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800599e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a6:	d801      	bhi.n	80059ac <LPS22DF_SetOutputDataRate_When_Disabled+0x64>
 80059a8:	2304      	movs	r3, #4
 80059aa:	e021      	b.n	80059f0 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 80059ac:	edd7 7a00 	vldr	s15, [r7]
 80059b0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005a04 <LPS22DF_SetOutputDataRate_When_Disabled+0xbc>
 80059b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059bc:	d801      	bhi.n	80059c2 <LPS22DF_SetOutputDataRate_When_Disabled+0x7a>
 80059be:	2305      	movs	r3, #5
 80059c0:	e016      	b.n	80059f0 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 80059c2:	edd7 7a00 	vldr	s15, [r7]
 80059c6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8005a08 <LPS22DF_SetOutputDataRate_When_Disabled+0xc0>
 80059ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d2:	d801      	bhi.n	80059d8 <LPS22DF_SetOutputDataRate_When_Disabled+0x90>
 80059d4:	2306      	movs	r3, #6
 80059d6:	e00b      	b.n	80059f0 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 80059d8:	edd7 7a00 	vldr	s15, [r7]
 80059dc:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8005a0c <LPS22DF_SetOutputDataRate_When_Disabled+0xc4>
 80059e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e8:	d801      	bhi.n	80059ee <LPS22DF_SetOutputDataRate_When_Disabled+0xa6>
 80059ea:	2307      	movs	r3, #7
 80059ec:	e000      	b.n	80059f0 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 80059ee:	2308      	movs	r3, #8
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                       : (Odr <=  50.0f) ? LPS22DF_50Hz
                       : (Odr <=  75.0f) ? LPS22DF_75Hz
                       : (Odr <= 100.0f) ? LPS22DF_100Hz
                       :                   LPS22DF_200Hz;

  return LPS22DF_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	42480000 	.word	0x42480000
 8005a08:	42960000 	.word	0x42960000
 8005a0c:	42c80000 	.word	0x42c80000

08005a10 <LPS22DF_Initialize>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_Initialize(LPS22DF_Object_t *pObj)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  lps22df_md_t md;
  lps22df_bus_mode_t bus_mode;

  /* Set bdu and if_inc recommended for driver usage */
  if (lps22df_init_set(&(pObj->Ctx), LPS22DF_DRV_RDY) != LPS22DF_OK)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3320      	adds	r3, #32
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 f983 	bl	8005d2a <lps22df_init_set>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <LPS22DF_Initialize+0x20>
  {
    return LPS22DF_ERROR;
 8005a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2e:	e047      	b.n	8005ac0 <LPS22DF_Initialize+0xb0>
  }

  /* Select bus interface */
  if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d102      	bne.n	8005a3e <LPS22DF_Initialize+0x2e>
  {
    bus_mode.interface = LPS22DF_SPI_3W;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	723b      	strb	r3, [r7, #8]
 8005a3c:	e008      	b.n	8005a50 <LPS22DF_Initialize+0x40>
  }
  else if (pObj->IO.BusType == LPS22DF_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d102      	bne.n	8005a4c <LPS22DF_Initialize+0x3c>
  {
    bus_mode.interface = LPS22DF_SPI_4W;
 8005a46:	2302      	movs	r3, #2
 8005a48:	723b      	strb	r3, [r7, #8]
 8005a4a:	e001      	b.n	8005a50 <LPS22DF_Initialize+0x40>
  }
  else
  {
    bus_mode.interface = LPS22DF_SEL_BY_HW;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	723b      	strb	r3, [r7, #8]
  }

  bus_mode.filter = LPS22DF_FILTER_AUTO;
 8005a50:	2300      	movs	r3, #0
 8005a52:	727b      	strb	r3, [r7, #9]
  if (lps22df_bus_mode_set(&(pObj->Ctx), &bus_mode) != LPS22DF_OK)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3320      	adds	r3, #32
 8005a58:	f107 0208 	add.w	r2, r7, #8
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 f901 	bl	8005c66 <lps22df_bus_mode_set>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <LPS22DF_Initialize+0x60>
  {
    return LPS22DF_ERROR;
 8005a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a6e:	e027      	b.n	8005ac0 <LPS22DF_Initialize+0xb0>
  }

  /* Set Output Data Rate in Power Down */
  md.odr = LPS22DF_ONE_SHOT;
 8005a70:	2300      	movs	r3, #0
 8005a72:	733b      	strb	r3, [r7, #12]
  md.avg = LPS22DF_4_AVG;
 8005a74:	2300      	movs	r3, #0
 8005a76:	737b      	strb	r3, [r7, #13]
  md.lpf = LPS22DF_LPF_ODR_DIV_4;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	73bb      	strb	r3, [r7, #14]

  /* Power down the device */
  if (lps22df_mode_set(&(pObj->Ctx), &md) != LPS22DF_OK)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	3320      	adds	r3, #32
 8005a80:	f107 020c 	add.w	r2, r7, #12
 8005a84:	4611      	mov	r1, r2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fab6 	bl	8005ff8 <lps22df_mode_set>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <LPS22DF_Initialize+0x88>
  {
    return LPS22DF_ERROR;
 8005a92:	f04f 33ff 	mov.w	r3, #4294967295
 8005a96:	e013      	b.n	8005ac0 <LPS22DF_Initialize+0xb0>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f103 0220 	add.w	r2, r3, #32
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	3333      	adds	r3, #51	@ 0x33
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	f000 fb05 	bl	80060b4 <lps22df_mode_get>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <LPS22DF_Initialize+0xa6>
  {
    return LPS22DF_ERROR;
 8005ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab4:	e004      	b.n	8005ac0 <LPS22DF_Initialize+0xb0>
  }

  pObj->last_odr.odr = LPS22DF_25Hz;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2204      	movs	r2, #4
 8005aba:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22DF_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005ac8:	b590      	push	{r4, r7, lr}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	607a      	str	r2, [r7, #4]
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	72fb      	strb	r3, [r7, #11]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	695c      	ldr	r4, [r3, #20]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	7b1b      	ldrb	r3, [r3, #12]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	7afb      	ldrb	r3, [r7, #11]
 8005aec:	b299      	uxth	r1, r3
 8005aee:	893b      	ldrh	r3, [r7, #8]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	47a0      	blx	r4
 8005af4:	4603      	mov	r3, r0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd90      	pop	{r4, r7, pc}

08005afe <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005afe:	b590      	push	{r4, r7, lr}
 8005b00:	b087      	sub	sp, #28
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	60f8      	str	r0, [r7, #12]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	72fb      	strb	r3, [r7, #11]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	691c      	ldr	r4, [r3, #16]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	7b1b      	ldrb	r3, [r3, #12]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	7afb      	ldrb	r3, [r7, #11]
 8005b22:	b299      	uxth	r1, r3
 8005b24:	893b      	ldrh	r3, [r7, #8]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	47a0      	blx	r4
 8005b2a:	4603      	mov	r3, r0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd90      	pop	{r4, r7, pc}

08005b34 <lps22df_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lps22df_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                uint16_t len)
{
 8005b34:	b590      	push	{r4, r7, lr}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	607a      	str	r2, [r7, #4]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	460b      	mov	r3, r1
 8005b42:	72fb      	strb	r3, [r7, #11]
 8005b44:	4613      	mov	r3, r2
 8005b46:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <lps22df_read_reg+0x20>
  {
    return -1;
 8005b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b52:	e009      	b.n	8005b68 <lps22df_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	685c      	ldr	r4, [r3, #4]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	68d8      	ldr	r0, [r3, #12]
 8005b5c:	893b      	ldrh	r3, [r7, #8]
 8005b5e:	7af9      	ldrb	r1, [r7, #11]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	47a0      	blx	r4
 8005b64:	6178      	str	r0, [r7, #20]

  return ret;
 8005b66:	697b      	ldr	r3, [r7, #20]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd90      	pop	{r4, r7, pc}

08005b70 <lps22df_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lps22df_write_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                 uint16_t len)
{
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	607a      	str	r2, [r7, #4]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	72fb      	strb	r3, [r7, #11]
 8005b80:	4613      	mov	r3, r2
 8005b82:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d102      	bne.n	8005b90 <lps22df_write_reg+0x20>
  {
    return -1;
 8005b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b8e:	e009      	b.n	8005ba4 <lps22df_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681c      	ldr	r4, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	68d8      	ldr	r0, [r3, #12]
 8005b98:	893b      	ldrh	r3, [r7, #8]
 8005b9a:	7af9      	ldrb	r1, [r7, #11]
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	47a0      	blx	r4
 8005ba0:	6178      	str	r0, [r7, #20]

  return ret;
 8005ba2:	697b      	ldr	r3, [r7, #20]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd90      	pop	{r4, r7, pc}

08005bac <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d006      	beq.n	8005bca <bytecpy+0x1e>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <bytecpy+0x1e>
  {
    *target = *source;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	781a      	ldrb	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	701a      	strb	r2, [r3, #0]
  }
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
	...

08005bd8 <lps22df_from_lsb_to_hPa>:
  * @{
  *
  */

float_t lps22df_from_lsb_to_hPa(int32_t lsb)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);   /* 4096.0f * 256 */
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bea:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005c04 <lps22df_from_lsb_to_hPa+0x2c>
 8005bee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005bf2:	eef0 7a66 	vmov.f32	s15, s13
}
 8005bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	49800000 	.word	0x49800000

08005c08 <lps22df_from_lsb_to_celsius>:

float_t lps22df_from_lsb_to_celsius(int16_t lsb)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 8005c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c16:	ee07 3a90 	vmov	s15, r3
 8005c1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c1e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005c38 <lps22df_from_lsb_to_celsius+0x30>
 8005c22:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c26:	eef0 7a66 	vmov.f32	s15, s13
}
 8005c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	42c80000 	.word	0x42c80000

08005c3c <lps22df_id_get>:
  * @param  val   ID values.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_id_get(const stmdev_ctx_t *ctx, lps22df_id_t *val)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint8_t reg;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_WHO_AM_I, &reg, 1);
 8005c46:	f107 020b 	add.w	r2, r7, #11
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	210f      	movs	r1, #15
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7ff ff70 	bl	8005b34 <lps22df_read_reg>
 8005c54:	60f8      	str	r0, [r7, #12]
  val->whoami = reg;
 8005c56:	7afa      	ldrb	r2, [r7, #11]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	701a      	strb	r2, [r3, #0]

  return ret;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <lps22df_bus_mode_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_bus_mode_set(const stmdev_ctx_t *ctx, lps22df_bus_mode_t *val)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b086      	sub	sp, #24
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	6039      	str	r1, [r7, #0]
  lps22df_i3c_if_ctrl_t i3c_if_ctrl;
  lps22df_if_ctrl_t if_ctrl;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8005c70:	f107 020c 	add.w	r2, r7, #12
 8005c74:	2301      	movs	r3, #1
 8005c76:	210e      	movs	r1, #14
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7ff ff5b 	bl	8005b34 <lps22df_read_reg>
 8005c7e:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d124      	bne.n	8005cd0 <lps22df_bus_mode_set+0x6a>
  {
    if_ctrl.i2c_i3c_dis = ((uint8_t)val->interface & 0x02U) >> 1;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	085b      	lsrs	r3, r3, #1
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	7b3b      	ldrb	r3, [r7, #12]
 8005c94:	f362 1386 	bfi	r3, r2, #6, #1
 8005c98:	733b      	strb	r3, [r7, #12]
    if_ctrl.int_en_i3c = ((uint8_t)val->interface & 0x04U) >> 2;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	089b      	lsrs	r3, r3, #2
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	7b3b      	ldrb	r3, [r7, #12]
 8005ca8:	f362 13c7 	bfi	r3, r2, #7, #1
 8005cac:	733b      	strb	r3, [r7, #12]
    if_ctrl.sim = ((uint8_t)val->interface & 0x01U);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	7b3b      	ldrb	r3, [r7, #12]
 8005cba:	f362 1345 	bfi	r3, r2, #5, #1
 8005cbe:	733b      	strb	r3, [r7, #12]
    ret = lps22df_write_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8005cc0:	f107 020c 	add.w	r2, r7, #12
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	210e      	movs	r1, #14
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff ff51 	bl	8005b70 <lps22df_write_reg>
 8005cce:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d107      	bne.n	8005ce6 <lps22df_bus_mode_set+0x80>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_I3C_IF_CTRL,
 8005cd6:	f107 0210 	add.w	r2, r7, #16
 8005cda:	2301      	movs	r3, #1
 8005cdc:	2119      	movs	r1, #25
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7ff ff28 	bl	8005b34 <lps22df_read_reg>
 8005ce4:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_if_ctrl, 1);
  }
  if (ret == 0)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d119      	bne.n	8005d20 <lps22df_bus_mode_set+0xba>
  {
    i3c_if_ctrl.asf_on = (uint8_t)val->filter & 0x01U;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	785b      	ldrb	r3, [r3, #1]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	7c3b      	ldrb	r3, [r7, #16]
 8005cf8:	f362 1345 	bfi	r3, r2, #5, #1
 8005cfc:	743b      	strb	r3, [r7, #16]
    i3c_if_ctrl.i3c_bus_avb_sel = (uint8_t)val->i3c_ibi_time & 0x03U;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	789b      	ldrb	r3, [r3, #2]
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	7c3b      	ldrb	r3, [r7, #16]
 8005d0a:	f362 0301 	bfi	r3, r2, #0, #2
 8005d0e:	743b      	strb	r3, [r7, #16]
    ret = lps22df_write_reg(ctx, LPS22DF_I3C_IF_CTRL,
 8005d10:	f107 0210 	add.w	r2, r7, #16
 8005d14:	2301      	movs	r3, #1
 8005d16:	2119      	movs	r1, #25
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff ff29 	bl	8005b70 <lps22df_write_reg>
 8005d1e:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_if_ctrl, 1);
  }
  return ret;
 8005d20:	697b      	ldr	r3, [r7, #20]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <lps22df_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_init_set(const stmdev_ctx_t *ctx, lps22df_init_t val)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b08a      	sub	sp, #40	@ 0x28
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	460b      	mov	r3, r1
 8005d34:	70fb      	strb	r3, [r7, #3]
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_ctrl_reg3_t ctrl_reg3;
  lps22df_int_source_t int_src;
  lps22df_stat_t status;
  uint8_t reg[2], cnt = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8005d3c:	f107 020c 	add.w	r2, r7, #12
 8005d40:	2302      	movs	r3, #2
 8005d42:	2111      	movs	r1, #17
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff fef5 	bl	8005b34 <lps22df_read_reg>
 8005d4a:	6238      	str	r0, [r7, #32]
  if (ret == 0)
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f040 80c8 	bne.w	8005ee4 <lps22df_init_set+0x1ba>
  {
    bytecpy((uint8_t *)&ctrl_reg2, &reg[0]);
 8005d54:	f107 020c 	add.w	r2, r7, #12
 8005d58:	f107 031c 	add.w	r3, r7, #28
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff ff24 	bl	8005bac <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg3, &reg[1]);
 8005d64:	f107 030c 	add.w	r3, r7, #12
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	f107 0318 	add.w	r3, r7, #24
 8005d6e:	4611      	mov	r1, r2
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7ff ff1b 	bl	8005bac <bytecpy>

    switch (val)
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d043      	beq.n	8005e04 <lps22df_init_set+0xda>
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	f300 809d 	bgt.w	8005ebc <lps22df_init_set+0x192>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d078      	beq.n	8005e78 <lps22df_init_set+0x14e>
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	f040 8098 	bne.w	8005ebc <lps22df_init_set+0x192>
    {
      case LPS22DF_BOOT:
        ctrl_reg2.boot = PROPERTY_ENABLE;
 8005d8c:	7f3b      	ldrb	r3, [r7, #28]
 8005d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d92:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8005d94:	f107 021c 	add.w	r2, r7, #28
 8005d98:	2301      	movs	r3, #1
 8005d9a:	2111      	movs	r1, #17
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff fee7 	bl	8005b70 <lps22df_write_reg>
 8005da2:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        if (ret != 0)
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f040 8095 	bne.w	8005ed6 <lps22df_init_set+0x1ac>
          break;
        }

        do
        {
          ret = lps22df_read_reg(ctx, LPS22DF_INT_SOURCE, (uint8_t *)&int_src, 1);
 8005dac:	f107 0214 	add.w	r2, r7, #20
 8005db0:	2301      	movs	r3, #1
 8005db2:	2124      	movs	r1, #36	@ 0x24
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff febd 	bl	8005b34 <lps22df_read_reg>
 8005dba:	6238      	str	r0, [r7, #32]
          if (ret != 0)
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d115      	bne.n	8005dee <lps22df_init_set+0xc4>
          {
            break;
          }

          /* boot procedue ended correctly */
          if (int_src.boot_on == 0U)
 8005dc2:	7d3b      	ldrb	r3, [r7, #20]
 8005dc4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d011      	beq.n	8005df2 <lps22df_init_set+0xc8>
          {
            break;
          }

          if (ctx->mdelay != NULL)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <lps22df_init_set+0xb4>
          {
            ctx->mdelay(10); /* 10ms of boot time */
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	200a      	movs	r0, #10
 8005ddc:	4798      	blx	r3
          }
        } while (cnt++ < 5U);
 8005dde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d9df      	bls.n	8005dac <lps22df_init_set+0x82>
 8005dec:	e002      	b.n	8005df4 <lps22df_init_set+0xca>
            break;
 8005dee:	bf00      	nop
 8005df0:	e000      	b.n	8005df4 <lps22df_init_set+0xca>
            break;
 8005df2:	bf00      	nop

        if (cnt >= 5U)
 8005df4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005df8:	2b04      	cmp	r3, #4
 8005dfa:	d96e      	bls.n	8005eda <lps22df_init_set+0x1b0>
        {
          ret = -1;  /* boot procedure failed */
 8005dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8005e00:	623b      	str	r3, [r7, #32]
        }

        break;
 8005e02:	e06a      	b.n	8005eda <lps22df_init_set+0x1b0>
      case LPS22DF_RESET:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8005e04:	7f3b      	ldrb	r3, [r7, #28]
 8005e06:	f043 0304 	orr.w	r3, r3, #4
 8005e0a:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8005e0c:	f107 021c 	add.w	r2, r7, #28
 8005e10:	2301      	movs	r3, #1
 8005e12:	2111      	movs	r1, #17
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff feab 	bl	8005b70 <lps22df_write_reg>
 8005e1a:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        if (ret != 0)
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d15d      	bne.n	8005ede <lps22df_init_set+0x1b4>
          break;
        }

        do
        {
          ret = lps22df_status_get(ctx, &status);
 8005e22:	f107 0310 	add.w	r3, r7, #16
 8005e26:	4619      	mov	r1, r3
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f860 	bl	8005eee <lps22df_status_get>
 8005e2e:	6238      	str	r0, [r7, #32]
          if (ret != 0)
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d115      	bne.n	8005e62 <lps22df_init_set+0x138>
          {
            break;
          }

          /* sw-reset procedue ended correctly */
          if (status.sw_reset == 0U)
 8005e36:	7c3b      	ldrb	r3, [r7, #16]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d011      	beq.n	8005e66 <lps22df_init_set+0x13c>
          {
            break;
          }

          if (ctx->mdelay != NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <lps22df_init_set+0x128>
          {
            ctx->mdelay(1); /* should be 50 us */
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	2001      	movs	r0, #1
 8005e50:	4798      	blx	r3
          }
        } while (cnt++ < 5U);
 8005e52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	d9e0      	bls.n	8005e22 <lps22df_init_set+0xf8>
 8005e60:	e002      	b.n	8005e68 <lps22df_init_set+0x13e>
            break;
 8005e62:	bf00      	nop
 8005e64:	e000      	b.n	8005e68 <lps22df_init_set+0x13e>
            break;
 8005e66:	bf00      	nop

        if (cnt >= 5U)
 8005e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d938      	bls.n	8005ee2 <lps22df_init_set+0x1b8>
        {
          ret = -1;  /* sw-reset procedure failed */
 8005e70:	f04f 33ff 	mov.w	r3, #4294967295
 8005e74:	623b      	str	r3, [r7, #32]
        }

        break;
 8005e76:	e034      	b.n	8005ee2 <lps22df_init_set+0x1b8>
      case LPS22DF_DRV_RDY:
        ctrl_reg2.bdu = PROPERTY_ENABLE;
 8005e78:	7f3b      	ldrb	r3, [r7, #28]
 8005e7a:	f043 0308 	orr.w	r3, r3, #8
 8005e7e:	773b      	strb	r3, [r7, #28]
        ctrl_reg3.if_add_inc = PROPERTY_ENABLE;
 8005e80:	7e3b      	ldrb	r3, [r7, #24]
 8005e82:	f043 0301 	orr.w	r3, r3, #1
 8005e86:	763b      	strb	r3, [r7, #24]
        bytecpy(&reg[0], (uint8_t *)&ctrl_reg2);
 8005e88:	f107 021c 	add.w	r2, r7, #28
 8005e8c:	f107 030c 	add.w	r3, r7, #12
 8005e90:	4611      	mov	r1, r2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff fe8a 	bl	8005bac <bytecpy>
        bytecpy(&reg[1], (uint8_t *)&ctrl_reg3);
 8005e98:	f107 0218 	add.w	r2, r7, #24
 8005e9c:	f107 030c 	add.w	r3, r7, #12
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff fe81 	bl	8005bac <bytecpy>
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8005eaa:	f107 020c 	add.w	r2, r7, #12
 8005eae:	2302      	movs	r3, #2
 8005eb0:	2111      	movs	r1, #17
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff fe5c 	bl	8005b70 <lps22df_write_reg>
 8005eb8:	6238      	str	r0, [r7, #32]
        break;
 8005eba:	e013      	b.n	8005ee4 <lps22df_init_set+0x1ba>
      default:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8005ebc:	7f3b      	ldrb	r3, [r7, #28]
 8005ebe:	f043 0304 	orr.w	r3, r3, #4
 8005ec2:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8005ec4:	f107 021c 	add.w	r2, r7, #28
 8005ec8:	2301      	movs	r3, #1
 8005eca:	2111      	movs	r1, #17
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff fe4f 	bl	8005b70 <lps22df_write_reg>
 8005ed2:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 8005ed4:	e006      	b.n	8005ee4 <lps22df_init_set+0x1ba>
          break;
 8005ed6:	bf00      	nop
 8005ed8:	e004      	b.n	8005ee4 <lps22df_init_set+0x1ba>
        break;
 8005eda:	bf00      	nop
 8005edc:	e002      	b.n	8005ee4 <lps22df_init_set+0x1ba>
          break;
 8005ede:	bf00      	nop
 8005ee0:	e000      	b.n	8005ee4 <lps22df_init_set+0x1ba>
        break;
 8005ee2:	bf00      	nop
    }
  }

  return ret;
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3728      	adds	r7, #40	@ 0x28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <lps22df_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_status_get(const stmdev_ctx_t *ctx, lps22df_stat_t *val)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b088      	sub	sp, #32
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	6039      	str	r1, [r7, #0]
  lps22df_int_source_t int_source;
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_status_t status;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2,
 8005ef8:	f107 0210 	add.w	r2, r7, #16
 8005efc:	2301      	movs	r3, #1
 8005efe:	2111      	movs	r1, #17
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff fe17 	bl	8005b34 <lps22df_read_reg>
 8005f06:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg2, 1);
  if (ret == 0)
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d107      	bne.n	8005f1e <lps22df_status_get+0x30>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_INT_SOURCE, (uint8_t *)&int_source, 1);
 8005f0e:	f107 0214 	add.w	r2, r7, #20
 8005f12:	2301      	movs	r3, #1
 8005f14:	2124      	movs	r1, #36	@ 0x24
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7ff fe0c 	bl	8005b34 <lps22df_read_reg>
 8005f1c:	61f8      	str	r0, [r7, #28]
  }
  if (ret == 0)
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d107      	bne.n	8005f34 <lps22df_status_get+0x46>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_STATUS, (uint8_t *)&status, 1);
 8005f24:	f107 020c 	add.w	r2, r7, #12
 8005f28:	2301      	movs	r3, #1
 8005f2a:	2127      	movs	r1, #39	@ 0x27
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff fe01 	bl	8005b34 <lps22df_read_reg>
 8005f32:	61f8      	str	r0, [r7, #28]
  }
  if (ret == 0)
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d107      	bne.n	8005f4a <lps22df_status_get+0x5c>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_INTERRUPT_CFG,
 8005f3a:	f107 0218 	add.w	r2, r7, #24
 8005f3e:	2301      	movs	r3, #1
 8005f40:	210b      	movs	r1, #11
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff fdf6 	bl	8005b34 <lps22df_read_reg>
 8005f48:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&interrupt_cfg, 1);
  }
  val->sw_reset  = ctrl_reg2.swreset;
 8005f4a:	7c3b      	ldrb	r3, [r7, #16]
 8005f4c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005f50:	b2d9      	uxtb	r1, r3
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	7813      	ldrb	r3, [r2, #0]
 8005f56:	f361 0300 	bfi	r3, r1, #0, #1
 8005f5a:	7013      	strb	r3, [r2, #0]
  val->boot      = int_source.boot_on;
 8005f5c:	7d3b      	ldrb	r3, [r7, #20]
 8005f5e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005f62:	b2d9      	uxtb	r1, r3
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	7813      	ldrb	r3, [r2, #0]
 8005f68:	f361 0341 	bfi	r3, r1, #1, #1
 8005f6c:	7013      	strb	r3, [r2, #0]
  val->drdy_pres = status.p_da;
 8005f6e:	7b3b      	ldrb	r3, [r7, #12]
 8005f70:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f74:	b2d9      	uxtb	r1, r3
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	7813      	ldrb	r3, [r2, #0]
 8005f7a:	f361 0382 	bfi	r3, r1, #2, #1
 8005f7e:	7013      	strb	r3, [r2, #0]
  val->drdy_temp = status.t_da;
 8005f80:	7b3b      	ldrb	r3, [r7, #12]
 8005f82:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005f86:	b2d9      	uxtb	r1, r3
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	7813      	ldrb	r3, [r2, #0]
 8005f8c:	f361 03c3 	bfi	r3, r1, #3, #1
 8005f90:	7013      	strb	r3, [r2, #0]
  val->ovr_pres  = status.p_or;
 8005f92:	7b3b      	ldrb	r3, [r7, #12]
 8005f94:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005f98:	b2d9      	uxtb	r1, r3
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	7813      	ldrb	r3, [r2, #0]
 8005f9e:	f361 1304 	bfi	r3, r1, #4, #1
 8005fa2:	7013      	strb	r3, [r2, #0]
  val->ovr_temp  = status.t_or;
 8005fa4:	7b3b      	ldrb	r3, [r7, #12]
 8005fa6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005faa:	b2d9      	uxtb	r1, r3
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	7813      	ldrb	r3, [r2, #0]
 8005fb0:	f361 1345 	bfi	r3, r1, #5, #1
 8005fb4:	7013      	strb	r3, [r2, #0]
  val->end_meas  = ~ctrl_reg2.oneshot;
 8005fb6:	7c3b      	ldrb	r3, [r7, #16]
 8005fb8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	b2d9      	uxtb	r1, r3
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	7813      	ldrb	r3, [r2, #0]
 8005fcc:	f361 1386 	bfi	r3, r1, #6, #1
 8005fd0:	7013      	strb	r3, [r2, #0]
  val->ref_done = ~interrupt_cfg.autozero;
 8005fd2:	7e3b      	ldrb	r3, [r7, #24]
 8005fd4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	43db      	mvns	r3, r3
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	b2d9      	uxtb	r1, r3
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	7813      	ldrb	r3, [r2, #0]
 8005fe8:	f361 13c7 	bfi	r3, r1, #7, #1
 8005fec:	7013      	strb	r3, [r2, #0]

  return ret;
 8005fee:	69fb      	ldr	r3, [r7, #28]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3720      	adds	r7, #32
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <lps22df_mode_set>:
  * @param  val   set the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_set(const stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8006002:	f107 0208 	add.w	r2, r7, #8
 8006006:	2302      	movs	r3, #2
 8006008:	2110      	movs	r1, #16
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff fd92 	bl	8005b34 <lps22df_read_reg>
 8006010:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d148      	bne.n	80060aa <lps22df_mode_set+0xb2>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 8006018:	f107 0208 	add.w	r2, r7, #8
 800601c:	f107 0310 	add.w	r3, r7, #16
 8006020:	4611      	mov	r1, r2
 8006022:	4618      	mov	r0, r3
 8006024:	f7ff fdc2 	bl	8005bac <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 8006028:	f107 0308 	add.w	r3, r7, #8
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	f107 030c 	add.w	r3, r7, #12
 8006032:	4611      	mov	r1, r2
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff fdb9 	bl	8005bac <bytecpy>

    ctrl_reg1.odr = (uint8_t)val->odr;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	b2da      	uxtb	r2, r3
 8006044:	7c3b      	ldrb	r3, [r7, #16]
 8006046:	f362 03c6 	bfi	r3, r2, #3, #4
 800604a:	743b      	strb	r3, [r7, #16]
    ctrl_reg1.avg = (uint8_t)val->avg;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	b2da      	uxtb	r2, r3
 8006056:	7c3b      	ldrb	r3, [r7, #16]
 8006058:	f362 0302 	bfi	r3, r2, #0, #3
 800605c:	743b      	strb	r3, [r7, #16]
    ctrl_reg2.en_lpfp = (uint8_t)val->lpf & 0x01U;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	789b      	ldrb	r3, [r3, #2]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	b2da      	uxtb	r2, r3
 8006068:	7b3b      	ldrb	r3, [r7, #12]
 800606a:	f362 1304 	bfi	r3, r2, #4, #1
 800606e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.lfpf_cfg = ((uint8_t)val->lpf & 0x02U) >> 2;
 8006070:	7b3b      	ldrb	r3, [r7, #12]
 8006072:	f023 0320 	bic.w	r3, r3, #32
 8006076:	733b      	strb	r3, [r7, #12]

    bytecpy(&reg[0], (uint8_t *)&ctrl_reg1);
 8006078:	f107 0210 	add.w	r2, r7, #16
 800607c:	f107 0308 	add.w	r3, r7, #8
 8006080:	4611      	mov	r1, r2
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff fd92 	bl	8005bac <bytecpy>
    bytecpy(&reg[1], (uint8_t *)&ctrl_reg2);
 8006088:	f107 020c 	add.w	r2, r7, #12
 800608c:	f107 0308 	add.w	r3, r7, #8
 8006090:	3301      	adds	r3, #1
 8006092:	4611      	mov	r1, r2
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff fd89 	bl	8005bac <bytecpy>
    ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 800609a:	f107 0208 	add.w	r2, r7, #8
 800609e:	2302      	movs	r3, #2
 80060a0:	2110      	movs	r1, #16
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7ff fd64 	bl	8005b70 <lps22df_write_reg>
 80060a8:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80060aa:	697b      	ldr	r3, [r7, #20]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <lps22df_mode_get>:
  * @param  val   get the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_get(const stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 80060be:	f107 0208 	add.w	r2, r7, #8
 80060c2:	2302      	movs	r3, #2
 80060c4:	2110      	movs	r1, #16
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff fd34 	bl	8005b34 <lps22df_read_reg>
 80060cc:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f040 80b6 	bne.w	8006242 <lps22df_mode_get+0x18e>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 80060d6:	f107 0208 	add.w	r2, r7, #8
 80060da:	f107 0310 	add.w	r3, r7, #16
 80060de:	4611      	mov	r1, r2
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff fd63 	bl	8005bac <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 80060e6:	f107 0308 	add.w	r3, r7, #8
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	f107 030c 	add.w	r3, r7, #12
 80060f0:	4611      	mov	r1, r2
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff fd5a 	bl	8005bac <bytecpy>

    switch (ctrl_reg1.odr)
 80060f8:	7c3b      	ldrb	r3, [r7, #16]
 80060fa:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b08      	cmp	r3, #8
 8006102:	d839      	bhi.n	8006178 <lps22df_mode_get+0xc4>
 8006104:	a201      	add	r2, pc, #4	@ (adr r2, 800610c <lps22df_mode_get+0x58>)
 8006106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610a:	bf00      	nop
 800610c:	08006131 	.word	0x08006131
 8006110:	08006139 	.word	0x08006139
 8006114:	08006141 	.word	0x08006141
 8006118:	08006149 	.word	0x08006149
 800611c:	08006151 	.word	0x08006151
 8006120:	08006159 	.word	0x08006159
 8006124:	08006161 	.word	0x08006161
 8006128:	08006169 	.word	0x08006169
 800612c:	08006171 	.word	0x08006171
    {
      case LPS22DF_ONE_SHOT:
        val->odr = LPS22DF_ONE_SHOT;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2200      	movs	r2, #0
 8006134:	701a      	strb	r2, [r3, #0]
        break;
 8006136:	e023      	b.n	8006180 <lps22df_mode_get+0xcc>
      case LPS22DF_1Hz:
        val->odr = LPS22DF_1Hz;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2201      	movs	r2, #1
 800613c:	701a      	strb	r2, [r3, #0]
        break;
 800613e:	e01f      	b.n	8006180 <lps22df_mode_get+0xcc>
      case LPS22DF_4Hz:
        val->odr = LPS22DF_4Hz;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2202      	movs	r2, #2
 8006144:	701a      	strb	r2, [r3, #0]
        break;
 8006146:	e01b      	b.n	8006180 <lps22df_mode_get+0xcc>
      case LPS22DF_10Hz:
        val->odr = LPS22DF_10Hz;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2203      	movs	r2, #3
 800614c:	701a      	strb	r2, [r3, #0]
        break;
 800614e:	e017      	b.n	8006180 <lps22df_mode_get+0xcc>
      case LPS22DF_25Hz:
        val->odr = LPS22DF_25Hz;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2204      	movs	r2, #4
 8006154:	701a      	strb	r2, [r3, #0]
        break;
 8006156:	e013      	b.n	8006180 <lps22df_mode_get+0xcc>
      case LPS22DF_50Hz:
        val->odr = LPS22DF_50Hz;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2205      	movs	r2, #5
 800615c:	701a      	strb	r2, [r3, #0]
        break;
 800615e:	e00f      	b.n	8006180 <lps22df_mode_get+0xcc>
      case LPS22DF_75Hz:
        val->odr = LPS22DF_75Hz;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2206      	movs	r2, #6
 8006164:	701a      	strb	r2, [r3, #0]
        break;
 8006166:	e00b      	b.n	8006180 <lps22df_mode_get+0xcc>
      case LPS22DF_100Hz:
        val->odr = LPS22DF_100Hz;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2207      	movs	r2, #7
 800616c:	701a      	strb	r2, [r3, #0]
        break;
 800616e:	e007      	b.n	8006180 <lps22df_mode_get+0xcc>
      case LPS22DF_200Hz:
        val->odr = LPS22DF_200Hz;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2208      	movs	r2, #8
 8006174:	701a      	strb	r2, [r3, #0]
        break;
 8006176:	e003      	b.n	8006180 <lps22df_mode_get+0xcc>
      default:
        val->odr = LPS22DF_ONE_SHOT;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2200      	movs	r2, #0
 800617c:	701a      	strb	r2, [r3, #0]
        break;
 800617e:	bf00      	nop
    }

    switch (ctrl_reg1.avg)
 8006180:	7c3b      	ldrb	r3, [r7, #16]
 8006182:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b07      	cmp	r3, #7
 800618a:	d833      	bhi.n	80061f4 <lps22df_mode_get+0x140>
 800618c:	a201      	add	r2, pc, #4	@ (adr r2, 8006194 <lps22df_mode_get+0xe0>)
 800618e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006192:	bf00      	nop
 8006194:	080061b5 	.word	0x080061b5
 8006198:	080061bd 	.word	0x080061bd
 800619c:	080061c5 	.word	0x080061c5
 80061a0:	080061cd 	.word	0x080061cd
 80061a4:	080061d5 	.word	0x080061d5
 80061a8:	080061dd 	.word	0x080061dd
 80061ac:	080061e5 	.word	0x080061e5
 80061b0:	080061ed 	.word	0x080061ed
    {
      case LPS22DF_4_AVG:
        val->avg = LPS22DF_4_AVG;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2200      	movs	r2, #0
 80061b8:	705a      	strb	r2, [r3, #1]
        break;
 80061ba:	e01f      	b.n	80061fc <lps22df_mode_get+0x148>
      case LPS22DF_8_AVG:
        val->avg = LPS22DF_8_AVG;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2201      	movs	r2, #1
 80061c0:	705a      	strb	r2, [r3, #1]
        break;
 80061c2:	e01b      	b.n	80061fc <lps22df_mode_get+0x148>
      case LPS22DF_16_AVG:
        val->avg = LPS22DF_16_AVG;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2202      	movs	r2, #2
 80061c8:	705a      	strb	r2, [r3, #1]
        break;
 80061ca:	e017      	b.n	80061fc <lps22df_mode_get+0x148>
      case LPS22DF_32_AVG:
        val->avg = LPS22DF_32_AVG;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2203      	movs	r2, #3
 80061d0:	705a      	strb	r2, [r3, #1]
        break;
 80061d2:	e013      	b.n	80061fc <lps22df_mode_get+0x148>
      case LPS22DF_64_AVG:
        val->avg = LPS22DF_64_AVG;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2204      	movs	r2, #4
 80061d8:	705a      	strb	r2, [r3, #1]
        break;
 80061da:	e00f      	b.n	80061fc <lps22df_mode_get+0x148>
      case LPS22DF_128_AVG:
        val->avg = LPS22DF_128_AVG;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	2205      	movs	r2, #5
 80061e0:	705a      	strb	r2, [r3, #1]
        break;
 80061e2:	e00b      	b.n	80061fc <lps22df_mode_get+0x148>
      case LPS22DF_256_AVG:
        val->avg = LPS22DF_256_AVG;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2206      	movs	r2, #6
 80061e8:	705a      	strb	r2, [r3, #1]
        break;
 80061ea:	e007      	b.n	80061fc <lps22df_mode_get+0x148>
      case LPS22DF_512_AVG:
        val->avg = LPS22DF_512_AVG;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2207      	movs	r2, #7
 80061f0:	705a      	strb	r2, [r3, #1]
        break;
 80061f2:	e003      	b.n	80061fc <lps22df_mode_get+0x148>
      default:
        val->avg = LPS22DF_4_AVG;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2200      	movs	r2, #0
 80061f8:	705a      	strb	r2, [r3, #1]
        break;
 80061fa:	bf00      	nop
    }

    switch ((ctrl_reg2.lfpf_cfg << 2) | ctrl_reg2.en_lpfp)
 80061fc:	7b3b      	ldrb	r3, [r7, #12]
 80061fe:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006202:	b2db      	uxtb	r3, r3
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	7b3a      	ldrb	r2, [r7, #12]
 8006208:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	4313      	orrs	r3, r2
 8006210:	2b03      	cmp	r3, #3
 8006212:	d00e      	beq.n	8006232 <lps22df_mode_get+0x17e>
 8006214:	2b03      	cmp	r3, #3
 8006216:	dc10      	bgt.n	800623a <lps22df_mode_get+0x186>
 8006218:	2b00      	cmp	r3, #0
 800621a:	d002      	beq.n	8006222 <lps22df_mode_get+0x16e>
 800621c:	2b01      	cmp	r3, #1
 800621e:	d004      	beq.n	800622a <lps22df_mode_get+0x176>
 8006220:	e00b      	b.n	800623a <lps22df_mode_get+0x186>
    {
      case LPS22DF_LPF_DISABLE:
        val->lpf = LPS22DF_LPF_DISABLE;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2200      	movs	r2, #0
 8006226:	709a      	strb	r2, [r3, #2]
        break;
 8006228:	e00b      	b.n	8006242 <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_4:
        val->lpf = LPS22DF_LPF_ODR_DIV_4;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2201      	movs	r2, #1
 800622e:	709a      	strb	r2, [r3, #2]
        break;
 8006230:	e007      	b.n	8006242 <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_9:
        val->lpf = LPS22DF_LPF_ODR_DIV_9;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2203      	movs	r2, #3
 8006236:	709a      	strb	r2, [r3, #2]
        break;
 8006238:	e003      	b.n	8006242 <lps22df_mode_get+0x18e>
      default:
        val->lpf = LPS22DF_LPF_DISABLE;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2200      	movs	r2, #0
 800623e:	709a      	strb	r2, [r3, #2]
        break;
 8006240:	bf00      	nop
    }
  }
  return ret;
 8006242:	697b      	ldr	r3, [r7, #20]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <lps22df_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_pressure_raw_get(const stmdev_ctx_t *ctx, uint32_t *buff)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[3];

  ret =  lps22df_read_reg(ctx, LPS22DF_PRESS_OUT_XL, reg, 3);
 8006256:	f107 0208 	add.w	r2, r7, #8
 800625a:	2303      	movs	r3, #3
 800625c:	2128      	movs	r1, #40	@ 0x28
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff fc68 	bl	8005b34 <lps22df_read_reg>
 8006264:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8006266:	7abb      	ldrb	r3, [r7, #10]
 8006268:	461a      	mov	r2, r3
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	021b      	lsls	r3, r3, #8
 8006274:	7a7a      	ldrb	r2, [r7, #9]
 8006276:	441a      	add	r2, r3
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	021b      	lsls	r3, r3, #8
 8006282:	7a3a      	ldrb	r2, [r7, #8]
 8006284:	441a      	add	r2, r3
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	021a      	lsls	r2, r3, #8
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	601a      	str	r2, [r3, #0]

  return ret;
 8006294:	68fb      	ldr	r3, [r7, #12]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <lps22df_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *buff)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];

  ret =  lps22df_read_reg(ctx, LPS22DF_TEMP_OUT_L, reg, 2);
 80062a8:	f107 0208 	add.w	r2, r7, #8
 80062ac:	2302      	movs	r3, #2
 80062ae:	212b      	movs	r1, #43	@ 0x2b
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff fc3f 	bl	8005b34 <lps22df_read_reg>
 80062b6:	60f8      	str	r0, [r7, #12]
  *buff = (int16_t)reg[1];
 80062b8:	7a7b      	ldrb	r3, [r7, #9]
 80062ba:	b21a      	sxth	r2, r3
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + (int16_t)reg[0];
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	021b      	lsls	r3, r3, #8
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	7a3a      	ldrb	r2, [r7, #8]
 80062ce:	4413      	add	r3, r2
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	b21a      	sxth	r2, r3
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	801a      	strh	r2, [r3, #0]

  return ret;
 80062d8:	68fb      	ldr	r3, [r7, #12]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <LSM6DSO16IS_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_RegisterBusIO(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_IO_t *pIO)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d103      	bne.n	8006300 <LSM6DSO16IS_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO16IS_ERROR;
 80062f8:	f04f 33ff 	mov.w	r3, #4294967295
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	e04d      	b.n	800639c <LSM6DSO16IS_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	7b1a      	ldrb	r2, [r3, #12]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	695a      	ldr	r2, [r3, #20]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	699a      	ldr	r2, [r3, #24]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a1b      	ldr	r2, [pc, #108]	@ (80063a8 <LSM6DSO16IS_RegisterBusIO+0xc4>)
 800633c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a1a      	ldr	r2, [pc, #104]	@ (80063ac <LSM6DSO16IS_RegisterBusIO+0xc8>)
 8006342:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d103      	bne.n	800635a <LSM6DSO16IS_RegisterBusIO+0x76>
    {
      ret = LSM6DSO16IS_ERROR;
 8006352:	f04f 33ff 	mov.w	r3, #4294967295
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	e020      	b.n	800639c <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO16IS_OK)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4798      	blx	r3
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <LSM6DSO16IS_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO16IS_ERROR;
 8006366:	f04f 33ff 	mov.w	r3, #4294967295
 800636a:	60fb      	str	r3, [r7, #12]
 800636c:	e016      	b.n	800639c <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO16IS_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	2b02      	cmp	r3, #2
 8006374:	d112      	bne.n	800639c <LSM6DSO16IS_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10d      	bne.n	800639c <LSM6DSO16IS_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8006380:	230c      	movs	r3, #12
 8006382:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO16IS_Write_Reg(pObj, LSM6DSO16IS_CTRL3_C, data) != LSM6DSO16IS_OK)
 8006384:	7afb      	ldrb	r3, [r7, #11]
 8006386:	461a      	mov	r2, r3
 8006388:	2112      	movs	r1, #18
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fdbe 	bl	8006f0c <LSM6DSO16IS_Write_Reg>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <LSM6DSO16IS_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO16IS_ERROR;
 8006396:	f04f 33ff 	mov.w	r3, #4294967295
 800639a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800639c:	68fb      	ldr	r3, [r7, #12]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	080073d5 	.word	0x080073d5
 80063ac:	0800740b 	.word	0x0800740b

080063b0 <LSM6DSO16IS_Init>:
  * @brief  Initialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Init(LSM6DSO16IS_Object_t *pObj)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Set main memory bank */
  if (LSM6DSO16IS_Set_Mem_Bank(pObj, (uint8_t)LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 80063bc:	2100      	movs	r1, #0
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fdc1 	bl	8006f46 <LSM6DSO16IS_Set_Mem_Bank>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <LSM6DSO16IS_Init+0x20>
  {
    ret = LSM6DSO16IS_ERROR;
 80063ca:	f04f 33ff 	mov.w	r3, #4294967295
 80063ce:	60fb      	str	r3, [r7, #12]
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso16is_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3320      	adds	r3, #32
 80063d4:	2101      	movs	r1, #1
 80063d6:	4618      	mov	r0, r3
 80063d8:	f001 fbdc 	bl	8007b94 <lsm6dso16is_auto_increment_set>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <LSM6DSO16IS_Init+0x38>
  {
    ret = LSM6DSO16IS_ERROR;
 80063e2:	f04f 33ff 	mov.w	r3, #4294967295
 80063e6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable BDU */
  if (lsm6dso16is_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3320      	adds	r3, #32
 80063ec:	2101      	movs	r1, #1
 80063ee:	4618      	mov	r0, r3
 80063f0:	f001 fbf6 	bl	8007be0 <lsm6dso16is_block_data_update_set>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <LSM6DSO16IS_Init+0x50>
  {
    ret = LSM6DSO16IS_ERROR;
 80063fa:	f04f 33ff 	mov.w	r3, #4294967295
 80063fe:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2204      	movs	r2, #4
 8006404:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3320      	adds	r3, #32
 800640c:	2100      	movs	r1, #0
 800640e:	4618      	mov	r0, r3
 8006410:	f001 f910 	bl	8007634 <lsm6dso16is_xl_data_rate_set>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <LSM6DSO16IS_Init+0x70>
  {
    ret = LSM6DSO16IS_ERROR;
 800641a:	f04f 33ff 	mov.w	r3, #4294967295
 800641e:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2g) != LSM6DSO16IS_OK)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3320      	adds	r3, #32
 8006424:	2100      	movs	r1, #0
 8006426:	4618      	mov	r0, r3
 8006428:	f001 f8a6 	bl	8007578 <lsm6dso16is_xl_full_scale_set>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <LSM6DSO16IS_Init+0x88>
  {
    ret = LSM6DSO16IS_ERROR;
 8006432:	f04f 33ff 	mov.w	r3, #4294967295
 8006436:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2204      	movs	r2, #4
 800643c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3320      	adds	r3, #32
 8006444:	2100      	movs	r1, #0
 8006446:	4618      	mov	r0, r3
 8006448:	f001 faa8 	bl	800799c <lsm6dso16is_gy_data_rate_set>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <LSM6DSO16IS_Init+0xa8>
  {
    ret = LSM6DSO16IS_ERROR;
 8006452:	f04f 33ff 	mov.w	r3, #4294967295
 8006456:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2000dps) != LSM6DSO16IS_OK)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3320      	adds	r3, #32
 800645c:	2103      	movs	r1, #3
 800645e:	4618      	mov	r0, r3
 8006460:	f001 fa10 	bl	8007884 <lsm6dso16is_gy_full_scale_set>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <LSM6DSO16IS_Init+0xc0>
  {
    ret = LSM6DSO16IS_ERROR;
 800646a:	f04f 33ff 	mov.w	r3, #4294967295
 800646e:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d103      	bne.n	800647e <LSM6DSO16IS_Init+0xce>
  {
    pObj->is_initialized = 1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 800647e:	68fb      	ldr	r3, [r7, #12]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <LSM6DSO16IS_DeInit>:
  * @brief  Deinitialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_DeInit(LSM6DSO16IS_Object_t *pObj)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	60fb      	str	r3, [r7, #12]

  /* Disable the component */
  if (LSM6DSO16IS_ACC_Disable(pObj) != LSM6DSO16IS_OK)
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f890 	bl	80065ba <LSM6DSO16IS_ACC_Disable>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <LSM6DSO16IS_DeInit+0x1e>
  {
    ret = LSM6DSO16IS_ERROR;
 80064a0:	f04f 33ff 	mov.w	r3, #4294967295
 80064a4:	60fb      	str	r3, [r7, #12]
  }

  if (LSM6DSO16IS_GYRO_Disable(pObj) != LSM6DSO16IS_OK)
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fad0 	bl	8006a4c <LSM6DSO16IS_GYRO_Disable>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <LSM6DSO16IS_DeInit+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 80064b2:	f04f 33ff 	mov.w	r3, #4294967295
 80064b6:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10b      	bne.n	80064d6 <LSM6DSO16IS_DeInit+0x4e>
  {
    /* Reset output data rate. */
    pObj->acc_odr = LSM6DSO16IS_XL_ODR_OFF;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    pObj->gyro_odr = LSM6DSO16IS_GY_ODR_OFF;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    pObj->is_initialized = 0;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 80064d6:	68fb      	ldr	r3, [r7, #12]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <LSM6DSO16IS_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ReadID(LSM6DSO16IS_Object_t *pObj, uint8_t *Id)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_device_id_get(&(pObj->Ctx), Id) != LSM6DSO16IS_OK)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	3320      	adds	r3, #32
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 f808 	bl	800750a <lsm6dso16is_device_id_get>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <LSM6DSO16IS_ReadID+0x26>
  {
    ret = LSM6DSO16IS_ERROR;
 8006500:	f04f 33ff 	mov.w	r3, #4294967295
 8006504:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006506:	68fb      	ldr	r3, [r7, #12]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <LSM6DSO16IS_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO16IS sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GetCapabilities(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Capabilities_t *Capabilities)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2201      	movs	r2, #1
 800651e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2201      	movs	r2, #1
 8006524:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2200      	movs	r2, #0
 800652a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2200      	movs	r2, #0
 8006530:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006538:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2210      	movs	r2, #16
 800653e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2200      	movs	r2, #0
 8006544:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 3333.0f;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	4a07      	ldr	r2, [pc, #28]	@ (8006568 <LSM6DSO16IS_GetCapabilities+0x58>)
 800654a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 3333.0f;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	4a06      	ldr	r2, [pc, #24]	@ (8006568 <LSM6DSO16IS_GetCapabilities+0x58>)
 8006550:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	f04f 0200 	mov.w	r2, #0
 8006558:	619a      	str	r2, [r3, #24]

  return LSM6DSO16IS_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	45505000 	.word	0x45505000

0800656c <LSM6DSO16IS_ACC_Enable>:
  * @brief  Enable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Enable(LSM6DSO16IS_Object_t *pObj)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800657e:	2b01      	cmp	r3, #1
 8006580:	d102      	bne.n	8006588 <LSM6DSO16IS_ACC_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	e013      	b.n	80065b0 <LSM6DSO16IS_ACC_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO16IS_OK)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f103 0220 	add.w	r2, r3, #32
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006594:	4619      	mov	r1, r3
 8006596:	4610      	mov	r0, r2
 8006598:	f001 f84c 	bl	8007634 <lsm6dso16is_xl_data_rate_set>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <LSM6DSO16IS_ACC_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 80065a2:	f04f 33ff 	mov.w	r3, #4294967295
 80065a6:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 1;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 80065b0:	68fb      	ldr	r3, [r7, #12]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <LSM6DSO16IS_ACC_Disable>:
  * @brief  Disable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Disable(LSM6DSO16IS_Object_t *pObj)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b084      	sub	sp, #16
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d102      	bne.n	80065d6 <LSM6DSO16IS_ACC_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	e01e      	b.n	8006614 <LSM6DSO16IS_ACC_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO16IS_OK)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f103 0220 	add.w	r2, r3, #32
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3333      	adds	r3, #51	@ 0x33
 80065e0:	4619      	mov	r1, r3
 80065e2:	4610      	mov	r0, r2
 80065e4:	f001 f866 	bl	80076b4 <lsm6dso16is_xl_data_rate_get>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <LSM6DSO16IS_ACC_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 80065ee:	f04f 33ff 	mov.w	r3, #4294967295
 80065f2:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3320      	adds	r3, #32
 80065f8:	2100      	movs	r1, #0
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 f81a 	bl	8007634 <lsm6dso16is_xl_data_rate_set>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <LSM6DSO16IS_ACC_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 8006606:	f04f 33ff 	mov.w	r3, #4294967295
 800660a:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 0;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 8006614:	68fb      	ldr	r3, [r7, #12]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <LSM6DSO16IS_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3320      	adds	r3, #32
 8006632:	f107 020b 	add.w	r2, r7, #11
 8006636:	4611      	mov	r1, r2
 8006638:	4618      	mov	r0, r3
 800663a:	f000 ffc3 	bl	80075c4 <lsm6dso16is_xl_full_scale_get>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <LSM6DSO16IS_ACC_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006644:	f04f 33ff 	mov.w	r3, #4294967295
 8006648:	60fb      	str	r3, [r7, #12]
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800664a:	7afb      	ldrb	r3, [r7, #11]
 800664c:	2b03      	cmp	r3, #3
 800664e:	d81b      	bhi.n	8006688 <LSM6DSO16IS_ACC_GetSensitivity+0x68>
 8006650:	a201      	add	r2, pc, #4	@ (adr r2, 8006658 <LSM6DSO16IS_ACC_GetSensitivity+0x38>)
 8006652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006656:	bf00      	nop
 8006658:	08006669 	.word	0x08006669
 800665c:	08006681 	.word	0x08006681
 8006660:	08006671 	.word	0x08006671
 8006664:	08006679 	.word	0x08006679
  {
    case LSM6DSO16IS_2g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_2G;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	4a0c      	ldr	r2, [pc, #48]	@ (800669c <LSM6DSO16IS_ACC_GetSensitivity+0x7c>)
 800666c:	601a      	str	r2, [r3, #0]
      break;
 800666e:	e00f      	b.n	8006690 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_4g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_4G;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	4a0b      	ldr	r2, [pc, #44]	@ (80066a0 <LSM6DSO16IS_ACC_GetSensitivity+0x80>)
 8006674:	601a      	str	r2, [r3, #0]
      break;
 8006676:	e00b      	b.n	8006690 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_8g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_8G;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	4a0a      	ldr	r2, [pc, #40]	@ (80066a4 <LSM6DSO16IS_ACC_GetSensitivity+0x84>)
 800667c:	601a      	str	r2, [r3, #0]
      break;
 800667e:	e007      	b.n	8006690 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_16g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_16G;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	4a09      	ldr	r2, [pc, #36]	@ (80066a8 <LSM6DSO16IS_ACC_GetSensitivity+0x88>)
 8006684:	601a      	str	r2, [r3, #0]
      break;
 8006686:	e003      	b.n	8006690 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006688:	f04f 33ff 	mov.w	r3, #4294967295
 800668c:	60fb      	str	r3, [r7, #12]
      break;
 800668e:	bf00      	nop
  }

  return ret;
 8006690:	68fb      	ldr	r3, [r7, #12]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	3d79db23 	.word	0x3d79db23
 80066a0:	3df9db23 	.word	0x3df9db23
 80066a4:	3e79db23 	.word	0x3e79db23
 80066a8:	3ef9db23 	.word	0x3ef9db23

080066ac <LSM6DSO16IS_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3320      	adds	r3, #32
 80066be:	f107 020b 	add.w	r2, r7, #11
 80066c2:	4611      	mov	r1, r2
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fff5 	bl	80076b4 <lsm6dso16is_xl_data_rate_get>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80066d0:	f04f 33ff 	mov.w	r3, #4294967295
 80066d4:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 80066d6:	7afb      	ldrb	r3, [r7, #11]
 80066d8:	2b1b      	cmp	r3, #27
 80066da:	d86c      	bhi.n	80067b6 <LSM6DSO16IS_ACC_GetOutputDataRate+0x10a>
 80066dc:	a201      	add	r2, pc, #4	@ (adr r2, 80066e4 <LSM6DSO16IS_ACC_GetOutputDataRate+0x38>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	08006755 	.word	0x08006755
 80066e8:	08006767 	.word	0x08006767
 80066ec:	0800676f 	.word	0x0800676f
 80066f0:	08006777 	.word	0x08006777
 80066f4:	0800677f 	.word	0x0800677f
 80066f8:	08006787 	.word	0x08006787
 80066fc:	0800678f 	.word	0x0800678f
 8006700:	08006797 	.word	0x08006797
 8006704:	0800679f 	.word	0x0800679f
 8006708:	080067a7 	.word	0x080067a7
 800670c:	080067af 	.word	0x080067af
 8006710:	080067b7 	.word	0x080067b7
 8006714:	080067b7 	.word	0x080067b7
 8006718:	080067b7 	.word	0x080067b7
 800671c:	080067b7 	.word	0x080067b7
 8006720:	080067b7 	.word	0x080067b7
 8006724:	080067b7 	.word	0x080067b7
 8006728:	08006767 	.word	0x08006767
 800672c:	0800676f 	.word	0x0800676f
 8006730:	08006777 	.word	0x08006777
 8006734:	0800677f 	.word	0x0800677f
 8006738:	08006787 	.word	0x08006787
 800673c:	0800678f 	.word	0x0800678f
 8006740:	08006797 	.word	0x08006797
 8006744:	0800679f 	.word	0x0800679f
 8006748:	080067a7 	.word	0x080067a7
 800674c:	080067af 	.word	0x080067af
 8006750:	0800675f 	.word	0x0800675f
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *Odr = 0.0f;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	f04f 0200 	mov.w	r2, #0
 800675a:	601a      	str	r2, [r3, #0]
      break;
 800675c:	e02f      	b.n	80067be <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *Odr = 1.6f;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	4a19      	ldr	r2, [pc, #100]	@ (80067c8 <LSM6DSO16IS_ACC_GetOutputDataRate+0x11c>)
 8006762:	601a      	str	r2, [r3, #0]
      break;
 8006764:	e02b      	b.n	80067be <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	4a18      	ldr	r2, [pc, #96]	@ (80067cc <LSM6DSO16IS_ACC_GetOutputDataRate+0x120>)
 800676a:	601a      	str	r2, [r3, #0]
      break;
 800676c:	e027      	b.n	80067be <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *Odr = 26.0f;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	4a17      	ldr	r2, [pc, #92]	@ (80067d0 <LSM6DSO16IS_ACC_GetOutputDataRate+0x124>)
 8006772:	601a      	str	r2, [r3, #0]
      break;
 8006774:	e023      	b.n	80067be <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	4a16      	ldr	r2, [pc, #88]	@ (80067d4 <LSM6DSO16IS_ACC_GetOutputDataRate+0x128>)
 800677a:	601a      	str	r2, [r3, #0]
      break;
 800677c:	e01f      	b.n	80067be <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	4a15      	ldr	r2, [pc, #84]	@ (80067d8 <LSM6DSO16IS_ACC_GetOutputDataRate+0x12c>)
 8006782:	601a      	str	r2, [r3, #0]
      break;
 8006784:	e01b      	b.n	80067be <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	4a14      	ldr	r2, [pc, #80]	@ (80067dc <LSM6DSO16IS_ACC_GetOutputDataRate+0x130>)
 800678a:	601a      	str	r2, [r3, #0]
      break;
 800678c:	e017      	b.n	80067be <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	4a13      	ldr	r2, [pc, #76]	@ (80067e0 <LSM6DSO16IS_ACC_GetOutputDataRate+0x134>)
 8006792:	601a      	str	r2, [r3, #0]
      break;
 8006794:	e013      	b.n	80067be <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	4a12      	ldr	r2, [pc, #72]	@ (80067e4 <LSM6DSO16IS_ACC_GetOutputDataRate+0x138>)
 800679a:	601a      	str	r2, [r3, #0]
      break;
 800679c:	e00f      	b.n	80067be <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *Odr = 1667.0f;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	4a11      	ldr	r2, [pc, #68]	@ (80067e8 <LSM6DSO16IS_ACC_GetOutputDataRate+0x13c>)
 80067a2:	601a      	str	r2, [r3, #0]
      break;
 80067a4:	e00b      	b.n	80067be <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *Odr = 3333.0f;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	4a10      	ldr	r2, [pc, #64]	@ (80067ec <LSM6DSO16IS_ACC_GetOutputDataRate+0x140>)
 80067aa:	601a      	str	r2, [r3, #0]
      break;
 80067ac:	e007      	b.n	80067be <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *Odr = 6667.0f;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	4a0f      	ldr	r2, [pc, #60]	@ (80067f0 <LSM6DSO16IS_ACC_GetOutputDataRate+0x144>)
 80067b2:	601a      	str	r2, [r3, #0]
      break;
 80067b4:	e003      	b.n	80067be <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    default:
      ret = LSM6DSO16IS_ERROR;
 80067b6:	f04f 33ff 	mov.w	r3, #4294967295
 80067ba:	60fb      	str	r3, [r7, #12]
      break;
 80067bc:	bf00      	nop
  }

  return ret;
 80067be:	68fb      	ldr	r3, [r7, #12]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	3fcccccd 	.word	0x3fcccccd
 80067cc:	41480000 	.word	0x41480000
 80067d0:	41d00000 	.word	0x41d00000
 80067d4:	42500000 	.word	0x42500000
 80067d8:	42d00000 	.word	0x42d00000
 80067dc:	43500000 	.word	0x43500000
 80067e0:	43d00000 	.word	0x43d00000
 80067e4:	44504000 	.word	0x44504000
 80067e8:	44d06000 	.word	0x44d06000
 80067ec:	45505000 	.word	0x45505000
 80067f0:	45d05800 	.word	0x45d05800

080067f4 <LSM6DSO16IS_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006806:	2b01      	cmp	r3, #1
 8006808:	d106      	bne.n	8006818 <LSM6DSO16IS_ACC_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800680a:	ed97 0a00 	vldr	s0, [r7]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fbc0 	bl	8006f94 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	e005      	b.n	8006824 <LSM6DSO16IS_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006818:	ed97 0a00 	vldr	s0, [r7]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fc47 	bl	80070b0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>
 8006822:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006824:	68fb      	ldr	r3, [r7, #12]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <LSM6DSO16IS_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t *FullScale)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	3320      	adds	r3, #32
 8006842:	f107 020b 	add.w	r2, r7, #11
 8006846:	4611      	mov	r1, r2
 8006848:	4618      	mov	r0, r3
 800684a:	f000 febb 	bl	80075c4 <lsm6dso16is_xl_full_scale_get>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <LSM6DSO16IS_ACC_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006854:	f04f 33ff 	mov.w	r3, #4294967295
 8006858:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 800685a:	7afb      	ldrb	r3, [r7, #11]
 800685c:	2b03      	cmp	r3, #3
 800685e:	d81b      	bhi.n	8006898 <LSM6DSO16IS_ACC_GetFullScale+0x68>
 8006860:	a201      	add	r2, pc, #4	@ (adr r2, 8006868 <LSM6DSO16IS_ACC_GetFullScale+0x38>)
 8006862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006866:	bf00      	nop
 8006868:	08006879 	.word	0x08006879
 800686c:	08006891 	.word	0x08006891
 8006870:	08006881 	.word	0x08006881
 8006874:	08006889 	.word	0x08006889
  {
    case LSM6DSO16IS_2g:
      *FullScale =  2;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2202      	movs	r2, #2
 800687c:	601a      	str	r2, [r3, #0]
      break;
 800687e:	e00f      	b.n	80068a0 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_4g:
      *FullScale =  4;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2204      	movs	r2, #4
 8006884:	601a      	str	r2, [r3, #0]
      break;
 8006886:	e00b      	b.n	80068a0 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_8g:
      *FullScale =  8;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2208      	movs	r2, #8
 800688c:	601a      	str	r2, [r3, #0]
      break;
 800688e:	e007      	b.n	80068a0 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_16g:
      *FullScale = 16;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2210      	movs	r2, #16
 8006894:	601a      	str	r2, [r3, #0]
      break;
 8006896:	e003      	b.n	80068a0 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006898:	f04f 33ff 	mov.w	r3, #4294967295
 800689c:	60fb      	str	r3, [r7, #12]
      break;
 800689e:	bf00      	nop
  }

  return ret;
 80068a0:	68fb      	ldr	r3, [r7, #12]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop

080068ac <LSM6DSO16IS_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t new_fs;

  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
           : (FullScale <= 4) ? LSM6DSO16IS_4g
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b02      	cmp	r3, #2
 80068be:	dd0b      	ble.n	80068d8 <LSM6DSO16IS_ACC_SetFullScale+0x2c>
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	dd06      	ble.n	80068d4 <LSM6DSO16IS_ACC_SetFullScale+0x28>
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b08      	cmp	r3, #8
 80068ca:	dc01      	bgt.n	80068d0 <LSM6DSO16IS_ACC_SetFullScale+0x24>
 80068cc:	2303      	movs	r3, #3
 80068ce:	e004      	b.n	80068da <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 80068d0:	2301      	movs	r3, #1
 80068d2:	e002      	b.n	80068da <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 80068d4:	2302      	movs	r3, #2
 80068d6:	e000      	b.n	80068da <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 80068d8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
 80068da:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 8) ? LSM6DSO16IS_8g
           :                    LSM6DSO16IS_16g;

  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3320      	adds	r3, #32
 80068e0:	7afa      	ldrb	r2, [r7, #11]
 80068e2:	4611      	mov	r1, r2
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fe47 	bl	8007578 <lsm6dso16is_xl_full_scale_set>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <LSM6DSO16IS_ACC_SetFullScale+0x4a>
  {
    ret = LSM6DSO16IS_ERROR;
 80068f0:	f04f 33ff 	mov.w	r3, #4294967295
 80068f4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80068f6:	68fb      	ldr	r3, [r7, #12]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <LSM6DSO16IS_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	3320      	adds	r3, #32
 8006912:	f107 020c 	add.w	r2, r7, #12
 8006916:	4611      	mov	r1, r2
 8006918:	4618      	mov	r0, r3
 800691a:	f001 f9cf 	bl	8007cbc <lsm6dso16is_acceleration_raw_get>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <LSM6DSO16IS_ACC_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006924:	f04f 33ff 	mov.w	r3, #4294967295
 8006928:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 800692a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 8006932:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 800693a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	809a      	strh	r2, [r3, #4]

  return ret;
 8006942:	697b      	ldr	r3, [r7, #20]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <LSM6DSO16IS_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *Acceleration)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 800695a:	f04f 0300 	mov.w	r3, #0
 800695e:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	3320      	adds	r3, #32
 8006964:	f107 020c 	add.w	r2, r7, #12
 8006968:	4611      	mov	r1, r2
 800696a:	4618      	mov	r0, r3
 800696c:	f001 f9a6 	bl	8007cbc <lsm6dso16is_acceleration_raw_get>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d002      	beq.n	800697c <LSM6DSO16IS_ACC_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8006976:	f04f 33ff 	mov.w	r3, #4294967295
 800697a:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 800697c:	f107 0308 	add.w	r3, r7, #8
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7ff fe4c 	bl	8006620 <LSM6DSO16IS_ACC_GetSensitivity>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d002      	beq.n	8006994 <LSM6DSO16IS_ACC_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 800698e:	f04f 33ff 	mov.w	r3, #4294967295
 8006992:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8006994:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006998:	ee07 3a90 	vmov	s15, r3
 800699c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80069a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069ac:	ee17 2a90 	vmov	r2, s15
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 80069b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80069b8:	ee07 3a90 	vmov	s15, r3
 80069bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80069c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069cc:	ee17 2a90 	vmov	r2, s15
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 80069d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80069d8:	ee07 3a90 	vmov	s15, r3
 80069dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80069e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80069ec:	ee17 2a90 	vmov	r2, s15
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	609a      	str	r2, [r3, #8]

  return ret;
 80069f4:	697b      	ldr	r3, [r7, #20]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <LSM6DSO16IS_GYRO_Enable>:
  * @brief  Enable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Enable(LSM6DSO16IS_Object_t *pObj)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b084      	sub	sp, #16
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d102      	bne.n	8006a1a <LSM6DSO16IS_GYRO_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	e013      	b.n	8006a42 <LSM6DSO16IS_GYRO_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO16IS_OK)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f103 0220 	add.w	r2, r3, #32
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006a26:	4619      	mov	r1, r3
 8006a28:	4610      	mov	r0, r2
 8006a2a:	f000 ffb7 	bl	800799c <lsm6dso16is_gy_data_rate_set>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <LSM6DSO16IS_GYRO_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 8006a34:	f04f 33ff 	mov.w	r3, #4294967295
 8006a38:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 1;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8006a42:	68fb      	ldr	r3, [r7, #12]
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <LSM6DSO16IS_GYRO_Disable>:
  * @brief  Disable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Disable(LSM6DSO16IS_Object_t *pObj)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006a54:	2300      	movs	r3, #0
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d102      	bne.n	8006a68 <LSM6DSO16IS_GYRO_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	e01e      	b.n	8006aa6 <LSM6DSO16IS_GYRO_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO16IS_OK)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f103 0220 	add.w	r2, r3, #32
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	3334      	adds	r3, #52	@ 0x34
 8006a72:	4619      	mov	r1, r3
 8006a74:	4610      	mov	r0, r2
 8006a76:	f000 ffd1 	bl	8007a1c <lsm6dso16is_gy_data_rate_get>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <LSM6DSO16IS_GYRO_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 8006a80:	f04f 33ff 	mov.w	r3, #4294967295
 8006a84:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	3320      	adds	r3, #32
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 ff85 	bl	800799c <lsm6dso16is_gy_data_rate_set>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <LSM6DSO16IS_GYRO_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 8006a98:	f04f 33ff 	mov.w	r3, #4294967295
 8006a9c:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 0;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <LSM6DSO16IS_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	3320      	adds	r3, #32
 8006ac2:	f107 020b 	add.w	r2, r7, #11
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 ff0b 	bl	80078e4 <lsm6dso16is_gy_full_scale_get>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <LSM6DSO16IS_GYRO_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad8:	60fb      	str	r3, [r7, #12]
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006ada:	7afb      	ldrb	r3, [r7, #11]
 8006adc:	2b10      	cmp	r3, #16
 8006ade:	d839      	bhi.n	8006b54 <LSM6DSO16IS_GYRO_GetSensitivity+0xa4>
 8006ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae8 <LSM6DSO16IS_GYRO_GetSensitivity+0x38>)
 8006ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae6:	bf00      	nop
 8006ae8:	08006b35 	.word	0x08006b35
 8006aec:	08006b3d 	.word	0x08006b3d
 8006af0:	08006b45 	.word	0x08006b45
 8006af4:	08006b4d 	.word	0x08006b4d
 8006af8:	08006b55 	.word	0x08006b55
 8006afc:	08006b55 	.word	0x08006b55
 8006b00:	08006b55 	.word	0x08006b55
 8006b04:	08006b55 	.word	0x08006b55
 8006b08:	08006b55 	.word	0x08006b55
 8006b0c:	08006b55 	.word	0x08006b55
 8006b10:	08006b55 	.word	0x08006b55
 8006b14:	08006b55 	.word	0x08006b55
 8006b18:	08006b55 	.word	0x08006b55
 8006b1c:	08006b55 	.word	0x08006b55
 8006b20:	08006b55 	.word	0x08006b55
 8006b24:	08006b55 	.word	0x08006b55
 8006b28:	08006b2d 	.word	0x08006b2d
  {
    case LSM6DSO16IS_125dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_125DPS;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8006b68 <LSM6DSO16IS_GYRO_GetSensitivity+0xb8>)
 8006b30:	601a      	str	r2, [r3, #0]
      break;
 8006b32:	e013      	b.n	8006b5c <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_250dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_250DPS;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	4a0d      	ldr	r2, [pc, #52]	@ (8006b6c <LSM6DSO16IS_GYRO_GetSensitivity+0xbc>)
 8006b38:	601a      	str	r2, [r3, #0]
      break;
 8006b3a:	e00f      	b.n	8006b5c <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_500dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_500DPS;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	4a0c      	ldr	r2, [pc, #48]	@ (8006b70 <LSM6DSO16IS_GYRO_GetSensitivity+0xc0>)
 8006b40:	601a      	str	r2, [r3, #0]
      break;
 8006b42:	e00b      	b.n	8006b5c <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_1000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_1000DPS;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	4a0b      	ldr	r2, [pc, #44]	@ (8006b74 <LSM6DSO16IS_GYRO_GetSensitivity+0xc4>)
 8006b48:	601a      	str	r2, [r3, #0]
      break;
 8006b4a:	e007      	b.n	8006b5c <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_2000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_2000DPS;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8006b78 <LSM6DSO16IS_GYRO_GetSensitivity+0xc8>)
 8006b50:	601a      	str	r2, [r3, #0]
      break;
 8006b52:	e003      	b.n	8006b5c <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006b54:	f04f 33ff 	mov.w	r3, #4294967295
 8006b58:	60fb      	str	r3, [r7, #12]
      break;
 8006b5a:	bf00      	nop
  }

  return ret;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	408c0000 	.word	0x408c0000
 8006b6c:	410c0000 	.word	0x410c0000
 8006b70:	418c0000 	.word	0x418c0000
 8006b74:	420c0000 	.word	0x420c0000
 8006b78:	428c0000 	.word	0x428c0000

08006b7c <LSM6DSO16IS_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3320      	adds	r3, #32
 8006b8e:	f107 020b 	add.w	r2, r7, #11
 8006b92:	4611      	mov	r1, r2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 ff41 	bl	8007a1c <lsm6dso16is_gy_data_rate_get>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba4:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 8006ba6:	7afb      	ldrb	r3, [r7, #11]
 8006ba8:	2b1a      	cmp	r3, #26
 8006baa:	d866      	bhi.n	8006c7a <LSM6DSO16IS_GYRO_GetOutputDataRate+0xfe>
 8006bac:	a201      	add	r2, pc, #4	@ (adr r2, 8006bb4 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x38>)
 8006bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb2:	bf00      	nop
 8006bb4:	08006c21 	.word	0x08006c21
 8006bb8:	08006c2b 	.word	0x08006c2b
 8006bbc:	08006c33 	.word	0x08006c33
 8006bc0:	08006c3b 	.word	0x08006c3b
 8006bc4:	08006c43 	.word	0x08006c43
 8006bc8:	08006c4b 	.word	0x08006c4b
 8006bcc:	08006c53 	.word	0x08006c53
 8006bd0:	08006c5b 	.word	0x08006c5b
 8006bd4:	08006c63 	.word	0x08006c63
 8006bd8:	08006c6b 	.word	0x08006c6b
 8006bdc:	08006c73 	.word	0x08006c73
 8006be0:	08006c7b 	.word	0x08006c7b
 8006be4:	08006c7b 	.word	0x08006c7b
 8006be8:	08006c7b 	.word	0x08006c7b
 8006bec:	08006c7b 	.word	0x08006c7b
 8006bf0:	08006c7b 	.word	0x08006c7b
 8006bf4:	08006c7b 	.word	0x08006c7b
 8006bf8:	08006c2b 	.word	0x08006c2b
 8006bfc:	08006c33 	.word	0x08006c33
 8006c00:	08006c3b 	.word	0x08006c3b
 8006c04:	08006c43 	.word	0x08006c43
 8006c08:	08006c4b 	.word	0x08006c4b
 8006c0c:	08006c53 	.word	0x08006c53
 8006c10:	08006c5b 	.word	0x08006c5b
 8006c14:	08006c63 	.word	0x08006c63
 8006c18:	08006c6b 	.word	0x08006c6b
 8006c1c:	08006c73 	.word	0x08006c73
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *Odr = 0.0f;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	f04f 0200 	mov.w	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]
      break;
 8006c28:	e02b      	b.n	8006c82 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	4a17      	ldr	r2, [pc, #92]	@ (8006c8c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x110>)
 8006c2e:	601a      	str	r2, [r3, #0]
      break;
 8006c30:	e027      	b.n	8006c82 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *Odr = 26.0f;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	4a16      	ldr	r2, [pc, #88]	@ (8006c90 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x114>)
 8006c36:	601a      	str	r2, [r3, #0]
      break;
 8006c38:	e023      	b.n	8006c82 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	4a15      	ldr	r2, [pc, #84]	@ (8006c94 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x118>)
 8006c3e:	601a      	str	r2, [r3, #0]
      break;
 8006c40:	e01f      	b.n	8006c82 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	4a14      	ldr	r2, [pc, #80]	@ (8006c98 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x11c>)
 8006c46:	601a      	str	r2, [r3, #0]
      break;
 8006c48:	e01b      	b.n	8006c82 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	4a13      	ldr	r2, [pc, #76]	@ (8006c9c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x120>)
 8006c4e:	601a      	str	r2, [r3, #0]
      break;
 8006c50:	e017      	b.n	8006c82 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	4a12      	ldr	r2, [pc, #72]	@ (8006ca0 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x124>)
 8006c56:	601a      	str	r2, [r3, #0]
      break;
 8006c58:	e013      	b.n	8006c82 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	4a11      	ldr	r2, [pc, #68]	@ (8006ca4 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x128>)
 8006c5e:	601a      	str	r2, [r3, #0]
      break;
 8006c60:	e00f      	b.n	8006c82 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *Odr =  1667.0f;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	4a10      	ldr	r2, [pc, #64]	@ (8006ca8 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x12c>)
 8006c66:	601a      	str	r2, [r3, #0]
      break;
 8006c68:	e00b      	b.n	8006c82 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *Odr =  3333.0f;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	4a0f      	ldr	r2, [pc, #60]	@ (8006cac <LSM6DSO16IS_GYRO_GetOutputDataRate+0x130>)
 8006c6e:	601a      	str	r2, [r3, #0]
      break;
 8006c70:	e007      	b.n	8006c82 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *Odr =  6667.0f;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	4a0e      	ldr	r2, [pc, #56]	@ (8006cb0 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x134>)
 8006c76:	601a      	str	r2, [r3, #0]
      break;
 8006c78:	e003      	b.n	8006c82 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c7e:	60fb      	str	r3, [r7, #12]
      break;
 8006c80:	bf00      	nop
  }

  return ret;
 8006c82:	68fb      	ldr	r3, [r7, #12]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	41480000 	.word	0x41480000
 8006c90:	41d00000 	.word	0x41d00000
 8006c94:	42500000 	.word	0x42500000
 8006c98:	42d00000 	.word	0x42d00000
 8006c9c:	43500000 	.word	0x43500000
 8006ca0:	43d00000 	.word	0x43d00000
 8006ca4:	44504000 	.word	0x44504000
 8006ca8:	44d06000 	.word	0x44d06000
 8006cac:	45505000 	.word	0x45505000
 8006cb0:	45d05800 	.word	0x45d05800

08006cb4 <LSM6DSO16IS_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d106      	bne.n	8006cd8 <LSM6DSO16IS_GYRO_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006cca:	ed97 0a00 	vldr	s0, [r7]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fa70 	bl	80071b4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>
 8006cd4:	60f8      	str	r0, [r7, #12]
 8006cd6:	e005      	b.n	8006ce4 <LSM6DSO16IS_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006cd8:	ed97 0a00 	vldr	s0, [r7]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 faf7 	bl	80072d0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>
 8006ce2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
	...

08006cf0 <LSM6DSO16IS_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t  *FullScale)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	3320      	adds	r3, #32
 8006d02:	f107 020b 	add.w	r2, r7, #11
 8006d06:	4611      	mov	r1, r2
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 fdeb 	bl	80078e4 <lsm6dso16is_gy_full_scale_get>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <LSM6DSO16IS_GYRO_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006d14:	f04f 33ff 	mov.w	r3, #4294967295
 8006d18:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 8006d1a:	7afb      	ldrb	r3, [r7, #11]
 8006d1c:	2b10      	cmp	r3, #16
 8006d1e:	d83c      	bhi.n	8006d9a <LSM6DSO16IS_GYRO_GetFullScale+0xaa>
 8006d20:	a201      	add	r2, pc, #4	@ (adr r2, 8006d28 <LSM6DSO16IS_GYRO_GetFullScale+0x38>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d75 	.word	0x08006d75
 8006d2c:	08006d7d 	.word	0x08006d7d
 8006d30:	08006d87 	.word	0x08006d87
 8006d34:	08006d91 	.word	0x08006d91
 8006d38:	08006d9b 	.word	0x08006d9b
 8006d3c:	08006d9b 	.word	0x08006d9b
 8006d40:	08006d9b 	.word	0x08006d9b
 8006d44:	08006d9b 	.word	0x08006d9b
 8006d48:	08006d9b 	.word	0x08006d9b
 8006d4c:	08006d9b 	.word	0x08006d9b
 8006d50:	08006d9b 	.word	0x08006d9b
 8006d54:	08006d9b 	.word	0x08006d9b
 8006d58:	08006d9b 	.word	0x08006d9b
 8006d5c:	08006d9b 	.word	0x08006d9b
 8006d60:	08006d9b 	.word	0x08006d9b
 8006d64:	08006d9b 	.word	0x08006d9b
 8006d68:	08006d6d 	.word	0x08006d6d
  {
    case LSM6DSO16IS_125dps:
      *FullScale =  125;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	227d      	movs	r2, #125	@ 0x7d
 8006d70:	601a      	str	r2, [r3, #0]
      break;
 8006d72:	e016      	b.n	8006da2 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_250dps:
      *FullScale =  250;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	22fa      	movs	r2, #250	@ 0xfa
 8006d78:	601a      	str	r2, [r3, #0]
      break;
 8006d7a:	e012      	b.n	8006da2 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_500dps:
      *FullScale =  500;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8006d82:	601a      	str	r2, [r3, #0]
      break;
 8006d84:	e00d      	b.n	8006da2 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_1000dps:
      *FullScale = 1000;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006d8c:	601a      	str	r2, [r3, #0]
      break;
 8006d8e:	e008      	b.n	8006da2 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_2000dps:
      *FullScale = 2000;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006d96:	601a      	str	r2, [r3, #0]
      break;
 8006d98:	e003      	b.n	8006da2 <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d9e:	60fb      	str	r3, [r7, #12]
      break;
 8006da0:	bf00      	nop
  }

  return ret;
 8006da2:	68fb      	ldr	r3, [r7, #12]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <LSM6DSO16IS_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
           : (FullScale <= 250)  ? LSM6DSO16IS_250dps
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b7d      	cmp	r3, #125	@ 0x7d
 8006dbe:	dd12      	ble.n	8006de6 <LSM6DSO16IS_GYRO_SetFullScale+0x3a>
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2bfa      	cmp	r3, #250	@ 0xfa
 8006dc4:	dd0d      	ble.n	8006de2 <LSM6DSO16IS_GYRO_SetFullScale+0x36>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006dcc:	dd07      	ble.n	8006dde <LSM6DSO16IS_GYRO_SetFullScale+0x32>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006dd4:	dc01      	bgt.n	8006dda <LSM6DSO16IS_GYRO_SetFullScale+0x2e>
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	e006      	b.n	8006de8 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e004      	b.n	8006de8 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006dde:	2301      	movs	r3, #1
 8006de0:	e002      	b.n	8006de8 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006de2:	2300      	movs	r3, #0
 8006de4:	e000      	b.n	8006de8 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006de6:	2310      	movs	r3, #16
  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
 8006de8:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 500)  ? LSM6DSO16IS_500dps
           : (FullScale <= 1000) ? LSM6DSO16IS_1000dps
           :                       LSM6DSO16IS_2000dps;

  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	3320      	adds	r3, #32
 8006dee:	7afa      	ldrb	r2, [r7, #11]
 8006df0:	4611      	mov	r1, r2
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fd46 	bl	8007884 <lsm6dso16is_gy_full_scale_set>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <LSM6DSO16IS_GYRO_SetFullScale+0x58>
  {
    ret = LSM6DSO16IS_ERROR;
 8006dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8006e02:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006e04:	68fb      	ldr	r3, [r7, #12]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <LSM6DSO16IS_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b086      	sub	sp, #24
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3320      	adds	r3, #32
 8006e20:	f107 020c 	add.w	r2, r7, #12
 8006e24:	4611      	mov	r1, r2
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 ff00 	bl	8007c2c <lsm6dso16is_angular_rate_raw_get>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <LSM6DSO16IS_GYRO_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006e32:	f04f 33ff 	mov.w	r3, #4294967295
 8006e36:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 8006e38:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 8006e40:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 8006e48:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	809a      	strh	r2, [r3, #4]

  return ret;
 8006e50:	697b      	ldr	r3, [r7, #20]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3718      	adds	r7, #24
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <LSM6DSO16IS_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *AngularRate)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b086      	sub	sp, #24
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 8006e68:	f04f 0300 	mov.w	r3, #0
 8006e6c:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3320      	adds	r3, #32
 8006e72:	f107 020c 	add.w	r2, r7, #12
 8006e76:	4611      	mov	r1, r2
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fed7 	bl	8007c2c <lsm6dso16is_angular_rate_raw_get>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <LSM6DSO16IS_GYRO_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8006e84:	f04f 33ff 	mov.w	r3, #4294967295
 8006e88:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 8006e8a:	f107 0308 	add.w	r3, r7, #8
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7ff fe0d 	bl	8006ab0 <LSM6DSO16IS_GYRO_GetSensitivity>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <LSM6DSO16IS_GYRO_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 8006e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea0:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8006ea2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ea6:	ee07 3a90 	vmov	s15, r3
 8006eaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006eae:	edd7 7a02 	vldr	s15, [r7, #8]
 8006eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006eba:	ee17 2a90 	vmov	r2, s15
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8006ec2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ece:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006eda:	ee17 2a90 	vmov	r2, s15
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 8006ee2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006ee6:	ee07 3a90 	vmov	s15, r3
 8006eea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006eee:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006efa:	ee17 2a90 	vmov	r2, s15
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	609a      	str	r2, [r3, #8]

  return ret;
 8006f02:	697b      	ldr	r3, [r7, #20]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <LSM6DSO16IS_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Write_Reg(LSM6DSO16IS_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	70fb      	strb	r3, [r7, #3]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	70bb      	strb	r3, [r7, #2]
  int32_t ret = LSM6DSO16IS_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO16IS_OK)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f103 0020 	add.w	r0, r3, #32
 8006f26:	1cba      	adds	r2, r7, #2
 8006f28:	78f9      	ldrb	r1, [r7, #3]
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f000 faa6 	bl	800747c <lsm6dso16is_write_reg>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <LSM6DSO16IS_Write_Reg+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8006f36:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <LSM6DSO16IS_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSO16IS_MAIN_MEM_BANK, 2 - LSM6DSO16IS_SENSOR_HUB_MEM_BANK, 3 - LSM6DSO16IS_ISPU_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Set_Mem_Bank(LSM6DSO16IS_Object_t *pObj, uint8_t Val)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b084      	sub	sp, #16
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	460b      	mov	r3, r1
 8006f50:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO16IS_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_mem_bank_t reg;

  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
        : (Val == 3U) ? LSM6DSO16IS_ISPU_MEM_BANK
 8006f56:	78fb      	ldrb	r3, [r7, #3]
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d006      	beq.n	8006f6a <LSM6DSO16IS_Set_Mem_Bank+0x24>
 8006f5c:	78fb      	ldrb	r3, [r7, #3]
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d101      	bne.n	8006f66 <LSM6DSO16IS_Set_Mem_Bank+0x20>
 8006f62:	2303      	movs	r3, #3
 8006f64:	e002      	b.n	8006f6c <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8006f66:	2300      	movs	r3, #0
 8006f68:	e000      	b.n	8006f6c <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8006f6a:	2302      	movs	r3, #2
  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
 8006f6c:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSO16IS_MAIN_MEM_BANK;

  if (lsm6dso16is_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSO16IS_OK)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	3320      	adds	r3, #32
 8006f72:	7afa      	ldrb	r2, [r7, #11]
 8006f74:	4611      	mov	r1, r2
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fa9e 	bl	80074b8 <lsm6dso16is_mem_bank_set>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <LSM6DSO16IS_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSO16IS_ERROR;
 8006f82:	f04f 33ff 	mov.w	r3, #4294967295
 8006f86:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006f88:	68fb      	ldr	r3, [r7, #12]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
	...

08006f94 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 8006fa4:	edd7 7a00 	vldr	s15, [r7]
 8006fa8:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006fac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb4:	d801      	bhi.n	8006fba <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x26>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e058      	b.n	800706c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006fba:	edd7 7a00 	vldr	s15, [r7]
 8006fbe:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fca:	d801      	bhi.n	8006fd0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x3c>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e04d      	b.n	800706c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006fd0:	edd7 7a00 	vldr	s15, [r7]
 8006fd4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8007094 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x100>
 8006fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe0:	d801      	bhi.n	8006fe6 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x52>
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e042      	b.n	800706c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006fe6:	edd7 7a00 	vldr	s15, [r7]
 8006fea:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8007098 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x104>
 8006fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff6:	d801      	bhi.n	8006ffc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x68>
 8006ff8:	2304      	movs	r3, #4
 8006ffa:	e037      	b.n	800706c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006ffc:	edd7 7a00 	vldr	s15, [r7]
 8007000:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800709c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x108>
 8007004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800700c:	d801      	bhi.n	8007012 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x7e>
 800700e:	2305      	movs	r3, #5
 8007010:	e02c      	b.n	800706c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007012:	edd7 7a00 	vldr	s15, [r7]
 8007016:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80070a0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x10c>
 800701a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800701e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007022:	d801      	bhi.n	8007028 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x94>
 8007024:	2306      	movs	r3, #6
 8007026:	e021      	b.n	800706c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007028:	edd7 7a00 	vldr	s15, [r7]
 800702c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80070a4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x110>
 8007030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007038:	d801      	bhi.n	800703e <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xaa>
 800703a:	2307      	movs	r3, #7
 800703c:	e016      	b.n	800706c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800703e:	edd7 7a00 	vldr	s15, [r7]
 8007042:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80070a8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x114>
 8007046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800704a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800704e:	d801      	bhi.n	8007054 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xc0>
 8007050:	2308      	movs	r3, #8
 8007052:	e00b      	b.n	800706c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007054:	edd7 7a00 	vldr	s15, [r7]
 8007058:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80070ac <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x118>
 800705c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007064:	d801      	bhi.n	800706a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd6>
 8007066:	2309      	movs	r3, #9
 8007068:	e000      	b.n	800706c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800706a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 800706c:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	3320      	adds	r3, #32
 8007072:	7afa      	ldrb	r2, [r7, #11]
 8007074:	4611      	mov	r1, r2
 8007076:	4618      	mov	r0, r3
 8007078:	f000 fadc 	bl	8007634 <lsm6dso16is_xl_data_rate_set>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 8007082:	f04f 33ff 	mov.w	r3, #4294967295
 8007086:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007088:	68fb      	ldr	r3, [r7, #12]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	42500000 	.word	0x42500000
 8007098:	42d00000 	.word	0x42d00000
 800709c:	43500000 	.word	0x43500000
 80070a0:	43d00000 	.word	0x43d00000
 80070a4:	44504000 	.word	0x44504000
 80070a8:	44d06000 	.word	0x44d06000
 80070ac:	45505000 	.word	0x45505000

080070b0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
                  : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 80070bc:	edd7 7a00 	vldr	s15, [r7]
 80070c0:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80070c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070cc:	d801      	bhi.n	80070d2 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x22>
 80070ce:	2301      	movs	r3, #1
 80070d0:	e058      	b.n	8007184 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80070d2:	edd7 7a00 	vldr	s15, [r7]
 80070d6:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80070da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070e2:	d801      	bhi.n	80070e8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x38>
 80070e4:	2302      	movs	r3, #2
 80070e6:	e04d      	b.n	8007184 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80070e8:	edd7 7a00 	vldr	s15, [r7]
 80070ec:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8007198 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80070f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f8:	d801      	bhi.n	80070fe <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80070fa:	2303      	movs	r3, #3
 80070fc:	e042      	b.n	8007184 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80070fe:	edd7 7a00 	vldr	s15, [r7]
 8007102:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800719c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xec>
 8007106:	eef4 7ac7 	vcmpe.f32	s15, s14
 800710a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800710e:	d801      	bhi.n	8007114 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x64>
 8007110:	2304      	movs	r3, #4
 8007112:	e037      	b.n	8007184 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007114:	edd7 7a00 	vldr	s15, [r7]
 8007118:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80071a0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf0>
 800711c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007124:	d801      	bhi.n	800712a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8007126:	2305      	movs	r3, #5
 8007128:	e02c      	b.n	8007184 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800712a:	edd7 7a00 	vldr	s15, [r7]
 800712e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80071a4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8007132:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800713a:	d801      	bhi.n	8007140 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x90>
 800713c:	2306      	movs	r3, #6
 800713e:	e021      	b.n	8007184 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007140:	edd7 7a00 	vldr	s15, [r7]
 8007144:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80071a8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8007148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800714c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007150:	d801      	bhi.n	8007156 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8007152:	2307      	movs	r3, #7
 8007154:	e016      	b.n	8007184 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007156:	edd7 7a00 	vldr	s15, [r7]
 800715a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80071ac <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800715e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007166:	d801      	bhi.n	800716c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8007168:	2308      	movs	r3, #8
 800716a:	e00b      	b.n	8007184 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800716c:	edd7 7a00 	vldr	s15, [r7]
 8007170:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80071b0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007174:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800717c:	d801      	bhi.n	8007182 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800717e:	2309      	movs	r3, #9
 8007180:	e000      	b.n	8007184 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007182:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO16IS_XL_ODR_AT_833Hz_HP
                  : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
                  : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
                  :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	42500000 	.word	0x42500000
 800719c:	42d00000 	.word	0x42d00000
 80071a0:	43500000 	.word	0x43500000
 80071a4:	43d00000 	.word	0x43d00000
 80071a8:	44504000 	.word	0x44504000
 80071ac:	44d06000 	.word	0x44d06000
 80071b0:	45505000 	.word	0x45505000

080071b4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 80071c4:	edd7 7a00 	vldr	s15, [r7]
 80071c8:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80071cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d4:	d801      	bhi.n	80071da <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x26>
 80071d6:	2301      	movs	r3, #1
 80071d8:	e058      	b.n	800728c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80071da:	edd7 7a00 	vldr	s15, [r7]
 80071de:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80071e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ea:	d801      	bhi.n	80071f0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x3c>
 80071ec:	2302      	movs	r3, #2
 80071ee:	e04d      	b.n	800728c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80071f0:	edd7 7a00 	vldr	s15, [r7]
 80071f4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80072b4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80071f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007200:	d801      	bhi.n	8007206 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x52>
 8007202:	2303      	movs	r3, #3
 8007204:	e042      	b.n	800728c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007206:	edd7 7a00 	vldr	s15, [r7]
 800720a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80072b8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x104>
 800720e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007216:	d801      	bhi.n	800721c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x68>
 8007218:	2304      	movs	r3, #4
 800721a:	e037      	b.n	800728c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800721c:	edd7 7a00 	vldr	s15, [r7]
 8007220:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80072bc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8007224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800722c:	d801      	bhi.n	8007232 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x7e>
 800722e:	2305      	movs	r3, #5
 8007230:	e02c      	b.n	800728c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007232:	edd7 7a00 	vldr	s15, [r7]
 8007236:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80072c0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 800723a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800723e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007242:	d801      	bhi.n	8007248 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x94>
 8007244:	2306      	movs	r3, #6
 8007246:	e021      	b.n	800728c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007248:	edd7 7a00 	vldr	s15, [r7]
 800724c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80072c4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8007250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007258:	d801      	bhi.n	800725e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xaa>
 800725a:	2307      	movs	r3, #7
 800725c:	e016      	b.n	800728c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800725e:	edd7 7a00 	vldr	s15, [r7]
 8007262:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80072c8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8007266:	eef4 7ac7 	vcmpe.f32	s15, s14
 800726a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726e:	d801      	bhi.n	8007274 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 8007270:	2308      	movs	r3, #8
 8007272:	e00b      	b.n	800728c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007274:	edd7 7a00 	vldr	s15, [r7]
 8007278:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80072cc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x118>
 800727c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007284:	d801      	bhi.n	800728a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd6>
 8007286:	2309      	movs	r3, #9
 8007288:	e000      	b.n	800728c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800728a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 800728c:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	3320      	adds	r3, #32
 8007292:	7afa      	ldrb	r2, [r7, #11]
 8007294:	4611      	mov	r1, r2
 8007296:	4618      	mov	r0, r3
 8007298:	f000 fb80 	bl	800799c <lsm6dso16is_gy_data_rate_set>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 80072a2:	f04f 33ff 	mov.w	r3, #4294967295
 80072a6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80072a8:	68fb      	ldr	r3, [r7, #12]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	42500000 	.word	0x42500000
 80072b8:	42d00000 	.word	0x42d00000
 80072bc:	43500000 	.word	0x43500000
 80072c0:	43d00000 	.word	0x43d00000
 80072c4:	44504000 	.word	0x44504000
 80072c8:	44d06000 	.word	0x44d06000
 80072cc:	45505000 	.word	0x45505000

080072d0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
                   : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 80072dc:	edd7 7a00 	vldr	s15, [r7]
 80072e0:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80072e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ec:	d801      	bhi.n	80072f2 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80072ee:	2301      	movs	r3, #1
 80072f0:	e058      	b.n	80073a4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80072f2:	edd7 7a00 	vldr	s15, [r7]
 80072f6:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80072fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007302:	d801      	bhi.n	8007308 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8007304:	2302      	movs	r3, #2
 8007306:	e04d      	b.n	80073a4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007308:	edd7 7a00 	vldr	s15, [r7]
 800730c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80073b8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8007310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007318:	d801      	bhi.n	800731e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800731a:	2303      	movs	r3, #3
 800731c:	e042      	b.n	80073a4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800731e:	edd7 7a00 	vldr	s15, [r7]
 8007322:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80073bc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8007326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800732a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732e:	d801      	bhi.n	8007334 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8007330:	2304      	movs	r3, #4
 8007332:	e037      	b.n	80073a4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007334:	edd7 7a00 	vldr	s15, [r7]
 8007338:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80073c0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 800733c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007344:	d801      	bhi.n	800734a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8007346:	2305      	movs	r3, #5
 8007348:	e02c      	b.n	80073a4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800734a:	edd7 7a00 	vldr	s15, [r7]
 800734e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80073c4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8007352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800735a:	d801      	bhi.n	8007360 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800735c:	2306      	movs	r3, #6
 800735e:	e021      	b.n	80073a4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007360:	edd7 7a00 	vldr	s15, [r7]
 8007364:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80073c8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8007368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800736c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007370:	d801      	bhi.n	8007376 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8007372:	2307      	movs	r3, #7
 8007374:	e016      	b.n	80073a4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007376:	edd7 7a00 	vldr	s15, [r7]
 800737a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80073cc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800737e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007386:	d801      	bhi.n	800738c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8007388:	2308      	movs	r3, #8
 800738a:	e00b      	b.n	80073a4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800738c:	edd7 7a00 	vldr	s15, [r7]
 8007390:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80073d0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8007394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800739c:	d801      	bhi.n	80073a2 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800739e:	2309      	movs	r3, #9
 80073a0:	e000      	b.n	80073a4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80073a2:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO16IS_GY_ODR_AT_833Hz_HP
                   : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
                   : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
                   :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	42500000 	.word	0x42500000
 80073bc:	42d00000 	.word	0x42d00000
 80073c0:	43500000 	.word	0x43500000
 80073c4:	43d00000 	.word	0x43d00000
 80073c8:	44504000 	.word	0x44504000
 80073cc:	44d06000 	.word	0x44d06000
 80073d0:	45505000 	.word	0x45505000

080073d4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80073d4:	b590      	push	{r4, r7, lr}
 80073d6:	b087      	sub	sp, #28
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	607a      	str	r2, [r7, #4]
 80073de:	461a      	mov	r2, r3
 80073e0:	460b      	mov	r3, r1
 80073e2:	72fb      	strb	r3, [r7, #11]
 80073e4:	4613      	mov	r3, r2
 80073e6:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	695c      	ldr	r4, [r3, #20]
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	7b1b      	ldrb	r3, [r3, #12]
 80073f4:	4618      	mov	r0, r3
 80073f6:	7afb      	ldrb	r3, [r7, #11]
 80073f8:	b299      	uxth	r1, r3
 80073fa:	893b      	ldrh	r3, [r7, #8]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	47a0      	blx	r4
 8007400:	4603      	mov	r3, r0
}
 8007402:	4618      	mov	r0, r3
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	bd90      	pop	{r4, r7, pc}

0800740a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800740a:	b590      	push	{r4, r7, lr}
 800740c:	b087      	sub	sp, #28
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	607a      	str	r2, [r7, #4]
 8007414:	461a      	mov	r2, r3
 8007416:	460b      	mov	r3, r1
 8007418:	72fb      	strb	r3, [r7, #11]
 800741a:	4613      	mov	r3, r2
 800741c:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	691c      	ldr	r4, [r3, #16]
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	7b1b      	ldrb	r3, [r3, #12]
 800742a:	4618      	mov	r0, r3
 800742c:	7afb      	ldrb	r3, [r7, #11]
 800742e:	b299      	uxth	r1, r3
 8007430:	893b      	ldrh	r3, [r7, #8]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	47a0      	blx	r4
 8007436:	4603      	mov	r3, r0
}
 8007438:	4618      	mov	r0, r3
 800743a:	371c      	adds	r7, #28
 800743c:	46bd      	mov	sp, r7
 800743e:	bd90      	pop	{r4, r7, pc}

08007440 <lsm6dso16is_read_reg>:
  *
  */
int32_t __weak lsm6dso16is_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8007440:	b590      	push	{r4, r7, lr}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	607a      	str	r2, [r7, #4]
 800744a:	461a      	mov	r2, r3
 800744c:	460b      	mov	r3, r1
 800744e:	72fb      	strb	r3, [r7, #11]
 8007450:	4613      	mov	r3, r2
 8007452:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d102      	bne.n	8007460 <lsm6dso16is_read_reg+0x20>
  {
    return -1;
 800745a:	f04f 33ff 	mov.w	r3, #4294967295
 800745e:	e009      	b.n	8007474 <lsm6dso16is_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	685c      	ldr	r4, [r3, #4]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	68d8      	ldr	r0, [r3, #12]
 8007468:	893b      	ldrh	r3, [r7, #8]
 800746a:	7af9      	ldrb	r1, [r7, #11]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	47a0      	blx	r4
 8007470:	6178      	str	r0, [r7, #20]

  return ret;
 8007472:	697b      	ldr	r3, [r7, #20]
}
 8007474:	4618      	mov	r0, r3
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	bd90      	pop	{r4, r7, pc}

0800747c <lsm6dso16is_write_reg>:
  *
  */
int32_t __weak lsm6dso16is_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                     uint8_t *data,
                                     uint16_t len)
{
 800747c:	b590      	push	{r4, r7, lr}
 800747e:	b087      	sub	sp, #28
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	607a      	str	r2, [r7, #4]
 8007486:	461a      	mov	r2, r3
 8007488:	460b      	mov	r3, r1
 800748a:	72fb      	strb	r3, [r7, #11]
 800748c:	4613      	mov	r3, r2
 800748e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d102      	bne.n	800749c <lsm6dso16is_write_reg+0x20>
  {
    return -1;
 8007496:	f04f 33ff 	mov.w	r3, #4294967295
 800749a:	e009      	b.n	80074b0 <lsm6dso16is_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681c      	ldr	r4, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	68d8      	ldr	r0, [r3, #12]
 80074a4:	893b      	ldrh	r3, [r7, #8]
 80074a6:	7af9      	ldrb	r1, [r7, #11]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	47a0      	blx	r4
 80074ac:	6178      	str	r0, [r7, #20]

  return ret;
 80074ae:	697b      	ldr	r3, [r7, #20]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	371c      	adds	r7, #28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd90      	pop	{r4, r7, pc}

080074b8 <lsm6dso16is_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, ISPU_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dso16is_mem_bank_t val)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	460b      	mov	r3, r1
 80074c2:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_func_cfg_access_t func_cfg_access = {0x0};
 80074c4:	2300      	movs	r3, #0
 80074c6:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /* no need to read it first as the only other field is a ispu reset bit */
  func_cfg_access.shub_reg_access = (val == LSM6DSO16IS_SENSOR_HUB_MEM_BANK) ? 0x1U : 0x0U;
 80074c8:	78fb      	ldrb	r3, [r7, #3]
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d101      	bne.n	80074d2 <lsm6dso16is_mem_bank_set+0x1a>
 80074ce:	2201      	movs	r2, #1
 80074d0:	e000      	b.n	80074d4 <lsm6dso16is_mem_bank_set+0x1c>
 80074d2:	2200      	movs	r2, #0
 80074d4:	7a3b      	ldrb	r3, [r7, #8]
 80074d6:	f362 1386 	bfi	r3, r2, #6, #1
 80074da:	723b      	strb	r3, [r7, #8]
  func_cfg_access.ispu_reg_access = (val == LSM6DSO16IS_ISPU_MEM_BANK) ? 0x1U : 0x0U;
 80074dc:	78fb      	ldrb	r3, [r7, #3]
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d101      	bne.n	80074e6 <lsm6dso16is_mem_bank_set+0x2e>
 80074e2:	2201      	movs	r2, #1
 80074e4:	e000      	b.n	80074e8 <lsm6dso16is_mem_bank_set+0x30>
 80074e6:	2200      	movs	r2, #0
 80074e8:	7a3b      	ldrb	r3, [r7, #8]
 80074ea:	f362 13c7 	bfi	r3, r2, #7, #1
 80074ee:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80074f0:	f107 0208 	add.w	r2, r7, #8
 80074f4:	2301      	movs	r3, #1
 80074f6:	2101      	movs	r1, #1
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7ff ffbf 	bl	800747c <lsm6dso16is_write_reg>
 80074fe:	60f8      	str	r0, [r7, #12]

  return ret;
 8007500:	68fb      	ldr	r3, [r7, #12]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <lsm6dso16is_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_WHO_AM_I, (uint8_t *)val, 1);
 8007514:	2301      	movs	r3, #1
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	210f      	movs	r1, #15
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7ff ff90 	bl	8007440 <lsm6dso16is_read_reg>
 8007520:	60f8      	str	r0, [r7, #12]

  return ret;
 8007522:	68fb      	ldr	r3, [r7, #12]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <lsm6dso16is_xl_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8007538:	f107 0208 	add.w	r2, r7, #8
 800753c:	2301      	movs	r3, #1
 800753e:	2115      	movs	r1, #21
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7ff ff7d 	bl	8007440 <lsm6dso16is_read_reg>
 8007546:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10f      	bne.n	800756e <lsm6dso16is_xl_hm_mode_set+0x42>
  {
    ctrl6_c.xl_hm_mode = ((uint8_t)val & 0x1U);
 800754e:	78fb      	ldrb	r3, [r7, #3]
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	b2da      	uxtb	r2, r3
 8007556:	7a3b      	ldrb	r3, [r7, #8]
 8007558:	f362 1304 	bfi	r3, r2, #4, #1
 800755c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800755e:	f107 0208 	add.w	r2, r7, #8
 8007562:	2301      	movs	r3, #1
 8007564:	2115      	movs	r1, #21
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7ff ff88 	bl	800747c <lsm6dso16is_write_reg>
 800756c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800756e:	68fb      	ldr	r3, [r7, #12]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <lsm6dso16is_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t val)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	460b      	mov	r3, r1
 8007582:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007584:	f107 0208 	add.w	r2, r7, #8
 8007588:	2301      	movs	r3, #1
 800758a:	2110      	movs	r1, #16
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7ff ff57 	bl	8007440 <lsm6dso16is_read_reg>
 8007592:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10f      	bne.n	80075ba <lsm6dso16is_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = ((uint8_t)val & 0x3U);
 800759a:	78fb      	ldrb	r3, [r7, #3]
 800759c:	f003 0303 	and.w	r3, r3, #3
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	7a3b      	ldrb	r3, [r7, #8]
 80075a4:	f362 0383 	bfi	r3, r2, #2, #2
 80075a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80075aa:	f107 0208 	add.w	r2, r7, #8
 80075ae:	2301      	movs	r3, #1
 80075b0:	2110      	movs	r1, #16
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7ff ff62 	bl	800747c <lsm6dso16is_write_reg>
 80075b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80075ba:	68fb      	ldr	r3, [r7, #12]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <lsm6dso16is_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t *val)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80075ce:	f107 0208 	add.w	r2, r7, #8
 80075d2:	2301      	movs	r3, #1
 80075d4:	2110      	movs	r1, #16
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7ff ff32 	bl	8007440 <lsm6dso16is_read_reg>
 80075dc:	60f8      	str	r0, [r7, #12]

  switch ((ctrl1_xl.fs_xl))
 80075de:	7a3b      	ldrb	r3, [r7, #8]
 80075e0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d81a      	bhi.n	8007620 <lsm6dso16is_xl_full_scale_get+0x5c>
 80075ea:	a201      	add	r2, pc, #4	@ (adr r2, 80075f0 <lsm6dso16is_xl_full_scale_get+0x2c>)
 80075ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f0:	08007601 	.word	0x08007601
 80075f4:	08007619 	.word	0x08007619
 80075f8:	08007609 	.word	0x08007609
 80075fc:	08007611 	.word	0x08007611
  {
    case LSM6DSO16IS_2g:
      *val = LSM6DSO16IS_2g;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	2200      	movs	r2, #0
 8007604:	701a      	strb	r2, [r3, #0]
      break;
 8007606:	e00f      	b.n	8007628 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_4g:
      *val = LSM6DSO16IS_4g;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2202      	movs	r2, #2
 800760c:	701a      	strb	r2, [r3, #0]
      break;
 800760e:	e00b      	b.n	8007628 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_8g:
      *val = LSM6DSO16IS_8g;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2203      	movs	r2, #3
 8007614:	701a      	strb	r2, [r3, #0]
      break;
 8007616:	e007      	b.n	8007628 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_16g:
      *val = LSM6DSO16IS_16g;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	2201      	movs	r2, #1
 800761c:	701a      	strb	r2, [r3, #0]
      break;
 800761e:	e003      	b.n	8007628 <lsm6dso16is_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO16IS_2g;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	2200      	movs	r2, #0
 8007624:	701a      	strb	r2, [r3, #0]
      break;
 8007626:	bf00      	nop
  }
  return ret;
 8007628:	68fb      	ldr	r3, [r7, #12]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop

08007634 <lsm6dso16is_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t val)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007640:	f107 0208 	add.w	r2, r7, #8
 8007644:	2301      	movs	r3, #1
 8007646:	2110      	movs	r1, #16
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7ff fef9 	bl	8007440 <lsm6dso16is_read_reg>
 800764e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d128      	bne.n	80076a8 <lsm6dso16is_xl_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 8007656:	78fb      	ldrb	r3, [r7, #3]
 8007658:	f003 0310 	and.w	r3, r3, #16
 800765c:	2b00      	cmp	r3, #0
 800765e:	d008      	beq.n	8007672 <lsm6dso16is_xl_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 8007660:	2101      	movs	r1, #1
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7ff ff62 	bl	800752c <lsm6dso16is_xl_hm_mode_set>
 8007668:	4602      	mov	r2, r0
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4413      	add	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
 8007670:	e007      	b.n	8007682 <lsm6dso16is_xl_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 8007672:	2100      	movs	r1, #0
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7ff ff59 	bl	800752c <lsm6dso16is_xl_hm_mode_set>
 800767a:	4602      	mov	r2, r0
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	60fb      	str	r3, [r7, #12]
    }

    ctrl1_xl.odr_xl = ((uint8_t)val & 0xfU);
 8007682:	78fb      	ldrb	r3, [r7, #3]
 8007684:	f003 030f 	and.w	r3, r3, #15
 8007688:	b2da      	uxtb	r2, r3
 800768a:	7a3b      	ldrb	r3, [r7, #8]
 800768c:	f362 1307 	bfi	r3, r2, #4, #4
 8007690:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007692:	f107 0208 	add.w	r2, r7, #8
 8007696:	2301      	movs	r3, #1
 8007698:	2110      	movs	r1, #16
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7ff feee 	bl	800747c <lsm6dso16is_write_reg>
 80076a0:	4602      	mov	r2, r0
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	4413      	add	r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80076a8:	68fb      	ldr	r3, [r7, #12]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
	...

080076b4 <lsm6dso16is_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t *val)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80076be:	f107 0210 	add.w	r2, r7, #16
 80076c2:	2301      	movs	r3, #1
 80076c4:	2110      	movs	r1, #16
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7ff feba 	bl	8007440 <lsm6dso16is_read_reg>
 80076cc:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80076ce:	f107 020c 	add.w	r2, r7, #12
 80076d2:	2301      	movs	r3, #1
 80076d4:	2115      	movs	r1, #21
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7ff feb2 	bl	8007440 <lsm6dso16is_read_reg>
 80076dc:	4602      	mov	r2, r0
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	4413      	add	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]

  switch ((ctrl6_c.xl_hm_mode << 4) | (ctrl1_xl.odr_xl))
 80076e4:	7b3b      	ldrb	r3, [r7, #12]
 80076e6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	011b      	lsls	r3, r3, #4
 80076ee:	7c3a      	ldrb	r2, [r7, #16]
 80076f0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80076f4:	b2d2      	uxtb	r2, r2
 80076f6:	4313      	orrs	r3, r2
 80076f8:	2b1b      	cmp	r3, #27
 80076fa:	f200 8093 	bhi.w	8007824 <lsm6dso16is_xl_data_rate_get+0x170>
 80076fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007704 <lsm6dso16is_xl_data_rate_get+0x50>)
 8007700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007704:	08007775 	.word	0x08007775
 8007708:	0800777d 	.word	0x0800777d
 800770c:	08007785 	.word	0x08007785
 8007710:	0800778d 	.word	0x0800778d
 8007714:	08007795 	.word	0x08007795
 8007718:	0800779d 	.word	0x0800779d
 800771c:	080077a5 	.word	0x080077a5
 8007720:	080077ad 	.word	0x080077ad
 8007724:	080077b5 	.word	0x080077b5
 8007728:	080077bd 	.word	0x080077bd
 800772c:	080077c5 	.word	0x080077c5
 8007730:	08007825 	.word	0x08007825
 8007734:	08007825 	.word	0x08007825
 8007738:	08007825 	.word	0x08007825
 800773c:	08007825 	.word	0x08007825
 8007740:	08007825 	.word	0x08007825
 8007744:	08007825 	.word	0x08007825
 8007748:	080077cd 	.word	0x080077cd
 800774c:	080077d5 	.word	0x080077d5
 8007750:	080077dd 	.word	0x080077dd
 8007754:	080077e5 	.word	0x080077e5
 8007758:	080077ed 	.word	0x080077ed
 800775c:	080077f5 	.word	0x080077f5
 8007760:	080077fd 	.word	0x080077fd
 8007764:	08007805 	.word	0x08007805
 8007768:	0800780d 	.word	0x0800780d
 800776c:	08007815 	.word	0x08007815
 8007770:	0800781d 	.word	0x0800781d
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	2200      	movs	r2, #0
 8007778:	701a      	strb	r2, [r3, #0]
      break;
 800777a:	e057      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_HP;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2201      	movs	r2, #1
 8007780:	701a      	strb	r2, [r3, #0]
      break;
 8007782:	e053      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_HP;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2202      	movs	r2, #2
 8007788:	701a      	strb	r2, [r3, #0]
      break;
 800778a:	e04f      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_HP;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	2203      	movs	r2, #3
 8007790:	701a      	strb	r2, [r3, #0]
      break;
 8007792:	e04b      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2204      	movs	r2, #4
 8007798:	701a      	strb	r2, [r3, #0]
      break;
 800779a:	e047      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_HP;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2205      	movs	r2, #5
 80077a0:	701a      	strb	r2, [r3, #0]
      break;
 80077a2:	e043      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_HP;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2206      	movs	r2, #6
 80077a8:	701a      	strb	r2, [r3, #0]
      break;
 80077aa:	e03f      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_HP;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2207      	movs	r2, #7
 80077b0:	701a      	strb	r2, [r3, #0]
      break;
 80077b2:	e03b      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_HP;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2208      	movs	r2, #8
 80077b8:	701a      	strb	r2, [r3, #0]
      break;
 80077ba:	e037      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_HP;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2209      	movs	r2, #9
 80077c0:	701a      	strb	r2, [r3, #0]
      break;
 80077c2:	e033      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	220a      	movs	r2, #10
 80077c8:	701a      	strb	r2, [r3, #0]
      break;
 80077ca:	e02f      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_LP;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2211      	movs	r2, #17
 80077d0:	701a      	strb	r2, [r3, #0]
      break;
 80077d2:	e02b      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_LP;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2212      	movs	r2, #18
 80077d8:	701a      	strb	r2, [r3, #0]
      break;
 80077da:	e027      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_LP;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2213      	movs	r2, #19
 80077e0:	701a      	strb	r2, [r3, #0]
      break;
 80077e2:	e023      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_LP;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2214      	movs	r2, #20
 80077e8:	701a      	strb	r2, [r3, #0]
      break;
 80077ea:	e01f      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_LP;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2215      	movs	r2, #21
 80077f0:	701a      	strb	r2, [r3, #0]
      break;
 80077f2:	e01b      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_LP;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2216      	movs	r2, #22
 80077f8:	701a      	strb	r2, [r3, #0]
      break;
 80077fa:	e017      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_LP;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2217      	movs	r2, #23
 8007800:	701a      	strb	r2, [r3, #0]
      break;
 8007802:	e013      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_LP;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2218      	movs	r2, #24
 8007808:	701a      	strb	r2, [r3, #0]
      break;
 800780a:	e00f      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_LP;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2219      	movs	r2, #25
 8007810:	701a      	strb	r2, [r3, #0]
      break;
 8007812:	e00b      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_LP;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	221a      	movs	r2, #26
 8007818:	701a      	strb	r2, [r3, #0]
      break;
 800781a:	e007      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1Hz6_LP;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	221b      	movs	r2, #27
 8007820:	701a      	strb	r2, [r3, #0]
      break;
 8007822:	e003      	b.n	800782c <lsm6dso16is_xl_data_rate_get+0x178>

    default:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2200      	movs	r2, #0
 8007828:	701a      	strb	r2, [r3, #0]
      break;
 800782a:	bf00      	nop
  }

  return ret;
 800782c:	697b      	ldr	r3, [r7, #20]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop

08007838 <lsm6dso16is_gy_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	460b      	mov	r3, r1
 8007842:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8007844:	f107 0208 	add.w	r2, r7, #8
 8007848:	2301      	movs	r3, #1
 800784a:	2116      	movs	r1, #22
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff fdf7 	bl	8007440 <lsm6dso16is_read_reg>
 8007852:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10f      	bne.n	800787a <lsm6dso16is_gy_hm_mode_set+0x42>
  {
    ctrl7_g.g_hm_mode = ((uint8_t)val & 0x1U);
 800785a:	78fb      	ldrb	r3, [r7, #3]
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	b2da      	uxtb	r2, r3
 8007862:	7a3b      	ldrb	r3, [r7, #8]
 8007864:	f362 13c7 	bfi	r3, r2, #7, #1
 8007868:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800786a:	f107 0208 	add.w	r2, r7, #8
 800786e:	2301      	movs	r3, #1
 8007870:	2116      	movs	r1, #22
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7ff fe02 	bl	800747c <lsm6dso16is_write_reg>
 8007878:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800787a:	68fb      	ldr	r3, [r7, #12]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <lsm6dso16is_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t val)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007890:	f107 0208 	add.w	r2, r7, #8
 8007894:	2301      	movs	r3, #1
 8007896:	2111      	movs	r1, #17
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7ff fdd1 	bl	8007440 <lsm6dso16is_read_reg>
 800789e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d119      	bne.n	80078da <lsm6dso16is_gy_full_scale_set+0x56>
  {
    ctrl2_g.fs_g = ((uint8_t)val & 0x3U);
 80078a6:	78fb      	ldrb	r3, [r7, #3]
 80078a8:	f003 0303 	and.w	r3, r3, #3
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	7a3b      	ldrb	r3, [r7, #8]
 80078b0:	f362 0383 	bfi	r3, r2, #2, #2
 80078b4:	723b      	strb	r3, [r7, #8]
    ctrl2_g.fs_125 = ((uint8_t)val >> 4);
 80078b6:	78fb      	ldrb	r3, [r7, #3]
 80078b8:	091b      	lsrs	r3, r3, #4
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	7a3b      	ldrb	r3, [r7, #8]
 80078c4:	f362 0341 	bfi	r3, r2, #1, #1
 80078c8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80078ca:	f107 0208 	add.w	r2, r7, #8
 80078ce:	2301      	movs	r3, #1
 80078d0:	2111      	movs	r1, #17
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f7ff fdd2 	bl	800747c <lsm6dso16is_write_reg>
 80078d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80078da:	68fb      	ldr	r3, [r7, #12]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <lsm6dso16is_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t *val)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80078ee:	f107 0208 	add.w	r2, r7, #8
 80078f2:	2301      	movs	r3, #1
 80078f4:	2111      	movs	r1, #17
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff fda2 	bl	8007440 <lsm6dso16is_read_reg>
 80078fc:	60f8      	str	r0, [r7, #12]

  switch ((ctrl2_g.fs_125 << 4) | (ctrl2_g.fs_g))
 80078fe:	7a3b      	ldrb	r3, [r7, #8]
 8007900:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007904:	b2db      	uxtb	r3, r3
 8007906:	011b      	lsls	r3, r3, #4
 8007908:	7a3a      	ldrb	r2, [r7, #8]
 800790a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800790e:	b2d2      	uxtb	r2, r2
 8007910:	4313      	orrs	r3, r2
 8007912:	2b10      	cmp	r3, #16
 8007914:	d838      	bhi.n	8007988 <lsm6dso16is_gy_full_scale_get+0xa4>
 8007916:	a201      	add	r2, pc, #4	@ (adr r2, 800791c <lsm6dso16is_gy_full_scale_get+0x38>)
 8007918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791c:	08007969 	.word	0x08007969
 8007920:	08007971 	.word	0x08007971
 8007924:	08007979 	.word	0x08007979
 8007928:	08007981 	.word	0x08007981
 800792c:	08007989 	.word	0x08007989
 8007930:	08007989 	.word	0x08007989
 8007934:	08007989 	.word	0x08007989
 8007938:	08007989 	.word	0x08007989
 800793c:	08007989 	.word	0x08007989
 8007940:	08007989 	.word	0x08007989
 8007944:	08007989 	.word	0x08007989
 8007948:	08007989 	.word	0x08007989
 800794c:	08007989 	.word	0x08007989
 8007950:	08007989 	.word	0x08007989
 8007954:	08007989 	.word	0x08007989
 8007958:	08007989 	.word	0x08007989
 800795c:	08007961 	.word	0x08007961
  {
    case LSM6DSO16IS_125dps:
      *val = LSM6DSO16IS_125dps;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2210      	movs	r2, #16
 8007964:	701a      	strb	r2, [r3, #0]
      break;
 8007966:	e013      	b.n	8007990 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_250dps:
      *val = LSM6DSO16IS_250dps;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2200      	movs	r2, #0
 800796c:	701a      	strb	r2, [r3, #0]
      break;
 800796e:	e00f      	b.n	8007990 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_500dps:
      *val = LSM6DSO16IS_500dps;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2201      	movs	r2, #1
 8007974:	701a      	strb	r2, [r3, #0]
      break;
 8007976:	e00b      	b.n	8007990 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_1000dps:
      *val = LSM6DSO16IS_1000dps;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2202      	movs	r2, #2
 800797c:	701a      	strb	r2, [r3, #0]
      break;
 800797e:	e007      	b.n	8007990 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_2000dps:
      *val = LSM6DSO16IS_2000dps;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	2203      	movs	r2, #3
 8007984:	701a      	strb	r2, [r3, #0]
      break;
 8007986:	e003      	b.n	8007990 <lsm6dso16is_gy_full_scale_get+0xac>

    default:
      *val = LSM6DSO16IS_125dps;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2210      	movs	r2, #16
 800798c:	701a      	strb	r2, [r3, #0]
      break;
 800798e:	bf00      	nop
  }
  return ret;
 8007990:	68fb      	ldr	r3, [r7, #12]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop

0800799c <lsm6dso16is_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t val)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	460b      	mov	r3, r1
 80079a6:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80079a8:	f107 0208 	add.w	r2, r7, #8
 80079ac:	2301      	movs	r3, #1
 80079ae:	2111      	movs	r1, #17
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7ff fd45 	bl	8007440 <lsm6dso16is_read_reg>
 80079b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d128      	bne.n	8007a10 <lsm6dso16is_gy_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 80079be:	78fb      	ldrb	r3, [r7, #3]
 80079c0:	f003 0310 	and.w	r3, r3, #16
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d008      	beq.n	80079da <lsm6dso16is_gy_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 80079c8:	2101      	movs	r1, #1
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7ff ff34 	bl	8007838 <lsm6dso16is_gy_hm_mode_set>
 80079d0:	4602      	mov	r2, r0
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	4413      	add	r3, r2
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	e007      	b.n	80079ea <lsm6dso16is_gy_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 80079da:	2100      	movs	r1, #0
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff ff2b 	bl	8007838 <lsm6dso16is_gy_hm_mode_set>
 80079e2:	4602      	mov	r2, r0
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	4413      	add	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]
    }

    ctrl2_g.odr_g = ((uint8_t)val & 0xfU);
 80079ea:	78fb      	ldrb	r3, [r7, #3]
 80079ec:	f003 030f 	and.w	r3, r3, #15
 80079f0:	b2da      	uxtb	r2, r3
 80079f2:	7a3b      	ldrb	r3, [r7, #8]
 80079f4:	f362 1307 	bfi	r3, r2, #4, #4
 80079f8:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80079fa:	f107 0208 	add.w	r2, r7, #8
 80079fe:	2301      	movs	r3, #1
 8007a00:	2111      	movs	r1, #17
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff fd3a 	bl	800747c <lsm6dso16is_write_reg>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007a10:	68fb      	ldr	r3, [r7, #12]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <lsm6dso16is_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t *val)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007a26:	f107 0210 	add.w	r2, r7, #16
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	2111      	movs	r1, #17
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7ff fd06 	bl	8007440 <lsm6dso16is_read_reg>
 8007a34:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8007a36:	f107 020c 	add.w	r2, r7, #12
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	2116      	movs	r1, #22
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff fcfe 	bl	8007440 <lsm6dso16is_read_reg>
 8007a44:	4602      	mov	r2, r0
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	4413      	add	r3, r2
 8007a4a:	617b      	str	r3, [r7, #20]

  switch ((ctrl7_g.g_hm_mode << 4) | (ctrl2_g.odr_g))
 8007a4c:	7b3b      	ldrb	r3, [r7, #12]
 8007a4e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	011b      	lsls	r3, r3, #4
 8007a56:	7c3a      	ldrb	r2, [r7, #16]
 8007a58:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007a5c:	b2d2      	uxtb	r2, r2
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	2b1a      	cmp	r3, #26
 8007a62:	f200 808d 	bhi.w	8007b80 <lsm6dso16is_gy_data_rate_get+0x164>
 8007a66:	a201      	add	r2, pc, #4	@ (adr r2, 8007a6c <lsm6dso16is_gy_data_rate_get+0x50>)
 8007a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6c:	08007ad9 	.word	0x08007ad9
 8007a70:	08007ae1 	.word	0x08007ae1
 8007a74:	08007ae9 	.word	0x08007ae9
 8007a78:	08007af1 	.word	0x08007af1
 8007a7c:	08007af9 	.word	0x08007af9
 8007a80:	08007b01 	.word	0x08007b01
 8007a84:	08007b09 	.word	0x08007b09
 8007a88:	08007b11 	.word	0x08007b11
 8007a8c:	08007b19 	.word	0x08007b19
 8007a90:	08007b21 	.word	0x08007b21
 8007a94:	08007b29 	.word	0x08007b29
 8007a98:	08007b81 	.word	0x08007b81
 8007a9c:	08007b81 	.word	0x08007b81
 8007aa0:	08007b81 	.word	0x08007b81
 8007aa4:	08007b81 	.word	0x08007b81
 8007aa8:	08007b81 	.word	0x08007b81
 8007aac:	08007b81 	.word	0x08007b81
 8007ab0:	08007b31 	.word	0x08007b31
 8007ab4:	08007b39 	.word	0x08007b39
 8007ab8:	08007b41 	.word	0x08007b41
 8007abc:	08007b49 	.word	0x08007b49
 8007ac0:	08007b51 	.word	0x08007b51
 8007ac4:	08007b59 	.word	0x08007b59
 8007ac8:	08007b61 	.word	0x08007b61
 8007acc:	08007b69 	.word	0x08007b69
 8007ad0:	08007b71 	.word	0x08007b71
 8007ad4:	08007b79 	.word	0x08007b79
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	2200      	movs	r2, #0
 8007adc:	701a      	strb	r2, [r3, #0]
      break;
 8007ade:	e053      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_HP;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	701a      	strb	r2, [r3, #0]
      break;
 8007ae6:	e04f      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_HP;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2202      	movs	r2, #2
 8007aec:	701a      	strb	r2, [r3, #0]
      break;
 8007aee:	e04b      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_HP;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2203      	movs	r2, #3
 8007af4:	701a      	strb	r2, [r3, #0]
      break;
 8007af6:	e047      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	2204      	movs	r2, #4
 8007afc:	701a      	strb	r2, [r3, #0]
      break;
 8007afe:	e043      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_HP;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2205      	movs	r2, #5
 8007b04:	701a      	strb	r2, [r3, #0]
      break;
 8007b06:	e03f      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_HP;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2206      	movs	r2, #6
 8007b0c:	701a      	strb	r2, [r3, #0]
      break;
 8007b0e:	e03b      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_HP;
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2207      	movs	r2, #7
 8007b14:	701a      	strb	r2, [r3, #0]
      break;
 8007b16:	e037      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_HP;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2208      	movs	r2, #8
 8007b1c:	701a      	strb	r2, [r3, #0]
      break;
 8007b1e:	e033      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_HP;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2209      	movs	r2, #9
 8007b24:	701a      	strb	r2, [r3, #0]
      break;
 8007b26:	e02f      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	220a      	movs	r2, #10
 8007b2c:	701a      	strb	r2, [r3, #0]
      break;
 8007b2e:	e02b      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_LP;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2211      	movs	r2, #17
 8007b34:	701a      	strb	r2, [r3, #0]
      break;
 8007b36:	e027      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_LP;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	2212      	movs	r2, #18
 8007b3c:	701a      	strb	r2, [r3, #0]
      break;
 8007b3e:	e023      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_LP;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2213      	movs	r2, #19
 8007b44:	701a      	strb	r2, [r3, #0]
      break;
 8007b46:	e01f      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_LP;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	2214      	movs	r2, #20
 8007b4c:	701a      	strb	r2, [r3, #0]
      break;
 8007b4e:	e01b      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_LP;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2215      	movs	r2, #21
 8007b54:	701a      	strb	r2, [r3, #0]
      break;
 8007b56:	e017      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_LP;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2216      	movs	r2, #22
 8007b5c:	701a      	strb	r2, [r3, #0]
      break;
 8007b5e:	e013      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_LP;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2217      	movs	r2, #23
 8007b64:	701a      	strb	r2, [r3, #0]
      break;
 8007b66:	e00f      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_LP;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2218      	movs	r2, #24
 8007b6c:	701a      	strb	r2, [r3, #0]
      break;
 8007b6e:	e00b      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_LP;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2219      	movs	r2, #25
 8007b74:	701a      	strb	r2, [r3, #0]
      break;
 8007b76:	e007      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_LP;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	221a      	movs	r2, #26
 8007b7c:	701a      	strb	r2, [r3, #0]
      break;
 8007b7e:	e003      	b.n	8007b88 <lsm6dso16is_gy_data_rate_get+0x16c>

    default:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2200      	movs	r2, #0
 8007b84:	701a      	strb	r2, [r3, #0]
      break;
 8007b86:	bf00      	nop
  }

  return ret;
 8007b88:	697b      	ldr	r3, [r7, #20]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3718      	adds	r7, #24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop

08007b94 <lsm6dso16is_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007ba0:	f107 0208 	add.w	r2, r7, #8
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	2112      	movs	r1, #18
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f7ff fc49 	bl	8007440 <lsm6dso16is_read_reg>
 8007bae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10f      	bne.n	8007bd6 <lsm6dso16is_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8007bb6:	78fb      	ldrb	r3, [r7, #3]
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	7a3b      	ldrb	r3, [r7, #8]
 8007bc0:	f362 0382 	bfi	r3, r2, #2, #1
 8007bc4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007bc6:	f107 0208 	add.w	r2, r7, #8
 8007bca:	2301      	movs	r3, #1
 8007bcc:	2112      	movs	r1, #18
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7ff fc54 	bl	800747c <lsm6dso16is_write_reg>
 8007bd4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <lsm6dso16is_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007bec:	f107 0208 	add.w	r2, r7, #8
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	2112      	movs	r1, #18
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7ff fc23 	bl	8007440 <lsm6dso16is_read_reg>
 8007bfa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10f      	bne.n	8007c22 <lsm6dso16is_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8007c02:	78fb      	ldrb	r3, [r7, #3]
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	7a3b      	ldrb	r3, [r7, #8]
 8007c0c:	f362 1386 	bfi	r3, r2, #6, #1
 8007c10:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007c12:	f107 0208 	add.w	r2, r7, #8
 8007c16:	2301      	movs	r3, #1
 8007c18:	2112      	movs	r1, #18
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7ff fc2e 	bl	800747c <lsm6dso16is_write_reg>
 8007c20:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007c22:	68fb      	ldr	r3, [r7, #12]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <lsm6dso16is_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_G, buff, 6);
 8007c36:	f107 020c 	add.w	r2, r7, #12
 8007c3a:	2306      	movs	r3, #6
 8007c3c:	2122      	movs	r1, #34	@ 0x22
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7ff fbfe 	bl	8007440 <lsm6dso16is_read_reg>
 8007c44:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007c46:	7b7b      	ldrb	r3, [r7, #13]
 8007c48:	b21a      	sxth	r2, r3
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	021b      	lsls	r3, r3, #8
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	7b3a      	ldrb	r2, [r7, #12]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	b21a      	sxth	r2, r3
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007c66:	7bfa      	ldrb	r2, [r7, #15]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	3302      	adds	r3, #2
 8007c6c:	b212      	sxth	r2, r2
 8007c6e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	3302      	adds	r3, #2
 8007c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	021b      	lsls	r3, r3, #8
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	7bba      	ldrb	r2, [r7, #14]
 8007c80:	4413      	add	r3, r2
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	3302      	adds	r3, #2
 8007c88:	b212      	sxth	r2, r2
 8007c8a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007c8c:	7c7a      	ldrb	r2, [r7, #17]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	3304      	adds	r3, #4
 8007c92:	b212      	sxth	r2, r2
 8007c94:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	3304      	adds	r3, #4
 8007c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	021b      	lsls	r3, r3, #8
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	7c3a      	ldrb	r2, [r7, #16]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	3304      	adds	r3, #4
 8007cae:	b212      	sxth	r2, r2
 8007cb0:	801a      	strh	r2, [r3, #0]

  return ret;
 8007cb2:	697b      	ldr	r3, [r7, #20]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3718      	adds	r7, #24
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <lsm6dso16is_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_A, buff, 6);
 8007cc6:	f107 020c 	add.w	r2, r7, #12
 8007cca:	2306      	movs	r3, #6
 8007ccc:	2128      	movs	r1, #40	@ 0x28
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7ff fbb6 	bl	8007440 <lsm6dso16is_read_reg>
 8007cd4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007cd6:	7b7b      	ldrb	r3, [r7, #13]
 8007cd8:	b21a      	sxth	r2, r3
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	021b      	lsls	r3, r3, #8
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	7b3a      	ldrb	r2, [r7, #12]
 8007cec:	4413      	add	r3, r2
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	b21a      	sxth	r2, r3
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007cf6:	7bfa      	ldrb	r2, [r7, #15]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	3302      	adds	r3, #2
 8007cfc:	b212      	sxth	r2, r2
 8007cfe:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	3302      	adds	r3, #2
 8007d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	021b      	lsls	r3, r3, #8
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	7bba      	ldrb	r2, [r7, #14]
 8007d10:	4413      	add	r3, r2
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	3302      	adds	r3, #2
 8007d18:	b212      	sxth	r2, r2
 8007d1a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007d1c:	7c7a      	ldrb	r2, [r7, #17]
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	3304      	adds	r3, #4
 8007d22:	b212      	sxth	r2, r2
 8007d24:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	021b      	lsls	r3, r3, #8
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	7c3a      	ldrb	r2, [r7, #16]
 8007d36:	4413      	add	r3, r2
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	b212      	sxth	r2, r2
 8007d40:	801a      	strh	r2, [r3, #0]

  return ret;
 8007d42:	697b      	ldr	r3, [r7, #20]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3718      	adds	r7, #24
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <LSM6DSV16X_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_RegisterBusIO(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_IO_t *pIO)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d103      	bne.n	8007d68 <LSM6DSV16X_RegisterBusIO+0x1c>
  {
    ret = LSM6DSV16X_ERROR;
 8007d60:	f04f 33ff 	mov.w	r3, #4294967295
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	e05d      	b.n	8007e24 <LSM6DSV16X_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init       = pIO->Init;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit     = pIO->DeInit;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType    = pIO->BusType;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address    = pIO->Address;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	7b1a      	ldrb	r2, [r3, #12]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg   = pIO->WriteReg;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	691a      	ldr	r2, [r3, #16]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg    = pIO->ReadReg;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	695a      	ldr	r2, [r3, #20]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick    = pIO->GetTick;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	699a      	ldr	r2, [r3, #24]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a23      	ldr	r2, [pc, #140]	@ (8007e30 <LSM6DSV16X_RegisterBusIO+0xe4>)
 8007da4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a22      	ldr	r2, [pc, #136]	@ (8007e34 <LSM6DSV16X_RegisterBusIO+0xe8>)
 8007daa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	69da      	ldr	r2, [r3, #28]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d103      	bne.n	8007dca <LSM6DSV16X_RegisterBusIO+0x7e>
    {
      ret = LSM6DSV16X_ERROR;
 8007dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	e02c      	b.n	8007e24 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LSM6DSV16X_OK)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4798      	blx	r3
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d003      	beq.n	8007dde <LSM6DSV16X_RegisterBusIO+0x92>
    {
      ret = LSM6DSV16X_ERROR;
 8007dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	e022      	b.n	8007e24 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSV16X_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d11e      	bne.n	8007e24 <LSM6DSV16X_RegisterBusIO+0xd8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d119      	bne.n	8007e24 <LSM6DSV16X_RegisterBusIO+0xd8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x04;
 8007df0:	2304      	movs	r3, #4
 8007df2:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_CTRL3, data) != LSM6DSV16X_OK)
 8007df4:	7afb      	ldrb	r3, [r7, #11]
 8007df6:	461a      	mov	r2, r3
 8007df8:	2112      	movs	r1, #18
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 ff18 	bl	8008c30 <LSM6DSV16X_Write_Reg>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d002      	beq.n	8007e0c <LSM6DSV16X_RegisterBusIO+0xc0>
          {
            ret = LSM6DSV16X_ERROR;
 8007e06:	f04f 33ff 	mov.w	r3, #4294967295
 8007e0a:	60fb      	str	r3, [r7, #12]
          }

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_IF_CFG, data) != LSM6DSV16X_OK)
 8007e0c:	7afb      	ldrb	r3, [r7, #11]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	2103      	movs	r1, #3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 ff0c 	bl	8008c30 <LSM6DSV16X_Write_Reg>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d002      	beq.n	8007e24 <LSM6DSV16X_RegisterBusIO+0xd8>
          {
            ret = LSM6DSV16X_ERROR;
 8007e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e22:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8007e24:	68fb      	ldr	r3, [r7, #12]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	08009171 	.word	0x08009171
 8007e34:	080091a7 	.word	0x080091a7

08007e38 <LSM6DSV16X_Init>:
  * @brief  Initialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Init(LSM6DSV16X_Object_t *pObj)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Set main memory bank */
  if (LSM6DSV16X_Set_Mem_Bank(pObj, (uint8_t)LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 8007e40:	2100      	movs	r1, #0
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 ff0f 	bl	8008c66 <LSM6DSV16X_Set_Mem_Bank>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d002      	beq.n	8007e54 <LSM6DSV16X_Init+0x1c>
  {
    return LSM6DSV16X_ERROR;
 8007e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e52:	e070      	b.n	8007f36 <LSM6DSV16X_Init+0xfe>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface */
  if (lsm6dsv16x_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3320      	adds	r3, #32
 8007e58:	2101      	movs	r1, #1
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f001 fcfe 	bl	800985c <lsm6dsv16x_auto_increment_set>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d002      	beq.n	8007e6c <LSM6DSV16X_Init+0x34>
  {
    return LSM6DSV16X_ERROR;
 8007e66:	f04f 33ff 	mov.w	r3, #4294967295
 8007e6a:	e064      	b.n	8007f36 <LSM6DSV16X_Init+0xfe>
  }

  /* Enable BDU */
  if (lsm6dsv16x_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3320      	adds	r3, #32
 8007e70:	2101      	movs	r1, #1
 8007e72:	4618      	mov	r0, r3
 8007e74:	f001 fd18 	bl	80098a8 <lsm6dsv16x_block_data_update_set>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d002      	beq.n	8007e84 <LSM6DSV16X_Init+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8007e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e82:	e058      	b.n	8007f36 <LSM6DSV16X_Init+0xfe>
  }

  /* WAKE_UP mode selection */
  if (lsm6dsv16x_fifo_mode_set(&(pObj->Ctx), LSM6DSV16X_BYPASS_MODE) != LSM6DSV16X_OK)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3320      	adds	r3, #32
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f001 feae 	bl	8009bec <lsm6dsv16x_fifo_mode_set>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d002      	beq.n	8007e9c <LSM6DSV16X_Init+0x64>
  {
    return LSM6DSV16X_ERROR;
 8007e96:	f04f 33ff 	mov.w	r3, #4294967295
 8007e9a:	e04c      	b.n	8007f36 <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_AT_120Hz;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2206      	movs	r2, #6
 8007ea0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3320      	adds	r3, #32
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f001 fa14 	bl	80092d8 <lsm6dsv16x_xl_data_rate_set>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d002      	beq.n	8007ebc <LSM6DSV16X_Init+0x84>
  {
    return LSM6DSV16X_ERROR;
 8007eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eba:	e03c      	b.n	8007f36 <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2g) != LSM6DSV16X_OK)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3320      	adds	r3, #32
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f001 fd94 	bl	80099f0 <lsm6dsv16x_xl_full_scale_set>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <LSM6DSV16X_Init+0x9c>
  {
    return LSM6DSV16X_ERROR;
 8007ece:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed2:	e030      	b.n	8007f36 <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->gyro_odr = LSM6DSV16X_ODR_AT_120Hz;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2206      	movs	r2, #6
 8007ed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3320      	adds	r3, #32
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f001 fb5a 	bl	800959c <lsm6dsv16x_gy_data_rate_set>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d002      	beq.n	8007ef4 <LSM6DSV16X_Init+0xbc>
  {
    return LSM6DSV16X_ERROR;
 8007eee:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef2:	e020      	b.n	8007f36 <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2000dps) != LSM6DSV16X_OK)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3320      	adds	r3, #32
 8007ef8:	2104      	movs	r1, #4
 8007efa:	4618      	mov	r0, r3
 8007efc:	f001 fcfa 	bl	80098f4 <lsm6dsv16x_gy_full_scale_set>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d002      	beq.n	8007f0c <LSM6DSV16X_Init+0xd4>
  {
    return LSM6DSV16X_ERROR;
 8007f06:	f04f 33ff 	mov.w	r3, #4294967295
 8007f0a:	e014      	b.n	8007f36 <LSM6DSV16X_Init+0xfe>
  }

  /* Enable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 1;
 8007f0c:	7b3b      	ldrb	r3, [r7, #12]
 8007f0e:	f043 0301 	orr.w	r3, r3, #1
 8007f12:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3320      	adds	r3, #32
 8007f18:	7b39      	ldrb	r1, [r7, #12]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f001 fe8c 	bl	8009c38 <lsm6dsv16x_ah_qvar_mode_set>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d002      	beq.n	8007f2c <LSM6DSV16X_Init+0xf4>
  {
    return LSM6DSV16X_ERROR;
 8007f26:	f04f 33ff 	mov.w	r3, #4294967295
 8007f2a:	e004      	b.n	8007f36 <LSM6DSV16X_Init+0xfe>
  }

  pObj->is_initialized = 1;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <LSM6DSV16X_DeInit>:
  * @brief  Deinitialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_DeInit(LSM6DSV16X_Object_t *pObj)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b084      	sub	sp, #16
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSV16X_ACC_Disable(pObj) != LSM6DSV16X_OK)
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f898 	bl	800807c <LSM6DSV16X_ACC_Disable>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d002      	beq.n	8007f58 <LSM6DSV16X_DeInit+0x1a>
  {
    return LSM6DSV16X_ERROR;
 8007f52:	f04f 33ff 	mov.w	r3, #4294967295
 8007f56:	e025      	b.n	8007fa4 <LSM6DSV16X_DeInit+0x66>
  }

  if (LSM6DSV16X_GYRO_Disable(pObj) != LSM6DSV16X_OK)
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fb6a 	bl	8008632 <LSM6DSV16X_GYRO_Disable>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d002      	beq.n	8007f6a <LSM6DSV16X_DeInit+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8007f64:	f04f 33ff 	mov.w	r3, #4294967295
 8007f68:	e01c      	b.n	8007fa4 <LSM6DSV16X_DeInit+0x66>
  }

  /* Reset output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_OFF;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSV16X_ODR_OFF;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 0;
 8007f7a:	7b3b      	ldrb	r3, [r7, #12]
 8007f7c:	f023 0301 	bic.w	r3, r3, #1
 8007f80:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	3320      	adds	r3, #32
 8007f86:	7b39      	ldrb	r1, [r7, #12]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f001 fe55 	bl	8009c38 <lsm6dsv16x_ah_qvar_mode_set>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d002      	beq.n	8007f9a <LSM6DSV16X_DeInit+0x5c>
  {
    return LSM6DSV16X_ERROR;
 8007f94:	f04f 33ff 	mov.w	r3, #4294967295
 8007f98:	e004      	b.n	8007fa4 <LSM6DSV16X_DeInit+0x66>
  }

  pObj->is_initialized = 0;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <LSM6DSV16X_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ReadID(LSM6DSV16X_Object_t *pObj, uint8_t *Id)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  if (lsm6dsv16x_device_id_get(&(pObj->Ctx), Id) != LSM6DSV16X_OK)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3320      	adds	r3, #32
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f001 f97a 	bl	80092b6 <lsm6dsv16x_device_id_get>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <LSM6DSV16X_ReadID+0x22>
  {
    return LSM6DSV16X_ERROR;
 8007fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fcc:	e000      	b.n	8007fd0 <LSM6DSV16X_ReadID+0x24>
  }

  return LSM6DSV16X_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <LSM6DSV16X_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSV16X sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GetCapabilities(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Capabilities_t *Capabilities)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2201      	movs	r2, #1
 8007fec:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 1;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8008000:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2210      	movs	r2, #16
 8008006:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	2200      	movs	r2, #0
 800800c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 7680.0f;
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	4a07      	ldr	r2, [pc, #28]	@ (8008030 <LSM6DSV16X_GetCapabilities+0x58>)
 8008012:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 7680.0f;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	4a06      	ldr	r2, [pc, #24]	@ (8008030 <LSM6DSV16X_GetCapabilities+0x58>)
 8008018:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	f04f 0200 	mov.w	r2, #0
 8008020:	619a      	str	r2, [r3, #24]
  return LSM6DSV16X_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr
 8008030:	45f00000 	.word	0x45f00000

08008034 <LSM6DSV16X_ACC_Enable>:
  * @brief  Enable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Enable(LSM6DSV16X_Object_t *pObj)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008042:	2b01      	cmp	r3, #1
 8008044:	d101      	bne.n	800804a <LSM6DSV16X_ACC_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	e014      	b.n	8008074 <LSM6DSV16X_ACC_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSV16X_OK)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f103 0220 	add.w	r2, r3, #32
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008056:	4619      	mov	r1, r3
 8008058:	4610      	mov	r0, r2
 800805a:	f001 f93d 	bl	80092d8 <lsm6dsv16x_xl_data_rate_set>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d002      	beq.n	800806a <LSM6DSV16X_ACC_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 8008064:	f04f 33ff 	mov.w	r3, #4294967295
 8008068:	e004      	b.n	8008074 <LSM6DSV16X_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2201      	movs	r2, #1
 800806e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <LSM6DSV16X_ACC_Disable>:
  * @brief  Disable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Disable(LSM6DSV16X_Object_t *pObj)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <LSM6DSV16X_ACC_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 800808e:	2300      	movs	r3, #0
 8008090:	e01f      	b.n	80080d2 <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSV16X_OK)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f103 0220 	add.w	r2, r3, #32
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	3333      	adds	r3, #51	@ 0x33
 800809c:	4619      	mov	r1, r3
 800809e:	4610      	mov	r0, r2
 80080a0:	f001 f96c 	bl	800937c <lsm6dsv16x_xl_data_rate_get>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d002      	beq.n	80080b0 <LSM6DSV16X_ACC_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 80080aa:	f04f 33ff 	mov.w	r3, #4294967295
 80080ae:	e010      	b.n	80080d2 <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3320      	adds	r3, #32
 80080b4:	2100      	movs	r1, #0
 80080b6:	4618      	mov	r0, r3
 80080b8:	f001 f90e 	bl	80092d8 <lsm6dsv16x_xl_data_rate_set>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d002      	beq.n	80080c8 <LSM6DSV16X_ACC_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 80080c2:	f04f 33ff 	mov.w	r3, #4294967295
 80080c6:	e004      	b.n	80080d2 <LSM6DSV16X_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
	...

080080dc <LSM6DSV16X_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3320      	adds	r3, #32
 80080ee:	f107 020b 	add.w	r2, r7, #11
 80080f2:	4611      	mov	r1, r2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f001 fca1 	bl	8009a3c <lsm6dsv16x_xl_full_scale_get>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d002      	beq.n	8008106 <LSM6DSV16X_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008100:	f04f 33ff 	mov.w	r3, #4294967295
 8008104:	e023      	b.n	800814e <LSM6DSV16X_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale */
  switch (full_scale)
 8008106:	7afb      	ldrb	r3, [r7, #11]
 8008108:	2b03      	cmp	r3, #3
 800810a:	d81b      	bhi.n	8008144 <LSM6DSV16X_ACC_GetSensitivity+0x68>
 800810c:	a201      	add	r2, pc, #4	@ (adr r2, 8008114 <LSM6DSV16X_ACC_GetSensitivity+0x38>)
 800810e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008112:	bf00      	nop
 8008114:	08008125 	.word	0x08008125
 8008118:	0800812d 	.word	0x0800812d
 800811c:	08008135 	.word	0x08008135
 8008120:	0800813d 	.word	0x0800813d
  {
    case LSM6DSV16X_2g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_2G;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	4a0c      	ldr	r2, [pc, #48]	@ (8008158 <LSM6DSV16X_ACC_GetSensitivity+0x7c>)
 8008128:	601a      	str	r2, [r3, #0]
      break;
 800812a:	e00f      	b.n	800814c <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_4g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_4G;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	4a0b      	ldr	r2, [pc, #44]	@ (800815c <LSM6DSV16X_ACC_GetSensitivity+0x80>)
 8008130:	601a      	str	r2, [r3, #0]
      break;
 8008132:	e00b      	b.n	800814c <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_8g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_8G;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	4a0a      	ldr	r2, [pc, #40]	@ (8008160 <LSM6DSV16X_ACC_GetSensitivity+0x84>)
 8008138:	601a      	str	r2, [r3, #0]
      break;
 800813a:	e007      	b.n	800814c <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_16g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_16G;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	4a09      	ldr	r2, [pc, #36]	@ (8008164 <LSM6DSV16X_ACC_GetSensitivity+0x88>)
 8008140:	601a      	str	r2, [r3, #0]
      break;
 8008142:	e003      	b.n	800814c <LSM6DSV16X_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 8008144:	f04f 33ff 	mov.w	r3, #4294967295
 8008148:	60fb      	str	r3, [r7, #12]
      break;
 800814a:	bf00      	nop
  }

  return ret;
 800814c:	68fb      	ldr	r3, [r7, #12]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	3d79db23 	.word	0x3d79db23
 800815c:	3df9db23 	.word	0x3df9db23
 8008160:	3e79db23 	.word	0x3e79db23
 8008164:	3ef9db23 	.word	0x3ef9db23

08008168 <LSM6DSV16X_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	3320      	adds	r3, #32
 800817a:	f107 020b 	add.w	r2, r7, #11
 800817e:	4611      	mov	r1, r2
 8008180:	4618      	mov	r0, r3
 8008182:	f001 f8fb 	bl	800937c <lsm6dsv16x_xl_data_rate_get>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <LSM6DSV16X_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800818c:	f04f 33ff 	mov.w	r3, #4294967295
 8008190:	e0ea      	b.n	8008368 <LSM6DSV16X_ACC_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 8008192:	7afb      	ldrb	r3, [r7, #11]
 8008194:	2b2c      	cmp	r3, #44	@ 0x2c
 8008196:	f200 80e2 	bhi.w	800835e <LSM6DSV16X_ACC_GetOutputDataRate+0x1f6>
 800819a:	a201      	add	r2, pc, #4	@ (adr r2, 80081a0 <LSM6DSV16X_ACC_GetOutputDataRate+0x38>)
 800819c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a0:	08008255 	.word	0x08008255
 80081a4:	0800825f 	.word	0x0800825f
 80081a8:	08008267 	.word	0x08008267
 80081ac:	08008277 	.word	0x08008277
 80081b0:	0800828f 	.word	0x0800828f
 80081b4:	080082a7 	.word	0x080082a7
 80081b8:	080082bf 	.word	0x080082bf
 80081bc:	080082d7 	.word	0x080082d7
 80081c0:	080082ef 	.word	0x080082ef
 80081c4:	08008307 	.word	0x08008307
 80081c8:	0800831f 	.word	0x0800831f
 80081cc:	08008337 	.word	0x08008337
 80081d0:	0800834f 	.word	0x0800834f
 80081d4:	0800835f 	.word	0x0800835f
 80081d8:	0800835f 	.word	0x0800835f
 80081dc:	0800835f 	.word	0x0800835f
 80081e0:	0800835f 	.word	0x0800835f
 80081e4:	0800835f 	.word	0x0800835f
 80081e8:	0800835f 	.word	0x0800835f
 80081ec:	0800827f 	.word	0x0800827f
 80081f0:	08008297 	.word	0x08008297
 80081f4:	080082af 	.word	0x080082af
 80081f8:	080082c7 	.word	0x080082c7
 80081fc:	080082df 	.word	0x080082df
 8008200:	080082f7 	.word	0x080082f7
 8008204:	0800830f 	.word	0x0800830f
 8008208:	08008327 	.word	0x08008327
 800820c:	0800833f 	.word	0x0800833f
 8008210:	08008357 	.word	0x08008357
 8008214:	0800835f 	.word	0x0800835f
 8008218:	0800835f 	.word	0x0800835f
 800821c:	0800835f 	.word	0x0800835f
 8008220:	0800835f 	.word	0x0800835f
 8008224:	0800835f 	.word	0x0800835f
 8008228:	0800835f 	.word	0x0800835f
 800822c:	0800826f 	.word	0x0800826f
 8008230:	08008287 	.word	0x08008287
 8008234:	0800829f 	.word	0x0800829f
 8008238:	080082b7 	.word	0x080082b7
 800823c:	080082cf 	.word	0x080082cf
 8008240:	080082e7 	.word	0x080082e7
 8008244:	080082ff 	.word	0x080082ff
 8008248:	08008317 	.word	0x08008317
 800824c:	0800832f 	.word	0x0800832f
 8008250:	08008347 	.word	0x08008347
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	f04f 0200 	mov.w	r2, #0
 800825a:	601a      	str	r2, [r3, #0]
      break;
 800825c:	e083      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	4a43      	ldr	r2, [pc, #268]	@ (8008370 <LSM6DSV16X_ACC_GetOutputDataRate+0x208>)
 8008262:	601a      	str	r2, [r3, #0]
      break;
 8008264:	e07f      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	4a42      	ldr	r2, [pc, #264]	@ (8008374 <LSM6DSV16X_ACC_GetOutputDataRate+0x20c>)
 800826a:	601a      	str	r2, [r3, #0]
      break;
 800826c:	e07b      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	4a41      	ldr	r2, [pc, #260]	@ (8008378 <LSM6DSV16X_ACC_GetOutputDataRate+0x210>)
 8008272:	601a      	str	r2, [r3, #0]
      break;
 8008274:	e077      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	4a40      	ldr	r2, [pc, #256]	@ (800837c <LSM6DSV16X_ACC_GetOutputDataRate+0x214>)
 800827a:	601a      	str	r2, [r3, #0]
      break;
 800827c:	e073      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	4a3f      	ldr	r2, [pc, #252]	@ (8008380 <LSM6DSV16X_ACC_GetOutputDataRate+0x218>)
 8008282:	601a      	str	r2, [r3, #0]
      break;
 8008284:	e06f      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	4a3e      	ldr	r2, [pc, #248]	@ (8008384 <LSM6DSV16X_ACC_GetOutputDataRate+0x21c>)
 800828a:	601a      	str	r2, [r3, #0]
      break;
 800828c:	e06b      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	4a3d      	ldr	r2, [pc, #244]	@ (8008388 <LSM6DSV16X_ACC_GetOutputDataRate+0x220>)
 8008292:	601a      	str	r2, [r3, #0]
      break;
 8008294:	e067      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	4a3c      	ldr	r2, [pc, #240]	@ (800838c <LSM6DSV16X_ACC_GetOutputDataRate+0x224>)
 800829a:	601a      	str	r2, [r3, #0]
      break;
 800829c:	e063      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	4a3b      	ldr	r2, [pc, #236]	@ (8008390 <LSM6DSV16X_ACC_GetOutputDataRate+0x228>)
 80082a2:	601a      	str	r2, [r3, #0]
      break;
 80082a4:	e05f      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	4a3a      	ldr	r2, [pc, #232]	@ (8008394 <LSM6DSV16X_ACC_GetOutputDataRate+0x22c>)
 80082aa:	601a      	str	r2, [r3, #0]
      break;
 80082ac:	e05b      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	4a39      	ldr	r2, [pc, #228]	@ (8008398 <LSM6DSV16X_ACC_GetOutputDataRate+0x230>)
 80082b2:	601a      	str	r2, [r3, #0]
      break;
 80082b4:	e057      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	4a38      	ldr	r2, [pc, #224]	@ (800839c <LSM6DSV16X_ACC_GetOutputDataRate+0x234>)
 80082ba:	601a      	str	r2, [r3, #0]
      break;
 80082bc:	e053      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	4a37      	ldr	r2, [pc, #220]	@ (80083a0 <LSM6DSV16X_ACC_GetOutputDataRate+0x238>)
 80082c2:	601a      	str	r2, [r3, #0]
      break;
 80082c4:	e04f      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	4a36      	ldr	r2, [pc, #216]	@ (80083a4 <LSM6DSV16X_ACC_GetOutputDataRate+0x23c>)
 80082ca:	601a      	str	r2, [r3, #0]
      break;
 80082cc:	e04b      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	4a35      	ldr	r2, [pc, #212]	@ (80083a8 <LSM6DSV16X_ACC_GetOutputDataRate+0x240>)
 80082d2:	601a      	str	r2, [r3, #0]
      break;
 80082d4:	e047      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	4a34      	ldr	r2, [pc, #208]	@ (80083ac <LSM6DSV16X_ACC_GetOutputDataRate+0x244>)
 80082da:	601a      	str	r2, [r3, #0]
      break;
 80082dc:	e043      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	4a33      	ldr	r2, [pc, #204]	@ (80083b0 <LSM6DSV16X_ACC_GetOutputDataRate+0x248>)
 80082e2:	601a      	str	r2, [r3, #0]
      break;
 80082e4:	e03f      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	4a32      	ldr	r2, [pc, #200]	@ (80083b4 <LSM6DSV16X_ACC_GetOutputDataRate+0x24c>)
 80082ea:	601a      	str	r2, [r3, #0]
      break;
 80082ec:	e03b      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	4a31      	ldr	r2, [pc, #196]	@ (80083b8 <LSM6DSV16X_ACC_GetOutputDataRate+0x250>)
 80082f2:	601a      	str	r2, [r3, #0]
      break;
 80082f4:	e037      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	4a30      	ldr	r2, [pc, #192]	@ (80083bc <LSM6DSV16X_ACC_GetOutputDataRate+0x254>)
 80082fa:	601a      	str	r2, [r3, #0]
      break;
 80082fc:	e033      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	4a2f      	ldr	r2, [pc, #188]	@ (80083c0 <LSM6DSV16X_ACC_GetOutputDataRate+0x258>)
 8008302:	601a      	str	r2, [r3, #0]
      break;
 8008304:	e02f      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	4a2e      	ldr	r2, [pc, #184]	@ (80083c4 <LSM6DSV16X_ACC_GetOutputDataRate+0x25c>)
 800830a:	601a      	str	r2, [r3, #0]
      break;
 800830c:	e02b      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	4a2d      	ldr	r2, [pc, #180]	@ (80083c8 <LSM6DSV16X_ACC_GetOutputDataRate+0x260>)
 8008312:	601a      	str	r2, [r3, #0]
      break;
 8008314:	e027      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	4a2c      	ldr	r2, [pc, #176]	@ (80083cc <LSM6DSV16X_ACC_GetOutputDataRate+0x264>)
 800831a:	601a      	str	r2, [r3, #0]
      break;
 800831c:	e023      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	4a2b      	ldr	r2, [pc, #172]	@ (80083d0 <LSM6DSV16X_ACC_GetOutputDataRate+0x268>)
 8008322:	601a      	str	r2, [r3, #0]
      break;
 8008324:	e01f      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	4a2a      	ldr	r2, [pc, #168]	@ (80083d4 <LSM6DSV16X_ACC_GetOutputDataRate+0x26c>)
 800832a:	601a      	str	r2, [r3, #0]
      break;
 800832c:	e01b      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	4a29      	ldr	r2, [pc, #164]	@ (80083d8 <LSM6DSV16X_ACC_GetOutputDataRate+0x270>)
 8008332:	601a      	str	r2, [r3, #0]
      break;
 8008334:	e017      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	4a28      	ldr	r2, [pc, #160]	@ (80083dc <LSM6DSV16X_ACC_GetOutputDataRate+0x274>)
 800833a:	601a      	str	r2, [r3, #0]
      break;
 800833c:	e013      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	4a27      	ldr	r2, [pc, #156]	@ (80083e0 <LSM6DSV16X_ACC_GetOutputDataRate+0x278>)
 8008342:	601a      	str	r2, [r3, #0]
      break;
 8008344:	e00f      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	4a26      	ldr	r2, [pc, #152]	@ (80083e4 <LSM6DSV16X_ACC_GetOutputDataRate+0x27c>)
 800834a:	601a      	str	r2, [r3, #0]
      break;
 800834c:	e00b      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	4a25      	ldr	r2, [pc, #148]	@ (80083e8 <LSM6DSV16X_ACC_GetOutputDataRate+0x280>)
 8008352:	601a      	str	r2, [r3, #0]
      break;
 8008354:	e007      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	4a24      	ldr	r2, [pc, #144]	@ (80083ec <LSM6DSV16X_ACC_GetOutputDataRate+0x284>)
 800835a:	601a      	str	r2, [r3, #0]
      break;
 800835c:	e003      	b.n	8008366 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 800835e:	f04f 33ff 	mov.w	r3, #4294967295
 8008362:	60fb      	str	r3, [r7, #12]
      break;
 8008364:	bf00      	nop
  }

  return ret;
 8008366:	68fb      	ldr	r3, [r7, #12]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	3ff00000 	.word	0x3ff00000
 8008374:	40f00000 	.word	0x40f00000
 8008378:	41480000 	.word	0x41480000
 800837c:	41700000 	.word	0x41700000
 8008380:	417a0000 	.word	0x417a0000
 8008384:	41c80000 	.word	0x41c80000
 8008388:	41f00000 	.word	0x41f00000
 800838c:	41fa0000 	.word	0x41fa0000
 8008390:	42480000 	.word	0x42480000
 8008394:	42700000 	.word	0x42700000
 8008398:	427a0000 	.word	0x427a0000
 800839c:	42c80000 	.word	0x42c80000
 80083a0:	42f00000 	.word	0x42f00000
 80083a4:	42fa0000 	.word	0x42fa0000
 80083a8:	43480000 	.word	0x43480000
 80083ac:	43700000 	.word	0x43700000
 80083b0:	437a0000 	.word	0x437a0000
 80083b4:	43c80000 	.word	0x43c80000
 80083b8:	43f00000 	.word	0x43f00000
 80083bc:	43fa0000 	.word	0x43fa0000
 80083c0:	44480000 	.word	0x44480000
 80083c4:	44700000 	.word	0x44700000
 80083c8:	447a0000 	.word	0x447a0000
 80083cc:	44c80000 	.word	0x44c80000
 80083d0:	44f00000 	.word	0x44f00000
 80083d4:	44fa0000 	.word	0x44fa0000
 80083d8:	45480000 	.word	0x45480000
 80083dc:	45700000 	.word	0x45700000
 80083e0:	457a0000 	.word	0x457a0000
 80083e4:	45c80000 	.word	0x45c80000
 80083e8:	45f00000 	.word	0x45f00000
 80083ec:	45fa0000 	.word	0x45fa0000

080083f0 <LSM6DSV16X_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->acc_is_enabled == 1U)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008402:	2b01      	cmp	r3, #1
 8008404:	d106      	bne.n	8008414 <LSM6DSV16X_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8008406:	ed97 0a00 	vldr	s0, [r7]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fc52 	bl	8008cb4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>
 8008410:	4603      	mov	r3, r0
 8008412:	e005      	b.n	8008420 <LSM6DSV16X_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8008414:	ed97 0a00 	vldr	s0, [r7]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fced 	bl	8008df8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>
 800841e:	4603      	mov	r3, r0
  }
}
 8008420:	4618      	mov	r0, r3
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <LSM6DSV16X_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t *FullScale)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008432:	2300      	movs	r3, #0
 8008434:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	3320      	adds	r3, #32
 800843a:	f107 020b 	add.w	r2, r7, #11
 800843e:	4611      	mov	r1, r2
 8008440:	4618      	mov	r0, r3
 8008442:	f001 fafb 	bl	8009a3c <lsm6dsv16x_xl_full_scale_get>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <LSM6DSV16X_ACC_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800844c:	f04f 33ff 	mov.w	r3, #4294967295
 8008450:	e023      	b.n	800849a <LSM6DSV16X_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8008452:	7afb      	ldrb	r3, [r7, #11]
 8008454:	2b03      	cmp	r3, #3
 8008456:	d81b      	bhi.n	8008490 <LSM6DSV16X_ACC_GetFullScale+0x68>
 8008458:	a201      	add	r2, pc, #4	@ (adr r2, 8008460 <LSM6DSV16X_ACC_GetFullScale+0x38>)
 800845a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845e:	bf00      	nop
 8008460:	08008471 	.word	0x08008471
 8008464:	08008479 	.word	0x08008479
 8008468:	08008481 	.word	0x08008481
 800846c:	08008489 	.word	0x08008489
  {
    case LSM6DSV16X_2g:
      *FullScale =  2;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2202      	movs	r2, #2
 8008474:	601a      	str	r2, [r3, #0]
      break;
 8008476:	e00f      	b.n	8008498 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_4g:
      *FullScale =  4;
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	2204      	movs	r2, #4
 800847c:	601a      	str	r2, [r3, #0]
      break;
 800847e:	e00b      	b.n	8008498 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_8g:
      *FullScale =  8;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	2208      	movs	r2, #8
 8008484:	601a      	str	r2, [r3, #0]
      break;
 8008486:	e007      	b.n	8008498 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_16g:
      *FullScale = 16;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	2210      	movs	r2, #16
 800848c:	601a      	str	r2, [r3, #0]
      break;
 800848e:	e003      	b.n	8008498 <LSM6DSV16X_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 8008490:	f04f 33ff 	mov.w	r3, #4294967295
 8008494:	60fb      	str	r3, [r7, #12]
      break;
 8008496:	bf00      	nop
  }

  return ret;
 8008498:	68fb      	ldr	r3, [r7, #12]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop

080084a4 <LSM6DSV16X_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_xl_full_scale_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
           : (FullScale <= 4) ? LSM6DSV16X_4g
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	dd0b      	ble.n	80084cc <LSM6DSV16X_ACC_SetFullScale+0x28>
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	2b04      	cmp	r3, #4
 80084b8:	dd06      	ble.n	80084c8 <LSM6DSV16X_ACC_SetFullScale+0x24>
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2b08      	cmp	r3, #8
 80084be:	dc01      	bgt.n	80084c4 <LSM6DSV16X_ACC_SetFullScale+0x20>
 80084c0:	2302      	movs	r3, #2
 80084c2:	e004      	b.n	80084ce <LSM6DSV16X_ACC_SetFullScale+0x2a>
 80084c4:	2303      	movs	r3, #3
 80084c6:	e002      	b.n	80084ce <LSM6DSV16X_ACC_SetFullScale+0x2a>
 80084c8:	2301      	movs	r3, #1
 80084ca:	e000      	b.n	80084ce <LSM6DSV16X_ACC_SetFullScale+0x2a>
 80084cc:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
 80084ce:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSV16X_8g
           :                    LSM6DSV16X_16g;

  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3320      	adds	r3, #32
 80084d4:	7bfa      	ldrb	r2, [r7, #15]
 80084d6:	4611      	mov	r1, r2
 80084d8:	4618      	mov	r0, r3
 80084da:	f001 fa89 	bl	80099f0 <lsm6dsv16x_xl_full_scale_set>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d002      	beq.n	80084ea <LSM6DSV16X_ACC_SetFullScale+0x46>
  {
    return LSM6DSV16X_ERROR;
 80084e4:	f04f 33ff 	mov.w	r3, #4294967295
 80084e8:	e000      	b.n	80084ec <LSM6DSV16X_ACC_SetFullScale+0x48>
  }

  return LSM6DSV16X_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <LSM6DSV16X_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	3320      	adds	r3, #32
 8008502:	f107 0208 	add.w	r2, r7, #8
 8008506:	4611      	mov	r1, r2
 8008508:	4618      	mov	r0, r3
 800850a:	f001 fb22 	bl	8009b52 <lsm6dsv16x_acceleration_raw_get>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d002      	beq.n	800851a <LSM6DSV16X_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 8008514:	f04f 33ff 	mov.w	r3, #4294967295
 8008518:	e00c      	b.n	8008534 <LSM6DSV16X_ACC_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 800851a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8008522:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800852a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <LSM6DSV16X_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *Acceleration)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8008546:	f04f 0300 	mov.w	r3, #0
 800854a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	3320      	adds	r3, #32
 8008550:	f107 0210 	add.w	r2, r7, #16
 8008554:	4611      	mov	r1, r2
 8008556:	4618      	mov	r0, r3
 8008558:	f001 fafb 	bl	8009b52 <lsm6dsv16x_acceleration_raw_get>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <LSM6DSV16X_ACC_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8008562:	f04f 33ff 	mov.w	r3, #4294967295
 8008566:	e03c      	b.n	80085e2 <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8008568:	f107 030c 	add.w	r3, r7, #12
 800856c:	4619      	mov	r1, r3
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f7ff fdb4 	bl	80080dc <LSM6DSV16X_ACC_GetSensitivity>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d002      	beq.n	8008580 <LSM6DSV16X_ACC_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 800857a:	f04f 33ff 	mov.w	r3, #4294967295
 800857e:	e030      	b.n	80085e2 <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Calculate the data */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8008580:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008584:	ee07 3a90 	vmov	s15, r3
 8008588:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800858c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008594:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008598:	ee17 2a90 	vmov	r2, s15
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80085a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085a4:	ee07 3a90 	vmov	s15, r3
 80085a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80085b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085b8:	ee17 2a90 	vmov	r2, s15
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80085c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80085c4:	ee07 3a90 	vmov	s15, r3
 80085c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80085cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80085d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085d8:	ee17 2a90 	vmov	r2, s15
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3718      	adds	r7, #24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <LSM6DSV16X_GYRO_Enable>:
  * @brief  Enable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Enable(LSM6DSV16X_Object_t *pObj)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b082      	sub	sp, #8
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d101      	bne.n	8008600 <LSM6DSV16X_GYRO_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	e014      	b.n	800862a <LSM6DSV16X_GYRO_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSV16X_OK)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f103 0220 	add.w	r2, r3, #32
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800860c:	4619      	mov	r1, r3
 800860e:	4610      	mov	r0, r2
 8008610:	f000 ffc4 	bl	800959c <lsm6dsv16x_gy_data_rate_set>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <LSM6DSV16X_GYRO_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 800861a:	f04f 33ff 	mov.w	r3, #4294967295
 800861e:	e004      	b.n	800862a <LSM6DSV16X_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <LSM6DSV16X_GYRO_Disable>:
  * @brief  Disable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Disable(LSM6DSV16X_Object_t *pObj)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b082      	sub	sp, #8
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008640:	2b00      	cmp	r3, #0
 8008642:	d101      	bne.n	8008648 <LSM6DSV16X_GYRO_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 8008644:	2300      	movs	r3, #0
 8008646:	e01f      	b.n	8008688 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSV16X_OK)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f103 0220 	add.w	r2, r3, #32
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3334      	adds	r3, #52	@ 0x34
 8008652:	4619      	mov	r1, r3
 8008654:	4610      	mov	r0, r2
 8008656:	f000 fff1 	bl	800963c <lsm6dsv16x_gy_data_rate_get>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <LSM6DSV16X_GYRO_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 8008660:	f04f 33ff 	mov.w	r3, #4294967295
 8008664:	e010      	b.n	8008688 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	3320      	adds	r3, #32
 800866a:	2100      	movs	r1, #0
 800866c:	4618      	mov	r0, r3
 800866e:	f000 ff95 	bl	800959c <lsm6dsv16x_gy_data_rate_set>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <LSM6DSV16X_GYRO_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8008678:	f04f 33ff 	mov.w	r3, #4294967295
 800867c:	e004      	b.n	8008688 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <LSM6DSV16X_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800869a:	2300      	movs	r3, #0
 800869c:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	3320      	adds	r3, #32
 80086a2:	f107 020b 	add.w	r2, r7, #11
 80086a6:	4611      	mov	r1, r2
 80086a8:	4618      	mov	r0, r3
 80086aa:	f001 f949 	bl	8009940 <lsm6dsv16x_gy_full_scale_get>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d002      	beq.n	80086ba <LSM6DSV16X_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 80086b4:	f04f 33ff 	mov.w	r3, #4294967295
 80086b8:	e03d      	b.n	8008736 <LSM6DSV16X_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale */
  switch (full_scale)
 80086ba:	7afb      	ldrb	r3, [r7, #11]
 80086bc:	2b0c      	cmp	r3, #12
 80086be:	d835      	bhi.n	800872c <LSM6DSV16X_GYRO_GetSensitivity+0x9c>
 80086c0:	a201      	add	r2, pc, #4	@ (adr r2, 80086c8 <LSM6DSV16X_GYRO_GetSensitivity+0x38>)
 80086c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c6:	bf00      	nop
 80086c8:	080086fd 	.word	0x080086fd
 80086cc:	08008705 	.word	0x08008705
 80086d0:	0800870d 	.word	0x0800870d
 80086d4:	08008715 	.word	0x08008715
 80086d8:	0800871d 	.word	0x0800871d
 80086dc:	0800872d 	.word	0x0800872d
 80086e0:	0800872d 	.word	0x0800872d
 80086e4:	0800872d 	.word	0x0800872d
 80086e8:	0800872d 	.word	0x0800872d
 80086ec:	0800872d 	.word	0x0800872d
 80086f0:	0800872d 	.word	0x0800872d
 80086f4:	0800872d 	.word	0x0800872d
 80086f8:	08008725 	.word	0x08008725
  {
    case LSM6DSV16X_125dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_125DPS;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	4a10      	ldr	r2, [pc, #64]	@ (8008740 <LSM6DSV16X_GYRO_GetSensitivity+0xb0>)
 8008700:	601a      	str	r2, [r3, #0]
      break;
 8008702:	e017      	b.n	8008734 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_250dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_250DPS;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	4a0f      	ldr	r2, [pc, #60]	@ (8008744 <LSM6DSV16X_GYRO_GetSensitivity+0xb4>)
 8008708:	601a      	str	r2, [r3, #0]
      break;
 800870a:	e013      	b.n	8008734 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_500dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_500DPS;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	4a0e      	ldr	r2, [pc, #56]	@ (8008748 <LSM6DSV16X_GYRO_GetSensitivity+0xb8>)
 8008710:	601a      	str	r2, [r3, #0]
      break;
 8008712:	e00f      	b.n	8008734 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_1000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_1000DPS;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	4a0d      	ldr	r2, [pc, #52]	@ (800874c <LSM6DSV16X_GYRO_GetSensitivity+0xbc>)
 8008718:	601a      	str	r2, [r3, #0]
      break;
 800871a:	e00b      	b.n	8008734 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_2000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_2000DPS;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	4a0c      	ldr	r2, [pc, #48]	@ (8008750 <LSM6DSV16X_GYRO_GetSensitivity+0xc0>)
 8008720:	601a      	str	r2, [r3, #0]
      break;
 8008722:	e007      	b.n	8008734 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_4000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_4000DPS;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	4a0b      	ldr	r2, [pc, #44]	@ (8008754 <LSM6DSV16X_GYRO_GetSensitivity+0xc4>)
 8008728:	601a      	str	r2, [r3, #0]
      break;
 800872a:	e003      	b.n	8008734 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    default:
      ret = LSM6DSV16X_ERROR;
 800872c:	f04f 33ff 	mov.w	r3, #4294967295
 8008730:	60fb      	str	r3, [r7, #12]
      break;
 8008732:	bf00      	nop
  }

  return ret;
 8008734:	68fb      	ldr	r3, [r7, #12]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	408c0000 	.word	0x408c0000
 8008744:	410c0000 	.word	0x410c0000
 8008748:	418c0000 	.word	0x418c0000
 800874c:	420c0000 	.word	0x420c0000
 8008750:	428c0000 	.word	0x428c0000
 8008754:	430c0000 	.word	0x430c0000

08008758 <LSM6DSV16X_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	3320      	adds	r3, #32
 800876a:	f107 020b 	add.w	r2, r7, #11
 800876e:	4611      	mov	r1, r2
 8008770:	4618      	mov	r0, r3
 8008772:	f000 ff63 	bl	800963c <lsm6dsv16x_gy_data_rate_get>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <LSM6DSV16X_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800877c:	f04f 33ff 	mov.w	r3, #4294967295
 8008780:	e0ea      	b.n	8008958 <LSM6DSV16X_GYRO_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 8008782:	7afb      	ldrb	r3, [r7, #11]
 8008784:	2b2c      	cmp	r3, #44	@ 0x2c
 8008786:	f200 80e2 	bhi.w	800894e <LSM6DSV16X_GYRO_GetOutputDataRate+0x1f6>
 800878a:	a201      	add	r2, pc, #4	@ (adr r2, 8008790 <LSM6DSV16X_GYRO_GetOutputDataRate+0x38>)
 800878c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008790:	08008845 	.word	0x08008845
 8008794:	0800884f 	.word	0x0800884f
 8008798:	08008857 	.word	0x08008857
 800879c:	08008867 	.word	0x08008867
 80087a0:	0800887f 	.word	0x0800887f
 80087a4:	08008897 	.word	0x08008897
 80087a8:	080088af 	.word	0x080088af
 80087ac:	080088c7 	.word	0x080088c7
 80087b0:	080088df 	.word	0x080088df
 80087b4:	080088f7 	.word	0x080088f7
 80087b8:	0800890f 	.word	0x0800890f
 80087bc:	08008927 	.word	0x08008927
 80087c0:	0800893f 	.word	0x0800893f
 80087c4:	0800894f 	.word	0x0800894f
 80087c8:	0800894f 	.word	0x0800894f
 80087cc:	0800894f 	.word	0x0800894f
 80087d0:	0800894f 	.word	0x0800894f
 80087d4:	0800894f 	.word	0x0800894f
 80087d8:	0800894f 	.word	0x0800894f
 80087dc:	0800886f 	.word	0x0800886f
 80087e0:	08008887 	.word	0x08008887
 80087e4:	0800889f 	.word	0x0800889f
 80087e8:	080088b7 	.word	0x080088b7
 80087ec:	080088cf 	.word	0x080088cf
 80087f0:	080088e7 	.word	0x080088e7
 80087f4:	080088ff 	.word	0x080088ff
 80087f8:	08008917 	.word	0x08008917
 80087fc:	0800892f 	.word	0x0800892f
 8008800:	08008947 	.word	0x08008947
 8008804:	0800894f 	.word	0x0800894f
 8008808:	0800894f 	.word	0x0800894f
 800880c:	0800894f 	.word	0x0800894f
 8008810:	0800894f 	.word	0x0800894f
 8008814:	0800894f 	.word	0x0800894f
 8008818:	0800894f 	.word	0x0800894f
 800881c:	0800885f 	.word	0x0800885f
 8008820:	08008877 	.word	0x08008877
 8008824:	0800888f 	.word	0x0800888f
 8008828:	080088a7 	.word	0x080088a7
 800882c:	080088bf 	.word	0x080088bf
 8008830:	080088d7 	.word	0x080088d7
 8008834:	080088ef 	.word	0x080088ef
 8008838:	08008907 	.word	0x08008907
 800883c:	0800891f 	.word	0x0800891f
 8008840:	08008937 	.word	0x08008937
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	f04f 0200 	mov.w	r2, #0
 800884a:	601a      	str	r2, [r3, #0]
      break;
 800884c:	e083      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	4a43      	ldr	r2, [pc, #268]	@ (8008960 <LSM6DSV16X_GYRO_GetOutputDataRate+0x208>)
 8008852:	601a      	str	r2, [r3, #0]
      break;
 8008854:	e07f      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	4a42      	ldr	r2, [pc, #264]	@ (8008964 <LSM6DSV16X_GYRO_GetOutputDataRate+0x20c>)
 800885a:	601a      	str	r2, [r3, #0]
      break;
 800885c:	e07b      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	4a41      	ldr	r2, [pc, #260]	@ (8008968 <LSM6DSV16X_GYRO_GetOutputDataRate+0x210>)
 8008862:	601a      	str	r2, [r3, #0]
      break;
 8008864:	e077      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	4a40      	ldr	r2, [pc, #256]	@ (800896c <LSM6DSV16X_GYRO_GetOutputDataRate+0x214>)
 800886a:	601a      	str	r2, [r3, #0]
      break;
 800886c:	e073      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	4a3f      	ldr	r2, [pc, #252]	@ (8008970 <LSM6DSV16X_GYRO_GetOutputDataRate+0x218>)
 8008872:	601a      	str	r2, [r3, #0]
      break;
 8008874:	e06f      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	4a3e      	ldr	r2, [pc, #248]	@ (8008974 <LSM6DSV16X_GYRO_GetOutputDataRate+0x21c>)
 800887a:	601a      	str	r2, [r3, #0]
      break;
 800887c:	e06b      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	4a3d      	ldr	r2, [pc, #244]	@ (8008978 <LSM6DSV16X_GYRO_GetOutputDataRate+0x220>)
 8008882:	601a      	str	r2, [r3, #0]
      break;
 8008884:	e067      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	4a3c      	ldr	r2, [pc, #240]	@ (800897c <LSM6DSV16X_GYRO_GetOutputDataRate+0x224>)
 800888a:	601a      	str	r2, [r3, #0]
      break;
 800888c:	e063      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	4a3b      	ldr	r2, [pc, #236]	@ (8008980 <LSM6DSV16X_GYRO_GetOutputDataRate+0x228>)
 8008892:	601a      	str	r2, [r3, #0]
      break;
 8008894:	e05f      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	4a3a      	ldr	r2, [pc, #232]	@ (8008984 <LSM6DSV16X_GYRO_GetOutputDataRate+0x22c>)
 800889a:	601a      	str	r2, [r3, #0]
      break;
 800889c:	e05b      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	4a39      	ldr	r2, [pc, #228]	@ (8008988 <LSM6DSV16X_GYRO_GetOutputDataRate+0x230>)
 80088a2:	601a      	str	r2, [r3, #0]
      break;
 80088a4:	e057      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	4a38      	ldr	r2, [pc, #224]	@ (800898c <LSM6DSV16X_GYRO_GetOutputDataRate+0x234>)
 80088aa:	601a      	str	r2, [r3, #0]
      break;
 80088ac:	e053      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	4a37      	ldr	r2, [pc, #220]	@ (8008990 <LSM6DSV16X_GYRO_GetOutputDataRate+0x238>)
 80088b2:	601a      	str	r2, [r3, #0]
      break;
 80088b4:	e04f      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	4a36      	ldr	r2, [pc, #216]	@ (8008994 <LSM6DSV16X_GYRO_GetOutputDataRate+0x23c>)
 80088ba:	601a      	str	r2, [r3, #0]
      break;
 80088bc:	e04b      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	4a35      	ldr	r2, [pc, #212]	@ (8008998 <LSM6DSV16X_GYRO_GetOutputDataRate+0x240>)
 80088c2:	601a      	str	r2, [r3, #0]
      break;
 80088c4:	e047      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	4a34      	ldr	r2, [pc, #208]	@ (800899c <LSM6DSV16X_GYRO_GetOutputDataRate+0x244>)
 80088ca:	601a      	str	r2, [r3, #0]
      break;
 80088cc:	e043      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	4a33      	ldr	r2, [pc, #204]	@ (80089a0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x248>)
 80088d2:	601a      	str	r2, [r3, #0]
      break;
 80088d4:	e03f      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	4a32      	ldr	r2, [pc, #200]	@ (80089a4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x24c>)
 80088da:	601a      	str	r2, [r3, #0]
      break;
 80088dc:	e03b      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	4a31      	ldr	r2, [pc, #196]	@ (80089a8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x250>)
 80088e2:	601a      	str	r2, [r3, #0]
      break;
 80088e4:	e037      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	4a30      	ldr	r2, [pc, #192]	@ (80089ac <LSM6DSV16X_GYRO_GetOutputDataRate+0x254>)
 80088ea:	601a      	str	r2, [r3, #0]
      break;
 80088ec:	e033      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	4a2f      	ldr	r2, [pc, #188]	@ (80089b0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x258>)
 80088f2:	601a      	str	r2, [r3, #0]
      break;
 80088f4:	e02f      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	4a2e      	ldr	r2, [pc, #184]	@ (80089b4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x25c>)
 80088fa:	601a      	str	r2, [r3, #0]
      break;
 80088fc:	e02b      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	4a2d      	ldr	r2, [pc, #180]	@ (80089b8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x260>)
 8008902:	601a      	str	r2, [r3, #0]
      break;
 8008904:	e027      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	4a2c      	ldr	r2, [pc, #176]	@ (80089bc <LSM6DSV16X_GYRO_GetOutputDataRate+0x264>)
 800890a:	601a      	str	r2, [r3, #0]
      break;
 800890c:	e023      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	4a2b      	ldr	r2, [pc, #172]	@ (80089c0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x268>)
 8008912:	601a      	str	r2, [r3, #0]
      break;
 8008914:	e01f      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	4a2a      	ldr	r2, [pc, #168]	@ (80089c4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x26c>)
 800891a:	601a      	str	r2, [r3, #0]
      break;
 800891c:	e01b      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	4a29      	ldr	r2, [pc, #164]	@ (80089c8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x270>)
 8008922:	601a      	str	r2, [r3, #0]
      break;
 8008924:	e017      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	4a28      	ldr	r2, [pc, #160]	@ (80089cc <LSM6DSV16X_GYRO_GetOutputDataRate+0x274>)
 800892a:	601a      	str	r2, [r3, #0]
      break;
 800892c:	e013      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	4a27      	ldr	r2, [pc, #156]	@ (80089d0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x278>)
 8008932:	601a      	str	r2, [r3, #0]
      break;
 8008934:	e00f      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	4a26      	ldr	r2, [pc, #152]	@ (80089d4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x27c>)
 800893a:	601a      	str	r2, [r3, #0]
      break;
 800893c:	e00b      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	4a25      	ldr	r2, [pc, #148]	@ (80089d8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x280>)
 8008942:	601a      	str	r2, [r3, #0]
      break;
 8008944:	e007      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	4a24      	ldr	r2, [pc, #144]	@ (80089dc <LSM6DSV16X_GYRO_GetOutputDataRate+0x284>)
 800894a:	601a      	str	r2, [r3, #0]
      break;
 800894c:	e003      	b.n	8008956 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 800894e:	f04f 33ff 	mov.w	r3, #4294967295
 8008952:	60fb      	str	r3, [r7, #12]
      break;
 8008954:	bf00      	nop
  }

  return ret;
 8008956:	68fb      	ldr	r3, [r7, #12]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	3ff00000 	.word	0x3ff00000
 8008964:	40f00000 	.word	0x40f00000
 8008968:	41480000 	.word	0x41480000
 800896c:	41700000 	.word	0x41700000
 8008970:	417a0000 	.word	0x417a0000
 8008974:	41c80000 	.word	0x41c80000
 8008978:	41f00000 	.word	0x41f00000
 800897c:	41fa0000 	.word	0x41fa0000
 8008980:	42480000 	.word	0x42480000
 8008984:	42700000 	.word	0x42700000
 8008988:	427a0000 	.word	0x427a0000
 800898c:	42c80000 	.word	0x42c80000
 8008990:	42f00000 	.word	0x42f00000
 8008994:	42fa0000 	.word	0x42fa0000
 8008998:	43480000 	.word	0x43480000
 800899c:	43700000 	.word	0x43700000
 80089a0:	437a0000 	.word	0x437a0000
 80089a4:	43c80000 	.word	0x43c80000
 80089a8:	43f00000 	.word	0x43f00000
 80089ac:	43fa0000 	.word	0x43fa0000
 80089b0:	44480000 	.word	0x44480000
 80089b4:	44700000 	.word	0x44700000
 80089b8:	447a0000 	.word	0x447a0000
 80089bc:	44c80000 	.word	0x44c80000
 80089c0:	44f00000 	.word	0x44f00000
 80089c4:	44fa0000 	.word	0x44fa0000
 80089c8:	45480000 	.word	0x45480000
 80089cc:	45700000 	.word	0x45700000
 80089d0:	457a0000 	.word	0x457a0000
 80089d4:	45c80000 	.word	0x45c80000
 80089d8:	45f00000 	.word	0x45f00000
 80089dc:	45fa0000 	.word	0x45fa0000

080089e0 <LSM6DSV16X_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->gyro_is_enabled == 1U)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d106      	bne.n	8008a04 <LSM6DSV16X_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 80089f6:	ed97 0a00 	vldr	s0, [r7]
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fa94 	bl	8008f28 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>
 8008a00:	4603      	mov	r3, r0
 8008a02:	e005      	b.n	8008a10 <LSM6DSV16X_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8008a04:	ed97 0a00 	vldr	s0, [r7]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fb23 	bl	8009054 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>
 8008a0e:	4603      	mov	r3, r0
  }
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <LSM6DSV16X_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t  *FullScale)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	3320      	adds	r3, #32
 8008a2a:	f107 020b 	add.w	r2, r7, #11
 8008a2e:	4611      	mov	r1, r2
 8008a30:	4618      	mov	r0, r3
 8008a32:	f000 ff85 	bl	8009940 <lsm6dsv16x_gy_full_scale_get>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <LSM6DSV16X_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a40:	e041      	b.n	8008ac6 <LSM6DSV16X_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 8008a42:	7afb      	ldrb	r3, [r7, #11]
 8008a44:	2b0c      	cmp	r3, #12
 8008a46:	d839      	bhi.n	8008abc <LSM6DSV16X_GYRO_GetFullScale+0xa4>
 8008a48:	a201      	add	r2, pc, #4	@ (adr r2, 8008a50 <LSM6DSV16X_GYRO_GetFullScale+0x38>)
 8008a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4e:	bf00      	nop
 8008a50:	08008a85 	.word	0x08008a85
 8008a54:	08008a8d 	.word	0x08008a8d
 8008a58:	08008a95 	.word	0x08008a95
 8008a5c:	08008a9f 	.word	0x08008a9f
 8008a60:	08008aa9 	.word	0x08008aa9
 8008a64:	08008abd 	.word	0x08008abd
 8008a68:	08008abd 	.word	0x08008abd
 8008a6c:	08008abd 	.word	0x08008abd
 8008a70:	08008abd 	.word	0x08008abd
 8008a74:	08008abd 	.word	0x08008abd
 8008a78:	08008abd 	.word	0x08008abd
 8008a7c:	08008abd 	.word	0x08008abd
 8008a80:	08008ab3 	.word	0x08008ab3
  {
    case LSM6DSV16X_125dps:
      *FullScale =  125;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	227d      	movs	r2, #125	@ 0x7d
 8008a88:	601a      	str	r2, [r3, #0]
      break;
 8008a8a:	e01b      	b.n	8008ac4 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_250dps:
      *FullScale =  250;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	22fa      	movs	r2, #250	@ 0xfa
 8008a90:	601a      	str	r2, [r3, #0]
      break;
 8008a92:	e017      	b.n	8008ac4 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_500dps:
      *FullScale =  500;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008a9a:	601a      	str	r2, [r3, #0]
      break;
 8008a9c:	e012      	b.n	8008ac4 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_1000dps:
      *FullScale = 1000;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008aa4:	601a      	str	r2, [r3, #0]
      break;
 8008aa6:	e00d      	b.n	8008ac4 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_2000dps:
      *FullScale = 2000;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8008aae:	601a      	str	r2, [r3, #0]
      break;
 8008ab0:	e008      	b.n	8008ac4 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_4000dps:
      *FullScale = 4000;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8008ab8:	601a      	str	r2, [r3, #0]
      break;
 8008aba:	e003      	b.n	8008ac4 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    default:
      ret = LSM6DSV16X_ERROR;
 8008abc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac0:	60fb      	str	r3, [r7, #12]
      break;
 8008ac2:	bf00      	nop
  }

  return ret;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop

08008ad0 <LSM6DSV16X_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
           : (FullScale <= 250)  ? LSM6DSV16X_250dps
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	2b7d      	cmp	r3, #125	@ 0x7d
 8008ade:	dd18      	ble.n	8008b12 <LSM6DSV16X_GYRO_SetFullScale+0x42>
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	2bfa      	cmp	r3, #250	@ 0xfa
 8008ae4:	dd13      	ble.n	8008b0e <LSM6DSV16X_GYRO_SetFullScale+0x3e>
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008aec:	dd0d      	ble.n	8008b0a <LSM6DSV16X_GYRO_SetFullScale+0x3a>
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008af4:	dd07      	ble.n	8008b06 <LSM6DSV16X_GYRO_SetFullScale+0x36>
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8008afc:	dc01      	bgt.n	8008b02 <LSM6DSV16X_GYRO_SetFullScale+0x32>
 8008afe:	2304      	movs	r3, #4
 8008b00:	e008      	b.n	8008b14 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008b02:	230c      	movs	r3, #12
 8008b04:	e006      	b.n	8008b14 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008b06:	2303      	movs	r3, #3
 8008b08:	e004      	b.n	8008b14 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008b0a:	2302      	movs	r3, #2
 8008b0c:	e002      	b.n	8008b14 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e000      	b.n	8008b14 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008b12:	2300      	movs	r3, #0
  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
 8008b14:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSV16X_500dps
           : (FullScale <= 1000) ? LSM6DSV16X_1000dps
           : (FullScale <= 2000) ? LSM6DSV16X_2000dps
           :                       LSM6DSV16X_4000dps;

  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	3320      	adds	r3, #32
 8008b1a:	7bfa      	ldrb	r2, [r7, #15]
 8008b1c:	4611      	mov	r1, r2
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 fee8 	bl	80098f4 <lsm6dsv16x_gy_full_scale_set>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d002      	beq.n	8008b30 <LSM6DSV16X_GYRO_SetFullScale+0x60>
  {
    return LSM6DSV16X_ERROR;
 8008b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b2e:	e000      	b.n	8008b32 <LSM6DSV16X_GYRO_SetFullScale+0x62>
  }

  return LSM6DSV16X_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <LSM6DSV16X_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b084      	sub	sp, #16
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	3320      	adds	r3, #32
 8008b48:	f107 0208 	add.w	r2, r7, #8
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 ffb2 	bl	8009ab8 <lsm6dsv16x_angular_rate_raw_get>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d002      	beq.n	8008b60 <LSM6DSV16X_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 8008b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b5e:	e00c      	b.n	8008b7a <LSM6DSV16X_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 8008b60:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8008b68:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8008b70:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <LSM6DSV16X_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *AngularRate)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b086      	sub	sp, #24
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8008b8c:	f04f 0300 	mov.w	r3, #0
 8008b90:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	3320      	adds	r3, #32
 8008b96:	f107 0210 	add.w	r2, r7, #16
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 ff8b 	bl	8009ab8 <lsm6dsv16x_angular_rate_raw_get>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <LSM6DSV16X_GYRO_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8008ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bac:	e03c      	b.n	8008c28 <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8008bae:	f107 030c 	add.w	r3, r7, #12
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f7ff fd6b 	bl	8008690 <LSM6DSV16X_GYRO_GetSensitivity>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d002      	beq.n	8008bc6 <LSM6DSV16X_GYRO_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 8008bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc4:	e030      	b.n	8008c28 <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Calculate the data */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8008bc6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008bca:	ee07 3a90 	vmov	s15, r3
 8008bce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008bd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8008bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bde:	ee17 2a90 	vmov	r2, s15
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8008be6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008bea:	ee07 3a90 	vmov	s15, r3
 8008bee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008bf2:	edd7 7a03 	vldr	s15, [r7, #12]
 8008bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bfe:	ee17 2a90 	vmov	r2, s15
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8008c06:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008c0a:	ee07 3a90 	vmov	s15, r3
 8008c0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c12:	edd7 7a03 	vldr	s15, [r7, #12]
 8008c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c1e:	ee17 2a90 	vmov	r2, s15
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3718      	adds	r7, #24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <LSM6DSV16X_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Write_Reg(LSM6DSV16X_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsv16x_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSV16X_OK)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f103 0020 	add.w	r0, r3, #32
 8008c46:	1cba      	adds	r2, r7, #2
 8008c48:	78f9      	ldrb	r1, [r7, #3]
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	f000 fae4 	bl	8009218 <lsm6dsv16x_write_reg>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d002      	beq.n	8008c5c <LSM6DSV16X_Write_Reg+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8008c56:	f04f 33ff 	mov.w	r3, #4294967295
 8008c5a:	e000      	b.n	8008c5e <LSM6DSV16X_Write_Reg+0x2e>
  }

  return LSM6DSV16X_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <LSM6DSV16X_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSV16X_MAIN_MEM_BANK, 1 - LSM6DSV16X_EMBED_FUNC_MEM_BANK, 2 - LSM6DSV16X_SENSOR_HUB_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Set_Mem_Bank(LSM6DSV16X_Object_t *pObj, uint8_t Val)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	460b      	mov	r3, r1
 8008c70:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSV16X_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_mem_bank_t reg;

  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
        : (Val == 2U) ? LSM6DSV16X_SENSOR_HUB_MEM_BANK
 8008c76:	78fb      	ldrb	r3, [r7, #3]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d006      	beq.n	8008c8a <LSM6DSV16X_Set_Mem_Bank+0x24>
 8008c7c:	78fb      	ldrb	r3, [r7, #3]
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d101      	bne.n	8008c86 <LSM6DSV16X_Set_Mem_Bank+0x20>
 8008c82:	2302      	movs	r3, #2
 8008c84:	e002      	b.n	8008c8c <LSM6DSV16X_Set_Mem_Bank+0x26>
 8008c86:	2300      	movs	r3, #0
 8008c88:	e000      	b.n	8008c8c <LSM6DSV16X_Set_Mem_Bank+0x26>
 8008c8a:	2301      	movs	r3, #1
  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
 8008c8c:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSV16X_MAIN_MEM_BANK;

  if (lsm6dsv16x_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSV16X_OK)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	3320      	adds	r3, #32
 8008c92:	7afa      	ldrb	r2, [r7, #11]
 8008c94:	4611      	mov	r1, r2
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 fadc 	bl	8009254 <lsm6dsv16x_mem_bank_set>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d002      	beq.n	8008ca8 <LSM6DSV16X_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSV16X_ERROR;
 8008ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
	...

08008cb4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
            : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8008cc0:	edd7 7a00 	vldr	s15, [r7]
 8008cc4:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8008cc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cd0:	d801      	bhi.n	8008cd6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x22>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e06e      	b.n	8008db4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008cd6:	edd7 7a00 	vldr	s15, [r7]
 8008cda:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8008cde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce6:	d801      	bhi.n	8008cec <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x38>
 8008ce8:	2302      	movs	r3, #2
 8008cea:	e063      	b.n	8008db4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008cec:	edd7 7a00 	vldr	s15, [r7]
 8008cf0:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8008cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cfc:	d801      	bhi.n	8008d02 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e058      	b.n	8008db4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d02:	edd7 7a00 	vldr	s15, [r7]
 8008d06:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008d0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d12:	d801      	bhi.n	8008d18 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x64>
 8008d14:	2304      	movs	r3, #4
 8008d16:	e04d      	b.n	8008db4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d18:	edd7 7a00 	vldr	s15, [r7]
 8008d1c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8008ddc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x128>
 8008d20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d28:	d801      	bhi.n	8008d2e <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8008d2a:	2305      	movs	r3, #5
 8008d2c:	e042      	b.n	8008db4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d2e:	edd7 7a00 	vldr	s15, [r7]
 8008d32:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8008de0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8008d36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d3e:	d801      	bhi.n	8008d44 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x90>
 8008d40:	2306      	movs	r3, #6
 8008d42:	e037      	b.n	8008db4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d44:	edd7 7a00 	vldr	s15, [r7]
 8008d48:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008de4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x130>
 8008d4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d54:	d801      	bhi.n	8008d5a <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8008d56:	2307      	movs	r3, #7
 8008d58:	e02c      	b.n	8008db4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d5a:	edd7 7a00 	vldr	s15, [r7]
 8008d5e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8008de8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x134>
 8008d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d6a:	d801      	bhi.n	8008d70 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8008d6c:	2308      	movs	r3, #8
 8008d6e:	e021      	b.n	8008db4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d70:	edd7 7a00 	vldr	s15, [r7]
 8008d74:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008dec <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x138>
 8008d78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d80:	d801      	bhi.n	8008d86 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8008d82:	2309      	movs	r3, #9
 8008d84:	e016      	b.n	8008db4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d86:	edd7 7a00 	vldr	s15, [r7]
 8008d8a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008df0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8008d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d96:	d801      	bhi.n	8008d9c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8008d98:	230a      	movs	r3, #10
 8008d9a:	e00b      	b.n	8008db4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008d9c:	edd7 7a00 	vldr	s15, [r7]
 8008da0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008df4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x140>
 8008da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dac:	d801      	bhi.n	8008db2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xfe>
 8008dae:	230b      	movs	r3, #11
 8008db0:	e000      	b.n	8008db4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008db2:	230c      	movs	r3, #12
  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8008db4:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	3320      	adds	r3, #32
 8008dba:	7bfa      	ldrb	r2, [r7, #15]
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 fa8a 	bl	80092d8 <lsm6dsv16x_xl_data_rate_set>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11c>
  {
    return LSM6DSV16X_ERROR;
 8008dca:	f04f 33ff 	mov.w	r3, #4294967295
 8008dce:	e000      	b.n	8008dd2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11e>
  }

  return LSM6DSV16X_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	42700000 	.word	0x42700000
 8008de0:	42f00000 	.word	0x42f00000
 8008de4:	43700000 	.word	0x43700000
 8008de8:	43f00000 	.word	0x43f00000
 8008dec:	44700000 	.word	0x44700000
 8008df0:	44f00000 	.word	0x44f00000
 8008df4:	45700000 	.word	0x45700000

08008df8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
                  : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8008e04:	edd7 7a00 	vldr	s15, [r7]
 8008e08:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8008e0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e14:	d801      	bhi.n	8008e1a <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x22>
 8008e16:	2301      	movs	r3, #1
 8008e18:	e06e      	b.n	8008ef8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008e1a:	edd7 7a00 	vldr	s15, [r7]
 8008e1e:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8008e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e2a:	d801      	bhi.n	8008e30 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x38>
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	e063      	b.n	8008ef8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008e30:	edd7 7a00 	vldr	s15, [r7]
 8008e34:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8008e38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e40:	d801      	bhi.n	8008e46 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8008e42:	2303      	movs	r3, #3
 8008e44:	e058      	b.n	8008ef8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008e46:	edd7 7a00 	vldr	s15, [r7]
 8008e4a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e56:	d801      	bhi.n	8008e5c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x64>
 8008e58:	2304      	movs	r3, #4
 8008e5a:	e04d      	b.n	8008ef8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008e5c:	edd7 7a00 	vldr	s15, [r7]
 8008e60:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8008f0c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x114>
 8008e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e6c:	d801      	bhi.n	8008e72 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8008e6e:	2305      	movs	r3, #5
 8008e70:	e042      	b.n	8008ef8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008e72:	edd7 7a00 	vldr	s15, [r7]
 8008e76:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008f10 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x118>
 8008e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e82:	d801      	bhi.n	8008e88 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x90>
 8008e84:	2306      	movs	r3, #6
 8008e86:	e037      	b.n	8008ef8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008e88:	edd7 7a00 	vldr	s15, [r7]
 8008e8c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8008f14 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8008e90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e98:	d801      	bhi.n	8008e9e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8008e9a:	2307      	movs	r3, #7
 8008e9c:	e02c      	b.n	8008ef8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008e9e:	edd7 7a00 	vldr	s15, [r7]
 8008ea2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008f18 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x120>
 8008ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eae:	d801      	bhi.n	8008eb4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8008eb0:	2308      	movs	r3, #8
 8008eb2:	e021      	b.n	8008ef8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008eb4:	edd7 7a00 	vldr	s15, [r7]
 8008eb8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8008f1c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x124>
 8008ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ec4:	d801      	bhi.n	8008eca <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8008ec6:	2309      	movs	r3, #9
 8008ec8:	e016      	b.n	8008ef8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008eca:	edd7 7a00 	vldr	s15, [r7]
 8008ece:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008f20 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x128>
 8008ed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eda:	d801      	bhi.n	8008ee0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8008edc:	230a      	movs	r3, #10
 8008ede:	e00b      	b.n	8008ef8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008ee0:	edd7 7a00 	vldr	s15, [r7]
 8008ee4:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8008f24 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x12c>
 8008ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef0:	d801      	bhi.n	8008ef6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xfe>
 8008ef2:	230b      	movs	r3, #11
 8008ef4:	e000      	b.n	8008ef8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008ef6:	230c      	movs	r3, #12
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                  : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                  : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                  :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	42700000 	.word	0x42700000
 8008f10:	42f00000 	.word	0x42f00000
 8008f14:	43700000 	.word	0x43700000
 8008f18:	43f00000 	.word	0x43f00000
 8008f1c:	44700000 	.word	0x44700000
 8008f20:	44f00000 	.word	0x44f00000
 8008f24:	45700000 	.word	0x45700000

08008f28 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
            : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 8008f34:	edd7 7a00 	vldr	s15, [r7]
 8008f38:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8008f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f44:	d801      	bhi.n	8008f4a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8008f46:	2302      	movs	r3, #2
 8008f48:	e063      	b.n	8009012 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008f4a:	edd7 7a00 	vldr	s15, [r7]
 8008f4e:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8008f52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f5a:	d801      	bhi.n	8008f60 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e058      	b.n	8009012 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008f60:	edd7 7a00 	vldr	s15, [r7]
 8008f64:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f70:	d801      	bhi.n	8008f76 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8008f72:	2304      	movs	r3, #4
 8008f74:	e04d      	b.n	8009012 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008f76:	edd7 7a00 	vldr	s15, [r7]
 8008f7a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8009038 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8008f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f86:	d801      	bhi.n	8008f8c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8008f88:	2305      	movs	r3, #5
 8008f8a:	e042      	b.n	8009012 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008f8c:	edd7 7a00 	vldr	s15, [r7]
 8008f90:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800903c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8008f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f9c:	d801      	bhi.n	8008fa2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8008f9e:	2306      	movs	r3, #6
 8008fa0:	e037      	b.n	8009012 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008fa2:	edd7 7a00 	vldr	s15, [r7]
 8008fa6:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009040 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x118>
 8008faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb2:	d801      	bhi.n	8008fb8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8008fb4:	2307      	movs	r3, #7
 8008fb6:	e02c      	b.n	8009012 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008fb8:	edd7 7a00 	vldr	s15, [r7]
 8008fbc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8009044 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x11c>
 8008fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc8:	d801      	bhi.n	8008fce <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8008fca:	2308      	movs	r3, #8
 8008fcc:	e021      	b.n	8009012 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008fce:	edd7 7a00 	vldr	s15, [r7]
 8008fd2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009048 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x120>
 8008fd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fde:	d801      	bhi.n	8008fe4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8008fe0:	2309      	movs	r3, #9
 8008fe2:	e016      	b.n	8009012 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008fe4:	edd7 7a00 	vldr	s15, [r7]
 8008fe8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800904c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x124>
 8008fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff4:	d801      	bhi.n	8008ffa <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8008ff6:	230a      	movs	r3, #10
 8008ff8:	e00b      	b.n	8009012 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008ffa:	edd7 7a00 	vldr	s15, [r7]
 8008ffe:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009050 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x128>
 8009002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800900a:	d801      	bhi.n	8009010 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xe8>
 800900c:	230b      	movs	r3, #11
 800900e:	e000      	b.n	8009012 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009010:	230c      	movs	r3, #12
  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8009012:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	3320      	adds	r3, #32
 8009018:	7bfa      	ldrb	r2, [r7, #15]
 800901a:	4611      	mov	r1, r2
 800901c:	4618      	mov	r0, r3
 800901e:	f000 fabd 	bl	800959c <lsm6dsv16x_gy_data_rate_set>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d002      	beq.n	800902e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSV16X_ERROR;
 8009028:	f04f 33ff 	mov.w	r3, #4294967295
 800902c:	e000      	b.n	8009030 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSV16X_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	42700000 	.word	0x42700000
 800903c:	42f00000 	.word	0x42f00000
 8009040:	43700000 	.word	0x43700000
 8009044:	43f00000 	.word	0x43f00000
 8009048:	44700000 	.word	0x44700000
 800904c:	44f00000 	.word	0x44f00000
 8009050:	45700000 	.word	0x45700000

08009054 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
                   : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 8009060:	edd7 7a00 	vldr	s15, [r7]
 8009064:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8009068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800906c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009070:	d801      	bhi.n	8009076 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8009072:	2302      	movs	r3, #2
 8009074:	e063      	b.n	800913e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009076:	edd7 7a00 	vldr	s15, [r7]
 800907a:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800907e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009086:	d801      	bhi.n	800908c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8009088:	2303      	movs	r3, #3
 800908a:	e058      	b.n	800913e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800908c:	edd7 7a00 	vldr	s15, [r7]
 8009090:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8009094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800909c:	d801      	bhi.n	80090a2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800909e:	2304      	movs	r3, #4
 80090a0:	e04d      	b.n	800913e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80090a2:	edd7 7a00 	vldr	s15, [r7]
 80090a6:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8009154 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x100>
 80090aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090b2:	d801      	bhi.n	80090b8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80090b4:	2305      	movs	r3, #5
 80090b6:	e042      	b.n	800913e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80090b8:	edd7 7a00 	vldr	s15, [r7]
 80090bc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009158 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x104>
 80090c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c8:	d801      	bhi.n	80090ce <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80090ca:	2306      	movs	r3, #6
 80090cc:	e037      	b.n	800913e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80090ce:	edd7 7a00 	vldr	s15, [r7]
 80090d2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800915c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x108>
 80090d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090de:	d801      	bhi.n	80090e4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80090e0:	2307      	movs	r3, #7
 80090e2:	e02c      	b.n	800913e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80090e4:	edd7 7a00 	vldr	s15, [r7]
 80090e8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009160 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x10c>
 80090ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090f4:	d801      	bhi.n	80090fa <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80090f6:	2308      	movs	r3, #8
 80090f8:	e021      	b.n	800913e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80090fa:	edd7 7a00 	vldr	s15, [r7]
 80090fe:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009164 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x110>
 8009102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800910a:	d801      	bhi.n	8009110 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 800910c:	2309      	movs	r3, #9
 800910e:	e016      	b.n	800913e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009110:	edd7 7a00 	vldr	s15, [r7]
 8009114:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009168 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x114>
 8009118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800911c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009120:	d801      	bhi.n	8009126 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8009122:	230a      	movs	r3, #10
 8009124:	e00b      	b.n	800913e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009126:	edd7 7a00 	vldr	s15, [r7]
 800912a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800916c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x118>
 800912e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009136:	d801      	bhi.n	800913c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8009138:	230b      	movs	r3, #11
 800913a:	e000      	b.n	800913e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800913c:	230c      	movs	r3, #12
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                   : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                   : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                   :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	370c      	adds	r7, #12
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	42700000 	.word	0x42700000
 8009158:	42f00000 	.word	0x42f00000
 800915c:	43700000 	.word	0x43700000
 8009160:	43f00000 	.word	0x43f00000
 8009164:	44700000 	.word	0x44700000
 8009168:	44f00000 	.word	0x44f00000
 800916c:	45700000 	.word	0x45700000

08009170 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009170:	b590      	push	{r4, r7, lr}
 8009172:	b087      	sub	sp, #28
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	607a      	str	r2, [r7, #4]
 800917a:	461a      	mov	r2, r3
 800917c:	460b      	mov	r3, r1
 800917e:	72fb      	strb	r3, [r7, #11]
 8009180:	4613      	mov	r3, r2
 8009182:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	695c      	ldr	r4, [r3, #20]
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	7b1b      	ldrb	r3, [r3, #12]
 8009190:	4618      	mov	r0, r3
 8009192:	7afb      	ldrb	r3, [r7, #11]
 8009194:	b299      	uxth	r1, r3
 8009196:	893b      	ldrh	r3, [r7, #8]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	47a0      	blx	r4
 800919c:	4603      	mov	r3, r0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	371c      	adds	r7, #28
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd90      	pop	{r4, r7, pc}

080091a6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80091a6:	b590      	push	{r4, r7, lr}
 80091a8:	b087      	sub	sp, #28
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	60f8      	str	r0, [r7, #12]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	461a      	mov	r2, r3
 80091b2:	460b      	mov	r3, r1
 80091b4:	72fb      	strb	r3, [r7, #11]
 80091b6:	4613      	mov	r3, r2
 80091b8:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	691c      	ldr	r4, [r3, #16]
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	7b1b      	ldrb	r3, [r3, #12]
 80091c6:	4618      	mov	r0, r3
 80091c8:	7afb      	ldrb	r3, [r7, #11]
 80091ca:	b299      	uxth	r1, r3
 80091cc:	893b      	ldrh	r3, [r7, #8]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	47a0      	blx	r4
 80091d2:	4603      	mov	r3, r0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	371c      	adds	r7, #28
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd90      	pop	{r4, r7, pc}

080091dc <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 80091dc:	b590      	push	{r4, r7, lr}
 80091de:	b087      	sub	sp, #28
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	607a      	str	r2, [r7, #4]
 80091e6:	461a      	mov	r2, r3
 80091e8:	460b      	mov	r3, r1
 80091ea:	72fb      	strb	r3, [r7, #11]
 80091ec:	4613      	mov	r3, r2
 80091ee:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d102      	bne.n	80091fc <lsm6dsv16x_read_reg+0x20>
  {
    return -1;
 80091f6:	f04f 33ff 	mov.w	r3, #4294967295
 80091fa:	e009      	b.n	8009210 <lsm6dsv16x_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	685c      	ldr	r4, [r3, #4]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	68d8      	ldr	r0, [r3, #12]
 8009204:	893b      	ldrh	r3, [r7, #8]
 8009206:	7af9      	ldrb	r1, [r7, #11]
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	47a0      	blx	r4
 800920c:	6178      	str	r0, [r7, #20]

  return ret;
 800920e:	697b      	ldr	r3, [r7, #20]
}
 8009210:	4618      	mov	r0, r3
 8009212:	371c      	adds	r7, #28
 8009214:	46bd      	mov	sp, r7
 8009216:	bd90      	pop	{r4, r7, pc}

08009218 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8009218:	b590      	push	{r4, r7, lr}
 800921a:	b087      	sub	sp, #28
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	607a      	str	r2, [r7, #4]
 8009222:	461a      	mov	r2, r3
 8009224:	460b      	mov	r3, r1
 8009226:	72fb      	strb	r3, [r7, #11]
 8009228:	4613      	mov	r3, r2
 800922a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d102      	bne.n	8009238 <lsm6dsv16x_write_reg+0x20>
  {
    return -1;
 8009232:	f04f 33ff 	mov.w	r3, #4294967295
 8009236:	e009      	b.n	800924c <lsm6dsv16x_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681c      	ldr	r4, [r3, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	68d8      	ldr	r0, [r3, #12]
 8009240:	893b      	ldrh	r3, [r7, #8]
 8009242:	7af9      	ldrb	r1, [r7, #11]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	47a0      	blx	r4
 8009248:	6178      	str	r0, [r7, #20]

  return ret;
 800924a:	697b      	ldr	r3, [r7, #20]
}
 800924c:	4618      	mov	r0, r3
 800924e:	371c      	adds	r7, #28
 8009250:	46bd      	mov	sp, r7
 8009252:	bd90      	pop	{r4, r7, pc}

08009254 <lsm6dsv16x_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dsv16x_mem_bank_t val)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	460b      	mov	r3, r1
 800925e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8009260:	f107 0208 	add.w	r2, r7, #8
 8009264:	2301      	movs	r3, #1
 8009266:	2101      	movs	r1, #1
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7ff ffb7 	bl	80091dc <lsm6dsv16x_read_reg>
 800926e:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <lsm6dsv16x_mem_bank_set+0x26>
  {
    return ret;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	e019      	b.n	80092ae <lsm6dsv16x_mem_bank_set+0x5a>
  }

  func_cfg_access.shub_reg_access = ((uint8_t)val & 0x02U) >> 1;
 800927a:	78fb      	ldrb	r3, [r7, #3]
 800927c:	085b      	lsrs	r3, r3, #1
 800927e:	f003 0301 	and.w	r3, r3, #1
 8009282:	b2da      	uxtb	r2, r3
 8009284:	7a3b      	ldrb	r3, [r7, #8]
 8009286:	f362 1386 	bfi	r3, r2, #6, #1
 800928a:	723b      	strb	r3, [r7, #8]
  func_cfg_access.emb_func_reg_access = (uint8_t)val & 0x01U;
 800928c:	78fb      	ldrb	r3, [r7, #3]
 800928e:	f003 0301 	and.w	r3, r3, #1
 8009292:	b2da      	uxtb	r2, r3
 8009294:	7a3b      	ldrb	r3, [r7, #8]
 8009296:	f362 13c7 	bfi	r3, r2, #7, #1
 800929a:	723b      	strb	r3, [r7, #8]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 800929c:	f107 0208 	add.w	r2, r7, #8
 80092a0:	2301      	movs	r3, #1
 80092a2:	2101      	movs	r1, #1
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f7ff ffb7 	bl	8009218 <lsm6dsv16x_write_reg>
 80092aa:	60f8      	str	r0, [r7, #12]

  return ret;
 80092ac:	68fb      	ldr	r3, [r7, #12]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b084      	sub	sp, #16
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 80092c0:	2301      	movs	r3, #1
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	210f      	movs	r1, #15
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7ff ff88 	bl	80091dc <lsm6dsv16x_read_reg>
 80092cc:	60f8      	str	r0, [r7, #12]

  return ret;
 80092ce:	68fb      	ldr	r3, [r7, #12]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b086      	sub	sp, #24
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	460b      	mov	r3, r1
 80092e2:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80092e4:	f107 0210 	add.w	r2, r7, #16
 80092e8:	2301      	movs	r3, #1
 80092ea:	2110      	movs	r1, #16
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7ff ff75 	bl	80091dc <lsm6dsv16x_read_reg>
 80092f2:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d001      	beq.n	80092fe <lsm6dsv16x_xl_data_rate_set+0x26>
  {
    return ret;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	e039      	b.n	8009372 <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 80092fe:	78fb      	ldrb	r3, [r7, #3]
 8009300:	f003 030f 	and.w	r3, r3, #15
 8009304:	b2da      	uxtb	r2, r3
 8009306:	7c3b      	ldrb	r3, [r7, #16]
 8009308:	f362 0303 	bfi	r3, r2, #0, #4
 800930c:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800930e:	f107 0210 	add.w	r2, r7, #16
 8009312:	2301      	movs	r3, #1
 8009314:	2110      	movs	r1, #16
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7ff ff7e 	bl	8009218 <lsm6dsv16x_write_reg>
 800931c:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <lsm6dsv16x_xl_data_rate_set+0x50>
  {
    return ret;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	e024      	b.n	8009372 <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 8009328:	78fb      	ldrb	r3, [r7, #3]
 800932a:	091b      	lsrs	r3, r3, #4
 800932c:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 800932e:	7cfb      	ldrb	r3, [r7, #19]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d01d      	beq.n	8009370 <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8009334:	f107 020c 	add.w	r2, r7, #12
 8009338:	2301      	movs	r3, #1
 800933a:	2162      	movs	r1, #98	@ 0x62
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f7ff ff4d 	bl	80091dc <lsm6dsv16x_read_reg>
 8009342:	4602      	mov	r2, r0
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	4413      	add	r3, r2
 8009348:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 800934a:	7cfb      	ldrb	r3, [r7, #19]
 800934c:	f003 0303 	and.w	r3, r3, #3
 8009350:	b2da      	uxtb	r2, r3
 8009352:	7b3b      	ldrb	r3, [r7, #12]
 8009354:	f362 0301 	bfi	r3, r2, #0, #2
 8009358:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800935a:	f107 020c 	add.w	r2, r7, #12
 800935e:	2301      	movs	r3, #1
 8009360:	2162      	movs	r1, #98	@ 0x62
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7ff ff58 	bl	8009218 <lsm6dsv16x_write_reg>
 8009368:	4602      	mov	r2, r0
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	4413      	add	r3, r2
 800936e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009370:	697b      	ldr	r3, [r7, #20]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3718      	adds	r7, #24
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
	...

0800937c <lsm6dsv16x_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8009386:	f107 0210 	add.w	r2, r7, #16
 800938a:	2301      	movs	r3, #1
 800938c:	2110      	movs	r1, #16
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7ff ff24 	bl	80091dc <lsm6dsv16x_read_reg>
 8009394:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8009396:	f107 020c 	add.w	r2, r7, #12
 800939a:	2301      	movs	r3, #1
 800939c:	2162      	movs	r1, #98	@ 0x62
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f7ff ff1c 	bl	80091dc <lsm6dsv16x_read_reg>
 80093a4:	4602      	mov	r2, r0
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	4413      	add	r3, r2
 80093aa:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <lsm6dsv16x_xl_data_rate_get+0x3a>
  {
    return ret;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	e0ed      	b.n	8009592 <lsm6dsv16x_xl_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 80093b6:	7b3b      	ldrb	r3, [r7, #12]
 80093b8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	74fb      	strb	r3, [r7, #19]

  switch (ctrl1.odr_xl)
 80093c0:	7c3b      	ldrb	r3, [r7, #16]
 80093c2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	2b0c      	cmp	r3, #12
 80093ca:	f200 80dd 	bhi.w	8009588 <lsm6dsv16x_xl_data_rate_get+0x20c>
 80093ce:	a201      	add	r2, pc, #4	@ (adr r2, 80093d4 <lsm6dsv16x_xl_data_rate_get+0x58>)
 80093d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d4:	08009409 	.word	0x08009409
 80093d8:	08009411 	.word	0x08009411
 80093dc:	08009419 	.word	0x08009419
 80093e0:	08009421 	.word	0x08009421
 80093e4:	08009445 	.word	0x08009445
 80093e8:	08009469 	.word	0x08009469
 80093ec:	0800948d 	.word	0x0800948d
 80093f0:	080094b1 	.word	0x080094b1
 80093f4:	080094d5 	.word	0x080094d5
 80093f8:	080094f9 	.word	0x080094f9
 80093fc:	0800951d 	.word	0x0800951d
 8009400:	08009541 	.word	0x08009541
 8009404:	08009565 	.word	0x08009565
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	2200      	movs	r2, #0
 800940c:	701a      	strb	r2, [r3, #0]
      break;
 800940e:	e0bf      	b.n	8009590 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	2201      	movs	r2, #1
 8009414:	701a      	strb	r2, [r3, #0]
      break;
 8009416:	e0bb      	b.n	8009590 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	2202      	movs	r2, #2
 800941c:	701a      	strb	r2, [r3, #0]
      break;
 800941e:	e0b7      	b.n	8009590 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 8009420:	7cfb      	ldrb	r3, [r7, #19]
 8009422:	2b01      	cmp	r3, #1
 8009424:	d005      	beq.n	8009432 <lsm6dsv16x_xl_data_rate_get+0xb6>
 8009426:	2b02      	cmp	r3, #2
 8009428:	d007      	beq.n	800943a <lsm6dsv16x_xl_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2203      	movs	r2, #3
 800942e:	701a      	strb	r2, [r3, #0]
          break;
 8009430:	e007      	b.n	8009442 <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	2213      	movs	r2, #19
 8009436:	701a      	strb	r2, [r3, #0]
          break;
 8009438:	e003      	b.n	8009442 <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2223      	movs	r2, #35	@ 0x23
 800943e:	701a      	strb	r2, [r3, #0]
          break;
 8009440:	bf00      	nop
      }
      break;
 8009442:	e0a5      	b.n	8009590 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 8009444:	7cfb      	ldrb	r3, [r7, #19]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d005      	beq.n	8009456 <lsm6dsv16x_xl_data_rate_get+0xda>
 800944a:	2b02      	cmp	r3, #2
 800944c:	d007      	beq.n	800945e <lsm6dsv16x_xl_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	2204      	movs	r2, #4
 8009452:	701a      	strb	r2, [r3, #0]
          break;
 8009454:	e007      	b.n	8009466 <lsm6dsv16x_xl_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2214      	movs	r2, #20
 800945a:	701a      	strb	r2, [r3, #0]
          break;
 800945c:	e003      	b.n	8009466 <lsm6dsv16x_xl_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2224      	movs	r2, #36	@ 0x24
 8009462:	701a      	strb	r2, [r3, #0]
          break;
 8009464:	bf00      	nop
      }
      break;
 8009466:	e093      	b.n	8009590 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 8009468:	7cfb      	ldrb	r3, [r7, #19]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d005      	beq.n	800947a <lsm6dsv16x_xl_data_rate_get+0xfe>
 800946e:	2b02      	cmp	r3, #2
 8009470:	d007      	beq.n	8009482 <lsm6dsv16x_xl_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2205      	movs	r2, #5
 8009476:	701a      	strb	r2, [r3, #0]
          break;
 8009478:	e007      	b.n	800948a <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	2215      	movs	r2, #21
 800947e:	701a      	strb	r2, [r3, #0]
          break;
 8009480:	e003      	b.n	800948a <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	2225      	movs	r2, #37	@ 0x25
 8009486:	701a      	strb	r2, [r3, #0]
          break;
 8009488:	bf00      	nop
      }
      break;
 800948a:	e081      	b.n	8009590 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 800948c:	7cfb      	ldrb	r3, [r7, #19]
 800948e:	2b01      	cmp	r3, #1
 8009490:	d005      	beq.n	800949e <lsm6dsv16x_xl_data_rate_get+0x122>
 8009492:	2b02      	cmp	r3, #2
 8009494:	d007      	beq.n	80094a6 <lsm6dsv16x_xl_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	2206      	movs	r2, #6
 800949a:	701a      	strb	r2, [r3, #0]
          break;
 800949c:	e007      	b.n	80094ae <lsm6dsv16x_xl_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	2216      	movs	r2, #22
 80094a2:	701a      	strb	r2, [r3, #0]
          break;
 80094a4:	e003      	b.n	80094ae <lsm6dsv16x_xl_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	2226      	movs	r2, #38	@ 0x26
 80094aa:	701a      	strb	r2, [r3, #0]
          break;
 80094ac:	bf00      	nop
      }
      break;
 80094ae:	e06f      	b.n	8009590 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 80094b0:	7cfb      	ldrb	r3, [r7, #19]
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d005      	beq.n	80094c2 <lsm6dsv16x_xl_data_rate_get+0x146>
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d007      	beq.n	80094ca <lsm6dsv16x_xl_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	2207      	movs	r2, #7
 80094be:	701a      	strb	r2, [r3, #0]
          break;
 80094c0:	e007      	b.n	80094d2 <lsm6dsv16x_xl_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	2217      	movs	r2, #23
 80094c6:	701a      	strb	r2, [r3, #0]
          break;
 80094c8:	e003      	b.n	80094d2 <lsm6dsv16x_xl_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2227      	movs	r2, #39	@ 0x27
 80094ce:	701a      	strb	r2, [r3, #0]
          break;
 80094d0:	bf00      	nop
      }
      break;
 80094d2:	e05d      	b.n	8009590 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 80094d4:	7cfb      	ldrb	r3, [r7, #19]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d005      	beq.n	80094e6 <lsm6dsv16x_xl_data_rate_get+0x16a>
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d007      	beq.n	80094ee <lsm6dsv16x_xl_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2208      	movs	r2, #8
 80094e2:	701a      	strb	r2, [r3, #0]
          break;
 80094e4:	e007      	b.n	80094f6 <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	2218      	movs	r2, #24
 80094ea:	701a      	strb	r2, [r3, #0]
          break;
 80094ec:	e003      	b.n	80094f6 <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	2228      	movs	r2, #40	@ 0x28
 80094f2:	701a      	strb	r2, [r3, #0]
          break;
 80094f4:	bf00      	nop
      }
      break;
 80094f6:	e04b      	b.n	8009590 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 80094f8:	7cfb      	ldrb	r3, [r7, #19]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d005      	beq.n	800950a <lsm6dsv16x_xl_data_rate_get+0x18e>
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d007      	beq.n	8009512 <lsm6dsv16x_xl_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	2209      	movs	r2, #9
 8009506:	701a      	strb	r2, [r3, #0]
          break;
 8009508:	e007      	b.n	800951a <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	2219      	movs	r2, #25
 800950e:	701a      	strb	r2, [r3, #0]
          break;
 8009510:	e003      	b.n	800951a <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	2229      	movs	r2, #41	@ 0x29
 8009516:	701a      	strb	r2, [r3, #0]
          break;
 8009518:	bf00      	nop
      }
      break;
 800951a:	e039      	b.n	8009590 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 800951c:	7cfb      	ldrb	r3, [r7, #19]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d005      	beq.n	800952e <lsm6dsv16x_xl_data_rate_get+0x1b2>
 8009522:	2b02      	cmp	r3, #2
 8009524:	d007      	beq.n	8009536 <lsm6dsv16x_xl_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	220a      	movs	r2, #10
 800952a:	701a      	strb	r2, [r3, #0]
          break;
 800952c:	e007      	b.n	800953e <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	221a      	movs	r2, #26
 8009532:	701a      	strb	r2, [r3, #0]
          break;
 8009534:	e003      	b.n	800953e <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	222a      	movs	r2, #42	@ 0x2a
 800953a:	701a      	strb	r2, [r3, #0]
          break;
 800953c:	bf00      	nop
      }
      break;
 800953e:	e027      	b.n	8009590 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 8009540:	7cfb      	ldrb	r3, [r7, #19]
 8009542:	2b01      	cmp	r3, #1
 8009544:	d005      	beq.n	8009552 <lsm6dsv16x_xl_data_rate_get+0x1d6>
 8009546:	2b02      	cmp	r3, #2
 8009548:	d007      	beq.n	800955a <lsm6dsv16x_xl_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	220b      	movs	r2, #11
 800954e:	701a      	strb	r2, [r3, #0]
          break;
 8009550:	e007      	b.n	8009562 <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	221b      	movs	r2, #27
 8009556:	701a      	strb	r2, [r3, #0]
          break;
 8009558:	e003      	b.n	8009562 <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	222b      	movs	r2, #43	@ 0x2b
 800955e:	701a      	strb	r2, [r3, #0]
          break;
 8009560:	bf00      	nop
      }
      break;
 8009562:	e015      	b.n	8009590 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 8009564:	7cfb      	ldrb	r3, [r7, #19]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d005      	beq.n	8009576 <lsm6dsv16x_xl_data_rate_get+0x1fa>
 800956a:	2b02      	cmp	r3, #2
 800956c:	d007      	beq.n	800957e <lsm6dsv16x_xl_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	220c      	movs	r2, #12
 8009572:	701a      	strb	r2, [r3, #0]
          break;
 8009574:	e007      	b.n	8009586 <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	221c      	movs	r2, #28
 800957a:	701a      	strb	r2, [r3, #0]
          break;
 800957c:	e003      	b.n	8009586 <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	222c      	movs	r2, #44	@ 0x2c
 8009582:	701a      	strb	r2, [r3, #0]
          break;
 8009584:	bf00      	nop
      }
      break;
 8009586:	e003      	b.n	8009590 <lsm6dsv16x_xl_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	2200      	movs	r2, #0
 800958c:	701a      	strb	r2, [r3, #0]
      break;
 800958e:	bf00      	nop
  }

  return ret;
 8009590:	697b      	ldr	r3, [r7, #20]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop

0800959c <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	460b      	mov	r3, r1
 80095a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80095a8:	f107 0210 	add.w	r2, r7, #16
 80095ac:	2301      	movs	r3, #1
 80095ae:	2111      	movs	r1, #17
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f7ff fe13 	bl	80091dc <lsm6dsv16x_read_reg>
 80095b6:	6178      	str	r0, [r7, #20]

  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 80095b8:	78fb      	ldrb	r3, [r7, #3]
 80095ba:	f003 030f 	and.w	r3, r3, #15
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	7c3b      	ldrb	r3, [r7, #16]
 80095c2:	f362 0303 	bfi	r3, r2, #0, #4
 80095c6:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80095c8:	f107 0210 	add.w	r2, r7, #16
 80095cc:	2301      	movs	r3, #1
 80095ce:	2111      	movs	r1, #17
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f7ff fe21 	bl	8009218 <lsm6dsv16x_write_reg>
 80095d6:	4602      	mov	r2, r0
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	4413      	add	r3, r2
 80095dc:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d001      	beq.n	80095e8 <lsm6dsv16x_gy_data_rate_set+0x4c>
  {
    return ret;
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	e024      	b.n	8009632 <lsm6dsv16x_gy_data_rate_set+0x96>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 80095e8:	78fb      	ldrb	r3, [r7, #3]
 80095ea:	091b      	lsrs	r3, r3, #4
 80095ec:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 80095ee:	7cfb      	ldrb	r3, [r7, #19]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d01d      	beq.n	8009630 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80095f4:	f107 020c 	add.w	r2, r7, #12
 80095f8:	2301      	movs	r3, #1
 80095fa:	2162      	movs	r1, #98	@ 0x62
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7ff fded 	bl	80091dc <lsm6dsv16x_read_reg>
 8009602:	4602      	mov	r2, r0
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	4413      	add	r3, r2
 8009608:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 800960a:	7cfb      	ldrb	r3, [r7, #19]
 800960c:	f003 0303 	and.w	r3, r3, #3
 8009610:	b2da      	uxtb	r2, r3
 8009612:	7b3b      	ldrb	r3, [r7, #12]
 8009614:	f362 0301 	bfi	r3, r2, #0, #2
 8009618:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800961a:	f107 020c 	add.w	r2, r7, #12
 800961e:	2301      	movs	r3, #1
 8009620:	2162      	movs	r1, #98	@ 0x62
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f7ff fdf8 	bl	8009218 <lsm6dsv16x_write_reg>
 8009628:	4602      	mov	r2, r0
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	4413      	add	r3, r2
 800962e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009630:	697b      	ldr	r3, [r7, #20]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3718      	adds	r7, #24
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
	...

0800963c <lsm6dsv16x_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8009646:	f107 0210 	add.w	r2, r7, #16
 800964a:	2301      	movs	r3, #1
 800964c:	2111      	movs	r1, #17
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7ff fdc4 	bl	80091dc <lsm6dsv16x_read_reg>
 8009654:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8009656:	f107 020c 	add.w	r2, r7, #12
 800965a:	2301      	movs	r3, #1
 800965c:	2162      	movs	r1, #98	@ 0x62
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f7ff fdbc 	bl	80091dc <lsm6dsv16x_read_reg>
 8009664:	4602      	mov	r2, r0
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	4413      	add	r3, r2
 800966a:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <lsm6dsv16x_gy_data_rate_get+0x3a>
  {
    return ret;
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	e0ed      	b.n	8009852 <lsm6dsv16x_gy_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 8009676:	7b3b      	ldrb	r3, [r7, #12]
 8009678:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800967c:	b2db      	uxtb	r3, r3
 800967e:	74fb      	strb	r3, [r7, #19]

  switch (ctrl2.odr_g)
 8009680:	7c3b      	ldrb	r3, [r7, #16]
 8009682:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009686:	b2db      	uxtb	r3, r3
 8009688:	2b0c      	cmp	r3, #12
 800968a:	f200 80dd 	bhi.w	8009848 <lsm6dsv16x_gy_data_rate_get+0x20c>
 800968e:	a201      	add	r2, pc, #4	@ (adr r2, 8009694 <lsm6dsv16x_gy_data_rate_get+0x58>)
 8009690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009694:	080096c9 	.word	0x080096c9
 8009698:	080096d1 	.word	0x080096d1
 800969c:	080096d9 	.word	0x080096d9
 80096a0:	080096e1 	.word	0x080096e1
 80096a4:	08009705 	.word	0x08009705
 80096a8:	08009729 	.word	0x08009729
 80096ac:	0800974d 	.word	0x0800974d
 80096b0:	08009771 	.word	0x08009771
 80096b4:	08009795 	.word	0x08009795
 80096b8:	080097b9 	.word	0x080097b9
 80096bc:	080097dd 	.word	0x080097dd
 80096c0:	08009801 	.word	0x08009801
 80096c4:	08009825 	.word	0x08009825
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	2200      	movs	r2, #0
 80096cc:	701a      	strb	r2, [r3, #0]
      break;
 80096ce:	e0bf      	b.n	8009850 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	2201      	movs	r2, #1
 80096d4:	701a      	strb	r2, [r3, #0]
      break;
 80096d6:	e0bb      	b.n	8009850 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	2202      	movs	r2, #2
 80096dc:	701a      	strb	r2, [r3, #0]
      break;
 80096de:	e0b7      	b.n	8009850 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 80096e0:	7cfb      	ldrb	r3, [r7, #19]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d005      	beq.n	80096f2 <lsm6dsv16x_gy_data_rate_get+0xb6>
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d007      	beq.n	80096fa <lsm6dsv16x_gy_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	2203      	movs	r2, #3
 80096ee:	701a      	strb	r2, [r3, #0]
          break;
 80096f0:	e007      	b.n	8009702 <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2213      	movs	r2, #19
 80096f6:	701a      	strb	r2, [r3, #0]
          break;
 80096f8:	e003      	b.n	8009702 <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	2223      	movs	r2, #35	@ 0x23
 80096fe:	701a      	strb	r2, [r3, #0]
          break;
 8009700:	bf00      	nop
      }
      break;
 8009702:	e0a5      	b.n	8009850 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 8009704:	7cfb      	ldrb	r3, [r7, #19]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d005      	beq.n	8009716 <lsm6dsv16x_gy_data_rate_get+0xda>
 800970a:	2b02      	cmp	r3, #2
 800970c:	d007      	beq.n	800971e <lsm6dsv16x_gy_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	2204      	movs	r2, #4
 8009712:	701a      	strb	r2, [r3, #0]
          break;
 8009714:	e007      	b.n	8009726 <lsm6dsv16x_gy_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	2214      	movs	r2, #20
 800971a:	701a      	strb	r2, [r3, #0]
          break;
 800971c:	e003      	b.n	8009726 <lsm6dsv16x_gy_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	2224      	movs	r2, #36	@ 0x24
 8009722:	701a      	strb	r2, [r3, #0]
          break;
 8009724:	bf00      	nop
      }
      break;
 8009726:	e093      	b.n	8009850 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 8009728:	7cfb      	ldrb	r3, [r7, #19]
 800972a:	2b01      	cmp	r3, #1
 800972c:	d005      	beq.n	800973a <lsm6dsv16x_gy_data_rate_get+0xfe>
 800972e:	2b02      	cmp	r3, #2
 8009730:	d007      	beq.n	8009742 <lsm6dsv16x_gy_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	2205      	movs	r2, #5
 8009736:	701a      	strb	r2, [r3, #0]
          break;
 8009738:	e007      	b.n	800974a <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2215      	movs	r2, #21
 800973e:	701a      	strb	r2, [r3, #0]
          break;
 8009740:	e003      	b.n	800974a <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	2225      	movs	r2, #37	@ 0x25
 8009746:	701a      	strb	r2, [r3, #0]
          break;
 8009748:	bf00      	nop
      }
      break;
 800974a:	e081      	b.n	8009850 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 800974c:	7cfb      	ldrb	r3, [r7, #19]
 800974e:	2b01      	cmp	r3, #1
 8009750:	d005      	beq.n	800975e <lsm6dsv16x_gy_data_rate_get+0x122>
 8009752:	2b02      	cmp	r3, #2
 8009754:	d007      	beq.n	8009766 <lsm6dsv16x_gy_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2206      	movs	r2, #6
 800975a:	701a      	strb	r2, [r3, #0]
          break;
 800975c:	e007      	b.n	800976e <lsm6dsv16x_gy_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2216      	movs	r2, #22
 8009762:	701a      	strb	r2, [r3, #0]
          break;
 8009764:	e003      	b.n	800976e <lsm6dsv16x_gy_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	2226      	movs	r2, #38	@ 0x26
 800976a:	701a      	strb	r2, [r3, #0]
          break;
 800976c:	bf00      	nop
      }
      break;
 800976e:	e06f      	b.n	8009850 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 8009770:	7cfb      	ldrb	r3, [r7, #19]
 8009772:	2b01      	cmp	r3, #1
 8009774:	d005      	beq.n	8009782 <lsm6dsv16x_gy_data_rate_get+0x146>
 8009776:	2b02      	cmp	r3, #2
 8009778:	d007      	beq.n	800978a <lsm6dsv16x_gy_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	2207      	movs	r2, #7
 800977e:	701a      	strb	r2, [r3, #0]
          break;
 8009780:	e007      	b.n	8009792 <lsm6dsv16x_gy_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2217      	movs	r2, #23
 8009786:	701a      	strb	r2, [r3, #0]
          break;
 8009788:	e003      	b.n	8009792 <lsm6dsv16x_gy_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	2227      	movs	r2, #39	@ 0x27
 800978e:	701a      	strb	r2, [r3, #0]
          break;
 8009790:	bf00      	nop
      }
      break;
 8009792:	e05d      	b.n	8009850 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 8009794:	7cfb      	ldrb	r3, [r7, #19]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d005      	beq.n	80097a6 <lsm6dsv16x_gy_data_rate_get+0x16a>
 800979a:	2b02      	cmp	r3, #2
 800979c:	d007      	beq.n	80097ae <lsm6dsv16x_gy_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	2208      	movs	r2, #8
 80097a2:	701a      	strb	r2, [r3, #0]
          break;
 80097a4:	e007      	b.n	80097b6 <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2218      	movs	r2, #24
 80097aa:	701a      	strb	r2, [r3, #0]
          break;
 80097ac:	e003      	b.n	80097b6 <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	2228      	movs	r2, #40	@ 0x28
 80097b2:	701a      	strb	r2, [r3, #0]
          break;
 80097b4:	bf00      	nop
      }
      break;
 80097b6:	e04b      	b.n	8009850 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 80097b8:	7cfb      	ldrb	r3, [r7, #19]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d005      	beq.n	80097ca <lsm6dsv16x_gy_data_rate_get+0x18e>
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d007      	beq.n	80097d2 <lsm6dsv16x_gy_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	2209      	movs	r2, #9
 80097c6:	701a      	strb	r2, [r3, #0]
          break;
 80097c8:	e007      	b.n	80097da <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	2219      	movs	r2, #25
 80097ce:	701a      	strb	r2, [r3, #0]
          break;
 80097d0:	e003      	b.n	80097da <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	2229      	movs	r2, #41	@ 0x29
 80097d6:	701a      	strb	r2, [r3, #0]
          break;
 80097d8:	bf00      	nop
      }
      break;
 80097da:	e039      	b.n	8009850 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 80097dc:	7cfb      	ldrb	r3, [r7, #19]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d005      	beq.n	80097ee <lsm6dsv16x_gy_data_rate_get+0x1b2>
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d007      	beq.n	80097f6 <lsm6dsv16x_gy_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	220a      	movs	r2, #10
 80097ea:	701a      	strb	r2, [r3, #0]
          break;
 80097ec:	e007      	b.n	80097fe <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	221a      	movs	r2, #26
 80097f2:	701a      	strb	r2, [r3, #0]
          break;
 80097f4:	e003      	b.n	80097fe <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	222a      	movs	r2, #42	@ 0x2a
 80097fa:	701a      	strb	r2, [r3, #0]
          break;
 80097fc:	bf00      	nop
      }
      break;
 80097fe:	e027      	b.n	8009850 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 8009800:	7cfb      	ldrb	r3, [r7, #19]
 8009802:	2b01      	cmp	r3, #1
 8009804:	d005      	beq.n	8009812 <lsm6dsv16x_gy_data_rate_get+0x1d6>
 8009806:	2b02      	cmp	r3, #2
 8009808:	d007      	beq.n	800981a <lsm6dsv16x_gy_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	220b      	movs	r2, #11
 800980e:	701a      	strb	r2, [r3, #0]
          break;
 8009810:	e007      	b.n	8009822 <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	221b      	movs	r2, #27
 8009816:	701a      	strb	r2, [r3, #0]
          break;
 8009818:	e003      	b.n	8009822 <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	222b      	movs	r2, #43	@ 0x2b
 800981e:	701a      	strb	r2, [r3, #0]
          break;
 8009820:	bf00      	nop
      }
      break;
 8009822:	e015      	b.n	8009850 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 8009824:	7cfb      	ldrb	r3, [r7, #19]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d005      	beq.n	8009836 <lsm6dsv16x_gy_data_rate_get+0x1fa>
 800982a:	2b02      	cmp	r3, #2
 800982c:	d007      	beq.n	800983e <lsm6dsv16x_gy_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	220c      	movs	r2, #12
 8009832:	701a      	strb	r2, [r3, #0]
          break;
 8009834:	e007      	b.n	8009846 <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	221c      	movs	r2, #28
 800983a:	701a      	strb	r2, [r3, #0]
          break;
 800983c:	e003      	b.n	8009846 <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	222c      	movs	r2, #44	@ 0x2c
 8009842:	701a      	strb	r2, [r3, #0]
          break;
 8009844:	bf00      	nop
      }
      break;
 8009846:	e003      	b.n	8009850 <lsm6dsv16x_gy_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	2200      	movs	r2, #0
 800984c:	701a      	strb	r2, [r3, #0]
      break;
 800984e:	bf00      	nop
  }

  return ret;
 8009850:	697b      	ldr	r3, [r7, #20]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3718      	adds	r7, #24
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop

0800985c <lsm6dsv16x_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	460b      	mov	r3, r1
 8009866:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8009868:	f107 0208 	add.w	r2, r7, #8
 800986c:	2301      	movs	r3, #1
 800986e:	2112      	movs	r1, #18
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff fcb3 	bl	80091dc <lsm6dsv16x_read_reg>
 8009876:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10f      	bne.n	800989e <lsm6dsv16x_auto_increment_set+0x42>
  {
    ctrl3.if_inc = val;
 800987e:	78fb      	ldrb	r3, [r7, #3]
 8009880:	f003 0301 	and.w	r3, r3, #1
 8009884:	b2da      	uxtb	r2, r3
 8009886:	7a3b      	ldrb	r3, [r7, #8]
 8009888:	f362 0382 	bfi	r3, r2, #2, #1
 800988c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800988e:	f107 0208 	add.w	r2, r7, #8
 8009892:	2301      	movs	r3, #1
 8009894:	2112      	movs	r1, #18
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f7ff fcbe 	bl	8009218 <lsm6dsv16x_write_reg>
 800989c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800989e:	68fb      	ldr	r3, [r7, #12]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	460b      	mov	r3, r1
 80098b2:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80098b4:	f107 0208 	add.w	r2, r7, #8
 80098b8:	2301      	movs	r3, #1
 80098ba:	2112      	movs	r1, #18
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7ff fc8d 	bl	80091dc <lsm6dsv16x_read_reg>
 80098c2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10f      	bne.n	80098ea <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 80098ca:	78fb      	ldrb	r3, [r7, #3]
 80098cc:	f003 0301 	and.w	r3, r3, #1
 80098d0:	b2da      	uxtb	r2, r3
 80098d2:	7a3b      	ldrb	r3, [r7, #8]
 80098d4:	f362 1386 	bfi	r3, r2, #6, #1
 80098d8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80098da:	f107 0208 	add.w	r2, r7, #8
 80098de:	2301      	movs	r3, #1
 80098e0:	2112      	movs	r1, #18
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7ff fc98 	bl	8009218 <lsm6dsv16x_write_reg>
 80098e8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80098ea:	68fb      	ldr	r3, [r7, #12]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	460b      	mov	r3, r1
 80098fe:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8009900:	f107 0208 	add.w	r2, r7, #8
 8009904:	2301      	movs	r3, #1
 8009906:	2115      	movs	r1, #21
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7ff fc67 	bl	80091dc <lsm6dsv16x_read_reg>
 800990e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10f      	bne.n	8009936 <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8009916:	78fb      	ldrb	r3, [r7, #3]
 8009918:	f003 030f 	and.w	r3, r3, #15
 800991c:	b2da      	uxtb	r2, r3
 800991e:	7a3b      	ldrb	r3, [r7, #8]
 8009920:	f362 0303 	bfi	r3, r2, #0, #4
 8009924:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8009926:	f107 0208 	add.w	r2, r7, #8
 800992a:	2301      	movs	r3, #1
 800992c:	2115      	movs	r1, #21
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f7ff fc72 	bl	8009218 <lsm6dsv16x_write_reg>
 8009934:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009936:	68fb      	ldr	r3, [r7, #12]
}
 8009938:	4618      	mov	r0, r3
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <lsm6dsv16x_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t *val)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 800994a:	f107 0208 	add.w	r2, r7, #8
 800994e:	2301      	movs	r3, #1
 8009950:	2115      	movs	r1, #21
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f7ff fc42 	bl	80091dc <lsm6dsv16x_read_reg>
 8009958:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d001      	beq.n	8009964 <lsm6dsv16x_gy_full_scale_get+0x24>
  {
    return ret;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	e040      	b.n	80099e6 <lsm6dsv16x_gy_full_scale_get+0xa6>
  }

  switch (ctrl6.fs_g)
 8009964:	7a3b      	ldrb	r3, [r7, #8]
 8009966:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800996a:	b2db      	uxtb	r3, r3
 800996c:	2b0c      	cmp	r3, #12
 800996e:	d835      	bhi.n	80099dc <lsm6dsv16x_gy_full_scale_get+0x9c>
 8009970:	a201      	add	r2, pc, #4	@ (adr r2, 8009978 <lsm6dsv16x_gy_full_scale_get+0x38>)
 8009972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009976:	bf00      	nop
 8009978:	080099ad 	.word	0x080099ad
 800997c:	080099b5 	.word	0x080099b5
 8009980:	080099bd 	.word	0x080099bd
 8009984:	080099c5 	.word	0x080099c5
 8009988:	080099cd 	.word	0x080099cd
 800998c:	080099dd 	.word	0x080099dd
 8009990:	080099dd 	.word	0x080099dd
 8009994:	080099dd 	.word	0x080099dd
 8009998:	080099dd 	.word	0x080099dd
 800999c:	080099dd 	.word	0x080099dd
 80099a0:	080099dd 	.word	0x080099dd
 80099a4:	080099dd 	.word	0x080099dd
 80099a8:	080099d5 	.word	0x080099d5
  {
    case LSM6DSV16X_125dps:
      *val = LSM6DSV16X_125dps;
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	2200      	movs	r2, #0
 80099b0:	701a      	strb	r2, [r3, #0]
      break;
 80099b2:	e017      	b.n	80099e4 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_250dps:
      *val = LSM6DSV16X_250dps;
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	2201      	movs	r2, #1
 80099b8:	701a      	strb	r2, [r3, #0]
      break;
 80099ba:	e013      	b.n	80099e4 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_500dps:
      *val = LSM6DSV16X_500dps;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	2202      	movs	r2, #2
 80099c0:	701a      	strb	r2, [r3, #0]
      break;
 80099c2:	e00f      	b.n	80099e4 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_1000dps:
      *val = LSM6DSV16X_1000dps;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	2203      	movs	r2, #3
 80099c8:	701a      	strb	r2, [r3, #0]
      break;
 80099ca:	e00b      	b.n	80099e4 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_2000dps:
      *val = LSM6DSV16X_2000dps;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	2204      	movs	r2, #4
 80099d0:	701a      	strb	r2, [r3, #0]
      break;
 80099d2:	e007      	b.n	80099e4 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_4000dps:
      *val = LSM6DSV16X_4000dps;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	220c      	movs	r2, #12
 80099d8:	701a      	strb	r2, [r3, #0]
      break;
 80099da:	e003      	b.n	80099e4 <lsm6dsv16x_gy_full_scale_get+0xa4>

    default:
      *val = LSM6DSV16X_125dps;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	2200      	movs	r2, #0
 80099e0:	701a      	strb	r2, [r3, #0]
      break;
 80099e2:	bf00      	nop
  }

  return ret;
 80099e4:	68fb      	ldr	r3, [r7, #12]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop

080099f0 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	460b      	mov	r3, r1
 80099fa:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 80099fc:	f107 0208 	add.w	r2, r7, #8
 8009a00:	2301      	movs	r3, #1
 8009a02:	2117      	movs	r1, #23
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7ff fbe9 	bl	80091dc <lsm6dsv16x_read_reg>
 8009a0a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d10f      	bne.n	8009a32 <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8009a12:	78fb      	ldrb	r3, [r7, #3]
 8009a14:	f003 0303 	and.w	r3, r3, #3
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	7a3b      	ldrb	r3, [r7, #8]
 8009a1c:	f362 0301 	bfi	r3, r2, #0, #2
 8009a20:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8009a22:	f107 0208 	add.w	r2, r7, #8
 8009a26:	2301      	movs	r3, #1
 8009a28:	2117      	movs	r1, #23
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7ff fbf4 	bl	8009218 <lsm6dsv16x_write_reg>
 8009a30:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009a32:	68fb      	ldr	r3, [r7, #12]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <lsm6dsv16x_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t *val)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8009a46:	f107 0208 	add.w	r2, r7, #8
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	2117      	movs	r1, #23
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7ff fbc4 	bl	80091dc <lsm6dsv16x_read_reg>
 8009a54:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <lsm6dsv16x_xl_full_scale_get+0x24>
  {
    return ret;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	e026      	b.n	8009aae <lsm6dsv16x_xl_full_scale_get+0x72>
  }

  switch (ctrl8.fs_xl)
 8009a60:	7a3b      	ldrb	r3, [r7, #8]
 8009a62:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	2b03      	cmp	r3, #3
 8009a6a:	d81b      	bhi.n	8009aa4 <lsm6dsv16x_xl_full_scale_get+0x68>
 8009a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a74 <lsm6dsv16x_xl_full_scale_get+0x38>)
 8009a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a72:	bf00      	nop
 8009a74:	08009a85 	.word	0x08009a85
 8009a78:	08009a8d 	.word	0x08009a8d
 8009a7c:	08009a95 	.word	0x08009a95
 8009a80:	08009a9d 	.word	0x08009a9d
  {
    case LSM6DSV16X_2g:
      *val = LSM6DSV16X_2g;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	2200      	movs	r2, #0
 8009a88:	701a      	strb	r2, [r3, #0]
      break;
 8009a8a:	e00f      	b.n	8009aac <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_4g:
      *val = LSM6DSV16X_4g;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	701a      	strb	r2, [r3, #0]
      break;
 8009a92:	e00b      	b.n	8009aac <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_8g:
      *val = LSM6DSV16X_8g;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	2202      	movs	r2, #2
 8009a98:	701a      	strb	r2, [r3, #0]
      break;
 8009a9a:	e007      	b.n	8009aac <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_16g:
      *val = LSM6DSV16X_16g;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	2203      	movs	r2, #3
 8009aa0:	701a      	strb	r2, [r3, #0]
      break;
 8009aa2:	e003      	b.n	8009aac <lsm6dsv16x_xl_full_scale_get+0x70>

    default:
      *val = LSM6DSV16X_2g;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	701a      	strb	r2, [r3, #0]
      break;
 8009aaa:	bf00      	nop
  }

  return ret;
 8009aac:	68fb      	ldr	r3, [r7, #12]
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop

08009ab8 <lsm6dsv16x_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_G, &buff[0], 6);
 8009ac2:	f107 020c 	add.w	r2, r7, #12
 8009ac6:	2306      	movs	r3, #6
 8009ac8:	2122      	movs	r1, #34	@ 0x22
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f7ff fb86 	bl	80091dc <lsm6dsv16x_read_reg>
 8009ad0:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d001      	beq.n	8009adc <lsm6dsv16x_angular_rate_raw_get+0x24>
  {
    return ret;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	e036      	b.n	8009b4a <lsm6dsv16x_angular_rate_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 8009adc:	7b7b      	ldrb	r3, [r7, #13]
 8009ade:	b21a      	sxth	r2, r3
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	021b      	lsls	r3, r3, #8
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	7b3a      	ldrb	r2, [r7, #12]
 8009af2:	4413      	add	r3, r2
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	b21a      	sxth	r2, r3
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8009afc:	7bfa      	ldrb	r2, [r7, #15]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	3302      	adds	r3, #2
 8009b02:	b212      	sxth	r2, r2
 8009b04:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	3302      	adds	r3, #2
 8009b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	021b      	lsls	r3, r3, #8
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	7bba      	ldrb	r2, [r7, #14]
 8009b16:	4413      	add	r3, r2
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	3302      	adds	r3, #2
 8009b1e:	b212      	sxth	r2, r2
 8009b20:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8009b22:	7c7a      	ldrb	r2, [r7, #17]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	3304      	adds	r3, #4
 8009b28:	b212      	sxth	r2, r2
 8009b2a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	3304      	adds	r3, #4
 8009b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	021b      	lsls	r3, r3, #8
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	7c3a      	ldrb	r2, [r7, #16]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	3304      	adds	r3, #4
 8009b44:	b212      	sxth	r2, r2
 8009b46:	801a      	strh	r2, [r3, #0]

  return ret;
 8009b48:	697b      	ldr	r3, [r7, #20]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3718      	adds	r7, #24
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <lsm6dsv16x_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b086      	sub	sp, #24
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_A, &buff[0], 6);
 8009b5c:	f107 020c 	add.w	r2, r7, #12
 8009b60:	2306      	movs	r3, #6
 8009b62:	2128      	movs	r1, #40	@ 0x28
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f7ff fb39 	bl	80091dc <lsm6dsv16x_read_reg>
 8009b6a:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d001      	beq.n	8009b76 <lsm6dsv16x_acceleration_raw_get+0x24>
  {
    return ret;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	e036      	b.n	8009be4 <lsm6dsv16x_acceleration_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 8009b76:	7b7b      	ldrb	r3, [r7, #13]
 8009b78:	b21a      	sxth	r2, r3
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	021b      	lsls	r3, r3, #8
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	7b3a      	ldrb	r2, [r7, #12]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	b21a      	sxth	r2, r3
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8009b96:	7bfa      	ldrb	r2, [r7, #15]
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	3302      	adds	r3, #2
 8009b9c:	b212      	sxth	r2, r2
 8009b9e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	3302      	adds	r3, #2
 8009ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	021b      	lsls	r3, r3, #8
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	7bba      	ldrb	r2, [r7, #14]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	3302      	adds	r3, #2
 8009bb8:	b212      	sxth	r2, r2
 8009bba:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8009bbc:	7c7a      	ldrb	r2, [r7, #17]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	3304      	adds	r3, #4
 8009bc2:	b212      	sxth	r2, r2
 8009bc4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	3304      	adds	r3, #4
 8009bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	021b      	lsls	r3, r3, #8
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	7c3a      	ldrb	r2, [r7, #16]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	3304      	adds	r3, #4
 8009bde:	b212      	sxth	r2, r2
 8009be0:	801a      	strh	r2, [r3, #0]

  return ret;
 8009be2:	697b      	ldr	r3, [r7, #20]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3718      	adds	r7, #24
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(const stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8009bf8:	f107 0208 	add.w	r2, r7, #8
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	210a      	movs	r1, #10
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f7ff faeb 	bl	80091dc <lsm6dsv16x_read_reg>
 8009c06:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10f      	bne.n	8009c2e <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8009c0e:	78fb      	ldrb	r3, [r7, #3]
 8009c10:	f003 0307 	and.w	r3, r3, #7
 8009c14:	b2da      	uxtb	r2, r3
 8009c16:	7a3b      	ldrb	r3, [r7, #8]
 8009c18:	f362 0302 	bfi	r3, r2, #0, #3
 8009c1c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8009c1e:	f107 0208 	add.w	r2, r7, #8
 8009c22:	2301      	movs	r3, #1
 8009c24:	210a      	movs	r1, #10
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7ff faf6 	bl	8009218 <lsm6dsv16x_write_reg>
 8009c2c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <lsm6dsv16x_ah_qvar_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ah_qvar_mode_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_ah_qvar_mode_t val)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	7039      	strb	r1, [r7, #0]
  lsm6dsv16x_ctrl7_t ctrl7;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8009c42:	f107 0208 	add.w	r2, r7, #8
 8009c46:	2301      	movs	r3, #1
 8009c48:	2116      	movs	r1, #22
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7ff fac6 	bl	80091dc <lsm6dsv16x_read_reg>
 8009c50:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10f      	bne.n	8009c78 <lsm6dsv16x_ah_qvar_mode_set+0x40>
  {
    ctrl7.ah_qvar_en = val.ah_qvar_en;
 8009c58:	783b      	ldrb	r3, [r7, #0]
 8009c5a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009c5e:	b2da      	uxtb	r2, r3
 8009c60:	7a3b      	ldrb	r3, [r7, #8]
 8009c62:	f362 13c7 	bfi	r3, r2, #7, #1
 8009c66:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8009c68:	f107 0208 	add.w	r2, r7, #8
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	2116      	movs	r1, #22
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f7ff fad1 	bl	8009218 <lsm6dsv16x_write_reg>
 8009c76:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009c78:	68fb      	ldr	r3, [r7, #12]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
	...

08009c84 <SHT40AD1B_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_RegisterBusIO(SHT40AD1B_Object_t *pObj, SHT40AD1B_IO_t *pIO)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d103      	bne.n	8009c9c <SHT40AD1B_RegisterBusIO+0x18>
  {
    ret = SHT40AD1B_ERROR;
 8009c94:	f04f 33ff 	mov.w	r3, #4294967295
 8009c98:	60fb      	str	r3, [r7, #12]
 8009c9a:	e034      	b.n	8009d06 <SHT40AD1B_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init    = pIO->Init;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit  = pIO->DeInit;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType = pIO->BusType;
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	689a      	ldr	r2, [r3, #8]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address = pIO->Address;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	7b1a      	ldrb	r2, [r3, #12]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	731a      	strb	r2, [r3, #12]
    pObj->IO.Write   = pIO->Write;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	691a      	ldr	r2, [r3, #16]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	611a      	str	r2, [r3, #16]
    pObj->IO.Read    = pIO->Read;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	695a      	ldr	r2, [r3, #20]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick = pIO->GetTick;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	699a      	ldr	r2, [r3, #24]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8009d10 <SHT40AD1B_RegisterBusIO+0x8c>)
 8009cd8:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8009d14 <SHT40AD1B_RegisterBusIO+0x90>)
 8009cde:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	69da      	ldr	r2, [r3, #28]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d004      	beq.n	8009d00 <SHT40AD1B_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4798      	blx	r3
 8009cfc:	60f8      	str	r0, [r7, #12]
 8009cfe:	e002      	b.n	8009d06 <SHT40AD1B_RegisterBusIO+0x82>
    }
    else
    {
      ret = SHT40AD1B_ERROR;
 8009d00:	f04f 33ff 	mov.w	r3, #4294967295
 8009d04:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8009d06:	68fb      	ldr	r3, [r7, #12]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	08009f95 	.word	0x08009f95
 8009d14:	08009fd5 	.word	0x08009fd5

08009d18 <SHT40AD1B_Init>:
  * @brief  Initialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_Init(SHT40AD1B_Object_t *pObj)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  /* This device doesn't support ODR, works more like one-shot measurement */
  pObj->hum_odr  = 0.0f;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f04f 0200 	mov.w	r2, #0
 8009d26:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->temp_odr = 0.0f;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f04f 0200 	mov.w	r2, #0
 8009d2e:	639a      	str	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 1;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <SHT40AD1B_DeInit>:
  * @brief  Deinitialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_DeInit(SHT40AD1B_Object_t *pObj)
{
 8009d46:	b480      	push	{r7}
 8009d48:	b083      	sub	sp, #12
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
  pObj->is_initialized = 0;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <SHT40AD1B_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_ReadID(SHT40AD1B_Object_t *pObj, uint8_t *Id)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  return sht40ad1b_device_id_get(&(pObj->Ctx), Id);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	3320      	adds	r3, #32
 8009d72:	6839      	ldr	r1, [r7, #0]
 8009d74:	4618      	mov	r0, r3
 8009d76:	f000 fa23 	bl	800a1c0 <sht40ad1b_device_id_get>
 8009d7a:	4603      	mov	r3, r0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <SHT40AD1B_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to SHT40AD1B sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_GetCapabilities(SHT40AD1B_Object_t *pObj, SHT40AD1B_Capabilities_t *Capabilities)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2201      	movs	r2, #1
 8009d92:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	2200      	movs	r2, #0
 8009d98:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	2200      	movs	r2, #0
 8009da4:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	2200      	movs	r2, #0
 8009daa:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	f04f 0200 	mov.w	r2, #0
 8009db2:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 0.0f;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	f04f 0200 	mov.w	r2, #0
 8009dba:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	f04f 0200 	mov.w	r2, #0
 8009dc2:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	f04f 0200 	mov.w	r2, #0
 8009dca:	615a      	str	r2, [r3, #20]
  return SHT40AD1B_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	370c      	adds	r7, #12
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr

08009dda <SHT40AD1B_HUM_Enable>:
  * @brief  Enable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Enable(SHT40AD1B_Object_t *pObj)
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b083      	sub	sp, #12
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d101      	bne.n	8009df0 <SHT40AD1B_HUM_Enable+0x16>
  {
    return SHT40AD1B_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	e004      	b.n	8009dfa <SHT40AD1B_HUM_Enable+0x20>
  }

  pObj->hum_is_enabled = 1;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <SHT40AD1B_HUM_Disable>:
  * @brief  Disable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Disable(SHT40AD1B_Object_t *pObj)
{
 8009e06:	b480      	push	{r7}
 8009e08:	b083      	sub	sp, #12
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d101      	bne.n	8009e1c <SHT40AD1B_HUM_Disable+0x16>
  {
    return SHT40AD1B_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	e004      	b.n	8009e26 <SHT40AD1B_HUM_Disable+0x20>
  }

  pObj->hum_is_enabled = 0;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <SHT40AD1B_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b083      	sub	sp, #12
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	6039      	str	r1, [r7, #0]
  *Odr = pObj->hum_odr;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <SHT40AD1B_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 8009e52:	b480      	push	{r7}
 8009e54:	b083      	sub	sp, #12
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <SHT40AD1B_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetHumidity(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 f86f 	bl	8009f5a <GetData>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d002      	beq.n	8009e88 <SHT40AD1B_HUM_GetHumidity+0x1c>
  {
    return SHT40AD1B_ERROR;
 8009e82:	f04f 33ff 	mov.w	r3, #4294967295
 8009e86:	e004      	b.n	8009e92 <SHT40AD1B_HUM_GetHumidity+0x26>
  }

  *Value = pObj->hum_value;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009e90:	2300      	movs	r3, #0
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <SHT40AD1B_TEMP_Enable>:
  * @brief  Enable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Enable(SHT40AD1B_Object_t *pObj)
{
 8009e9a:	b480      	push	{r7}
 8009e9c:	b083      	sub	sp, #12
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d101      	bne.n	8009eb0 <SHT40AD1B_TEMP_Enable+0x16>
  {
    return SHT40AD1B_OK;
 8009eac:	2300      	movs	r3, #0
 8009eae:	e004      	b.n	8009eba <SHT40AD1B_TEMP_Enable+0x20>
  }

  pObj->temp_is_enabled = 1;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <SHT40AD1B_TEMP_Disable>:
  * @brief  Disable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Disable(SHT40AD1B_Object_t *pObj)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b083      	sub	sp, #12
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d101      	bne.n	8009edc <SHT40AD1B_TEMP_Disable+0x16>
  {
    return SHT40AD1B_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	e004      	b.n	8009ee6 <SHT40AD1B_TEMP_Disable+0x20>
  }

  pObj->temp_is_enabled = 0;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <SHT40AD1B_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b083      	sub	sp, #12
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	6039      	str	r1, [r7, #0]
  *Odr = pObj->temp_odr;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <SHT40AD1B_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b083      	sub	sp, #12
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
 8009f1a:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <SHT40AD1B_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetTemperature(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f80f 	bl	8009f5a <GetData>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d002      	beq.n	8009f48 <SHT40AD1B_TEMP_GetTemperature+0x1c>
  {
    return SHT40AD1B_ERROR;
 8009f42:	f04f 33ff 	mov.w	r3, #4294967295
 8009f46:	e004      	b.n	8009f52 <SHT40AD1B_TEMP_GetTemperature+0x26>
  }

  *Value = pObj->temp_value;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <GetData>:
  * @param  pObj the device pObj
  * @param  Status the new data status
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t GetData(SHT40AD1B_Object_t *pObj)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b084      	sub	sp, #16
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
  float_t data[2];  /* humidity, temperature */

  if (sht40ad1b_data_get(&(pObj->Ctx), data) != 0)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	3320      	adds	r3, #32
 8009f66:	f107 0208 	add.w	r2, r7, #8
 8009f6a:	4611      	mov	r1, r2
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f000 f881 	bl	800a074 <sht40ad1b_data_get>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <GetData+0x24>
  {
    return SHT40AD1B_ERROR;
 8009f78:	f04f 33ff 	mov.w	r3, #4294967295
 8009f7c:	e006      	b.n	8009f8c <GetData+0x32>
  }

  pObj->hum_value = data[0];
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	63da      	str	r2, [r3, #60]	@ 0x3c
  pObj->temp_value = data[1];
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	641a      	str	r2, [r3, #64]	@ 0x40

  return SHT40AD1B_OK;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	607a      	str	r2, [r7, #4]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	72fb      	strb	r3, [r7, #11]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d109      	bne.n	8009fc8 <ReadRegWrap+0x34>
  {
    return pObj->IO.Read(pObj->IO.Address, pData, Length);
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	695b      	ldr	r3, [r3, #20]
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	7b12      	ldrb	r2, [r2, #12]
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	893a      	ldrh	r2, [r7, #8]
 8009fc0:	6879      	ldr	r1, [r7, #4]
 8009fc2:	4798      	blx	r3
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	e001      	b.n	8009fcc <ReadRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 8009fc8:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b086      	sub	sp, #24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	607a      	str	r2, [r7, #4]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	72fb      	strb	r3, [r7, #11]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d109      	bne.n	800a008 <WriteRegWrap+0x34>
  {
    return pObj->IO.Write(pObj->IO.Address, pData, Length);
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	697a      	ldr	r2, [r7, #20]
 8009ffa:	7b12      	ldrb	r2, [r2, #12]
 8009ffc:	4610      	mov	r0, r2
 8009ffe:	893a      	ldrh	r2, [r7, #8]
 800a000:	6879      	ldr	r1, [r7, #4]
 800a002:	4798      	blx	r3
 800a004:	4603      	mov	r3, r0
 800a006:	e001      	b.n	800a00c <WriteRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 800a008:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <sht40ad1b_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data, uint16_t len)
{
 800a014:	b590      	push	{r4, r7, lr}
 800a016:	b087      	sub	sp, #28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	607a      	str	r2, [r7, #4]
 800a01e:	461a      	mov	r2, r3
 800a020:	460b      	mov	r3, r1
 800a022:	72fb      	strb	r3, [r7, #11]
 800a024:	4613      	mov	r3, r2
 800a026:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	685c      	ldr	r4, [r3, #4]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	68d8      	ldr	r0, [r3, #12]
 800a030:	893b      	ldrh	r3, [r7, #8]
 800a032:	7af9      	ldrb	r1, [r7, #11]
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	47a0      	blx	r4
 800a038:	6178      	str	r0, [r7, #20]

  return ret;
 800a03a:	697b      	ldr	r3, [r7, #20]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	371c      	adds	r7, #28
 800a040:	46bd      	mov	sp, r7
 800a042:	bd90      	pop	{r4, r7, pc}

0800a044 <sht40ad1b_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data, uint16_t len)
{
 800a044:	b590      	push	{r4, r7, lr}
 800a046:	b087      	sub	sp, #28
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	607a      	str	r2, [r7, #4]
 800a04e:	461a      	mov	r2, r3
 800a050:	460b      	mov	r3, r1
 800a052:	72fb      	strb	r3, [r7, #11]
 800a054:	4613      	mov	r3, r2
 800a056:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681c      	ldr	r4, [r3, #0]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	68d8      	ldr	r0, [r3, #12]
 800a060:	893b      	ldrh	r3, [r7, #8]
 800a062:	7af9      	ldrb	r1, [r7, #11]
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	47a0      	blx	r4
 800a068:	6178      	str	r0, [r7, #20]

  return ret;
 800a06a:	697b      	ldr	r3, [r7, #20]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	371c      	adds	r7, #28
 800a070:	46bd      	mov	sp, r7
 800a072:	bd90      	pop	{r4, r7, pc}

0800a074 <sht40ad1b_data_get>:
  * @param  buffer  buffer to store humidity and temperature values pair
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_data_get(stmdev_ctx_t *ctx, float_t *buffer)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b088      	sub	sp, #32
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  uint8_t command = 0xFD;
 800a07e:	23fd      	movs	r3, #253	@ 0xfd
 800a080:	73fb      	strb	r3, [r7, #15]
  uint8_t data[6] = {0};
 800a082:	f107 0308 	add.w	r3, r7, #8
 800a086:	2200      	movs	r2, #0
 800a088:	601a      	str	r2, [r3, #0]
 800a08a:	809a      	strh	r2, [r3, #4]

  if (sht40ad1b_write_reg(ctx, 0, &command, 1) != 0)
 800a08c:	f107 020f 	add.w	r2, r7, #15
 800a090:	2301      	movs	r3, #1
 800a092:	2100      	movs	r1, #0
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f7ff ffd5 	bl	800a044 <sht40ad1b_write_reg>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d001      	beq.n	800a0a4 <sht40ad1b_data_get+0x30>
  {
    return 1;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e07d      	b.n	800a1a0 <sht40ad1b_data_get+0x12c>
  }

  /* Wait 10 ms */
  ctx->mdelay(10);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	200a      	movs	r0, #10
 800a0aa:	4798      	blx	r3

  if (sht40ad1b_read_reg(ctx, 0, data, 6) != 0)
 800a0ac:	f107 0208 	add.w	r2, r7, #8
 800a0b0:	2306      	movs	r3, #6
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7ff ffad 	bl	800a014 <sht40ad1b_read_reg>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d001      	beq.n	800a0c4 <sht40ad1b_data_get+0x50>
  {
    return 1;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e06d      	b.n	800a1a0 <sht40ad1b_data_get+0x12c>
  }

  uint16_t temp_value_raw = (data[0] * 0x100U) + data[1];
 800a0c4:	7a3b      	ldrb	r3, [r7, #8]
 800a0c6:	021b      	lsls	r3, r3, #8
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	7a7a      	ldrb	r2, [r7, #9]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	83fb      	strh	r3, [r7, #30]
  uint8_t temp_value_crc  = data[2];
 800a0d0:	7abb      	ldrb	r3, [r7, #10]
 800a0d2:	777b      	strb	r3, [r7, #29]
  uint16_t hum_value_raw  = (data[3] * 0x100U) + data[4];
 800a0d4:	7afb      	ldrb	r3, [r7, #11]
 800a0d6:	021b      	lsls	r3, r3, #8
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	7b3a      	ldrb	r2, [r7, #12]
 800a0dc:	4413      	add	r3, r2
 800a0de:	837b      	strh	r3, [r7, #26]
  uint8_t hum_value_crc   = data[5];
 800a0e0:	7b7b      	ldrb	r3, [r7, #13]
 800a0e2:	767b      	strb	r3, [r7, #25]

  /* Check CRC for temperature value */
  if (crc_check(&data[0], 2, temp_value_crc) != 0U)
 800a0e4:	7f7a      	ldrb	r2, [r7, #29]
 800a0e6:	f107 0308 	add.w	r3, r7, #8
 800a0ea:	2102      	movs	r1, #2
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f000 f8b3 	bl	800a258 <crc_check>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d001      	beq.n	800a0fc <sht40ad1b_data_get+0x88>
  {
    return 1;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e051      	b.n	800a1a0 <sht40ad1b_data_get+0x12c>
  }

  /* Check CRC for humidity value */
  if (crc_check(&data[3], 2, hum_value_crc) != 0U)
 800a0fc:	7e7a      	ldrb	r2, [r7, #25]
 800a0fe:	f107 0308 	add.w	r3, r7, #8
 800a102:	3303      	adds	r3, #3
 800a104:	2102      	movs	r1, #2
 800a106:	4618      	mov	r0, r3
 800a108:	f000 f8a6 	bl	800a258 <crc_check>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d001      	beq.n	800a116 <sht40ad1b_data_get+0xa2>
  {
    return 1;
 800a112:	2301      	movs	r3, #1
 800a114:	e044      	b.n	800a1a0 <sht40ad1b_data_get+0x12c>
  }

  float_t temp_value = -45.0f + (175.0f * (float_t)temp_value_raw / (float_t)0xFFFF);
 800a116:	8bfb      	ldrh	r3, [r7, #30]
 800a118:	ee07 3a90 	vmov	s15, r3
 800a11c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a120:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800a1a8 <sht40ad1b_data_get+0x134>
 800a124:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a128:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800a1ac <sht40ad1b_data_get+0x138>
 800a12c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a130:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800a1b0 <sht40ad1b_data_get+0x13c>
 800a134:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a138:	edc7 7a05 	vstr	s15, [r7, #20]
  float_t hum_value  =  -6.0f + (125.0f * (float_t)hum_value_raw  / (float_t)0xFFFF);
 800a13c:	8b7b      	ldrh	r3, [r7, #26]
 800a13e:	ee07 3a90 	vmov	s15, r3
 800a142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a146:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800a1b4 <sht40ad1b_data_get+0x140>
 800a14a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a14e:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800a1ac <sht40ad1b_data_get+0x138>
 800a152:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a156:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800a15a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a15e:	edc7 7a04 	vstr	s15, [r7, #16]

  hum_value = (hum_value > 100.0f) ? 100.0f
              : (hum_value <   0.0f) ?   0.0f
 800a162:	edd7 7a04 	vldr	s15, [r7, #16]
 800a166:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800a1b8 <sht40ad1b_data_get+0x144>
 800a16a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a172:	dd01      	ble.n	800a178 <sht40ad1b_data_get+0x104>
 800a174:	4b11      	ldr	r3, [pc, #68]	@ (800a1bc <sht40ad1b_data_get+0x148>)
 800a176:	e00a      	b.n	800a18e <sht40ad1b_data_get+0x11a>
              :                        hum_value;
 800a178:	edd7 7a04 	vldr	s15, [r7, #16]
 800a17c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a184:	d502      	bpl.n	800a18c <sht40ad1b_data_get+0x118>
 800a186:	f04f 0300 	mov.w	r3, #0
 800a18a:	e000      	b.n	800a18e <sht40ad1b_data_get+0x11a>
 800a18c:	693b      	ldr	r3, [r7, #16]
  hum_value = (hum_value > 100.0f) ? 100.0f
 800a18e:	613b      	str	r3, [r7, #16]

  buffer[0] = hum_value;
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	693a      	ldr	r2, [r7, #16]
 800a194:	601a      	str	r2, [r3, #0]
  buffer[1] = temp_value;
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	3304      	adds	r3, #4
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	601a      	str	r2, [r3, #0]
  return 0;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3720      	adds	r7, #32
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	432f0000 	.word	0x432f0000
 800a1ac:	477fff00 	.word	0x477fff00
 800a1b0:	42340000 	.word	0x42340000
 800a1b4:	42fa0000 	.word	0x42fa0000
 800a1b8:	42c80000 	.word	0x42c80000
 800a1bc:	42c80000 	.word	0x42c80000

0800a1c0 <sht40ad1b_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  (void)ctx;
  *buff = SHT40AD1B_ID;
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	701a      	strb	r2, [r3, #0]
  return 0;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	370c      	adds	r7, #12
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr

0800a1de <crc_calculate>:
  * @param  count  number of data bytes
  * @retval        CRC check sum of data stream
  *
  */
static uint8_t crc_calculate(const uint8_t *data, uint16_t count)
{
 800a1de:	b480      	push	{r7}
 800a1e0:	b085      	sub	sp, #20
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	807b      	strh	r3, [r7, #2]
  const uint8_t crc8_polynomial = 0x31;
 800a1ea:	2331      	movs	r3, #49	@ 0x31
 800a1ec:	72bb      	strb	r3, [r7, #10]
  uint8_t crc = 0xFF;
 800a1ee:	23ff      	movs	r3, #255	@ 0xff
 800a1f0:	73fb      	strb	r3, [r7, #15]

  /* Calculate 8-bit checksum for given polynomial */
  for (uint16_t index = 0; index < count; index++)
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	81bb      	strh	r3, [r7, #12]
 800a1f6:	e024      	b.n	800a242 <crc_calculate+0x64>
  {
    crc ^= data[index];
 800a1f8:	89bb      	ldrh	r3, [r7, #12]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	781a      	ldrb	r2, [r3, #0]
 800a200:	7bfb      	ldrb	r3, [r7, #15]
 800a202:	4053      	eors	r3, r2
 800a204:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 800a206:	2308      	movs	r3, #8
 800a208:	72fb      	strb	r3, [r7, #11]
 800a20a:	e014      	b.n	800a236 <crc_calculate+0x58>
    {
      crc = ((crc & 0x80U) != 0U) ? ((crc << 1) ^ crc8_polynomial) : (crc << 1);
 800a20c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a210:	2b00      	cmp	r3, #0
 800a212:	da09      	bge.n	800a228 <crc_calculate+0x4a>
 800a214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a218:	005b      	lsls	r3, r3, #1
 800a21a:	b25a      	sxtb	r2, r3
 800a21c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800a220:	4053      	eors	r3, r2
 800a222:	b25b      	sxtb	r3, r3
 800a224:	b2db      	uxtb	r3, r3
 800a226:	e002      	b.n	800a22e <crc_calculate+0x50>
 800a228:	7bfb      	ldrb	r3, [r7, #15]
 800a22a:	005b      	lsls	r3, r3, #1
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 800a230:	7afb      	ldrb	r3, [r7, #11]
 800a232:	3b01      	subs	r3, #1
 800a234:	72fb      	strb	r3, [r7, #11]
 800a236:	7afb      	ldrb	r3, [r7, #11]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1e7      	bne.n	800a20c <crc_calculate+0x2e>
  for (uint16_t index = 0; index < count; index++)
 800a23c:	89bb      	ldrh	r3, [r7, #12]
 800a23e:	3301      	adds	r3, #1
 800a240:	81bb      	strh	r3, [r7, #12]
 800a242:	89ba      	ldrh	r2, [r7, #12]
 800a244:	887b      	ldrh	r3, [r7, #2]
 800a246:	429a      	cmp	r2, r3
 800a248:	d3d6      	bcc.n	800a1f8 <crc_calculate+0x1a>
    }
  }

  return crc;
 800a24a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <crc_check>:
  * @param  crc    CRC check sum of data stream
  * @retval        0 if CRC is OK else 1
  *
  */
static uint8_t crc_check(const uint8_t *data, uint16_t count, uint8_t crc)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	460b      	mov	r3, r1
 800a262:	807b      	strh	r3, [r7, #2]
 800a264:	4613      	mov	r3, r2
 800a266:	707b      	strb	r3, [r7, #1]
  return (crc_calculate(data, count) == crc) ? 0U : 1U;
 800a268:	887b      	ldrh	r3, [r7, #2]
 800a26a:	4619      	mov	r1, r3
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f7ff ffb6 	bl	800a1de <crc_calculate>
 800a272:	4603      	mov	r3, r0
 800a274:	461a      	mov	r2, r3
 800a276:	787b      	ldrb	r3, [r7, #1]
 800a278:	4293      	cmp	r3, r2
 800a27a:	bf14      	ite	ne
 800a27c:	2301      	movne	r3, #1
 800a27e:	2300      	moveq	r3, #0
 800a280:	b2db      	uxtb	r3, r3
}
 800a282:	4618      	mov	r0, r3
 800a284:	3708      	adds	r7, #8
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
	...

0800a28c <STTS22H_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_RegisterBusIO(STTS22H_Object_t *pObj, STTS22H_IO_t *pIO)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d103      	bne.n	800a2a4 <STTS22H_RegisterBusIO+0x18>
  {
    ret = STTS22H_ERROR;
 800a29c:	f04f 33ff 	mov.w	r3, #4294967295
 800a2a0:	60fb      	str	r3, [r7, #12]
 800a2a2:	e034      	b.n	800a30e <STTS22H_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	685a      	ldr	r2, [r3, #4]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	689a      	ldr	r2, [r3, #8]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	7b1a      	ldrb	r2, [r3, #12]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	691a      	ldr	r2, [r3, #16]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	695a      	ldr	r2, [r3, #20]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	699a      	ldr	r2, [r3, #24]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a0e      	ldr	r2, [pc, #56]	@ (800a318 <STTS22H_RegisterBusIO+0x8c>)
 800a2e0:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a0d      	ldr	r2, [pc, #52]	@ (800a31c <STTS22H_RegisterBusIO+0x90>)
 800a2e6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	69da      	ldr	r2, [r3, #28]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d004      	beq.n	800a308 <STTS22H_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4798      	blx	r3
 800a304:	60f8      	str	r0, [r7, #12]
 800a306:	e002      	b.n	800a30e <STTS22H_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS22H_ERROR;
 800a308:	f04f 33ff 	mov.w	r3, #4294967295
 800a30c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a30e:	68fb      	ldr	r3, [r7, #12]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	0800a729 	.word	0x0800a729
 800a31c:	0800a797 	.word	0x0800a797

0800a320 <STTS22H_Init>:
  * @brief  Initialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_Init(STTS22H_Object_t *pObj)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d127      	bne.n	800a382 <STTS22H_Init+0x62>
  {
    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a338:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable BDU */
    if (stts22h_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	3320      	adds	r3, #32
 800a33e:	2101      	movs	r1, #1
 800a340:	4618      	mov	r0, r3
 800a342:	f000 fbad 	bl	800aaa0 <stts22h_block_data_update_set>
 800a346:	4603      	mov	r3, r0
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d002      	beq.n	800a352 <STTS22H_Init+0x32>
    {
      return STTS22H_ERROR;
 800a34c:	f04f 33ff 	mov.w	r3, #4294967295
 800a350:	e01c      	b.n	800a38c <STTS22H_Init+0x6c>
    }

    /* Enable Automatic Address Increment */
    if (stts22h_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	3320      	adds	r3, #32
 800a356:	2101      	movs	r1, #1
 800a358:	4618      	mov	r0, r3
 800a35a:	f000 fbfa 	bl	800ab52 <stts22h_auto_increment_set>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d002      	beq.n	800a36a <STTS22H_Init+0x4a>
    {
      return STTS22H_ERROR;
 800a364:	f04f 33ff 	mov.w	r3, #4294967295
 800a368:	e010      	b.n	800a38c <STTS22H_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	3320      	adds	r3, #32
 800a36e:	2100      	movs	r1, #0
 800a370:	4618      	mov	r0, r3
 800a372:	f000 fa9d 	bl	800a8b0 <stts22h_temp_data_rate_set>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d002      	beq.n	800a382 <STTS22H_Init+0x62>
    {
      return STTS22H_ERROR;
 800a37c:	f04f 33ff 	mov.w	r3, #4294967295
 800a380:	e004      	b.n	800a38c <STTS22H_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2201      	movs	r2, #1
 800a386:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 800a38a:	2300      	movs	r3, #0
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <STTS22H_DeInit>:
  * @brief  Deinitialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_DeInit(STTS22H_Object_t *pObj)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d108      	bne.n	800a3b8 <STTS22H_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS22H_TEMP_Disable(pObj) != STTS22H_OK)
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 f878 	bl	800a49c <STTS22H_TEMP_Disable>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d002      	beq.n	800a3b8 <STTS22H_DeInit+0x24>
    {
      return STTS22H_ERROR;
 800a3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b6:	e004      	b.n	800a3c2 <STTS22H_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <STTS22H_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_ReadID(STTS22H_Object_t *pObj, uint8_t *Id)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b084      	sub	sp, #16
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	6039      	str	r1, [r7, #0]
  uint8_t buf;

  if (stts22h_dev_id_get(&(pObj->Ctx), &buf) != STTS22H_OK)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	3320      	adds	r3, #32
 800a3d8:	f107 020f 	add.w	r2, r7, #15
 800a3dc:	4611      	mov	r1, r2
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f000 fba6 	bl	800ab30 <stts22h_dev_id_get>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d002      	beq.n	800a3f0 <STTS22H_ReadID+0x26>
  {
    return STTS22H_ERROR;
 800a3ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ee:	e003      	b.n	800a3f8 <STTS22H_ReadID+0x2e>
  }

  *Id = buf;
 800a3f0:	7bfa      	ldrb	r2, [r7, #15]
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	701a      	strb	r2, [r3, #0]

  return STTS22H_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <STTS22H_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS22H sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_GetCapabilities(STTS22H_Object_t *pObj, STTS22H_Capabilities_t *Capabilities)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	2200      	movs	r2, #0
 800a40e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	2200      	movs	r2, #0
 800a414:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	2201      	movs	r2, #1
 800a41a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	2200      	movs	r2, #0
 800a420:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	2200      	movs	r2, #0
 800a426:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	f04f 0200 	mov.w	r2, #0
 800a42e:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	4a08      	ldr	r2, [pc, #32]	@ (800a454 <STTS22H_GetCapabilities+0x54>)
 800a434:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	f04f 0200 	mov.w	r2, #0
 800a43c:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	f04f 0200 	mov.w	r2, #0
 800a444:	615a      	str	r2, [r3, #20]
  return STTS22H_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr
 800a454:	43480000 	.word	0x43480000

0800a458 <STTS22H_TEMP_Enable>:
  * @brief  Enable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Enable(STTS22H_Object_t *pObj)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a466:	2b01      	cmp	r3, #1
 800a468:	d101      	bne.n	800a46e <STTS22H_TEMP_Enable+0x16>
  {
    return STTS22H_OK;
 800a46a:	2300      	movs	r3, #0
 800a46c:	e012      	b.n	800a494 <STTS22H_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS22H_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS22H_OK)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800a474:	eeb0 0a67 	vmov.f32	s0, s15
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 f8e9 	bl	800a650 <STTS22H_TEMP_SetOutputDataRate>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d002      	beq.n	800a48a <STTS22H_TEMP_Enable+0x32>
  {
    return STTS22H_ERROR;
 800a484:	f04f 33ff 	mov.w	r3, #4294967295
 800a488:	e004      	b.n	800a494 <STTS22H_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2201      	movs	r2, #1
 800a48e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3708      	adds	r7, #8
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <STTS22H_TEMP_Disable>:
  * @brief  Disable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Disable(STTS22H_Object_t *pObj)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d101      	bne.n	800a4b2 <STTS22H_TEMP_Disable+0x16>
  {
    return STTS22H_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	e01c      	b.n	800a4ec <STTS22H_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS22H_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS22H_OK)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	3334      	adds	r3, #52	@ 0x34
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 f81b 	bl	800a4f4 <STTS22H_TEMP_GetOutputDataRate>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d002      	beq.n	800a4ca <STTS22H_TEMP_Disable+0x2e>
  {
    return STTS22H_ERROR;
 800a4c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4c8:	e010      	b.n	800a4ec <STTS22H_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	3320      	adds	r3, #32
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 f9ed 	bl	800a8b0 <stts22h_temp_data_rate_set>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d002      	beq.n	800a4e2 <STTS22H_TEMP_Disable+0x46>
  {
    return STTS22H_ERROR;
 800a4dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e0:	e004      	b.n	800a4ec <STTS22H_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800a4ea:	2300      	movs	r3, #0
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <STTS22H_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetOutputDataRate(STTS22H_Object_t *pObj, float *Odr)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS22H_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	60fb      	str	r3, [r7, #12]
  stts22h_odr_temp_t odr_low_level;

  if (stts22h_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS22H_OK)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	3320      	adds	r3, #32
 800a506:	f107 020b 	add.w	r2, r7, #11
 800a50a:	4611      	mov	r1, r2
 800a50c:	4618      	mov	r0, r3
 800a50e:	f000 fa11 	bl	800a934 <stts22h_temp_data_rate_get>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d002      	beq.n	800a51e <STTS22H_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS22H_ERROR;
 800a518:	f04f 33ff 	mov.w	r3, #4294967295
 800a51c:	e08b      	b.n	800a636 <STTS22H_TEMP_GetOutputDataRate+0x142>
  }

  switch (odr_low_level)
 800a51e:	7afb      	ldrb	r3, [r7, #11]
 800a520:	2b32      	cmp	r3, #50	@ 0x32
 800a522:	f200 8083 	bhi.w	800a62c <STTS22H_TEMP_GetOutputDataRate+0x138>
 800a526:	a201      	add	r2, pc, #4	@ (adr r2, 800a52c <STTS22H_TEMP_GetOutputDataRate+0x38>)
 800a528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52c:	0800a5f9 	.word	0x0800a5f9
 800a530:	0800a5f9 	.word	0x0800a5f9
 800a534:	0800a60d 	.word	0x0800a60d
 800a538:	0800a62d 	.word	0x0800a62d
 800a53c:	0800a603 	.word	0x0800a603
 800a540:	0800a62d 	.word	0x0800a62d
 800a544:	0800a62d 	.word	0x0800a62d
 800a548:	0800a62d 	.word	0x0800a62d
 800a54c:	0800a62d 	.word	0x0800a62d
 800a550:	0800a62d 	.word	0x0800a62d
 800a554:	0800a62d 	.word	0x0800a62d
 800a558:	0800a62d 	.word	0x0800a62d
 800a55c:	0800a62d 	.word	0x0800a62d
 800a560:	0800a62d 	.word	0x0800a62d
 800a564:	0800a62d 	.word	0x0800a62d
 800a568:	0800a62d 	.word	0x0800a62d
 800a56c:	0800a62d 	.word	0x0800a62d
 800a570:	0800a62d 	.word	0x0800a62d
 800a574:	0800a615 	.word	0x0800a615
 800a578:	0800a62d 	.word	0x0800a62d
 800a57c:	0800a62d 	.word	0x0800a62d
 800a580:	0800a62d 	.word	0x0800a62d
 800a584:	0800a62d 	.word	0x0800a62d
 800a588:	0800a62d 	.word	0x0800a62d
 800a58c:	0800a62d 	.word	0x0800a62d
 800a590:	0800a62d 	.word	0x0800a62d
 800a594:	0800a62d 	.word	0x0800a62d
 800a598:	0800a62d 	.word	0x0800a62d
 800a59c:	0800a62d 	.word	0x0800a62d
 800a5a0:	0800a62d 	.word	0x0800a62d
 800a5a4:	0800a62d 	.word	0x0800a62d
 800a5a8:	0800a62d 	.word	0x0800a62d
 800a5ac:	0800a62d 	.word	0x0800a62d
 800a5b0:	0800a62d 	.word	0x0800a62d
 800a5b4:	0800a61d 	.word	0x0800a61d
 800a5b8:	0800a62d 	.word	0x0800a62d
 800a5bc:	0800a62d 	.word	0x0800a62d
 800a5c0:	0800a62d 	.word	0x0800a62d
 800a5c4:	0800a62d 	.word	0x0800a62d
 800a5c8:	0800a62d 	.word	0x0800a62d
 800a5cc:	0800a62d 	.word	0x0800a62d
 800a5d0:	0800a62d 	.word	0x0800a62d
 800a5d4:	0800a62d 	.word	0x0800a62d
 800a5d8:	0800a62d 	.word	0x0800a62d
 800a5dc:	0800a62d 	.word	0x0800a62d
 800a5e0:	0800a62d 	.word	0x0800a62d
 800a5e4:	0800a62d 	.word	0x0800a62d
 800a5e8:	0800a62d 	.word	0x0800a62d
 800a5ec:	0800a62d 	.word	0x0800a62d
 800a5f0:	0800a62d 	.word	0x0800a62d
 800a5f4:	0800a625 	.word	0x0800a625
  {
    case STTS22H_POWER_DOWN:
    case STTS22H_ONE_SHOT:
      *Odr = 0.0f;
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	f04f 0200 	mov.w	r2, #0
 800a5fe:	601a      	str	r2, [r3, #0]
      break;
 800a600:	e018      	b.n	800a634 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_1Hz:
      *Odr = 1.0f;
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a608:	601a      	str	r2, [r3, #0]
      break;
 800a60a:	e013      	b.n	800a634 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_25Hz:
      *Odr = 25.0f;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	4a0c      	ldr	r2, [pc, #48]	@ (800a640 <STTS22H_TEMP_GetOutputDataRate+0x14c>)
 800a610:	601a      	str	r2, [r3, #0]
      break;
 800a612:	e00f      	b.n	800a634 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_50Hz:
      *Odr = 50.0f;
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	4a0b      	ldr	r2, [pc, #44]	@ (800a644 <STTS22H_TEMP_GetOutputDataRate+0x150>)
 800a618:	601a      	str	r2, [r3, #0]
      break;
 800a61a:	e00b      	b.n	800a634 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_100Hz:
      *Odr = 100.0f;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	4a0a      	ldr	r2, [pc, #40]	@ (800a648 <STTS22H_TEMP_GetOutputDataRate+0x154>)
 800a620:	601a      	str	r2, [r3, #0]
      break;
 800a622:	e007      	b.n	800a634 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_200Hz:
      *Odr = 200.0f;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	4a09      	ldr	r2, [pc, #36]	@ (800a64c <STTS22H_TEMP_GetOutputDataRate+0x158>)
 800a628:	601a      	str	r2, [r3, #0]
      break;
 800a62a:	e003      	b.n	800a634 <STTS22H_TEMP_GetOutputDataRate+0x140>

    default:
      ret = STTS22H_ERROR;
 800a62c:	f04f 33ff 	mov.w	r3, #4294967295
 800a630:	60fb      	str	r3, [r7, #12]
      break;
 800a632:	bf00      	nop
  }

  return ret;
 800a634:	68fb      	ldr	r3, [r7, #12]
}
 800a636:	4618      	mov	r0, r3
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	41c80000 	.word	0x41c80000
 800a644:	42480000 	.word	0x42480000
 800a648:	42c80000 	.word	0x42c80000
 800a64c:	43480000 	.word	0x43480000

0800a650 <STTS22H_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_SetOutputDataRate(STTS22H_Object_t *pObj, float Odr)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	ed87 0a00 	vstr	s0, [r7]
  stts22h_odr_temp_t new_odr;

  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
            : (Odr <= 25.0f) ? STTS22H_25Hz
 800a65c:	edd7 7a00 	vldr	s15, [r7]
 800a660:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a664:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a66c:	d801      	bhi.n	800a672 <STTS22H_TEMP_SetOutputDataRate+0x22>
 800a66e:	2304      	movs	r3, #4
 800a670:	e021      	b.n	800a6b6 <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a672:	edd7 7a00 	vldr	s15, [r7]
 800a676:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800a67a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a682:	d801      	bhi.n	800a688 <STTS22H_TEMP_SetOutputDataRate+0x38>
 800a684:	2302      	movs	r3, #2
 800a686:	e016      	b.n	800a6b6 <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a688:	edd7 7a00 	vldr	s15, [r7]
 800a68c:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800a6dc <STTS22H_TEMP_SetOutputDataRate+0x8c>
 800a690:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a698:	d801      	bhi.n	800a69e <STTS22H_TEMP_SetOutputDataRate+0x4e>
 800a69a:	2312      	movs	r3, #18
 800a69c:	e00b      	b.n	800a6b6 <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a69e:	edd7 7a00 	vldr	s15, [r7]
 800a6a2:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800a6e0 <STTS22H_TEMP_SetOutputDataRate+0x90>
 800a6a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ae:	d801      	bhi.n	800a6b4 <STTS22H_TEMP_SetOutputDataRate+0x64>
 800a6b0:	2322      	movs	r3, #34	@ 0x22
 800a6b2:	e000      	b.n	800a6b6 <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a6b4:	2332      	movs	r3, #50	@ 0x32
  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
 800a6b6:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.0f) ? STTS22H_50Hz
            : (Odr <= 100.0f) ? STTS22H_100Hz
            :                    STTS22H_200Hz;

  if (stts22h_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS22H_OK)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	3320      	adds	r3, #32
 800a6bc:	7bfa      	ldrb	r2, [r7, #15]
 800a6be:	4611      	mov	r1, r2
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f000 f8f5 	bl	800a8b0 <stts22h_temp_data_rate_set>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d002      	beq.n	800a6d2 <STTS22H_TEMP_SetOutputDataRate+0x82>
  {
    return STTS22H_ERROR;
 800a6cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d0:	e000      	b.n	800a6d4 <STTS22H_TEMP_SetOutputDataRate+0x84>
  }

  return STTS22H_OK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	42480000 	.word	0x42480000
 800a6e0:	42c80000 	.word	0x42c80000

0800a6e4 <STTS22H_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetTemperature(STTS22H_Object_t *pObj, float *Value)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts22h_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS22H_OK)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	3320      	adds	r3, #32
 800a6f2:	f107 020e 	add.w	r2, r7, #14
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f000 f9f7 	bl	800aaec <stts22h_temperature_raw_get>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d002      	beq.n	800a70a <STTS22H_TEMP_GetTemperature+0x26>
  {
    return STTS22H_ERROR;
 800a704:	f04f 33ff 	mov.w	r3, #4294967295
 800a708:	e00a      	b.n	800a720 <STTS22H_TEMP_GetTemperature+0x3c>
  }

  *Value = stts22h_from_lsb_to_celsius(raw_value);
 800a70a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a70e:	4618      	mov	r0, r3
 800a710:	f000 f8b4 	bl	800a87c <stts22h_from_lsb_to_celsius>
 800a714:	eef0 7a40 	vmov.f32	s15, s0
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	edc3 7a00 	vstr	s15, [r3]

  return STTS22H_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	3710      	adds	r7, #16
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}

0800a728 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a728:	b590      	push	{r4, r7, lr}
 800a72a:	b089      	sub	sp, #36	@ 0x24
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	607a      	str	r2, [r7, #4]
 800a732:	461a      	mov	r2, r3
 800a734:	460b      	mov	r3, r1
 800a736:	72fb      	strb	r3, [r7, #11]
 800a738:	4613      	mov	r3, r2
 800a73a:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d11f      	bne.n	800a78c <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800a74c:	2300      	movs	r3, #0
 800a74e:	83fb      	strh	r3, [r7, #30]
 800a750:	e018      	b.n	800a784 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	695c      	ldr	r4, [r3, #20]
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	7b1b      	ldrb	r3, [r3, #12]
 800a75a:	4618      	mov	r0, r3
 800a75c:	7afb      	ldrb	r3, [r7, #11]
 800a75e:	b29a      	uxth	r2, r3
 800a760:	8bfb      	ldrh	r3, [r7, #30]
 800a762:	4413      	add	r3, r2
 800a764:	b299      	uxth	r1, r3
 800a766:	8bfb      	ldrh	r3, [r7, #30]
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	441a      	add	r2, r3
 800a76c:	2301      	movs	r3, #1
 800a76e:	47a0      	blx	r4
 800a770:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800a772:	69bb      	ldr	r3, [r7, #24]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d002      	beq.n	800a77e <ReadRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800a778:	f04f 33ff 	mov.w	r3, #4294967295
 800a77c:	e007      	b.n	800a78e <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800a77e:	8bfb      	ldrh	r3, [r7, #30]
 800a780:	3301      	adds	r3, #1
 800a782:	83fb      	strh	r3, [r7, #30]
 800a784:	8bfa      	ldrh	r2, [r7, #30]
 800a786:	893b      	ldrh	r3, [r7, #8]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d3e2      	bcc.n	800a752 <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 800a78c:	69bb      	ldr	r3, [r7, #24]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3724      	adds	r7, #36	@ 0x24
 800a792:	46bd      	mov	sp, r7
 800a794:	bd90      	pop	{r4, r7, pc}

0800a796 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a796:	b590      	push	{r4, r7, lr}
 800a798:	b089      	sub	sp, #36	@ 0x24
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	60f8      	str	r0, [r7, #12]
 800a79e:	607a      	str	r2, [r7, #4]
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	72fb      	strb	r3, [r7, #11]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d11f      	bne.n	800a7fa <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	83fb      	strh	r3, [r7, #30]
 800a7be:	e018      	b.n	800a7f2 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	691c      	ldr	r4, [r3, #16]
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	7b1b      	ldrb	r3, [r3, #12]
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	7afb      	ldrb	r3, [r7, #11]
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	8bfb      	ldrh	r3, [r7, #30]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	b299      	uxth	r1, r3
 800a7d4:	8bfb      	ldrh	r3, [r7, #30]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	441a      	add	r2, r3
 800a7da:	2301      	movs	r3, #1
 800a7dc:	47a0      	blx	r4
 800a7de:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d002      	beq.n	800a7ec <WriteRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800a7e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ea:	e007      	b.n	800a7fc <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800a7ec:	8bfb      	ldrh	r3, [r7, #30]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	83fb      	strh	r3, [r7, #30]
 800a7f2:	8bfa      	ldrh	r2, [r7, #30]
 800a7f4:	893b      	ldrh	r3, [r7, #8]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d3e2      	bcc.n	800a7c0 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800a7fa:	69bb      	ldr	r3, [r7, #24]
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3724      	adds	r7, #36	@ 0x24
 800a800:	46bd      	mov	sp, r7
 800a802:	bd90      	pop	{r4, r7, pc}

0800a804 <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800a804:	b590      	push	{r4, r7, lr}
 800a806:	b087      	sub	sp, #28
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	607a      	str	r2, [r7, #4]
 800a80e:	461a      	mov	r2, r3
 800a810:	460b      	mov	r3, r1
 800a812:	72fb      	strb	r3, [r7, #11]
 800a814:	4613      	mov	r3, r2
 800a816:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d102      	bne.n	800a824 <stts22h_read_reg+0x20>
 800a81e:	f04f 33ff 	mov.w	r3, #4294967295
 800a822:	e009      	b.n	800a838 <stts22h_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	685c      	ldr	r4, [r3, #4]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	68d8      	ldr	r0, [r3, #12]
 800a82c:	893b      	ldrh	r3, [r7, #8]
 800a82e:	7af9      	ldrb	r1, [r7, #11]
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	47a0      	blx	r4
 800a834:	6178      	str	r0, [r7, #20]

  return ret;
 800a836:	697b      	ldr	r3, [r7, #20]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	371c      	adds	r7, #28
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd90      	pop	{r4, r7, pc}

0800a840 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800a840:	b590      	push	{r4, r7, lr}
 800a842:	b087      	sub	sp, #28
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	607a      	str	r2, [r7, #4]
 800a84a:	461a      	mov	r2, r3
 800a84c:	460b      	mov	r3, r1
 800a84e:	72fb      	strb	r3, [r7, #11]
 800a850:	4613      	mov	r3, r2
 800a852:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d102      	bne.n	800a860 <stts22h_write_reg+0x20>
 800a85a:	f04f 33ff 	mov.w	r3, #4294967295
 800a85e:	e009      	b.n	800a874 <stts22h_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681c      	ldr	r4, [r3, #0]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	68d8      	ldr	r0, [r3, #12]
 800a868:	893b      	ldrh	r3, [r7, #8]
 800a86a:	7af9      	ldrb	r1, [r7, #11]
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	47a0      	blx	r4
 800a870:	6178      	str	r0, [r7, #20]

  return ret;
 800a872:	697b      	ldr	r3, [r7, #20]
}
 800a874:	4618      	mov	r0, r3
 800a876:	371c      	adds	r7, #28
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd90      	pop	{r4, r7, pc}

0800a87c <stts22h_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts22h_from_lsb_to_celsius(int16_t lsb)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
 800a882:	4603      	mov	r3, r0
 800a884:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 800a886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a88a:	ee07 3a90 	vmov	s15, r3
 800a88e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a892:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800a8ac <stts22h_from_lsb_to_celsius+0x30>
 800a896:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a89a:	eef0 7a66 	vmov.f32	s15, s13
}
 800a89e:	eeb0 0a67 	vmov.f32	s0, s15
 800a8a2:	370c      	adds	r7, #12
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr
 800a8ac:	42c80000 	.word	0x42c80000

0800a8b0 <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(const stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t val)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800a8bc:	f107 0208 	add.w	r2, r7, #8
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	2104      	movs	r1, #4
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f7ff ff9d 	bl	800a804 <stts22h_read_reg>
 800a8ca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d12a      	bne.n	800a928 <stts22h_temp_data_rate_set+0x78>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 800a8d2:	78fb      	ldrb	r3, [r7, #3]
 800a8d4:	f003 0301 	and.w	r3, r3, #1
 800a8d8:	b2da      	uxtb	r2, r3
 800a8da:	7a3b      	ldrb	r3, [r7, #8]
 800a8dc:	f362 0300 	bfi	r3, r2, #0, #1
 800a8e0:	723b      	strb	r3, [r7, #8]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 800a8e2:	78fb      	ldrb	r3, [r7, #3]
 800a8e4:	085b      	lsrs	r3, r3, #1
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	b2da      	uxtb	r2, r3
 800a8ec:	7a3b      	ldrb	r3, [r7, #8]
 800a8ee:	f362 0382 	bfi	r3, r2, #2, #1
 800a8f2:	723b      	strb	r3, [r7, #8]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 800a8f4:	78fb      	ldrb	r3, [r7, #3]
 800a8f6:	089b      	lsrs	r3, r3, #2
 800a8f8:	f003 0301 	and.w	r3, r3, #1
 800a8fc:	b2da      	uxtb	r2, r3
 800a8fe:	7a3b      	ldrb	r3, [r7, #8]
 800a900:	f362 13c7 	bfi	r3, r2, #7, #1
 800a904:	723b      	strb	r3, [r7, #8]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 800a906:	78fb      	ldrb	r3, [r7, #3]
 800a908:	091b      	lsrs	r3, r3, #4
 800a90a:	f003 0303 	and.w	r3, r3, #3
 800a90e:	b2da      	uxtb	r2, r3
 800a910:	7a3b      	ldrb	r3, [r7, #8]
 800a912:	f362 1305 	bfi	r3, r2, #4, #2
 800a916:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800a918:	f107 0208 	add.w	r2, r7, #8
 800a91c:	2301      	movs	r3, #1
 800a91e:	2104      	movs	r1, #4
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f7ff ff8d 	bl	800a840 <stts22h_write_reg>
 800a926:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a928:	68fb      	ldr	r3, [r7, #12]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
	...

0800a934 <stts22h_temp_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_get(const stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t *val)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL,
 800a93e:	f107 0208 	add.w	r2, r7, #8
 800a942:	2301      	movs	r3, #1
 800a944:	2104      	movs	r1, #4
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f7ff ff5c 	bl	800a804 <stts22h_read_reg>
 800a94c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl, 1);

  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800a94e:	7a3b      	ldrb	r3, [r7, #8]
 800a950:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a954:	b2db      	uxtb	r3, r3
 800a956:	461a      	mov	r2, r3
 800a958:	7a3b      	ldrb	r3, [r7, #8]
 800a95a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	005b      	lsls	r3, r3, #1
 800a962:	431a      	orrs	r2, r3
 800a964:	7a3b      	ldrb	r3, [r7, #8]
 800a966:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	431a      	orrs	r2, r3
                                                 2) |
          (ctrl.avg << 4))
 800a970:	7a3b      	ldrb	r3, [r7, #8]
 800a972:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a976:	b2db      	uxtb	r3, r3
 800a978:	011b      	lsls	r3, r3, #4
                                                 2) |
 800a97a:	4313      	orrs	r3, r2
  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800a97c:	2b32      	cmp	r3, #50	@ 0x32
 800a97e:	f200 8085 	bhi.w	800aa8c <stts22h_temp_data_rate_get+0x158>
 800a982:	a201      	add	r2, pc, #4	@ (adr r2, 800a988 <stts22h_temp_data_rate_get+0x54>)
 800a984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a988:	0800aa55 	.word	0x0800aa55
 800a98c:	0800aa5d 	.word	0x0800aa5d
 800a990:	0800aa6d 	.word	0x0800aa6d
 800a994:	0800aa8d 	.word	0x0800aa8d
 800a998:	0800aa65 	.word	0x0800aa65
 800a99c:	0800aa8d 	.word	0x0800aa8d
 800a9a0:	0800aa8d 	.word	0x0800aa8d
 800a9a4:	0800aa8d 	.word	0x0800aa8d
 800a9a8:	0800aa8d 	.word	0x0800aa8d
 800a9ac:	0800aa8d 	.word	0x0800aa8d
 800a9b0:	0800aa8d 	.word	0x0800aa8d
 800a9b4:	0800aa8d 	.word	0x0800aa8d
 800a9b8:	0800aa8d 	.word	0x0800aa8d
 800a9bc:	0800aa8d 	.word	0x0800aa8d
 800a9c0:	0800aa8d 	.word	0x0800aa8d
 800a9c4:	0800aa8d 	.word	0x0800aa8d
 800a9c8:	0800aa8d 	.word	0x0800aa8d
 800a9cc:	0800aa8d 	.word	0x0800aa8d
 800a9d0:	0800aa75 	.word	0x0800aa75
 800a9d4:	0800aa8d 	.word	0x0800aa8d
 800a9d8:	0800aa8d 	.word	0x0800aa8d
 800a9dc:	0800aa8d 	.word	0x0800aa8d
 800a9e0:	0800aa8d 	.word	0x0800aa8d
 800a9e4:	0800aa8d 	.word	0x0800aa8d
 800a9e8:	0800aa8d 	.word	0x0800aa8d
 800a9ec:	0800aa8d 	.word	0x0800aa8d
 800a9f0:	0800aa8d 	.word	0x0800aa8d
 800a9f4:	0800aa8d 	.word	0x0800aa8d
 800a9f8:	0800aa8d 	.word	0x0800aa8d
 800a9fc:	0800aa8d 	.word	0x0800aa8d
 800aa00:	0800aa8d 	.word	0x0800aa8d
 800aa04:	0800aa8d 	.word	0x0800aa8d
 800aa08:	0800aa8d 	.word	0x0800aa8d
 800aa0c:	0800aa8d 	.word	0x0800aa8d
 800aa10:	0800aa7d 	.word	0x0800aa7d
 800aa14:	0800aa8d 	.word	0x0800aa8d
 800aa18:	0800aa8d 	.word	0x0800aa8d
 800aa1c:	0800aa8d 	.word	0x0800aa8d
 800aa20:	0800aa8d 	.word	0x0800aa8d
 800aa24:	0800aa8d 	.word	0x0800aa8d
 800aa28:	0800aa8d 	.word	0x0800aa8d
 800aa2c:	0800aa8d 	.word	0x0800aa8d
 800aa30:	0800aa8d 	.word	0x0800aa8d
 800aa34:	0800aa8d 	.word	0x0800aa8d
 800aa38:	0800aa8d 	.word	0x0800aa8d
 800aa3c:	0800aa8d 	.word	0x0800aa8d
 800aa40:	0800aa8d 	.word	0x0800aa8d
 800aa44:	0800aa8d 	.word	0x0800aa8d
 800aa48:	0800aa8d 	.word	0x0800aa8d
 800aa4c:	0800aa8d 	.word	0x0800aa8d
 800aa50:	0800aa85 	.word	0x0800aa85
  {
    case STTS22H_POWER_DOWN:
      *val = STTS22H_POWER_DOWN;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	2200      	movs	r2, #0
 800aa58:	701a      	strb	r2, [r3, #0]
      break;
 800aa5a:	e01b      	b.n	800aa94 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_ONE_SHOT:
      *val = STTS22H_ONE_SHOT;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	701a      	strb	r2, [r3, #0]
      break;
 800aa62:	e017      	b.n	800aa94 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_1Hz:
      *val = STTS22H_1Hz;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	2204      	movs	r2, #4
 800aa68:	701a      	strb	r2, [r3, #0]
      break;
 800aa6a:	e013      	b.n	800aa94 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_25Hz:
      *val = STTS22H_25Hz;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	2202      	movs	r2, #2
 800aa70:	701a      	strb	r2, [r3, #0]
      break;
 800aa72:	e00f      	b.n	800aa94 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_50Hz:
      *val = STTS22H_50Hz;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	2212      	movs	r2, #18
 800aa78:	701a      	strb	r2, [r3, #0]
      break;
 800aa7a:	e00b      	b.n	800aa94 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_100Hz:
      *val = STTS22H_100Hz;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	2222      	movs	r2, #34	@ 0x22
 800aa80:	701a      	strb	r2, [r3, #0]
      break;
 800aa82:	e007      	b.n	800aa94 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_200Hz:
      *val = STTS22H_200Hz;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	2232      	movs	r2, #50	@ 0x32
 800aa88:	701a      	strb	r2, [r3, #0]
      break;
 800aa8a:	e003      	b.n	800aa94 <stts22h_temp_data_rate_get+0x160>

    default:
      *val = STTS22H_POWER_DOWN;
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	701a      	strb	r2, [r3, #0]
      break;
 800aa92:	bf00      	nop
  }

  return ret;
 800aa94:	68fb      	ldr	r3, [r7, #12]
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop

0800aaa0 <stts22h_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800aaac:	f107 0208 	add.w	r2, r7, #8
 800aab0:	2301      	movs	r3, #1
 800aab2:	2104      	movs	r1, #4
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f7ff fea5 	bl	800a804 <stts22h_read_reg>
 800aaba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d10f      	bne.n	800aae2 <stts22h_block_data_update_set+0x42>
  {
    ctrl.bdu = val;
 800aac2:	78fb      	ldrb	r3, [r7, #3]
 800aac4:	f003 0301 	and.w	r3, r3, #1
 800aac8:	b2da      	uxtb	r2, r3
 800aaca:	7a3b      	ldrb	r3, [r7, #8]
 800aacc:	f362 1386 	bfi	r3, r2, #6, #1
 800aad0:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800aad2:	f107 0208 	add.w	r2, r7, #8
 800aad6:	2301      	movs	r3, #1
 800aad8:	2104      	movs	r1, #4
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f7ff feb0 	bl	800a840 <stts22h_write_reg>
 800aae0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800aae2:	68fb      	ldr	r3, [r7, #12]
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3710      	adds	r7, #16
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_TEMP_L_OUT, buff, 2);
 800aaf6:	f107 0208 	add.w	r2, r7, #8
 800aafa:	2302      	movs	r3, #2
 800aafc:	2106      	movs	r1, #6
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7ff fe80 	bl	800a804 <stts22h_read_reg>
 800ab04:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800ab06:	7a7b      	ldrb	r3, [r7, #9]
 800ab08:	b21a      	sxth	r2, r3
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	021b      	lsls	r3, r3, #8
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	7a3a      	ldrb	r2, [r7, #8]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	b21a      	sxth	r2, r3
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	801a      	strh	r2, [r3, #0]

  return ret;
 800ab26:	68fb      	ldr	r3, [r7, #12]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_WHOAMI, buff, 1);
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	2101      	movs	r1, #1
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f7ff fe5f 	bl	800a804 <stts22h_read_reg>
 800ab46:	60f8      	str	r0, [r7, #12]

  return ret;
 800ab48:	68fb      	ldr	r3, [r7, #12]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <stts22h_auto_increment_set>:
  * @param  val    Change the values of "if_add_inc" in reg STTS22H.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b084      	sub	sp, #16
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800ab5e:	f107 0208 	add.w	r2, r7, #8
 800ab62:	2301      	movs	r3, #1
 800ab64:	2104      	movs	r1, #4
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f7ff fe4c 	bl	800a804 <stts22h_read_reg>
 800ab6c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10f      	bne.n	800ab94 <stts22h_auto_increment_set+0x42>
  {
    ctrl.if_add_inc = (uint8_t)val;
 800ab74:	78fb      	ldrb	r3, [r7, #3]
 800ab76:	f003 0301 	and.w	r3, r3, #1
 800ab7a:	b2da      	uxtb	r2, r3
 800ab7c:	7a3b      	ldrb	r3, [r7, #8]
 800ab7e:	f362 03c3 	bfi	r3, r2, #3, #1
 800ab82:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800ab84:	f107 0208 	add.w	r2, r7, #8
 800ab88:	2301      	movs	r3, #1
 800ab8a:	2104      	movs	r1, #4
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f7ff fe57 	bl	800a840 <stts22h_write_reg>
 800ab92:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ab94:	68fb      	ldr	r3, [r7, #12]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
	...

0800aba0 <IKS4A1_ENV_SENSOR_Init>:
  *         - ENV_PRESSURE
  *         - ENV_HUMIDITY
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b08c      	sub	sp, #48	@ 0x30
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800abaa:	2300      	movs	r3, #0
 800abac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 800abae:	2301      	movs	r3, #1
 800abb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 800abb2:	2300      	movs	r3, #0
 800abb4:	623b      	str	r3, [r7, #32]
  IKS4A1_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2b02      	cmp	r3, #2
 800abba:	d07c      	beq.n	800acb6 <IKS4A1_ENV_SENSOR_Init+0x116>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	f200 80b2 	bhi.w	800ad28 <IKS4A1_ENV_SENSOR_Init+0x188>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <IKS4A1_ENV_SENSOR_Init+0x32>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d039      	beq.n	800ac44 <IKS4A1_ENV_SENSOR_Init+0xa4>
 800abd0:	e0aa      	b.n	800ad28 <IKS4A1_ENV_SENSOR_Init+0x188>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_STTS22H_0 == 1)
    case IKS4A1_STTS22H_0:
      if (STTS22H_0_Probe(Functions) != BSP_ERROR_NONE)
 800abd2:	6838      	ldr	r0, [r7, #0]
 800abd4:	f000 f9ca 	bl	800af6c <STTS22H_0_Probe>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d002      	beq.n	800abe4 <IKS4A1_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800abde:	f04f 33ff 	mov.w	r3, #4294967295
 800abe2:	e0df      	b.n	800ada4 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800abe4:	4a71      	ldr	r2, [pc, #452]	@ (800adac <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	4970      	ldr	r1, [pc, #448]	@ (800adb0 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800abf6:	f107 0108 	add.w	r1, r7, #8
 800abfa:	4610      	mov	r0, r2
 800abfc:	4798      	blx	r3
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d002      	beq.n	800ac0a <IKS4A1_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800ac04:	f06f 0306 	mvn.w	r3, #6
 800ac08:	e0cc      	b.n	800ada4 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800ac0a:	7a3b      	ldrb	r3, [r7, #8]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d103      	bne.n	800ac18 <IKS4A1_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 800ac10:	6a3b      	ldr	r3, [r7, #32]
 800ac12:	f043 0301 	orr.w	r3, r3, #1
 800ac16:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800ac18:	7abb      	ldrb	r3, [r7, #10]
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d103      	bne.n	800ac26 <IKS4A1_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 800ac1e:	6a3b      	ldr	r3, [r7, #32]
 800ac20:	f043 0304 	orr.w	r3, r3, #4
 800ac24:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800ac26:	7a7b      	ldrb	r3, [r7, #9]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d103      	bne.n	800ac34 <IKS4A1_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 800ac2c:	6a3b      	ldr	r3, [r7, #32]
 800ac2e:	f043 0302 	orr.w	r3, r3, #2
 800ac32:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800ac34:	7afb      	ldrb	r3, [r7, #11]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d17a      	bne.n	800ad30 <IKS4A1_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800ac3a:	6a3b      	ldr	r3, [r7, #32]
 800ac3c:	f043 0308 	orr.w	r3, r3, #8
 800ac40:	623b      	str	r3, [r7, #32]
      }
      break;
 800ac42:	e075      	b.n	800ad30 <IKS4A1_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_LPS22DF_0 == 1)
    case IKS4A1_LPS22DF_0:
      if (LPS22DF_0_Probe(Functions) != BSP_ERROR_NONE)
 800ac44:	6838      	ldr	r0, [r7, #0]
 800ac46:	f000 fa47 	bl	800b0d8 <LPS22DF_0_Probe>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d002      	beq.n	800ac56 <IKS4A1_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 800ac50:	f04f 33ff 	mov.w	r3, #4294967295
 800ac54:	e0a6      	b.n	800ada4 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800ac56:	4a55      	ldr	r2, [pc, #340]	@ (800adac <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	4953      	ldr	r1, [pc, #332]	@ (800adb0 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ac68:	f107 0108 	add.w	r1, r7, #8
 800ac6c:	4610      	mov	r0, r2
 800ac6e:	4798      	blx	r3
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d002      	beq.n	800ac7c <IKS4A1_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800ac76:	f06f 0306 	mvn.w	r3, #6
 800ac7a:	e093      	b.n	800ada4 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800ac7c:	7a3b      	ldrb	r3, [r7, #8]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d103      	bne.n	800ac8a <IKS4A1_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 800ac82:	6a3b      	ldr	r3, [r7, #32]
 800ac84:	f043 0301 	orr.w	r3, r3, #1
 800ac88:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800ac8a:	7abb      	ldrb	r3, [r7, #10]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d103      	bne.n	800ac98 <IKS4A1_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 800ac90:	6a3b      	ldr	r3, [r7, #32]
 800ac92:	f043 0304 	orr.w	r3, r3, #4
 800ac96:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800ac98:	7a7b      	ldrb	r3, [r7, #9]
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d103      	bne.n	800aca6 <IKS4A1_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 800ac9e:	6a3b      	ldr	r3, [r7, #32]
 800aca0:	f043 0302 	orr.w	r3, r3, #2
 800aca4:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800aca6:	7afb      	ldrb	r3, [r7, #11]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d143      	bne.n	800ad34 <IKS4A1_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 800acac:	6a3b      	ldr	r3, [r7, #32]
 800acae:	f043 0308 	orr.w	r3, r3, #8
 800acb2:	623b      	str	r3, [r7, #32]
      }
      break;
 800acb4:	e03e      	b.n	800ad34 <IKS4A1_ENV_SENSOR_Init+0x194>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_SHT40AD1B_0 == 1)
    case IKS4A1_SHT40AD1B_0:
      if (SHT40AD1B_0_Probe(Functions) != BSP_ERROR_NONE)
 800acb6:	6838      	ldr	r0, [r7, #0]
 800acb8:	f000 fade 	bl	800b278 <SHT40AD1B_0_Probe>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d002      	beq.n	800acc8 <IKS4A1_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 800acc2:	f04f 33ff 	mov.w	r3, #4294967295
 800acc6:	e06d      	b.n	800ada4 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800acc8:	4a38      	ldr	r2, [pc, #224]	@ (800adac <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	4937      	ldr	r1, [pc, #220]	@ (800adb0 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800acda:	f107 0108 	add.w	r1, r7, #8
 800acde:	4610      	mov	r0, r2
 800ace0:	4798      	blx	r3
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d002      	beq.n	800acee <IKS4A1_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800ace8:	f06f 0306 	mvn.w	r3, #6
 800acec:	e05a      	b.n	800ada4 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800acee:	7a3b      	ldrb	r3, [r7, #8]
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d103      	bne.n	800acfc <IKS4A1_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 800acf4:	6a3b      	ldr	r3, [r7, #32]
 800acf6:	f043 0301 	orr.w	r3, r3, #1
 800acfa:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800acfc:	7abb      	ldrb	r3, [r7, #10]
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d103      	bne.n	800ad0a <IKS4A1_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	f043 0304 	orr.w	r3, r3, #4
 800ad08:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800ad0a:	7a7b      	ldrb	r3, [r7, #9]
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d103      	bne.n	800ad18 <IKS4A1_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 800ad10:	6a3b      	ldr	r3, [r7, #32]
 800ad12:	f043 0302 	orr.w	r3, r3, #2
 800ad16:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800ad18:	7afb      	ldrb	r3, [r7, #11]
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d10c      	bne.n	800ad38 <IKS4A1_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 800ad1e:	6a3b      	ldr	r3, [r7, #32]
 800ad20:	f043 0308 	orr.w	r3, r3, #8
 800ad24:	623b      	str	r3, [r7, #32]
      }
      break;
 800ad26:	e007      	b.n	800ad38 <IKS4A1_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800ad28:	f06f 0301 	mvn.w	r3, #1
 800ad2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800ad2e:	e004      	b.n	800ad3a <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800ad30:	bf00      	nop
 800ad32:	e002      	b.n	800ad3a <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800ad34:	bf00      	nop
 800ad36:	e000      	b.n	800ad3a <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800ad38:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800ad3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d001      	beq.n	800ad44 <IKS4A1_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 800ad40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad42:	e02f      	b.n	800ada4 <IKS4A1_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800ad44:	2300      	movs	r3, #0
 800ad46:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad48:	e028      	b.n	800ad9c <IKS4A1_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800ad4a:	683a      	ldr	r2, [r7, #0]
 800ad4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad4e:	4013      	ands	r3, r2
 800ad50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d11c      	bne.n	800ad90 <IKS4A1_ENV_SENSOR_Init+0x1f0>
 800ad56:	6a3a      	ldr	r2, [r7, #32]
 800ad58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5a:	4013      	ands	r3, r2
 800ad5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d116      	bne.n	800ad90 <IKS4A1_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800ad62:	4a14      	ldr	r2, [pc, #80]	@ (800adb4 <IKS4A1_ENV_SENSOR_Init+0x214>)
 800ad64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad6a:	4913      	ldr	r1, [pc, #76]	@ (800adb8 <IKS4A1_ENV_SENSOR_Init+0x218>)
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	0092      	lsls	r2, r2, #2
 800ad70:	4413      	add	r3, r2
 800ad72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	490d      	ldr	r1, [pc, #52]	@ (800adb0 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ad80:	4610      	mov	r0, r2
 800ad82:	4798      	blx	r3
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d002      	beq.n	800ad90 <IKS4A1_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800ad8a:	f06f 0304 	mvn.w	r3, #4
 800ad8e:	e009      	b.n	800ada4 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
    }
    function = function << 1;
 800ad90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad92:	005b      	lsls	r3, r3, #1
 800ad94:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800ad96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad98:	3301      	adds	r3, #1
 800ad9a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9e:	2b03      	cmp	r3, #3
 800ada0:	d9d3      	bls.n	800ad4a <IKS4A1_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 800ada2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3730      	adds	r7, #48	@ 0x30
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	2000093c 	.word	0x2000093c
 800adb0:	20000900 	.word	0x20000900
 800adb4:	200001b0 	.word	0x200001b0
 800adb8:	2000090c 	.word	0x2000090c

0800adbc <IKS4A1_ENV_SENSOR_GetCapabilities>:
  * @param  Instance Environmental sensor instance
  * @param  Capabilities pointer to Environmental sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_ENV_SENSOR_Capabilities_t *Capabilities)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2b02      	cmp	r3, #2
 800adca:	d903      	bls.n	800add4 <IKS4A1_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800adcc:	f06f 0301 	mvn.w	r3, #1
 800add0:	60fb      	str	r3, [r7, #12]
 800add2:	e014      	b.n	800adfe <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800add4:	4a0c      	ldr	r2, [pc, #48]	@ (800ae08 <IKS4A1_ENV_SENSOR_GetCapabilities+0x4c>)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	490b      	ldr	r1, [pc, #44]	@ (800ae0c <IKS4A1_ENV_SENSOR_GetCapabilities+0x50>)
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ade6:	6839      	ldr	r1, [r7, #0]
 800ade8:	4610      	mov	r0, r2
 800adea:	4798      	blx	r3
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d003      	beq.n	800adfa <IKS4A1_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800adf2:	f06f 0306 	mvn.w	r3, #6
 800adf6:	60fb      	str	r3, [r7, #12]
 800adf8:	e001      	b.n	800adfe <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800adfa:	2300      	movs	r3, #0
 800adfc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800adfe:	68fb      	ldr	r3, [r7, #12]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3710      	adds	r7, #16
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	2000093c 	.word	0x2000093c
 800ae0c:	20000900 	.word	0x20000900

0800ae10 <IKS4A1_ENV_SENSOR_ReadID>:
  * @param  Instance environmental sensor instance to be used
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2b02      	cmp	r3, #2
 800ae1e:	d903      	bls.n	800ae28 <IKS4A1_ENV_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ae20:	f06f 0301 	mvn.w	r3, #1
 800ae24:	60fb      	str	r3, [r7, #12]
 800ae26:	e014      	b.n	800ae52 <IKS4A1_ENV_SENSOR_ReadID+0x42>
  }
  else if (EnvDrv[Instance]->ReadID(EnvCompObj[Instance], Id) != BSP_ERROR_NONE)
 800ae28:	4a0c      	ldr	r2, [pc, #48]	@ (800ae5c <IKS4A1_ENV_SENSOR_ReadID+0x4c>)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	490b      	ldr	r1, [pc, #44]	@ (800ae60 <IKS4A1_ENV_SENSOR_ReadID+0x50>)
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ae3a:	6839      	ldr	r1, [r7, #0]
 800ae3c:	4610      	mov	r0, r2
 800ae3e:	4798      	blx	r3
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d003      	beq.n	800ae4e <IKS4A1_ENV_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ae46:	f06f 0306 	mvn.w	r3, #6
 800ae4a:	60fb      	str	r3, [r7, #12]
 800ae4c:	e001      	b.n	800ae52 <IKS4A1_ENV_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ae52:	68fb      	ldr	r3, [r7, #12]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	2000093c 	.word	0x2000093c
 800ae60:	20000900 	.word	0x20000900

0800ae64 <IKS4A1_ENV_SENSOR_GetOutputDataRate>:
  *         - ENV_HUMIDITY
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2b02      	cmp	r3, #2
 800ae74:	d903      	bls.n	800ae7e <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ae76:	f06f 0301 	mvn.w	r3, #1
 800ae7a:	617b      	str	r3, [r7, #20]
 800ae7c:	e027      	b.n	800aece <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800ae7e:	4a16      	ldr	r2, [pc, #88]	@ (800aed8 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x74>)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	4013      	ands	r3, r2
 800ae8a:	68ba      	ldr	r2, [r7, #8]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d11b      	bne.n	800aec8 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800ae90:	4a12      	ldr	r2, [pc, #72]	@ (800aedc <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x78>)
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae98:	4911      	ldr	r1, [pc, #68]	@ (800aee0 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x7c>)
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	0092      	lsls	r2, r2, #2
 800ae9e:	4413      	add	r3, r2
 800aea0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	490f      	ldr	r1, [pc, #60]	@ (800aee4 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x80>)
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800aeae:	6879      	ldr	r1, [r7, #4]
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	4798      	blx	r3
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d003      	beq.n	800aec2 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aeba:	f06f 0304 	mvn.w	r3, #4
 800aebe:	617b      	str	r3, [r7, #20]
 800aec0:	e005      	b.n	800aece <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800aec2:	2300      	movs	r3, #0
 800aec4:	617b      	str	r3, [r7, #20]
 800aec6:	e002      	b.n	800aece <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800aec8:	f06f 0301 	mvn.w	r3, #1
 800aecc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800aece:	697b      	ldr	r3, [r7, #20]
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3718      	adds	r7, #24
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	20000948 	.word	0x20000948
 800aedc:	200001b0 	.word	0x200001b0
 800aee0:	2000090c 	.word	0x2000090c
 800aee4:	20000900 	.word	0x20000900

0800aee8 <IKS4A1_ENV_SENSOR_GetValue>:
  *         - ENV_HUMIDITY
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float_t *Value)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2b02      	cmp	r3, #2
 800aef8:	d903      	bls.n	800af02 <IKS4A1_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800aefa:	f06f 0301 	mvn.w	r3, #1
 800aefe:	617b      	str	r3, [r7, #20]
 800af00:	e027      	b.n	800af52 <IKS4A1_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800af02:	4a16      	ldr	r2, [pc, #88]	@ (800af5c <IKS4A1_ENV_SENSOR_GetValue+0x74>)
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	4013      	ands	r3, r2
 800af0e:	68ba      	ldr	r2, [r7, #8]
 800af10:	429a      	cmp	r2, r3
 800af12:	d11b      	bne.n	800af4c <IKS4A1_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800af14:	4a12      	ldr	r2, [pc, #72]	@ (800af60 <IKS4A1_ENV_SENSOR_GetValue+0x78>)
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af1c:	4911      	ldr	r1, [pc, #68]	@ (800af64 <IKS4A1_ENV_SENSOR_GetValue+0x7c>)
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	0092      	lsls	r2, r2, #2
 800af22:	4413      	add	r3, r2
 800af24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	490f      	ldr	r1, [pc, #60]	@ (800af68 <IKS4A1_ENV_SENSOR_GetValue+0x80>)
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800af32:	6879      	ldr	r1, [r7, #4]
 800af34:	4610      	mov	r0, r2
 800af36:	4798      	blx	r3
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d003      	beq.n	800af46 <IKS4A1_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800af3e:	f06f 0304 	mvn.w	r3, #4
 800af42:	617b      	str	r3, [r7, #20]
 800af44:	e005      	b.n	800af52 <IKS4A1_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800af46:	2300      	movs	r3, #0
 800af48:	617b      	str	r3, [r7, #20]
 800af4a:	e002      	b.n	800af52 <IKS4A1_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800af4c:	f06f 0301 	mvn.w	r3, #1
 800af50:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800af52:	697b      	ldr	r3, [r7, #20]
}
 800af54:	4618      	mov	r0, r3
 800af56:	3718      	adds	r7, #24
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	20000948 	.word	0x20000948
 800af60:	200001b0 	.word	0x200001b0
 800af64:	2000090c 	.word	0x2000090c
 800af68:	20000900 	.word	0x20000900

0800af6c <STTS22H_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS22H_0_Probe(uint32_t Functions)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b092      	sub	sp, #72	@ 0x48
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  STTS22H_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800af74:	2300      	movs	r3, #0
 800af76:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS22H_Object_t stts22h_obj_0;
  STTS22H_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = STTS22H_I2C_BUS; /* I2C */
 800af78:	2300      	movs	r3, #0
 800af7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS22H_I2C_ADD_H;
 800af7c:	2371      	movs	r3, #113	@ 0x71
 800af7e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800af82:	4b47      	ldr	r3, [pc, #284]	@ (800b0a0 <STTS22H_0_Probe+0x134>)
 800af84:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800af86:	4b47      	ldr	r3, [pc, #284]	@ (800b0a4 <STTS22H_0_Probe+0x138>)
 800af88:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800af8a:	4b47      	ldr	r3, [pc, #284]	@ (800b0a8 <STTS22H_0_Probe+0x13c>)
 800af8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800af8e:	4b47      	ldr	r3, [pc, #284]	@ (800b0ac <STTS22H_0_Probe+0x140>)
 800af90:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800af92:	4b47      	ldr	r3, [pc, #284]	@ (800b0b0 <STTS22H_0_Probe+0x144>)
 800af94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800af96:	4b47      	ldr	r3, [pc, #284]	@ (800b0b4 <STTS22H_0_Probe+0x148>)
 800af98:	643b      	str	r3, [r7, #64]	@ 0x40

  if (STTS22H_RegisterBusIO(&stts22h_obj_0, &io_ctx) != STTS22H_OK)
 800af9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af9e:	4619      	mov	r1, r3
 800afa0:	4845      	ldr	r0, [pc, #276]	@ (800b0b8 <STTS22H_0_Probe+0x14c>)
 800afa2:	f7ff f973 	bl	800a28c <STTS22H_RegisterBusIO>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d003      	beq.n	800afb4 <STTS22H_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800afac:	f06f 0306 	mvn.w	r3, #6
 800afb0:	647b      	str	r3, [r7, #68]	@ 0x44
 800afb2:	e06f      	b.n	800b094 <STTS22H_0_Probe+0x128>
  }
  else if (STTS22H_ReadID(&stts22h_obj_0, &id) != STTS22H_OK)
 800afb4:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800afb8:	4619      	mov	r1, r3
 800afba:	483f      	ldr	r0, [pc, #252]	@ (800b0b8 <STTS22H_0_Probe+0x14c>)
 800afbc:	f7ff fa05 	bl	800a3ca <STTS22H_ReadID>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d003      	beq.n	800afce <STTS22H_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800afc6:	f06f 0306 	mvn.w	r3, #6
 800afca:	647b      	str	r3, [r7, #68]	@ 0x44
 800afcc:	e062      	b.n	800b094 <STTS22H_0_Probe+0x128>
  }
  else if (id != STTS22H_ID)
 800afce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800afd2:	2ba0      	cmp	r3, #160	@ 0xa0
 800afd4:	d003      	beq.n	800afde <STTS22H_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800afd6:	f06f 0306 	mvn.w	r3, #6
 800afda:	647b      	str	r3, [r7, #68]	@ 0x44
 800afdc:	e05a      	b.n	800b094 <STTS22H_0_Probe+0x128>
  }
  else
  {
    (void)STTS22H_GetCapabilities(&stts22h_obj_0, &cap);
 800afde:	f107 0308 	add.w	r3, r7, #8
 800afe2:	4619      	mov	r1, r3
 800afe4:	4834      	ldr	r0, [pc, #208]	@ (800b0b8 <STTS22H_0_Probe+0x14c>)
 800afe6:	f7ff fa0b 	bl	800a400 <STTS22H_GetCapabilities>

    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800afea:	7a3b      	ldrb	r3, [r7, #8]
 800afec:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800afee:	7a7b      	ldrb	r3, [r7, #9]
 800aff0:	005b      	lsls	r3, r3, #1
 800aff2:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800aff4:	7abb      	ldrb	r3, [r7, #10]
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800affa:	7afb      	ldrb	r3, [r7, #11]
 800affc:	00db      	lsls	r3, r3, #3
 800affe:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800b000:	4a2e      	ldr	r2, [pc, #184]	@ (800b0bc <STTS22H_0_Probe+0x150>)
 800b002:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS4A1_STTS22H_0] = &stts22h_obj_0;
 800b004:	4b2e      	ldr	r3, [pc, #184]	@ (800b0c0 <STTS22H_0_Probe+0x154>)
 800b006:	4a2c      	ldr	r2, [pc, #176]	@ (800b0b8 <STTS22H_0_Probe+0x14c>)
 800b008:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_STTS22H_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS22H_COMMON_Driver;
 800b00a:	4b2e      	ldr	r3, [pc, #184]	@ (800b0c4 <STTS22H_0_Probe+0x158>)
 800b00c:	4a2e      	ldr	r2, [pc, #184]	@ (800b0c8 <STTS22H_0_Probe+0x15c>)
 800b00e:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b012:	2b00      	cmp	r3, #0
 800b014:	d11d      	bne.n	800b052 <STTS22H_0_Probe+0xe6>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f003 0301 	and.w	r3, r3, #1
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d018      	beq.n	800b052 <STTS22H_0_Probe+0xe6>
 800b020:	7a3b      	ldrb	r3, [r7, #8]
 800b022:	2b01      	cmp	r3, #1
 800b024:	d115      	bne.n	800b052 <STTS22H_0_Probe+0xe6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_STTS22H_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS22H_TEMP_Driver;
 800b026:	4b29      	ldr	r3, [pc, #164]	@ (800b0cc <STTS22H_0_Probe+0x160>)
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	4a29      	ldr	r2, [pc, #164]	@ (800b0d0 <STTS22H_0_Probe+0x164>)
 800b02c:	4929      	ldr	r1, [pc, #164]	@ (800b0d4 <STTS22H_0_Probe+0x168>)
 800b02e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_STTS22H_0]->Init(EnvCompObj[IKS4A1_STTS22H_0]) != STTS22H_OK)
 800b032:	4b24      	ldr	r3, [pc, #144]	@ (800b0c4 <STTS22H_0_Probe+0x158>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a21      	ldr	r2, [pc, #132]	@ (800b0c0 <STTS22H_0_Probe+0x154>)
 800b03a:	6812      	ldr	r2, [r2, #0]
 800b03c:	4610      	mov	r0, r2
 800b03e:	4798      	blx	r3
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d003      	beq.n	800b04e <STTS22H_0_Probe+0xe2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b046:	f06f 0304 	mvn.w	r3, #4
 800b04a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b04c:	e001      	b.n	800b052 <STTS22H_0_Probe+0xe6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b04e:	2300      	movs	r3, #0
 800b050:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b054:	2b00      	cmp	r3, #0
 800b056:	d107      	bne.n	800b068 <STTS22H_0_Probe+0xfc>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f003 0304 	and.w	r3, r3, #4
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d002      	beq.n	800b068 <STTS22H_0_Probe+0xfc>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b062:	f06f 0304 	mvn.w	r3, #4
 800b066:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b068:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d107      	bne.n	800b07e <STTS22H_0_Probe+0x112>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f003 0302 	and.w	r3, r3, #2
 800b074:	2b00      	cmp	r3, #0
 800b076:	d002      	beq.n	800b07e <STTS22H_0_Probe+0x112>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b078:	f06f 0304 	mvn.w	r3, #4
 800b07c:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b07e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b080:	2b00      	cmp	r3, #0
 800b082:	d107      	bne.n	800b094 <STTS22H_0_Probe+0x128>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f003 0308 	and.w	r3, r3, #8
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d002      	beq.n	800b094 <STTS22H_0_Probe+0x128>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b08e:	f06f 0304 	mvn.w	r3, #4
 800b092:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b096:	4618      	mov	r0, r3
 800b098:	3748      	adds	r7, #72	@ 0x48
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	08002389 	.word	0x08002389
 800b0a4:	080023ed 	.word	0x080023ed
 800b0a8:	080024a1 	.word	0x080024a1
 800b0ac:	0800243d 	.word	0x0800243d
 800b0b0:	080025ad 	.word	0x080025ad
 800b0b4:	0800c341 	.word	0x0800c341
 800b0b8:	20000954 	.word	0x20000954
 800b0bc:	20000948 	.word	0x20000948
 800b0c0:	20000900 	.word	0x20000900
 800b0c4:	2000093c 	.word	0x2000093c
 800b0c8:	2000018c 	.word	0x2000018c
 800b0cc:	200001b0 	.word	0x200001b0
 800b0d0:	2000090c 	.word	0x2000090c
 800b0d4:	2000019c 	.word	0x2000019c

0800b0d8 <LPS22DF_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22DF_0_Probe(uint32_t Functions)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b092      	sub	sp, #72	@ 0x48
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
  LPS22DF_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22DF_Object_t lps22df_obj_0;
  LPS22DF_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = LPS22DF_I2C_BUS; /* I2C */
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22DF_I2C_ADD_H;
 800b0e8:	23bb      	movs	r3, #187	@ 0xbb
 800b0ea:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b0ee:	4b53      	ldr	r3, [pc, #332]	@ (800b23c <LPS22DF_0_Probe+0x164>)
 800b0f0:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b0f2:	4b53      	ldr	r3, [pc, #332]	@ (800b240 <LPS22DF_0_Probe+0x168>)
 800b0f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b0f6:	4b53      	ldr	r3, [pc, #332]	@ (800b244 <LPS22DF_0_Probe+0x16c>)
 800b0f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b0fa:	4b53      	ldr	r3, [pc, #332]	@ (800b248 <LPS22DF_0_Probe+0x170>)
 800b0fc:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b0fe:	4b53      	ldr	r3, [pc, #332]	@ (800b24c <LPS22DF_0_Probe+0x174>)
 800b100:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800b102:	4b53      	ldr	r3, [pc, #332]	@ (800b250 <LPS22DF_0_Probe+0x178>)
 800b104:	643b      	str	r3, [r7, #64]	@ 0x40

  if (LPS22DF_RegisterBusIO(&lps22df_obj_0, &io_ctx) != LPS22DF_OK)
 800b106:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b10a:	4619      	mov	r1, r3
 800b10c:	4851      	ldr	r0, [pc, #324]	@ (800b254 <LPS22DF_0_Probe+0x17c>)
 800b10e:	f7fa f8bd 	bl	800528c <LPS22DF_RegisterBusIO>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d003      	beq.n	800b120 <LPS22DF_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b118:	f06f 0306 	mvn.w	r3, #6
 800b11c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b11e:	e087      	b.n	800b230 <LPS22DF_0_Probe+0x158>
  }
  else if (LPS22DF_ReadID(&lps22df_obj_0, &id) != LPS22DF_OK)
 800b120:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b124:	4619      	mov	r1, r3
 800b126:	484b      	ldr	r0, [pc, #300]	@ (800b254 <LPS22DF_0_Probe+0x17c>)
 800b128:	f7fa f959 	bl	80053de <LPS22DF_ReadID>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d003      	beq.n	800b13a <LPS22DF_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b132:	f06f 0306 	mvn.w	r3, #6
 800b136:	647b      	str	r3, [r7, #68]	@ 0x44
 800b138:	e07a      	b.n	800b230 <LPS22DF_0_Probe+0x158>
  }
  else if (id != LPS22DF_ID)
 800b13a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b13e:	2bb4      	cmp	r3, #180	@ 0xb4
 800b140:	d003      	beq.n	800b14a <LPS22DF_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b142:	f06f 0306 	mvn.w	r3, #6
 800b146:	647b      	str	r3, [r7, #68]	@ 0x44
 800b148:	e072      	b.n	800b230 <LPS22DF_0_Probe+0x158>
  }
  else
  {
    (void)LPS22DF_GetCapabilities(&lps22df_obj_0, &cap);
 800b14a:	f107 0308 	add.w	r3, r7, #8
 800b14e:	4619      	mov	r1, r3
 800b150:	4840      	ldr	r0, [pc, #256]	@ (800b254 <LPS22DF_0_Probe+0x17c>)
 800b152:	f7fa f95f 	bl	8005414 <LPS22DF_GetCapabilities>

    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800b156:	7a3b      	ldrb	r3, [r7, #8]
 800b158:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800b15a:	7a7b      	ldrb	r3, [r7, #9]
 800b15c:	005b      	lsls	r3, r3, #1
 800b15e:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800b160:	7abb      	ldrb	r3, [r7, #10]
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800b166:	7afb      	ldrb	r3, [r7, #11]
 800b168:	00db      	lsls	r3, r3, #3
 800b16a:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800b16c:	4a3a      	ldr	r2, [pc, #232]	@ (800b258 <LPS22DF_0_Probe+0x180>)
 800b16e:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS4A1_LPS22DF_0] = &lps22df_obj_0;
 800b170:	4b3a      	ldr	r3, [pc, #232]	@ (800b25c <LPS22DF_0_Probe+0x184>)
 800b172:	4a38      	ldr	r2, [pc, #224]	@ (800b254 <LPS22DF_0_Probe+0x17c>)
 800b174:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_LPS22DF_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22DF_COMMON_Driver;
 800b176:	4b3a      	ldr	r3, [pc, #232]	@ (800b260 <LPS22DF_0_Probe+0x188>)
 800b178:	4a3a      	ldr	r2, [pc, #232]	@ (800b264 <LPS22DF_0_Probe+0x18c>)
 800b17a:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b17c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d11e      	bne.n	800b1c0 <LPS22DF_0_Probe+0xe8>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f003 0301 	and.w	r3, r3, #1
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d019      	beq.n	800b1c0 <LPS22DF_0_Probe+0xe8>
 800b18c:	7a3b      	ldrb	r3, [r7, #8]
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d116      	bne.n	800b1c0 <LPS22DF_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_TEMP_Driver;
 800b192:	4b35      	ldr	r3, [pc, #212]	@ (800b268 <LPS22DF_0_Probe+0x190>)
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	4a35      	ldr	r2, [pc, #212]	@ (800b26c <LPS22DF_0_Probe+0x194>)
 800b198:	3304      	adds	r3, #4
 800b19a:	4935      	ldr	r1, [pc, #212]	@ (800b270 <LPS22DF_0_Probe+0x198>)
 800b19c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800b1a0:	4b2f      	ldr	r3, [pc, #188]	@ (800b260 <LPS22DF_0_Probe+0x188>)
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4a2d      	ldr	r2, [pc, #180]	@ (800b25c <LPS22DF_0_Probe+0x184>)
 800b1a8:	6852      	ldr	r2, [r2, #4]
 800b1aa:	4610      	mov	r0, r2
 800b1ac:	4798      	blx	r3
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d003      	beq.n	800b1bc <LPS22DF_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b1b4:	f06f 0304 	mvn.w	r3, #4
 800b1b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1ba:	e001      	b.n	800b1c0 <LPS22DF_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800b1c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d11e      	bne.n	800b204 <LPS22DF_0_Probe+0x12c>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f003 0302 	and.w	r3, r3, #2
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d019      	beq.n	800b204 <LPS22DF_0_Probe+0x12c>
 800b1d0:	7a7b      	ldrb	r3, [r7, #9]
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d116      	bne.n	800b204 <LPS22DF_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_PRESS_Driver;
 800b1d6:	4b24      	ldr	r3, [pc, #144]	@ (800b268 <LPS22DF_0_Probe+0x190>)
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	4a24      	ldr	r2, [pc, #144]	@ (800b26c <LPS22DF_0_Probe+0x194>)
 800b1dc:	3304      	adds	r3, #4
 800b1de:	4925      	ldr	r1, [pc, #148]	@ (800b274 <LPS22DF_0_Probe+0x19c>)
 800b1e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800b1e4:	4b1e      	ldr	r3, [pc, #120]	@ (800b260 <LPS22DF_0_Probe+0x188>)
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a1c      	ldr	r2, [pc, #112]	@ (800b25c <LPS22DF_0_Probe+0x184>)
 800b1ec:	6852      	ldr	r2, [r2, #4]
 800b1ee:	4610      	mov	r0, r2
 800b1f0:	4798      	blx	r3
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d003      	beq.n	800b200 <LPS22DF_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b1f8:	f06f 0304 	mvn.w	r3, #4
 800b1fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1fe:	e001      	b.n	800b204 <LPS22DF_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b200:	2300      	movs	r3, #0
 800b202:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b206:	2b00      	cmp	r3, #0
 800b208:	d107      	bne.n	800b21a <LPS22DF_0_Probe+0x142>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f003 0304 	and.w	r3, r3, #4
 800b210:	2b00      	cmp	r3, #0
 800b212:	d002      	beq.n	800b21a <LPS22DF_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b214:	f06f 0304 	mvn.w	r3, #4
 800b218:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b21a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d107      	bne.n	800b230 <LPS22DF_0_Probe+0x158>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f003 0308 	and.w	r3, r3, #8
 800b226:	2b00      	cmp	r3, #0
 800b228:	d002      	beq.n	800b230 <LPS22DF_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b22a:	f06f 0304 	mvn.w	r3, #4
 800b22e:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b232:	4618      	mov	r0, r3
 800b234:	3748      	adds	r7, #72	@ 0x48
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	08002389 	.word	0x08002389
 800b240:	080023ed 	.word	0x080023ed
 800b244:	080024a1 	.word	0x080024a1
 800b248:	0800243d 	.word	0x0800243d
 800b24c:	080025ad 	.word	0x080025ad
 800b250:	0800c341 	.word	0x0800c341
 800b254:	2000098c 	.word	0x2000098c
 800b258:	20000948 	.word	0x20000948
 800b25c:	20000900 	.word	0x20000900
 800b260:	2000093c 	.word	0x2000093c
 800b264:	2000006c 	.word	0x2000006c
 800b268:	200001b0 	.word	0x200001b0
 800b26c:	2000090c 	.word	0x2000090c
 800b270:	20000090 	.word	0x20000090
 800b274:	2000007c 	.word	0x2000007c

0800b278 <SHT40AD1B_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t SHT40AD1B_0_Probe(uint32_t Functions)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b092      	sub	sp, #72	@ 0x48
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  SHT40AD1B_IO_t            io_ctx;
  uint8_t                   id;
  int32_t                   ret = BSP_ERROR_NONE;
 800b280:	2300      	movs	r3, #0
 800b282:	647b      	str	r3, [r7, #68]	@ 0x44
  static SHT40AD1B_Object_t sht40ad1b_obj_0;
  SHT40AD1B_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = SHT40AD1B_I2C_BUS; /* I2C */
 800b284:	2300      	movs	r3, #0
 800b286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = SHT40AD1B_I2C_ADDRESS;
 800b288:	2389      	movs	r3, #137	@ 0x89
 800b28a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b28e:	4b53      	ldr	r3, [pc, #332]	@ (800b3dc <SHT40AD1B_0_Probe+0x164>)
 800b290:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b292:	4b53      	ldr	r3, [pc, #332]	@ (800b3e0 <SHT40AD1B_0_Probe+0x168>)
 800b294:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.Read        = IKS4A1_I2C_READ;
 800b296:	4b53      	ldr	r3, [pc, #332]	@ (800b3e4 <SHT40AD1B_0_Probe+0x16c>)
 800b298:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.Write       = IKS4A1_I2C_WRITE;
 800b29a:	4b53      	ldr	r3, [pc, #332]	@ (800b3e8 <SHT40AD1B_0_Probe+0x170>)
 800b29c:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b29e:	4b53      	ldr	r3, [pc, #332]	@ (800b3ec <SHT40AD1B_0_Probe+0x174>)
 800b2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800b2a2:	4b53      	ldr	r3, [pc, #332]	@ (800b3f0 <SHT40AD1B_0_Probe+0x178>)
 800b2a4:	643b      	str	r3, [r7, #64]	@ 0x40

  if (SHT40AD1B_RegisterBusIO(&sht40ad1b_obj_0, &io_ctx) != SHT40AD1B_OK)
 800b2a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	4851      	ldr	r0, [pc, #324]	@ (800b3f4 <SHT40AD1B_0_Probe+0x17c>)
 800b2ae:	f7fe fce9 	bl	8009c84 <SHT40AD1B_RegisterBusIO>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d003      	beq.n	800b2c0 <SHT40AD1B_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b2b8:	f06f 0306 	mvn.w	r3, #6
 800b2bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2be:	e087      	b.n	800b3d0 <SHT40AD1B_0_Probe+0x158>
  }
  else if (SHT40AD1B_ReadID(&sht40ad1b_obj_0, &id) != SHT40AD1B_OK)
 800b2c0:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	484b      	ldr	r0, [pc, #300]	@ (800b3f4 <SHT40AD1B_0_Probe+0x17c>)
 800b2c8:	f7fe fd4c 	bl	8009d64 <SHT40AD1B_ReadID>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d003      	beq.n	800b2da <SHT40AD1B_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b2d2:	f06f 0306 	mvn.w	r3, #6
 800b2d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2d8:	e07a      	b.n	800b3d0 <SHT40AD1B_0_Probe+0x158>
  }
  else if (id != SHT40AD1B_ID)
 800b2da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d003      	beq.n	800b2ea <SHT40AD1B_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b2e2:	f06f 0306 	mvn.w	r3, #6
 800b2e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2e8:	e072      	b.n	800b3d0 <SHT40AD1B_0_Probe+0x158>
  }
  else
  {
    (void)SHT40AD1B_GetCapabilities(&sht40ad1b_obj_0, &cap);
 800b2ea:	f107 0308 	add.w	r3, r7, #8
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	4840      	ldr	r0, [pc, #256]	@ (800b3f4 <SHT40AD1B_0_Probe+0x17c>)
 800b2f2:	f7fe fd47 	bl	8009d84 <SHT40AD1B_GetCapabilities>

    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800b2f6:	7a3b      	ldrb	r3, [r7, #8]
 800b2f8:	461a      	mov	r2, r3
                                         | ((uint32_t)cap.Pressure << 1)
 800b2fa:	7a7b      	ldrb	r3, [r7, #9]
 800b2fc:	005b      	lsls	r3, r3, #1
 800b2fe:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Humidity << 2)
 800b300:	7abb      	ldrb	r3, [r7, #10]
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Gas      << 3);
 800b306:	7afb      	ldrb	r3, [r7, #11]
 800b308:	00db      	lsls	r3, r3, #3
 800b30a:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800b30c:	4a3a      	ldr	r2, [pc, #232]	@ (800b3f8 <SHT40AD1B_0_Probe+0x180>)
 800b30e:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS4A1_SHT40AD1B_0] = &sht40ad1b_obj_0;
 800b310:	4b3a      	ldr	r3, [pc, #232]	@ (800b3fc <SHT40AD1B_0_Probe+0x184>)
 800b312:	4a38      	ldr	r2, [pc, #224]	@ (800b3f4 <SHT40AD1B_0_Probe+0x17c>)
 800b314:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_SHT40AD1B_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&SHT40AD1B_COMMON_Driver;
 800b316:	4b3a      	ldr	r3, [pc, #232]	@ (800b400 <SHT40AD1B_0_Probe+0x188>)
 800b318:	4a3a      	ldr	r2, [pc, #232]	@ (800b404 <SHT40AD1B_0_Probe+0x18c>)
 800b31a:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b31c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d11e      	bne.n	800b360 <SHT40AD1B_0_Probe+0xe8>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f003 0301 	and.w	r3, r3, #1
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d019      	beq.n	800b360 <SHT40AD1B_0_Probe+0xe8>
 800b32c:	7a3b      	ldrb	r3, [r7, #8]
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d116      	bne.n	800b360 <SHT40AD1B_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_TEMP_Driver;
 800b332:	4b35      	ldr	r3, [pc, #212]	@ (800b408 <SHT40AD1B_0_Probe+0x190>)
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	4a35      	ldr	r2, [pc, #212]	@ (800b40c <SHT40AD1B_0_Probe+0x194>)
 800b338:	3308      	adds	r3, #8
 800b33a:	4935      	ldr	r1, [pc, #212]	@ (800b410 <SHT40AD1B_0_Probe+0x198>)
 800b33c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800b340:	4b2f      	ldr	r3, [pc, #188]	@ (800b400 <SHT40AD1B_0_Probe+0x188>)
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a2d      	ldr	r2, [pc, #180]	@ (800b3fc <SHT40AD1B_0_Probe+0x184>)
 800b348:	6892      	ldr	r2, [r2, #8]
 800b34a:	4610      	mov	r0, r2
 800b34c:	4798      	blx	r3
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d003      	beq.n	800b35c <SHT40AD1B_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b354:	f06f 0304 	mvn.w	r3, #4
 800b358:	647b      	str	r3, [r7, #68]	@ 0x44
 800b35a:	e001      	b.n	800b360 <SHT40AD1B_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b35c:	2300      	movs	r3, #0
 800b35e:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800b360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b362:	2b00      	cmp	r3, #0
 800b364:	d11e      	bne.n	800b3a4 <SHT40AD1B_0_Probe+0x12c>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f003 0304 	and.w	r3, r3, #4
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d019      	beq.n	800b3a4 <SHT40AD1B_0_Probe+0x12c>
 800b370:	7abb      	ldrb	r3, [r7, #10]
 800b372:	2b01      	cmp	r3, #1
 800b374:	d116      	bne.n	800b3a4 <SHT40AD1B_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_HUM_Driver;
 800b376:	4b24      	ldr	r3, [pc, #144]	@ (800b408 <SHT40AD1B_0_Probe+0x190>)
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	4a24      	ldr	r2, [pc, #144]	@ (800b40c <SHT40AD1B_0_Probe+0x194>)
 800b37c:	3308      	adds	r3, #8
 800b37e:	4925      	ldr	r1, [pc, #148]	@ (800b414 <SHT40AD1B_0_Probe+0x19c>)
 800b380:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800b384:	4b1e      	ldr	r3, [pc, #120]	@ (800b400 <SHT40AD1B_0_Probe+0x188>)
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a1c      	ldr	r2, [pc, #112]	@ (800b3fc <SHT40AD1B_0_Probe+0x184>)
 800b38c:	6892      	ldr	r2, [r2, #8]
 800b38e:	4610      	mov	r0, r2
 800b390:	4798      	blx	r3
 800b392:	4603      	mov	r3, r0
 800b394:	2b00      	cmp	r3, #0
 800b396:	d003      	beq.n	800b3a0 <SHT40AD1B_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b398:	f06f 0304 	mvn.w	r3, #4
 800b39c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b39e:	e001      	b.n	800b3a4 <SHT40AD1B_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b3a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d107      	bne.n	800b3ba <SHT40AD1B_0_Probe+0x142>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f003 0302 	and.w	r3, r3, #2
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d002      	beq.n	800b3ba <SHT40AD1B_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3b4:	f06f 0304 	mvn.w	r3, #4
 800b3b8:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b3ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d107      	bne.n	800b3d0 <SHT40AD1B_0_Probe+0x158>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f003 0308 	and.w	r3, r3, #8
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d002      	beq.n	800b3d0 <SHT40AD1B_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3ca:	f06f 0304 	mvn.w	r3, #4
 800b3ce:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b3d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3748      	adds	r7, #72	@ 0x48
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	08002389 	.word	0x08002389
 800b3e0:	080023ed 	.word	0x080023ed
 800b3e4:	08002559 	.word	0x08002559
 800b3e8:	08002505 	.word	0x08002505
 800b3ec:	080025ad 	.word	0x080025ad
 800b3f0:	0800c341 	.word	0x0800c341
 800b3f4:	200009c4 	.word	0x200009c4
 800b3f8:	20000948 	.word	0x20000948
 800b3fc:	20000900 	.word	0x20000900
 800b400:	2000093c 	.word	0x2000093c
 800b404:	20000154 	.word	0x20000154
 800b408:	200001b0 	.word	0x200001b0
 800b40c:	2000090c 	.word	0x2000090c
 800b410:	20000178 	.word	0x20000178
 800b414:	20000164 	.word	0x20000164

0800b418 <IKS4A1_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b08e      	sub	sp, #56	@ 0x38
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b422:	2300      	movs	r3, #0
 800b424:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800b426:	2301      	movs	r3, #1
 800b428:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800b42a:	2300      	movs	r3, #0
 800b42c:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS4A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2b03      	cmp	r3, #3
 800b432:	f200 80d4 	bhi.w	800b5de <IKS4A1_MOTION_SENSOR_Init+0x1c6>
 800b436:	a201      	add	r2, pc, #4	@ (adr r2, 800b43c <IKS4A1_MOTION_SENSOR_Init+0x24>)
 800b438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b43c:	0800b44d 	.word	0x0800b44d
 800b440:	0800b4b3 	.word	0x0800b4b3
 800b444:	0800b517 	.word	0x0800b517
 800b448:	0800b57b 	.word	0x0800b57b
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS4A1_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800b44c:	6838      	ldr	r0, [r7, #0]
 800b44e:	f000 fa35 	bl	800b8bc <LIS2MDL_0_Probe>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d002      	beq.n	800b45e <IKS4A1_MOTION_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 800b458:	f04f 33ff 	mov.w	r3, #4294967295
 800b45c:	e101      	b.n	800b662 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b45e:	4a83      	ldr	r2, [pc, #524]	@ (800b66c <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	4981      	ldr	r1, [pc, #516]	@ (800b670 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b470:	f107 010c 	add.w	r1, r7, #12
 800b474:	4610      	mov	r0, r2
 800b476:	4798      	blx	r3
 800b478:	4603      	mov	r3, r0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d002      	beq.n	800b484 <IKS4A1_MOTION_SENSOR_Init+0x6c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b47e:	f06f 0306 	mvn.w	r3, #6
 800b482:	e0ee      	b.n	800b662 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b484:	7b3b      	ldrb	r3, [r7, #12]
 800b486:	2b01      	cmp	r3, #1
 800b488:	d103      	bne.n	800b492 <IKS4A1_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_ACCELERO;
 800b48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b48c:	f043 0302 	orr.w	r3, r3, #2
 800b490:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b492:	7b7b      	ldrb	r3, [r7, #13]
 800b494:	2b01      	cmp	r3, #1
 800b496:	d103      	bne.n	800b4a0 <IKS4A1_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_GYRO;
 800b498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b49a:	f043 0301 	orr.w	r3, r3, #1
 800b49e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b4a0:	7bbb      	ldrb	r3, [r7, #14]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	f040 809f 	bne.w	800b5e6 <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      {
        component_functions |= MOTION_MAGNETO;
 800b4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4aa:	f043 0304 	orr.w	r3, r3, #4
 800b4ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b4b0:	e099      	b.n	800b5e6 <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case IKS4A1_LSM6DSV16X_0:
      if (LSM6DSV16X_0_Probe(Functions) != BSP_ERROR_NONE)
 800b4b2:	6838      	ldr	r0, [r7, #0]
 800b4b4:	f000 faaa 	bl	800ba0c <LSM6DSV16X_0_Probe>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d002      	beq.n	800b4c4 <IKS4A1_MOTION_SENSOR_Init+0xac>
      {
        return BSP_ERROR_NO_INIT;
 800b4be:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c2:	e0ce      	b.n	800b662 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b4c4:	4a69      	ldr	r2, [pc, #420]	@ (800b66c <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	4968      	ldr	r1, [pc, #416]	@ (800b670 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b4d6:	f107 010c 	add.w	r1, r7, #12
 800b4da:	4610      	mov	r0, r2
 800b4dc:	4798      	blx	r3
 800b4de:	4603      	mov	r3, r0
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d002      	beq.n	800b4ea <IKS4A1_MOTION_SENSOR_Init+0xd2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b4e4:	f06f 0306 	mvn.w	r3, #6
 800b4e8:	e0bb      	b.n	800b662 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b4ea:	7b3b      	ldrb	r3, [r7, #12]
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d103      	bne.n	800b4f8 <IKS4A1_MOTION_SENSOR_Init+0xe0>
      {
        component_functions |= MOTION_ACCELERO;
 800b4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f2:	f043 0302 	orr.w	r3, r3, #2
 800b4f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b4f8:	7b7b      	ldrb	r3, [r7, #13]
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d103      	bne.n	800b506 <IKS4A1_MOTION_SENSOR_Init+0xee>
      {
        component_functions |= MOTION_GYRO;
 800b4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b500:	f043 0301 	orr.w	r3, r3, #1
 800b504:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b506:	7bbb      	ldrb	r3, [r7, #14]
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d16e      	bne.n	800b5ea <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      {
        component_functions |= MOTION_MAGNETO;
 800b50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b50e:	f043 0304 	orr.w	r3, r3, #4
 800b512:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b514:	e069      	b.n	800b5ea <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2DUXS12_0 == 1)
    case IKS4A1_LIS2DUXS12_0:
      if (LIS2DUXS12_0_Probe(Functions) != BSP_ERROR_NONE)
 800b516:	6838      	ldr	r0, [r7, #0]
 800b518:	f000 fb44 	bl	800bba4 <LIS2DUXS12_0_Probe>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d002      	beq.n	800b528 <IKS4A1_MOTION_SENSOR_Init+0x110>
      {
        return BSP_ERROR_NO_INIT;
 800b522:	f04f 33ff 	mov.w	r3, #4294967295
 800b526:	e09c      	b.n	800b662 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b528:	4a50      	ldr	r2, [pc, #320]	@ (800b66c <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	494f      	ldr	r1, [pc, #316]	@ (800b670 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b53a:	f107 010c 	add.w	r1, r7, #12
 800b53e:	4610      	mov	r0, r2
 800b540:	4798      	blx	r3
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d002      	beq.n	800b54e <IKS4A1_MOTION_SENSOR_Init+0x136>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b548:	f06f 0306 	mvn.w	r3, #6
 800b54c:	e089      	b.n	800b662 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b54e:	7b3b      	ldrb	r3, [r7, #12]
 800b550:	2b01      	cmp	r3, #1
 800b552:	d103      	bne.n	800b55c <IKS4A1_MOTION_SENSOR_Init+0x144>
      {
        component_functions |= MOTION_ACCELERO;
 800b554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b556:	f043 0302 	orr.w	r3, r3, #2
 800b55a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b55c:	7b7b      	ldrb	r3, [r7, #13]
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d103      	bne.n	800b56a <IKS4A1_MOTION_SENSOR_Init+0x152>
      {
        component_functions |= MOTION_GYRO;
 800b562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b564:	f043 0301 	orr.w	r3, r3, #1
 800b568:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b56a:	7bbb      	ldrb	r3, [r7, #14]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d13e      	bne.n	800b5ee <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      {
        component_functions |= MOTION_MAGNETO;
 800b570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b572:	f043 0304 	orr.w	r3, r3, #4
 800b576:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b578:	e039      	b.n	800b5ee <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSO16IS_0 == 1)
    case IKS4A1_LSM6DSO16IS_0:
      if (LSM6DSO16IS_0_Probe(Functions) != BSP_ERROR_NONE)
 800b57a:	6838      	ldr	r0, [r7, #0]
 800b57c:	f000 fbc8 	bl	800bd10 <LSM6DSO16IS_0_Probe>
 800b580:	4603      	mov	r3, r0
 800b582:	2b00      	cmp	r3, #0
 800b584:	d002      	beq.n	800b58c <IKS4A1_MOTION_SENSOR_Init+0x174>
      {
        return BSP_ERROR_NO_INIT;
 800b586:	f04f 33ff 	mov.w	r3, #4294967295
 800b58a:	e06a      	b.n	800b662 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b58c:	4a37      	ldr	r2, [pc, #220]	@ (800b66c <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b594:	68db      	ldr	r3, [r3, #12]
 800b596:	4936      	ldr	r1, [pc, #216]	@ (800b670 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b59e:	f107 010c 	add.w	r1, r7, #12
 800b5a2:	4610      	mov	r0, r2
 800b5a4:	4798      	blx	r3
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d002      	beq.n	800b5b2 <IKS4A1_MOTION_SENSOR_Init+0x19a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b5ac:	f06f 0306 	mvn.w	r3, #6
 800b5b0:	e057      	b.n	800b662 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b5b2:	7b3b      	ldrb	r3, [r7, #12]
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d103      	bne.n	800b5c0 <IKS4A1_MOTION_SENSOR_Init+0x1a8>
      {
        component_functions |= MOTION_ACCELERO;
 800b5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ba:	f043 0302 	orr.w	r3, r3, #2
 800b5be:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b5c0:	7b7b      	ldrb	r3, [r7, #13]
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d103      	bne.n	800b5ce <IKS4A1_MOTION_SENSOR_Init+0x1b6>
      {
        component_functions |= MOTION_GYRO;
 800b5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c8:	f043 0301 	orr.w	r3, r3, #1
 800b5cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b5ce:	7bbb      	ldrb	r3, [r7, #14]
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d10e      	bne.n	800b5f2 <IKS4A1_MOTION_SENSOR_Init+0x1da>
      {
        component_functions |= MOTION_MAGNETO;
 800b5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5d6:	f043 0304 	orr.w	r3, r3, #4
 800b5da:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b5dc:	e009      	b.n	800b5f2 <IKS4A1_MOTION_SENSOR_Init+0x1da>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b5de:	f06f 0301 	mvn.w	r3, #1
 800b5e2:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800b5e4:	e006      	b.n	800b5f4 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b5e6:	bf00      	nop
 800b5e8:	e004      	b.n	800b5f4 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b5ea:	bf00      	nop
 800b5ec:	e002      	b.n	800b5f4 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b5ee:	bf00      	nop
 800b5f0:	e000      	b.n	800b5f4 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b5f2:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b5f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d001      	beq.n	800b5fe <IKS4A1_MOTION_SENSOR_Init+0x1e6>
  {
    return ret;
 800b5fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5fc:	e031      	b.n	800b662 <IKS4A1_MOTION_SENSOR_Init+0x24a>
  }

  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800b5fe:	2300      	movs	r3, #0
 800b600:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b602:	e02a      	b.n	800b65a <IKS4A1_MOTION_SENSOR_Init+0x242>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b604:	683a      	ldr	r2, [r7, #0]
 800b606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b608:	4013      	ands	r3, r2
 800b60a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d11e      	bne.n	800b64e <IKS4A1_MOTION_SENSOR_Init+0x236>
 800b610:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b614:	4013      	ands	r3, r2
 800b616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b618:	429a      	cmp	r2, r3
 800b61a:	d118      	bne.n	800b64e <IKS4A1_MOTION_SENSOR_Init+0x236>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b61c:	4a15      	ldr	r2, [pc, #84]	@ (800b674 <IKS4A1_MOTION_SENSOR_Init+0x25c>)
 800b61e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b620:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b624:	4814      	ldr	r0, [pc, #80]	@ (800b678 <IKS4A1_MOTION_SENSOR_Init+0x260>)
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	4613      	mov	r3, r2
 800b62a:	005b      	lsls	r3, r3, #1
 800b62c:	4413      	add	r3, r2
 800b62e:	440b      	add	r3, r1
 800b630:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	490e      	ldr	r1, [pc, #56]	@ (800b670 <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b63e:	4610      	mov	r0, r2
 800b640:	4798      	blx	r3
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	d002      	beq.n	800b64e <IKS4A1_MOTION_SENSOR_Init+0x236>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b648:	f06f 0304 	mvn.w	r3, #4
 800b64c:	e009      	b.n	800b662 <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
    }
    function = function << 1;
 800b64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b650:	005b      	lsls	r3, r3, #1
 800b652:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800b654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b656:	3301      	adds	r3, #1
 800b658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b65a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b65c:	2b02      	cmp	r3, #2
 800b65e:	d9d1      	bls.n	800b604 <IKS4A1_MOTION_SENSOR_Init+0x1ec>
  }

  return ret;
 800b660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b662:	4618      	mov	r0, r3
 800b664:	3738      	adds	r7, #56	@ 0x38
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	20000a48 	.word	0x20000a48
 800b670:	20000a08 	.word	0x20000a08
 800b674:	200001f0 	.word	0x200001f0
 800b678:	20000a18 	.word	0x20000a18

0800b67c <IKS4A1_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance
  * @param  Capabilities pointer to motion sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2b03      	cmp	r3, #3
 800b68a:	d903      	bls.n	800b694 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b68c:	f06f 0301 	mvn.w	r3, #1
 800b690:	60fb      	str	r3, [r7, #12]
 800b692:	e014      	b.n	800b6be <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800b694:	4a0c      	ldr	r2, [pc, #48]	@ (800b6c8 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x4c>)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	490b      	ldr	r1, [pc, #44]	@ (800b6cc <IKS4A1_MOTION_SENSOR_GetCapabilities+0x50>)
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b6a6:	6839      	ldr	r1, [r7, #0]
 800b6a8:	4610      	mov	r0, r2
 800b6aa:	4798      	blx	r3
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d003      	beq.n	800b6ba <IKS4A1_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b6b2:	f06f 0306 	mvn.w	r3, #6
 800b6b6:	60fb      	str	r3, [r7, #12]
 800b6b8:	e001      	b.n	800b6be <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b6be:	68fb      	ldr	r3, [r7, #12]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3710      	adds	r7, #16
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	20000a48 	.word	0x20000a48
 800b6cc:	20000a08 	.word	0x20000a08

0800b6d0 <IKS4A1_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b03      	cmp	r3, #3
 800b6de:	d903      	bls.n	800b6e8 <IKS4A1_MOTION_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b6e0:	f06f 0301 	mvn.w	r3, #1
 800b6e4:	60fb      	str	r3, [r7, #12]
 800b6e6:	e014      	b.n	800b712 <IKS4A1_MOTION_SENSOR_ReadID+0x42>
  }
  else if (MotionDrv[Instance]->ReadID(MotionCompObj[Instance], Id) != BSP_ERROR_NONE)
 800b6e8:	4a0c      	ldr	r2, [pc, #48]	@ (800b71c <IKS4A1_MOTION_SENSOR_ReadID+0x4c>)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6f0:	689b      	ldr	r3, [r3, #8]
 800b6f2:	490b      	ldr	r1, [pc, #44]	@ (800b720 <IKS4A1_MOTION_SENSOR_ReadID+0x50>)
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b6fa:	6839      	ldr	r1, [r7, #0]
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	4798      	blx	r3
 800b700:	4603      	mov	r3, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d003      	beq.n	800b70e <IKS4A1_MOTION_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b706:	f06f 0306 	mvn.w	r3, #6
 800b70a:	60fb      	str	r3, [r7, #12]
 800b70c:	e001      	b.n	800b712 <IKS4A1_MOTION_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800b70e:	2300      	movs	r3, #0
 800b710:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b712:	68fb      	ldr	r3, [r7, #12]
}
 800b714:	4618      	mov	r0, r3
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	20000a48 	.word	0x20000a48
 800b720:	20000a08 	.word	0x20000a08

0800b724 <IKS4A1_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS4A1_MOTION_SENSOR_Axes_t *Axes)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2b03      	cmp	r3, #3
 800b734:	d903      	bls.n	800b73e <IKS4A1_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b736:	f06f 0301 	mvn.w	r3, #1
 800b73a:	617b      	str	r3, [r7, #20]
 800b73c:	e029      	b.n	800b792 <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b73e:	4a17      	ldr	r2, [pc, #92]	@ (800b79c <IKS4A1_MOTION_SENSOR_GetAxes+0x78>)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	4013      	ands	r3, r2
 800b74a:	68ba      	ldr	r2, [r7, #8]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d11d      	bne.n	800b78c <IKS4A1_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800b750:	4a13      	ldr	r2, [pc, #76]	@ (800b7a0 <IKS4A1_MOTION_SENSOR_GetAxes+0x7c>)
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b758:	4812      	ldr	r0, [pc, #72]	@ (800b7a4 <IKS4A1_MOTION_SENSOR_GetAxes+0x80>)
 800b75a:	68fa      	ldr	r2, [r7, #12]
 800b75c:	4613      	mov	r3, r2
 800b75e:	005b      	lsls	r3, r3, #1
 800b760:	4413      	add	r3, r2
 800b762:	440b      	add	r3, r1
 800b764:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b768:	69db      	ldr	r3, [r3, #28]
 800b76a:	490f      	ldr	r1, [pc, #60]	@ (800b7a8 <IKS4A1_MOTION_SENSOR_GetAxes+0x84>)
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b772:	6879      	ldr	r1, [r7, #4]
 800b774:	4610      	mov	r0, r2
 800b776:	4798      	blx	r3
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d003      	beq.n	800b786 <IKS4A1_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b77e:	f06f 0304 	mvn.w	r3, #4
 800b782:	617b      	str	r3, [r7, #20]
 800b784:	e005      	b.n	800b792 <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b786:	2300      	movs	r3, #0
 800b788:	617b      	str	r3, [r7, #20]
 800b78a:	e002      	b.n	800b792 <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b78c:	f06f 0301 	mvn.w	r3, #1
 800b790:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b792:	697b      	ldr	r3, [r7, #20]
}
 800b794:	4618      	mov	r0, r3
 800b796:	3718      	adds	r7, #24
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	20000a58 	.word	0x20000a58
 800b7a0:	200001f0 	.word	0x200001f0
 800b7a4:	20000a18 	.word	0x20000a18
 800b7a8:	20000a08 	.word	0x20000a08

0800b7ac <IKS4A1_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b086      	sub	sp, #24
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2b03      	cmp	r3, #3
 800b7bc:	d903      	bls.n	800b7c6 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b7be:	f06f 0301 	mvn.w	r3, #1
 800b7c2:	617b      	str	r3, [r7, #20]
 800b7c4:	e029      	b.n	800b81a <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b7c6:	4a17      	ldr	r2, [pc, #92]	@ (800b824 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x78>)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	4013      	ands	r3, r2
 800b7d2:	68ba      	ldr	r2, [r7, #8]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d11d      	bne.n	800b814 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800b7d8:	4a13      	ldr	r2, [pc, #76]	@ (800b828 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b7e0:	4812      	ldr	r0, [pc, #72]	@ (800b82c <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x80>)
 800b7e2:	68fa      	ldr	r2, [r7, #12]
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	005b      	lsls	r3, r3, #1
 800b7e8:	4413      	add	r3, r2
 800b7ea:	440b      	add	r3, r1
 800b7ec:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	490f      	ldr	r1, [pc, #60]	@ (800b830 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x84>)
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b7fa:	6879      	ldr	r1, [r7, #4]
 800b7fc:	4610      	mov	r0, r2
 800b7fe:	4798      	blx	r3
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d003      	beq.n	800b80e <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b806:	f06f 0304 	mvn.w	r3, #4
 800b80a:	617b      	str	r3, [r7, #20]
 800b80c:	e005      	b.n	800b81a <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b80e:	2300      	movs	r3, #0
 800b810:	617b      	str	r3, [r7, #20]
 800b812:	e002      	b.n	800b81a <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b814:	f06f 0301 	mvn.w	r3, #1
 800b818:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b81a:	697b      	ldr	r3, [r7, #20]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3718      	adds	r7, #24
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	20000a58 	.word	0x20000a58
 800b828:	200001f0 	.word	0x200001f0
 800b82c:	20000a18 	.word	0x20000a18
 800b830:	20000a08 	.word	0x20000a08

0800b834 <IKS4A1_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale pointer to Fullscale read value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2b03      	cmp	r3, #3
 800b844:	d903      	bls.n	800b84e <IKS4A1_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b846:	f06f 0301 	mvn.w	r3, #1
 800b84a:	617b      	str	r3, [r7, #20]
 800b84c:	e029      	b.n	800b8a2 <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b84e:	4a17      	ldr	r2, [pc, #92]	@ (800b8ac <IKS4A1_MOTION_SENSOR_GetFullScale+0x78>)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	4013      	ands	r3, r2
 800b85a:	68ba      	ldr	r2, [r7, #8]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d11d      	bne.n	800b89c <IKS4A1_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 800b860:	4a13      	ldr	r2, [pc, #76]	@ (800b8b0 <IKS4A1_MOTION_SENSOR_GetFullScale+0x7c>)
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b868:	4812      	ldr	r0, [pc, #72]	@ (800b8b4 <IKS4A1_MOTION_SENSOR_GetFullScale+0x80>)
 800b86a:	68fa      	ldr	r2, [r7, #12]
 800b86c:	4613      	mov	r3, r2
 800b86e:	005b      	lsls	r3, r3, #1
 800b870:	4413      	add	r3, r2
 800b872:	440b      	add	r3, r1
 800b874:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b878:	695b      	ldr	r3, [r3, #20]
 800b87a:	490f      	ldr	r1, [pc, #60]	@ (800b8b8 <IKS4A1_MOTION_SENSOR_GetFullScale+0x84>)
 800b87c:	68fa      	ldr	r2, [r7, #12]
 800b87e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b882:	6879      	ldr	r1, [r7, #4]
 800b884:	4610      	mov	r0, r2
 800b886:	4798      	blx	r3
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d003      	beq.n	800b896 <IKS4A1_MOTION_SENSOR_GetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b88e:	f06f 0304 	mvn.w	r3, #4
 800b892:	617b      	str	r3, [r7, #20]
 800b894:	e005      	b.n	800b8a2 <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b896:	2300      	movs	r3, #0
 800b898:	617b      	str	r3, [r7, #20]
 800b89a:	e002      	b.n	800b8a2 <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b89c:	f06f 0301 	mvn.w	r3, #1
 800b8a0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b8a2:	697b      	ldr	r3, [r7, #20]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3718      	adds	r7, #24
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	20000a58 	.word	0x20000a58
 800b8b0:	200001f0 	.word	0x200001f0
 800b8b4:	20000a18 	.word	0x20000a18
 800b8b8:	20000a08 	.word	0x20000a08

0800b8bc <LIS2MDL_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b094      	sub	sp, #80	@ 0x50
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800b8cc:	233d      	movs	r3, #61	@ 0x3d
 800b8ce:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b8d2:	4b40      	ldr	r3, [pc, #256]	@ (800b9d4 <LIS2MDL_0_Probe+0x118>)
 800b8d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b8d6:	4b40      	ldr	r3, [pc, #256]	@ (800b9d8 <LIS2MDL_0_Probe+0x11c>)
 800b8d8:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b8da:	4b40      	ldr	r3, [pc, #256]	@ (800b9dc <LIS2MDL_0_Probe+0x120>)
 800b8dc:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b8de:	4b40      	ldr	r3, [pc, #256]	@ (800b9e0 <LIS2MDL_0_Probe+0x124>)
 800b8e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b8e2:	4b40      	ldr	r3, [pc, #256]	@ (800b9e4 <LIS2MDL_0_Probe+0x128>)
 800b8e4:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800b8e6:	4b40      	ldr	r3, [pc, #256]	@ (800b9e8 <LIS2MDL_0_Probe+0x12c>)
 800b8e8:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800b8ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	483e      	ldr	r0, [pc, #248]	@ (800b9ec <LIS2MDL_0_Probe+0x130>)
 800b8f2:	f7f8 fcbb 	bl	800426c <LIS2MDL_RegisterBusIO>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d003      	beq.n	800b904 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b8fc:	f06f 0306 	mvn.w	r3, #6
 800b900:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b902:	e061      	b.n	800b9c8 <LIS2MDL_0_Probe+0x10c>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800b904:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800b908:	4619      	mov	r1, r3
 800b90a:	4838      	ldr	r0, [pc, #224]	@ (800b9ec <LIS2MDL_0_Probe+0x130>)
 800b90c:	f7f8 fdca 	bl	80044a4 <LIS2MDL_ReadID>
 800b910:	4603      	mov	r3, r0
 800b912:	2b00      	cmp	r3, #0
 800b914:	d003      	beq.n	800b91e <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b916:	f06f 0306 	mvn.w	r3, #6
 800b91a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b91c:	e054      	b.n	800b9c8 <LIS2MDL_0_Probe+0x10c>
  }
  else if (id != LIS2MDL_ID)
 800b91e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b922:	2b40      	cmp	r3, #64	@ 0x40
 800b924:	d003      	beq.n	800b92e <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b926:	f06f 0306 	mvn.w	r3, #6
 800b92a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b92c:	e04c      	b.n	800b9c8 <LIS2MDL_0_Probe+0x10c>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800b92e:	f107 030c 	add.w	r3, r7, #12
 800b932:	4619      	mov	r1, r3
 800b934:	482d      	ldr	r0, [pc, #180]	@ (800b9ec <LIS2MDL_0_Probe+0x130>)
 800b936:	f7f8 fddb 	bl	80044f0 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS4A1_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800b93a:	7b7b      	ldrb	r3, [r7, #13]
 800b93c:	461a      	mov	r2, r3
 800b93e:	7b3b      	ldrb	r3, [r7, #12]
 800b940:	005b      	lsls	r3, r3, #1
 800b942:	431a      	orrs	r2, r3
 800b944:	7bbb      	ldrb	r3, [r7, #14]
 800b946:	009b      	lsls	r3, r3, #2
 800b948:	4313      	orrs	r3, r2
 800b94a:	4a29      	ldr	r2, [pc, #164]	@ (800b9f0 <LIS2MDL_0_Probe+0x134>)
 800b94c:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS4A1_LIS2MDL_0] = &lis2mdl_obj_0;
 800b94e:	4b29      	ldr	r3, [pc, #164]	@ (800b9f4 <LIS2MDL_0_Probe+0x138>)
 800b950:	4a26      	ldr	r2, [pc, #152]	@ (800b9ec <LIS2MDL_0_Probe+0x130>)
 800b952:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800b954:	4b28      	ldr	r3, [pc, #160]	@ (800b9f8 <LIS2MDL_0_Probe+0x13c>)
 800b956:	4a29      	ldr	r2, [pc, #164]	@ (800b9fc <LIS2MDL_0_Probe+0x140>)
 800b958:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800b95a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d11d      	bne.n	800b99c <LIS2MDL_0_Probe+0xe0>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f003 0304 	and.w	r3, r3, #4
 800b966:	2b00      	cmp	r3, #0
 800b968:	d018      	beq.n	800b99c <LIS2MDL_0_Probe+0xe0>
 800b96a:	7bbb      	ldrb	r3, [r7, #14]
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d115      	bne.n	800b99c <LIS2MDL_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800b970:	4b23      	ldr	r3, [pc, #140]	@ (800ba00 <LIS2MDL_0_Probe+0x144>)
 800b972:	691b      	ldr	r3, [r3, #16]
 800b974:	4a23      	ldr	r2, [pc, #140]	@ (800ba04 <LIS2MDL_0_Probe+0x148>)
 800b976:	4924      	ldr	r1, [pc, #144]	@ (800ba08 <LIS2MDL_0_Probe+0x14c>)
 800b978:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS4A1_LIS2MDL_0]->Init(MotionCompObj[IKS4A1_LIS2MDL_0]) != LIS2MDL_OK)
 800b97c:	4b1e      	ldr	r3, [pc, #120]	@ (800b9f8 <LIS2MDL_0_Probe+0x13c>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4a1c      	ldr	r2, [pc, #112]	@ (800b9f4 <LIS2MDL_0_Probe+0x138>)
 800b984:	6812      	ldr	r2, [r2, #0]
 800b986:	4610      	mov	r0, r2
 800b988:	4798      	blx	r3
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d003      	beq.n	800b998 <LIS2MDL_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b990:	f06f 0304 	mvn.w	r3, #4
 800b994:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b996:	e001      	b.n	800b99c <LIS2MDL_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b998:	2300      	movs	r3, #0
 800b99a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800b99c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d107      	bne.n	800b9b2 <LIS2MDL_0_Probe+0xf6>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f003 0302 	and.w	r3, r3, #2
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d002      	beq.n	800b9b2 <LIS2MDL_0_Probe+0xf6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9ac:	f06f 0304 	mvn.w	r3, #4
 800b9b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800b9b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d107      	bne.n	800b9c8 <LIS2MDL_0_Probe+0x10c>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f003 0301 	and.w	r3, r3, #1
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d002      	beq.n	800b9c8 <LIS2MDL_0_Probe+0x10c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9c2:	f06f 0304 	mvn.w	r3, #4
 800b9c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800b9c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3750      	adds	r7, #80	@ 0x50
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	08002389 	.word	0x08002389
 800b9d8:	080023ed 	.word	0x080023ed
 800b9dc:	080024a1 	.word	0x080024a1
 800b9e0:	0800243d 	.word	0x0800243d
 800b9e4:	080025ad 	.word	0x080025ad
 800b9e8:	0800c341 	.word	0x0800c341
 800b9ec:	20000a68 	.word	0x20000a68
 800b9f0:	20000a58 	.word	0x20000a58
 800b9f4:	20000a08 	.word	0x20000a08
 800b9f8:	20000a48 	.word	0x20000a48
 800b9fc:	20000038 	.word	0x20000038
 800ba00:	200001f0 	.word	0x200001f0
 800ba04:	20000a18 	.word	0x20000a18
 800ba08:	20000048 	.word	0x20000048

0800ba0c <LSM6DSV16X_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSV16X_0_Probe(uint32_t Functions)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b094      	sub	sp, #80	@ 0x50
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  LSM6DSV16X_IO_t            io_ctx;
  uint8_t                    id;
  static LSM6DSV16X_Object_t lsm6dsv16x_obj_0;
  LSM6DSV16X_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800ba14:	2300      	movs	r3, #0
 800ba16:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSV16X_I2C_BUS; /* I2C */
 800ba18:	2300      	movs	r3, #0
 800ba1a:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSV16X_I2C_ADD_H;
 800ba1c:	23d7      	movs	r3, #215	@ 0xd7
 800ba1e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800ba22:	4b51      	ldr	r3, [pc, #324]	@ (800bb68 <LSM6DSV16X_0_Probe+0x15c>)
 800ba24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800ba26:	4b51      	ldr	r3, [pc, #324]	@ (800bb6c <LSM6DSV16X_0_Probe+0x160>)
 800ba28:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800ba2a:	4b51      	ldr	r3, [pc, #324]	@ (800bb70 <LSM6DSV16X_0_Probe+0x164>)
 800ba2c:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800ba2e:	4b51      	ldr	r3, [pc, #324]	@ (800bb74 <LSM6DSV16X_0_Probe+0x168>)
 800ba30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800ba32:	4b51      	ldr	r3, [pc, #324]	@ (800bb78 <LSM6DSV16X_0_Probe+0x16c>)
 800ba34:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800ba36:	4b51      	ldr	r3, [pc, #324]	@ (800bb7c <LSM6DSV16X_0_Probe+0x170>)
 800ba38:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSV16X_RegisterBusIO(&lsm6dsv16x_obj_0, &io_ctx) != LSM6DSV16X_OK)
 800ba3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ba3e:	4619      	mov	r1, r3
 800ba40:	484f      	ldr	r0, [pc, #316]	@ (800bb80 <LSM6DSV16X_0_Probe+0x174>)
 800ba42:	f7fc f983 	bl	8007d4c <LSM6DSV16X_RegisterBusIO>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d003      	beq.n	800ba54 <LSM6DSV16X_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba4c:	f06f 0306 	mvn.w	r3, #6
 800ba50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba52:	e084      	b.n	800bb5e <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_Set_Mem_Bank(&lsm6dsv16x_obj_0, LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 800ba54:	2100      	movs	r1, #0
 800ba56:	484a      	ldr	r0, [pc, #296]	@ (800bb80 <LSM6DSV16X_0_Probe+0x174>)
 800ba58:	f7fd f905 	bl	8008c66 <LSM6DSV16X_Set_Mem_Bank>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d003      	beq.n	800ba6a <LSM6DSV16X_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba62:	f06f 0306 	mvn.w	r3, #6
 800ba66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba68:	e079      	b.n	800bb5e <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_ReadID(&lsm6dsv16x_obj_0, &id) != LSM6DSV16X_OK)
 800ba6a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800ba6e:	4619      	mov	r1, r3
 800ba70:	4843      	ldr	r0, [pc, #268]	@ (800bb80 <LSM6DSV16X_0_Probe+0x174>)
 800ba72:	f7fc fa9b 	bl	8007fac <LSM6DSV16X_ReadID>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d003      	beq.n	800ba84 <LSM6DSV16X_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba7c:	f06f 0306 	mvn.w	r3, #6
 800ba80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba82:	e06c      	b.n	800bb5e <LSM6DSV16X_0_Probe+0x152>
  }
  else if (id != LSM6DSV16X_ID)
 800ba84:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba88:	2b70      	cmp	r3, #112	@ 0x70
 800ba8a:	d003      	beq.n	800ba94 <LSM6DSV16X_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba8c:	f06f 0306 	mvn.w	r3, #6
 800ba90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba92:	e064      	b.n	800bb5e <LSM6DSV16X_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSV16X_GetCapabilities(&lsm6dsv16x_obj_0, &cap);
 800ba94:	f107 030c 	add.w	r3, r7, #12
 800ba98:	4619      	mov	r1, r3
 800ba9a:	4839      	ldr	r0, [pc, #228]	@ (800bb80 <LSM6DSV16X_0_Probe+0x174>)
 800ba9c:	f7fc fa9c 	bl	8007fd8 <LSM6DSV16X_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSV16X_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800baa0:	7b7b      	ldrb	r3, [r7, #13]
 800baa2:	461a      	mov	r2, r3
 800baa4:	7b3b      	ldrb	r3, [r7, #12]
 800baa6:	005b      	lsls	r3, r3, #1
 800baa8:	431a      	orrs	r2, r3
 800baaa:	7bbb      	ldrb	r3, [r7, #14]
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	4313      	orrs	r3, r2
 800bab0:	4a34      	ldr	r2, [pc, #208]	@ (800bb84 <LSM6DSV16X_0_Probe+0x178>)
 800bab2:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS4A1_LSM6DSV16X_0] = &lsm6dsv16x_obj_0;
 800bab4:	4b34      	ldr	r3, [pc, #208]	@ (800bb88 <LSM6DSV16X_0_Probe+0x17c>)
 800bab6:	4a32      	ldr	r2, [pc, #200]	@ (800bb80 <LSM6DSV16X_0_Probe+0x174>)
 800bab8:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSV16X_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSV16X_COMMON_Driver;
 800baba:	4b34      	ldr	r3, [pc, #208]	@ (800bb8c <LSM6DSV16X_0_Probe+0x180>)
 800babc:	4a34      	ldr	r2, [pc, #208]	@ (800bb90 <LSM6DSV16X_0_Probe+0x184>)
 800babe:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800bac0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d11e      	bne.n	800bb04 <LSM6DSV16X_0_Probe+0xf8>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f003 0301 	and.w	r3, r3, #1
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d019      	beq.n	800bb04 <LSM6DSV16X_0_Probe+0xf8>
 800bad0:	7b7b      	ldrb	r3, [r7, #13]
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d116      	bne.n	800bb04 <LSM6DSV16X_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bad6:	4b2f      	ldr	r3, [pc, #188]	@ (800bb94 <LSM6DSV16X_0_Probe+0x188>)
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	4a2f      	ldr	r2, [pc, #188]	@ (800bb98 <LSM6DSV16X_0_Probe+0x18c>)
 800badc:	3303      	adds	r3, #3
 800bade:	492f      	ldr	r1, [pc, #188]	@ (800bb9c <LSM6DSV16X_0_Probe+0x190>)
 800bae0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LSM6DSV16X_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800bae4:	4b29      	ldr	r3, [pc, #164]	@ (800bb8c <LSM6DSV16X_0_Probe+0x180>)
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a27      	ldr	r2, [pc, #156]	@ (800bb88 <LSM6DSV16X_0_Probe+0x17c>)
 800baec:	6852      	ldr	r2, [r2, #4]
 800baee:	4610      	mov	r0, r2
 800baf0:	4798      	blx	r3
 800baf2:	4603      	mov	r3, r0
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d003      	beq.n	800bb00 <LSM6DSV16X_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800baf8:	f06f 0304 	mvn.w	r3, #4
 800bafc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bafe:	e001      	b.n	800bb04 <LSM6DSV16X_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bb00:	2300      	movs	r3, #0
 800bb02:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800bb04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d11e      	bne.n	800bb48 <LSM6DSV16X_0_Probe+0x13c>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f003 0302 	and.w	r3, r3, #2
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d019      	beq.n	800bb48 <LSM6DSV16X_0_Probe+0x13c>
 800bb14:	7b3b      	ldrb	r3, [r7, #12]
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d116      	bne.n	800bb48 <LSM6DSV16X_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bb1a:	4b1e      	ldr	r3, [pc, #120]	@ (800bb94 <LSM6DSV16X_0_Probe+0x188>)
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	4a1e      	ldr	r2, [pc, #120]	@ (800bb98 <LSM6DSV16X_0_Probe+0x18c>)
 800bb20:	3303      	adds	r3, #3
 800bb22:	491f      	ldr	r1, [pc, #124]	@ (800bba0 <LSM6DSV16X_0_Probe+0x194>)
 800bb24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LSM6DSV16X_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800bb28:	4b18      	ldr	r3, [pc, #96]	@ (800bb8c <LSM6DSV16X_0_Probe+0x180>)
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a16      	ldr	r2, [pc, #88]	@ (800bb88 <LSM6DSV16X_0_Probe+0x17c>)
 800bb30:	6852      	ldr	r2, [r2, #4]
 800bb32:	4610      	mov	r0, r2
 800bb34:	4798      	blx	r3
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d003      	beq.n	800bb44 <LSM6DSV16X_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb3c:	f06f 0304 	mvn.w	r3, #4
 800bb40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb42:	e001      	b.n	800bb48 <LSM6DSV16X_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bb44:	2300      	movs	r3, #0
 800bb46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800bb48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d107      	bne.n	800bb5e <LSM6DSV16X_0_Probe+0x152>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f003 0304 	and.w	r3, r3, #4
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d002      	beq.n	800bb5e <LSM6DSV16X_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb58:	f06f 0304 	mvn.w	r3, #4
 800bb5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800bb5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3750      	adds	r7, #80	@ 0x50
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	08002389 	.word	0x08002389
 800bb6c:	080023ed 	.word	0x080023ed
 800bb70:	080024a1 	.word	0x080024a1
 800bb74:	0800243d 	.word	0x0800243d
 800bb78:	080025ad 	.word	0x080025ad
 800bb7c:	0800c341 	.word	0x0800c341
 800bb80:	20000a9c 	.word	0x20000a9c
 800bb84:	20000a58 	.word	0x20000a58
 800bb88:	20000a08 	.word	0x20000a08
 800bb8c:	20000a48 	.word	0x20000a48
 800bb90:	200000fc 	.word	0x200000fc
 800bb94:	200001f0 	.word	0x200001f0
 800bb98:	20000a18 	.word	0x20000a18
 800bb9c:	20000130 	.word	0x20000130
 800bba0:	2000010c 	.word	0x2000010c

0800bba4 <LIS2DUXS12_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LIS2DUXS12_0_Probe(uint32_t Functions)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b094      	sub	sp, #80	@ 0x50
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  LIS2DUXS12_IO_t            io_ctx;
  uint8_t                    id;
  static LIS2DUXS12_Object_t lis2duxs12_obj_0;
  LIS2DUXS12_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800bbac:	2300      	movs	r3, #0
 800bbae:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2DUXS12_I2C_BUS; /* I2C */
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DUXS12_I2C_ADD_H;
 800bbb4:	2333      	movs	r3, #51	@ 0x33
 800bbb6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800bbba:	4b47      	ldr	r3, [pc, #284]	@ (800bcd8 <LIS2DUXS12_0_Probe+0x134>)
 800bbbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800bbbe:	4b47      	ldr	r3, [pc, #284]	@ (800bcdc <LIS2DUXS12_0_Probe+0x138>)
 800bbc0:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800bbc2:	4b47      	ldr	r3, [pc, #284]	@ (800bce0 <LIS2DUXS12_0_Probe+0x13c>)
 800bbc4:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800bbc6:	4b47      	ldr	r3, [pc, #284]	@ (800bce4 <LIS2DUXS12_0_Probe+0x140>)
 800bbc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800bbca:	4b47      	ldr	r3, [pc, #284]	@ (800bce8 <LIS2DUXS12_0_Probe+0x144>)
 800bbcc:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800bbce:	4b47      	ldr	r3, [pc, #284]	@ (800bcec <LIS2DUXS12_0_Probe+0x148>)
 800bbd0:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DUXS12_RegisterBusIO(&lis2duxs12_obj_0, &io_ctx) != LIS2DUXS12_OK)
 800bbd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	4845      	ldr	r0, [pc, #276]	@ (800bcf0 <LIS2DUXS12_0_Probe+0x14c>)
 800bbda:	f7f6 fe65 	bl	80028a8 <LIS2DUXS12_RegisterBusIO>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d003      	beq.n	800bbec <LIS2DUXS12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bbe4:	f06f 0306 	mvn.w	r3, #6
 800bbe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbea:	e070      	b.n	800bcce <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_Set_Mem_Bank(&lis2duxs12_obj_0, LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 800bbec:	2100      	movs	r1, #0
 800bbee:	4840      	ldr	r0, [pc, #256]	@ (800bcf0 <LIS2DUXS12_0_Probe+0x14c>)
 800bbf0:	f7f7 fad2 	bl	8003198 <LIS2DUXS12_Set_Mem_Bank>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d003      	beq.n	800bc02 <LIS2DUXS12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bbfa:	f06f 0306 	mvn.w	r3, #6
 800bbfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc00:	e065      	b.n	800bcce <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_ReadID(&lis2duxs12_obj_0, &id) != LIS2DUXS12_OK)
 800bc02:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800bc06:	4619      	mov	r1, r3
 800bc08:	4839      	ldr	r0, [pc, #228]	@ (800bcf0 <LIS2DUXS12_0_Probe+0x14c>)
 800bc0a:	f7f6 ffac 	bl	8002b66 <LIS2DUXS12_ReadID>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d003      	beq.n	800bc1c <LIS2DUXS12_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bc14:	f06f 0306 	mvn.w	r3, #6
 800bc18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc1a:	e058      	b.n	800bcce <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (id != LIS2DUXS12_ID)
 800bc1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bc20:	2b47      	cmp	r3, #71	@ 0x47
 800bc22:	d003      	beq.n	800bc2c <LIS2DUXS12_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bc24:	f06f 0306 	mvn.w	r3, #6
 800bc28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc2a:	e050      	b.n	800bcce <LIS2DUXS12_0_Probe+0x12a>
  }
  else
  {
    (void)LIS2DUXS12_GetCapabilities(&lis2duxs12_obj_0, &cap);
 800bc2c:	f107 030c 	add.w	r3, r7, #12
 800bc30:	4619      	mov	r1, r3
 800bc32:	482f      	ldr	r0, [pc, #188]	@ (800bcf0 <LIS2DUXS12_0_Probe+0x14c>)
 800bc34:	f7f6 ffb2 	bl	8002b9c <LIS2DUXS12_GetCapabilities>
    MotionCtx[IKS4A1_LIS2DUXS12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bc38:	7b7b      	ldrb	r3, [r7, #13]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	7b3b      	ldrb	r3, [r7, #12]
 800bc3e:	005b      	lsls	r3, r3, #1
 800bc40:	431a      	orrs	r2, r3
 800bc42:	7bbb      	ldrb	r3, [r7, #14]
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	4313      	orrs	r3, r2
 800bc48:	4a2a      	ldr	r2, [pc, #168]	@ (800bcf4 <LIS2DUXS12_0_Probe+0x150>)
 800bc4a:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS4A1_LIS2DUXS12_0] = &lis2duxs12_obj_0;
 800bc4c:	4b2a      	ldr	r3, [pc, #168]	@ (800bcf8 <LIS2DUXS12_0_Probe+0x154>)
 800bc4e:	4a28      	ldr	r2, [pc, #160]	@ (800bcf0 <LIS2DUXS12_0_Probe+0x14c>)
 800bc50:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2DUXS12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DUXS12_COMMON_Driver;
 800bc52:	4b2a      	ldr	r3, [pc, #168]	@ (800bcfc <LIS2DUXS12_0_Probe+0x158>)
 800bc54:	4a2a      	ldr	r2, [pc, #168]	@ (800bd00 <LIS2DUXS12_0_Probe+0x15c>)
 800bc56:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800bc58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d10a      	bne.n	800bc74 <LIS2DUXS12_0_Probe+0xd0>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f003 0301 	and.w	r3, r3, #1
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d005      	beq.n	800bc74 <LIS2DUXS12_0_Probe+0xd0>
 800bc68:	7b7b      	ldrb	r3, [r7, #13]
 800bc6a:	2b01      	cmp	r3, #1
 800bc6c:	d102      	bne.n	800bc74 <LIS2DUXS12_0_Probe+0xd0>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc6e:	f06f 0304 	mvn.w	r3, #4
 800bc72:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800bc74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d11e      	bne.n	800bcb8 <LIS2DUXS12_0_Probe+0x114>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f003 0302 	and.w	r3, r3, #2
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d019      	beq.n	800bcb8 <LIS2DUXS12_0_Probe+0x114>
 800bc84:	7b3b      	ldrb	r3, [r7, #12]
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d116      	bne.n	800bcb8 <LIS2DUXS12_0_Probe+0x114>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2DUXS12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bc8a:	4b1e      	ldr	r3, [pc, #120]	@ (800bd04 <LIS2DUXS12_0_Probe+0x160>)
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	4a1e      	ldr	r2, [pc, #120]	@ (800bd08 <LIS2DUXS12_0_Probe+0x164>)
 800bc90:	3306      	adds	r3, #6
 800bc92:	491e      	ldr	r1, [pc, #120]	@ (800bd0c <LIS2DUXS12_0_Probe+0x168>)
 800bc94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DUXS12_ACC_Driver;

      if (MotionDrv[IKS4A1_LIS2DUXS12_0]->Init(MotionCompObj[IKS4A1_LIS2DUXS12_0]) != LIS2DUXS12_OK)
 800bc98:	4b18      	ldr	r3, [pc, #96]	@ (800bcfc <LIS2DUXS12_0_Probe+0x158>)
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a16      	ldr	r2, [pc, #88]	@ (800bcf8 <LIS2DUXS12_0_Probe+0x154>)
 800bca0:	6892      	ldr	r2, [r2, #8]
 800bca2:	4610      	mov	r0, r2
 800bca4:	4798      	blx	r3
 800bca6:	4603      	mov	r3, r0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d003      	beq.n	800bcb4 <LIS2DUXS12_0_Probe+0x110>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcac:	f06f 0304 	mvn.w	r3, #4
 800bcb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bcb2:	e001      	b.n	800bcb8 <LIS2DUXS12_0_Probe+0x114>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800bcb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d107      	bne.n	800bcce <LIS2DUXS12_0_Probe+0x12a>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f003 0304 	and.w	r3, r3, #4
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d002      	beq.n	800bcce <LIS2DUXS12_0_Probe+0x12a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bcc8:	f06f 0304 	mvn.w	r3, #4
 800bccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800bcce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3750      	adds	r7, #80	@ 0x50
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	08002389 	.word	0x08002389
 800bcdc:	080023ed 	.word	0x080023ed
 800bce0:	080024a1 	.word	0x080024a1
 800bce4:	0800243d 	.word	0x0800243d
 800bce8:	080025ad 	.word	0x080025ad
 800bcec:	0800c341 	.word	0x0800c341
 800bcf0:	20000ad4 	.word	0x20000ad4
 800bcf4:	20000a58 	.word	0x20000a58
 800bcf8:	20000a08 	.word	0x20000a08
 800bcfc:	20000a48 	.word	0x20000a48
 800bd00:	20000004 	.word	0x20000004
 800bd04:	200001f0 	.word	0x200001f0
 800bd08:	20000a18 	.word	0x20000a18
 800bd0c:	20000014 	.word	0x20000014

0800bd10 <LSM6DSO16IS_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSO16IS_0_Probe(uint32_t Functions)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b094      	sub	sp, #80	@ 0x50
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  LSM6DSO16IS_IO_t            io_ctx;
  uint8_t                     id;
  static LSM6DSO16IS_Object_t lsm6dso16is_obj_0;
  LSM6DSO16IS_Capabilities_t  cap;
  int32_t                     ret = BSP_ERROR_NONE;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSO16IS_I2C_BUS; /* I2C */
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO16IS_I2C_ADD_L;
 800bd20:	23d5      	movs	r3, #213	@ 0xd5
 800bd22:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800bd26:	4b51      	ldr	r3, [pc, #324]	@ (800be6c <LSM6DSO16IS_0_Probe+0x15c>)
 800bd28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800bd2a:	4b51      	ldr	r3, [pc, #324]	@ (800be70 <LSM6DSO16IS_0_Probe+0x160>)
 800bd2c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800bd2e:	4b51      	ldr	r3, [pc, #324]	@ (800be74 <LSM6DSO16IS_0_Probe+0x164>)
 800bd30:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800bd32:	4b51      	ldr	r3, [pc, #324]	@ (800be78 <LSM6DSO16IS_0_Probe+0x168>)
 800bd34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800bd36:	4b51      	ldr	r3, [pc, #324]	@ (800be7c <LSM6DSO16IS_0_Probe+0x16c>)
 800bd38:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800bd3a:	4b51      	ldr	r3, [pc, #324]	@ (800be80 <LSM6DSO16IS_0_Probe+0x170>)
 800bd3c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO16IS_RegisterBusIO(&lsm6dso16is_obj_0, &io_ctx) != LSM6DSO16IS_OK)
 800bd3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bd42:	4619      	mov	r1, r3
 800bd44:	484f      	ldr	r0, [pc, #316]	@ (800be84 <LSM6DSO16IS_0_Probe+0x174>)
 800bd46:	f7fa facd 	bl	80062e4 <LSM6DSO16IS_RegisterBusIO>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d003      	beq.n	800bd58 <LSM6DSO16IS_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bd50:	f06f 0306 	mvn.w	r3, #6
 800bd54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd56:	e084      	b.n	800be62 <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_Set_Mem_Bank(&lsm6dso16is_obj_0, LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 800bd58:	2100      	movs	r1, #0
 800bd5a:	484a      	ldr	r0, [pc, #296]	@ (800be84 <LSM6DSO16IS_0_Probe+0x174>)
 800bd5c:	f7fb f8f3 	bl	8006f46 <LSM6DSO16IS_Set_Mem_Bank>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d003      	beq.n	800bd6e <LSM6DSO16IS_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bd66:	f06f 0306 	mvn.w	r3, #6
 800bd6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd6c:	e079      	b.n	800be62 <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_ReadID(&lsm6dso16is_obj_0, &id) != LSM6DSO16IS_OK)
 800bd6e:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800bd72:	4619      	mov	r1, r3
 800bd74:	4843      	ldr	r0, [pc, #268]	@ (800be84 <LSM6DSO16IS_0_Probe+0x174>)
 800bd76:	f7fa fbb3 	bl	80064e0 <LSM6DSO16IS_ReadID>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d003      	beq.n	800bd88 <LSM6DSO16IS_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bd80:	f06f 0306 	mvn.w	r3, #6
 800bd84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd86:	e06c      	b.n	800be62 <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (id != LSM6DSO16IS_ID)
 800bd88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd8c:	2b22      	cmp	r3, #34	@ 0x22
 800bd8e:	d003      	beq.n	800bd98 <LSM6DSO16IS_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bd90:	f06f 0306 	mvn.w	r3, #6
 800bd94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd96:	e064      	b.n	800be62 <LSM6DSO16IS_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSO16IS_GetCapabilities(&lsm6dso16is_obj_0, &cap);
 800bd98:	f107 030c 	add.w	r3, r7, #12
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	4839      	ldr	r0, [pc, #228]	@ (800be84 <LSM6DSO16IS_0_Probe+0x174>)
 800bda0:	f7fa fbb6 	bl	8006510 <LSM6DSO16IS_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSO16IS_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bda4:	7b7b      	ldrb	r3, [r7, #13]
 800bda6:	461a      	mov	r2, r3
 800bda8:	7b3b      	ldrb	r3, [r7, #12]
 800bdaa:	005b      	lsls	r3, r3, #1
 800bdac:	431a      	orrs	r2, r3
 800bdae:	7bbb      	ldrb	r3, [r7, #14]
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	4a34      	ldr	r2, [pc, #208]	@ (800be88 <LSM6DSO16IS_0_Probe+0x178>)
 800bdb6:	60d3      	str	r3, [r2, #12]

    MotionCompObj[IKS4A1_LSM6DSO16IS_0] = &lsm6dso16is_obj_0;
 800bdb8:	4b34      	ldr	r3, [pc, #208]	@ (800be8c <LSM6DSO16IS_0_Probe+0x17c>)
 800bdba:	4a32      	ldr	r2, [pc, #200]	@ (800be84 <LSM6DSO16IS_0_Probe+0x174>)
 800bdbc:	60da      	str	r2, [r3, #12]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSO16IS_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO16IS_COMMON_Driver;
 800bdbe:	4b34      	ldr	r3, [pc, #208]	@ (800be90 <LSM6DSO16IS_0_Probe+0x180>)
 800bdc0:	4a34      	ldr	r2, [pc, #208]	@ (800be94 <LSM6DSO16IS_0_Probe+0x184>)
 800bdc2:	60da      	str	r2, [r3, #12]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800bdc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d11e      	bne.n	800be08 <LSM6DSO16IS_0_Probe+0xf8>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f003 0301 	and.w	r3, r3, #1
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d019      	beq.n	800be08 <LSM6DSO16IS_0_Probe+0xf8>
 800bdd4:	7b7b      	ldrb	r3, [r7, #13]
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d116      	bne.n	800be08 <LSM6DSO16IS_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bdda:	4b2f      	ldr	r3, [pc, #188]	@ (800be98 <LSM6DSO16IS_0_Probe+0x188>)
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	4a2f      	ldr	r2, [pc, #188]	@ (800be9c <LSM6DSO16IS_0_Probe+0x18c>)
 800bde0:	3309      	adds	r3, #9
 800bde2:	492f      	ldr	r1, [pc, #188]	@ (800bea0 <LSM6DSO16IS_0_Probe+0x190>)
 800bde4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                         void *)&LSM6DSO16IS_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800bde8:	4b29      	ldr	r3, [pc, #164]	@ (800be90 <LSM6DSO16IS_0_Probe+0x180>)
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a27      	ldr	r2, [pc, #156]	@ (800be8c <LSM6DSO16IS_0_Probe+0x17c>)
 800bdf0:	68d2      	ldr	r2, [r2, #12]
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	4798      	blx	r3
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d003      	beq.n	800be04 <LSM6DSO16IS_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bdfc:	f06f 0304 	mvn.w	r3, #4
 800be00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be02:	e001      	b.n	800be08 <LSM6DSO16IS_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800be04:	2300      	movs	r3, #0
 800be06:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800be08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d11e      	bne.n	800be4c <LSM6DSO16IS_0_Probe+0x13c>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f003 0302 	and.w	r3, r3, #2
 800be14:	2b00      	cmp	r3, #0
 800be16:	d019      	beq.n	800be4c <LSM6DSO16IS_0_Probe+0x13c>
 800be18:	7b3b      	ldrb	r3, [r7, #12]
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d116      	bne.n	800be4c <LSM6DSO16IS_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800be1e:	4b1e      	ldr	r3, [pc, #120]	@ (800be98 <LSM6DSO16IS_0_Probe+0x188>)
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	4a1e      	ldr	r2, [pc, #120]	@ (800be9c <LSM6DSO16IS_0_Probe+0x18c>)
 800be24:	3309      	adds	r3, #9
 800be26:	491f      	ldr	r1, [pc, #124]	@ (800bea4 <LSM6DSO16IS_0_Probe+0x194>)
 800be28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                             void *)&LSM6DSO16IS_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800be2c:	4b18      	ldr	r3, [pc, #96]	@ (800be90 <LSM6DSO16IS_0_Probe+0x180>)
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a16      	ldr	r2, [pc, #88]	@ (800be8c <LSM6DSO16IS_0_Probe+0x17c>)
 800be34:	68d2      	ldr	r2, [r2, #12]
 800be36:	4610      	mov	r0, r2
 800be38:	4798      	blx	r3
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d003      	beq.n	800be48 <LSM6DSO16IS_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800be40:	f06f 0304 	mvn.w	r3, #4
 800be44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be46:	e001      	b.n	800be4c <LSM6DSO16IS_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800be48:	2300      	movs	r3, #0
 800be4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800be4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d107      	bne.n	800be62 <LSM6DSO16IS_0_Probe+0x152>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f003 0304 	and.w	r3, r3, #4
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d002      	beq.n	800be62 <LSM6DSO16IS_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800be5c:	f06f 0304 	mvn.w	r3, #4
 800be60:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800be62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800be64:	4618      	mov	r0, r3
 800be66:	3750      	adds	r7, #80	@ 0x50
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	08002389 	.word	0x08002389
 800be70:	080023ed 	.word	0x080023ed
 800be74:	080024a1 	.word	0x080024a1
 800be78:	0800243d 	.word	0x0800243d
 800be7c:	080025ad 	.word	0x080025ad
 800be80:	0800c341 	.word	0x0800c341
 800be84:	20000b10 	.word	0x20000b10
 800be88:	20000a58 	.word	0x20000a58
 800be8c:	20000a08 	.word	0x20000a08
 800be90:	20000a48 	.word	0x20000a48
 800be94:	200000a4 	.word	0x200000a4
 800be98:	200001f0 	.word	0x200001f0
 800be9c:	20000a18 	.word	0x20000a18
 800bea0:	200000d8 	.word	0x200000d8
 800bea4:	200000b4 	.word	0x200000b4

0800bea8 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	4603      	mov	r3, r0
 800beb0:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800beb2:	79fb      	ldrb	r3, [r7, #7]
 800beb4:	4a04      	ldr	r2, [pc, #16]	@ (800bec8 <BSP_LED_Init+0x20>)
 800beb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800beba:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800bebc:	2300      	movs	r3, #0
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	08018268 	.word	0x08018268

0800becc <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 800becc:	b580      	push	{r7, lr}
 800bece:	b088      	sub	sp, #32
 800bed0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bed2:	2300      	movs	r3, #0
 800bed4:	60bb      	str	r3, [r7, #8]
 800bed6:	4b1c      	ldr	r3, [pc, #112]	@ (800bf48 <LED_USER_GPIO_Init+0x7c>)
 800bed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beda:	4a1b      	ldr	r2, [pc, #108]	@ (800bf48 <LED_USER_GPIO_Init+0x7c>)
 800bedc:	f043 0301 	orr.w	r3, r3, #1
 800bee0:	6313      	str	r3, [r2, #48]	@ 0x30
 800bee2:	4b19      	ldr	r3, [pc, #100]	@ (800bf48 <LED_USER_GPIO_Init+0x7c>)
 800bee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bee6:	f003 0301 	and.w	r3, r3, #1
 800beea:	60bb      	str	r3, [r7, #8]
 800beec:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800beee:	f107 030c 	add.w	r3, r7, #12
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]
 800bef6:	605a      	str	r2, [r3, #4]
 800bef8:	609a      	str	r2, [r3, #8]
 800befa:	60da      	str	r2, [r3, #12]
 800befc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800befe:	2300      	movs	r3, #0
 800bf00:	607b      	str	r3, [r7, #4]
 800bf02:	4b11      	ldr	r3, [pc, #68]	@ (800bf48 <LED_USER_GPIO_Init+0x7c>)
 800bf04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf06:	4a10      	ldr	r2, [pc, #64]	@ (800bf48 <LED_USER_GPIO_Init+0x7c>)
 800bf08:	f043 0301 	orr.w	r3, r3, #1
 800bf0c:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf0e:	4b0e      	ldr	r3, [pc, #56]	@ (800bf48 <LED_USER_GPIO_Init+0x7c>)
 800bf10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf12:	f003 0301 	and.w	r3, r3, #1
 800bf16:	607b      	str	r3, [r7, #4]
 800bf18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	2120      	movs	r1, #32
 800bf1e:	480b      	ldr	r0, [pc, #44]	@ (800bf4c <LED_USER_GPIO_Init+0x80>)
 800bf20:	f001 f962 	bl	800d1e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800bf24:	2320      	movs	r3, #32
 800bf26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf30:	2300      	movs	r3, #0
 800bf32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800bf34:	f107 030c 	add.w	r3, r7, #12
 800bf38:	4619      	mov	r1, r3
 800bf3a:	4804      	ldr	r0, [pc, #16]	@ (800bf4c <LED_USER_GPIO_Init+0x80>)
 800bf3c:	f000 fed4 	bl	800cce8 <HAL_GPIO_Init>

}
 800bf40:	bf00      	nop
 800bf42:	3720      	adds	r7, #32
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	40023800 	.word	0x40023800
 800bf4c:	40020000 	.word	0x40020000

0800bf50 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	4603      	mov	r3, r0
 800bf58:	460a      	mov	r2, r1
 800bf5a:	71fb      	strb	r3, [r7, #7]
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800bf60:	2300      	movs	r3, #0
 800bf62:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800bf64:	79fb      	ldrb	r3, [r7, #7]
 800bf66:	4a1f      	ldr	r2, [pc, #124]	@ (800bfe4 <BSP_PB_Init+0x94>)
 800bf68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf6c:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800bf6e:	79bb      	ldrb	r3, [r7, #6]
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d132      	bne.n	800bfda <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800bf74:	79fb      	ldrb	r3, [r7, #7]
 800bf76:	00db      	lsls	r3, r3, #3
 800bf78:	4a1b      	ldr	r2, [pc, #108]	@ (800bfe8 <BSP_PB_Init+0x98>)
 800bf7a:	441a      	add	r2, r3
 800bf7c:	79fb      	ldrb	r3, [r7, #7]
 800bf7e:	491b      	ldr	r1, [pc, #108]	@ (800bfec <BSP_PB_Init+0x9c>)
 800bf80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800bf84:	4619      	mov	r1, r3
 800bf86:	4610      	mov	r0, r2
 800bf88:	f000 fe9a 	bl	800ccc0 <HAL_EXTI_GetHandle>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d003      	beq.n	800bf9a <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800bf92:	f06f 0303 	mvn.w	r3, #3
 800bf96:	60fb      	str	r3, [r7, #12]
 800bf98:	e01f      	b.n	800bfda <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800bf9a:	79fb      	ldrb	r3, [r7, #7]
 800bf9c:	00db      	lsls	r3, r3, #3
 800bf9e:	4a12      	ldr	r2, [pc, #72]	@ (800bfe8 <BSP_PB_Init+0x98>)
 800bfa0:	1898      	adds	r0, r3, r2
 800bfa2:	79fb      	ldrb	r3, [r7, #7]
 800bfa4:	4a12      	ldr	r2, [pc, #72]	@ (800bff0 <BSP_PB_Init+0xa0>)
 800bfa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfaa:	461a      	mov	r2, r3
 800bfac:	2100      	movs	r1, #0
 800bfae:	f000 fe6d 	bl	800cc8c <HAL_EXTI_RegisterCallback>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d003      	beq.n	800bfc0 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800bfb8:	f06f 0303 	mvn.w	r3, #3
 800bfbc:	60fb      	str	r3, [r7, #12]
 800bfbe:	e00c      	b.n	800bfda <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800bfc0:	2028      	movs	r0, #40	@ 0x28
 800bfc2:	79fb      	ldrb	r3, [r7, #7]
 800bfc4:	4a0b      	ldr	r2, [pc, #44]	@ (800bff4 <BSP_PB_Init+0xa4>)
 800bfc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	4619      	mov	r1, r3
 800bfce:	f000 fab6 	bl	800c53e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800bfd2:	2328      	movs	r3, #40	@ 0x28
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f000 face 	bl	800c576 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800bfda:	68fb      	ldr	r3, [r7, #12]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3710      	adds	r7, #16
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	0801826c 	.word	0x0801826c
 800bfe8:	20000214 	.word	0x20000214
 800bfec:	08018270 	.word	0x08018270
 800bff0:	08018274 	.word	0x08018274
 800bff4:	08018278 	.word	0x08018278

0800bff8 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b082      	sub	sp, #8
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	4603      	mov	r3, r0
 800c000:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800c002:	79fb      	ldrb	r3, [r7, #7]
 800c004:	4a09      	ldr	r2, [pc, #36]	@ (800c02c <BSP_PB_GetState+0x34>)
 800c006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c00a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c00e:	4611      	mov	r1, r2
 800c010:	4618      	mov	r0, r3
 800c012:	f001 f8d1 	bl	800d1b8 <HAL_GPIO_ReadPin>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	bf0c      	ite	eq
 800c01c:	2301      	moveq	r3, #1
 800c01e:	2300      	movne	r3, #0
 800c020:	b2db      	uxtb	r3, r3
}
 800c022:	4618      	mov	r0, r3
 800c024:	3708      	adds	r7, #8
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	bf00      	nop
 800c02c:	20000210 	.word	0x20000210

0800c030 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800c034:	2000      	movs	r0, #0
 800c036:	f005 fcb3 	bl	80119a0 <BSP_PB_Callback>
}
 800c03a:	bf00      	nop
 800c03c:	bd80      	pop	{r7, pc}
	...

0800c040 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800c040:	b580      	push	{r7, lr}
 800c042:	b088      	sub	sp, #32
 800c044:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c046:	2300      	movs	r3, #0
 800c048:	60bb      	str	r3, [r7, #8]
 800c04a:	4b1a      	ldr	r3, [pc, #104]	@ (800c0b4 <BUTTON_USER_GPIO_Init+0x74>)
 800c04c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c04e:	4a19      	ldr	r2, [pc, #100]	@ (800c0b4 <BUTTON_USER_GPIO_Init+0x74>)
 800c050:	f043 0304 	orr.w	r3, r3, #4
 800c054:	6313      	str	r3, [r2, #48]	@ 0x30
 800c056:	4b17      	ldr	r3, [pc, #92]	@ (800c0b4 <BUTTON_USER_GPIO_Init+0x74>)
 800c058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c05a:	f003 0304 	and.w	r3, r3, #4
 800c05e:	60bb      	str	r3, [r7, #8]
 800c060:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c062:	f107 030c 	add.w	r3, r7, #12
 800c066:	2200      	movs	r2, #0
 800c068:	601a      	str	r2, [r3, #0]
 800c06a:	605a      	str	r2, [r3, #4]
 800c06c:	609a      	str	r2, [r3, #8]
 800c06e:	60da      	str	r2, [r3, #12]
 800c070:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c072:	2300      	movs	r3, #0
 800c074:	607b      	str	r3, [r7, #4]
 800c076:	4b0f      	ldr	r3, [pc, #60]	@ (800c0b4 <BUTTON_USER_GPIO_Init+0x74>)
 800c078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c07a:	4a0e      	ldr	r2, [pc, #56]	@ (800c0b4 <BUTTON_USER_GPIO_Init+0x74>)
 800c07c:	f043 0304 	orr.w	r3, r3, #4
 800c080:	6313      	str	r3, [r2, #48]	@ 0x30
 800c082:	4b0c      	ldr	r3, [pc, #48]	@ (800c0b4 <BUTTON_USER_GPIO_Init+0x74>)
 800c084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c086:	f003 0304 	and.w	r3, r3, #4
 800c08a:	607b      	str	r3, [r7, #4]
 800c08c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800c08e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c092:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800c094:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800c098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c09a:	2300      	movs	r3, #0
 800c09c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800c09e:	f107 030c 	add.w	r3, r7, #12
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	4804      	ldr	r0, [pc, #16]	@ (800c0b8 <BUTTON_USER_GPIO_Init+0x78>)
 800c0a6:	f000 fe1f 	bl	800cce8 <HAL_GPIO_Init>

}
 800c0aa:	bf00      	nop
 800c0ac:	3720      	adds	r7, #32
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	40023800 	.word	0x40023800
 800c0b8:	40020800 	.word	0x40020800

0800c0bc <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800c0ca:	79fb      	ldrb	r3, [r7, #7]
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d903      	bls.n	800c0d8 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c0d0:	f06f 0301 	mvn.w	r3, #1
 800c0d4:	60fb      	str	r3, [r7, #12]
 800c0d6:	e025      	b.n	800c124 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800c0d8:	79fb      	ldrb	r3, [r7, #7]
 800c0da:	79fa      	ldrb	r2, [r7, #7]
 800c0dc:	4914      	ldr	r1, [pc, #80]	@ (800c130 <BSP_COM_Init+0x74>)
 800c0de:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c0e2:	4814      	ldr	r0, [pc, #80]	@ (800c134 <BSP_COM_Init+0x78>)
 800c0e4:	4613      	mov	r3, r2
 800c0e6:	00db      	lsls	r3, r3, #3
 800c0e8:	4413      	add	r3, r2
 800c0ea:	00db      	lsls	r3, r3, #3
 800c0ec:	4403      	add	r3, r0
 800c0ee:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800c0f0:	79fa      	ldrb	r2, [r7, #7]
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	00db      	lsls	r3, r3, #3
 800c0f6:	4413      	add	r3, r2
 800c0f8:	00db      	lsls	r3, r3, #3
 800c0fa:	4a0e      	ldr	r2, [pc, #56]	@ (800c134 <BSP_COM_Init+0x78>)
 800c0fc:	4413      	add	r3, r2
 800c0fe:	4618      	mov	r0, r3
 800c100:	f000 f864 	bl	800c1cc <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800c104:	79fa      	ldrb	r2, [r7, #7]
 800c106:	4613      	mov	r3, r2
 800c108:	00db      	lsls	r3, r3, #3
 800c10a:	4413      	add	r3, r2
 800c10c:	00db      	lsls	r3, r3, #3
 800c10e:	4a09      	ldr	r2, [pc, #36]	@ (800c134 <BSP_COM_Init+0x78>)
 800c110:	4413      	add	r3, r2
 800c112:	4618      	mov	r0, r3
 800c114:	f000 f810 	bl	800c138 <MX_USART2_UART_Init>
 800c118:	4603      	mov	r3, r0
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d002      	beq.n	800c124 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c11e:	f06f 0303 	mvn.w	r3, #3
 800c122:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800c124:	68fb      	ldr	r3, [r7, #12]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	2000021c 	.word	0x2000021c
 800c134:	20000b48 	.word	0x20000b48

0800c138 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c140:	2300      	movs	r3, #0
 800c142:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	4a12      	ldr	r2, [pc, #72]	@ (800c190 <MX_USART2_UART_Init+0x58>)
 800c148:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800c150:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2200      	movs	r2, #0
 800c15c:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	220c      	movs	r2, #12
 800c168:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f004 fdf0 	bl	8010d5c <HAL_UART_Init>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d001      	beq.n	800c186 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800c182:	2301      	movs	r3, #1
 800c184:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c186:	7bfb      	ldrb	r3, [r7, #15]
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3710      	adds	r7, #16
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	40004400 	.word	0x40004400

0800c194 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800c19c:	4b09      	ldr	r3, [pc, #36]	@ (800c1c4 <__io_putchar+0x30>)
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	00db      	lsls	r3, r3, #3
 800c1a6:	4413      	add	r3, r2
 800c1a8:	00db      	lsls	r3, r3, #3
 800c1aa:	4a07      	ldr	r2, [pc, #28]	@ (800c1c8 <__io_putchar+0x34>)
 800c1ac:	1898      	adds	r0, r3, r2
 800c1ae:	1d39      	adds	r1, r7, #4
 800c1b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	f004 fe2b 	bl	8010e10 <HAL_UART_Transmit>
  return ch;
 800c1ba:	687b      	ldr	r3, [r7, #4]
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	20000b90 	.word	0x20000b90
 800c1c8:	20000b48 	.word	0x20000b48

0800c1cc <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b08a      	sub	sp, #40	@ 0x28
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	613b      	str	r3, [r7, #16]
 800c1d8:	4b1e      	ldr	r3, [pc, #120]	@ (800c254 <USART2_MspInit+0x88>)
 800c1da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1dc:	4a1d      	ldr	r2, [pc, #116]	@ (800c254 <USART2_MspInit+0x88>)
 800c1de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c1e2:	6413      	str	r3, [r2, #64]	@ 0x40
 800c1e4:	4b1b      	ldr	r3, [pc, #108]	@ (800c254 <USART2_MspInit+0x88>)
 800c1e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1ec:	613b      	str	r3, [r7, #16]
 800c1ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	60fb      	str	r3, [r7, #12]
 800c1f4:	4b17      	ldr	r3, [pc, #92]	@ (800c254 <USART2_MspInit+0x88>)
 800c1f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1f8:	4a16      	ldr	r2, [pc, #88]	@ (800c254 <USART2_MspInit+0x88>)
 800c1fa:	f043 0301 	orr.w	r3, r3, #1
 800c1fe:	6313      	str	r3, [r2, #48]	@ 0x30
 800c200:	4b14      	ldr	r3, [pc, #80]	@ (800c254 <USART2_MspInit+0x88>)
 800c202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c204:	f003 0301 	and.w	r3, r3, #1
 800c208:	60fb      	str	r3, [r7, #12]
 800c20a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800c20c:	2304      	movs	r3, #4
 800c20e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c210:	2302      	movs	r3, #2
 800c212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c214:	2300      	movs	r3, #0
 800c216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c218:	2300      	movs	r3, #0
 800c21a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800c21c:	2307      	movs	r3, #7
 800c21e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800c220:	f107 0314 	add.w	r3, r7, #20
 800c224:	4619      	mov	r1, r3
 800c226:	480c      	ldr	r0, [pc, #48]	@ (800c258 <USART2_MspInit+0x8c>)
 800c228:	f000 fd5e 	bl	800cce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800c22c:	2308      	movs	r3, #8
 800c22e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c230:	2302      	movs	r3, #2
 800c232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c234:	2300      	movs	r3, #0
 800c236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c238:	2300      	movs	r3, #0
 800c23a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800c23c:	2307      	movs	r3, #7
 800c23e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800c240:	f107 0314 	add.w	r3, r7, #20
 800c244:	4619      	mov	r1, r3
 800c246:	4804      	ldr	r0, [pc, #16]	@ (800c258 <USART2_MspInit+0x8c>)
 800c248:	f000 fd4e 	bl	800cce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800c24c:	bf00      	nop
 800c24e:	3728      	adds	r7, #40	@ 0x28
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}
 800c254:	40023800 	.word	0x40023800
 800c258:	40020000 	.word	0x40020000

0800c25c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c260:	4b0e      	ldr	r3, [pc, #56]	@ (800c29c <HAL_Init+0x40>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a0d      	ldr	r2, [pc, #52]	@ (800c29c <HAL_Init+0x40>)
 800c266:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c26a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800c26c:	4b0b      	ldr	r3, [pc, #44]	@ (800c29c <HAL_Init+0x40>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	4a0a      	ldr	r2, [pc, #40]	@ (800c29c <HAL_Init+0x40>)
 800c272:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c278:	4b08      	ldr	r3, [pc, #32]	@ (800c29c <HAL_Init+0x40>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	4a07      	ldr	r2, [pc, #28]	@ (800c29c <HAL_Init+0x40>)
 800c27e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c284:	2003      	movs	r0, #3
 800c286:	f000 f94f 	bl	800c528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c28a:	2000      	movs	r0, #0
 800c28c:	f000 f808 	bl	800c2a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c290:	f7f5 ff1e 	bl	80020d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c294:	2300      	movs	r3, #0
}
 800c296:	4618      	mov	r0, r3
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	40023c00 	.word	0x40023c00

0800c2a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c2a8:	4b12      	ldr	r3, [pc, #72]	@ (800c2f4 <HAL_InitTick+0x54>)
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	4b12      	ldr	r3, [pc, #72]	@ (800c2f8 <HAL_InitTick+0x58>)
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c2b6:	fbb3 f3f1 	udiv	r3, r3, r1
 800c2ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f000 f967 	bl	800c592 <HAL_SYSTICK_Config>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d001      	beq.n	800c2ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	e00e      	b.n	800c2ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2b0f      	cmp	r3, #15
 800c2d2:	d80a      	bhi.n	800c2ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	6879      	ldr	r1, [r7, #4]
 800c2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2dc:	f000 f92f 	bl	800c53e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c2e0:	4a06      	ldr	r2, [pc, #24]	@ (800c2fc <HAL_InitTick+0x5c>)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	e000      	b.n	800c2ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c2ea:	2301      	movs	r3, #1
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3708      	adds	r7, #8
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	20000000 	.word	0x20000000
 800c2f8:	20000224 	.word	0x20000224
 800c2fc:	20000220 	.word	0x20000220

0800c300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c300:	b480      	push	{r7}
 800c302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c304:	4b06      	ldr	r3, [pc, #24]	@ (800c320 <HAL_IncTick+0x20>)
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	461a      	mov	r2, r3
 800c30a:	4b06      	ldr	r3, [pc, #24]	@ (800c324 <HAL_IncTick+0x24>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4413      	add	r3, r2
 800c310:	4a04      	ldr	r2, [pc, #16]	@ (800c324 <HAL_IncTick+0x24>)
 800c312:	6013      	str	r3, [r2, #0]
}
 800c314:	bf00      	nop
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	20000224 	.word	0x20000224
 800c324:	20000b94 	.word	0x20000b94

0800c328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c328:	b480      	push	{r7}
 800c32a:	af00      	add	r7, sp, #0
  return uwTick;
 800c32c:	4b03      	ldr	r3, [pc, #12]	@ (800c33c <HAL_GetTick+0x14>)
 800c32e:	681b      	ldr	r3, [r3, #0]
}
 800c330:	4618      	mov	r0, r3
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr
 800c33a:	bf00      	nop
 800c33c:	20000b94 	.word	0x20000b94

0800c340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c348:	f7ff ffee 	bl	800c328 <HAL_GetTick>
 800c34c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c358:	d005      	beq.n	800c366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c35a:	4b0a      	ldr	r3, [pc, #40]	@ (800c384 <HAL_Delay+0x44>)
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	461a      	mov	r2, r3
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	4413      	add	r3, r2
 800c364:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c366:	bf00      	nop
 800c368:	f7ff ffde 	bl	800c328 <HAL_GetTick>
 800c36c:	4602      	mov	r2, r0
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	1ad3      	subs	r3, r2, r3
 800c372:	68fa      	ldr	r2, [r7, #12]
 800c374:	429a      	cmp	r2, r3
 800c376:	d8f7      	bhi.n	800c368 <HAL_Delay+0x28>
  {
  }
}
 800c378:	bf00      	nop
 800c37a:	bf00      	nop
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	20000224 	.word	0x20000224

0800c388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c388:	b480      	push	{r7}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f003 0307 	and.w	r3, r3, #7
 800c396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c398:	4b0c      	ldr	r3, [pc, #48]	@ (800c3cc <__NVIC_SetPriorityGrouping+0x44>)
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c39e:	68ba      	ldr	r2, [r7, #8]
 800c3a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c3a4:	4013      	ands	r3, r2
 800c3a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c3b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c3b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c3b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c3ba:	4a04      	ldr	r2, [pc, #16]	@ (800c3cc <__NVIC_SetPriorityGrouping+0x44>)
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	60d3      	str	r3, [r2, #12]
}
 800c3c0:	bf00      	nop
 800c3c2:	3714      	adds	r7, #20
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr
 800c3cc:	e000ed00 	.word	0xe000ed00

0800c3d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c3d4:	4b04      	ldr	r3, [pc, #16]	@ (800c3e8 <__NVIC_GetPriorityGrouping+0x18>)
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	0a1b      	lsrs	r3, r3, #8
 800c3da:	f003 0307 	and.w	r3, r3, #7
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e6:	4770      	bx	lr
 800c3e8:	e000ed00 	.word	0xe000ed00

0800c3ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c3f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	db0b      	blt.n	800c416 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c3fe:	79fb      	ldrb	r3, [r7, #7]
 800c400:	f003 021f 	and.w	r2, r3, #31
 800c404:	4907      	ldr	r1, [pc, #28]	@ (800c424 <__NVIC_EnableIRQ+0x38>)
 800c406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c40a:	095b      	lsrs	r3, r3, #5
 800c40c:	2001      	movs	r0, #1
 800c40e:	fa00 f202 	lsl.w	r2, r0, r2
 800c412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800c416:	bf00      	nop
 800c418:	370c      	adds	r7, #12
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	e000e100 	.word	0xe000e100

0800c428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c428:	b480      	push	{r7}
 800c42a:	b083      	sub	sp, #12
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	4603      	mov	r3, r0
 800c430:	6039      	str	r1, [r7, #0]
 800c432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	db0a      	blt.n	800c452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	b2da      	uxtb	r2, r3
 800c440:	490c      	ldr	r1, [pc, #48]	@ (800c474 <__NVIC_SetPriority+0x4c>)
 800c442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c446:	0112      	lsls	r2, r2, #4
 800c448:	b2d2      	uxtb	r2, r2
 800c44a:	440b      	add	r3, r1
 800c44c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c450:	e00a      	b.n	800c468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	b2da      	uxtb	r2, r3
 800c456:	4908      	ldr	r1, [pc, #32]	@ (800c478 <__NVIC_SetPriority+0x50>)
 800c458:	79fb      	ldrb	r3, [r7, #7]
 800c45a:	f003 030f 	and.w	r3, r3, #15
 800c45e:	3b04      	subs	r3, #4
 800c460:	0112      	lsls	r2, r2, #4
 800c462:	b2d2      	uxtb	r2, r2
 800c464:	440b      	add	r3, r1
 800c466:	761a      	strb	r2, [r3, #24]
}
 800c468:	bf00      	nop
 800c46a:	370c      	adds	r7, #12
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr
 800c474:	e000e100 	.word	0xe000e100
 800c478:	e000ed00 	.word	0xe000ed00

0800c47c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b089      	sub	sp, #36	@ 0x24
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f003 0307 	and.w	r3, r3, #7
 800c48e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	f1c3 0307 	rsb	r3, r3, #7
 800c496:	2b04      	cmp	r3, #4
 800c498:	bf28      	it	cs
 800c49a:	2304      	movcs	r3, #4
 800c49c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	3304      	adds	r3, #4
 800c4a2:	2b06      	cmp	r3, #6
 800c4a4:	d902      	bls.n	800c4ac <NVIC_EncodePriority+0x30>
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	3b03      	subs	r3, #3
 800c4aa:	e000      	b.n	800c4ae <NVIC_EncodePriority+0x32>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c4b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ba:	43da      	mvns	r2, r3
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	401a      	ands	r2, r3
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c4c4:	f04f 31ff 	mov.w	r1, #4294967295
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	fa01 f303 	lsl.w	r3, r1, r3
 800c4ce:	43d9      	mvns	r1, r3
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c4d4:	4313      	orrs	r3, r2
         );
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3724      	adds	r7, #36	@ 0x24
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr
	...

0800c4e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b082      	sub	sp, #8
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c4f4:	d301      	bcc.n	800c4fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e00f      	b.n	800c51a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c4fa:	4a0a      	ldr	r2, [pc, #40]	@ (800c524 <SysTick_Config+0x40>)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	3b01      	subs	r3, #1
 800c500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c502:	210f      	movs	r1, #15
 800c504:	f04f 30ff 	mov.w	r0, #4294967295
 800c508:	f7ff ff8e 	bl	800c428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c50c:	4b05      	ldr	r3, [pc, #20]	@ (800c524 <SysTick_Config+0x40>)
 800c50e:	2200      	movs	r2, #0
 800c510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c512:	4b04      	ldr	r3, [pc, #16]	@ (800c524 <SysTick_Config+0x40>)
 800c514:	2207      	movs	r2, #7
 800c516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3708      	adds	r7, #8
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	e000e010 	.word	0xe000e010

0800c528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f7ff ff29 	bl	800c388 <__NVIC_SetPriorityGrouping>
}
 800c536:	bf00      	nop
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c53e:	b580      	push	{r7, lr}
 800c540:	b086      	sub	sp, #24
 800c542:	af00      	add	r7, sp, #0
 800c544:	4603      	mov	r3, r0
 800c546:	60b9      	str	r1, [r7, #8]
 800c548:	607a      	str	r2, [r7, #4]
 800c54a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c54c:	2300      	movs	r3, #0
 800c54e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c550:	f7ff ff3e 	bl	800c3d0 <__NVIC_GetPriorityGrouping>
 800c554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	68b9      	ldr	r1, [r7, #8]
 800c55a:	6978      	ldr	r0, [r7, #20]
 800c55c:	f7ff ff8e 	bl	800c47c <NVIC_EncodePriority>
 800c560:	4602      	mov	r2, r0
 800c562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c566:	4611      	mov	r1, r2
 800c568:	4618      	mov	r0, r3
 800c56a:	f7ff ff5d 	bl	800c428 <__NVIC_SetPriority>
}
 800c56e:	bf00      	nop
 800c570:	3718      	adds	r7, #24
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}

0800c576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c576:	b580      	push	{r7, lr}
 800c578:	b082      	sub	sp, #8
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	4603      	mov	r3, r0
 800c57e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c584:	4618      	mov	r0, r3
 800c586:	f7ff ff31 	bl	800c3ec <__NVIC_EnableIRQ>
}
 800c58a:	bf00      	nop
 800c58c:	3708      	adds	r7, #8
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b082      	sub	sp, #8
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f7ff ffa2 	bl	800c4e4 <SysTick_Config>
 800c5a0:	4603      	mov	r3, r0
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3708      	adds	r7, #8
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
	...

0800c5ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b086      	sub	sp, #24
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c5b8:	f7ff feb6 	bl	800c328 <HAL_GetTick>
 800c5bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d101      	bne.n	800c5c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	e099      	b.n	800c6fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2202      	movs	r2, #2
 800c5cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	681a      	ldr	r2, [r3, #0]
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f022 0201 	bic.w	r2, r2, #1
 800c5e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c5e8:	e00f      	b.n	800c60a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c5ea:	f7ff fe9d 	bl	800c328 <HAL_GetTick>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	1ad3      	subs	r3, r2, r3
 800c5f4:	2b05      	cmp	r3, #5
 800c5f6:	d908      	bls.n	800c60a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2220      	movs	r2, #32
 800c5fc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2203      	movs	r2, #3
 800c602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800c606:	2303      	movs	r3, #3
 800c608:	e078      	b.n	800c6fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f003 0301 	and.w	r3, r3, #1
 800c614:	2b00      	cmp	r3, #0
 800c616:	d1e8      	bne.n	800c5ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c620:	697a      	ldr	r2, [r7, #20]
 800c622:	4b38      	ldr	r3, [pc, #224]	@ (800c704 <HAL_DMA_Init+0x158>)
 800c624:	4013      	ands	r3, r2
 800c626:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	685a      	ldr	r2, [r3, #4]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c636:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	691b      	ldr	r3, [r3, #16]
 800c63c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c642:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	699b      	ldr	r3, [r3, #24]
 800c648:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c64e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6a1b      	ldr	r3, [r3, #32]
 800c654:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c656:	697a      	ldr	r2, [r7, #20]
 800c658:	4313      	orrs	r3, r2
 800c65a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c660:	2b04      	cmp	r3, #4
 800c662:	d107      	bne.n	800c674 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c66c:	4313      	orrs	r3, r2
 800c66e:	697a      	ldr	r2, [r7, #20]
 800c670:	4313      	orrs	r3, r2
 800c672:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	697a      	ldr	r2, [r7, #20]
 800c67a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	695b      	ldr	r3, [r3, #20]
 800c682:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	f023 0307 	bic.w	r3, r3, #7
 800c68a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c690:	697a      	ldr	r2, [r7, #20]
 800c692:	4313      	orrs	r3, r2
 800c694:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c69a:	2b04      	cmp	r3, #4
 800c69c:	d117      	bne.n	800c6ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6a2:	697a      	ldr	r2, [r7, #20]
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d00e      	beq.n	800c6ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 fa6f 	bl	800cb94 <DMA_CheckFifoParam>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d008      	beq.n	800c6ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2240      	movs	r2, #64	@ 0x40
 800c6c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e016      	b.n	800c6fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	697a      	ldr	r2, [r7, #20]
 800c6d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 fa26 	bl	800cb28 <DMA_CalcBaseAndBitshift>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6e4:	223f      	movs	r2, #63	@ 0x3f
 800c6e6:	409a      	lsls	r2, r3
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800c6fa:	2300      	movs	r3, #0
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3718      	adds	r7, #24
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	f010803f 	.word	0xf010803f

0800c708 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b086      	sub	sp, #24
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
 800c714:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c716:	2300      	movs	r3, #0
 800c718:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c71e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c726:	2b01      	cmp	r3, #1
 800c728:	d101      	bne.n	800c72e <HAL_DMA_Start_IT+0x26>
 800c72a:	2302      	movs	r3, #2
 800c72c:	e040      	b.n	800c7b0 <HAL_DMA_Start_IT+0xa8>
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2201      	movs	r2, #1
 800c732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d12f      	bne.n	800c7a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2202      	movs	r2, #2
 800c746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2200      	movs	r2, #0
 800c74e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	68b9      	ldr	r1, [r7, #8]
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f000 f9b8 	bl	800cacc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c760:	223f      	movs	r2, #63	@ 0x3f
 800c762:	409a      	lsls	r2, r3
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	681a      	ldr	r2, [r3, #0]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f042 0216 	orr.w	r2, r2, #22
 800c776:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d007      	beq.n	800c790 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	f042 0208 	orr.w	r2, r2, #8
 800c78e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f042 0201 	orr.w	r2, r2, #1
 800c79e:	601a      	str	r2, [r3, #0]
 800c7a0:	e005      	b.n	800c7ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c7aa:	2302      	movs	r3, #2
 800c7ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c7ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3718      	adds	r7, #24
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c7c4:	4b8e      	ldr	r3, [pc, #568]	@ (800ca00 <HAL_DMA_IRQHandler+0x248>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4a8e      	ldr	r2, [pc, #568]	@ (800ca04 <HAL_DMA_IRQHandler+0x24c>)
 800c7ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c7ce:	0a9b      	lsrs	r3, r3, #10
 800c7d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c7e2:	2208      	movs	r2, #8
 800c7e4:	409a      	lsls	r2, r3
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	4013      	ands	r3, r2
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d01a      	beq.n	800c824 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f003 0304 	and.w	r3, r3, #4
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d013      	beq.n	800c824 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f022 0204 	bic.w	r2, r2, #4
 800c80a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c810:	2208      	movs	r2, #8
 800c812:	409a      	lsls	r2, r3
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c81c:	f043 0201 	orr.w	r2, r3, #1
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c828:	2201      	movs	r2, #1
 800c82a:	409a      	lsls	r2, r3
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	4013      	ands	r3, r2
 800c830:	2b00      	cmp	r3, #0
 800c832:	d012      	beq.n	800c85a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	695b      	ldr	r3, [r3, #20]
 800c83a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00b      	beq.n	800c85a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c846:	2201      	movs	r2, #1
 800c848:	409a      	lsls	r2, r3
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c852:	f043 0202 	orr.w	r2, r3, #2
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c85e:	2204      	movs	r2, #4
 800c860:	409a      	lsls	r2, r3
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	4013      	ands	r3, r2
 800c866:	2b00      	cmp	r3, #0
 800c868:	d012      	beq.n	800c890 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f003 0302 	and.w	r3, r3, #2
 800c874:	2b00      	cmp	r3, #0
 800c876:	d00b      	beq.n	800c890 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c87c:	2204      	movs	r2, #4
 800c87e:	409a      	lsls	r2, r3
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c888:	f043 0204 	orr.w	r2, r3, #4
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c894:	2210      	movs	r2, #16
 800c896:	409a      	lsls	r2, r3
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	4013      	ands	r3, r2
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d043      	beq.n	800c928 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f003 0308 	and.w	r3, r3, #8
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d03c      	beq.n	800c928 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c8b2:	2210      	movs	r2, #16
 800c8b4:	409a      	lsls	r2, r3
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d018      	beq.n	800c8fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d108      	bne.n	800c8e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d024      	beq.n	800c928 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	4798      	blx	r3
 800c8e6:	e01f      	b.n	800c928 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d01b      	beq.n	800c928 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	4798      	blx	r3
 800c8f8:	e016      	b.n	800c928 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c904:	2b00      	cmp	r3, #0
 800c906:	d107      	bne.n	800c918 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f022 0208 	bic.w	r2, r2, #8
 800c916:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d003      	beq.n	800c928 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c92c:	2220      	movs	r2, #32
 800c92e:	409a      	lsls	r2, r3
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	4013      	ands	r3, r2
 800c934:	2b00      	cmp	r3, #0
 800c936:	f000 808f 	beq.w	800ca58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f003 0310 	and.w	r3, r3, #16
 800c944:	2b00      	cmp	r3, #0
 800c946:	f000 8087 	beq.w	800ca58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c94e:	2220      	movs	r2, #32
 800c950:	409a      	lsls	r2, r3
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	2b05      	cmp	r3, #5
 800c960:	d136      	bne.n	800c9d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f022 0216 	bic.w	r2, r2, #22
 800c970:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	695a      	ldr	r2, [r3, #20]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c980:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c986:	2b00      	cmp	r3, #0
 800c988:	d103      	bne.n	800c992 <HAL_DMA_IRQHandler+0x1da>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d007      	beq.n	800c9a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f022 0208 	bic.w	r2, r2, #8
 800c9a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c9a6:	223f      	movs	r2, #63	@ 0x3f
 800c9a8:	409a      	lsls	r2, r3
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d07e      	beq.n	800cac4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	4798      	blx	r3
        }
        return;
 800c9ce:	e079      	b.n	800cac4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d01d      	beq.n	800ca1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d10d      	bne.n	800ca08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d031      	beq.n	800ca58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	4798      	blx	r3
 800c9fc:	e02c      	b.n	800ca58 <HAL_DMA_IRQHandler+0x2a0>
 800c9fe:	bf00      	nop
 800ca00:	20000000 	.word	0x20000000
 800ca04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d023      	beq.n	800ca58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	4798      	blx	r3
 800ca18:	e01e      	b.n	800ca58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d10f      	bne.n	800ca48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f022 0210 	bic.w	r2, r2, #16
 800ca36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d003      	beq.n	800ca58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d032      	beq.n	800cac6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca64:	f003 0301 	and.w	r3, r3, #1
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d022      	beq.n	800cab2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2205      	movs	r2, #5
 800ca70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f022 0201 	bic.w	r2, r2, #1
 800ca82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	3301      	adds	r3, #1
 800ca88:	60bb      	str	r3, [r7, #8]
 800ca8a:	697a      	ldr	r2, [r7, #20]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d307      	bcc.n	800caa0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f003 0301 	and.w	r3, r3, #1
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d1f2      	bne.n	800ca84 <HAL_DMA_IRQHandler+0x2cc>
 800ca9e:	e000      	b.n	800caa2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800caa0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2201      	movs	r2, #1
 800caa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d005      	beq.n	800cac6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	4798      	blx	r3
 800cac2:	e000      	b.n	800cac6 <HAL_DMA_IRQHandler+0x30e>
        return;
 800cac4:	bf00      	nop
    }
  }
}
 800cac6:	3718      	adds	r7, #24
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cacc:	b480      	push	{r7}
 800cace:	b085      	sub	sp, #20
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	607a      	str	r2, [r7, #4]
 800cad8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800cae8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	683a      	ldr	r2, [r7, #0]
 800caf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	689b      	ldr	r3, [r3, #8]
 800caf6:	2b40      	cmp	r3, #64	@ 0x40
 800caf8:	d108      	bne.n	800cb0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	68ba      	ldr	r2, [r7, #8]
 800cb08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800cb0a:	e007      	b.n	800cb1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	68ba      	ldr	r2, [r7, #8]
 800cb12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	60da      	str	r2, [r3, #12]
}
 800cb1c:	bf00      	nop
 800cb1e:	3714      	adds	r7, #20
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr

0800cb28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	3b10      	subs	r3, #16
 800cb38:	4a14      	ldr	r2, [pc, #80]	@ (800cb8c <DMA_CalcBaseAndBitshift+0x64>)
 800cb3a:	fba2 2303 	umull	r2, r3, r2, r3
 800cb3e:	091b      	lsrs	r3, r3, #4
 800cb40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800cb42:	4a13      	ldr	r2, [pc, #76]	@ (800cb90 <DMA_CalcBaseAndBitshift+0x68>)
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	4413      	add	r3, r2
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2b03      	cmp	r3, #3
 800cb54:	d909      	bls.n	800cb6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800cb5e:	f023 0303 	bic.w	r3, r3, #3
 800cb62:	1d1a      	adds	r2, r3, #4
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	659a      	str	r2, [r3, #88]	@ 0x58
 800cb68:	e007      	b.n	800cb7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800cb72:	f023 0303 	bic.w	r3, r3, #3
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3714      	adds	r7, #20
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop
 800cb8c:	aaaaaaab 	.word	0xaaaaaaab
 800cb90:	0801827c 	.word	0x0801827c

0800cb94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b085      	sub	sp, #20
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cba4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	699b      	ldr	r3, [r3, #24]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d11f      	bne.n	800cbee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	2b03      	cmp	r3, #3
 800cbb2:	d856      	bhi.n	800cc62 <DMA_CheckFifoParam+0xce>
 800cbb4:	a201      	add	r2, pc, #4	@ (adr r2, 800cbbc <DMA_CheckFifoParam+0x28>)
 800cbb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbba:	bf00      	nop
 800cbbc:	0800cbcd 	.word	0x0800cbcd
 800cbc0:	0800cbdf 	.word	0x0800cbdf
 800cbc4:	0800cbcd 	.word	0x0800cbcd
 800cbc8:	0800cc63 	.word	0x0800cc63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d046      	beq.n	800cc66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cbdc:	e043      	b.n	800cc66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbe2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800cbe6:	d140      	bne.n	800cc6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cbec:	e03d      	b.n	800cc6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	699b      	ldr	r3, [r3, #24]
 800cbf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbf6:	d121      	bne.n	800cc3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	2b03      	cmp	r3, #3
 800cbfc:	d837      	bhi.n	800cc6e <DMA_CheckFifoParam+0xda>
 800cbfe:	a201      	add	r2, pc, #4	@ (adr r2, 800cc04 <DMA_CheckFifoParam+0x70>)
 800cc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc04:	0800cc15 	.word	0x0800cc15
 800cc08:	0800cc1b 	.word	0x0800cc1b
 800cc0c:	0800cc15 	.word	0x0800cc15
 800cc10:	0800cc2d 	.word	0x0800cc2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800cc14:	2301      	movs	r3, #1
 800cc16:	73fb      	strb	r3, [r7, #15]
      break;
 800cc18:	e030      	b.n	800cc7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d025      	beq.n	800cc72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800cc26:	2301      	movs	r3, #1
 800cc28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800cc2a:	e022      	b.n	800cc72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800cc34:	d11f      	bne.n	800cc76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800cc36:	2301      	movs	r3, #1
 800cc38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800cc3a:	e01c      	b.n	800cc76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	2b02      	cmp	r3, #2
 800cc40:	d903      	bls.n	800cc4a <DMA_CheckFifoParam+0xb6>
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	2b03      	cmp	r3, #3
 800cc46:	d003      	beq.n	800cc50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800cc48:	e018      	b.n	800cc7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	73fb      	strb	r3, [r7, #15]
      break;
 800cc4e:	e015      	b.n	800cc7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d00e      	beq.n	800cc7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	73fb      	strb	r3, [r7, #15]
      break;
 800cc60:	e00b      	b.n	800cc7a <DMA_CheckFifoParam+0xe6>
      break;
 800cc62:	bf00      	nop
 800cc64:	e00a      	b.n	800cc7c <DMA_CheckFifoParam+0xe8>
      break;
 800cc66:	bf00      	nop
 800cc68:	e008      	b.n	800cc7c <DMA_CheckFifoParam+0xe8>
      break;
 800cc6a:	bf00      	nop
 800cc6c:	e006      	b.n	800cc7c <DMA_CheckFifoParam+0xe8>
      break;
 800cc6e:	bf00      	nop
 800cc70:	e004      	b.n	800cc7c <DMA_CheckFifoParam+0xe8>
      break;
 800cc72:	bf00      	nop
 800cc74:	e002      	b.n	800cc7c <DMA_CheckFifoParam+0xe8>
      break;   
 800cc76:	bf00      	nop
 800cc78:	e000      	b.n	800cc7c <DMA_CheckFifoParam+0xe8>
      break;
 800cc7a:	bf00      	nop
    }
  } 
  
  return status; 
 800cc7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3714      	adds	r7, #20
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop

0800cc8c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b087      	sub	sp, #28
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	460b      	mov	r3, r1
 800cc96:	607a      	str	r2, [r7, #4]
 800cc98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800cc9e:	7afb      	ldrb	r3, [r7, #11]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d103      	bne.n	800ccac <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	605a      	str	r2, [r3, #4]
      break;
 800ccaa:	e002      	b.n	800ccb2 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800ccac:	2301      	movs	r3, #1
 800ccae:	75fb      	strb	r3, [r7, #23]
      break;
 800ccb0:	bf00      	nop
  }

  return status;
 800ccb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	371c      	adds	r7, #28
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d101      	bne.n	800ccd4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	e003      	b.n	800ccdc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	683a      	ldr	r2, [r7, #0]
 800ccd8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800ccda:	2300      	movs	r3, #0
  }
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b089      	sub	sp, #36	@ 0x24
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ccfe:	2300      	movs	r3, #0
 800cd00:	61fb      	str	r3, [r7, #28]
 800cd02:	e159      	b.n	800cfb8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cd04:	2201      	movs	r2, #1
 800cd06:	69fb      	ldr	r3, [r7, #28]
 800cd08:	fa02 f303 	lsl.w	r3, r2, r3
 800cd0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	697a      	ldr	r2, [r7, #20]
 800cd14:	4013      	ands	r3, r2
 800cd16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800cd18:	693a      	ldr	r2, [r7, #16]
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	f040 8148 	bne.w	800cfb2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	f003 0303 	and.w	r3, r3, #3
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d005      	beq.n	800cd3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800cd36:	2b02      	cmp	r3, #2
 800cd38:	d130      	bne.n	800cd9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	689b      	ldr	r3, [r3, #8]
 800cd3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cd40:	69fb      	ldr	r3, [r7, #28]
 800cd42:	005b      	lsls	r3, r3, #1
 800cd44:	2203      	movs	r2, #3
 800cd46:	fa02 f303 	lsl.w	r3, r2, r3
 800cd4a:	43db      	mvns	r3, r3
 800cd4c:	69ba      	ldr	r2, [r7, #24]
 800cd4e:	4013      	ands	r3, r2
 800cd50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	68da      	ldr	r2, [r3, #12]
 800cd56:	69fb      	ldr	r3, [r7, #28]
 800cd58:	005b      	lsls	r3, r3, #1
 800cd5a:	fa02 f303 	lsl.w	r3, r2, r3
 800cd5e:	69ba      	ldr	r2, [r7, #24]
 800cd60:	4313      	orrs	r3, r2
 800cd62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	69ba      	ldr	r2, [r7, #24]
 800cd68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cd70:	2201      	movs	r2, #1
 800cd72:	69fb      	ldr	r3, [r7, #28]
 800cd74:	fa02 f303 	lsl.w	r3, r2, r3
 800cd78:	43db      	mvns	r3, r3
 800cd7a:	69ba      	ldr	r2, [r7, #24]
 800cd7c:	4013      	ands	r3, r2
 800cd7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	091b      	lsrs	r3, r3, #4
 800cd86:	f003 0201 	and.w	r2, r3, #1
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd90:	69ba      	ldr	r2, [r7, #24]
 800cd92:	4313      	orrs	r3, r2
 800cd94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	69ba      	ldr	r2, [r7, #24]
 800cd9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	f003 0303 	and.w	r3, r3, #3
 800cda4:	2b03      	cmp	r3, #3
 800cda6:	d017      	beq.n	800cdd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800cdae:	69fb      	ldr	r3, [r7, #28]
 800cdb0:	005b      	lsls	r3, r3, #1
 800cdb2:	2203      	movs	r2, #3
 800cdb4:	fa02 f303 	lsl.w	r3, r2, r3
 800cdb8:	43db      	mvns	r3, r3
 800cdba:	69ba      	ldr	r2, [r7, #24]
 800cdbc:	4013      	ands	r3, r2
 800cdbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	689a      	ldr	r2, [r3, #8]
 800cdc4:	69fb      	ldr	r3, [r7, #28]
 800cdc6:	005b      	lsls	r3, r3, #1
 800cdc8:	fa02 f303 	lsl.w	r3, r2, r3
 800cdcc:	69ba      	ldr	r2, [r7, #24]
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	69ba      	ldr	r2, [r7, #24]
 800cdd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	f003 0303 	and.w	r3, r3, #3
 800cde0:	2b02      	cmp	r3, #2
 800cde2:	d123      	bne.n	800ce2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	08da      	lsrs	r2, r3, #3
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	3208      	adds	r2, #8
 800cdec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800cdf2:	69fb      	ldr	r3, [r7, #28]
 800cdf4:	f003 0307 	and.w	r3, r3, #7
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	220f      	movs	r2, #15
 800cdfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ce00:	43db      	mvns	r3, r3
 800ce02:	69ba      	ldr	r2, [r7, #24]
 800ce04:	4013      	ands	r3, r2
 800ce06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	691a      	ldr	r2, [r3, #16]
 800ce0c:	69fb      	ldr	r3, [r7, #28]
 800ce0e:	f003 0307 	and.w	r3, r3, #7
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	fa02 f303 	lsl.w	r3, r2, r3
 800ce18:	69ba      	ldr	r2, [r7, #24]
 800ce1a:	4313      	orrs	r3, r2
 800ce1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ce1e:	69fb      	ldr	r3, [r7, #28]
 800ce20:	08da      	lsrs	r2, r3, #3
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	3208      	adds	r2, #8
 800ce26:	69b9      	ldr	r1, [r7, #24]
 800ce28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ce32:	69fb      	ldr	r3, [r7, #28]
 800ce34:	005b      	lsls	r3, r3, #1
 800ce36:	2203      	movs	r2, #3
 800ce38:	fa02 f303 	lsl.w	r3, r2, r3
 800ce3c:	43db      	mvns	r3, r3
 800ce3e:	69ba      	ldr	r2, [r7, #24]
 800ce40:	4013      	ands	r3, r2
 800ce42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	f003 0203 	and.w	r2, r3, #3
 800ce4c:	69fb      	ldr	r3, [r7, #28]
 800ce4e:	005b      	lsls	r3, r3, #1
 800ce50:	fa02 f303 	lsl.w	r3, r2, r3
 800ce54:	69ba      	ldr	r2, [r7, #24]
 800ce56:	4313      	orrs	r3, r2
 800ce58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	69ba      	ldr	r2, [r7, #24]
 800ce5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	f000 80a2 	beq.w	800cfb2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ce6e:	2300      	movs	r3, #0
 800ce70:	60fb      	str	r3, [r7, #12]
 800ce72:	4b57      	ldr	r3, [pc, #348]	@ (800cfd0 <HAL_GPIO_Init+0x2e8>)
 800ce74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce76:	4a56      	ldr	r2, [pc, #344]	@ (800cfd0 <HAL_GPIO_Init+0x2e8>)
 800ce78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ce7c:	6453      	str	r3, [r2, #68]	@ 0x44
 800ce7e:	4b54      	ldr	r3, [pc, #336]	@ (800cfd0 <HAL_GPIO_Init+0x2e8>)
 800ce80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ce86:	60fb      	str	r3, [r7, #12]
 800ce88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ce8a:	4a52      	ldr	r2, [pc, #328]	@ (800cfd4 <HAL_GPIO_Init+0x2ec>)
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	089b      	lsrs	r3, r3, #2
 800ce90:	3302      	adds	r3, #2
 800ce92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	f003 0303 	and.w	r3, r3, #3
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	220f      	movs	r2, #15
 800cea2:	fa02 f303 	lsl.w	r3, r2, r3
 800cea6:	43db      	mvns	r3, r3
 800cea8:	69ba      	ldr	r2, [r7, #24]
 800ceaa:	4013      	ands	r3, r2
 800ceac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	4a49      	ldr	r2, [pc, #292]	@ (800cfd8 <HAL_GPIO_Init+0x2f0>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d019      	beq.n	800ceea <HAL_GPIO_Init+0x202>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	4a48      	ldr	r2, [pc, #288]	@ (800cfdc <HAL_GPIO_Init+0x2f4>)
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d013      	beq.n	800cee6 <HAL_GPIO_Init+0x1fe>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	4a47      	ldr	r2, [pc, #284]	@ (800cfe0 <HAL_GPIO_Init+0x2f8>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d00d      	beq.n	800cee2 <HAL_GPIO_Init+0x1fa>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	4a46      	ldr	r2, [pc, #280]	@ (800cfe4 <HAL_GPIO_Init+0x2fc>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d007      	beq.n	800cede <HAL_GPIO_Init+0x1f6>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	4a45      	ldr	r2, [pc, #276]	@ (800cfe8 <HAL_GPIO_Init+0x300>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d101      	bne.n	800ceda <HAL_GPIO_Init+0x1f2>
 800ced6:	2304      	movs	r3, #4
 800ced8:	e008      	b.n	800ceec <HAL_GPIO_Init+0x204>
 800ceda:	2307      	movs	r3, #7
 800cedc:	e006      	b.n	800ceec <HAL_GPIO_Init+0x204>
 800cede:	2303      	movs	r3, #3
 800cee0:	e004      	b.n	800ceec <HAL_GPIO_Init+0x204>
 800cee2:	2302      	movs	r3, #2
 800cee4:	e002      	b.n	800ceec <HAL_GPIO_Init+0x204>
 800cee6:	2301      	movs	r3, #1
 800cee8:	e000      	b.n	800ceec <HAL_GPIO_Init+0x204>
 800ceea:	2300      	movs	r3, #0
 800ceec:	69fa      	ldr	r2, [r7, #28]
 800ceee:	f002 0203 	and.w	r2, r2, #3
 800cef2:	0092      	lsls	r2, r2, #2
 800cef4:	4093      	lsls	r3, r2
 800cef6:	69ba      	ldr	r2, [r7, #24]
 800cef8:	4313      	orrs	r3, r2
 800cefa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cefc:	4935      	ldr	r1, [pc, #212]	@ (800cfd4 <HAL_GPIO_Init+0x2ec>)
 800cefe:	69fb      	ldr	r3, [r7, #28]
 800cf00:	089b      	lsrs	r3, r3, #2
 800cf02:	3302      	adds	r3, #2
 800cf04:	69ba      	ldr	r2, [r7, #24]
 800cf06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cf0a:	4b38      	ldr	r3, [pc, #224]	@ (800cfec <HAL_GPIO_Init+0x304>)
 800cf0c:	689b      	ldr	r3, [r3, #8]
 800cf0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	43db      	mvns	r3, r3
 800cf14:	69ba      	ldr	r2, [r7, #24]
 800cf16:	4013      	ands	r3, r2
 800cf18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d003      	beq.n	800cf2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800cf26:	69ba      	ldr	r2, [r7, #24]
 800cf28:	693b      	ldr	r3, [r7, #16]
 800cf2a:	4313      	orrs	r3, r2
 800cf2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cf2e:	4a2f      	ldr	r2, [pc, #188]	@ (800cfec <HAL_GPIO_Init+0x304>)
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cf34:	4b2d      	ldr	r3, [pc, #180]	@ (800cfec <HAL_GPIO_Init+0x304>)
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	43db      	mvns	r3, r3
 800cf3e:	69ba      	ldr	r2, [r7, #24]
 800cf40:	4013      	ands	r3, r2
 800cf42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	685b      	ldr	r3, [r3, #4]
 800cf48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d003      	beq.n	800cf58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800cf50:	69ba      	ldr	r2, [r7, #24]
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	4313      	orrs	r3, r2
 800cf56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cf58:	4a24      	ldr	r2, [pc, #144]	@ (800cfec <HAL_GPIO_Init+0x304>)
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800cf5e:	4b23      	ldr	r3, [pc, #140]	@ (800cfec <HAL_GPIO_Init+0x304>)
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	43db      	mvns	r3, r3
 800cf68:	69ba      	ldr	r2, [r7, #24]
 800cf6a:	4013      	ands	r3, r2
 800cf6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d003      	beq.n	800cf82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800cf7a:	69ba      	ldr	r2, [r7, #24]
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800cf82:	4a1a      	ldr	r2, [pc, #104]	@ (800cfec <HAL_GPIO_Init+0x304>)
 800cf84:	69bb      	ldr	r3, [r7, #24]
 800cf86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cf88:	4b18      	ldr	r3, [pc, #96]	@ (800cfec <HAL_GPIO_Init+0x304>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	43db      	mvns	r3, r3
 800cf92:	69ba      	ldr	r2, [r7, #24]
 800cf94:	4013      	ands	r3, r2
 800cf96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d003      	beq.n	800cfac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800cfa4:	69ba      	ldr	r2, [r7, #24]
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	4313      	orrs	r3, r2
 800cfaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800cfac:	4a0f      	ldr	r2, [pc, #60]	@ (800cfec <HAL_GPIO_Init+0x304>)
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cfb2:	69fb      	ldr	r3, [r7, #28]
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	61fb      	str	r3, [r7, #28]
 800cfb8:	69fb      	ldr	r3, [r7, #28]
 800cfba:	2b0f      	cmp	r3, #15
 800cfbc:	f67f aea2 	bls.w	800cd04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800cfc0:	bf00      	nop
 800cfc2:	bf00      	nop
 800cfc4:	3724      	adds	r7, #36	@ 0x24
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr
 800cfce:	bf00      	nop
 800cfd0:	40023800 	.word	0x40023800
 800cfd4:	40013800 	.word	0x40013800
 800cfd8:	40020000 	.word	0x40020000
 800cfdc:	40020400 	.word	0x40020400
 800cfe0:	40020800 	.word	0x40020800
 800cfe4:	40020c00 	.word	0x40020c00
 800cfe8:	40021000 	.word	0x40021000
 800cfec:	40013c00 	.word	0x40013c00

0800cff0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b087      	sub	sp, #28
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cffa:	2300      	movs	r3, #0
 800cffc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800cffe:	2300      	movs	r3, #0
 800d000:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800d002:	2300      	movs	r3, #0
 800d004:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d006:	2300      	movs	r3, #0
 800d008:	617b      	str	r3, [r7, #20]
 800d00a:	e0bb      	b.n	800d184 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800d00c:	2201      	movs	r2, #1
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	fa02 f303 	lsl.w	r3, r2, r3
 800d014:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800d016:	683a      	ldr	r2, [r7, #0]
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	4013      	ands	r3, r2
 800d01c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	429a      	cmp	r2, r3
 800d024:	f040 80ab 	bne.w	800d17e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d028:	4a5c      	ldr	r2, [pc, #368]	@ (800d19c <HAL_GPIO_DeInit+0x1ac>)
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	089b      	lsrs	r3, r3, #2
 800d02e:	3302      	adds	r3, #2
 800d030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d034:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	f003 0303 	and.w	r3, r3, #3
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	220f      	movs	r2, #15
 800d040:	fa02 f303 	lsl.w	r3, r2, r3
 800d044:	68ba      	ldr	r2, [r7, #8]
 800d046:	4013      	ands	r3, r2
 800d048:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	4a54      	ldr	r2, [pc, #336]	@ (800d1a0 <HAL_GPIO_DeInit+0x1b0>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d019      	beq.n	800d086 <HAL_GPIO_DeInit+0x96>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	4a53      	ldr	r2, [pc, #332]	@ (800d1a4 <HAL_GPIO_DeInit+0x1b4>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d013      	beq.n	800d082 <HAL_GPIO_DeInit+0x92>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	4a52      	ldr	r2, [pc, #328]	@ (800d1a8 <HAL_GPIO_DeInit+0x1b8>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d00d      	beq.n	800d07e <HAL_GPIO_DeInit+0x8e>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	4a51      	ldr	r2, [pc, #324]	@ (800d1ac <HAL_GPIO_DeInit+0x1bc>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d007      	beq.n	800d07a <HAL_GPIO_DeInit+0x8a>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4a50      	ldr	r2, [pc, #320]	@ (800d1b0 <HAL_GPIO_DeInit+0x1c0>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d101      	bne.n	800d076 <HAL_GPIO_DeInit+0x86>
 800d072:	2304      	movs	r3, #4
 800d074:	e008      	b.n	800d088 <HAL_GPIO_DeInit+0x98>
 800d076:	2307      	movs	r3, #7
 800d078:	e006      	b.n	800d088 <HAL_GPIO_DeInit+0x98>
 800d07a:	2303      	movs	r3, #3
 800d07c:	e004      	b.n	800d088 <HAL_GPIO_DeInit+0x98>
 800d07e:	2302      	movs	r3, #2
 800d080:	e002      	b.n	800d088 <HAL_GPIO_DeInit+0x98>
 800d082:	2301      	movs	r3, #1
 800d084:	e000      	b.n	800d088 <HAL_GPIO_DeInit+0x98>
 800d086:	2300      	movs	r3, #0
 800d088:	697a      	ldr	r2, [r7, #20]
 800d08a:	f002 0203 	and.w	r2, r2, #3
 800d08e:	0092      	lsls	r2, r2, #2
 800d090:	4093      	lsls	r3, r2
 800d092:	68ba      	ldr	r2, [r7, #8]
 800d094:	429a      	cmp	r2, r3
 800d096:	d132      	bne.n	800d0fe <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800d098:	4b46      	ldr	r3, [pc, #280]	@ (800d1b4 <HAL_GPIO_DeInit+0x1c4>)
 800d09a:	681a      	ldr	r2, [r3, #0]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	43db      	mvns	r3, r3
 800d0a0:	4944      	ldr	r1, [pc, #272]	@ (800d1b4 <HAL_GPIO_DeInit+0x1c4>)
 800d0a2:	4013      	ands	r3, r2
 800d0a4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800d0a6:	4b43      	ldr	r3, [pc, #268]	@ (800d1b4 <HAL_GPIO_DeInit+0x1c4>)
 800d0a8:	685a      	ldr	r2, [r3, #4]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	43db      	mvns	r3, r3
 800d0ae:	4941      	ldr	r1, [pc, #260]	@ (800d1b4 <HAL_GPIO_DeInit+0x1c4>)
 800d0b0:	4013      	ands	r3, r2
 800d0b2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800d0b4:	4b3f      	ldr	r3, [pc, #252]	@ (800d1b4 <HAL_GPIO_DeInit+0x1c4>)
 800d0b6:	68da      	ldr	r2, [r3, #12]
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	43db      	mvns	r3, r3
 800d0bc:	493d      	ldr	r1, [pc, #244]	@ (800d1b4 <HAL_GPIO_DeInit+0x1c4>)
 800d0be:	4013      	ands	r3, r2
 800d0c0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800d0c2:	4b3c      	ldr	r3, [pc, #240]	@ (800d1b4 <HAL_GPIO_DeInit+0x1c4>)
 800d0c4:	689a      	ldr	r2, [r3, #8]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	43db      	mvns	r3, r3
 800d0ca:	493a      	ldr	r1, [pc, #232]	@ (800d1b4 <HAL_GPIO_DeInit+0x1c4>)
 800d0cc:	4013      	ands	r3, r2
 800d0ce:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	f003 0303 	and.w	r3, r3, #3
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	220f      	movs	r2, #15
 800d0da:	fa02 f303 	lsl.w	r3, r2, r3
 800d0de:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800d0e0:	4a2e      	ldr	r2, [pc, #184]	@ (800d19c <HAL_GPIO_DeInit+0x1ac>)
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	089b      	lsrs	r3, r3, #2
 800d0e6:	3302      	adds	r3, #2
 800d0e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	43da      	mvns	r2, r3
 800d0f0:	482a      	ldr	r0, [pc, #168]	@ (800d19c <HAL_GPIO_DeInit+0x1ac>)
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	089b      	lsrs	r3, r3, #2
 800d0f6:	400a      	ands	r2, r1
 800d0f8:	3302      	adds	r3, #2
 800d0fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681a      	ldr	r2, [r3, #0]
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	005b      	lsls	r3, r3, #1
 800d106:	2103      	movs	r1, #3
 800d108:	fa01 f303 	lsl.w	r3, r1, r3
 800d10c:	43db      	mvns	r3, r3
 800d10e:	401a      	ands	r2, r3
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	08da      	lsrs	r2, r3, #3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	3208      	adds	r2, #8
 800d11c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	f003 0307 	and.w	r3, r3, #7
 800d126:	009b      	lsls	r3, r3, #2
 800d128:	220f      	movs	r2, #15
 800d12a:	fa02 f303 	lsl.w	r3, r2, r3
 800d12e:	43db      	mvns	r3, r3
 800d130:	697a      	ldr	r2, [r7, #20]
 800d132:	08d2      	lsrs	r2, r2, #3
 800d134:	4019      	ands	r1, r3
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	3208      	adds	r2, #8
 800d13a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	68da      	ldr	r2, [r3, #12]
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	005b      	lsls	r3, r3, #1
 800d146:	2103      	movs	r1, #3
 800d148:	fa01 f303 	lsl.w	r3, r1, r3
 800d14c:	43db      	mvns	r3, r3
 800d14e:	401a      	ands	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	685a      	ldr	r2, [r3, #4]
 800d158:	2101      	movs	r1, #1
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	fa01 f303 	lsl.w	r3, r1, r3
 800d160:	43db      	mvns	r3, r3
 800d162:	401a      	ands	r2, r3
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	689a      	ldr	r2, [r3, #8]
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	005b      	lsls	r3, r3, #1
 800d170:	2103      	movs	r1, #3
 800d172:	fa01 f303 	lsl.w	r3, r1, r3
 800d176:	43db      	mvns	r3, r3
 800d178:	401a      	ands	r2, r3
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	3301      	adds	r3, #1
 800d182:	617b      	str	r3, [r7, #20]
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	2b0f      	cmp	r3, #15
 800d188:	f67f af40 	bls.w	800d00c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800d18c:	bf00      	nop
 800d18e:	bf00      	nop
 800d190:	371c      	adds	r7, #28
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop
 800d19c:	40013800 	.word	0x40013800
 800d1a0:	40020000 	.word	0x40020000
 800d1a4:	40020400 	.word	0x40020400
 800d1a8:	40020800 	.word	0x40020800
 800d1ac:	40020c00 	.word	0x40020c00
 800d1b0:	40021000 	.word	0x40021000
 800d1b4:	40013c00 	.word	0x40013c00

0800d1b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b085      	sub	sp, #20
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	691a      	ldr	r2, [r3, #16]
 800d1c8:	887b      	ldrh	r3, [r7, #2]
 800d1ca:	4013      	ands	r3, r2
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d002      	beq.n	800d1d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	73fb      	strb	r3, [r7, #15]
 800d1d4:	e001      	b.n	800d1da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d1da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3714      	adds	r7, #20
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr

0800d1e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b083      	sub	sp, #12
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	807b      	strh	r3, [r7, #2]
 800d1f4:	4613      	mov	r3, r2
 800d1f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d1f8:	787b      	ldrb	r3, [r7, #1]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d003      	beq.n	800d206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d1fe:	887a      	ldrh	r2, [r7, #2]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800d204:	e003      	b.n	800d20e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800d206:	887b      	ldrh	r3, [r7, #2]
 800d208:	041a      	lsls	r2, r3, #16
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	619a      	str	r2, [r3, #24]
}
 800d20e:	bf00      	nop
 800d210:	370c      	adds	r7, #12
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr
	...

0800d21c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d101      	bne.n	800d22e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d22a:	2301      	movs	r3, #1
 800d22c:	e12b      	b.n	800d486 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d234:	b2db      	uxtb	r3, r3
 800d236:	2b00      	cmp	r3, #0
 800d238:	d106      	bne.n	800d248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2200      	movs	r2, #0
 800d23e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 f95d 	bl	800d502 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2224      	movs	r2, #36	@ 0x24
 800d24c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f022 0201 	bic.w	r2, r2, #1
 800d25e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d26e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d27e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800d280:	f002 f93e 	bl	800f500 <HAL_RCC_GetPCLK1Freq>
 800d284:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	4a81      	ldr	r2, [pc, #516]	@ (800d490 <HAL_I2C_Init+0x274>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d807      	bhi.n	800d2a0 <HAL_I2C_Init+0x84>
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	4a80      	ldr	r2, [pc, #512]	@ (800d494 <HAL_I2C_Init+0x278>)
 800d294:	4293      	cmp	r3, r2
 800d296:	bf94      	ite	ls
 800d298:	2301      	movls	r3, #1
 800d29a:	2300      	movhi	r3, #0
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	e006      	b.n	800d2ae <HAL_I2C_Init+0x92>
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	4a7d      	ldr	r2, [pc, #500]	@ (800d498 <HAL_I2C_Init+0x27c>)
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	bf94      	ite	ls
 800d2a8:	2301      	movls	r3, #1
 800d2aa:	2300      	movhi	r3, #0
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d001      	beq.n	800d2b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	e0e7      	b.n	800d486 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	4a78      	ldr	r2, [pc, #480]	@ (800d49c <HAL_I2C_Init+0x280>)
 800d2ba:	fba2 2303 	umull	r2, r3, r2, r3
 800d2be:	0c9b      	lsrs	r3, r3, #18
 800d2c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	68ba      	ldr	r2, [r7, #8]
 800d2d2:	430a      	orrs	r2, r1
 800d2d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	6a1b      	ldr	r3, [r3, #32]
 800d2dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	4a6a      	ldr	r2, [pc, #424]	@ (800d490 <HAL_I2C_Init+0x274>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d802      	bhi.n	800d2f0 <HAL_I2C_Init+0xd4>
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	e009      	b.n	800d304 <HAL_I2C_Init+0xe8>
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800d2f6:	fb02 f303 	mul.w	r3, r2, r3
 800d2fa:	4a69      	ldr	r2, [pc, #420]	@ (800d4a0 <HAL_I2C_Init+0x284>)
 800d2fc:	fba2 2303 	umull	r2, r3, r2, r3
 800d300:	099b      	lsrs	r3, r3, #6
 800d302:	3301      	adds	r3, #1
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	6812      	ldr	r2, [r2, #0]
 800d308:	430b      	orrs	r3, r1
 800d30a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	69db      	ldr	r3, [r3, #28]
 800d312:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800d316:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	495c      	ldr	r1, [pc, #368]	@ (800d490 <HAL_I2C_Init+0x274>)
 800d320:	428b      	cmp	r3, r1
 800d322:	d819      	bhi.n	800d358 <HAL_I2C_Init+0x13c>
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	1e59      	subs	r1, r3, #1
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	005b      	lsls	r3, r3, #1
 800d32e:	fbb1 f3f3 	udiv	r3, r1, r3
 800d332:	1c59      	adds	r1, r3, #1
 800d334:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d338:	400b      	ands	r3, r1
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00a      	beq.n	800d354 <HAL_I2C_Init+0x138>
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	1e59      	subs	r1, r3, #1
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	005b      	lsls	r3, r3, #1
 800d348:	fbb1 f3f3 	udiv	r3, r1, r3
 800d34c:	3301      	adds	r3, #1
 800d34e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d352:	e051      	b.n	800d3f8 <HAL_I2C_Init+0x1dc>
 800d354:	2304      	movs	r3, #4
 800d356:	e04f      	b.n	800d3f8 <HAL_I2C_Init+0x1dc>
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	689b      	ldr	r3, [r3, #8]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d111      	bne.n	800d384 <HAL_I2C_Init+0x168>
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	1e58      	subs	r0, r3, #1
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6859      	ldr	r1, [r3, #4]
 800d368:	460b      	mov	r3, r1
 800d36a:	005b      	lsls	r3, r3, #1
 800d36c:	440b      	add	r3, r1
 800d36e:	fbb0 f3f3 	udiv	r3, r0, r3
 800d372:	3301      	adds	r3, #1
 800d374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d378:	2b00      	cmp	r3, #0
 800d37a:	bf0c      	ite	eq
 800d37c:	2301      	moveq	r3, #1
 800d37e:	2300      	movne	r3, #0
 800d380:	b2db      	uxtb	r3, r3
 800d382:	e012      	b.n	800d3aa <HAL_I2C_Init+0x18e>
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	1e58      	subs	r0, r3, #1
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6859      	ldr	r1, [r3, #4]
 800d38c:	460b      	mov	r3, r1
 800d38e:	009b      	lsls	r3, r3, #2
 800d390:	440b      	add	r3, r1
 800d392:	0099      	lsls	r1, r3, #2
 800d394:	440b      	add	r3, r1
 800d396:	fbb0 f3f3 	udiv	r3, r0, r3
 800d39a:	3301      	adds	r3, #1
 800d39c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	bf0c      	ite	eq
 800d3a4:	2301      	moveq	r3, #1
 800d3a6:	2300      	movne	r3, #0
 800d3a8:	b2db      	uxtb	r3, r3
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d001      	beq.n	800d3b2 <HAL_I2C_Init+0x196>
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	e022      	b.n	800d3f8 <HAL_I2C_Init+0x1dc>
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	689b      	ldr	r3, [r3, #8]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d10e      	bne.n	800d3d8 <HAL_I2C_Init+0x1bc>
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	1e58      	subs	r0, r3, #1
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6859      	ldr	r1, [r3, #4]
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	005b      	lsls	r3, r3, #1
 800d3c6:	440b      	add	r3, r1
 800d3c8:	fbb0 f3f3 	udiv	r3, r0, r3
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d3d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3d6:	e00f      	b.n	800d3f8 <HAL_I2C_Init+0x1dc>
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	1e58      	subs	r0, r3, #1
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6859      	ldr	r1, [r3, #4]
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	440b      	add	r3, r1
 800d3e6:	0099      	lsls	r1, r3, #2
 800d3e8:	440b      	add	r3, r1
 800d3ea:	fbb0 f3f3 	udiv	r3, r0, r3
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d3f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d3f8:	6879      	ldr	r1, [r7, #4]
 800d3fa:	6809      	ldr	r1, [r1, #0]
 800d3fc:	4313      	orrs	r3, r2
 800d3fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	69da      	ldr	r2, [r3, #28]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6a1b      	ldr	r3, [r3, #32]
 800d412:	431a      	orrs	r2, r3
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	430a      	orrs	r2, r1
 800d41a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	689b      	ldr	r3, [r3, #8]
 800d422:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800d426:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	6911      	ldr	r1, [r2, #16]
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	68d2      	ldr	r2, [r2, #12]
 800d432:	4311      	orrs	r1, r2
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	6812      	ldr	r2, [r2, #0]
 800d438:	430b      	orrs	r3, r1
 800d43a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	68db      	ldr	r3, [r3, #12]
 800d442:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	695a      	ldr	r2, [r3, #20]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	699b      	ldr	r3, [r3, #24]
 800d44e:	431a      	orrs	r2, r3
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	430a      	orrs	r2, r1
 800d456:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f042 0201 	orr.w	r2, r2, #1
 800d466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2200      	movs	r2, #0
 800d46c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2220      	movs	r2, #32
 800d472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800d484:	2300      	movs	r3, #0
}
 800d486:	4618      	mov	r0, r3
 800d488:	3710      	adds	r7, #16
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
 800d48e:	bf00      	nop
 800d490:	000186a0 	.word	0x000186a0
 800d494:	001e847f 	.word	0x001e847f
 800d498:	003d08ff 	.word	0x003d08ff
 800d49c:	431bde83 	.word	0x431bde83
 800d4a0:	10624dd3 	.word	0x10624dd3

0800d4a4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b082      	sub	sp, #8
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d101      	bne.n	800d4b6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	e021      	b.n	800d4fa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2224      	movs	r2, #36	@ 0x24
 800d4ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	681a      	ldr	r2, [r3, #0]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f022 0201 	bic.w	r2, r2, #1
 800d4cc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 f821 	bl	800d516 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d4f8:	2300      	movs	r3, #0
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3708      	adds	r7, #8
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}

0800d502 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800d502:	b480      	push	{r7}
 800d504:	b083      	sub	sp, #12
 800d506:	af00      	add	r7, sp, #0
 800d508:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800d50a:	bf00      	nop
 800d50c:	370c      	adds	r7, #12
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr

0800d516 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800d516:	b480      	push	{r7}
 800d518:	b083      	sub	sp, #12
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800d51e:	bf00      	nop
 800d520:	370c      	adds	r7, #12
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr
	...

0800d52c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b088      	sub	sp, #32
 800d530:	af02      	add	r7, sp, #8
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	607a      	str	r2, [r7, #4]
 800d536:	461a      	mov	r2, r3
 800d538:	460b      	mov	r3, r1
 800d53a:	817b      	strh	r3, [r7, #10]
 800d53c:	4613      	mov	r3, r2
 800d53e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d540:	f7fe fef2 	bl	800c328 <HAL_GetTick>
 800d544:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	2b20      	cmp	r3, #32
 800d550:	f040 80e0 	bne.w	800d714 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	9300      	str	r3, [sp, #0]
 800d558:	2319      	movs	r3, #25
 800d55a:	2201      	movs	r2, #1
 800d55c:	4970      	ldr	r1, [pc, #448]	@ (800d720 <HAL_I2C_Master_Transmit+0x1f4>)
 800d55e:	68f8      	ldr	r0, [r7, #12]
 800d560:	f001 f928 	bl	800e7b4 <I2C_WaitOnFlagUntilTimeout>
 800d564:	4603      	mov	r3, r0
 800d566:	2b00      	cmp	r3, #0
 800d568:	d001      	beq.n	800d56e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800d56a:	2302      	movs	r3, #2
 800d56c:	e0d3      	b.n	800d716 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d574:	2b01      	cmp	r3, #1
 800d576:	d101      	bne.n	800d57c <HAL_I2C_Master_Transmit+0x50>
 800d578:	2302      	movs	r3, #2
 800d57a:	e0cc      	b.n	800d716 <HAL_I2C_Master_Transmit+0x1ea>
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2201      	movs	r2, #1
 800d580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f003 0301 	and.w	r3, r3, #1
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d007      	beq.n	800d5a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	681a      	ldr	r2, [r3, #0]
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f042 0201 	orr.w	r2, r2, #1
 800d5a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	681a      	ldr	r2, [r3, #0]
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d5b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	2221      	movs	r2, #33	@ 0x21
 800d5b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2210      	movs	r2, #16
 800d5be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	893a      	ldrh	r2, [r7, #8]
 800d5d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5d8:	b29a      	uxth	r2, r3
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	4a50      	ldr	r2, [pc, #320]	@ (800d724 <HAL_I2C_Master_Transmit+0x1f8>)
 800d5e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d5e4:	8979      	ldrh	r1, [r7, #10]
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	6a3a      	ldr	r2, [r7, #32]
 800d5ea:	68f8      	ldr	r0, [r7, #12]
 800d5ec:	f000 fe14 	bl	800e218 <I2C_MasterRequestWrite>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d001      	beq.n	800d5fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	e08d      	b.n	800d716 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	613b      	str	r3, [r7, #16]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	695b      	ldr	r3, [r3, #20]
 800d604:	613b      	str	r3, [r7, #16]
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	699b      	ldr	r3, [r3, #24]
 800d60c:	613b      	str	r3, [r7, #16]
 800d60e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800d610:	e066      	b.n	800d6e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d612:	697a      	ldr	r2, [r7, #20]
 800d614:	6a39      	ldr	r1, [r7, #32]
 800d616:	68f8      	ldr	r0, [r7, #12]
 800d618:	f001 f9e6 	bl	800e9e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d00d      	beq.n	800d63e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d626:	2b04      	cmp	r3, #4
 800d628:	d107      	bne.n	800d63a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d638:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d63a:	2301      	movs	r3, #1
 800d63c:	e06b      	b.n	800d716 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d642:	781a      	ldrb	r2, [r3, #0]
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d64e:	1c5a      	adds	r2, r3, #1
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d658:	b29b      	uxth	r3, r3
 800d65a:	3b01      	subs	r3, #1
 800d65c:	b29a      	uxth	r2, r3
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d666:	3b01      	subs	r3, #1
 800d668:	b29a      	uxth	r2, r3
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	695b      	ldr	r3, [r3, #20]
 800d674:	f003 0304 	and.w	r3, r3, #4
 800d678:	2b04      	cmp	r3, #4
 800d67a:	d11b      	bne.n	800d6b4 <HAL_I2C_Master_Transmit+0x188>
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d680:	2b00      	cmp	r3, #0
 800d682:	d017      	beq.n	800d6b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d688:	781a      	ldrb	r2, [r3, #0]
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d694:	1c5a      	adds	r2, r3, #1
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	3b01      	subs	r3, #1
 800d6a2:	b29a      	uxth	r2, r3
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6ac:	3b01      	subs	r3, #1
 800d6ae:	b29a      	uxth	r2, r3
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d6b4:	697a      	ldr	r2, [r7, #20]
 800d6b6:	6a39      	ldr	r1, [r7, #32]
 800d6b8:	68f8      	ldr	r0, [r7, #12]
 800d6ba:	f001 f9dd 	bl	800ea78 <I2C_WaitOnBTFFlagUntilTimeout>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d00d      	beq.n	800d6e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6c8:	2b04      	cmp	r3, #4
 800d6ca:	d107      	bne.n	800d6dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d6da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	e01a      	b.n	800d716 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d194      	bne.n	800d612 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	681a      	ldr	r2, [r3, #0]
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d6f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2220      	movs	r2, #32
 800d6fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2200      	movs	r2, #0
 800d704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2200      	movs	r2, #0
 800d70c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d710:	2300      	movs	r3, #0
 800d712:	e000      	b.n	800d716 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d714:	2302      	movs	r3, #2
  }
}
 800d716:	4618      	mov	r0, r3
 800d718:	3718      	adds	r7, #24
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	00100002 	.word	0x00100002
 800d724:	ffff0000 	.word	0xffff0000

0800d728 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b08c      	sub	sp, #48	@ 0x30
 800d72c:	af02      	add	r7, sp, #8
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	607a      	str	r2, [r7, #4]
 800d732:	461a      	mov	r2, r3
 800d734:	460b      	mov	r3, r1
 800d736:	817b      	strh	r3, [r7, #10]
 800d738:	4613      	mov	r3, r2
 800d73a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d73c:	f7fe fdf4 	bl	800c328 <HAL_GetTick>
 800d740:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d748:	b2db      	uxtb	r3, r3
 800d74a:	2b20      	cmp	r3, #32
 800d74c:	f040 8217 	bne.w	800db7e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d752:	9300      	str	r3, [sp, #0]
 800d754:	2319      	movs	r3, #25
 800d756:	2201      	movs	r2, #1
 800d758:	497c      	ldr	r1, [pc, #496]	@ (800d94c <HAL_I2C_Master_Receive+0x224>)
 800d75a:	68f8      	ldr	r0, [r7, #12]
 800d75c:	f001 f82a 	bl	800e7b4 <I2C_WaitOnFlagUntilTimeout>
 800d760:	4603      	mov	r3, r0
 800d762:	2b00      	cmp	r3, #0
 800d764:	d001      	beq.n	800d76a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800d766:	2302      	movs	r3, #2
 800d768:	e20a      	b.n	800db80 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d770:	2b01      	cmp	r3, #1
 800d772:	d101      	bne.n	800d778 <HAL_I2C_Master_Receive+0x50>
 800d774:	2302      	movs	r3, #2
 800d776:	e203      	b.n	800db80 <HAL_I2C_Master_Receive+0x458>
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2201      	movs	r2, #1
 800d77c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f003 0301 	and.w	r3, r3, #1
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d007      	beq.n	800d79e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f042 0201 	orr.w	r2, r2, #1
 800d79c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d7ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2222      	movs	r2, #34	@ 0x22
 800d7b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2210      	movs	r2, #16
 800d7ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	893a      	ldrh	r2, [r7, #8]
 800d7ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7d4:	b29a      	uxth	r2, r3
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	4a5c      	ldr	r2, [pc, #368]	@ (800d950 <HAL_I2C_Master_Receive+0x228>)
 800d7de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d7e0:	8979      	ldrh	r1, [r7, #10]
 800d7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7e6:	68f8      	ldr	r0, [r7, #12]
 800d7e8:	f000 fd98 	bl	800e31c <I2C_MasterRequestRead>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d001      	beq.n	800d7f6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	e1c4      	b.n	800db80 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d113      	bne.n	800d826 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d7fe:	2300      	movs	r3, #0
 800d800:	623b      	str	r3, [r7, #32]
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	695b      	ldr	r3, [r3, #20]
 800d808:	623b      	str	r3, [r7, #32]
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	699b      	ldr	r3, [r3, #24]
 800d810:	623b      	str	r3, [r7, #32]
 800d812:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d822:	601a      	str	r2, [r3, #0]
 800d824:	e198      	b.n	800db58 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d11b      	bne.n	800d866 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d83c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d83e:	2300      	movs	r3, #0
 800d840:	61fb      	str	r3, [r7, #28]
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	695b      	ldr	r3, [r3, #20]
 800d848:	61fb      	str	r3, [r7, #28]
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	699b      	ldr	r3, [r3, #24]
 800d850:	61fb      	str	r3, [r7, #28]
 800d852:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	681a      	ldr	r2, [r3, #0]
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d862:	601a      	str	r2, [r3, #0]
 800d864:	e178      	b.n	800db58 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d86a:	2b02      	cmp	r3, #2
 800d86c:	d11b      	bne.n	800d8a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	681a      	ldr	r2, [r3, #0]
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d87c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d88c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d88e:	2300      	movs	r3, #0
 800d890:	61bb      	str	r3, [r7, #24]
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	695b      	ldr	r3, [r3, #20]
 800d898:	61bb      	str	r3, [r7, #24]
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	699b      	ldr	r3, [r3, #24]
 800d8a0:	61bb      	str	r3, [r7, #24]
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	e158      	b.n	800db58 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d8b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	617b      	str	r3, [r7, #20]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	695b      	ldr	r3, [r3, #20]
 800d8c0:	617b      	str	r3, [r7, #20]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	699b      	ldr	r3, [r3, #24]
 800d8c8:	617b      	str	r3, [r7, #20]
 800d8ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d8cc:	e144      	b.n	800db58 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8d2:	2b03      	cmp	r3, #3
 800d8d4:	f200 80f1 	bhi.w	800daba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d123      	bne.n	800d928 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d8e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d8e4:	68f8      	ldr	r0, [r7, #12]
 800d8e6:	f001 f90f 	bl	800eb08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d001      	beq.n	800d8f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	e145      	b.n	800db80 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	691a      	ldr	r2, [r3, #16]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8fe:	b2d2      	uxtb	r2, r2
 800d900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d906:	1c5a      	adds	r2, r3, #1
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d910:	3b01      	subs	r3, #1
 800d912:	b29a      	uxth	r2, r3
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	3b01      	subs	r3, #1
 800d920:	b29a      	uxth	r2, r3
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d926:	e117      	b.n	800db58 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d92c:	2b02      	cmp	r3, #2
 800d92e:	d14e      	bne.n	800d9ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d932:	9300      	str	r3, [sp, #0]
 800d934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d936:	2200      	movs	r2, #0
 800d938:	4906      	ldr	r1, [pc, #24]	@ (800d954 <HAL_I2C_Master_Receive+0x22c>)
 800d93a:	68f8      	ldr	r0, [r7, #12]
 800d93c:	f000 ff3a 	bl	800e7b4 <I2C_WaitOnFlagUntilTimeout>
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	d008      	beq.n	800d958 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800d946:	2301      	movs	r3, #1
 800d948:	e11a      	b.n	800db80 <HAL_I2C_Master_Receive+0x458>
 800d94a:	bf00      	nop
 800d94c:	00100002 	.word	0x00100002
 800d950:	ffff0000 	.word	0xffff0000
 800d954:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	681a      	ldr	r2, [r3, #0]
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d966:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	691a      	ldr	r2, [r3, #16]
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d972:	b2d2      	uxtb	r2, r2
 800d974:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d97a:	1c5a      	adds	r2, r3, #1
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d984:	3b01      	subs	r3, #1
 800d986:	b29a      	uxth	r2, r3
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d990:	b29b      	uxth	r3, r3
 800d992:	3b01      	subs	r3, #1
 800d994:	b29a      	uxth	r2, r3
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	691a      	ldr	r2, [r3, #16]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9a4:	b2d2      	uxtb	r2, r2
 800d9a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9ac:	1c5a      	adds	r2, r3, #1
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d9b6:	3b01      	subs	r3, #1
 800d9b8:	b29a      	uxth	r2, r3
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	3b01      	subs	r3, #1
 800d9c6:	b29a      	uxth	r2, r3
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d9cc:	e0c4      	b.n	800db58 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9d0:	9300      	str	r3, [sp, #0]
 800d9d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	496c      	ldr	r1, [pc, #432]	@ (800db88 <HAL_I2C_Master_Receive+0x460>)
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f000 feeb 	bl	800e7b4 <I2C_WaitOnFlagUntilTimeout>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d001      	beq.n	800d9e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	e0cb      	b.n	800db80 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	681a      	ldr	r2, [r3, #0]
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d9f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	691a      	ldr	r2, [r3, #16]
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da02:	b2d2      	uxtb	r2, r2
 800da04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da0a:	1c5a      	adds	r2, r3, #1
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da14:	3b01      	subs	r3, #1
 800da16:	b29a      	uxth	r2, r3
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da20:	b29b      	uxth	r3, r3
 800da22:	3b01      	subs	r3, #1
 800da24:	b29a      	uxth	r2, r3
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800da2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da2c:	9300      	str	r3, [sp, #0]
 800da2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da30:	2200      	movs	r2, #0
 800da32:	4955      	ldr	r1, [pc, #340]	@ (800db88 <HAL_I2C_Master_Receive+0x460>)
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f000 febd 	bl	800e7b4 <I2C_WaitOnFlagUntilTimeout>
 800da3a:	4603      	mov	r3, r0
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d001      	beq.n	800da44 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800da40:	2301      	movs	r3, #1
 800da42:	e09d      	b.n	800db80 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800da52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	691a      	ldr	r2, [r3, #16]
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da5e:	b2d2      	uxtb	r2, r2
 800da60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da66:	1c5a      	adds	r2, r3, #1
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da70:	3b01      	subs	r3, #1
 800da72:	b29a      	uxth	r2, r3
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da7c:	b29b      	uxth	r3, r3
 800da7e:	3b01      	subs	r3, #1
 800da80:	b29a      	uxth	r2, r3
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	691a      	ldr	r2, [r3, #16]
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da90:	b2d2      	uxtb	r2, r2
 800da92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da98:	1c5a      	adds	r2, r3, #1
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800daa2:	3b01      	subs	r3, #1
 800daa4:	b29a      	uxth	r2, r3
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800daae:	b29b      	uxth	r3, r3
 800dab0:	3b01      	subs	r3, #1
 800dab2:	b29a      	uxth	r2, r3
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dab8:	e04e      	b.n	800db58 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800daba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dabc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dabe:	68f8      	ldr	r0, [r7, #12]
 800dac0:	f001 f822 	bl	800eb08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800dac4:	4603      	mov	r3, r0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d001      	beq.n	800dace <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800daca:	2301      	movs	r3, #1
 800dacc:	e058      	b.n	800db80 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	691a      	ldr	r2, [r3, #16]
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dad8:	b2d2      	uxtb	r2, r2
 800dada:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dae0:	1c5a      	adds	r2, r3, #1
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800daea:	3b01      	subs	r3, #1
 800daec:	b29a      	uxth	r2, r3
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	3b01      	subs	r3, #1
 800dafa:	b29a      	uxth	r2, r3
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	695b      	ldr	r3, [r3, #20]
 800db06:	f003 0304 	and.w	r3, r3, #4
 800db0a:	2b04      	cmp	r3, #4
 800db0c:	d124      	bne.n	800db58 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db12:	2b03      	cmp	r3, #3
 800db14:	d107      	bne.n	800db26 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800db24:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	691a      	ldr	r2, [r3, #16]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db30:	b2d2      	uxtb	r2, r2
 800db32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db38:	1c5a      	adds	r2, r3, #1
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db42:	3b01      	subs	r3, #1
 800db44:	b29a      	uxth	r2, r3
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db4e:	b29b      	uxth	r3, r3
 800db50:	3b01      	subs	r3, #1
 800db52:	b29a      	uxth	r2, r3
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	f47f aeb6 	bne.w	800d8ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2220      	movs	r2, #32
 800db66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2200      	movs	r2, #0
 800db6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2200      	movs	r2, #0
 800db76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800db7a:	2300      	movs	r3, #0
 800db7c:	e000      	b.n	800db80 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800db7e:	2302      	movs	r3, #2
  }
}
 800db80:	4618      	mov	r0, r3
 800db82:	3728      	adds	r7, #40	@ 0x28
 800db84:	46bd      	mov	sp, r7
 800db86:	bd80      	pop	{r7, pc}
 800db88:	00010004 	.word	0x00010004

0800db8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b088      	sub	sp, #32
 800db90:	af02      	add	r7, sp, #8
 800db92:	60f8      	str	r0, [r7, #12]
 800db94:	4608      	mov	r0, r1
 800db96:	4611      	mov	r1, r2
 800db98:	461a      	mov	r2, r3
 800db9a:	4603      	mov	r3, r0
 800db9c:	817b      	strh	r3, [r7, #10]
 800db9e:	460b      	mov	r3, r1
 800dba0:	813b      	strh	r3, [r7, #8]
 800dba2:	4613      	mov	r3, r2
 800dba4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dba6:	f7fe fbbf 	bl	800c328 <HAL_GetTick>
 800dbaa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	2b20      	cmp	r3, #32
 800dbb6:	f040 80d9 	bne.w	800dd6c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	9300      	str	r3, [sp, #0]
 800dbbe:	2319      	movs	r3, #25
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	496d      	ldr	r1, [pc, #436]	@ (800dd78 <HAL_I2C_Mem_Write+0x1ec>)
 800dbc4:	68f8      	ldr	r0, [r7, #12]
 800dbc6:	f000 fdf5 	bl	800e7b4 <I2C_WaitOnFlagUntilTimeout>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d001      	beq.n	800dbd4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800dbd0:	2302      	movs	r3, #2
 800dbd2:	e0cc      	b.n	800dd6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	d101      	bne.n	800dbe2 <HAL_I2C_Mem_Write+0x56>
 800dbde:	2302      	movs	r3, #2
 800dbe0:	e0c5      	b.n	800dd6e <HAL_I2C_Mem_Write+0x1e2>
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2201      	movs	r2, #1
 800dbe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f003 0301 	and.w	r3, r3, #1
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d007      	beq.n	800dc08 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	681a      	ldr	r2, [r3, #0]
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f042 0201 	orr.w	r2, r2, #1
 800dc06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	681a      	ldr	r2, [r3, #0]
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dc16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2221      	movs	r2, #33	@ 0x21
 800dc1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2240      	movs	r2, #64	@ 0x40
 800dc24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	6a3a      	ldr	r2, [r7, #32]
 800dc32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dc38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc3e:	b29a      	uxth	r2, r3
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	4a4d      	ldr	r2, [pc, #308]	@ (800dd7c <HAL_I2C_Mem_Write+0x1f0>)
 800dc48:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800dc4a:	88f8      	ldrh	r0, [r7, #6]
 800dc4c:	893a      	ldrh	r2, [r7, #8]
 800dc4e:	8979      	ldrh	r1, [r7, #10]
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	9301      	str	r3, [sp, #4]
 800dc54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc56:	9300      	str	r3, [sp, #0]
 800dc58:	4603      	mov	r3, r0
 800dc5a:	68f8      	ldr	r0, [r7, #12]
 800dc5c:	f000 fc2c 	bl	800e4b8 <I2C_RequestMemoryWrite>
 800dc60:	4603      	mov	r3, r0
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d052      	beq.n	800dd0c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800dc66:	2301      	movs	r3, #1
 800dc68:	e081      	b.n	800dd6e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dc6a:	697a      	ldr	r2, [r7, #20]
 800dc6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc6e:	68f8      	ldr	r0, [r7, #12]
 800dc70:	f000 feba 	bl	800e9e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d00d      	beq.n	800dc96 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc7e:	2b04      	cmp	r3, #4
 800dc80:	d107      	bne.n	800dc92 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dc90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800dc92:	2301      	movs	r3, #1
 800dc94:	e06b      	b.n	800dd6e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc9a:	781a      	ldrb	r2, [r3, #0]
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dca6:	1c5a      	adds	r2, r3, #1
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	b29a      	uxth	r2, r3
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	3b01      	subs	r3, #1
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	695b      	ldr	r3, [r3, #20]
 800dccc:	f003 0304 	and.w	r3, r3, #4
 800dcd0:	2b04      	cmp	r3, #4
 800dcd2:	d11b      	bne.n	800dd0c <HAL_I2C_Mem_Write+0x180>
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d017      	beq.n	800dd0c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dce0:	781a      	ldrb	r2, [r3, #0]
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcec:	1c5a      	adds	r2, r3, #1
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dcf6:	3b01      	subs	r3, #1
 800dcf8:	b29a      	uxth	r2, r3
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	3b01      	subs	r3, #1
 800dd06:	b29a      	uxth	r2, r3
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d1aa      	bne.n	800dc6a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dd14:	697a      	ldr	r2, [r7, #20]
 800dd16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd18:	68f8      	ldr	r0, [r7, #12]
 800dd1a:	f000 fead 	bl	800ea78 <I2C_WaitOnBTFFlagUntilTimeout>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d00d      	beq.n	800dd40 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd28:	2b04      	cmp	r3, #4
 800dd2a:	d107      	bne.n	800dd3c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dd3a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	e016      	b.n	800dd6e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	681a      	ldr	r2, [r3, #0]
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dd4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2220      	movs	r2, #32
 800dd54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2200      	movs	r2, #0
 800dd64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	e000      	b.n	800dd6e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800dd6c:	2302      	movs	r3, #2
  }
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3718      	adds	r7, #24
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	00100002 	.word	0x00100002
 800dd7c:	ffff0000 	.word	0xffff0000

0800dd80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b08c      	sub	sp, #48	@ 0x30
 800dd84:	af02      	add	r7, sp, #8
 800dd86:	60f8      	str	r0, [r7, #12]
 800dd88:	4608      	mov	r0, r1
 800dd8a:	4611      	mov	r1, r2
 800dd8c:	461a      	mov	r2, r3
 800dd8e:	4603      	mov	r3, r0
 800dd90:	817b      	strh	r3, [r7, #10]
 800dd92:	460b      	mov	r3, r1
 800dd94:	813b      	strh	r3, [r7, #8]
 800dd96:	4613      	mov	r3, r2
 800dd98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dd9a:	f7fe fac5 	bl	800c328 <HAL_GetTick>
 800dd9e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	2b20      	cmp	r3, #32
 800ddaa:	f040 8214 	bne.w	800e1d6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ddae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddb0:	9300      	str	r3, [sp, #0]
 800ddb2:	2319      	movs	r3, #25
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	497b      	ldr	r1, [pc, #492]	@ (800dfa4 <HAL_I2C_Mem_Read+0x224>)
 800ddb8:	68f8      	ldr	r0, [r7, #12]
 800ddba:	f000 fcfb 	bl	800e7b4 <I2C_WaitOnFlagUntilTimeout>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d001      	beq.n	800ddc8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800ddc4:	2302      	movs	r3, #2
 800ddc6:	e207      	b.n	800e1d8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d101      	bne.n	800ddd6 <HAL_I2C_Mem_Read+0x56>
 800ddd2:	2302      	movs	r3, #2
 800ddd4:	e200      	b.n	800e1d8 <HAL_I2C_Mem_Read+0x458>
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	2201      	movs	r2, #1
 800ddda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f003 0301 	and.w	r3, r3, #1
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	d007      	beq.n	800ddfc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f042 0201 	orr.w	r2, r2, #1
 800ddfa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	681a      	ldr	r2, [r3, #0]
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800de0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2222      	movs	r2, #34	@ 0x22
 800de10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	2240      	movs	r2, #64	@ 0x40
 800de18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	2200      	movs	r2, #0
 800de20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800de2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de32:	b29a      	uxth	r2, r3
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	4a5b      	ldr	r2, [pc, #364]	@ (800dfa8 <HAL_I2C_Mem_Read+0x228>)
 800de3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800de3e:	88f8      	ldrh	r0, [r7, #6]
 800de40:	893a      	ldrh	r2, [r7, #8]
 800de42:	8979      	ldrh	r1, [r7, #10]
 800de44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de46:	9301      	str	r3, [sp, #4]
 800de48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de4a:	9300      	str	r3, [sp, #0]
 800de4c:	4603      	mov	r3, r0
 800de4e:	68f8      	ldr	r0, [r7, #12]
 800de50:	f000 fbc8 	bl	800e5e4 <I2C_RequestMemoryRead>
 800de54:	4603      	mov	r3, r0
 800de56:	2b00      	cmp	r3, #0
 800de58:	d001      	beq.n	800de5e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800de5a:	2301      	movs	r3, #1
 800de5c:	e1bc      	b.n	800e1d8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de62:	2b00      	cmp	r3, #0
 800de64:	d113      	bne.n	800de8e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de66:	2300      	movs	r3, #0
 800de68:	623b      	str	r3, [r7, #32]
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	695b      	ldr	r3, [r3, #20]
 800de70:	623b      	str	r3, [r7, #32]
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	699b      	ldr	r3, [r3, #24]
 800de78:	623b      	str	r3, [r7, #32]
 800de7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	681a      	ldr	r2, [r3, #0]
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800de8a:	601a      	str	r2, [r3, #0]
 800de8c:	e190      	b.n	800e1b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de92:	2b01      	cmp	r3, #1
 800de94:	d11b      	bne.n	800dece <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	681a      	ldr	r2, [r3, #0]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dea4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dea6:	2300      	movs	r3, #0
 800dea8:	61fb      	str	r3, [r7, #28]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	695b      	ldr	r3, [r3, #20]
 800deb0:	61fb      	str	r3, [r7, #28]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	699b      	ldr	r3, [r3, #24]
 800deb8:	61fb      	str	r3, [r7, #28]
 800deba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800deca:	601a      	str	r2, [r3, #0]
 800decc:	e170      	b.n	800e1b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ded2:	2b02      	cmp	r3, #2
 800ded4:	d11b      	bne.n	800df0e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	681a      	ldr	r2, [r3, #0]
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dee4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800def4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800def6:	2300      	movs	r3, #0
 800def8:	61bb      	str	r3, [r7, #24]
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	695b      	ldr	r3, [r3, #20]
 800df00:	61bb      	str	r3, [r7, #24]
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	699b      	ldr	r3, [r3, #24]
 800df08:	61bb      	str	r3, [r7, #24]
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	e150      	b.n	800e1b0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800df0e:	2300      	movs	r3, #0
 800df10:	617b      	str	r3, [r7, #20]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	695b      	ldr	r3, [r3, #20]
 800df18:	617b      	str	r3, [r7, #20]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	699b      	ldr	r3, [r3, #24]
 800df20:	617b      	str	r3, [r7, #20]
 800df22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800df24:	e144      	b.n	800e1b0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df2a:	2b03      	cmp	r3, #3
 800df2c:	f200 80f1 	bhi.w	800e112 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df34:	2b01      	cmp	r3, #1
 800df36:	d123      	bne.n	800df80 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800df38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800df3c:	68f8      	ldr	r0, [r7, #12]
 800df3e:	f000 fde3 	bl	800eb08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800df42:	4603      	mov	r3, r0
 800df44:	2b00      	cmp	r3, #0
 800df46:	d001      	beq.n	800df4c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800df48:	2301      	movs	r3, #1
 800df4a:	e145      	b.n	800e1d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	691a      	ldr	r2, [r3, #16]
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df56:	b2d2      	uxtb	r2, r2
 800df58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df5e:	1c5a      	adds	r2, r3, #1
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df68:	3b01      	subs	r3, #1
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df74:	b29b      	uxth	r3, r3
 800df76:	3b01      	subs	r3, #1
 800df78:	b29a      	uxth	r2, r3
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800df7e:	e117      	b.n	800e1b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df84:	2b02      	cmp	r3, #2
 800df86:	d14e      	bne.n	800e026 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800df88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df8a:	9300      	str	r3, [sp, #0]
 800df8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df8e:	2200      	movs	r2, #0
 800df90:	4906      	ldr	r1, [pc, #24]	@ (800dfac <HAL_I2C_Mem_Read+0x22c>)
 800df92:	68f8      	ldr	r0, [r7, #12]
 800df94:	f000 fc0e 	bl	800e7b4 <I2C_WaitOnFlagUntilTimeout>
 800df98:	4603      	mov	r3, r0
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d008      	beq.n	800dfb0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800df9e:	2301      	movs	r3, #1
 800dfa0:	e11a      	b.n	800e1d8 <HAL_I2C_Mem_Read+0x458>
 800dfa2:	bf00      	nop
 800dfa4:	00100002 	.word	0x00100002
 800dfa8:	ffff0000 	.word	0xffff0000
 800dfac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	681a      	ldr	r2, [r3, #0]
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dfbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	691a      	ldr	r2, [r3, #16]
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfca:	b2d2      	uxtb	r2, r2
 800dfcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfd2:	1c5a      	adds	r2, r3, #1
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dfdc:	3b01      	subs	r3, #1
 800dfde:	b29a      	uxth	r2, r3
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dfe8:	b29b      	uxth	r3, r3
 800dfea:	3b01      	subs	r3, #1
 800dfec:	b29a      	uxth	r2, r3
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	691a      	ldr	r2, [r3, #16]
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dffc:	b2d2      	uxtb	r2, r2
 800dffe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e004:	1c5a      	adds	r2, r3, #1
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e00e:	3b01      	subs	r3, #1
 800e010:	b29a      	uxth	r2, r3
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	3b01      	subs	r3, #1
 800e01e:	b29a      	uxth	r2, r3
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e024:	e0c4      	b.n	800e1b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e028:	9300      	str	r3, [sp, #0]
 800e02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e02c:	2200      	movs	r2, #0
 800e02e:	496c      	ldr	r1, [pc, #432]	@ (800e1e0 <HAL_I2C_Mem_Read+0x460>)
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f000 fbbf 	bl	800e7b4 <I2C_WaitOnFlagUntilTimeout>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d001      	beq.n	800e040 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800e03c:	2301      	movs	r3, #1
 800e03e:	e0cb      	b.n	800e1d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	681a      	ldr	r2, [r3, #0]
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e04e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	691a      	ldr	r2, [r3, #16]
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e05a:	b2d2      	uxtb	r2, r2
 800e05c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e062:	1c5a      	adds	r2, r3, #1
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e06c:	3b01      	subs	r3, #1
 800e06e:	b29a      	uxth	r2, r3
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e078:	b29b      	uxth	r3, r3
 800e07a:	3b01      	subs	r3, #1
 800e07c:	b29a      	uxth	r2, r3
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800e082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e084:	9300      	str	r3, [sp, #0]
 800e086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e088:	2200      	movs	r2, #0
 800e08a:	4955      	ldr	r1, [pc, #340]	@ (800e1e0 <HAL_I2C_Mem_Read+0x460>)
 800e08c:	68f8      	ldr	r0, [r7, #12]
 800e08e:	f000 fb91 	bl	800e7b4 <I2C_WaitOnFlagUntilTimeout>
 800e092:	4603      	mov	r3, r0
 800e094:	2b00      	cmp	r3, #0
 800e096:	d001      	beq.n	800e09c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800e098:	2301      	movs	r3, #1
 800e09a:	e09d      	b.n	800e1d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e0aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	691a      	ldr	r2, [r3, #16]
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0b6:	b2d2      	uxtb	r2, r2
 800e0b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0be:	1c5a      	adds	r2, r3, #1
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0c8:	3b01      	subs	r3, #1
 800e0ca:	b29a      	uxth	r2, r3
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	3b01      	subs	r3, #1
 800e0d8:	b29a      	uxth	r2, r3
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	691a      	ldr	r2, [r3, #16]
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0e8:	b2d2      	uxtb	r2, r2
 800e0ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0f0:	1c5a      	adds	r2, r3, #1
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e0fa:	3b01      	subs	r3, #1
 800e0fc:	b29a      	uxth	r2, r3
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e106:	b29b      	uxth	r3, r3
 800e108:	3b01      	subs	r3, #1
 800e10a:	b29a      	uxth	r2, r3
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e110:	e04e      	b.n	800e1b0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e114:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e116:	68f8      	ldr	r0, [r7, #12]
 800e118:	f000 fcf6 	bl	800eb08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e11c:	4603      	mov	r3, r0
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d001      	beq.n	800e126 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800e122:	2301      	movs	r3, #1
 800e124:	e058      	b.n	800e1d8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	691a      	ldr	r2, [r3, #16]
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e130:	b2d2      	uxtb	r2, r2
 800e132:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e138:	1c5a      	adds	r2, r3, #1
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e142:	3b01      	subs	r3, #1
 800e144:	b29a      	uxth	r2, r3
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e14e:	b29b      	uxth	r3, r3
 800e150:	3b01      	subs	r3, #1
 800e152:	b29a      	uxth	r2, r3
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	695b      	ldr	r3, [r3, #20]
 800e15e:	f003 0304 	and.w	r3, r3, #4
 800e162:	2b04      	cmp	r3, #4
 800e164:	d124      	bne.n	800e1b0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e16a:	2b03      	cmp	r3, #3
 800e16c:	d107      	bne.n	800e17e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e17c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	691a      	ldr	r2, [r3, #16]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e188:	b2d2      	uxtb	r2, r2
 800e18a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e190:	1c5a      	adds	r2, r3, #1
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e19a:	3b01      	subs	r3, #1
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1a6:	b29b      	uxth	r3, r3
 800e1a8:	3b01      	subs	r3, #1
 800e1aa:	b29a      	uxth	r2, r3
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	f47f aeb6 	bne.w	800df26 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2220      	movs	r2, #32
 800e1be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	e000      	b.n	800e1d8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800e1d6:	2302      	movs	r3, #2
  }
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3728      	adds	r7, #40	@ 0x28
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	00010004 	.word	0x00010004

0800e1e4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b083      	sub	sp, #12
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e1f2:	b2db      	uxtb	r3, r3
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	370c      	adds	r7, #12
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr

0800e200 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800e200:	b480      	push	{r7}
 800e202:	b083      	sub	sp, #12
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	370c      	adds	r7, #12
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b088      	sub	sp, #32
 800e21c:	af02      	add	r7, sp, #8
 800e21e:	60f8      	str	r0, [r7, #12]
 800e220:	607a      	str	r2, [r7, #4]
 800e222:	603b      	str	r3, [r7, #0]
 800e224:	460b      	mov	r3, r1
 800e226:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e22c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	2b08      	cmp	r3, #8
 800e232:	d006      	beq.n	800e242 <I2C_MasterRequestWrite+0x2a>
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	2b01      	cmp	r3, #1
 800e238:	d003      	beq.n	800e242 <I2C_MasterRequestWrite+0x2a>
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e240:	d108      	bne.n	800e254 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e250:	601a      	str	r2, [r3, #0]
 800e252:	e00b      	b.n	800e26c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e258:	2b12      	cmp	r3, #18
 800e25a:	d107      	bne.n	800e26c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	681a      	ldr	r2, [r3, #0]
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e26a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	9300      	str	r3, [sp, #0]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2200      	movs	r2, #0
 800e274:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e278:	68f8      	ldr	r0, [r7, #12]
 800e27a:	f000 fa9b 	bl	800e7b4 <I2C_WaitOnFlagUntilTimeout>
 800e27e:	4603      	mov	r3, r0
 800e280:	2b00      	cmp	r3, #0
 800e282:	d00d      	beq.n	800e2a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e28e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e292:	d103      	bne.n	800e29c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e29a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e29c:	2303      	movs	r3, #3
 800e29e:	e035      	b.n	800e30c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	691b      	ldr	r3, [r3, #16]
 800e2a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e2a8:	d108      	bne.n	800e2bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e2aa:	897b      	ldrh	r3, [r7, #10]
 800e2ac:	b2db      	uxtb	r3, r3
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e2b8:	611a      	str	r2, [r3, #16]
 800e2ba:	e01b      	b.n	800e2f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e2bc:	897b      	ldrh	r3, [r7, #10]
 800e2be:	11db      	asrs	r3, r3, #7
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	f003 0306 	and.w	r3, r3, #6
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	f063 030f 	orn	r3, r3, #15
 800e2cc:	b2da      	uxtb	r2, r3
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	687a      	ldr	r2, [r7, #4]
 800e2d8:	490e      	ldr	r1, [pc, #56]	@ (800e314 <I2C_MasterRequestWrite+0xfc>)
 800e2da:	68f8      	ldr	r0, [r7, #12]
 800e2dc:	f000 fae4 	bl	800e8a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d001      	beq.n	800e2ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	e010      	b.n	800e30c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e2ea:	897b      	ldrh	r3, [r7, #10]
 800e2ec:	b2da      	uxtb	r2, r3
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	687a      	ldr	r2, [r7, #4]
 800e2f8:	4907      	ldr	r1, [pc, #28]	@ (800e318 <I2C_MasterRequestWrite+0x100>)
 800e2fa:	68f8      	ldr	r0, [r7, #12]
 800e2fc:	f000 fad4 	bl	800e8a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e300:	4603      	mov	r3, r0
 800e302:	2b00      	cmp	r3, #0
 800e304:	d001      	beq.n	800e30a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e306:	2301      	movs	r3, #1
 800e308:	e000      	b.n	800e30c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e30a:	2300      	movs	r3, #0
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3718      	adds	r7, #24
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	00010008 	.word	0x00010008
 800e318:	00010002 	.word	0x00010002

0800e31c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b088      	sub	sp, #32
 800e320:	af02      	add	r7, sp, #8
 800e322:	60f8      	str	r0, [r7, #12]
 800e324:	607a      	str	r2, [r7, #4]
 800e326:	603b      	str	r3, [r7, #0]
 800e328:	460b      	mov	r3, r1
 800e32a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e330:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	681a      	ldr	r2, [r3, #0]
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e340:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	2b08      	cmp	r3, #8
 800e346:	d006      	beq.n	800e356 <I2C_MasterRequestRead+0x3a>
 800e348:	697b      	ldr	r3, [r7, #20]
 800e34a:	2b01      	cmp	r3, #1
 800e34c:	d003      	beq.n	800e356 <I2C_MasterRequestRead+0x3a>
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e354:	d108      	bne.n	800e368 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	681a      	ldr	r2, [r3, #0]
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e364:	601a      	str	r2, [r3, #0]
 800e366:	e00b      	b.n	800e380 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e36c:	2b11      	cmp	r3, #17
 800e36e:	d107      	bne.n	800e380 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	681a      	ldr	r2, [r3, #0]
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e37e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	9300      	str	r3, [sp, #0]
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2200      	movs	r2, #0
 800e388:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e38c:	68f8      	ldr	r0, [r7, #12]
 800e38e:	f000 fa11 	bl	800e7b4 <I2C_WaitOnFlagUntilTimeout>
 800e392:	4603      	mov	r3, r0
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00d      	beq.n	800e3b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e3a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e3a6:	d103      	bne.n	800e3b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e3ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e3b0:	2303      	movs	r3, #3
 800e3b2:	e079      	b.n	800e4a8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	691b      	ldr	r3, [r3, #16]
 800e3b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e3bc:	d108      	bne.n	800e3d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e3be:	897b      	ldrh	r3, [r7, #10]
 800e3c0:	b2db      	uxtb	r3, r3
 800e3c2:	f043 0301 	orr.w	r3, r3, #1
 800e3c6:	b2da      	uxtb	r2, r3
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	611a      	str	r2, [r3, #16]
 800e3ce:	e05f      	b.n	800e490 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e3d0:	897b      	ldrh	r3, [r7, #10]
 800e3d2:	11db      	asrs	r3, r3, #7
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	f003 0306 	and.w	r3, r3, #6
 800e3da:	b2db      	uxtb	r3, r3
 800e3dc:	f063 030f 	orn	r3, r3, #15
 800e3e0:	b2da      	uxtb	r2, r3
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	687a      	ldr	r2, [r7, #4]
 800e3ec:	4930      	ldr	r1, [pc, #192]	@ (800e4b0 <I2C_MasterRequestRead+0x194>)
 800e3ee:	68f8      	ldr	r0, [r7, #12]
 800e3f0:	f000 fa5a 	bl	800e8a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d001      	beq.n	800e3fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	e054      	b.n	800e4a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e3fe:	897b      	ldrh	r3, [r7, #10]
 800e400:	b2da      	uxtb	r2, r3
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	687a      	ldr	r2, [r7, #4]
 800e40c:	4929      	ldr	r1, [pc, #164]	@ (800e4b4 <I2C_MasterRequestRead+0x198>)
 800e40e:	68f8      	ldr	r0, [r7, #12]
 800e410:	f000 fa4a 	bl	800e8a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e414:	4603      	mov	r3, r0
 800e416:	2b00      	cmp	r3, #0
 800e418:	d001      	beq.n	800e41e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e41a:	2301      	movs	r3, #1
 800e41c:	e044      	b.n	800e4a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e41e:	2300      	movs	r3, #0
 800e420:	613b      	str	r3, [r7, #16]
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	695b      	ldr	r3, [r3, #20]
 800e428:	613b      	str	r3, [r7, #16]
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	699b      	ldr	r3, [r3, #24]
 800e430:	613b      	str	r3, [r7, #16]
 800e432:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	681a      	ldr	r2, [r3, #0]
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e442:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	9300      	str	r3, [sp, #0]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2200      	movs	r2, #0
 800e44c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	f000 f9af 	bl	800e7b4 <I2C_WaitOnFlagUntilTimeout>
 800e456:	4603      	mov	r3, r0
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d00d      	beq.n	800e478 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e466:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e46a:	d103      	bne.n	800e474 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e472:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800e474:	2303      	movs	r3, #3
 800e476:	e017      	b.n	800e4a8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e478:	897b      	ldrh	r3, [r7, #10]
 800e47a:	11db      	asrs	r3, r3, #7
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	f003 0306 	and.w	r3, r3, #6
 800e482:	b2db      	uxtb	r3, r3
 800e484:	f063 030e 	orn	r3, r3, #14
 800e488:	b2da      	uxtb	r2, r3
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	687a      	ldr	r2, [r7, #4]
 800e494:	4907      	ldr	r1, [pc, #28]	@ (800e4b4 <I2C_MasterRequestRead+0x198>)
 800e496:	68f8      	ldr	r0, [r7, #12]
 800e498:	f000 fa06 	bl	800e8a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d001      	beq.n	800e4a6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e000      	b.n	800e4a8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e4a6:	2300      	movs	r3, #0
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3718      	adds	r7, #24
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}
 800e4b0:	00010008 	.word	0x00010008
 800e4b4:	00010002 	.word	0x00010002

0800e4b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b088      	sub	sp, #32
 800e4bc:	af02      	add	r7, sp, #8
 800e4be:	60f8      	str	r0, [r7, #12]
 800e4c0:	4608      	mov	r0, r1
 800e4c2:	4611      	mov	r1, r2
 800e4c4:	461a      	mov	r2, r3
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	817b      	strh	r3, [r7, #10]
 800e4ca:	460b      	mov	r3, r1
 800e4cc:	813b      	strh	r3, [r7, #8]
 800e4ce:	4613      	mov	r3, r2
 800e4d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e4e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e4:	9300      	str	r3, [sp, #0]
 800e4e6:	6a3b      	ldr	r3, [r7, #32]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e4ee:	68f8      	ldr	r0, [r7, #12]
 800e4f0:	f000 f960 	bl	800e7b4 <I2C_WaitOnFlagUntilTimeout>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d00d      	beq.n	800e516 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e504:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e508:	d103      	bne.n	800e512 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e510:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e512:	2303      	movs	r3, #3
 800e514:	e05f      	b.n	800e5d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e516:	897b      	ldrh	r3, [r7, #10]
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	461a      	mov	r2, r3
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e524:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e528:	6a3a      	ldr	r2, [r7, #32]
 800e52a:	492d      	ldr	r1, [pc, #180]	@ (800e5e0 <I2C_RequestMemoryWrite+0x128>)
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	f000 f9bb 	bl	800e8a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e532:	4603      	mov	r3, r0
 800e534:	2b00      	cmp	r3, #0
 800e536:	d001      	beq.n	800e53c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800e538:	2301      	movs	r3, #1
 800e53a:	e04c      	b.n	800e5d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e53c:	2300      	movs	r3, #0
 800e53e:	617b      	str	r3, [r7, #20]
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	695b      	ldr	r3, [r3, #20]
 800e546:	617b      	str	r3, [r7, #20]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	699b      	ldr	r3, [r3, #24]
 800e54e:	617b      	str	r3, [r7, #20]
 800e550:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e554:	6a39      	ldr	r1, [r7, #32]
 800e556:	68f8      	ldr	r0, [r7, #12]
 800e558:	f000 fa46 	bl	800e9e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d00d      	beq.n	800e57e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e566:	2b04      	cmp	r3, #4
 800e568:	d107      	bne.n	800e57a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	681a      	ldr	r2, [r3, #0]
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e578:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e57a:	2301      	movs	r3, #1
 800e57c:	e02b      	b.n	800e5d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e57e:	88fb      	ldrh	r3, [r7, #6]
 800e580:	2b01      	cmp	r3, #1
 800e582:	d105      	bne.n	800e590 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e584:	893b      	ldrh	r3, [r7, #8]
 800e586:	b2da      	uxtb	r2, r3
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	611a      	str	r2, [r3, #16]
 800e58e:	e021      	b.n	800e5d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e590:	893b      	ldrh	r3, [r7, #8]
 800e592:	0a1b      	lsrs	r3, r3, #8
 800e594:	b29b      	uxth	r3, r3
 800e596:	b2da      	uxtb	r2, r3
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e59e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5a0:	6a39      	ldr	r1, [r7, #32]
 800e5a2:	68f8      	ldr	r0, [r7, #12]
 800e5a4:	f000 fa20 	bl	800e9e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d00d      	beq.n	800e5ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5b2:	2b04      	cmp	r3, #4
 800e5b4:	d107      	bne.n	800e5c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e5c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	e005      	b.n	800e5d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e5ca:	893b      	ldrh	r3, [r7, #8]
 800e5cc:	b2da      	uxtb	r2, r3
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800e5d4:	2300      	movs	r3, #0
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3718      	adds	r7, #24
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}
 800e5de:	bf00      	nop
 800e5e0:	00010002 	.word	0x00010002

0800e5e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b088      	sub	sp, #32
 800e5e8:	af02      	add	r7, sp, #8
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	4608      	mov	r0, r1
 800e5ee:	4611      	mov	r1, r2
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	817b      	strh	r3, [r7, #10]
 800e5f6:	460b      	mov	r3, r1
 800e5f8:	813b      	strh	r3, [r7, #8]
 800e5fa:	4613      	mov	r3, r2
 800e5fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e60c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	681a      	ldr	r2, [r3, #0]
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e61c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e620:	9300      	str	r3, [sp, #0]
 800e622:	6a3b      	ldr	r3, [r7, #32]
 800e624:	2200      	movs	r2, #0
 800e626:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e62a:	68f8      	ldr	r0, [r7, #12]
 800e62c:	f000 f8c2 	bl	800e7b4 <I2C_WaitOnFlagUntilTimeout>
 800e630:	4603      	mov	r3, r0
 800e632:	2b00      	cmp	r3, #0
 800e634:	d00d      	beq.n	800e652 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e644:	d103      	bne.n	800e64e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e64c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e64e:	2303      	movs	r3, #3
 800e650:	e0aa      	b.n	800e7a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e652:	897b      	ldrh	r3, [r7, #10]
 800e654:	b2db      	uxtb	r3, r3
 800e656:	461a      	mov	r2, r3
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e660:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e664:	6a3a      	ldr	r2, [r7, #32]
 800e666:	4952      	ldr	r1, [pc, #328]	@ (800e7b0 <I2C_RequestMemoryRead+0x1cc>)
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f000 f91d 	bl	800e8a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e66e:	4603      	mov	r3, r0
 800e670:	2b00      	cmp	r3, #0
 800e672:	d001      	beq.n	800e678 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800e674:	2301      	movs	r3, #1
 800e676:	e097      	b.n	800e7a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e678:	2300      	movs	r3, #0
 800e67a:	617b      	str	r3, [r7, #20]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	695b      	ldr	r3, [r3, #20]
 800e682:	617b      	str	r3, [r7, #20]
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	699b      	ldr	r3, [r3, #24]
 800e68a:	617b      	str	r3, [r7, #20]
 800e68c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e68e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e690:	6a39      	ldr	r1, [r7, #32]
 800e692:	68f8      	ldr	r0, [r7, #12]
 800e694:	f000 f9a8 	bl	800e9e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d00d      	beq.n	800e6ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6a2:	2b04      	cmp	r3, #4
 800e6a4:	d107      	bne.n	800e6b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	681a      	ldr	r2, [r3, #0]
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e6b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	e076      	b.n	800e7a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e6ba:	88fb      	ldrh	r3, [r7, #6]
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	d105      	bne.n	800e6cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e6c0:	893b      	ldrh	r3, [r7, #8]
 800e6c2:	b2da      	uxtb	r2, r3
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	611a      	str	r2, [r3, #16]
 800e6ca:	e021      	b.n	800e710 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e6cc:	893b      	ldrh	r3, [r7, #8]
 800e6ce:	0a1b      	lsrs	r3, r3, #8
 800e6d0:	b29b      	uxth	r3, r3
 800e6d2:	b2da      	uxtb	r2, r3
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e6da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6dc:	6a39      	ldr	r1, [r7, #32]
 800e6de:	68f8      	ldr	r0, [r7, #12]
 800e6e0:	f000 f982 	bl	800e9e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d00d      	beq.n	800e706 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6ee:	2b04      	cmp	r3, #4
 800e6f0:	d107      	bne.n	800e702 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	681a      	ldr	r2, [r3, #0]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e700:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e702:	2301      	movs	r3, #1
 800e704:	e050      	b.n	800e7a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e706:	893b      	ldrh	r3, [r7, #8]
 800e708:	b2da      	uxtb	r2, r3
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e712:	6a39      	ldr	r1, [r7, #32]
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	f000 f967 	bl	800e9e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800e71a:	4603      	mov	r3, r0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d00d      	beq.n	800e73c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e724:	2b04      	cmp	r3, #4
 800e726:	d107      	bne.n	800e738 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	681a      	ldr	r2, [r3, #0]
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e736:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e738:	2301      	movs	r3, #1
 800e73a:	e035      	b.n	800e7a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e74a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e74e:	9300      	str	r3, [sp, #0]
 800e750:	6a3b      	ldr	r3, [r7, #32]
 800e752:	2200      	movs	r2, #0
 800e754:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e758:	68f8      	ldr	r0, [r7, #12]
 800e75a:	f000 f82b 	bl	800e7b4 <I2C_WaitOnFlagUntilTimeout>
 800e75e:	4603      	mov	r3, r0
 800e760:	2b00      	cmp	r3, #0
 800e762:	d00d      	beq.n	800e780 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e76e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e772:	d103      	bne.n	800e77c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e77a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e77c:	2303      	movs	r3, #3
 800e77e:	e013      	b.n	800e7a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e780:	897b      	ldrh	r3, [r7, #10]
 800e782:	b2db      	uxtb	r3, r3
 800e784:	f043 0301 	orr.w	r3, r3, #1
 800e788:	b2da      	uxtb	r2, r3
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e792:	6a3a      	ldr	r2, [r7, #32]
 800e794:	4906      	ldr	r1, [pc, #24]	@ (800e7b0 <I2C_RequestMemoryRead+0x1cc>)
 800e796:	68f8      	ldr	r0, [r7, #12]
 800e798:	f000 f886 	bl	800e8a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e79c:	4603      	mov	r3, r0
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d001      	beq.n	800e7a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	e000      	b.n	800e7a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800e7a6:	2300      	movs	r3, #0
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	3718      	adds	r7, #24
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	00010002 	.word	0x00010002

0800e7b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b084      	sub	sp, #16
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	603b      	str	r3, [r7, #0]
 800e7c0:	4613      	mov	r3, r2
 800e7c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e7c4:	e048      	b.n	800e858 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7cc:	d044      	beq.n	800e858 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7ce:	f7fd fdab 	bl	800c328 <HAL_GetTick>
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	1ad3      	subs	r3, r2, r3
 800e7d8:	683a      	ldr	r2, [r7, #0]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d302      	bcc.n	800e7e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d139      	bne.n	800e858 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	0c1b      	lsrs	r3, r3, #16
 800e7e8:	b2db      	uxtb	r3, r3
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d10d      	bne.n	800e80a <I2C_WaitOnFlagUntilTimeout+0x56>
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	695b      	ldr	r3, [r3, #20]
 800e7f4:	43da      	mvns	r2, r3
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	4013      	ands	r3, r2
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	bf0c      	ite	eq
 800e800:	2301      	moveq	r3, #1
 800e802:	2300      	movne	r3, #0
 800e804:	b2db      	uxtb	r3, r3
 800e806:	461a      	mov	r2, r3
 800e808:	e00c      	b.n	800e824 <I2C_WaitOnFlagUntilTimeout+0x70>
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	699b      	ldr	r3, [r3, #24]
 800e810:	43da      	mvns	r2, r3
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	4013      	ands	r3, r2
 800e816:	b29b      	uxth	r3, r3
 800e818:	2b00      	cmp	r3, #0
 800e81a:	bf0c      	ite	eq
 800e81c:	2301      	moveq	r3, #1
 800e81e:	2300      	movne	r3, #0
 800e820:	b2db      	uxtb	r3, r3
 800e822:	461a      	mov	r2, r3
 800e824:	79fb      	ldrb	r3, [r7, #7]
 800e826:	429a      	cmp	r2, r3
 800e828:	d116      	bne.n	800e858 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2200      	movs	r2, #0
 800e82e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	2220      	movs	r2, #32
 800e834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2200      	movs	r2, #0
 800e83c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e844:	f043 0220 	orr.w	r2, r3, #32
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	2200      	movs	r2, #0
 800e850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e854:	2301      	movs	r3, #1
 800e856:	e023      	b.n	800e8a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e858:	68bb      	ldr	r3, [r7, #8]
 800e85a:	0c1b      	lsrs	r3, r3, #16
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	2b01      	cmp	r3, #1
 800e860:	d10d      	bne.n	800e87e <I2C_WaitOnFlagUntilTimeout+0xca>
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	695b      	ldr	r3, [r3, #20]
 800e868:	43da      	mvns	r2, r3
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	4013      	ands	r3, r2
 800e86e:	b29b      	uxth	r3, r3
 800e870:	2b00      	cmp	r3, #0
 800e872:	bf0c      	ite	eq
 800e874:	2301      	moveq	r3, #1
 800e876:	2300      	movne	r3, #0
 800e878:	b2db      	uxtb	r3, r3
 800e87a:	461a      	mov	r2, r3
 800e87c:	e00c      	b.n	800e898 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	699b      	ldr	r3, [r3, #24]
 800e884:	43da      	mvns	r2, r3
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	4013      	ands	r3, r2
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	bf0c      	ite	eq
 800e890:	2301      	moveq	r3, #1
 800e892:	2300      	movne	r3, #0
 800e894:	b2db      	uxtb	r3, r3
 800e896:	461a      	mov	r2, r3
 800e898:	79fb      	ldrb	r3, [r7, #7]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d093      	beq.n	800e7c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e89e:	2300      	movs	r3, #0
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3710      	adds	r7, #16
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b084      	sub	sp, #16
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	60f8      	str	r0, [r7, #12]
 800e8b0:	60b9      	str	r1, [r7, #8]
 800e8b2:	607a      	str	r2, [r7, #4]
 800e8b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e8b6:	e071      	b.n	800e99c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	695b      	ldr	r3, [r3, #20]
 800e8be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e8c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e8c6:	d123      	bne.n	800e910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	681a      	ldr	r2, [r3, #0]
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e8d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e8e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2220      	movs	r2, #32
 800e8ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8fc:	f043 0204 	orr.w	r2, r3, #4
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2200      	movs	r2, #0
 800e908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e90c:	2301      	movs	r3, #1
 800e90e:	e067      	b.n	800e9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e916:	d041      	beq.n	800e99c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e918:	f7fd fd06 	bl	800c328 <HAL_GetTick>
 800e91c:	4602      	mov	r2, r0
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	1ad3      	subs	r3, r2, r3
 800e922:	687a      	ldr	r2, [r7, #4]
 800e924:	429a      	cmp	r2, r3
 800e926:	d302      	bcc.n	800e92e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d136      	bne.n	800e99c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800e92e:	68bb      	ldr	r3, [r7, #8]
 800e930:	0c1b      	lsrs	r3, r3, #16
 800e932:	b2db      	uxtb	r3, r3
 800e934:	2b01      	cmp	r3, #1
 800e936:	d10c      	bne.n	800e952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	695b      	ldr	r3, [r3, #20]
 800e93e:	43da      	mvns	r2, r3
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	4013      	ands	r3, r2
 800e944:	b29b      	uxth	r3, r3
 800e946:	2b00      	cmp	r3, #0
 800e948:	bf14      	ite	ne
 800e94a:	2301      	movne	r3, #1
 800e94c:	2300      	moveq	r3, #0
 800e94e:	b2db      	uxtb	r3, r3
 800e950:	e00b      	b.n	800e96a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	699b      	ldr	r3, [r3, #24]
 800e958:	43da      	mvns	r2, r3
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	4013      	ands	r3, r2
 800e95e:	b29b      	uxth	r3, r3
 800e960:	2b00      	cmp	r3, #0
 800e962:	bf14      	ite	ne
 800e964:	2301      	movne	r3, #1
 800e966:	2300      	moveq	r3, #0
 800e968:	b2db      	uxtb	r3, r3
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d016      	beq.n	800e99c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2200      	movs	r2, #0
 800e972:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2220      	movs	r2, #32
 800e978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2200      	movs	r2, #0
 800e980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e988:	f043 0220 	orr.w	r2, r3, #32
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2200      	movs	r2, #0
 800e994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e998:	2301      	movs	r3, #1
 800e99a:	e021      	b.n	800e9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	0c1b      	lsrs	r3, r3, #16
 800e9a0:	b2db      	uxtb	r3, r3
 800e9a2:	2b01      	cmp	r3, #1
 800e9a4:	d10c      	bne.n	800e9c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	695b      	ldr	r3, [r3, #20]
 800e9ac:	43da      	mvns	r2, r3
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	4013      	ands	r3, r2
 800e9b2:	b29b      	uxth	r3, r3
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	bf14      	ite	ne
 800e9b8:	2301      	movne	r3, #1
 800e9ba:	2300      	moveq	r3, #0
 800e9bc:	b2db      	uxtb	r3, r3
 800e9be:	e00b      	b.n	800e9d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	699b      	ldr	r3, [r3, #24]
 800e9c6:	43da      	mvns	r2, r3
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	4013      	ands	r3, r2
 800e9cc:	b29b      	uxth	r3, r3
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	bf14      	ite	ne
 800e9d2:	2301      	movne	r3, #1
 800e9d4:	2300      	moveq	r3, #0
 800e9d6:	b2db      	uxtb	r3, r3
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	f47f af6d 	bne.w	800e8b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800e9de:	2300      	movs	r3, #0
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3710      	adds	r7, #16
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e9f4:	e034      	b.n	800ea60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e9f6:	68f8      	ldr	r0, [r7, #12]
 800e9f8:	f000 f8e3 	bl	800ebc2 <I2C_IsAcknowledgeFailed>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d001      	beq.n	800ea06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ea02:	2301      	movs	r3, #1
 800ea04:	e034      	b.n	800ea70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea0c:	d028      	beq.n	800ea60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea0e:	f7fd fc8b 	bl	800c328 <HAL_GetTick>
 800ea12:	4602      	mov	r2, r0
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	1ad3      	subs	r3, r2, r3
 800ea18:	68ba      	ldr	r2, [r7, #8]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d302      	bcc.n	800ea24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d11d      	bne.n	800ea60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	695b      	ldr	r3, [r3, #20]
 800ea2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea2e:	2b80      	cmp	r3, #128	@ 0x80
 800ea30:	d016      	beq.n	800ea60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2200      	movs	r2, #0
 800ea36:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2220      	movs	r2, #32
 800ea3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	2200      	movs	r2, #0
 800ea44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea4c:	f043 0220 	orr.w	r2, r3, #32
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2200      	movs	r2, #0
 800ea58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	e007      	b.n	800ea70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	695b      	ldr	r3, [r3, #20]
 800ea66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea6a:	2b80      	cmp	r3, #128	@ 0x80
 800ea6c:	d1c3      	bne.n	800e9f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ea6e:	2300      	movs	r3, #0
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3710      	adds	r7, #16
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b084      	sub	sp, #16
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	60f8      	str	r0, [r7, #12]
 800ea80:	60b9      	str	r1, [r7, #8]
 800ea82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ea84:	e034      	b.n	800eaf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ea86:	68f8      	ldr	r0, [r7, #12]
 800ea88:	f000 f89b 	bl	800ebc2 <I2C_IsAcknowledgeFailed>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d001      	beq.n	800ea96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ea92:	2301      	movs	r3, #1
 800ea94:	e034      	b.n	800eb00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea9c:	d028      	beq.n	800eaf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea9e:	f7fd fc43 	bl	800c328 <HAL_GetTick>
 800eaa2:	4602      	mov	r2, r0
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	1ad3      	subs	r3, r2, r3
 800eaa8:	68ba      	ldr	r2, [r7, #8]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d302      	bcc.n	800eab4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d11d      	bne.n	800eaf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	695b      	ldr	r3, [r3, #20]
 800eaba:	f003 0304 	and.w	r3, r3, #4
 800eabe:	2b04      	cmp	r3, #4
 800eac0:	d016      	beq.n	800eaf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2200      	movs	r2, #0
 800eac6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	2220      	movs	r2, #32
 800eacc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2200      	movs	r2, #0
 800ead4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eadc:	f043 0220 	orr.w	r2, r3, #32
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2200      	movs	r2, #0
 800eae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800eaec:	2301      	movs	r3, #1
 800eaee:	e007      	b.n	800eb00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	695b      	ldr	r3, [r3, #20]
 800eaf6:	f003 0304 	and.w	r3, r3, #4
 800eafa:	2b04      	cmp	r3, #4
 800eafc:	d1c3      	bne.n	800ea86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800eafe:	2300      	movs	r3, #0
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b084      	sub	sp, #16
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	60f8      	str	r0, [r7, #12]
 800eb10:	60b9      	str	r1, [r7, #8]
 800eb12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800eb14:	e049      	b.n	800ebaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	695b      	ldr	r3, [r3, #20]
 800eb1c:	f003 0310 	and.w	r3, r3, #16
 800eb20:	2b10      	cmp	r3, #16
 800eb22:	d119      	bne.n	800eb58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f06f 0210 	mvn.w	r2, #16
 800eb2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	2200      	movs	r2, #0
 800eb32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	2220      	movs	r2, #32
 800eb38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800eb54:	2301      	movs	r3, #1
 800eb56:	e030      	b.n	800ebba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb58:	f7fd fbe6 	bl	800c328 <HAL_GetTick>
 800eb5c:	4602      	mov	r2, r0
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	1ad3      	subs	r3, r2, r3
 800eb62:	68ba      	ldr	r2, [r7, #8]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d302      	bcc.n	800eb6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d11d      	bne.n	800ebaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	695b      	ldr	r3, [r3, #20]
 800eb74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb78:	2b40      	cmp	r3, #64	@ 0x40
 800eb7a:	d016      	beq.n	800ebaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	2220      	movs	r2, #32
 800eb86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb96:	f043 0220 	orr.w	r2, r3, #32
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	2200      	movs	r2, #0
 800eba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800eba6:	2301      	movs	r3, #1
 800eba8:	e007      	b.n	800ebba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	695b      	ldr	r3, [r3, #20]
 800ebb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebb4:	2b40      	cmp	r3, #64	@ 0x40
 800ebb6:	d1ae      	bne.n	800eb16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ebb8:	2300      	movs	r3, #0
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3710      	adds	r7, #16
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}

0800ebc2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ebc2:	b480      	push	{r7}
 800ebc4:	b083      	sub	sp, #12
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	695b      	ldr	r3, [r3, #20]
 800ebd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ebd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ebd8:	d11b      	bne.n	800ec12 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ebe2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2220      	movs	r2, #32
 800ebee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebfe:	f043 0204 	orr.w	r2, r3, #4
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ec0e:	2301      	movs	r3, #1
 800ec10:	e000      	b.n	800ec14 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ec12:	2300      	movs	r3, #0
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	370c      	adds	r7, #12
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b086      	sub	sp, #24
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d101      	bne.n	800ec32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ec2e:	2301      	movs	r3, #1
 800ec30:	e267      	b.n	800f102 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f003 0301 	and.w	r3, r3, #1
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d075      	beq.n	800ed2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800ec3e:	4b88      	ldr	r3, [pc, #544]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ec40:	689b      	ldr	r3, [r3, #8]
 800ec42:	f003 030c 	and.w	r3, r3, #12
 800ec46:	2b04      	cmp	r3, #4
 800ec48:	d00c      	beq.n	800ec64 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ec4a:	4b85      	ldr	r3, [pc, #532]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ec4c:	689b      	ldr	r3, [r3, #8]
 800ec4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800ec52:	2b08      	cmp	r3, #8
 800ec54:	d112      	bne.n	800ec7c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ec56:	4b82      	ldr	r3, [pc, #520]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ec5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ec62:	d10b      	bne.n	800ec7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ec64:	4b7e      	ldr	r3, [pc, #504]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d05b      	beq.n	800ed28 <HAL_RCC_OscConfig+0x108>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d157      	bne.n	800ed28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ec78:	2301      	movs	r3, #1
 800ec7a:	e242      	b.n	800f102 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ec84:	d106      	bne.n	800ec94 <HAL_RCC_OscConfig+0x74>
 800ec86:	4b76      	ldr	r3, [pc, #472]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4a75      	ldr	r2, [pc, #468]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ec8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ec90:	6013      	str	r3, [r2, #0]
 800ec92:	e01d      	b.n	800ecd0 <HAL_RCC_OscConfig+0xb0>
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ec9c:	d10c      	bne.n	800ecb8 <HAL_RCC_OscConfig+0x98>
 800ec9e:	4b70      	ldr	r3, [pc, #448]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	4a6f      	ldr	r2, [pc, #444]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800eca4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800eca8:	6013      	str	r3, [r2, #0]
 800ecaa:	4b6d      	ldr	r3, [pc, #436]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	4a6c      	ldr	r2, [pc, #432]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ecb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ecb4:	6013      	str	r3, [r2, #0]
 800ecb6:	e00b      	b.n	800ecd0 <HAL_RCC_OscConfig+0xb0>
 800ecb8:	4b69      	ldr	r3, [pc, #420]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4a68      	ldr	r2, [pc, #416]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ecbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ecc2:	6013      	str	r3, [r2, #0]
 800ecc4:	4b66      	ldr	r3, [pc, #408]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4a65      	ldr	r2, [pc, #404]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ecca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ecce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d013      	beq.n	800ed00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ecd8:	f7fd fb26 	bl	800c328 <HAL_GetTick>
 800ecdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ecde:	e008      	b.n	800ecf2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ece0:	f7fd fb22 	bl	800c328 <HAL_GetTick>
 800ece4:	4602      	mov	r2, r0
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	1ad3      	subs	r3, r2, r3
 800ecea:	2b64      	cmp	r3, #100	@ 0x64
 800ecec:	d901      	bls.n	800ecf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ecee:	2303      	movs	r3, #3
 800ecf0:	e207      	b.n	800f102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ecf2:	4b5b      	ldr	r3, [pc, #364]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d0f0      	beq.n	800ece0 <HAL_RCC_OscConfig+0xc0>
 800ecfe:	e014      	b.n	800ed2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed00:	f7fd fb12 	bl	800c328 <HAL_GetTick>
 800ed04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ed06:	e008      	b.n	800ed1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ed08:	f7fd fb0e 	bl	800c328 <HAL_GetTick>
 800ed0c:	4602      	mov	r2, r0
 800ed0e:	693b      	ldr	r3, [r7, #16]
 800ed10:	1ad3      	subs	r3, r2, r3
 800ed12:	2b64      	cmp	r3, #100	@ 0x64
 800ed14:	d901      	bls.n	800ed1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ed16:	2303      	movs	r3, #3
 800ed18:	e1f3      	b.n	800f102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ed1a:	4b51      	ldr	r3, [pc, #324]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d1f0      	bne.n	800ed08 <HAL_RCC_OscConfig+0xe8>
 800ed26:	e000      	b.n	800ed2a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ed28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	f003 0302 	and.w	r3, r3, #2
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d063      	beq.n	800edfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ed36:	4b4a      	ldr	r3, [pc, #296]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	f003 030c 	and.w	r3, r3, #12
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d00b      	beq.n	800ed5a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ed42:	4b47      	ldr	r3, [pc, #284]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ed44:	689b      	ldr	r3, [r3, #8]
 800ed46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ed4a:	2b08      	cmp	r3, #8
 800ed4c:	d11c      	bne.n	800ed88 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ed4e:	4b44      	ldr	r3, [pc, #272]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ed50:	685b      	ldr	r3, [r3, #4]
 800ed52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d116      	bne.n	800ed88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ed5a:	4b41      	ldr	r3, [pc, #260]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	f003 0302 	and.w	r3, r3, #2
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d005      	beq.n	800ed72 <HAL_RCC_OscConfig+0x152>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	2b01      	cmp	r3, #1
 800ed6c:	d001      	beq.n	800ed72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	e1c7      	b.n	800f102 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ed72:	4b3b      	ldr	r3, [pc, #236]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	691b      	ldr	r3, [r3, #16]
 800ed7e:	00db      	lsls	r3, r3, #3
 800ed80:	4937      	ldr	r1, [pc, #220]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ed82:	4313      	orrs	r3, r2
 800ed84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ed86:	e03a      	b.n	800edfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	68db      	ldr	r3, [r3, #12]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d020      	beq.n	800edd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ed90:	4b34      	ldr	r3, [pc, #208]	@ (800ee64 <HAL_RCC_OscConfig+0x244>)
 800ed92:	2201      	movs	r2, #1
 800ed94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed96:	f7fd fac7 	bl	800c328 <HAL_GetTick>
 800ed9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ed9c:	e008      	b.n	800edb0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ed9e:	f7fd fac3 	bl	800c328 <HAL_GetTick>
 800eda2:	4602      	mov	r2, r0
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	1ad3      	subs	r3, r2, r3
 800eda8:	2b02      	cmp	r3, #2
 800edaa:	d901      	bls.n	800edb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800edac:	2303      	movs	r3, #3
 800edae:	e1a8      	b.n	800f102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800edb0:	4b2b      	ldr	r3, [pc, #172]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	f003 0302 	and.w	r3, r3, #2
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d0f0      	beq.n	800ed9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800edbc:	4b28      	ldr	r3, [pc, #160]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	691b      	ldr	r3, [r3, #16]
 800edc8:	00db      	lsls	r3, r3, #3
 800edca:	4925      	ldr	r1, [pc, #148]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800edcc:	4313      	orrs	r3, r2
 800edce:	600b      	str	r3, [r1, #0]
 800edd0:	e015      	b.n	800edfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800edd2:	4b24      	ldr	r3, [pc, #144]	@ (800ee64 <HAL_RCC_OscConfig+0x244>)
 800edd4:	2200      	movs	r2, #0
 800edd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800edd8:	f7fd faa6 	bl	800c328 <HAL_GetTick>
 800eddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800edde:	e008      	b.n	800edf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ede0:	f7fd faa2 	bl	800c328 <HAL_GetTick>
 800ede4:	4602      	mov	r2, r0
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	2b02      	cmp	r3, #2
 800edec:	d901      	bls.n	800edf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800edee:	2303      	movs	r3, #3
 800edf0:	e187      	b.n	800f102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800edf2:	4b1b      	ldr	r3, [pc, #108]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f003 0302 	and.w	r3, r3, #2
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d1f0      	bne.n	800ede0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f003 0308 	and.w	r3, r3, #8
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d036      	beq.n	800ee78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	695b      	ldr	r3, [r3, #20]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d016      	beq.n	800ee40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ee12:	4b15      	ldr	r3, [pc, #84]	@ (800ee68 <HAL_RCC_OscConfig+0x248>)
 800ee14:	2201      	movs	r2, #1
 800ee16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ee18:	f7fd fa86 	bl	800c328 <HAL_GetTick>
 800ee1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ee1e:	e008      	b.n	800ee32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ee20:	f7fd fa82 	bl	800c328 <HAL_GetTick>
 800ee24:	4602      	mov	r2, r0
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	1ad3      	subs	r3, r2, r3
 800ee2a:	2b02      	cmp	r3, #2
 800ee2c:	d901      	bls.n	800ee32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ee2e:	2303      	movs	r3, #3
 800ee30:	e167      	b.n	800f102 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ee32:	4b0b      	ldr	r3, [pc, #44]	@ (800ee60 <HAL_RCC_OscConfig+0x240>)
 800ee34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee36:	f003 0302 	and.w	r3, r3, #2
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d0f0      	beq.n	800ee20 <HAL_RCC_OscConfig+0x200>
 800ee3e:	e01b      	b.n	800ee78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ee40:	4b09      	ldr	r3, [pc, #36]	@ (800ee68 <HAL_RCC_OscConfig+0x248>)
 800ee42:	2200      	movs	r2, #0
 800ee44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ee46:	f7fd fa6f 	bl	800c328 <HAL_GetTick>
 800ee4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ee4c:	e00e      	b.n	800ee6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ee4e:	f7fd fa6b 	bl	800c328 <HAL_GetTick>
 800ee52:	4602      	mov	r2, r0
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	1ad3      	subs	r3, r2, r3
 800ee58:	2b02      	cmp	r3, #2
 800ee5a:	d907      	bls.n	800ee6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ee5c:	2303      	movs	r3, #3
 800ee5e:	e150      	b.n	800f102 <HAL_RCC_OscConfig+0x4e2>
 800ee60:	40023800 	.word	0x40023800
 800ee64:	42470000 	.word	0x42470000
 800ee68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ee6c:	4b88      	ldr	r3, [pc, #544]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800ee6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee70:	f003 0302 	and.w	r3, r3, #2
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d1ea      	bne.n	800ee4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f003 0304 	and.w	r3, r3, #4
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f000 8097 	beq.w	800efb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ee86:	2300      	movs	r3, #0
 800ee88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ee8a:	4b81      	ldr	r3, [pc, #516]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800ee8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d10f      	bne.n	800eeb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ee96:	2300      	movs	r3, #0
 800ee98:	60bb      	str	r3, [r7, #8]
 800ee9a:	4b7d      	ldr	r3, [pc, #500]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800ee9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee9e:	4a7c      	ldr	r2, [pc, #496]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800eea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eea4:	6413      	str	r3, [r2, #64]	@ 0x40
 800eea6:	4b7a      	ldr	r3, [pc, #488]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800eea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eeaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eeae:	60bb      	str	r3, [r7, #8]
 800eeb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eeb6:	4b77      	ldr	r3, [pc, #476]	@ (800f094 <HAL_RCC_OscConfig+0x474>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d118      	bne.n	800eef4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800eec2:	4b74      	ldr	r3, [pc, #464]	@ (800f094 <HAL_RCC_OscConfig+0x474>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a73      	ldr	r2, [pc, #460]	@ (800f094 <HAL_RCC_OscConfig+0x474>)
 800eec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800eece:	f7fd fa2b 	bl	800c328 <HAL_GetTick>
 800eed2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eed4:	e008      	b.n	800eee8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eed6:	f7fd fa27 	bl	800c328 <HAL_GetTick>
 800eeda:	4602      	mov	r2, r0
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	1ad3      	subs	r3, r2, r3
 800eee0:	2b02      	cmp	r3, #2
 800eee2:	d901      	bls.n	800eee8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800eee4:	2303      	movs	r3, #3
 800eee6:	e10c      	b.n	800f102 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eee8:	4b6a      	ldr	r3, [pc, #424]	@ (800f094 <HAL_RCC_OscConfig+0x474>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d0f0      	beq.n	800eed6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	689b      	ldr	r3, [r3, #8]
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d106      	bne.n	800ef0a <HAL_RCC_OscConfig+0x2ea>
 800eefc:	4b64      	ldr	r3, [pc, #400]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800eefe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef00:	4a63      	ldr	r2, [pc, #396]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800ef02:	f043 0301 	orr.w	r3, r3, #1
 800ef06:	6713      	str	r3, [r2, #112]	@ 0x70
 800ef08:	e01c      	b.n	800ef44 <HAL_RCC_OscConfig+0x324>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	689b      	ldr	r3, [r3, #8]
 800ef0e:	2b05      	cmp	r3, #5
 800ef10:	d10c      	bne.n	800ef2c <HAL_RCC_OscConfig+0x30c>
 800ef12:	4b5f      	ldr	r3, [pc, #380]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800ef14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef16:	4a5e      	ldr	r2, [pc, #376]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800ef18:	f043 0304 	orr.w	r3, r3, #4
 800ef1c:	6713      	str	r3, [r2, #112]	@ 0x70
 800ef1e:	4b5c      	ldr	r3, [pc, #368]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800ef20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef22:	4a5b      	ldr	r2, [pc, #364]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800ef24:	f043 0301 	orr.w	r3, r3, #1
 800ef28:	6713      	str	r3, [r2, #112]	@ 0x70
 800ef2a:	e00b      	b.n	800ef44 <HAL_RCC_OscConfig+0x324>
 800ef2c:	4b58      	ldr	r3, [pc, #352]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800ef2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef30:	4a57      	ldr	r2, [pc, #348]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800ef32:	f023 0301 	bic.w	r3, r3, #1
 800ef36:	6713      	str	r3, [r2, #112]	@ 0x70
 800ef38:	4b55      	ldr	r3, [pc, #340]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800ef3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef3c:	4a54      	ldr	r2, [pc, #336]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800ef3e:	f023 0304 	bic.w	r3, r3, #4
 800ef42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	689b      	ldr	r3, [r3, #8]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d015      	beq.n	800ef78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ef4c:	f7fd f9ec 	bl	800c328 <HAL_GetTick>
 800ef50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ef52:	e00a      	b.n	800ef6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ef54:	f7fd f9e8 	bl	800c328 <HAL_GetTick>
 800ef58:	4602      	mov	r2, r0
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	1ad3      	subs	r3, r2, r3
 800ef5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d901      	bls.n	800ef6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ef66:	2303      	movs	r3, #3
 800ef68:	e0cb      	b.n	800f102 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ef6a:	4b49      	ldr	r3, [pc, #292]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800ef6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef6e:	f003 0302 	and.w	r3, r3, #2
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d0ee      	beq.n	800ef54 <HAL_RCC_OscConfig+0x334>
 800ef76:	e014      	b.n	800efa2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ef78:	f7fd f9d6 	bl	800c328 <HAL_GetTick>
 800ef7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ef7e:	e00a      	b.n	800ef96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ef80:	f7fd f9d2 	bl	800c328 <HAL_GetTick>
 800ef84:	4602      	mov	r2, r0
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	1ad3      	subs	r3, r2, r3
 800ef8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d901      	bls.n	800ef96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ef92:	2303      	movs	r3, #3
 800ef94:	e0b5      	b.n	800f102 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ef96:	4b3e      	ldr	r3, [pc, #248]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800ef98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef9a:	f003 0302 	and.w	r3, r3, #2
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d1ee      	bne.n	800ef80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800efa2:	7dfb      	ldrb	r3, [r7, #23]
 800efa4:	2b01      	cmp	r3, #1
 800efa6:	d105      	bne.n	800efb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800efa8:	4b39      	ldr	r3, [pc, #228]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800efaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800efac:	4a38      	ldr	r2, [pc, #224]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800efae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800efb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	699b      	ldr	r3, [r3, #24]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	f000 80a1 	beq.w	800f100 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800efbe:	4b34      	ldr	r3, [pc, #208]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800efc0:	689b      	ldr	r3, [r3, #8]
 800efc2:	f003 030c 	and.w	r3, r3, #12
 800efc6:	2b08      	cmp	r3, #8
 800efc8:	d05c      	beq.n	800f084 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	699b      	ldr	r3, [r3, #24]
 800efce:	2b02      	cmp	r3, #2
 800efd0:	d141      	bne.n	800f056 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800efd2:	4b31      	ldr	r3, [pc, #196]	@ (800f098 <HAL_RCC_OscConfig+0x478>)
 800efd4:	2200      	movs	r2, #0
 800efd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800efd8:	f7fd f9a6 	bl	800c328 <HAL_GetTick>
 800efdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800efde:	e008      	b.n	800eff2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800efe0:	f7fd f9a2 	bl	800c328 <HAL_GetTick>
 800efe4:	4602      	mov	r2, r0
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	1ad3      	subs	r3, r2, r3
 800efea:	2b02      	cmp	r3, #2
 800efec:	d901      	bls.n	800eff2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800efee:	2303      	movs	r3, #3
 800eff0:	e087      	b.n	800f102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eff2:	4b27      	ldr	r3, [pc, #156]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800effa:	2b00      	cmp	r3, #0
 800effc:	d1f0      	bne.n	800efe0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	69da      	ldr	r2, [r3, #28]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	6a1b      	ldr	r3, [r3, #32]
 800f006:	431a      	orrs	r2, r3
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f00c:	019b      	lsls	r3, r3, #6
 800f00e:	431a      	orrs	r2, r3
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f014:	085b      	lsrs	r3, r3, #1
 800f016:	3b01      	subs	r3, #1
 800f018:	041b      	lsls	r3, r3, #16
 800f01a:	431a      	orrs	r2, r3
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f020:	061b      	lsls	r3, r3, #24
 800f022:	491b      	ldr	r1, [pc, #108]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800f024:	4313      	orrs	r3, r2
 800f026:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f028:	4b1b      	ldr	r3, [pc, #108]	@ (800f098 <HAL_RCC_OscConfig+0x478>)
 800f02a:	2201      	movs	r2, #1
 800f02c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f02e:	f7fd f97b 	bl	800c328 <HAL_GetTick>
 800f032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f034:	e008      	b.n	800f048 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f036:	f7fd f977 	bl	800c328 <HAL_GetTick>
 800f03a:	4602      	mov	r2, r0
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	1ad3      	subs	r3, r2, r3
 800f040:	2b02      	cmp	r3, #2
 800f042:	d901      	bls.n	800f048 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f044:	2303      	movs	r3, #3
 800f046:	e05c      	b.n	800f102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f048:	4b11      	ldr	r3, [pc, #68]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f050:	2b00      	cmp	r3, #0
 800f052:	d0f0      	beq.n	800f036 <HAL_RCC_OscConfig+0x416>
 800f054:	e054      	b.n	800f100 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f056:	4b10      	ldr	r3, [pc, #64]	@ (800f098 <HAL_RCC_OscConfig+0x478>)
 800f058:	2200      	movs	r2, #0
 800f05a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f05c:	f7fd f964 	bl	800c328 <HAL_GetTick>
 800f060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f062:	e008      	b.n	800f076 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f064:	f7fd f960 	bl	800c328 <HAL_GetTick>
 800f068:	4602      	mov	r2, r0
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	1ad3      	subs	r3, r2, r3
 800f06e:	2b02      	cmp	r3, #2
 800f070:	d901      	bls.n	800f076 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800f072:	2303      	movs	r3, #3
 800f074:	e045      	b.n	800f102 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f076:	4b06      	ldr	r3, [pc, #24]	@ (800f090 <HAL_RCC_OscConfig+0x470>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d1f0      	bne.n	800f064 <HAL_RCC_OscConfig+0x444>
 800f082:	e03d      	b.n	800f100 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	699b      	ldr	r3, [r3, #24]
 800f088:	2b01      	cmp	r3, #1
 800f08a:	d107      	bne.n	800f09c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800f08c:	2301      	movs	r3, #1
 800f08e:	e038      	b.n	800f102 <HAL_RCC_OscConfig+0x4e2>
 800f090:	40023800 	.word	0x40023800
 800f094:	40007000 	.word	0x40007000
 800f098:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f09c:	4b1b      	ldr	r3, [pc, #108]	@ (800f10c <HAL_RCC_OscConfig+0x4ec>)
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	699b      	ldr	r3, [r3, #24]
 800f0a6:	2b01      	cmp	r3, #1
 800f0a8:	d028      	beq.n	800f0fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d121      	bne.n	800f0fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d11a      	bne.n	800f0fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f0c6:	68fa      	ldr	r2, [r7, #12]
 800f0c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800f0cc:	4013      	ands	r3, r2
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f0d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	d111      	bne.n	800f0fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0e2:	085b      	lsrs	r3, r3, #1
 800f0e4:	3b01      	subs	r3, #1
 800f0e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d107      	bne.n	800f0fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d001      	beq.n	800f100 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	e000      	b.n	800f102 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800f100:	2300      	movs	r3, #0
}
 800f102:	4618      	mov	r0, r3
 800f104:	3718      	adds	r7, #24
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}
 800f10a:	bf00      	nop
 800f10c:	40023800 	.word	0x40023800

0800f110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d101      	bne.n	800f124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f120:	2301      	movs	r3, #1
 800f122:	e0cc      	b.n	800f2be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f124:	4b68      	ldr	r3, [pc, #416]	@ (800f2c8 <HAL_RCC_ClockConfig+0x1b8>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f003 0307 	and.w	r3, r3, #7
 800f12c:	683a      	ldr	r2, [r7, #0]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d90c      	bls.n	800f14c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f132:	4b65      	ldr	r3, [pc, #404]	@ (800f2c8 <HAL_RCC_ClockConfig+0x1b8>)
 800f134:	683a      	ldr	r2, [r7, #0]
 800f136:	b2d2      	uxtb	r2, r2
 800f138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f13a:	4b63      	ldr	r3, [pc, #396]	@ (800f2c8 <HAL_RCC_ClockConfig+0x1b8>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f003 0307 	and.w	r3, r3, #7
 800f142:	683a      	ldr	r2, [r7, #0]
 800f144:	429a      	cmp	r2, r3
 800f146:	d001      	beq.n	800f14c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f148:	2301      	movs	r3, #1
 800f14a:	e0b8      	b.n	800f2be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f003 0302 	and.w	r3, r3, #2
 800f154:	2b00      	cmp	r3, #0
 800f156:	d020      	beq.n	800f19a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f003 0304 	and.w	r3, r3, #4
 800f160:	2b00      	cmp	r3, #0
 800f162:	d005      	beq.n	800f170 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f164:	4b59      	ldr	r3, [pc, #356]	@ (800f2cc <HAL_RCC_ClockConfig+0x1bc>)
 800f166:	689b      	ldr	r3, [r3, #8]
 800f168:	4a58      	ldr	r2, [pc, #352]	@ (800f2cc <HAL_RCC_ClockConfig+0x1bc>)
 800f16a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800f16e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	f003 0308 	and.w	r3, r3, #8
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d005      	beq.n	800f188 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f17c:	4b53      	ldr	r3, [pc, #332]	@ (800f2cc <HAL_RCC_ClockConfig+0x1bc>)
 800f17e:	689b      	ldr	r3, [r3, #8]
 800f180:	4a52      	ldr	r2, [pc, #328]	@ (800f2cc <HAL_RCC_ClockConfig+0x1bc>)
 800f182:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800f186:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f188:	4b50      	ldr	r3, [pc, #320]	@ (800f2cc <HAL_RCC_ClockConfig+0x1bc>)
 800f18a:	689b      	ldr	r3, [r3, #8]
 800f18c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	689b      	ldr	r3, [r3, #8]
 800f194:	494d      	ldr	r1, [pc, #308]	@ (800f2cc <HAL_RCC_ClockConfig+0x1bc>)
 800f196:	4313      	orrs	r3, r2
 800f198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	f003 0301 	and.w	r3, r3, #1
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d044      	beq.n	800f230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	685b      	ldr	r3, [r3, #4]
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d107      	bne.n	800f1be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f1ae:	4b47      	ldr	r3, [pc, #284]	@ (800f2cc <HAL_RCC_ClockConfig+0x1bc>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d119      	bne.n	800f1ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	e07f      	b.n	800f2be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	2b02      	cmp	r3, #2
 800f1c4:	d003      	beq.n	800f1ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f1ca:	2b03      	cmp	r3, #3
 800f1cc:	d107      	bne.n	800f1de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f1ce:	4b3f      	ldr	r3, [pc, #252]	@ (800f2cc <HAL_RCC_ClockConfig+0x1bc>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d109      	bne.n	800f1ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f1da:	2301      	movs	r3, #1
 800f1dc:	e06f      	b.n	800f2be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f1de:	4b3b      	ldr	r3, [pc, #236]	@ (800f2cc <HAL_RCC_ClockConfig+0x1bc>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f003 0302 	and.w	r3, r3, #2
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d101      	bne.n	800f1ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	e067      	b.n	800f2be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f1ee:	4b37      	ldr	r3, [pc, #220]	@ (800f2cc <HAL_RCC_ClockConfig+0x1bc>)
 800f1f0:	689b      	ldr	r3, [r3, #8]
 800f1f2:	f023 0203 	bic.w	r2, r3, #3
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	685b      	ldr	r3, [r3, #4]
 800f1fa:	4934      	ldr	r1, [pc, #208]	@ (800f2cc <HAL_RCC_ClockConfig+0x1bc>)
 800f1fc:	4313      	orrs	r3, r2
 800f1fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f200:	f7fd f892 	bl	800c328 <HAL_GetTick>
 800f204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f206:	e00a      	b.n	800f21e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f208:	f7fd f88e 	bl	800c328 <HAL_GetTick>
 800f20c:	4602      	mov	r2, r0
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	1ad3      	subs	r3, r2, r3
 800f212:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f216:	4293      	cmp	r3, r2
 800f218:	d901      	bls.n	800f21e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f21a:	2303      	movs	r3, #3
 800f21c:	e04f      	b.n	800f2be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f21e:	4b2b      	ldr	r3, [pc, #172]	@ (800f2cc <HAL_RCC_ClockConfig+0x1bc>)
 800f220:	689b      	ldr	r3, [r3, #8]
 800f222:	f003 020c 	and.w	r2, r3, #12
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	009b      	lsls	r3, r3, #2
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d1eb      	bne.n	800f208 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f230:	4b25      	ldr	r3, [pc, #148]	@ (800f2c8 <HAL_RCC_ClockConfig+0x1b8>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f003 0307 	and.w	r3, r3, #7
 800f238:	683a      	ldr	r2, [r7, #0]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d20c      	bcs.n	800f258 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f23e:	4b22      	ldr	r3, [pc, #136]	@ (800f2c8 <HAL_RCC_ClockConfig+0x1b8>)
 800f240:	683a      	ldr	r2, [r7, #0]
 800f242:	b2d2      	uxtb	r2, r2
 800f244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f246:	4b20      	ldr	r3, [pc, #128]	@ (800f2c8 <HAL_RCC_ClockConfig+0x1b8>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	f003 0307 	and.w	r3, r3, #7
 800f24e:	683a      	ldr	r2, [r7, #0]
 800f250:	429a      	cmp	r2, r3
 800f252:	d001      	beq.n	800f258 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f254:	2301      	movs	r3, #1
 800f256:	e032      	b.n	800f2be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f003 0304 	and.w	r3, r3, #4
 800f260:	2b00      	cmp	r3, #0
 800f262:	d008      	beq.n	800f276 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f264:	4b19      	ldr	r3, [pc, #100]	@ (800f2cc <HAL_RCC_ClockConfig+0x1bc>)
 800f266:	689b      	ldr	r3, [r3, #8]
 800f268:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	68db      	ldr	r3, [r3, #12]
 800f270:	4916      	ldr	r1, [pc, #88]	@ (800f2cc <HAL_RCC_ClockConfig+0x1bc>)
 800f272:	4313      	orrs	r3, r2
 800f274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f003 0308 	and.w	r3, r3, #8
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d009      	beq.n	800f296 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f282:	4b12      	ldr	r3, [pc, #72]	@ (800f2cc <HAL_RCC_ClockConfig+0x1bc>)
 800f284:	689b      	ldr	r3, [r3, #8]
 800f286:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	691b      	ldr	r3, [r3, #16]
 800f28e:	00db      	lsls	r3, r3, #3
 800f290:	490e      	ldr	r1, [pc, #56]	@ (800f2cc <HAL_RCC_ClockConfig+0x1bc>)
 800f292:	4313      	orrs	r3, r2
 800f294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800f296:	f000 f821 	bl	800f2dc <HAL_RCC_GetSysClockFreq>
 800f29a:	4602      	mov	r2, r0
 800f29c:	4b0b      	ldr	r3, [pc, #44]	@ (800f2cc <HAL_RCC_ClockConfig+0x1bc>)
 800f29e:	689b      	ldr	r3, [r3, #8]
 800f2a0:	091b      	lsrs	r3, r3, #4
 800f2a2:	f003 030f 	and.w	r3, r3, #15
 800f2a6:	490a      	ldr	r1, [pc, #40]	@ (800f2d0 <HAL_RCC_ClockConfig+0x1c0>)
 800f2a8:	5ccb      	ldrb	r3, [r1, r3]
 800f2aa:	fa22 f303 	lsr.w	r3, r2, r3
 800f2ae:	4a09      	ldr	r2, [pc, #36]	@ (800f2d4 <HAL_RCC_ClockConfig+0x1c4>)
 800f2b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800f2b2:	4b09      	ldr	r3, [pc, #36]	@ (800f2d8 <HAL_RCC_ClockConfig+0x1c8>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f7fc fff2 	bl	800c2a0 <HAL_InitTick>

  return HAL_OK;
 800f2bc:	2300      	movs	r3, #0
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3710      	adds	r7, #16
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
 800f2c6:	bf00      	nop
 800f2c8:	40023c00 	.word	0x40023c00
 800f2cc:	40023800 	.word	0x40023800
 800f2d0:	08018250 	.word	0x08018250
 800f2d4:	20000000 	.word	0x20000000
 800f2d8:	20000220 	.word	0x20000220

0800f2dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f2dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f2e0:	b094      	sub	sp, #80	@ 0x50
 800f2e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f2f4:	4b79      	ldr	r3, [pc, #484]	@ (800f4dc <HAL_RCC_GetSysClockFreq+0x200>)
 800f2f6:	689b      	ldr	r3, [r3, #8]
 800f2f8:	f003 030c 	and.w	r3, r3, #12
 800f2fc:	2b08      	cmp	r3, #8
 800f2fe:	d00d      	beq.n	800f31c <HAL_RCC_GetSysClockFreq+0x40>
 800f300:	2b08      	cmp	r3, #8
 800f302:	f200 80e1 	bhi.w	800f4c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800f306:	2b00      	cmp	r3, #0
 800f308:	d002      	beq.n	800f310 <HAL_RCC_GetSysClockFreq+0x34>
 800f30a:	2b04      	cmp	r3, #4
 800f30c:	d003      	beq.n	800f316 <HAL_RCC_GetSysClockFreq+0x3a>
 800f30e:	e0db      	b.n	800f4c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f310:	4b73      	ldr	r3, [pc, #460]	@ (800f4e0 <HAL_RCC_GetSysClockFreq+0x204>)
 800f312:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f314:	e0db      	b.n	800f4ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f316:	4b73      	ldr	r3, [pc, #460]	@ (800f4e4 <HAL_RCC_GetSysClockFreq+0x208>)
 800f318:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f31a:	e0d8      	b.n	800f4ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f31c:	4b6f      	ldr	r3, [pc, #444]	@ (800f4dc <HAL_RCC_GetSysClockFreq+0x200>)
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f324:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f326:	4b6d      	ldr	r3, [pc, #436]	@ (800f4dc <HAL_RCC_GetSysClockFreq+0x200>)
 800f328:	685b      	ldr	r3, [r3, #4]
 800f32a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d063      	beq.n	800f3fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f332:	4b6a      	ldr	r3, [pc, #424]	@ (800f4dc <HAL_RCC_GetSysClockFreq+0x200>)
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	099b      	lsrs	r3, r3, #6
 800f338:	2200      	movs	r2, #0
 800f33a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f33c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800f33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f344:	633b      	str	r3, [r7, #48]	@ 0x30
 800f346:	2300      	movs	r3, #0
 800f348:	637b      	str	r3, [r7, #52]	@ 0x34
 800f34a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800f34e:	4622      	mov	r2, r4
 800f350:	462b      	mov	r3, r5
 800f352:	f04f 0000 	mov.w	r0, #0
 800f356:	f04f 0100 	mov.w	r1, #0
 800f35a:	0159      	lsls	r1, r3, #5
 800f35c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f360:	0150      	lsls	r0, r2, #5
 800f362:	4602      	mov	r2, r0
 800f364:	460b      	mov	r3, r1
 800f366:	4621      	mov	r1, r4
 800f368:	1a51      	subs	r1, r2, r1
 800f36a:	6139      	str	r1, [r7, #16]
 800f36c:	4629      	mov	r1, r5
 800f36e:	eb63 0301 	sbc.w	r3, r3, r1
 800f372:	617b      	str	r3, [r7, #20]
 800f374:	f04f 0200 	mov.w	r2, #0
 800f378:	f04f 0300 	mov.w	r3, #0
 800f37c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f380:	4659      	mov	r1, fp
 800f382:	018b      	lsls	r3, r1, #6
 800f384:	4651      	mov	r1, sl
 800f386:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800f38a:	4651      	mov	r1, sl
 800f38c:	018a      	lsls	r2, r1, #6
 800f38e:	4651      	mov	r1, sl
 800f390:	ebb2 0801 	subs.w	r8, r2, r1
 800f394:	4659      	mov	r1, fp
 800f396:	eb63 0901 	sbc.w	r9, r3, r1
 800f39a:	f04f 0200 	mov.w	r2, #0
 800f39e:	f04f 0300 	mov.w	r3, #0
 800f3a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f3a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f3aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f3ae:	4690      	mov	r8, r2
 800f3b0:	4699      	mov	r9, r3
 800f3b2:	4623      	mov	r3, r4
 800f3b4:	eb18 0303 	adds.w	r3, r8, r3
 800f3b8:	60bb      	str	r3, [r7, #8]
 800f3ba:	462b      	mov	r3, r5
 800f3bc:	eb49 0303 	adc.w	r3, r9, r3
 800f3c0:	60fb      	str	r3, [r7, #12]
 800f3c2:	f04f 0200 	mov.w	r2, #0
 800f3c6:	f04f 0300 	mov.w	r3, #0
 800f3ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800f3ce:	4629      	mov	r1, r5
 800f3d0:	024b      	lsls	r3, r1, #9
 800f3d2:	4621      	mov	r1, r4
 800f3d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800f3d8:	4621      	mov	r1, r4
 800f3da:	024a      	lsls	r2, r1, #9
 800f3dc:	4610      	mov	r0, r2
 800f3de:	4619      	mov	r1, r3
 800f3e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f3e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f3e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800f3ec:	f7f1 fc34 	bl	8000c58 <__aeabi_uldivmod>
 800f3f0:	4602      	mov	r2, r0
 800f3f2:	460b      	mov	r3, r1
 800f3f4:	4613      	mov	r3, r2
 800f3f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f3f8:	e058      	b.n	800f4ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f3fa:	4b38      	ldr	r3, [pc, #224]	@ (800f4dc <HAL_RCC_GetSysClockFreq+0x200>)
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	099b      	lsrs	r3, r3, #6
 800f400:	2200      	movs	r2, #0
 800f402:	4618      	mov	r0, r3
 800f404:	4611      	mov	r1, r2
 800f406:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800f40a:	623b      	str	r3, [r7, #32]
 800f40c:	2300      	movs	r3, #0
 800f40e:	627b      	str	r3, [r7, #36]	@ 0x24
 800f410:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800f414:	4642      	mov	r2, r8
 800f416:	464b      	mov	r3, r9
 800f418:	f04f 0000 	mov.w	r0, #0
 800f41c:	f04f 0100 	mov.w	r1, #0
 800f420:	0159      	lsls	r1, r3, #5
 800f422:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f426:	0150      	lsls	r0, r2, #5
 800f428:	4602      	mov	r2, r0
 800f42a:	460b      	mov	r3, r1
 800f42c:	4641      	mov	r1, r8
 800f42e:	ebb2 0a01 	subs.w	sl, r2, r1
 800f432:	4649      	mov	r1, r9
 800f434:	eb63 0b01 	sbc.w	fp, r3, r1
 800f438:	f04f 0200 	mov.w	r2, #0
 800f43c:	f04f 0300 	mov.w	r3, #0
 800f440:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800f444:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800f448:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800f44c:	ebb2 040a 	subs.w	r4, r2, sl
 800f450:	eb63 050b 	sbc.w	r5, r3, fp
 800f454:	f04f 0200 	mov.w	r2, #0
 800f458:	f04f 0300 	mov.w	r3, #0
 800f45c:	00eb      	lsls	r3, r5, #3
 800f45e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f462:	00e2      	lsls	r2, r4, #3
 800f464:	4614      	mov	r4, r2
 800f466:	461d      	mov	r5, r3
 800f468:	4643      	mov	r3, r8
 800f46a:	18e3      	adds	r3, r4, r3
 800f46c:	603b      	str	r3, [r7, #0]
 800f46e:	464b      	mov	r3, r9
 800f470:	eb45 0303 	adc.w	r3, r5, r3
 800f474:	607b      	str	r3, [r7, #4]
 800f476:	f04f 0200 	mov.w	r2, #0
 800f47a:	f04f 0300 	mov.w	r3, #0
 800f47e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f482:	4629      	mov	r1, r5
 800f484:	028b      	lsls	r3, r1, #10
 800f486:	4621      	mov	r1, r4
 800f488:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f48c:	4621      	mov	r1, r4
 800f48e:	028a      	lsls	r2, r1, #10
 800f490:	4610      	mov	r0, r2
 800f492:	4619      	mov	r1, r3
 800f494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f496:	2200      	movs	r2, #0
 800f498:	61bb      	str	r3, [r7, #24]
 800f49a:	61fa      	str	r2, [r7, #28]
 800f49c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f4a0:	f7f1 fbda 	bl	8000c58 <__aeabi_uldivmod>
 800f4a4:	4602      	mov	r2, r0
 800f4a6:	460b      	mov	r3, r1
 800f4a8:	4613      	mov	r3, r2
 800f4aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800f4ac:	4b0b      	ldr	r3, [pc, #44]	@ (800f4dc <HAL_RCC_GetSysClockFreq+0x200>)
 800f4ae:	685b      	ldr	r3, [r3, #4]
 800f4b0:	0c1b      	lsrs	r3, r3, #16
 800f4b2:	f003 0303 	and.w	r3, r3, #3
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	005b      	lsls	r3, r3, #1
 800f4ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800f4bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f4be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f4c6:	e002      	b.n	800f4ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f4c8:	4b05      	ldr	r3, [pc, #20]	@ (800f4e0 <HAL_RCC_GetSysClockFreq+0x204>)
 800f4ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f4cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f4ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3750      	adds	r7, #80	@ 0x50
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f4da:	bf00      	nop
 800f4dc:	40023800 	.word	0x40023800
 800f4e0:	00f42400 	.word	0x00f42400
 800f4e4:	007a1200 	.word	0x007a1200

0800f4e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f4ec:	4b03      	ldr	r3, [pc, #12]	@ (800f4fc <HAL_RCC_GetHCLKFreq+0x14>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f8:	4770      	bx	lr
 800f4fa:	bf00      	nop
 800f4fc:	20000000 	.word	0x20000000

0800f500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f504:	f7ff fff0 	bl	800f4e8 <HAL_RCC_GetHCLKFreq>
 800f508:	4602      	mov	r2, r0
 800f50a:	4b05      	ldr	r3, [pc, #20]	@ (800f520 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f50c:	689b      	ldr	r3, [r3, #8]
 800f50e:	0a9b      	lsrs	r3, r3, #10
 800f510:	f003 0307 	and.w	r3, r3, #7
 800f514:	4903      	ldr	r1, [pc, #12]	@ (800f524 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f516:	5ccb      	ldrb	r3, [r1, r3]
 800f518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f51c:	4618      	mov	r0, r3
 800f51e:	bd80      	pop	{r7, pc}
 800f520:	40023800 	.word	0x40023800
 800f524:	08018260 	.word	0x08018260

0800f528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f52c:	f7ff ffdc 	bl	800f4e8 <HAL_RCC_GetHCLKFreq>
 800f530:	4602      	mov	r2, r0
 800f532:	4b05      	ldr	r3, [pc, #20]	@ (800f548 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f534:	689b      	ldr	r3, [r3, #8]
 800f536:	0b5b      	lsrs	r3, r3, #13
 800f538:	f003 0307 	and.w	r3, r3, #7
 800f53c:	4903      	ldr	r1, [pc, #12]	@ (800f54c <HAL_RCC_GetPCLK2Freq+0x24>)
 800f53e:	5ccb      	ldrb	r3, [r1, r3]
 800f540:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f544:	4618      	mov	r0, r3
 800f546:	bd80      	pop	{r7, pc}
 800f548:	40023800 	.word	0x40023800
 800f54c:	08018260 	.word	0x08018260

0800f550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b082      	sub	sp, #8
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d101      	bne.n	800f562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f55e:	2301      	movs	r3, #1
 800f560:	e07b      	b.n	800f65a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f566:	2b00      	cmp	r3, #0
 800f568:	d108      	bne.n	800f57c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f572:	d009      	beq.n	800f588 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2200      	movs	r2, #0
 800f578:	61da      	str	r2, [r3, #28]
 800f57a:	e005      	b.n	800f588 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2200      	movs	r2, #0
 800f580:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2200      	movs	r2, #0
 800f586:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2200      	movs	r2, #0
 800f58c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f594:	b2db      	uxtb	r3, r3
 800f596:	2b00      	cmp	r3, #0
 800f598:	d106      	bne.n	800f5a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	2200      	movs	r2, #0
 800f59e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f7f2 fdbc 	bl	8002120 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2202      	movs	r2, #2
 800f5ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	681a      	ldr	r2, [r3, #0]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f5be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	689b      	ldr	r3, [r3, #8]
 800f5cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800f5d0:	431a      	orrs	r2, r3
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	68db      	ldr	r3, [r3, #12]
 800f5d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f5da:	431a      	orrs	r2, r3
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	691b      	ldr	r3, [r3, #16]
 800f5e0:	f003 0302 	and.w	r3, r3, #2
 800f5e4:	431a      	orrs	r2, r3
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	695b      	ldr	r3, [r3, #20]
 800f5ea:	f003 0301 	and.w	r3, r3, #1
 800f5ee:	431a      	orrs	r2, r3
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	699b      	ldr	r3, [r3, #24]
 800f5f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f5f8:	431a      	orrs	r2, r3
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	69db      	ldr	r3, [r3, #28]
 800f5fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f602:	431a      	orrs	r2, r3
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6a1b      	ldr	r3, [r3, #32]
 800f608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f60c:	ea42 0103 	orr.w	r1, r2, r3
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f614:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	430a      	orrs	r2, r1
 800f61e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	699b      	ldr	r3, [r3, #24]
 800f624:	0c1b      	lsrs	r3, r3, #16
 800f626:	f003 0104 	and.w	r1, r3, #4
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f62e:	f003 0210 	and.w	r2, r3, #16
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	430a      	orrs	r2, r1
 800f638:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	69da      	ldr	r2, [r3, #28]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f648:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2200      	movs	r2, #0
 800f64e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2201      	movs	r2, #1
 800f654:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800f658:	2300      	movs	r3, #0
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3708      	adds	r7, #8
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}

0800f662 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f662:	b580      	push	{r7, lr}
 800f664:	b088      	sub	sp, #32
 800f666:	af00      	add	r7, sp, #0
 800f668:	60f8      	str	r0, [r7, #12]
 800f66a:	60b9      	str	r1, [r7, #8]
 800f66c:	603b      	str	r3, [r7, #0]
 800f66e:	4613      	mov	r3, r2
 800f670:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f672:	f7fc fe59 	bl	800c328 <HAL_GetTick>
 800f676:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800f678:	88fb      	ldrh	r3, [r7, #6]
 800f67a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f682:	b2db      	uxtb	r3, r3
 800f684:	2b01      	cmp	r3, #1
 800f686:	d001      	beq.n	800f68c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800f688:	2302      	movs	r3, #2
 800f68a:	e12a      	b.n	800f8e2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800f68c:	68bb      	ldr	r3, [r7, #8]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d002      	beq.n	800f698 <HAL_SPI_Transmit+0x36>
 800f692:	88fb      	ldrh	r3, [r7, #6]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d101      	bne.n	800f69c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800f698:	2301      	movs	r3, #1
 800f69a:	e122      	b.n	800f8e2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f6a2:	2b01      	cmp	r3, #1
 800f6a4:	d101      	bne.n	800f6aa <HAL_SPI_Transmit+0x48>
 800f6a6:	2302      	movs	r3, #2
 800f6a8:	e11b      	b.n	800f8e2 <HAL_SPI_Transmit+0x280>
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	2201      	movs	r2, #1
 800f6ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2203      	movs	r2, #3
 800f6b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	68ba      	ldr	r2, [r7, #8]
 800f6c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	88fa      	ldrh	r2, [r7, #6]
 800f6ca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	88fa      	ldrh	r2, [r7, #6]
 800f6d0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f6f8:	d10f      	bne.n	800f71a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	681a      	ldr	r2, [r3, #0]
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f708:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	681a      	ldr	r2, [r3, #0]
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f718:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f724:	2b40      	cmp	r3, #64	@ 0x40
 800f726:	d007      	beq.n	800f738 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	681a      	ldr	r2, [r3, #0]
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f736:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	68db      	ldr	r3, [r3, #12]
 800f73c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f740:	d152      	bne.n	800f7e8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d002      	beq.n	800f750 <HAL_SPI_Transmit+0xee>
 800f74a:	8b7b      	ldrh	r3, [r7, #26]
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d145      	bne.n	800f7dc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f754:	881a      	ldrh	r2, [r3, #0]
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f760:	1c9a      	adds	r2, r3, #2
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	3b01      	subs	r3, #1
 800f76e:	b29a      	uxth	r2, r3
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f774:	e032      	b.n	800f7dc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	689b      	ldr	r3, [r3, #8]
 800f77c:	f003 0302 	and.w	r3, r3, #2
 800f780:	2b02      	cmp	r3, #2
 800f782:	d112      	bne.n	800f7aa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f788:	881a      	ldrh	r2, [r3, #0]
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f794:	1c9a      	adds	r2, r3, #2
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	3b01      	subs	r3, #1
 800f7a2:	b29a      	uxth	r2, r3
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f7a8:	e018      	b.n	800f7dc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f7aa:	f7fc fdbd 	bl	800c328 <HAL_GetTick>
 800f7ae:	4602      	mov	r2, r0
 800f7b0:	69fb      	ldr	r3, [r7, #28]
 800f7b2:	1ad3      	subs	r3, r2, r3
 800f7b4:	683a      	ldr	r2, [r7, #0]
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d803      	bhi.n	800f7c2 <HAL_SPI_Transmit+0x160>
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7c0:	d102      	bne.n	800f7c8 <HAL_SPI_Transmit+0x166>
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d109      	bne.n	800f7dc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	2201      	movs	r2, #1
 800f7cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800f7d8:	2303      	movs	r3, #3
 800f7da:	e082      	b.n	800f8e2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f7e0:	b29b      	uxth	r3, r3
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d1c7      	bne.n	800f776 <HAL_SPI_Transmit+0x114>
 800f7e6:	e053      	b.n	800f890 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	685b      	ldr	r3, [r3, #4]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d002      	beq.n	800f7f6 <HAL_SPI_Transmit+0x194>
 800f7f0:	8b7b      	ldrh	r3, [r7, #26]
 800f7f2:	2b01      	cmp	r3, #1
 800f7f4:	d147      	bne.n	800f886 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	330c      	adds	r3, #12
 800f800:	7812      	ldrb	r2, [r2, #0]
 800f802:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f808:	1c5a      	adds	r2, r3, #1
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f812:	b29b      	uxth	r3, r3
 800f814:	3b01      	subs	r3, #1
 800f816:	b29a      	uxth	r2, r3
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f81c:	e033      	b.n	800f886 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	689b      	ldr	r3, [r3, #8]
 800f824:	f003 0302 	and.w	r3, r3, #2
 800f828:	2b02      	cmp	r3, #2
 800f82a:	d113      	bne.n	800f854 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	330c      	adds	r3, #12
 800f836:	7812      	ldrb	r2, [r2, #0]
 800f838:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f83e:	1c5a      	adds	r2, r3, #1
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f848:	b29b      	uxth	r3, r3
 800f84a:	3b01      	subs	r3, #1
 800f84c:	b29a      	uxth	r2, r3
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f852:	e018      	b.n	800f886 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f854:	f7fc fd68 	bl	800c328 <HAL_GetTick>
 800f858:	4602      	mov	r2, r0
 800f85a:	69fb      	ldr	r3, [r7, #28]
 800f85c:	1ad3      	subs	r3, r2, r3
 800f85e:	683a      	ldr	r2, [r7, #0]
 800f860:	429a      	cmp	r2, r3
 800f862:	d803      	bhi.n	800f86c <HAL_SPI_Transmit+0x20a>
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f86a:	d102      	bne.n	800f872 <HAL_SPI_Transmit+0x210>
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d109      	bne.n	800f886 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2201      	movs	r2, #1
 800f876:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	2200      	movs	r2, #0
 800f87e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800f882:	2303      	movs	r3, #3
 800f884:	e02d      	b.n	800f8e2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f88a:	b29b      	uxth	r3, r3
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d1c6      	bne.n	800f81e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f890:	69fa      	ldr	r2, [r7, #28]
 800f892:	6839      	ldr	r1, [r7, #0]
 800f894:	68f8      	ldr	r0, [r7, #12]
 800f896:	f000 fdd9 	bl	801044c <SPI_EndRxTxTransaction>
 800f89a:	4603      	mov	r3, r0
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d002      	beq.n	800f8a6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	2220      	movs	r2, #32
 800f8a4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	689b      	ldr	r3, [r3, #8]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d10a      	bne.n	800f8c4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	617b      	str	r3, [r7, #20]
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	68db      	ldr	r3, [r3, #12]
 800f8b8:	617b      	str	r3, [r7, #20]
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	689b      	ldr	r3, [r3, #8]
 800f8c0:	617b      	str	r3, [r7, #20]
 800f8c2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d001      	beq.n	800f8e0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800f8dc:	2301      	movs	r3, #1
 800f8de:	e000      	b.n	800f8e2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800f8e0:	2300      	movs	r3, #0
  }
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	3720      	adds	r7, #32
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}

0800f8ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f8ea:	b580      	push	{r7, lr}
 800f8ec:	b08a      	sub	sp, #40	@ 0x28
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	60f8      	str	r0, [r7, #12]
 800f8f2:	60b9      	str	r1, [r7, #8]
 800f8f4:	607a      	str	r2, [r7, #4]
 800f8f6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f8f8:	2301      	movs	r3, #1
 800f8fa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f8fc:	f7fc fd14 	bl	800c328 <HAL_GetTick>
 800f900:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f908:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	685b      	ldr	r3, [r3, #4]
 800f90e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800f910:	887b      	ldrh	r3, [r7, #2]
 800f912:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f914:	7ffb      	ldrb	r3, [r7, #31]
 800f916:	2b01      	cmp	r3, #1
 800f918:	d00c      	beq.n	800f934 <HAL_SPI_TransmitReceive+0x4a>
 800f91a:	69bb      	ldr	r3, [r7, #24]
 800f91c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f920:	d106      	bne.n	800f930 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	689b      	ldr	r3, [r3, #8]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d102      	bne.n	800f930 <HAL_SPI_TransmitReceive+0x46>
 800f92a:	7ffb      	ldrb	r3, [r7, #31]
 800f92c:	2b04      	cmp	r3, #4
 800f92e:	d001      	beq.n	800f934 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800f930:	2302      	movs	r3, #2
 800f932:	e17f      	b.n	800fc34 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d005      	beq.n	800f946 <HAL_SPI_TransmitReceive+0x5c>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d002      	beq.n	800f946 <HAL_SPI_TransmitReceive+0x5c>
 800f940:	887b      	ldrh	r3, [r7, #2]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d101      	bne.n	800f94a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800f946:	2301      	movs	r3, #1
 800f948:	e174      	b.n	800fc34 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f950:	2b01      	cmp	r3, #1
 800f952:	d101      	bne.n	800f958 <HAL_SPI_TransmitReceive+0x6e>
 800f954:	2302      	movs	r3, #2
 800f956:	e16d      	b.n	800fc34 <HAL_SPI_TransmitReceive+0x34a>
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	2201      	movs	r2, #1
 800f95c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f966:	b2db      	uxtb	r3, r3
 800f968:	2b04      	cmp	r3, #4
 800f96a:	d003      	beq.n	800f974 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	2205      	movs	r2, #5
 800f970:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	2200      	movs	r2, #0
 800f978:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	687a      	ldr	r2, [r7, #4]
 800f97e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	887a      	ldrh	r2, [r7, #2]
 800f984:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	887a      	ldrh	r2, [r7, #2]
 800f98a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	68ba      	ldr	r2, [r7, #8]
 800f990:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	887a      	ldrh	r2, [r7, #2]
 800f996:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	887a      	ldrh	r2, [r7, #2]
 800f99c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9b4:	2b40      	cmp	r3, #64	@ 0x40
 800f9b6:	d007      	beq.n	800f9c8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	681a      	ldr	r2, [r3, #0]
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f9c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	68db      	ldr	r3, [r3, #12]
 800f9cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f9d0:	d17e      	bne.n	800fad0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d002      	beq.n	800f9e0 <HAL_SPI_TransmitReceive+0xf6>
 800f9da:	8afb      	ldrh	r3, [r7, #22]
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	d16c      	bne.n	800faba <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9e4:	881a      	ldrh	r2, [r3, #0]
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9f0:	1c9a      	adds	r2, r3, #2
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	3b01      	subs	r3, #1
 800f9fe:	b29a      	uxth	r2, r3
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fa04:	e059      	b.n	800faba <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	689b      	ldr	r3, [r3, #8]
 800fa0c:	f003 0302 	and.w	r3, r3, #2
 800fa10:	2b02      	cmp	r3, #2
 800fa12:	d11b      	bne.n	800fa4c <HAL_SPI_TransmitReceive+0x162>
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d016      	beq.n	800fa4c <HAL_SPI_TransmitReceive+0x162>
 800fa1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d113      	bne.n	800fa4c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa28:	881a      	ldrh	r2, [r3, #0]
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa34:	1c9a      	adds	r2, r3, #2
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fa3e:	b29b      	uxth	r3, r3
 800fa40:	3b01      	subs	r3, #1
 800fa42:	b29a      	uxth	r2, r3
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	689b      	ldr	r3, [r3, #8]
 800fa52:	f003 0301 	and.w	r3, r3, #1
 800fa56:	2b01      	cmp	r3, #1
 800fa58:	d119      	bne.n	800fa8e <HAL_SPI_TransmitReceive+0x1a4>
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fa5e:	b29b      	uxth	r3, r3
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d014      	beq.n	800fa8e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	68da      	ldr	r2, [r3, #12]
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa6e:	b292      	uxth	r2, r2
 800fa70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa76:	1c9a      	adds	r2, r3, #2
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fa80:	b29b      	uxth	r3, r3
 800fa82:	3b01      	subs	r3, #1
 800fa84:	b29a      	uxth	r2, r3
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800fa8e:	f7fc fc4b 	bl	800c328 <HAL_GetTick>
 800fa92:	4602      	mov	r2, r0
 800fa94:	6a3b      	ldr	r3, [r7, #32]
 800fa96:	1ad3      	subs	r3, r2, r3
 800fa98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d80d      	bhi.n	800faba <HAL_SPI_TransmitReceive+0x1d0>
 800fa9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faa4:	d009      	beq.n	800faba <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2201      	movs	r2, #1
 800faaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	2200      	movs	r2, #0
 800fab2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800fab6:	2303      	movs	r3, #3
 800fab8:	e0bc      	b.n	800fc34 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fabe:	b29b      	uxth	r3, r3
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d1a0      	bne.n	800fa06 <HAL_SPI_TransmitReceive+0x11c>
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fac8:	b29b      	uxth	r3, r3
 800faca:	2b00      	cmp	r3, #0
 800facc:	d19b      	bne.n	800fa06 <HAL_SPI_TransmitReceive+0x11c>
 800face:	e082      	b.n	800fbd6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	685b      	ldr	r3, [r3, #4]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d002      	beq.n	800fade <HAL_SPI_TransmitReceive+0x1f4>
 800fad8:	8afb      	ldrh	r3, [r7, #22]
 800fada:	2b01      	cmp	r3, #1
 800fadc:	d171      	bne.n	800fbc2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	330c      	adds	r3, #12
 800fae8:	7812      	ldrb	r2, [r2, #0]
 800faea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800faf0:	1c5a      	adds	r2, r3, #1
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	3b01      	subs	r3, #1
 800fafe:	b29a      	uxth	r2, r3
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fb04:	e05d      	b.n	800fbc2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	689b      	ldr	r3, [r3, #8]
 800fb0c:	f003 0302 	and.w	r3, r3, #2
 800fb10:	2b02      	cmp	r3, #2
 800fb12:	d11c      	bne.n	800fb4e <HAL_SPI_TransmitReceive+0x264>
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fb18:	b29b      	uxth	r3, r3
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d017      	beq.n	800fb4e <HAL_SPI_TransmitReceive+0x264>
 800fb1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d114      	bne.n	800fb4e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	330c      	adds	r3, #12
 800fb2e:	7812      	ldrb	r2, [r2, #0]
 800fb30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb36:	1c5a      	adds	r2, r3, #1
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fb40:	b29b      	uxth	r3, r3
 800fb42:	3b01      	subs	r3, #1
 800fb44:	b29a      	uxth	r2, r3
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	689b      	ldr	r3, [r3, #8]
 800fb54:	f003 0301 	and.w	r3, r3, #1
 800fb58:	2b01      	cmp	r3, #1
 800fb5a:	d119      	bne.n	800fb90 <HAL_SPI_TransmitReceive+0x2a6>
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fb60:	b29b      	uxth	r3, r3
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d014      	beq.n	800fb90 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	68da      	ldr	r2, [r3, #12]
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb70:	b2d2      	uxtb	r2, r2
 800fb72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb78:	1c5a      	adds	r2, r3, #1
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fb82:	b29b      	uxth	r3, r3
 800fb84:	3b01      	subs	r3, #1
 800fb86:	b29a      	uxth	r2, r3
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800fb90:	f7fc fbca 	bl	800c328 <HAL_GetTick>
 800fb94:	4602      	mov	r2, r0
 800fb96:	6a3b      	ldr	r3, [r7, #32]
 800fb98:	1ad3      	subs	r3, r2, r3
 800fb9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d803      	bhi.n	800fba8 <HAL_SPI_TransmitReceive+0x2be>
 800fba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fba6:	d102      	bne.n	800fbae <HAL_SPI_TransmitReceive+0x2c4>
 800fba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d109      	bne.n	800fbc2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	2201      	movs	r2, #1
 800fbb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	2200      	movs	r2, #0
 800fbba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800fbbe:	2303      	movs	r3, #3
 800fbc0:	e038      	b.n	800fc34 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fbc6:	b29b      	uxth	r3, r3
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d19c      	bne.n	800fb06 <HAL_SPI_TransmitReceive+0x21c>
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fbd0:	b29b      	uxth	r3, r3
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d197      	bne.n	800fb06 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800fbd6:	6a3a      	ldr	r2, [r7, #32]
 800fbd8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fbda:	68f8      	ldr	r0, [r7, #12]
 800fbdc:	f000 fc36 	bl	801044c <SPI_EndRxTxTransaction>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d008      	beq.n	800fbf8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	2220      	movs	r2, #32
 800fbea:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	e01d      	b.n	800fc34 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	689b      	ldr	r3, [r3, #8]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d10a      	bne.n	800fc16 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fc00:	2300      	movs	r3, #0
 800fc02:	613b      	str	r3, [r7, #16]
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	68db      	ldr	r3, [r3, #12]
 800fc0a:	613b      	str	r3, [r7, #16]
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	689b      	ldr	r3, [r3, #8]
 800fc12:	613b      	str	r3, [r7, #16]
 800fc14:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	2201      	movs	r2, #1
 800fc1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	2200      	movs	r2, #0
 800fc22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d001      	beq.n	800fc32 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800fc2e:	2301      	movs	r3, #1
 800fc30:	e000      	b.n	800fc34 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800fc32:	2300      	movs	r3, #0
  }
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3728      	adds	r7, #40	@ 0x28
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}

0800fc3c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b084      	sub	sp, #16
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	60b9      	str	r1, [r7, #8]
 800fc46:	4613      	mov	r3, r2
 800fc48:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fc50:	b2db      	uxtb	r3, r3
 800fc52:	2b01      	cmp	r3, #1
 800fc54:	d001      	beq.n	800fc5a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800fc56:	2302      	movs	r3, #2
 800fc58:	e097      	b.n	800fd8a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d002      	beq.n	800fc66 <HAL_SPI_Transmit_DMA+0x2a>
 800fc60:	88fb      	ldrh	r3, [r7, #6]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d101      	bne.n	800fc6a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800fc66:	2301      	movs	r3, #1
 800fc68:	e08f      	b.n	800fd8a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d101      	bne.n	800fc78 <HAL_SPI_Transmit_DMA+0x3c>
 800fc74:	2302      	movs	r3, #2
 800fc76:	e088      	b.n	800fd8a <HAL_SPI_Transmit_DMA+0x14e>
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	2203      	movs	r2, #3
 800fc84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	68ba      	ldr	r2, [r7, #8]
 800fc92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	88fa      	ldrh	r2, [r7, #6]
 800fc98:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	88fa      	ldrh	r2, [r7, #6]
 800fc9e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	2200      	movs	r2, #0
 800fca4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	689b      	ldr	r3, [r3, #8]
 800fcc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fcc6:	d10f      	bne.n	800fce8 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	681a      	ldr	r2, [r3, #0]
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fcd6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	681a      	ldr	r2, [r3, #0]
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fce6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fcec:	4a29      	ldr	r2, [pc, #164]	@ (800fd94 <HAL_SPI_Transmit_DMA+0x158>)
 800fcee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fcf4:	4a28      	ldr	r2, [pc, #160]	@ (800fd98 <HAL_SPI_Transmit_DMA+0x15c>)
 800fcf6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fcfc:	4a27      	ldr	r2, [pc, #156]	@ (800fd9c <HAL_SPI_Transmit_DMA+0x160>)
 800fcfe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fd04:	2200      	movs	r2, #0
 800fd06:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd10:	4619      	mov	r1, r3
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	330c      	adds	r3, #12
 800fd18:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800fd1e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800fd20:	f7fc fcf2 	bl	800c708 <HAL_DMA_Start_IT>
 800fd24:	4603      	mov	r3, r0
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d00b      	beq.n	800fd42 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd2e:	f043 0210 	orr.w	r2, r3, #16
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	2200      	movs	r2, #0
 800fd3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800fd3e:	2301      	movs	r3, #1
 800fd40:	e023      	b.n	800fd8a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd4c:	2b40      	cmp	r3, #64	@ 0x40
 800fd4e:	d007      	beq.n	800fd60 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	681a      	ldr	r2, [r3, #0]
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fd5e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2200      	movs	r2, #0
 800fd64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	685a      	ldr	r2, [r3, #4]
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	f042 0220 	orr.w	r2, r2, #32
 800fd76:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	685a      	ldr	r2, [r3, #4]
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	f042 0202 	orr.w	r2, r2, #2
 800fd86:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fd88:	2300      	movs	r3, #0
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3710      	adds	r7, #16
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}
 800fd92:	bf00      	nop
 800fd94:	080101dd 	.word	0x080101dd
 800fd98:	0800fffd 	.word	0x0800fffd
 800fd9c:	08010231 	.word	0x08010231

0800fda0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b086      	sub	sp, #24
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	60f8      	str	r0, [r7, #12]
 800fda8:	60b9      	str	r1, [r7, #8]
 800fdaa:	607a      	str	r2, [r7, #4]
 800fdac:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fdb4:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	685b      	ldr	r3, [r3, #4]
 800fdba:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800fdbc:	7dfb      	ldrb	r3, [r7, #23]
 800fdbe:	2b01      	cmp	r3, #1
 800fdc0:	d00c      	beq.n	800fddc <HAL_SPI_TransmitReceive_DMA+0x3c>
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800fdc8:	d106      	bne.n	800fdd8 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	689b      	ldr	r3, [r3, #8]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d102      	bne.n	800fdd8 <HAL_SPI_TransmitReceive_DMA+0x38>
 800fdd2:	7dfb      	ldrb	r3, [r7, #23]
 800fdd4:	2b04      	cmp	r3, #4
 800fdd6:	d001      	beq.n	800fddc <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800fdd8:	2302      	movs	r3, #2
 800fdda:	e0cf      	b.n	800ff7c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d005      	beq.n	800fdee <HAL_SPI_TransmitReceive_DMA+0x4e>
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d002      	beq.n	800fdee <HAL_SPI_TransmitReceive_DMA+0x4e>
 800fde8:	887b      	ldrh	r3, [r7, #2]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d101      	bne.n	800fdf2 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800fdee:	2301      	movs	r3, #1
 800fdf0:	e0c4      	b.n	800ff7c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	d101      	bne.n	800fe00 <HAL_SPI_TransmitReceive_DMA+0x60>
 800fdfc:	2302      	movs	r3, #2
 800fdfe:	e0bd      	b.n	800ff7c <HAL_SPI_TransmitReceive_DMA+0x1dc>
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	2201      	movs	r2, #1
 800fe04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fe0e:	b2db      	uxtb	r3, r3
 800fe10:	2b04      	cmp	r3, #4
 800fe12:	d003      	beq.n	800fe1c <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2205      	movs	r2, #5
 800fe18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2200      	movs	r2, #0
 800fe20:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	68ba      	ldr	r2, [r7, #8]
 800fe26:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	887a      	ldrh	r2, [r7, #2]
 800fe2c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	887a      	ldrh	r2, [r7, #2]
 800fe32:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	687a      	ldr	r2, [r7, #4]
 800fe38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	887a      	ldrh	r2, [r7, #2]
 800fe3e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	887a      	ldrh	r2, [r7, #2]
 800fe44:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800fe58:	b2db      	uxtb	r3, r3
 800fe5a:	2b04      	cmp	r3, #4
 800fe5c:	d108      	bne.n	800fe70 <HAL_SPI_TransmitReceive_DMA+0xd0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe62:	4a48      	ldr	r2, [pc, #288]	@ (800ff84 <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 800fe64:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe6a:	4a47      	ldr	r2, [pc, #284]	@ (800ff88 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 800fe6c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800fe6e:	e007      	b.n	800fe80 <HAL_SPI_TransmitReceive_DMA+0xe0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe74:	4a45      	ldr	r2, [pc, #276]	@ (800ff8c <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 800fe76:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe7c:	4a44      	ldr	r2, [pc, #272]	@ (800ff90 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800fe7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe84:	4a43      	ldr	r2, [pc, #268]	@ (800ff94 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800fe86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	330c      	adds	r3, #12
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fea0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800fea6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800fea8:	f7fc fc2e 	bl	800c708 <HAL_DMA_Start_IT>
 800feac:	4603      	mov	r3, r0
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d00b      	beq.n	800feca <HAL_SPI_TransmitReceive_DMA+0x12a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800feb6:	f043 0210 	orr.w	r2, r3, #16
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	2200      	movs	r2, #0
 800fec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800fec6:	2301      	movs	r3, #1
 800fec8:	e058      	b.n	800ff7c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	685a      	ldr	r2, [r3, #4]
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	f042 0201 	orr.w	r2, r2, #1
 800fed8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fede:	2200      	movs	r2, #0
 800fee0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fee6:	2200      	movs	r2, #0
 800fee8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800feee:	2200      	movs	r2, #0
 800fef0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fef6:	2200      	movs	r2, #0
 800fef8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff02:	4619      	mov	r1, r3
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	330c      	adds	r3, #12
 800ff0a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ff10:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ff12:	f7fc fbf9 	bl	800c708 <HAL_DMA_Start_IT>
 800ff16:	4603      	mov	r3, r0
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d00b      	beq.n	800ff34 <HAL_SPI_TransmitReceive_DMA+0x194>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff20:	f043 0210 	orr.w	r2, r3, #16
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800ff30:	2301      	movs	r3, #1
 800ff32:	e023      	b.n	800ff7c <HAL_SPI_TransmitReceive_DMA+0x1dc>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ff3e:	2b40      	cmp	r3, #64	@ 0x40
 800ff40:	d007      	beq.n	800ff52 <HAL_SPI_TransmitReceive_DMA+0x1b2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	681a      	ldr	r2, [r3, #0]
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ff50:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	2200      	movs	r2, #0
 800ff56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	685a      	ldr	r2, [r3, #4]
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	f042 0220 	orr.w	r2, r2, #32
 800ff68:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	685a      	ldr	r2, [r3, #4]
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f042 0202 	orr.w	r2, r2, #2
 800ff78:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ff7a:	2300      	movs	r3, #0
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3718      	adds	r7, #24
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}
 800ff84:	080101f9 	.word	0x080101f9
 800ff88:	080100a5 	.word	0x080100a5
 800ff8c:	08010215 	.word	0x08010215
 800ff90:	0801014d 	.word	0x0801014d
 800ff94:	08010231 	.word	0x08010231

0800ff98 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ff98:	b480      	push	{r7}
 800ff9a:	b083      	sub	sp, #12
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ffa0:	bf00      	nop
 800ffa2:	370c      	adds	r7, #12
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr

0800ffac <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ffac:	b480      	push	{r7}
 800ffae:	b083      	sub	sp, #12
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ffb4:	bf00      	nop
 800ffb6:	370c      	adds	r7, #12
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbe:	4770      	bx	lr

0800ffc0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b083      	sub	sp, #12
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800ffc8:	bf00      	nop
 800ffca:	370c      	adds	r7, #12
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd2:	4770      	bx	lr

0800ffd4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	b083      	sub	sp, #12
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800ffdc:	bf00      	nop
 800ffde:	370c      	adds	r7, #12
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe6:	4770      	bx	lr

0800ffe8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ffe8:	b480      	push	{r7}
 800ffea:	b083      	sub	sp, #12
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800fff0:	bf00      	nop
 800fff2:	370c      	adds	r7, #12
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr

0800fffc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b086      	sub	sp, #24
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010008:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801000a:	f7fc f98d 	bl	800c328 <HAL_GetTick>
 801000e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801001a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801001e:	d03b      	beq.n	8010098 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	685a      	ldr	r2, [r3, #4]
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	f022 0220 	bic.w	r2, r2, #32
 801002e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	685a      	ldr	r2, [r3, #4]
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	f022 0202 	bic.w	r2, r2, #2
 801003e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8010040:	693a      	ldr	r2, [r7, #16]
 8010042:	2164      	movs	r1, #100	@ 0x64
 8010044:	6978      	ldr	r0, [r7, #20]
 8010046:	f000 fa01 	bl	801044c <SPI_EndRxTxTransaction>
 801004a:	4603      	mov	r3, r0
 801004c:	2b00      	cmp	r3, #0
 801004e:	d005      	beq.n	801005c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010054:	f043 0220 	orr.w	r2, r3, #32
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	689b      	ldr	r3, [r3, #8]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d10a      	bne.n	801007a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010064:	2300      	movs	r3, #0
 8010066:	60fb      	str	r3, [r7, #12]
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	68db      	ldr	r3, [r3, #12]
 801006e:	60fb      	str	r3, [r7, #12]
 8010070:	697b      	ldr	r3, [r7, #20]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	689b      	ldr	r3, [r3, #8]
 8010076:	60fb      	str	r3, [r7, #12]
 8010078:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	2200      	movs	r2, #0
 801007e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	2201      	movs	r2, #1
 8010084:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801008c:	2b00      	cmp	r3, #0
 801008e:	d003      	beq.n	8010098 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8010090:	6978      	ldr	r0, [r7, #20]
 8010092:	f7ff ffa9 	bl	800ffe8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8010096:	e002      	b.n	801009e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8010098:	6978      	ldr	r0, [r7, #20]
 801009a:	f7f1 fc73 	bl	8001984 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801009e:	3718      	adds	r7, #24
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}

080100a4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b084      	sub	sp, #16
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100b0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80100b2:	f7fc f939 	bl	800c328 <HAL_GetTick>
 80100b6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80100c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80100c6:	d03b      	beq.n	8010140 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	685a      	ldr	r2, [r3, #4]
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f022 0220 	bic.w	r2, r2, #32
 80100d6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	689b      	ldr	r3, [r3, #8]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d10d      	bne.n	80100fc <SPI_DMAReceiveCplt+0x58>
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80100e8:	d108      	bne.n	80100fc <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	685a      	ldr	r2, [r3, #4]
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	f022 0203 	bic.w	r2, r2, #3
 80100f8:	605a      	str	r2, [r3, #4]
 80100fa:	e007      	b.n	801010c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	685a      	ldr	r2, [r3, #4]
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	f022 0201 	bic.w	r2, r2, #1
 801010a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 801010c:	68ba      	ldr	r2, [r7, #8]
 801010e:	2164      	movs	r1, #100	@ 0x64
 8010110:	68f8      	ldr	r0, [r7, #12]
 8010112:	f000 f935 	bl	8010380 <SPI_EndRxTransaction>
 8010116:	4603      	mov	r3, r0
 8010118:	2b00      	cmp	r3, #0
 801011a:	d002      	beq.n	8010122 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	2220      	movs	r2, #32
 8010120:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	2200      	movs	r2, #0
 8010126:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	2201      	movs	r2, #1
 801012c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010134:	2b00      	cmp	r3, #0
 8010136:	d003      	beq.n	8010140 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8010138:	68f8      	ldr	r0, [r7, #12]
 801013a:	f7ff ff55 	bl	800ffe8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801013e:	e002      	b.n	8010146 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8010140:	68f8      	ldr	r0, [r7, #12]
 8010142:	f7ff ff29 	bl	800ff98 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010146:	3710      	adds	r7, #16
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b084      	sub	sp, #16
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010158:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801015a:	f7fc f8e5 	bl	800c328 <HAL_GetTick>
 801015e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801016a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801016e:	d02f      	beq.n	80101d0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	685a      	ldr	r2, [r3, #4]
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f022 0220 	bic.w	r2, r2, #32
 801017e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8010180:	68ba      	ldr	r2, [r7, #8]
 8010182:	2164      	movs	r1, #100	@ 0x64
 8010184:	68f8      	ldr	r0, [r7, #12]
 8010186:	f000 f961 	bl	801044c <SPI_EndRxTxTransaction>
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d005      	beq.n	801019c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010194:	f043 0220 	orr.w	r2, r3, #32
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	685a      	ldr	r2, [r3, #4]
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	f022 0203 	bic.w	r2, r2, #3
 80101aa:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2200      	movs	r2, #0
 80101b0:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2200      	movs	r2, #0
 80101b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	2201      	movs	r2, #1
 80101bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d003      	beq.n	80101d0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80101c8:	68f8      	ldr	r0, [r7, #12]
 80101ca:	f7ff ff0d 	bl	800ffe8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80101ce:	e002      	b.n	80101d6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80101d0:	68f8      	ldr	r0, [r7, #12]
 80101d2:	f7f1 fbed 	bl	80019b0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80101d6:	3710      	adds	r7, #16
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}

080101dc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b084      	sub	sp, #16
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101e8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80101ea:	68f8      	ldr	r0, [r7, #12]
 80101ec:	f7ff fede 	bl	800ffac <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80101f0:	bf00      	nop
 80101f2:	3710      	adds	r7, #16
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}

080101f8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b084      	sub	sp, #16
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010204:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8010206:	68f8      	ldr	r0, [r7, #12]
 8010208:	f7ff feda 	bl	800ffc0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801020c:	bf00      	nop
 801020e:	3710      	adds	r7, #16
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}

08010214 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b084      	sub	sp, #16
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010220:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8010222:	68f8      	ldr	r0, [r7, #12]
 8010224:	f7ff fed6 	bl	800ffd4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010228:	bf00      	nop
 801022a:	3710      	adds	r7, #16
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}

08010230 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b084      	sub	sp, #16
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801023c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	685a      	ldr	r2, [r3, #4]
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	f022 0203 	bic.w	r2, r2, #3
 801024c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010252:	f043 0210 	orr.w	r2, r3, #16
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2201      	movs	r2, #1
 801025e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8010262:	68f8      	ldr	r0, [r7, #12]
 8010264:	f7ff fec0 	bl	800ffe8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8010268:	bf00      	nop
 801026a:	3710      	adds	r7, #16
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}

08010270 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b088      	sub	sp, #32
 8010274:	af00      	add	r7, sp, #0
 8010276:	60f8      	str	r0, [r7, #12]
 8010278:	60b9      	str	r1, [r7, #8]
 801027a:	603b      	str	r3, [r7, #0]
 801027c:	4613      	mov	r3, r2
 801027e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010280:	f7fc f852 	bl	800c328 <HAL_GetTick>
 8010284:	4602      	mov	r2, r0
 8010286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010288:	1a9b      	subs	r3, r3, r2
 801028a:	683a      	ldr	r2, [r7, #0]
 801028c:	4413      	add	r3, r2
 801028e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010290:	f7fc f84a 	bl	800c328 <HAL_GetTick>
 8010294:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8010296:	4b39      	ldr	r3, [pc, #228]	@ (801037c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	015b      	lsls	r3, r3, #5
 801029c:	0d1b      	lsrs	r3, r3, #20
 801029e:	69fa      	ldr	r2, [r7, #28]
 80102a0:	fb02 f303 	mul.w	r3, r2, r3
 80102a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80102a6:	e055      	b.n	8010354 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ae:	d051      	beq.n	8010354 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80102b0:	f7fc f83a 	bl	800c328 <HAL_GetTick>
 80102b4:	4602      	mov	r2, r0
 80102b6:	69bb      	ldr	r3, [r7, #24]
 80102b8:	1ad3      	subs	r3, r2, r3
 80102ba:	69fa      	ldr	r2, [r7, #28]
 80102bc:	429a      	cmp	r2, r3
 80102be:	d902      	bls.n	80102c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80102c0:	69fb      	ldr	r3, [r7, #28]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d13d      	bne.n	8010342 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	685a      	ldr	r2, [r3, #4]
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80102d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	685b      	ldr	r3, [r3, #4]
 80102da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80102de:	d111      	bne.n	8010304 <SPI_WaitFlagStateUntilTimeout+0x94>
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80102e8:	d004      	beq.n	80102f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	689b      	ldr	r3, [r3, #8]
 80102ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80102f2:	d107      	bne.n	8010304 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	681a      	ldr	r2, [r3, #0]
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010302:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010308:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801030c:	d10f      	bne.n	801032e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 801031c:	601a      	str	r2, [r3, #0]
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801032c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2201      	movs	r2, #1
 8010332:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2200      	movs	r2, #0
 801033a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 801033e:	2303      	movs	r3, #3
 8010340:	e018      	b.n	8010374 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010342:	697b      	ldr	r3, [r7, #20]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d102      	bne.n	801034e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8010348:	2300      	movs	r3, #0
 801034a:	61fb      	str	r3, [r7, #28]
 801034c:	e002      	b.n	8010354 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	3b01      	subs	r3, #1
 8010352:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	689a      	ldr	r2, [r3, #8]
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	4013      	ands	r3, r2
 801035e:	68ba      	ldr	r2, [r7, #8]
 8010360:	429a      	cmp	r2, r3
 8010362:	bf0c      	ite	eq
 8010364:	2301      	moveq	r3, #1
 8010366:	2300      	movne	r3, #0
 8010368:	b2db      	uxtb	r3, r3
 801036a:	461a      	mov	r2, r3
 801036c:	79fb      	ldrb	r3, [r7, #7]
 801036e:	429a      	cmp	r2, r3
 8010370:	d19a      	bne.n	80102a8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8010372:	2300      	movs	r3, #0
}
 8010374:	4618      	mov	r0, r3
 8010376:	3720      	adds	r7, #32
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}
 801037c:	20000000 	.word	0x20000000

08010380 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b086      	sub	sp, #24
 8010384:	af02      	add	r7, sp, #8
 8010386:	60f8      	str	r0, [r7, #12]
 8010388:	60b9      	str	r1, [r7, #8]
 801038a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8010394:	d111      	bne.n	80103ba <SPI_EndRxTransaction+0x3a>
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	689b      	ldr	r3, [r3, #8]
 801039a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801039e:	d004      	beq.n	80103aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	689b      	ldr	r3, [r3, #8]
 80103a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80103a8:	d107      	bne.n	80103ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	681a      	ldr	r2, [r3, #0]
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80103b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	685b      	ldr	r3, [r3, #4]
 80103be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80103c2:	d12a      	bne.n	801041a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	689b      	ldr	r3, [r3, #8]
 80103c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80103cc:	d012      	beq.n	80103f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	9300      	str	r3, [sp, #0]
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	2200      	movs	r2, #0
 80103d6:	2180      	movs	r1, #128	@ 0x80
 80103d8:	68f8      	ldr	r0, [r7, #12]
 80103da:	f7ff ff49 	bl	8010270 <SPI_WaitFlagStateUntilTimeout>
 80103de:	4603      	mov	r3, r0
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d02d      	beq.n	8010440 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80103e8:	f043 0220 	orr.w	r2, r3, #32
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80103f0:	2303      	movs	r3, #3
 80103f2:	e026      	b.n	8010442 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	9300      	str	r3, [sp, #0]
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	2200      	movs	r2, #0
 80103fc:	2101      	movs	r1, #1
 80103fe:	68f8      	ldr	r0, [r7, #12]
 8010400:	f7ff ff36 	bl	8010270 <SPI_WaitFlagStateUntilTimeout>
 8010404:	4603      	mov	r3, r0
 8010406:	2b00      	cmp	r3, #0
 8010408:	d01a      	beq.n	8010440 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801040e:	f043 0220 	orr.w	r2, r3, #32
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8010416:	2303      	movs	r3, #3
 8010418:	e013      	b.n	8010442 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	9300      	str	r3, [sp, #0]
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	2200      	movs	r2, #0
 8010422:	2101      	movs	r1, #1
 8010424:	68f8      	ldr	r0, [r7, #12]
 8010426:	f7ff ff23 	bl	8010270 <SPI_WaitFlagStateUntilTimeout>
 801042a:	4603      	mov	r3, r0
 801042c:	2b00      	cmp	r3, #0
 801042e:	d007      	beq.n	8010440 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010434:	f043 0220 	orr.w	r2, r3, #32
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 801043c:	2303      	movs	r3, #3
 801043e:	e000      	b.n	8010442 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8010440:	2300      	movs	r3, #0
}
 8010442:	4618      	mov	r0, r3
 8010444:	3710      	adds	r7, #16
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}
	...

0801044c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b088      	sub	sp, #32
 8010450:	af02      	add	r7, sp, #8
 8010452:	60f8      	str	r0, [r7, #12]
 8010454:	60b9      	str	r1, [r7, #8]
 8010456:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	9300      	str	r3, [sp, #0]
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	2201      	movs	r2, #1
 8010460:	2102      	movs	r1, #2
 8010462:	68f8      	ldr	r0, [r7, #12]
 8010464:	f7ff ff04 	bl	8010270 <SPI_WaitFlagStateUntilTimeout>
 8010468:	4603      	mov	r3, r0
 801046a:	2b00      	cmp	r3, #0
 801046c:	d007      	beq.n	801047e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010472:	f043 0220 	orr.w	r2, r3, #32
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 801047a:	2303      	movs	r3, #3
 801047c:	e032      	b.n	80104e4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801047e:	4b1b      	ldr	r3, [pc, #108]	@ (80104ec <SPI_EndRxTxTransaction+0xa0>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	4a1b      	ldr	r2, [pc, #108]	@ (80104f0 <SPI_EndRxTxTransaction+0xa4>)
 8010484:	fba2 2303 	umull	r2, r3, r2, r3
 8010488:	0d5b      	lsrs	r3, r3, #21
 801048a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801048e:	fb02 f303 	mul.w	r3, r2, r3
 8010492:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	685b      	ldr	r3, [r3, #4]
 8010498:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801049c:	d112      	bne.n	80104c4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	9300      	str	r3, [sp, #0]
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	2200      	movs	r2, #0
 80104a6:	2180      	movs	r1, #128	@ 0x80
 80104a8:	68f8      	ldr	r0, [r7, #12]
 80104aa:	f7ff fee1 	bl	8010270 <SPI_WaitFlagStateUntilTimeout>
 80104ae:	4603      	mov	r3, r0
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d016      	beq.n	80104e2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80104b8:	f043 0220 	orr.w	r2, r3, #32
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80104c0:	2303      	movs	r3, #3
 80104c2:	e00f      	b.n	80104e4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80104c4:	697b      	ldr	r3, [r7, #20]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d00a      	beq.n	80104e0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	3b01      	subs	r3, #1
 80104ce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	689b      	ldr	r3, [r3, #8]
 80104d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80104da:	2b80      	cmp	r3, #128	@ 0x80
 80104dc:	d0f2      	beq.n	80104c4 <SPI_EndRxTxTransaction+0x78>
 80104de:	e000      	b.n	80104e2 <SPI_EndRxTxTransaction+0x96>
        break;
 80104e0:	bf00      	nop
  }

  return HAL_OK;
 80104e2:	2300      	movs	r3, #0
}
 80104e4:	4618      	mov	r0, r3
 80104e6:	3718      	adds	r7, #24
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}
 80104ec:	20000000 	.word	0x20000000
 80104f0:	165e9f81 	.word	0x165e9f81

080104f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b082      	sub	sp, #8
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d101      	bne.n	8010506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010502:	2301      	movs	r3, #1
 8010504:	e041      	b.n	801058a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801050c:	b2db      	uxtb	r3, r3
 801050e:	2b00      	cmp	r3, #0
 8010510:	d106      	bne.n	8010520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	2200      	movs	r2, #0
 8010516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f7f1 feac 	bl	8002278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2202      	movs	r2, #2
 8010524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	3304      	adds	r3, #4
 8010530:	4619      	mov	r1, r3
 8010532:	4610      	mov	r0, r2
 8010534:	f000 fa70 	bl	8010a18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2201      	movs	r2, #1
 801053c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2201      	movs	r2, #1
 8010544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2201      	movs	r2, #1
 801054c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2201      	movs	r2, #1
 8010554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2201      	movs	r2, #1
 801055c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2201      	movs	r2, #1
 8010564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2201      	movs	r2, #1
 801056c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2201      	movs	r2, #1
 8010574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2201      	movs	r2, #1
 801057c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2201      	movs	r2, #1
 8010584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8010588:	2300      	movs	r3, #0
}
 801058a:	4618      	mov	r0, r3
 801058c:	3708      	adds	r7, #8
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
	...

08010594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010594:	b480      	push	{r7}
 8010596:	b085      	sub	sp, #20
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80105a2:	b2db      	uxtb	r3, r3
 80105a4:	2b01      	cmp	r3, #1
 80105a6:	d001      	beq.n	80105ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80105a8:	2301      	movs	r3, #1
 80105aa:	e044      	b.n	8010636 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2202      	movs	r2, #2
 80105b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	68da      	ldr	r2, [r3, #12]
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	f042 0201 	orr.w	r2, r2, #1
 80105c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	4a1e      	ldr	r2, [pc, #120]	@ (8010644 <HAL_TIM_Base_Start_IT+0xb0>)
 80105ca:	4293      	cmp	r3, r2
 80105cc:	d018      	beq.n	8010600 <HAL_TIM_Base_Start_IT+0x6c>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80105d6:	d013      	beq.n	8010600 <HAL_TIM_Base_Start_IT+0x6c>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	4a1a      	ldr	r2, [pc, #104]	@ (8010648 <HAL_TIM_Base_Start_IT+0xb4>)
 80105de:	4293      	cmp	r3, r2
 80105e0:	d00e      	beq.n	8010600 <HAL_TIM_Base_Start_IT+0x6c>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	4a19      	ldr	r2, [pc, #100]	@ (801064c <HAL_TIM_Base_Start_IT+0xb8>)
 80105e8:	4293      	cmp	r3, r2
 80105ea:	d009      	beq.n	8010600 <HAL_TIM_Base_Start_IT+0x6c>
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	4a17      	ldr	r2, [pc, #92]	@ (8010650 <HAL_TIM_Base_Start_IT+0xbc>)
 80105f2:	4293      	cmp	r3, r2
 80105f4:	d004      	beq.n	8010600 <HAL_TIM_Base_Start_IT+0x6c>
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	4a16      	ldr	r2, [pc, #88]	@ (8010654 <HAL_TIM_Base_Start_IT+0xc0>)
 80105fc:	4293      	cmp	r3, r2
 80105fe:	d111      	bne.n	8010624 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	689b      	ldr	r3, [r3, #8]
 8010606:	f003 0307 	and.w	r3, r3, #7
 801060a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	2b06      	cmp	r3, #6
 8010610:	d010      	beq.n	8010634 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	681a      	ldr	r2, [r3, #0]
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	f042 0201 	orr.w	r2, r2, #1
 8010620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010622:	e007      	b.n	8010634 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	681a      	ldr	r2, [r3, #0]
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	f042 0201 	orr.w	r2, r2, #1
 8010632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010634:	2300      	movs	r3, #0
}
 8010636:	4618      	mov	r0, r3
 8010638:	3714      	adds	r7, #20
 801063a:	46bd      	mov	sp, r7
 801063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010640:	4770      	bx	lr
 8010642:	bf00      	nop
 8010644:	40010000 	.word	0x40010000
 8010648:	40000400 	.word	0x40000400
 801064c:	40000800 	.word	0x40000800
 8010650:	40000c00 	.word	0x40000c00
 8010654:	40014000 	.word	0x40014000

08010658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b084      	sub	sp, #16
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	68db      	ldr	r3, [r3, #12]
 8010666:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	691b      	ldr	r3, [r3, #16]
 801066e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	f003 0302 	and.w	r3, r3, #2
 8010676:	2b00      	cmp	r3, #0
 8010678:	d020      	beq.n	80106bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	f003 0302 	and.w	r3, r3, #2
 8010680:	2b00      	cmp	r3, #0
 8010682:	d01b      	beq.n	80106bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	f06f 0202 	mvn.w	r2, #2
 801068c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	2201      	movs	r2, #1
 8010692:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	699b      	ldr	r3, [r3, #24]
 801069a:	f003 0303 	and.w	r3, r3, #3
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d003      	beq.n	80106aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f000 f999 	bl	80109da <HAL_TIM_IC_CaptureCallback>
 80106a8:	e005      	b.n	80106b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f000 f98b 	bl	80109c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f000 f99c 	bl	80109ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2200      	movs	r2, #0
 80106ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	f003 0304 	and.w	r3, r3, #4
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d020      	beq.n	8010708 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	f003 0304 	and.w	r3, r3, #4
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d01b      	beq.n	8010708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f06f 0204 	mvn.w	r2, #4
 80106d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	2202      	movs	r2, #2
 80106de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	699b      	ldr	r3, [r3, #24]
 80106e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d003      	beq.n	80106f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f000 f973 	bl	80109da <HAL_TIM_IC_CaptureCallback>
 80106f4:	e005      	b.n	8010702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f000 f965 	bl	80109c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f000 f976 	bl	80109ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2200      	movs	r2, #0
 8010706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	f003 0308 	and.w	r3, r3, #8
 801070e:	2b00      	cmp	r3, #0
 8010710:	d020      	beq.n	8010754 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	f003 0308 	and.w	r3, r3, #8
 8010718:	2b00      	cmp	r3, #0
 801071a:	d01b      	beq.n	8010754 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	f06f 0208 	mvn.w	r2, #8
 8010724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2204      	movs	r2, #4
 801072a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	69db      	ldr	r3, [r3, #28]
 8010732:	f003 0303 	and.w	r3, r3, #3
 8010736:	2b00      	cmp	r3, #0
 8010738:	d003      	beq.n	8010742 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f000 f94d 	bl	80109da <HAL_TIM_IC_CaptureCallback>
 8010740:	e005      	b.n	801074e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f000 f93f 	bl	80109c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f000 f950 	bl	80109ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2200      	movs	r2, #0
 8010752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8010754:	68bb      	ldr	r3, [r7, #8]
 8010756:	f003 0310 	and.w	r3, r3, #16
 801075a:	2b00      	cmp	r3, #0
 801075c:	d020      	beq.n	80107a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	f003 0310 	and.w	r3, r3, #16
 8010764:	2b00      	cmp	r3, #0
 8010766:	d01b      	beq.n	80107a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	f06f 0210 	mvn.w	r2, #16
 8010770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2208      	movs	r2, #8
 8010776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	69db      	ldr	r3, [r3, #28]
 801077e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010782:	2b00      	cmp	r3, #0
 8010784:	d003      	beq.n	801078e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010786:	6878      	ldr	r0, [r7, #4]
 8010788:	f000 f927 	bl	80109da <HAL_TIM_IC_CaptureCallback>
 801078c:	e005      	b.n	801079a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f000 f919 	bl	80109c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f000 f92a 	bl	80109ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	2200      	movs	r2, #0
 801079e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	f003 0301 	and.w	r3, r3, #1
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d00c      	beq.n	80107c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	f003 0301 	and.w	r3, r3, #1
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d007      	beq.n	80107c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	f06f 0201 	mvn.w	r2, #1
 80107bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f7f0 fe12 	bl	80013e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d00c      	beq.n	80107e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d007      	beq.n	80107e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80107e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f000 fab0 	bl	8010d48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d00c      	beq.n	801080c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d007      	beq.n	801080c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8010804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f000 f8fb 	bl	8010a02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	f003 0320 	and.w	r3, r3, #32
 8010812:	2b00      	cmp	r3, #0
 8010814:	d00c      	beq.n	8010830 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	f003 0320 	and.w	r3, r3, #32
 801081c:	2b00      	cmp	r3, #0
 801081e:	d007      	beq.n	8010830 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	f06f 0220 	mvn.w	r2, #32
 8010828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801082a:	6878      	ldr	r0, [r7, #4]
 801082c:	f000 fa82 	bl	8010d34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010830:	bf00      	nop
 8010832:	3710      	adds	r7, #16
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b084      	sub	sp, #16
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010842:	2300      	movs	r3, #0
 8010844:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801084c:	2b01      	cmp	r3, #1
 801084e:	d101      	bne.n	8010854 <HAL_TIM_ConfigClockSource+0x1c>
 8010850:	2302      	movs	r3, #2
 8010852:	e0b4      	b.n	80109be <HAL_TIM_ConfigClockSource+0x186>
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2201      	movs	r2, #1
 8010858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2202      	movs	r2, #2
 8010860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	689b      	ldr	r3, [r3, #8]
 801086a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8010872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801087a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	68ba      	ldr	r2, [r7, #8]
 8010882:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801088c:	d03e      	beq.n	801090c <HAL_TIM_ConfigClockSource+0xd4>
 801088e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010892:	f200 8087 	bhi.w	80109a4 <HAL_TIM_ConfigClockSource+0x16c>
 8010896:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801089a:	f000 8086 	beq.w	80109aa <HAL_TIM_ConfigClockSource+0x172>
 801089e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80108a2:	d87f      	bhi.n	80109a4 <HAL_TIM_ConfigClockSource+0x16c>
 80108a4:	2b70      	cmp	r3, #112	@ 0x70
 80108a6:	d01a      	beq.n	80108de <HAL_TIM_ConfigClockSource+0xa6>
 80108a8:	2b70      	cmp	r3, #112	@ 0x70
 80108aa:	d87b      	bhi.n	80109a4 <HAL_TIM_ConfigClockSource+0x16c>
 80108ac:	2b60      	cmp	r3, #96	@ 0x60
 80108ae:	d050      	beq.n	8010952 <HAL_TIM_ConfigClockSource+0x11a>
 80108b0:	2b60      	cmp	r3, #96	@ 0x60
 80108b2:	d877      	bhi.n	80109a4 <HAL_TIM_ConfigClockSource+0x16c>
 80108b4:	2b50      	cmp	r3, #80	@ 0x50
 80108b6:	d03c      	beq.n	8010932 <HAL_TIM_ConfigClockSource+0xfa>
 80108b8:	2b50      	cmp	r3, #80	@ 0x50
 80108ba:	d873      	bhi.n	80109a4 <HAL_TIM_ConfigClockSource+0x16c>
 80108bc:	2b40      	cmp	r3, #64	@ 0x40
 80108be:	d058      	beq.n	8010972 <HAL_TIM_ConfigClockSource+0x13a>
 80108c0:	2b40      	cmp	r3, #64	@ 0x40
 80108c2:	d86f      	bhi.n	80109a4 <HAL_TIM_ConfigClockSource+0x16c>
 80108c4:	2b30      	cmp	r3, #48	@ 0x30
 80108c6:	d064      	beq.n	8010992 <HAL_TIM_ConfigClockSource+0x15a>
 80108c8:	2b30      	cmp	r3, #48	@ 0x30
 80108ca:	d86b      	bhi.n	80109a4 <HAL_TIM_ConfigClockSource+0x16c>
 80108cc:	2b20      	cmp	r3, #32
 80108ce:	d060      	beq.n	8010992 <HAL_TIM_ConfigClockSource+0x15a>
 80108d0:	2b20      	cmp	r3, #32
 80108d2:	d867      	bhi.n	80109a4 <HAL_TIM_ConfigClockSource+0x16c>
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d05c      	beq.n	8010992 <HAL_TIM_ConfigClockSource+0x15a>
 80108d8:	2b10      	cmp	r3, #16
 80108da:	d05a      	beq.n	8010992 <HAL_TIM_ConfigClockSource+0x15a>
 80108dc:	e062      	b.n	80109a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80108e2:	683b      	ldr	r3, [r7, #0]
 80108e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80108ee:	f000 f993 	bl	8010c18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	689b      	ldr	r3, [r3, #8]
 80108f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8010900:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	68ba      	ldr	r2, [r7, #8]
 8010908:	609a      	str	r2, [r3, #8]
      break;
 801090a:	e04f      	b.n	80109ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801091c:	f000 f97c 	bl	8010c18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	689a      	ldr	r2, [r3, #8]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801092e:	609a      	str	r2, [r3, #8]
      break;
 8010930:	e03c      	b.n	80109ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801093e:	461a      	mov	r2, r3
 8010940:	f000 f8f0 	bl	8010b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	2150      	movs	r1, #80	@ 0x50
 801094a:	4618      	mov	r0, r3
 801094c:	f000 f949 	bl	8010be2 <TIM_ITRx_SetConfig>
      break;
 8010950:	e02c      	b.n	80109ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801095e:	461a      	mov	r2, r3
 8010960:	f000 f90f 	bl	8010b82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	2160      	movs	r1, #96	@ 0x60
 801096a:	4618      	mov	r0, r3
 801096c:	f000 f939 	bl	8010be2 <TIM_ITRx_SetConfig>
      break;
 8010970:	e01c      	b.n	80109ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801097e:	461a      	mov	r2, r3
 8010980:	f000 f8d0 	bl	8010b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	2140      	movs	r1, #64	@ 0x40
 801098a:	4618      	mov	r0, r3
 801098c:	f000 f929 	bl	8010be2 <TIM_ITRx_SetConfig>
      break;
 8010990:	e00c      	b.n	80109ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681a      	ldr	r2, [r3, #0]
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	4619      	mov	r1, r3
 801099c:	4610      	mov	r0, r2
 801099e:	f000 f920 	bl	8010be2 <TIM_ITRx_SetConfig>
      break;
 80109a2:	e003      	b.n	80109ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80109a4:	2301      	movs	r3, #1
 80109a6:	73fb      	strb	r3, [r7, #15]
      break;
 80109a8:	e000      	b.n	80109ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80109aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2201      	movs	r2, #1
 80109b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2200      	movs	r2, #0
 80109b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80109bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80109be:	4618      	mov	r0, r3
 80109c0:	3710      	adds	r7, #16
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}

080109c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80109c6:	b480      	push	{r7}
 80109c8:	b083      	sub	sp, #12
 80109ca:	af00      	add	r7, sp, #0
 80109cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80109ce:	bf00      	nop
 80109d0:	370c      	adds	r7, #12
 80109d2:	46bd      	mov	sp, r7
 80109d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d8:	4770      	bx	lr

080109da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80109da:	b480      	push	{r7}
 80109dc:	b083      	sub	sp, #12
 80109de:	af00      	add	r7, sp, #0
 80109e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80109e2:	bf00      	nop
 80109e4:	370c      	adds	r7, #12
 80109e6:	46bd      	mov	sp, r7
 80109e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ec:	4770      	bx	lr

080109ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80109ee:	b480      	push	{r7}
 80109f0:	b083      	sub	sp, #12
 80109f2:	af00      	add	r7, sp, #0
 80109f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80109f6:	bf00      	nop
 80109f8:	370c      	adds	r7, #12
 80109fa:	46bd      	mov	sp, r7
 80109fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a00:	4770      	bx	lr

08010a02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010a02:	b480      	push	{r7}
 8010a04:	b083      	sub	sp, #12
 8010a06:	af00      	add	r7, sp, #0
 8010a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010a0a:	bf00      	nop
 8010a0c:	370c      	adds	r7, #12
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a14:	4770      	bx	lr
	...

08010a18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010a18:	b480      	push	{r7}
 8010a1a:	b085      	sub	sp, #20
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
 8010a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	4a37      	ldr	r2, [pc, #220]	@ (8010b08 <TIM_Base_SetConfig+0xf0>)
 8010a2c:	4293      	cmp	r3, r2
 8010a2e:	d00f      	beq.n	8010a50 <TIM_Base_SetConfig+0x38>
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010a36:	d00b      	beq.n	8010a50 <TIM_Base_SetConfig+0x38>
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	4a34      	ldr	r2, [pc, #208]	@ (8010b0c <TIM_Base_SetConfig+0xf4>)
 8010a3c:	4293      	cmp	r3, r2
 8010a3e:	d007      	beq.n	8010a50 <TIM_Base_SetConfig+0x38>
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	4a33      	ldr	r2, [pc, #204]	@ (8010b10 <TIM_Base_SetConfig+0xf8>)
 8010a44:	4293      	cmp	r3, r2
 8010a46:	d003      	beq.n	8010a50 <TIM_Base_SetConfig+0x38>
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	4a32      	ldr	r2, [pc, #200]	@ (8010b14 <TIM_Base_SetConfig+0xfc>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d108      	bne.n	8010a62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010a58:	683b      	ldr	r3, [r7, #0]
 8010a5a:	685b      	ldr	r3, [r3, #4]
 8010a5c:	68fa      	ldr	r2, [r7, #12]
 8010a5e:	4313      	orrs	r3, r2
 8010a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	4a28      	ldr	r2, [pc, #160]	@ (8010b08 <TIM_Base_SetConfig+0xf0>)
 8010a66:	4293      	cmp	r3, r2
 8010a68:	d01b      	beq.n	8010aa2 <TIM_Base_SetConfig+0x8a>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010a70:	d017      	beq.n	8010aa2 <TIM_Base_SetConfig+0x8a>
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	4a25      	ldr	r2, [pc, #148]	@ (8010b0c <TIM_Base_SetConfig+0xf4>)
 8010a76:	4293      	cmp	r3, r2
 8010a78:	d013      	beq.n	8010aa2 <TIM_Base_SetConfig+0x8a>
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	4a24      	ldr	r2, [pc, #144]	@ (8010b10 <TIM_Base_SetConfig+0xf8>)
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	d00f      	beq.n	8010aa2 <TIM_Base_SetConfig+0x8a>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	4a23      	ldr	r2, [pc, #140]	@ (8010b14 <TIM_Base_SetConfig+0xfc>)
 8010a86:	4293      	cmp	r3, r2
 8010a88:	d00b      	beq.n	8010aa2 <TIM_Base_SetConfig+0x8a>
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	4a22      	ldr	r2, [pc, #136]	@ (8010b18 <TIM_Base_SetConfig+0x100>)
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	d007      	beq.n	8010aa2 <TIM_Base_SetConfig+0x8a>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	4a21      	ldr	r2, [pc, #132]	@ (8010b1c <TIM_Base_SetConfig+0x104>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d003      	beq.n	8010aa2 <TIM_Base_SetConfig+0x8a>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	4a20      	ldr	r2, [pc, #128]	@ (8010b20 <TIM_Base_SetConfig+0x108>)
 8010a9e:	4293      	cmp	r3, r2
 8010aa0:	d108      	bne.n	8010ab4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	68db      	ldr	r3, [r3, #12]
 8010aae:	68fa      	ldr	r2, [r7, #12]
 8010ab0:	4313      	orrs	r3, r2
 8010ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	695b      	ldr	r3, [r3, #20]
 8010abe:	4313      	orrs	r3, r2
 8010ac0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	689a      	ldr	r2, [r3, #8]
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	681a      	ldr	r2, [r3, #0]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	4a0c      	ldr	r2, [pc, #48]	@ (8010b08 <TIM_Base_SetConfig+0xf0>)
 8010ad6:	4293      	cmp	r3, r2
 8010ad8:	d103      	bne.n	8010ae2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	691a      	ldr	r2, [r3, #16]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	f043 0204 	orr.w	r2, r3, #4
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	2201      	movs	r2, #1
 8010af2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	68fa      	ldr	r2, [r7, #12]
 8010af8:	601a      	str	r2, [r3, #0]
}
 8010afa:	bf00      	nop
 8010afc:	3714      	adds	r7, #20
 8010afe:	46bd      	mov	sp, r7
 8010b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b04:	4770      	bx	lr
 8010b06:	bf00      	nop
 8010b08:	40010000 	.word	0x40010000
 8010b0c:	40000400 	.word	0x40000400
 8010b10:	40000800 	.word	0x40000800
 8010b14:	40000c00 	.word	0x40000c00
 8010b18:	40014000 	.word	0x40014000
 8010b1c:	40014400 	.word	0x40014400
 8010b20:	40014800 	.word	0x40014800

08010b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010b24:	b480      	push	{r7}
 8010b26:	b087      	sub	sp, #28
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	60b9      	str	r1, [r7, #8]
 8010b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	6a1b      	ldr	r3, [r3, #32]
 8010b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	6a1b      	ldr	r3, [r3, #32]
 8010b3a:	f023 0201 	bic.w	r2, r3, #1
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	699b      	ldr	r3, [r3, #24]
 8010b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	011b      	lsls	r3, r3, #4
 8010b54:	693a      	ldr	r2, [r7, #16]
 8010b56:	4313      	orrs	r3, r2
 8010b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	f023 030a 	bic.w	r3, r3, #10
 8010b60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010b62:	697a      	ldr	r2, [r7, #20]
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	4313      	orrs	r3, r2
 8010b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	693a      	ldr	r2, [r7, #16]
 8010b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	697a      	ldr	r2, [r7, #20]
 8010b74:	621a      	str	r2, [r3, #32]
}
 8010b76:	bf00      	nop
 8010b78:	371c      	adds	r7, #28
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr

08010b82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010b82:	b480      	push	{r7}
 8010b84:	b087      	sub	sp, #28
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	60f8      	str	r0, [r7, #12]
 8010b8a:	60b9      	str	r1, [r7, #8]
 8010b8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	6a1b      	ldr	r3, [r3, #32]
 8010b92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	6a1b      	ldr	r3, [r3, #32]
 8010b98:	f023 0210 	bic.w	r2, r3, #16
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	699b      	ldr	r3, [r3, #24]
 8010ba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010ba6:	693b      	ldr	r3, [r7, #16]
 8010ba8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8010bac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	031b      	lsls	r3, r3, #12
 8010bb2:	693a      	ldr	r2, [r7, #16]
 8010bb4:	4313      	orrs	r3, r2
 8010bb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8010bbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	011b      	lsls	r3, r3, #4
 8010bc4:	697a      	ldr	r2, [r7, #20]
 8010bc6:	4313      	orrs	r3, r2
 8010bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	693a      	ldr	r2, [r7, #16]
 8010bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	697a      	ldr	r2, [r7, #20]
 8010bd4:	621a      	str	r2, [r3, #32]
}
 8010bd6:	bf00      	nop
 8010bd8:	371c      	adds	r7, #28
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be0:	4770      	bx	lr

08010be2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010be2:	b480      	push	{r7}
 8010be4:	b085      	sub	sp, #20
 8010be6:	af00      	add	r7, sp, #0
 8010be8:	6078      	str	r0, [r7, #4]
 8010bea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	689b      	ldr	r3, [r3, #8]
 8010bf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010bf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010bfa:	683a      	ldr	r2, [r7, #0]
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	4313      	orrs	r3, r2
 8010c00:	f043 0307 	orr.w	r3, r3, #7
 8010c04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	68fa      	ldr	r2, [r7, #12]
 8010c0a:	609a      	str	r2, [r3, #8]
}
 8010c0c:	bf00      	nop
 8010c0e:	3714      	adds	r7, #20
 8010c10:	46bd      	mov	sp, r7
 8010c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c16:	4770      	bx	lr

08010c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010c18:	b480      	push	{r7}
 8010c1a:	b087      	sub	sp, #28
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	60b9      	str	r1, [r7, #8]
 8010c22:	607a      	str	r2, [r7, #4]
 8010c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	689b      	ldr	r3, [r3, #8]
 8010c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010c34:	683b      	ldr	r3, [r7, #0]
 8010c36:	021a      	lsls	r2, r3, #8
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	431a      	orrs	r2, r3
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	4313      	orrs	r3, r2
 8010c40:	697a      	ldr	r2, [r7, #20]
 8010c42:	4313      	orrs	r3, r2
 8010c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	697a      	ldr	r2, [r7, #20]
 8010c4a:	609a      	str	r2, [r3, #8]
}
 8010c4c:	bf00      	nop
 8010c4e:	371c      	adds	r7, #28
 8010c50:	46bd      	mov	sp, r7
 8010c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c56:	4770      	bx	lr

08010c58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010c58:	b480      	push	{r7}
 8010c5a:	b085      	sub	sp, #20
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010c68:	2b01      	cmp	r3, #1
 8010c6a:	d101      	bne.n	8010c70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010c6c:	2302      	movs	r3, #2
 8010c6e:	e050      	b.n	8010d12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2201      	movs	r2, #1
 8010c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2202      	movs	r2, #2
 8010c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	685b      	ldr	r3, [r3, #4]
 8010c86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	689b      	ldr	r3, [r3, #8]
 8010c8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010c96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	68fa      	ldr	r2, [r7, #12]
 8010c9e:	4313      	orrs	r3, r2
 8010ca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	68fa      	ldr	r2, [r7, #12]
 8010ca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	4a1c      	ldr	r2, [pc, #112]	@ (8010d20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8010cb0:	4293      	cmp	r3, r2
 8010cb2:	d018      	beq.n	8010ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010cbc:	d013      	beq.n	8010ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	4a18      	ldr	r2, [pc, #96]	@ (8010d24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	d00e      	beq.n	8010ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	4a16      	ldr	r2, [pc, #88]	@ (8010d28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d009      	beq.n	8010ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	4a15      	ldr	r2, [pc, #84]	@ (8010d2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d004      	beq.n	8010ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	4a13      	ldr	r2, [pc, #76]	@ (8010d30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	d10c      	bne.n	8010d00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010ce6:	68bb      	ldr	r3, [r7, #8]
 8010ce8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010cec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	685b      	ldr	r3, [r3, #4]
 8010cf2:	68ba      	ldr	r2, [r7, #8]
 8010cf4:	4313      	orrs	r3, r2
 8010cf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	68ba      	ldr	r2, [r7, #8]
 8010cfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2201      	movs	r2, #1
 8010d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010d10:	2300      	movs	r3, #0
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3714      	adds	r7, #20
 8010d16:	46bd      	mov	sp, r7
 8010d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1c:	4770      	bx	lr
 8010d1e:	bf00      	nop
 8010d20:	40010000 	.word	0x40010000
 8010d24:	40000400 	.word	0x40000400
 8010d28:	40000800 	.word	0x40000800
 8010d2c:	40000c00 	.word	0x40000c00
 8010d30:	40014000 	.word	0x40014000

08010d34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010d34:	b480      	push	{r7}
 8010d36:	b083      	sub	sp, #12
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010d3c:	bf00      	nop
 8010d3e:	370c      	adds	r7, #12
 8010d40:	46bd      	mov	sp, r7
 8010d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d46:	4770      	bx	lr

08010d48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b083      	sub	sp, #12
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010d50:	bf00      	nop
 8010d52:	370c      	adds	r7, #12
 8010d54:	46bd      	mov	sp, r7
 8010d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5a:	4770      	bx	lr

08010d5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b082      	sub	sp, #8
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d101      	bne.n	8010d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	e042      	b.n	8010df4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010d74:	b2db      	uxtb	r3, r3
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d106      	bne.n	8010d88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	f000 f83a 	bl	8010dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2224      	movs	r2, #36	@ 0x24
 8010d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	68da      	ldr	r2, [r3, #12]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010d9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f000 f97d 	bl	80110a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	691a      	ldr	r2, [r3, #16]
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010db4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	695a      	ldr	r2, [r3, #20]
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010dc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	68da      	ldr	r2, [r3, #12]
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8010dd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2200      	movs	r2, #0
 8010dda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2220      	movs	r2, #32
 8010de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2220      	movs	r2, #32
 8010de8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2200      	movs	r2, #0
 8010df0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8010df2:	2300      	movs	r3, #0
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3708      	adds	r7, #8
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}

08010dfc <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b083      	sub	sp, #12
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8010e04:	bf00      	nop
 8010e06:	370c      	adds	r7, #12
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0e:	4770      	bx	lr

08010e10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b08a      	sub	sp, #40	@ 0x28
 8010e14:	af02      	add	r7, sp, #8
 8010e16:	60f8      	str	r0, [r7, #12]
 8010e18:	60b9      	str	r1, [r7, #8]
 8010e1a:	603b      	str	r3, [r7, #0]
 8010e1c:	4613      	mov	r3, r2
 8010e1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8010e20:	2300      	movs	r3, #0
 8010e22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010e2a:	b2db      	uxtb	r3, r3
 8010e2c:	2b20      	cmp	r3, #32
 8010e2e:	d175      	bne.n	8010f1c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d002      	beq.n	8010e3c <HAL_UART_Transmit+0x2c>
 8010e36:	88fb      	ldrh	r3, [r7, #6]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d101      	bne.n	8010e40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	e06e      	b.n	8010f1e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	2200      	movs	r2, #0
 8010e44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	2221      	movs	r2, #33	@ 0x21
 8010e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010e4e:	f7fb fa6b 	bl	800c328 <HAL_GetTick>
 8010e52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	88fa      	ldrh	r2, [r7, #6]
 8010e58:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	88fa      	ldrh	r2, [r7, #6]
 8010e5e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	689b      	ldr	r3, [r3, #8]
 8010e64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010e68:	d108      	bne.n	8010e7c <HAL_UART_Transmit+0x6c>
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	691b      	ldr	r3, [r3, #16]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d104      	bne.n	8010e7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010e72:	2300      	movs	r3, #0
 8010e74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	61bb      	str	r3, [r7, #24]
 8010e7a:	e003      	b.n	8010e84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010e80:	2300      	movs	r3, #0
 8010e82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010e84:	e02e      	b.n	8010ee4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	9300      	str	r3, [sp, #0]
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	2180      	movs	r1, #128	@ 0x80
 8010e90:	68f8      	ldr	r0, [r7, #12]
 8010e92:	f000 f848 	bl	8010f26 <UART_WaitOnFlagUntilTimeout>
 8010e96:	4603      	mov	r3, r0
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d005      	beq.n	8010ea8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	2220      	movs	r2, #32
 8010ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8010ea4:	2303      	movs	r3, #3
 8010ea6:	e03a      	b.n	8010f1e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8010ea8:	69fb      	ldr	r3, [r7, #28]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d10b      	bne.n	8010ec6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010eae:	69bb      	ldr	r3, [r7, #24]
 8010eb0:	881b      	ldrh	r3, [r3, #0]
 8010eb2:	461a      	mov	r2, r3
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010ebc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8010ebe:	69bb      	ldr	r3, [r7, #24]
 8010ec0:	3302      	adds	r3, #2
 8010ec2:	61bb      	str	r3, [r7, #24]
 8010ec4:	e007      	b.n	8010ed6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8010ec6:	69fb      	ldr	r3, [r7, #28]
 8010ec8:	781a      	ldrb	r2, [r3, #0]
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8010ed0:	69fb      	ldr	r3, [r7, #28]
 8010ed2:	3301      	adds	r3, #1
 8010ed4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	3b01      	subs	r3, #1
 8010ede:	b29a      	uxth	r2, r3
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010ee8:	b29b      	uxth	r3, r3
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d1cb      	bne.n	8010e86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010eee:	683b      	ldr	r3, [r7, #0]
 8010ef0:	9300      	str	r3, [sp, #0]
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	2140      	movs	r1, #64	@ 0x40
 8010ef8:	68f8      	ldr	r0, [r7, #12]
 8010efa:	f000 f814 	bl	8010f26 <UART_WaitOnFlagUntilTimeout>
 8010efe:	4603      	mov	r3, r0
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d005      	beq.n	8010f10 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2220      	movs	r2, #32
 8010f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8010f0c:	2303      	movs	r3, #3
 8010f0e:	e006      	b.n	8010f1e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	2220      	movs	r2, #32
 8010f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	e000      	b.n	8010f1e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8010f1c:	2302      	movs	r3, #2
  }
}
 8010f1e:	4618      	mov	r0, r3
 8010f20:	3720      	adds	r7, #32
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bd80      	pop	{r7, pc}

08010f26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8010f26:	b580      	push	{r7, lr}
 8010f28:	b086      	sub	sp, #24
 8010f2a:	af00      	add	r7, sp, #0
 8010f2c:	60f8      	str	r0, [r7, #12]
 8010f2e:	60b9      	str	r1, [r7, #8]
 8010f30:	603b      	str	r3, [r7, #0]
 8010f32:	4613      	mov	r3, r2
 8010f34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010f36:	e03b      	b.n	8010fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010f38:	6a3b      	ldr	r3, [r7, #32]
 8010f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f3e:	d037      	beq.n	8010fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010f40:	f7fb f9f2 	bl	800c328 <HAL_GetTick>
 8010f44:	4602      	mov	r2, r0
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	1ad3      	subs	r3, r2, r3
 8010f4a:	6a3a      	ldr	r2, [r7, #32]
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	d302      	bcc.n	8010f56 <UART_WaitOnFlagUntilTimeout+0x30>
 8010f50:	6a3b      	ldr	r3, [r7, #32]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d101      	bne.n	8010f5a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010f56:	2303      	movs	r3, #3
 8010f58:	e03a      	b.n	8010fd0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	68db      	ldr	r3, [r3, #12]
 8010f60:	f003 0304 	and.w	r3, r3, #4
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d023      	beq.n	8010fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	2b80      	cmp	r3, #128	@ 0x80
 8010f6c:	d020      	beq.n	8010fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	2b40      	cmp	r3, #64	@ 0x40
 8010f72:	d01d      	beq.n	8010fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	f003 0308 	and.w	r3, r3, #8
 8010f7e:	2b08      	cmp	r3, #8
 8010f80:	d116      	bne.n	8010fb0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8010f82:	2300      	movs	r3, #0
 8010f84:	617b      	str	r3, [r7, #20]
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	617b      	str	r3, [r7, #20]
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	685b      	ldr	r3, [r3, #4]
 8010f94:	617b      	str	r3, [r7, #20]
 8010f96:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010f98:	68f8      	ldr	r0, [r7, #12]
 8010f9a:	f000 f81d 	bl	8010fd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	2208      	movs	r2, #8
 8010fa2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8010fac:	2301      	movs	r3, #1
 8010fae:	e00f      	b.n	8010fd0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	681a      	ldr	r2, [r3, #0]
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	4013      	ands	r3, r2
 8010fba:	68ba      	ldr	r2, [r7, #8]
 8010fbc:	429a      	cmp	r2, r3
 8010fbe:	bf0c      	ite	eq
 8010fc0:	2301      	moveq	r3, #1
 8010fc2:	2300      	movne	r3, #0
 8010fc4:	b2db      	uxtb	r3, r3
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	79fb      	ldrb	r3, [r7, #7]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d0b4      	beq.n	8010f38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010fce:	2300      	movs	r3, #0
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	3718      	adds	r7, #24
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}

08010fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010fd8:	b480      	push	{r7}
 8010fda:	b095      	sub	sp, #84	@ 0x54
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	330c      	adds	r3, #12
 8010fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fea:	e853 3f00 	ldrex	r3, [r3]
 8010fee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ff2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	330c      	adds	r3, #12
 8010ffe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011000:	643a      	str	r2, [r7, #64]	@ 0x40
 8011002:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011004:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011006:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011008:	e841 2300 	strex	r3, r2, [r1]
 801100c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801100e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011010:	2b00      	cmp	r3, #0
 8011012:	d1e5      	bne.n	8010fe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	3314      	adds	r3, #20
 801101a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801101c:	6a3b      	ldr	r3, [r7, #32]
 801101e:	e853 3f00 	ldrex	r3, [r3]
 8011022:	61fb      	str	r3, [r7, #28]
   return(result);
 8011024:	69fb      	ldr	r3, [r7, #28]
 8011026:	f023 0301 	bic.w	r3, r3, #1
 801102a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	3314      	adds	r3, #20
 8011032:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011034:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011036:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011038:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801103a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801103c:	e841 2300 	strex	r3, r2, [r1]
 8011040:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011044:	2b00      	cmp	r3, #0
 8011046:	d1e5      	bne.n	8011014 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801104c:	2b01      	cmp	r3, #1
 801104e:	d119      	bne.n	8011084 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	330c      	adds	r3, #12
 8011056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	e853 3f00 	ldrex	r3, [r3]
 801105e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	f023 0310 	bic.w	r3, r3, #16
 8011066:	647b      	str	r3, [r7, #68]	@ 0x44
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	330c      	adds	r3, #12
 801106e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011070:	61ba      	str	r2, [r7, #24]
 8011072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011074:	6979      	ldr	r1, [r7, #20]
 8011076:	69ba      	ldr	r2, [r7, #24]
 8011078:	e841 2300 	strex	r3, r2, [r1]
 801107c:	613b      	str	r3, [r7, #16]
   return(result);
 801107e:	693b      	ldr	r3, [r7, #16]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d1e5      	bne.n	8011050 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2220      	movs	r2, #32
 8011088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2200      	movs	r2, #0
 8011090:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8011092:	bf00      	nop
 8011094:	3754      	adds	r7, #84	@ 0x54
 8011096:	46bd      	mov	sp, r7
 8011098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109c:	4770      	bx	lr
	...

080110a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80110a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80110a4:	b0c0      	sub	sp, #256	@ 0x100
 80110a6:	af00      	add	r7, sp, #0
 80110a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80110ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	691b      	ldr	r3, [r3, #16]
 80110b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80110b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80110bc:	68d9      	ldr	r1, [r3, #12]
 80110be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80110c2:	681a      	ldr	r2, [r3, #0]
 80110c4:	ea40 0301 	orr.w	r3, r0, r1
 80110c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80110ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80110ce:	689a      	ldr	r2, [r3, #8]
 80110d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80110d4:	691b      	ldr	r3, [r3, #16]
 80110d6:	431a      	orrs	r2, r3
 80110d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80110dc:	695b      	ldr	r3, [r3, #20]
 80110de:	431a      	orrs	r2, r3
 80110e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80110e4:	69db      	ldr	r3, [r3, #28]
 80110e6:	4313      	orrs	r3, r2
 80110e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80110ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	68db      	ldr	r3, [r3, #12]
 80110f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80110f8:	f021 010c 	bic.w	r1, r1, #12
 80110fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011100:	681a      	ldr	r2, [r3, #0]
 8011102:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8011106:	430b      	orrs	r3, r1
 8011108:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801110a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	695b      	ldr	r3, [r3, #20]
 8011112:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8011116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801111a:	6999      	ldr	r1, [r3, #24]
 801111c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011120:	681a      	ldr	r2, [r3, #0]
 8011122:	ea40 0301 	orr.w	r3, r0, r1
 8011126:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8011128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801112c:	681a      	ldr	r2, [r3, #0]
 801112e:	4b8f      	ldr	r3, [pc, #572]	@ (801136c <UART_SetConfig+0x2cc>)
 8011130:	429a      	cmp	r2, r3
 8011132:	d005      	beq.n	8011140 <UART_SetConfig+0xa0>
 8011134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011138:	681a      	ldr	r2, [r3, #0]
 801113a:	4b8d      	ldr	r3, [pc, #564]	@ (8011370 <UART_SetConfig+0x2d0>)
 801113c:	429a      	cmp	r2, r3
 801113e:	d104      	bne.n	801114a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8011140:	f7fe f9f2 	bl	800f528 <HAL_RCC_GetPCLK2Freq>
 8011144:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8011148:	e003      	b.n	8011152 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801114a:	f7fe f9d9 	bl	800f500 <HAL_RCC_GetPCLK1Freq>
 801114e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011156:	69db      	ldr	r3, [r3, #28]
 8011158:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801115c:	f040 810c 	bne.w	8011378 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8011160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8011164:	2200      	movs	r2, #0
 8011166:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801116a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801116e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8011172:	4622      	mov	r2, r4
 8011174:	462b      	mov	r3, r5
 8011176:	1891      	adds	r1, r2, r2
 8011178:	65b9      	str	r1, [r7, #88]	@ 0x58
 801117a:	415b      	adcs	r3, r3
 801117c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801117e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011182:	4621      	mov	r1, r4
 8011184:	eb12 0801 	adds.w	r8, r2, r1
 8011188:	4629      	mov	r1, r5
 801118a:	eb43 0901 	adc.w	r9, r3, r1
 801118e:	f04f 0200 	mov.w	r2, #0
 8011192:	f04f 0300 	mov.w	r3, #0
 8011196:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801119a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801119e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80111a2:	4690      	mov	r8, r2
 80111a4:	4699      	mov	r9, r3
 80111a6:	4623      	mov	r3, r4
 80111a8:	eb18 0303 	adds.w	r3, r8, r3
 80111ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80111b0:	462b      	mov	r3, r5
 80111b2:	eb49 0303 	adc.w	r3, r9, r3
 80111b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80111ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80111be:	685b      	ldr	r3, [r3, #4]
 80111c0:	2200      	movs	r2, #0
 80111c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80111c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80111ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80111ce:	460b      	mov	r3, r1
 80111d0:	18db      	adds	r3, r3, r3
 80111d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80111d4:	4613      	mov	r3, r2
 80111d6:	eb42 0303 	adc.w	r3, r2, r3
 80111da:	657b      	str	r3, [r7, #84]	@ 0x54
 80111dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80111e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80111e4:	f7ef fd38 	bl	8000c58 <__aeabi_uldivmod>
 80111e8:	4602      	mov	r2, r0
 80111ea:	460b      	mov	r3, r1
 80111ec:	4b61      	ldr	r3, [pc, #388]	@ (8011374 <UART_SetConfig+0x2d4>)
 80111ee:	fba3 2302 	umull	r2, r3, r3, r2
 80111f2:	095b      	lsrs	r3, r3, #5
 80111f4:	011c      	lsls	r4, r3, #4
 80111f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80111fa:	2200      	movs	r2, #0
 80111fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8011200:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8011204:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8011208:	4642      	mov	r2, r8
 801120a:	464b      	mov	r3, r9
 801120c:	1891      	adds	r1, r2, r2
 801120e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011210:	415b      	adcs	r3, r3
 8011212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011214:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8011218:	4641      	mov	r1, r8
 801121a:	eb12 0a01 	adds.w	sl, r2, r1
 801121e:	4649      	mov	r1, r9
 8011220:	eb43 0b01 	adc.w	fp, r3, r1
 8011224:	f04f 0200 	mov.w	r2, #0
 8011228:	f04f 0300 	mov.w	r3, #0
 801122c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011230:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8011234:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8011238:	4692      	mov	sl, r2
 801123a:	469b      	mov	fp, r3
 801123c:	4643      	mov	r3, r8
 801123e:	eb1a 0303 	adds.w	r3, sl, r3
 8011242:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8011246:	464b      	mov	r3, r9
 8011248:	eb4b 0303 	adc.w	r3, fp, r3
 801124c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8011250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011254:	685b      	ldr	r3, [r3, #4]
 8011256:	2200      	movs	r2, #0
 8011258:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801125c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8011260:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8011264:	460b      	mov	r3, r1
 8011266:	18db      	adds	r3, r3, r3
 8011268:	643b      	str	r3, [r7, #64]	@ 0x40
 801126a:	4613      	mov	r3, r2
 801126c:	eb42 0303 	adc.w	r3, r2, r3
 8011270:	647b      	str	r3, [r7, #68]	@ 0x44
 8011272:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8011276:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801127a:	f7ef fced 	bl	8000c58 <__aeabi_uldivmod>
 801127e:	4602      	mov	r2, r0
 8011280:	460b      	mov	r3, r1
 8011282:	4611      	mov	r1, r2
 8011284:	4b3b      	ldr	r3, [pc, #236]	@ (8011374 <UART_SetConfig+0x2d4>)
 8011286:	fba3 2301 	umull	r2, r3, r3, r1
 801128a:	095b      	lsrs	r3, r3, #5
 801128c:	2264      	movs	r2, #100	@ 0x64
 801128e:	fb02 f303 	mul.w	r3, r2, r3
 8011292:	1acb      	subs	r3, r1, r3
 8011294:	00db      	lsls	r3, r3, #3
 8011296:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801129a:	4b36      	ldr	r3, [pc, #216]	@ (8011374 <UART_SetConfig+0x2d4>)
 801129c:	fba3 2302 	umull	r2, r3, r3, r2
 80112a0:	095b      	lsrs	r3, r3, #5
 80112a2:	005b      	lsls	r3, r3, #1
 80112a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80112a8:	441c      	add	r4, r3
 80112aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80112ae:	2200      	movs	r2, #0
 80112b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80112b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80112b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80112bc:	4642      	mov	r2, r8
 80112be:	464b      	mov	r3, r9
 80112c0:	1891      	adds	r1, r2, r2
 80112c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80112c4:	415b      	adcs	r3, r3
 80112c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80112c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80112cc:	4641      	mov	r1, r8
 80112ce:	1851      	adds	r1, r2, r1
 80112d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80112d2:	4649      	mov	r1, r9
 80112d4:	414b      	adcs	r3, r1
 80112d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80112d8:	f04f 0200 	mov.w	r2, #0
 80112dc:	f04f 0300 	mov.w	r3, #0
 80112e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80112e4:	4659      	mov	r1, fp
 80112e6:	00cb      	lsls	r3, r1, #3
 80112e8:	4651      	mov	r1, sl
 80112ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80112ee:	4651      	mov	r1, sl
 80112f0:	00ca      	lsls	r2, r1, #3
 80112f2:	4610      	mov	r0, r2
 80112f4:	4619      	mov	r1, r3
 80112f6:	4603      	mov	r3, r0
 80112f8:	4642      	mov	r2, r8
 80112fa:	189b      	adds	r3, r3, r2
 80112fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011300:	464b      	mov	r3, r9
 8011302:	460a      	mov	r2, r1
 8011304:	eb42 0303 	adc.w	r3, r2, r3
 8011308:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801130c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011310:	685b      	ldr	r3, [r3, #4]
 8011312:	2200      	movs	r2, #0
 8011314:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011318:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 801131c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8011320:	460b      	mov	r3, r1
 8011322:	18db      	adds	r3, r3, r3
 8011324:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011326:	4613      	mov	r3, r2
 8011328:	eb42 0303 	adc.w	r3, r2, r3
 801132c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801132e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8011332:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8011336:	f7ef fc8f 	bl	8000c58 <__aeabi_uldivmod>
 801133a:	4602      	mov	r2, r0
 801133c:	460b      	mov	r3, r1
 801133e:	4b0d      	ldr	r3, [pc, #52]	@ (8011374 <UART_SetConfig+0x2d4>)
 8011340:	fba3 1302 	umull	r1, r3, r3, r2
 8011344:	095b      	lsrs	r3, r3, #5
 8011346:	2164      	movs	r1, #100	@ 0x64
 8011348:	fb01 f303 	mul.w	r3, r1, r3
 801134c:	1ad3      	subs	r3, r2, r3
 801134e:	00db      	lsls	r3, r3, #3
 8011350:	3332      	adds	r3, #50	@ 0x32
 8011352:	4a08      	ldr	r2, [pc, #32]	@ (8011374 <UART_SetConfig+0x2d4>)
 8011354:	fba2 2303 	umull	r2, r3, r2, r3
 8011358:	095b      	lsrs	r3, r3, #5
 801135a:	f003 0207 	and.w	r2, r3, #7
 801135e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	4422      	add	r2, r4
 8011366:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8011368:	e106      	b.n	8011578 <UART_SetConfig+0x4d8>
 801136a:	bf00      	nop
 801136c:	40011000 	.word	0x40011000
 8011370:	40011400 	.word	0x40011400
 8011374:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801137c:	2200      	movs	r2, #0
 801137e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011382:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8011386:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801138a:	4642      	mov	r2, r8
 801138c:	464b      	mov	r3, r9
 801138e:	1891      	adds	r1, r2, r2
 8011390:	6239      	str	r1, [r7, #32]
 8011392:	415b      	adcs	r3, r3
 8011394:	627b      	str	r3, [r7, #36]	@ 0x24
 8011396:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801139a:	4641      	mov	r1, r8
 801139c:	1854      	adds	r4, r2, r1
 801139e:	4649      	mov	r1, r9
 80113a0:	eb43 0501 	adc.w	r5, r3, r1
 80113a4:	f04f 0200 	mov.w	r2, #0
 80113a8:	f04f 0300 	mov.w	r3, #0
 80113ac:	00eb      	lsls	r3, r5, #3
 80113ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80113b2:	00e2      	lsls	r2, r4, #3
 80113b4:	4614      	mov	r4, r2
 80113b6:	461d      	mov	r5, r3
 80113b8:	4643      	mov	r3, r8
 80113ba:	18e3      	adds	r3, r4, r3
 80113bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80113c0:	464b      	mov	r3, r9
 80113c2:	eb45 0303 	adc.w	r3, r5, r3
 80113c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80113ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80113ce:	685b      	ldr	r3, [r3, #4]
 80113d0:	2200      	movs	r2, #0
 80113d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80113d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80113da:	f04f 0200 	mov.w	r2, #0
 80113de:	f04f 0300 	mov.w	r3, #0
 80113e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80113e6:	4629      	mov	r1, r5
 80113e8:	008b      	lsls	r3, r1, #2
 80113ea:	4621      	mov	r1, r4
 80113ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80113f0:	4621      	mov	r1, r4
 80113f2:	008a      	lsls	r2, r1, #2
 80113f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80113f8:	f7ef fc2e 	bl	8000c58 <__aeabi_uldivmod>
 80113fc:	4602      	mov	r2, r0
 80113fe:	460b      	mov	r3, r1
 8011400:	4b60      	ldr	r3, [pc, #384]	@ (8011584 <UART_SetConfig+0x4e4>)
 8011402:	fba3 2302 	umull	r2, r3, r3, r2
 8011406:	095b      	lsrs	r3, r3, #5
 8011408:	011c      	lsls	r4, r3, #4
 801140a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801140e:	2200      	movs	r2, #0
 8011410:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011414:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011418:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 801141c:	4642      	mov	r2, r8
 801141e:	464b      	mov	r3, r9
 8011420:	1891      	adds	r1, r2, r2
 8011422:	61b9      	str	r1, [r7, #24]
 8011424:	415b      	adcs	r3, r3
 8011426:	61fb      	str	r3, [r7, #28]
 8011428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801142c:	4641      	mov	r1, r8
 801142e:	1851      	adds	r1, r2, r1
 8011430:	6139      	str	r1, [r7, #16]
 8011432:	4649      	mov	r1, r9
 8011434:	414b      	adcs	r3, r1
 8011436:	617b      	str	r3, [r7, #20]
 8011438:	f04f 0200 	mov.w	r2, #0
 801143c:	f04f 0300 	mov.w	r3, #0
 8011440:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011444:	4659      	mov	r1, fp
 8011446:	00cb      	lsls	r3, r1, #3
 8011448:	4651      	mov	r1, sl
 801144a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801144e:	4651      	mov	r1, sl
 8011450:	00ca      	lsls	r2, r1, #3
 8011452:	4610      	mov	r0, r2
 8011454:	4619      	mov	r1, r3
 8011456:	4603      	mov	r3, r0
 8011458:	4642      	mov	r2, r8
 801145a:	189b      	adds	r3, r3, r2
 801145c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011460:	464b      	mov	r3, r9
 8011462:	460a      	mov	r2, r1
 8011464:	eb42 0303 	adc.w	r3, r2, r3
 8011468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801146c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011470:	685b      	ldr	r3, [r3, #4]
 8011472:	2200      	movs	r2, #0
 8011474:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011476:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011478:	f04f 0200 	mov.w	r2, #0
 801147c:	f04f 0300 	mov.w	r3, #0
 8011480:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8011484:	4649      	mov	r1, r9
 8011486:	008b      	lsls	r3, r1, #2
 8011488:	4641      	mov	r1, r8
 801148a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801148e:	4641      	mov	r1, r8
 8011490:	008a      	lsls	r2, r1, #2
 8011492:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8011496:	f7ef fbdf 	bl	8000c58 <__aeabi_uldivmod>
 801149a:	4602      	mov	r2, r0
 801149c:	460b      	mov	r3, r1
 801149e:	4611      	mov	r1, r2
 80114a0:	4b38      	ldr	r3, [pc, #224]	@ (8011584 <UART_SetConfig+0x4e4>)
 80114a2:	fba3 2301 	umull	r2, r3, r3, r1
 80114a6:	095b      	lsrs	r3, r3, #5
 80114a8:	2264      	movs	r2, #100	@ 0x64
 80114aa:	fb02 f303 	mul.w	r3, r2, r3
 80114ae:	1acb      	subs	r3, r1, r3
 80114b0:	011b      	lsls	r3, r3, #4
 80114b2:	3332      	adds	r3, #50	@ 0x32
 80114b4:	4a33      	ldr	r2, [pc, #204]	@ (8011584 <UART_SetConfig+0x4e4>)
 80114b6:	fba2 2303 	umull	r2, r3, r2, r3
 80114ba:	095b      	lsrs	r3, r3, #5
 80114bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80114c0:	441c      	add	r4, r3
 80114c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80114c6:	2200      	movs	r2, #0
 80114c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80114ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80114cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80114d0:	4642      	mov	r2, r8
 80114d2:	464b      	mov	r3, r9
 80114d4:	1891      	adds	r1, r2, r2
 80114d6:	60b9      	str	r1, [r7, #8]
 80114d8:	415b      	adcs	r3, r3
 80114da:	60fb      	str	r3, [r7, #12]
 80114dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80114e0:	4641      	mov	r1, r8
 80114e2:	1851      	adds	r1, r2, r1
 80114e4:	6039      	str	r1, [r7, #0]
 80114e6:	4649      	mov	r1, r9
 80114e8:	414b      	adcs	r3, r1
 80114ea:	607b      	str	r3, [r7, #4]
 80114ec:	f04f 0200 	mov.w	r2, #0
 80114f0:	f04f 0300 	mov.w	r3, #0
 80114f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80114f8:	4659      	mov	r1, fp
 80114fa:	00cb      	lsls	r3, r1, #3
 80114fc:	4651      	mov	r1, sl
 80114fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011502:	4651      	mov	r1, sl
 8011504:	00ca      	lsls	r2, r1, #3
 8011506:	4610      	mov	r0, r2
 8011508:	4619      	mov	r1, r3
 801150a:	4603      	mov	r3, r0
 801150c:	4642      	mov	r2, r8
 801150e:	189b      	adds	r3, r3, r2
 8011510:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011512:	464b      	mov	r3, r9
 8011514:	460a      	mov	r2, r1
 8011516:	eb42 0303 	adc.w	r3, r2, r3
 801151a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801151c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011520:	685b      	ldr	r3, [r3, #4]
 8011522:	2200      	movs	r2, #0
 8011524:	663b      	str	r3, [r7, #96]	@ 0x60
 8011526:	667a      	str	r2, [r7, #100]	@ 0x64
 8011528:	f04f 0200 	mov.w	r2, #0
 801152c:	f04f 0300 	mov.w	r3, #0
 8011530:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8011534:	4649      	mov	r1, r9
 8011536:	008b      	lsls	r3, r1, #2
 8011538:	4641      	mov	r1, r8
 801153a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801153e:	4641      	mov	r1, r8
 8011540:	008a      	lsls	r2, r1, #2
 8011542:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8011546:	f7ef fb87 	bl	8000c58 <__aeabi_uldivmod>
 801154a:	4602      	mov	r2, r0
 801154c:	460b      	mov	r3, r1
 801154e:	4b0d      	ldr	r3, [pc, #52]	@ (8011584 <UART_SetConfig+0x4e4>)
 8011550:	fba3 1302 	umull	r1, r3, r3, r2
 8011554:	095b      	lsrs	r3, r3, #5
 8011556:	2164      	movs	r1, #100	@ 0x64
 8011558:	fb01 f303 	mul.w	r3, r1, r3
 801155c:	1ad3      	subs	r3, r2, r3
 801155e:	011b      	lsls	r3, r3, #4
 8011560:	3332      	adds	r3, #50	@ 0x32
 8011562:	4a08      	ldr	r2, [pc, #32]	@ (8011584 <UART_SetConfig+0x4e4>)
 8011564:	fba2 2303 	umull	r2, r3, r2, r3
 8011568:	095b      	lsrs	r3, r3, #5
 801156a:	f003 020f 	and.w	r2, r3, #15
 801156e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	4422      	add	r2, r4
 8011576:	609a      	str	r2, [r3, #8]
}
 8011578:	bf00      	nop
 801157a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 801157e:	46bd      	mov	sp, r7
 8011580:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011584:	51eb851f 	.word	0x51eb851f

08011588 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011588:	b480      	push	{r7}
 801158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801158c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801158e:	4618      	mov	r0, r3
 8011590:	46bd      	mov	sp, r7
 8011592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011596:	4770      	bx	lr

08011598 <MX_MEMS_Init>:
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS4A1_DataLogTerminal_Init(void);
static void MX_IKS4A1_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_IKS4A1_DataLogTerminal_Init();
 801159c:	f000 f808 	bl	80115b0 <MX_IKS4A1_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 80115a0:	bf00      	nop
 80115a2:	bd80      	pop	{r7, pc}

080115a4 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_IKS4A1_DataLogTerminal_Process();
 80115a8:	f000 fa0a 	bl	80119c0 <MX_IKS4A1_DataLogTerminal_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 80115ac:	bf00      	nop
 80115ae:	bd80      	pop	{r7, pc}

080115b0 <MX_IKS4A1_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS4A1_DataLogTerminal_Init(void)
{
 80115b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115b2:	b089      	sub	sp, #36	@ 0x24
 80115b4:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int16_t i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 80115b6:	2000      	movs	r0, #0
 80115b8:	f7fa fc76 	bl	800bea8 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80115bc:	2101      	movs	r1, #1
 80115be:	2000      	movs	r0, #0
 80115c0:	f7fa fcc6 	bl	800bf50 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 80115c4:	2000      	movs	r0, #0
 80115c6:	f7fa fd17 	bl	800bff8 <BSP_PB_GetState>
 80115ca:	4603      	mov	r3, r0
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	bf0c      	ite	eq
 80115d0:	2301      	moveq	r3, #1
 80115d2:	2300      	movne	r3, #0
 80115d4:	b2db      	uxtb	r3, r3
 80115d6:	461a      	mov	r2, r3
 80115d8:	4b84      	ldr	r3, [pc, #528]	@ (80117ec <MX_IKS4A1_DataLogTerminal_Init+0x23c>)
 80115da:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 80115dc:	2000      	movs	r0, #0
 80115de:	f7fa fd6d 	bl	800c0bc <BSP_COM_Init>

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 80115e2:	4a83      	ldr	r2, [pc, #524]	@ (80117f0 <MX_IKS4A1_DataLogTerminal_Init+0x240>)
 80115e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80115e8:	4882      	ldr	r0, [pc, #520]	@ (80117f4 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80115ea:	f004 fa6b 	bl	8015ac4 <sniprintf>
  printf("%s", dataOut);
 80115ee:	4981      	ldr	r1, [pc, #516]	@ (80117f4 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80115f0:	4881      	ldr	r0, [pc, #516]	@ (80117f8 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 80115f2:	f004 f9f7 	bl	80159e4 <iprintf>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO | MOTION_GYRO);
 80115f6:	2103      	movs	r1, #3
 80115f8:	2001      	movs	r0, #1
 80115fa:	f7f9 ff0d 	bl	800b418 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSO16IS_0, MOTION_ACCELERO | MOTION_GYRO);
 80115fe:	2103      	movs	r1, #3
 8011600:	2003      	movs	r0, #3
 8011602:	f7f9 ff09 	bl	800b418 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2DUXS12_0, MOTION_ACCELERO);
 8011606:	2102      	movs	r1, #2
 8011608:	2002      	movs	r0, #2
 801160a:	f7f9 ff05 	bl	800b418 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2MDL_0, MOTION_MAGNETO);
 801160e:	2104      	movs	r1, #4
 8011610:	2000      	movs	r0, #0
 8011612:	f7f9 ff01 	bl	800b418 <IKS4A1_MOTION_SENSOR_Init>

  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 8011616:	2300      	movs	r3, #0
 8011618:	81fb      	strh	r3, [r7, #14]
 801161a:	e0d4      	b.n	80117c6 <MX_IKS4A1_DataLogTerminal_Init+0x216>
  {
    IKS4A1_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 801161c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8011620:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011624:	4613      	mov	r3, r2
 8011626:	00db      	lsls	r3, r3, #3
 8011628:	1a9b      	subs	r3, r3, r2
 801162a:	009b      	lsls	r3, r3, #2
 801162c:	4a73      	ldr	r2, [pc, #460]	@ (80117fc <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 801162e:	4413      	add	r3, r2
 8011630:	4619      	mov	r1, r3
 8011632:	f7fa f823 	bl	800b67c <IKS4A1_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 8011636:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 801163a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801163e:	486f      	ldr	r0, [pc, #444]	@ (80117fc <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8011640:	4613      	mov	r3, r2
 8011642:	00db      	lsls	r3, r3, #3
 8011644:	1a9b      	subs	r3, r3, r2
 8011646:	009b      	lsls	r3, r3, #2
 8011648:	4403      	add	r3, r0
 801164a:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 801164c:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 801164e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011652:	486a      	ldr	r0, [pc, #424]	@ (80117fc <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8011654:	4613      	mov	r3, r2
 8011656:	00db      	lsls	r3, r3, #3
 8011658:	1a9b      	subs	r3, r3, r2
 801165a:	009b      	lsls	r3, r3, #2
 801165c:	4403      	add	r3, r0
 801165e:	3301      	adds	r3, #1
 8011660:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8011662:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 8011664:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011668:	4864      	ldr	r0, [pc, #400]	@ (80117fc <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 801166a:	4613      	mov	r3, r2
 801166c:	00db      	lsls	r3, r3, #3
 801166e:	1a9b      	subs	r3, r3, r2
 8011670:	009b      	lsls	r3, r3, #2
 8011672:	4403      	add	r3, r0
 8011674:	3302      	adds	r3, #2
 8011676:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8011678:	461e      	mov	r6, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 801167a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801167e:	485f      	ldr	r0, [pc, #380]	@ (80117fc <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8011680:	4613      	mov	r3, r2
 8011682:	00db      	lsls	r3, r3, #3
 8011684:	1a9b      	subs	r3, r3, r2
 8011686:	009b      	lsls	r3, r3, #2
 8011688:	4403      	add	r3, r0
 801168a:	3303      	adds	r3, #3
 801168c:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 801168e:	9303      	str	r3, [sp, #12]
 8011690:	9602      	str	r6, [sp, #8]
 8011692:	9501      	str	r5, [sp, #4]
 8011694:	9400      	str	r4, [sp, #0]
 8011696:	460b      	mov	r3, r1
 8011698:	4a59      	ldr	r2, [pc, #356]	@ (8011800 <MX_IKS4A1_DataLogTerminal_Init+0x250>)
 801169a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801169e:	4855      	ldr	r0, [pc, #340]	@ (80117f4 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80116a0:	f004 fa10 	bl	8015ac4 <sniprintf>
    printf("%s", dataOut);
 80116a4:	4953      	ldr	r1, [pc, #332]	@ (80117f4 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80116a6:	4854      	ldr	r0, [pc, #336]	@ (80117f8 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 80116a8:	f004 f99c 	bl	80159e4 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 80116ac:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80116b0:	4952      	ldr	r1, [pc, #328]	@ (80117fc <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80116b2:	4613      	mov	r3, r2
 80116b4:	00db      	lsls	r3, r3, #3
 80116b6:	1a9b      	subs	r3, r3, r2
 80116b8:	009b      	lsls	r3, r3, #2
 80116ba:	440b      	add	r3, r1
 80116bc:	3314      	adds	r3, #20
 80116be:	edd3 7a00 	vldr	s15, [r3]
 80116c2:	463b      	mov	r3, r7
 80116c4:	2103      	movs	r1, #3
 80116c6:	4618      	mov	r0, r3
 80116c8:	eeb0 0a67 	vmov.f32	s0, s15
 80116cc:	f000 fa20 	bl	8011b10 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 80116d4:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 80116d6:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 80116d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80116dc:	4947      	ldr	r1, [pc, #284]	@ (80117fc <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80116de:	4613      	mov	r3, r2
 80116e0:	00db      	lsls	r3, r3, #3
 80116e2:	1a9b      	subs	r3, r3, r2
 80116e4:	009b      	lsls	r3, r3, #2
 80116e6:	440b      	add	r3, r1
 80116e8:	3308      	adds	r3, #8
 80116ea:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 80116ec:	9301      	str	r3, [sp, #4]
 80116ee:	9000      	str	r0, [sp, #0]
 80116f0:	4623      	mov	r3, r4
 80116f2:	4a44      	ldr	r2, [pc, #272]	@ (8011804 <MX_IKS4A1_DataLogTerminal_Init+0x254>)
 80116f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80116f8:	483e      	ldr	r0, [pc, #248]	@ (80117f4 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80116fa:	f004 f9e3 	bl	8015ac4 <sniprintf>
    printf("%s", dataOut);
 80116fe:	493d      	ldr	r1, [pc, #244]	@ (80117f4 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8011700:	483d      	ldr	r0, [pc, #244]	@ (80117f8 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8011702:	f004 f96f 	bl	80159e4 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 8011706:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801170a:	493c      	ldr	r1, [pc, #240]	@ (80117fc <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 801170c:	4613      	mov	r3, r2
 801170e:	00db      	lsls	r3, r3, #3
 8011710:	1a9b      	subs	r3, r3, r2
 8011712:	009b      	lsls	r3, r3, #2
 8011714:	440b      	add	r3, r1
 8011716:	3310      	adds	r3, #16
 8011718:	edd3 7a00 	vldr	s15, [r3]
 801171c:	463b      	mov	r3, r7
 801171e:	2103      	movs	r1, #3
 8011720:	4618      	mov	r0, r3
 8011722:	eeb0 0a67 	vmov.f32	s0, s15
 8011726:	f000 f9f3 	bl	8011b10 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 801172e:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8011730:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8011732:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011736:	4931      	ldr	r1, [pc, #196]	@ (80117fc <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8011738:	4613      	mov	r3, r2
 801173a:	00db      	lsls	r3, r3, #3
 801173c:	1a9b      	subs	r3, r3, r2
 801173e:	009b      	lsls	r3, r3, #2
 8011740:	440b      	add	r3, r1
 8011742:	3304      	adds	r3, #4
 8011744:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8011746:	9301      	str	r3, [sp, #4]
 8011748:	9000      	str	r0, [sp, #0]
 801174a:	4623      	mov	r3, r4
 801174c:	4a2e      	ldr	r2, [pc, #184]	@ (8011808 <MX_IKS4A1_DataLogTerminal_Init+0x258>)
 801174e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011752:	4828      	ldr	r0, [pc, #160]	@ (80117f4 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8011754:	f004 f9b6 	bl	8015ac4 <sniprintf>
    printf("%s", dataOut);
 8011758:	4926      	ldr	r1, [pc, #152]	@ (80117f4 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 801175a:	4827      	ldr	r0, [pc, #156]	@ (80117f8 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 801175c:	f004 f942 	bl	80159e4 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 8011760:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011764:	4925      	ldr	r1, [pc, #148]	@ (80117fc <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8011766:	4613      	mov	r3, r2
 8011768:	00db      	lsls	r3, r3, #3
 801176a:	1a9b      	subs	r3, r3, r2
 801176c:	009b      	lsls	r3, r3, #2
 801176e:	440b      	add	r3, r1
 8011770:	3318      	adds	r3, #24
 8011772:	edd3 7a00 	vldr	s15, [r3]
 8011776:	463b      	mov	r3, r7
 8011778:	2103      	movs	r1, #3
 801177a:	4618      	mov	r0, r3
 801177c:	eeb0 0a67 	vmov.f32	s0, s15
 8011780:	f000 f9c6 	bl	8011b10 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 8011788:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 801178a:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 801178c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011790:	491a      	ldr	r1, [pc, #104]	@ (80117fc <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8011792:	4613      	mov	r3, r2
 8011794:	00db      	lsls	r3, r3, #3
 8011796:	1a9b      	subs	r3, r3, r2
 8011798:	009b      	lsls	r3, r3, #2
 801179a:	440b      	add	r3, r1
 801179c:	330c      	adds	r3, #12
 801179e:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 80117a0:	9301      	str	r3, [sp, #4]
 80117a2:	9000      	str	r0, [sp, #0]
 80117a4:	4623      	mov	r3, r4
 80117a6:	4a19      	ldr	r2, [pc, #100]	@ (801180c <MX_IKS4A1_DataLogTerminal_Init+0x25c>)
 80117a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80117ac:	4811      	ldr	r0, [pc, #68]	@ (80117f4 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80117ae:	f004 f989 	bl	8015ac4 <sniprintf>
    printf("%s", dataOut);
 80117b2:	4910      	ldr	r1, [pc, #64]	@ (80117f4 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80117b4:	4810      	ldr	r0, [pc, #64]	@ (80117f8 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 80117b6:	f004 f915 	bl	80159e4 <iprintf>
  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 80117ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80117be:	b29b      	uxth	r3, r3
 80117c0:	3301      	adds	r3, #1
 80117c2:	b29b      	uxth	r3, r3
 80117c4:	81fb      	strh	r3, [r7, #14]
 80117c6:	89fb      	ldrh	r3, [r7, #14]
 80117c8:	2b03      	cmp	r3, #3
 80117ca:	f67f af27 	bls.w	801161c <MX_IKS4A1_DataLogTerminal_Init+0x6c>
  }

  IKS4A1_ENV_SENSOR_Init(IKS4A1_SHT40AD1B_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 80117ce:	2105      	movs	r1, #5
 80117d0:	2002      	movs	r0, #2
 80117d2:	f7f9 f9e5 	bl	800aba0 <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_LPS22DF_0, ENV_TEMPERATURE | ENV_PRESSURE);
 80117d6:	2103      	movs	r1, #3
 80117d8:	2001      	movs	r0, #1
 80117da:	f7f9 f9e1 	bl	800aba0 <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_STTS22H_0, ENV_TEMPERATURE);
 80117de:	2101      	movs	r1, #1
 80117e0:	2000      	movs	r0, #0
 80117e2:	f7f9 f9dd 	bl	800aba0 <IKS4A1_ENV_SENSOR_Init>

  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 80117e6:	2300      	movs	r3, #0
 80117e8:	81fb      	strh	r3, [r7, #14]
 80117ea:	e0c2      	b.n	8011972 <MX_IKS4A1_DataLogTerminal_Init+0x3c2>
 80117ec:	20000d54 	.word	0x20000d54
 80117f0:	08017d84 	.word	0x08017d84
 80117f4:	20000c54 	.word	0x20000c54
 80117f8:	08017dd4 	.word	0x08017dd4
 80117fc:	20000b9c 	.word	0x20000b9c
 8011800:	08017dd8 	.word	0x08017dd8
 8011804:	08017e4c 	.word	0x08017e4c
 8011808:	08017e78 	.word	0x08017e78
 801180c:	08017ea8 	.word	0x08017ea8
  {
    IKS4A1_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 8011810:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8011814:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011818:	4613      	mov	r3, r2
 801181a:	005b      	lsls	r3, r3, #1
 801181c:	4413      	add	r3, r2
 801181e:	00db      	lsls	r3, r3, #3
 8011820:	4a58      	ldr	r2, [pc, #352]	@ (8011984 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8011822:	4413      	add	r3, r2
 8011824:	4619      	mov	r1, r3
 8011826:	f7f9 fac9 	bl	800adbc <IKS4A1_ENV_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 801182a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 801182e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011832:	4854      	ldr	r0, [pc, #336]	@ (8011984 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8011834:	4613      	mov	r3, r2
 8011836:	005b      	lsls	r3, r3, #1
 8011838:	4413      	add	r3, r2
 801183a:	00db      	lsls	r3, r3, #3
 801183c:	4403      	add	r3, r0
 801183e:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8011840:	461c      	mov	r4, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8011842:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011846:	484f      	ldr	r0, [pc, #316]	@ (8011984 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8011848:	4613      	mov	r3, r2
 801184a:	005b      	lsls	r3, r3, #1
 801184c:	4413      	add	r3, r2
 801184e:	00db      	lsls	r3, r3, #3
 8011850:	4403      	add	r3, r0
 8011852:	3301      	adds	r3, #1
 8011854:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8011856:	461d      	mov	r5, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8011858:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801185c:	4849      	ldr	r0, [pc, #292]	@ (8011984 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 801185e:	4613      	mov	r3, r2
 8011860:	005b      	lsls	r3, r3, #1
 8011862:	4413      	add	r3, r2
 8011864:	00db      	lsls	r3, r3, #3
 8011866:	4403      	add	r3, r0
 8011868:	3302      	adds	r3, #2
 801186a:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 801186c:	461e      	mov	r6, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 801186e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011872:	4844      	ldr	r0, [pc, #272]	@ (8011984 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8011874:	4613      	mov	r3, r2
 8011876:	005b      	lsls	r3, r3, #1
 8011878:	4413      	add	r3, r2
 801187a:	00db      	lsls	r3, r3, #3
 801187c:	4403      	add	r3, r0
 801187e:	3304      	adds	r3, #4
 8011880:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8011882:	9303      	str	r3, [sp, #12]
 8011884:	9602      	str	r6, [sp, #8]
 8011886:	9501      	str	r5, [sp, #4]
 8011888:	9400      	str	r4, [sp, #0]
 801188a:	460b      	mov	r3, r1
 801188c:	4a3e      	ldr	r2, [pc, #248]	@ (8011988 <MX_IKS4A1_DataLogTerminal_Init+0x3d8>)
 801188e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011892:	483e      	ldr	r0, [pc, #248]	@ (801198c <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8011894:	f004 f916 	bl	8015ac4 <sniprintf>
    printf("%s", dataOut);
 8011898:	493c      	ldr	r1, [pc, #240]	@ (801198c <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 801189a:	483d      	ldr	r0, [pc, #244]	@ (8011990 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 801189c:	f004 f8a2 	bl	80159e4 <iprintf>
    floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 80118a0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80118a4:	4937      	ldr	r1, [pc, #220]	@ (8011984 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80118a6:	4613      	mov	r3, r2
 80118a8:	005b      	lsls	r3, r3, #1
 80118aa:	4413      	add	r3, r2
 80118ac:	00db      	lsls	r3, r3, #3
 80118ae:	440b      	add	r3, r1
 80118b0:	330c      	adds	r3, #12
 80118b2:	edd3 7a00 	vldr	s15, [r3]
 80118b6:	463b      	mov	r3, r7
 80118b8:	2103      	movs	r1, #3
 80118ba:	4618      	mov	r0, r3
 80118bc:	eeb0 0a67 	vmov.f32	s0, s15
 80118c0:	f000 f926 	bl	8011b10 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 80118c8:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 80118ca:	9300      	str	r3, [sp, #0]
 80118cc:	4613      	mov	r3, r2
 80118ce:	4a31      	ldr	r2, [pc, #196]	@ (8011994 <MX_IKS4A1_DataLogTerminal_Init+0x3e4>)
 80118d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80118d4:	482d      	ldr	r0, [pc, #180]	@ (801198c <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 80118d6:	f004 f8f5 	bl	8015ac4 <sniprintf>
    printf("%s", dataOut);
 80118da:	492c      	ldr	r1, [pc, #176]	@ (801198c <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 80118dc:	482c      	ldr	r0, [pc, #176]	@ (8011990 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 80118de:	f004 f881 	bl	80159e4 <iprintf>
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 80118e2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80118e6:	4927      	ldr	r1, [pc, #156]	@ (8011984 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80118e8:	4613      	mov	r3, r2
 80118ea:	005b      	lsls	r3, r3, #1
 80118ec:	4413      	add	r3, r2
 80118ee:	00db      	lsls	r3, r3, #3
 80118f0:	440b      	add	r3, r1
 80118f2:	3310      	adds	r3, #16
 80118f4:	edd3 7a00 	vldr	s15, [r3]
 80118f8:	463b      	mov	r3, r7
 80118fa:	2103      	movs	r1, #3
 80118fc:	4618      	mov	r0, r3
 80118fe:	eeb0 0a67 	vmov.f32	s0, s15
 8011902:	f000 f905 	bl	8011b10 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 801190a:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 801190c:	9300      	str	r3, [sp, #0]
 801190e:	4613      	mov	r3, r2
 8011910:	4a21      	ldr	r2, [pc, #132]	@ (8011998 <MX_IKS4A1_DataLogTerminal_Init+0x3e8>)
 8011912:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011916:	481d      	ldr	r0, [pc, #116]	@ (801198c <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8011918:	f004 f8d4 	bl	8015ac4 <sniprintf>
    printf("%s", dataOut);
 801191c:	491b      	ldr	r1, [pc, #108]	@ (801198c <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 801191e:	481c      	ldr	r0, [pc, #112]	@ (8011990 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8011920:	f004 f860 	bl	80159e4 <iprintf>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 8011924:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011928:	4916      	ldr	r1, [pc, #88]	@ (8011984 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 801192a:	4613      	mov	r3, r2
 801192c:	005b      	lsls	r3, r3, #1
 801192e:	4413      	add	r3, r2
 8011930:	00db      	lsls	r3, r3, #3
 8011932:	440b      	add	r3, r1
 8011934:	3308      	adds	r3, #8
 8011936:	edd3 7a00 	vldr	s15, [r3]
 801193a:	463b      	mov	r3, r7
 801193c:	2103      	movs	r1, #3
 801193e:	4618      	mov	r0, r3
 8011940:	eeb0 0a67 	vmov.f32	s0, s15
 8011944:	f000 f8e4 	bl	8011b10 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	461a      	mov	r2, r3
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	9300      	str	r3, [sp, #0]
 8011950:	4613      	mov	r3, r2
 8011952:	4a12      	ldr	r2, [pc, #72]	@ (801199c <MX_IKS4A1_DataLogTerminal_Init+0x3ec>)
 8011954:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011958:	480c      	ldr	r0, [pc, #48]	@ (801198c <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 801195a:	f004 f8b3 	bl	8015ac4 <sniprintf>
    printf("%s", dataOut);
 801195e:	490b      	ldr	r1, [pc, #44]	@ (801198c <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8011960:	480b      	ldr	r0, [pc, #44]	@ (8011990 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8011962:	f004 f83f 	bl	80159e4 <iprintf>
  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 8011966:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801196a:	b29b      	uxth	r3, r3
 801196c:	3301      	adds	r3, #1
 801196e:	b29b      	uxth	r3, r3
 8011970:	81fb      	strh	r3, [r7, #14]
 8011972:	89fb      	ldrh	r3, [r7, #14]
 8011974:	2b02      	cmp	r3, #2
 8011976:	f67f af4b 	bls.w	8011810 <MX_IKS4A1_DataLogTerminal_Init+0x260>
  }
}
 801197a:	bf00      	nop
 801197c:	bf00      	nop
 801197e:	3714      	adds	r7, #20
 8011980:	46bd      	mov	sp, r7
 8011982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011984:	20000c0c 	.word	0x20000c0c
 8011988:	08017ed4 	.word	0x08017ed4
 801198c:	20000c54 	.word	0x20000c54
 8011990:	08017dd4 	.word	0x08017dd4
 8011994:	08017f48 	.word	0x08017f48
 8011998:	08017f64 	.word	0x08017f64
 801199c:	08017f84 	.word	0x08017f84

080119a0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80119a0:	b480      	push	{r7}
 80119a2:	b083      	sub	sp, #12
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	4603      	mov	r3, r0
 80119a8:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 80119aa:	4b04      	ldr	r3, [pc, #16]	@ (80119bc <BSP_PB_Callback+0x1c>)
 80119ac:	2201      	movs	r2, #1
 80119ae:	701a      	strb	r2, [r3, #0]
}
 80119b0:	bf00      	nop
 80119b2:	370c      	adds	r7, #12
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr
 80119bc:	20000b98 	.word	0x20000b98

080119c0 <MX_IKS4A1_DataLogTerminal_Process>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_IKS4A1_DataLogTerminal_Process(void)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b082      	sub	sp, #8
 80119c4:	af00      	add	r7, sp, #0
  int32_t i;

  if (PushButtonDetected != 0U)
 80119c6:	4b4a      	ldr	r3, [pc, #296]	@ (8011af0 <MX_IKS4A1_DataLogTerminal_Process+0x130>)
 80119c8:	781b      	ldrb	r3, [r3, #0]
 80119ca:	b2db      	uxtb	r3, r3
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d013      	beq.n	80119f8 <MX_IKS4A1_DataLogTerminal_Process+0x38>
  {
    /* Debouncing */
    HAL_Delay(50);
 80119d0:	2032      	movs	r0, #50	@ 0x32
 80119d2:	f7fa fcb5 	bl	800c340 <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState(BUTTON_KEY) == PushButtonState));
 80119d6:	bf00      	nop
 80119d8:	2000      	movs	r0, #0
 80119da:	f7fa fb0d 	bl	800bff8 <BSP_PB_GetState>
 80119de:	4602      	mov	r2, r0
 80119e0:	4b44      	ldr	r3, [pc, #272]	@ (8011af4 <MX_IKS4A1_DataLogTerminal_Process+0x134>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d0f7      	beq.n	80119d8 <MX_IKS4A1_DataLogTerminal_Process+0x18>

    /* Debouncing */
    HAL_Delay(50);
 80119e8:	2032      	movs	r0, #50	@ 0x32
 80119ea:	f7fa fca9 	bl	800c340 <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 80119ee:	4b40      	ldr	r3, [pc, #256]	@ (8011af0 <MX_IKS4A1_DataLogTerminal_Process+0x130>)
 80119f0:	2200      	movs	r2, #0
 80119f2:	701a      	strb	r2, [r3, #0]

    MX_IKS4A1_DataLogTerminal_Init();
 80119f4:	f7ff fddc 	bl	80115b0 <MX_IKS4A1_DataLogTerminal_Init>
  }

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 80119f8:	4a3f      	ldr	r2, [pc, #252]	@ (8011af8 <MX_IKS4A1_DataLogTerminal_Process+0x138>)
 80119fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80119fe:	483f      	ldr	r0, [pc, #252]	@ (8011afc <MX_IKS4A1_DataLogTerminal_Process+0x13c>)
 8011a00:	f004 f860 	bl	8015ac4 <sniprintf>
  printf("%s", dataOut);
 8011a04:	493d      	ldr	r1, [pc, #244]	@ (8011afc <MX_IKS4A1_DataLogTerminal_Process+0x13c>)
 8011a06:	483e      	ldr	r0, [pc, #248]	@ (8011b00 <MX_IKS4A1_DataLogTerminal_Process+0x140>)
 8011a08:	f003 ffec 	bl	80159e4 <iprintf>

  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	607b      	str	r3, [r7, #4]
 8011a10:	e02e      	b.n	8011a70 <MX_IKS4A1_DataLogTerminal_Process+0xb0>
  {
    if(MotionCapabilities[i].Acc)
 8011a12:	493c      	ldr	r1, [pc, #240]	@ (8011b04 <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 8011a14:	687a      	ldr	r2, [r7, #4]
 8011a16:	4613      	mov	r3, r2
 8011a18:	00db      	lsls	r3, r3, #3
 8011a1a:	1a9b      	subs	r3, r3, r2
 8011a1c:	009b      	lsls	r3, r3, #2
 8011a1e:	440b      	add	r3, r1
 8011a20:	781b      	ldrb	r3, [r3, #0]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d003      	beq.n	8011a2e <MX_IKS4A1_DataLogTerminal_Process+0x6e>
    {
      Accelero_Sensor_Handler(i);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f000 f8f1 	bl	8011c10 <Accelero_Sensor_Handler>
    }
    if(MotionCapabilities[i].Gyro)
 8011a2e:	4935      	ldr	r1, [pc, #212]	@ (8011b04 <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 8011a30:	687a      	ldr	r2, [r7, #4]
 8011a32:	4613      	mov	r3, r2
 8011a34:	00db      	lsls	r3, r3, #3
 8011a36:	1a9b      	subs	r3, r3, r2
 8011a38:	009b      	lsls	r3, r3, #2
 8011a3a:	440b      	add	r3, r1
 8011a3c:	3301      	adds	r3, #1
 8011a3e:	781b      	ldrb	r3, [r3, #0]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d003      	beq.n	8011a4c <MX_IKS4A1_DataLogTerminal_Process+0x8c>
    {
      Gyro_Sensor_Handler(i);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	4618      	mov	r0, r3
 8011a48:	f000 f9a2 	bl	8011d90 <Gyro_Sensor_Handler>
    }
    if(MotionCapabilities[i].Magneto)
 8011a4c:	492d      	ldr	r1, [pc, #180]	@ (8011b04 <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 8011a4e:	687a      	ldr	r2, [r7, #4]
 8011a50:	4613      	mov	r3, r2
 8011a52:	00db      	lsls	r3, r3, #3
 8011a54:	1a9b      	subs	r3, r3, r2
 8011a56:	009b      	lsls	r3, r3, #2
 8011a58:	440b      	add	r3, r1
 8011a5a:	3302      	adds	r3, #2
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d003      	beq.n	8011a6a <MX_IKS4A1_DataLogTerminal_Process+0xaa>
    {
      Magneto_Sensor_Handler(i);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	4618      	mov	r0, r3
 8011a66:	f000 fa53 	bl	8011f10 <Magneto_Sensor_Handler>
  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	3301      	adds	r3, #1
 8011a6e:	607b      	str	r3, [r7, #4]
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2b03      	cmp	r3, #3
 8011a74:	d9cd      	bls.n	8011a12 <MX_IKS4A1_DataLogTerminal_Process+0x52>
    }
  }

  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 8011a76:	2300      	movs	r3, #0
 8011a78:	607b      	str	r3, [r7, #4]
 8011a7a:	e02e      	b.n	8011ada <MX_IKS4A1_DataLogTerminal_Process+0x11a>
  {
    if(EnvCapabilities[i].Humidity)
 8011a7c:	4922      	ldr	r1, [pc, #136]	@ (8011b08 <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 8011a7e:	687a      	ldr	r2, [r7, #4]
 8011a80:	4613      	mov	r3, r2
 8011a82:	005b      	lsls	r3, r3, #1
 8011a84:	4413      	add	r3, r2
 8011a86:	00db      	lsls	r3, r3, #3
 8011a88:	440b      	add	r3, r1
 8011a8a:	3302      	adds	r3, #2
 8011a8c:	781b      	ldrb	r3, [r3, #0]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d003      	beq.n	8011a9a <MX_IKS4A1_DataLogTerminal_Process+0xda>
    {
      Hum_Sensor_Handler(i);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	4618      	mov	r0, r3
 8011a96:	f000 fc43 	bl	8012320 <Hum_Sensor_Handler>
    }
    if(EnvCapabilities[i].Temperature)
 8011a9a:	491b      	ldr	r1, [pc, #108]	@ (8011b08 <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 8011a9c:	687a      	ldr	r2, [r7, #4]
 8011a9e:	4613      	mov	r3, r2
 8011aa0:	005b      	lsls	r3, r3, #1
 8011aa2:	4413      	add	r3, r2
 8011aa4:	00db      	lsls	r3, r3, #3
 8011aa6:	440b      	add	r3, r1
 8011aa8:	781b      	ldrb	r3, [r3, #0]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d003      	beq.n	8011ab6 <MX_IKS4A1_DataLogTerminal_Process+0xf6>
    {
      Temp_Sensor_Handler(i);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	f000 faed 	bl	8012090 <Temp_Sensor_Handler>
    }
    if(EnvCapabilities[i].Pressure)
 8011ab6:	4914      	ldr	r1, [pc, #80]	@ (8011b08 <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 8011ab8:	687a      	ldr	r2, [r7, #4]
 8011aba:	4613      	mov	r3, r2
 8011abc:	005b      	lsls	r3, r3, #1
 8011abe:	4413      	add	r3, r2
 8011ac0:	00db      	lsls	r3, r3, #3
 8011ac2:	440b      	add	r3, r1
 8011ac4:	3301      	adds	r3, #1
 8011ac6:	781b      	ldrb	r3, [r3, #0]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d003      	beq.n	8011ad4 <MX_IKS4A1_DataLogTerminal_Process+0x114>
    {
      Press_Sensor_Handler(i);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f000 fb86 	bl	80121e0 <Press_Sensor_Handler>
  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	3301      	adds	r3, #1
 8011ad8:	607b      	str	r3, [r7, #4]
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	2b02      	cmp	r3, #2
 8011ade:	d9cd      	bls.n	8011a7c <MX_IKS4A1_DataLogTerminal_Process+0xbc>
    }
  }

  HAL_Delay( 1000 );
 8011ae0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8011ae4:	f7fa fc2c 	bl	800c340 <HAL_Delay>
}
 8011ae8:	bf00      	nop
 8011aea:	3708      	adds	r7, #8
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bd80      	pop	{r7, pc}
 8011af0:	20000b98 	.word	0x20000b98
 8011af4:	20000d54 	.word	0x20000d54
 8011af8:	08017d84 	.word	0x08017d84
 8011afc:	20000c54 	.word	0x20000c54
 8011b00:	08017dd4 	.word	0x08017dd4
 8011b04:	20000b9c 	.word	0x20000b9c
 8011b08:	20000c0c 	.word	0x20000c0c
 8011b0c:	00000000 	.word	0x00000000

08011b10 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 8011b10:	b5b0      	push	{r4, r5, r7, lr}
 8011b12:	b084      	sub	sp, #16
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	ed87 0a03 	vstr	s0, [r7, #12]
 8011b1a:	60b8      	str	r0, [r7, #8]
 8011b1c:	6079      	str	r1, [r7, #4]
  if (in >= 0.0f)
 8011b1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8011b22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b2a:	db03      	blt.n	8011b34 <floatToInt+0x24>
  {
    out_value->sign = 0;
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	701a      	strb	r2, [r3, #0]
 8011b32:	e008      	b.n	8011b46 <floatToInt+0x36>
  }
  else
  {
    out_value->sign = 1;
 8011b34:	68bb      	ldr	r3, [r7, #8]
 8011b36:	2201      	movs	r2, #1
 8011b38:	701a      	strb	r2, [r3, #0]
    in = -in;
 8011b3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8011b3e:	eef1 7a67 	vneg.f32	s15, s15
 8011b42:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / (float)pow(10, (double)dec_prec));
 8011b46:	6878      	ldr	r0, [r7, #4]
 8011b48:	f7ee fcf4 	bl	8000534 <__aeabi_i2d>
 8011b4c:	4602      	mov	r2, r0
 8011b4e:	460b      	mov	r3, r1
 8011b50:	ec43 2b11 	vmov	d1, r2, r3
 8011b54:	ed9f 0b2c 	vldr	d0, [pc, #176]	@ 8011c08 <floatToInt+0xf8>
 8011b58:	f004 ff4c 	bl	80169f4 <pow>
 8011b5c:	ec53 2b10 	vmov	r2, r3, d0
 8011b60:	4610      	mov	r0, r2
 8011b62:	4619      	mov	r1, r3
 8011b64:	f7ef f828 	bl	8000bb8 <__aeabi_d2f>
 8011b68:	ee06 0a90 	vmov	s13, r0
 8011b6c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011b74:	ed97 7a03 	vldr	s14, [r7, #12]
 8011b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b7c:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_int = (int32_t)in;
 8011b80:	edd7 7a03 	vldr	s15, [r7, #12]
 8011b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b88:	ee17 2a90 	vmov	r2, s15
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 8011b90:	68bb      	ldr	r3, [r7, #8]
 8011b92:	685b      	ldr	r3, [r3, #4]
 8011b94:	ee07 3a90 	vmov	s15, r3
 8011b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8011ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ba4:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc((double)in * pow(10, (double)dec_prec));
 8011ba8:	68f8      	ldr	r0, [r7, #12]
 8011baa:	f7ee fcd5 	bl	8000558 <__aeabi_f2d>
 8011bae:	4604      	mov	r4, r0
 8011bb0:	460d      	mov	r5, r1
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f7ee fcbe 	bl	8000534 <__aeabi_i2d>
 8011bb8:	4602      	mov	r2, r0
 8011bba:	460b      	mov	r3, r1
 8011bbc:	ec43 2b11 	vmov	d1, r2, r3
 8011bc0:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 8011c08 <floatToInt+0xf8>
 8011bc4:	f004 ff16 	bl	80169f4 <pow>
 8011bc8:	ec53 2b10 	vmov	r2, r3, d0
 8011bcc:	4620      	mov	r0, r4
 8011bce:	4629      	mov	r1, r5
 8011bd0:	f7ee fd1a 	bl	8000608 <__aeabi_dmul>
 8011bd4:	4602      	mov	r2, r0
 8011bd6:	460b      	mov	r3, r1
 8011bd8:	ec43 2b17 	vmov	d7, r2, r3
 8011bdc:	eeb0 0a47 	vmov.f32	s0, s14
 8011be0:	eef0 0a67 	vmov.f32	s1, s15
 8011be4:	f004 ff82 	bl	8016aec <trunc>
 8011be8:	ec53 2b10 	vmov	r2, r3, d0
 8011bec:	4610      	mov	r0, r2
 8011bee:	4619      	mov	r1, r3
 8011bf0:	f7ee ffba 	bl	8000b68 <__aeabi_d2iz>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	461a      	mov	r2, r3
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	609a      	str	r2, [r3, #8]
}
 8011bfc:	bf00      	nop
 8011bfe:	3710      	adds	r7, #16
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bdb0      	pop	{r4, r5, r7, pc}
 8011c04:	f3af 8000 	nop.w
 8011c08:	00000000 	.word	0x00000000
 8011c0c:	40240000 	.word	0x40240000

08011c10 <Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Accelero_Sensor_Handler(uint32_t Instance)
{
 8011c10:	b5b0      	push	{r4, r5, r7, lr}
 8011c12:	b092      	sub	sp, #72	@ 0x48
 8011c14:	af06      	add	r7, sp, #24
 8011c16:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t acceleration;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	4a51      	ldr	r2, [pc, #324]	@ (8011d60 <Accelero_Sensor_Handler+0x150>)
 8011c1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011c20:	4850      	ldr	r0, [pc, #320]	@ (8011d64 <Accelero_Sensor_Handler+0x154>)
 8011c22:	f003 ff4f 	bl	8015ac4 <sniprintf>
  printf("%s", dataOut);
 8011c26:	494f      	ldr	r1, [pc, #316]	@ (8011d64 <Accelero_Sensor_Handler+0x154>)
 8011c28:	484f      	ldr	r0, [pc, #316]	@ (8011d68 <Accelero_Sensor_Handler+0x158>)
 8011c2a:	f003 fedb 	bl	80159e4 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 8011c2e:	f107 031c 	add.w	r3, r7, #28
 8011c32:	461a      	mov	r2, r3
 8011c34:	2102      	movs	r1, #2
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f7f9 fd74 	bl	800b724 <IKS4A1_MOTION_SENSOR_GetAxes>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d007      	beq.n	8011c52 <Accelero_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	4a49      	ldr	r2, [pc, #292]	@ (8011d6c <Accelero_Sensor_Handler+0x15c>)
 8011c46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011c4a:	4846      	ldr	r0, [pc, #280]	@ (8011d64 <Accelero_Sensor_Handler+0x154>)
 8011c4c:	f003 ff3a 	bl	8015ac4 <sniprintf>
 8011c50:	e011      	b.n	8011c76 <Accelero_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8011c52:	687d      	ldr	r5, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8011c54:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8011c56:	687a      	ldr	r2, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8011c58:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8011c5a:	6878      	ldr	r0, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8011c5c:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8011c5e:	9404      	str	r4, [sp, #16]
 8011c60:	9003      	str	r0, [sp, #12]
 8011c62:	9102      	str	r1, [sp, #8]
 8011c64:	9201      	str	r2, [sp, #4]
 8011c66:	9300      	str	r3, [sp, #0]
 8011c68:	462b      	mov	r3, r5
 8011c6a:	4a41      	ldr	r2, [pc, #260]	@ (8011d70 <Accelero_Sensor_Handler+0x160>)
 8011c6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011c70:	483c      	ldr	r0, [pc, #240]	@ (8011d64 <Accelero_Sensor_Handler+0x154>)
 8011c72:	f003 ff27 	bl	8015ac4 <sniprintf>
  }

  printf("%s", dataOut);
 8011c76:	493b      	ldr	r1, [pc, #236]	@ (8011d64 <Accelero_Sensor_Handler+0x154>)
 8011c78:	483b      	ldr	r0, [pc, #236]	@ (8011d68 <Accelero_Sensor_Handler+0x158>)
 8011c7a:	f003 feb3 	bl	80159e4 <iprintf>

  if (verbose == 1)
 8011c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8011d74 <Accelero_Sensor_Handler+0x164>)
 8011c80:	781b      	ldrb	r3, [r3, #0]
 8011c82:	2b01      	cmp	r3, #1
 8011c84:	d168      	bne.n	8011d58 <Accelero_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8011c86:	f107 030f 	add.w	r3, r7, #15
 8011c8a:	4619      	mov	r1, r3
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f7f9 fd1f 	bl	800b6d0 <IKS4A1_MOTION_SENSOR_ReadID>
 8011c92:	4603      	mov	r3, r0
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d007      	beq.n	8011ca8 <Accelero_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	4a37      	ldr	r2, [pc, #220]	@ (8011d78 <Accelero_Sensor_Handler+0x168>)
 8011c9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011ca0:	4830      	ldr	r0, [pc, #192]	@ (8011d64 <Accelero_Sensor_Handler+0x154>)
 8011ca2:	f003 ff0f 	bl	8015ac4 <sniprintf>
 8011ca6:	e008      	b.n	8011cba <Accelero_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	7bfa      	ldrb	r2, [r7, #15]
 8011cac:	9200      	str	r2, [sp, #0]
 8011cae:	4a33      	ldr	r2, [pc, #204]	@ (8011d7c <Accelero_Sensor_Handler+0x16c>)
 8011cb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011cb4:	482b      	ldr	r0, [pc, #172]	@ (8011d64 <Accelero_Sensor_Handler+0x154>)
 8011cb6:	f003 ff05 	bl	8015ac4 <sniprintf>
    }

    printf("%s", dataOut);
 8011cba:	492a      	ldr	r1, [pc, #168]	@ (8011d64 <Accelero_Sensor_Handler+0x154>)
 8011cbc:	482a      	ldr	r0, [pc, #168]	@ (8011d68 <Accelero_Sensor_Handler+0x158>)
 8011cbe:	f003 fe91 	bl	80159e4 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_ACCELERO, &odr))
 8011cc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	2102      	movs	r1, #2
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f7f9 fd6e 	bl	800b7ac <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d007      	beq.n	8011ce6 <Accelero_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	4a29      	ldr	r2, [pc, #164]	@ (8011d80 <Accelero_Sensor_Handler+0x170>)
 8011cda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011cde:	4821      	ldr	r0, [pc, #132]	@ (8011d64 <Accelero_Sensor_Handler+0x154>)
 8011ce0:	f003 fef0 	bl	8015ac4 <sniprintf>
 8011ce4:	e014      	b.n	8011d10 <Accelero_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8011ce6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011cea:	f107 0310 	add.w	r3, r7, #16
 8011cee:	2103      	movs	r1, #3
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8011cf6:	f7ff ff0b 	bl	8011b10 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8011cfe:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011d00:	9101      	str	r1, [sp, #4]
 8011d02:	9200      	str	r2, [sp, #0]
 8011d04:	4a1f      	ldr	r2, [pc, #124]	@ (8011d84 <Accelero_Sensor_Handler+0x174>)
 8011d06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011d0a:	4816      	ldr	r0, [pc, #88]	@ (8011d64 <Accelero_Sensor_Handler+0x154>)
 8011d0c:	f003 feda 	bl	8015ac4 <sniprintf>
    }

    printf("%s", dataOut);
 8011d10:	4914      	ldr	r1, [pc, #80]	@ (8011d64 <Accelero_Sensor_Handler+0x154>)
 8011d12:	4815      	ldr	r0, [pc, #84]	@ (8011d68 <Accelero_Sensor_Handler+0x158>)
 8011d14:	f003 fe66 	bl	80159e4 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_ACCELERO, &fullScale))
 8011d18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	2102      	movs	r1, #2
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f7f9 fd87 	bl	800b834 <IKS4A1_MOTION_SENSOR_GetFullScale>
 8011d26:	4603      	mov	r3, r0
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d007      	beq.n	8011d3c <Accelero_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	4a16      	ldr	r2, [pc, #88]	@ (8011d88 <Accelero_Sensor_Handler+0x178>)
 8011d30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011d34:	480b      	ldr	r0, [pc, #44]	@ (8011d64 <Accelero_Sensor_Handler+0x154>)
 8011d36:	f003 fec5 	bl	8015ac4 <sniprintf>
 8011d3a:	e009      	b.n	8011d50 <Accelero_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
 8011d3c:	687a      	ldr	r2, [r7, #4]
 8011d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d40:	9300      	str	r3, [sp, #0]
 8011d42:	4613      	mov	r3, r2
 8011d44:	4a11      	ldr	r2, [pc, #68]	@ (8011d8c <Accelero_Sensor_Handler+0x17c>)
 8011d46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011d4a:	4806      	ldr	r0, [pc, #24]	@ (8011d64 <Accelero_Sensor_Handler+0x154>)
 8011d4c:	f003 feba 	bl	8015ac4 <sniprintf>
    }

    printf("%s", dataOut);
 8011d50:	4904      	ldr	r1, [pc, #16]	@ (8011d64 <Accelero_Sensor_Handler+0x154>)
 8011d52:	4805      	ldr	r0, [pc, #20]	@ (8011d68 <Accelero_Sensor_Handler+0x158>)
 8011d54:	f003 fe46 	bl	80159e4 <iprintf>
  }
}
 8011d58:	bf00      	nop
 8011d5a:	3730      	adds	r7, #48	@ 0x30
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8011d60:	08017fa0 	.word	0x08017fa0
 8011d64:	20000c54 	.word	0x20000c54
 8011d68:	08017dd4 	.word	0x08017dd4
 8011d6c:	08017fc0 	.word	0x08017fc0
 8011d70:	08017fd4 	.word	0x08017fd4
 8011d74:	20000225 	.word	0x20000225
 8011d78:	08018004 	.word	0x08018004
 8011d7c:	08018018 	.word	0x08018018
 8011d80:	0801802c 	.word	0x0801802c
 8011d84:	08018040 	.word	0x08018040
 8011d88:	08018058 	.word	0x08018058
 8011d8c:	08018068 	.word	0x08018068

08011d90 <Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Gyro_Sensor_Handler(uint32_t Instance)
{
 8011d90:	b5b0      	push	{r4, r5, r7, lr}
 8011d92:	b092      	sub	sp, #72	@ 0x48
 8011d94:	af06      	add	r7, sp, #24
 8011d96:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t angular_velocity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	4a51      	ldr	r2, [pc, #324]	@ (8011ee0 <Gyro_Sensor_Handler+0x150>)
 8011d9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011da0:	4850      	ldr	r0, [pc, #320]	@ (8011ee4 <Gyro_Sensor_Handler+0x154>)
 8011da2:	f003 fe8f 	bl	8015ac4 <sniprintf>
  printf("%s", dataOut);
 8011da6:	494f      	ldr	r1, [pc, #316]	@ (8011ee4 <Gyro_Sensor_Handler+0x154>)
 8011da8:	484f      	ldr	r0, [pc, #316]	@ (8011ee8 <Gyro_Sensor_Handler+0x158>)
 8011daa:	f003 fe1b 	bl	80159e4 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 8011dae:	f107 031c 	add.w	r3, r7, #28
 8011db2:	461a      	mov	r2, r3
 8011db4:	2101      	movs	r1, #1
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	f7f9 fcb4 	bl	800b724 <IKS4A1_MOTION_SENSOR_GetAxes>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d007      	beq.n	8011dd2 <Gyro_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR[%d]: Error\r\n", (int)Instance);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	4a49      	ldr	r2, [pc, #292]	@ (8011eec <Gyro_Sensor_Handler+0x15c>)
 8011dc6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011dca:	4846      	ldr	r0, [pc, #280]	@ (8011ee4 <Gyro_Sensor_Handler+0x154>)
 8011dcc:	f003 fe7a 	bl	8015ac4 <sniprintf>
 8011dd0:	e011      	b.n	8011df6 <Gyro_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8011dd2:	687d      	ldr	r5, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8011dd4:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8011dd6:	687a      	ldr	r2, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8011dd8:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8011dda:	6878      	ldr	r0, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8011ddc:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8011dde:	9404      	str	r4, [sp, #16]
 8011de0:	9003      	str	r0, [sp, #12]
 8011de2:	9102      	str	r1, [sp, #8]
 8011de4:	9201      	str	r2, [sp, #4]
 8011de6:	9300      	str	r3, [sp, #0]
 8011de8:	462b      	mov	r3, r5
 8011dea:	4a41      	ldr	r2, [pc, #260]	@ (8011ef0 <Gyro_Sensor_Handler+0x160>)
 8011dec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011df0:	483c      	ldr	r0, [pc, #240]	@ (8011ee4 <Gyro_Sensor_Handler+0x154>)
 8011df2:	f003 fe67 	bl	8015ac4 <sniprintf>
  }

  printf("%s", dataOut);
 8011df6:	493b      	ldr	r1, [pc, #236]	@ (8011ee4 <Gyro_Sensor_Handler+0x154>)
 8011df8:	483b      	ldr	r0, [pc, #236]	@ (8011ee8 <Gyro_Sensor_Handler+0x158>)
 8011dfa:	f003 fdf3 	bl	80159e4 <iprintf>

  if (verbose == 1)
 8011dfe:	4b3d      	ldr	r3, [pc, #244]	@ (8011ef4 <Gyro_Sensor_Handler+0x164>)
 8011e00:	781b      	ldrb	r3, [r3, #0]
 8011e02:	2b01      	cmp	r3, #1
 8011e04:	d168      	bne.n	8011ed8 <Gyro_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8011e06:	f107 030f 	add.w	r3, r7, #15
 8011e0a:	4619      	mov	r1, r3
 8011e0c:	6878      	ldr	r0, [r7, #4]
 8011e0e:	f7f9 fc5f 	bl	800b6d0 <IKS4A1_MOTION_SENSOR_ReadID>
 8011e12:	4603      	mov	r3, r0
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d007      	beq.n	8011e28 <Gyro_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	4a37      	ldr	r2, [pc, #220]	@ (8011ef8 <Gyro_Sensor_Handler+0x168>)
 8011e1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011e20:	4830      	ldr	r0, [pc, #192]	@ (8011ee4 <Gyro_Sensor_Handler+0x154>)
 8011e22:	f003 fe4f 	bl	8015ac4 <sniprintf>
 8011e26:	e008      	b.n	8011e3a <Gyro_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	7bfa      	ldrb	r2, [r7, #15]
 8011e2c:	9200      	str	r2, [sp, #0]
 8011e2e:	4a33      	ldr	r2, [pc, #204]	@ (8011efc <Gyro_Sensor_Handler+0x16c>)
 8011e30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011e34:	482b      	ldr	r0, [pc, #172]	@ (8011ee4 <Gyro_Sensor_Handler+0x154>)
 8011e36:	f003 fe45 	bl	8015ac4 <sniprintf>
    }

    printf("%s", dataOut);
 8011e3a:	492a      	ldr	r1, [pc, #168]	@ (8011ee4 <Gyro_Sensor_Handler+0x154>)
 8011e3c:	482a      	ldr	r0, [pc, #168]	@ (8011ee8 <Gyro_Sensor_Handler+0x158>)
 8011e3e:	f003 fdd1 	bl	80159e4 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_GYRO, &odr))
 8011e42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011e46:	461a      	mov	r2, r3
 8011e48:	2101      	movs	r1, #1
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f7f9 fcae 	bl	800b7ac <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 8011e50:	4603      	mov	r3, r0
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d007      	beq.n	8011e66 <Gyro_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	4a29      	ldr	r2, [pc, #164]	@ (8011f00 <Gyro_Sensor_Handler+0x170>)
 8011e5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011e5e:	4821      	ldr	r0, [pc, #132]	@ (8011ee4 <Gyro_Sensor_Handler+0x154>)
 8011e60:	f003 fe30 	bl	8015ac4 <sniprintf>
 8011e64:	e014      	b.n	8011e90 <Gyro_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8011e66:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011e6a:	f107 0310 	add.w	r3, r7, #16
 8011e6e:	2103      	movs	r1, #3
 8011e70:	4618      	mov	r0, r3
 8011e72:	eeb0 0a67 	vmov.f32	s0, s15
 8011e76:	f7ff fe4b 	bl	8011b10 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8011e7e:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011e80:	9101      	str	r1, [sp, #4]
 8011e82:	9200      	str	r2, [sp, #0]
 8011e84:	4a1f      	ldr	r2, [pc, #124]	@ (8011f04 <Gyro_Sensor_Handler+0x174>)
 8011e86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011e8a:	4816      	ldr	r0, [pc, #88]	@ (8011ee4 <Gyro_Sensor_Handler+0x154>)
 8011e8c:	f003 fe1a 	bl	8015ac4 <sniprintf>
    }

    printf("%s", dataOut);
 8011e90:	4914      	ldr	r1, [pc, #80]	@ (8011ee4 <Gyro_Sensor_Handler+0x154>)
 8011e92:	4815      	ldr	r0, [pc, #84]	@ (8011ee8 <Gyro_Sensor_Handler+0x158>)
 8011e94:	f003 fda6 	bl	80159e4 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_GYRO, &fullScale))
 8011e98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011e9c:	461a      	mov	r2, r3
 8011e9e:	2101      	movs	r1, #1
 8011ea0:	6878      	ldr	r0, [r7, #4]
 8011ea2:	f7f9 fcc7 	bl	800b834 <IKS4A1_MOTION_SENSOR_GetFullScale>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d007      	beq.n	8011ebc <Gyro_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	4a16      	ldr	r2, [pc, #88]	@ (8011f08 <Gyro_Sensor_Handler+0x178>)
 8011eb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011eb4:	480b      	ldr	r0, [pc, #44]	@ (8011ee4 <Gyro_Sensor_Handler+0x154>)
 8011eb6:	f003 fe05 	bl	8015ac4 <sniprintf>
 8011eba:	e009      	b.n	8011ed0 <Gyro_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
 8011ebc:	687a      	ldr	r2, [r7, #4]
 8011ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ec0:	9300      	str	r3, [sp, #0]
 8011ec2:	4613      	mov	r3, r2
 8011ec4:	4a11      	ldr	r2, [pc, #68]	@ (8011f0c <Gyro_Sensor_Handler+0x17c>)
 8011ec6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011eca:	4806      	ldr	r0, [pc, #24]	@ (8011ee4 <Gyro_Sensor_Handler+0x154>)
 8011ecc:	f003 fdfa 	bl	8015ac4 <sniprintf>
    }

    printf("%s", dataOut);
 8011ed0:	4904      	ldr	r1, [pc, #16]	@ (8011ee4 <Gyro_Sensor_Handler+0x154>)
 8011ed2:	4805      	ldr	r0, [pc, #20]	@ (8011ee8 <Gyro_Sensor_Handler+0x158>)
 8011ed4:	f003 fd86 	bl	80159e4 <iprintf>
  }
}
 8011ed8:	bf00      	nop
 8011eda:	3730      	adds	r7, #48	@ 0x30
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bdb0      	pop	{r4, r5, r7, pc}
 8011ee0:	08017fa0 	.word	0x08017fa0
 8011ee4:	20000c54 	.word	0x20000c54
 8011ee8:	08017dd4 	.word	0x08017dd4
 8011eec:	08018078 	.word	0x08018078
 8011ef0:	0801808c 	.word	0x0801808c
 8011ef4:	20000225 	.word	0x20000225
 8011ef8:	08018004 	.word	0x08018004
 8011efc:	08018018 	.word	0x08018018
 8011f00:	0801802c 	.word	0x0801802c
 8011f04:	08018040 	.word	0x08018040
 8011f08:	08018058 	.word	0x08018058
 8011f0c:	080180bc 	.word	0x080180bc

08011f10 <Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Magneto_Sensor_Handler(uint32_t Instance)
{
 8011f10:	b5b0      	push	{r4, r5, r7, lr}
 8011f12:	b092      	sub	sp, #72	@ 0x48
 8011f14:	af06      	add	r7, sp, #24
 8011f16:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t magnetic_field;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	4a51      	ldr	r2, [pc, #324]	@ (8012060 <Magneto_Sensor_Handler+0x150>)
 8011f1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011f20:	4850      	ldr	r0, [pc, #320]	@ (8012064 <Magneto_Sensor_Handler+0x154>)
 8011f22:	f003 fdcf 	bl	8015ac4 <sniprintf>
  printf("%s", dataOut);
 8011f26:	494f      	ldr	r1, [pc, #316]	@ (8012064 <Magneto_Sensor_Handler+0x154>)
 8011f28:	484f      	ldr	r0, [pc, #316]	@ (8012068 <Magneto_Sensor_Handler+0x158>)
 8011f2a:	f003 fd5b 	bl	80159e4 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 8011f2e:	f107 031c 	add.w	r3, r7, #28
 8011f32:	461a      	mov	r2, r3
 8011f34:	2104      	movs	r1, #4
 8011f36:	6878      	ldr	r0, [r7, #4]
 8011f38:	f7f9 fbf4 	bl	800b724 <IKS4A1_MOTION_SENSOR_GetAxes>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d007      	beq.n	8011f52 <Magneto_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG[%d]: Error\r\n", (int)Instance);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	4a49      	ldr	r2, [pc, #292]	@ (801206c <Magneto_Sensor_Handler+0x15c>)
 8011f46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011f4a:	4846      	ldr	r0, [pc, #280]	@ (8012064 <Magneto_Sensor_Handler+0x154>)
 8011f4c:	f003 fdba 	bl	8015ac4 <sniprintf>
 8011f50:	e011      	b.n	8011f76 <Magneto_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8011f52:	687d      	ldr	r5, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8011f54:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8011f56:	687a      	ldr	r2, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8011f58:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8011f5a:	6878      	ldr	r0, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8011f5c:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8011f5e:	9404      	str	r4, [sp, #16]
 8011f60:	9003      	str	r0, [sp, #12]
 8011f62:	9102      	str	r1, [sp, #8]
 8011f64:	9201      	str	r2, [sp, #4]
 8011f66:	9300      	str	r3, [sp, #0]
 8011f68:	462b      	mov	r3, r5
 8011f6a:	4a41      	ldr	r2, [pc, #260]	@ (8012070 <Magneto_Sensor_Handler+0x160>)
 8011f6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011f70:	483c      	ldr	r0, [pc, #240]	@ (8012064 <Magneto_Sensor_Handler+0x154>)
 8011f72:	f003 fda7 	bl	8015ac4 <sniprintf>
  }

  printf("%s", dataOut);
 8011f76:	493b      	ldr	r1, [pc, #236]	@ (8012064 <Magneto_Sensor_Handler+0x154>)
 8011f78:	483b      	ldr	r0, [pc, #236]	@ (8012068 <Magneto_Sensor_Handler+0x158>)
 8011f7a:	f003 fd33 	bl	80159e4 <iprintf>

  if (verbose == 1)
 8011f7e:	4b3d      	ldr	r3, [pc, #244]	@ (8012074 <Magneto_Sensor_Handler+0x164>)
 8011f80:	781b      	ldrb	r3, [r3, #0]
 8011f82:	2b01      	cmp	r3, #1
 8011f84:	d168      	bne.n	8012058 <Magneto_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8011f86:	f107 030f 	add.w	r3, r7, #15
 8011f8a:	4619      	mov	r1, r3
 8011f8c:	6878      	ldr	r0, [r7, #4]
 8011f8e:	f7f9 fb9f 	bl	800b6d0 <IKS4A1_MOTION_SENSOR_ReadID>
 8011f92:	4603      	mov	r3, r0
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d007      	beq.n	8011fa8 <Magneto_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	4a37      	ldr	r2, [pc, #220]	@ (8012078 <Magneto_Sensor_Handler+0x168>)
 8011f9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011fa0:	4830      	ldr	r0, [pc, #192]	@ (8012064 <Magneto_Sensor_Handler+0x154>)
 8011fa2:	f003 fd8f 	bl	8015ac4 <sniprintf>
 8011fa6:	e008      	b.n	8011fba <Magneto_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	7bfa      	ldrb	r2, [r7, #15]
 8011fac:	9200      	str	r2, [sp, #0]
 8011fae:	4a33      	ldr	r2, [pc, #204]	@ (801207c <Magneto_Sensor_Handler+0x16c>)
 8011fb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011fb4:	482b      	ldr	r0, [pc, #172]	@ (8012064 <Magneto_Sensor_Handler+0x154>)
 8011fb6:	f003 fd85 	bl	8015ac4 <sniprintf>
    }

    printf("%s", dataOut);
 8011fba:	492a      	ldr	r1, [pc, #168]	@ (8012064 <Magneto_Sensor_Handler+0x154>)
 8011fbc:	482a      	ldr	r0, [pc, #168]	@ (8012068 <Magneto_Sensor_Handler+0x158>)
 8011fbe:	f003 fd11 	bl	80159e4 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_MAGNETO, &odr))
 8011fc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011fc6:	461a      	mov	r2, r3
 8011fc8:	2104      	movs	r1, #4
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f7f9 fbee 	bl	800b7ac <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d007      	beq.n	8011fe6 <Magneto_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	4a29      	ldr	r2, [pc, #164]	@ (8012080 <Magneto_Sensor_Handler+0x170>)
 8011fda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011fde:	4821      	ldr	r0, [pc, #132]	@ (8012064 <Magneto_Sensor_Handler+0x154>)
 8011fe0:	f003 fd70 	bl	8015ac4 <sniprintf>
 8011fe4:	e014      	b.n	8012010 <Magneto_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8011fe6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011fea:	f107 0310 	add.w	r3, r7, #16
 8011fee:	2103      	movs	r1, #3
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8011ff6:	f7ff fd8b 	bl	8011b10 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8011ffe:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8012000:	9101      	str	r1, [sp, #4]
 8012002:	9200      	str	r2, [sp, #0]
 8012004:	4a1f      	ldr	r2, [pc, #124]	@ (8012084 <Magneto_Sensor_Handler+0x174>)
 8012006:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801200a:	4816      	ldr	r0, [pc, #88]	@ (8012064 <Magneto_Sensor_Handler+0x154>)
 801200c:	f003 fd5a 	bl	8015ac4 <sniprintf>
    }

    printf("%s", dataOut);
 8012010:	4914      	ldr	r1, [pc, #80]	@ (8012064 <Magneto_Sensor_Handler+0x154>)
 8012012:	4815      	ldr	r0, [pc, #84]	@ (8012068 <Magneto_Sensor_Handler+0x158>)
 8012014:	f003 fce6 	bl	80159e4 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_MAGNETO, &fullScale))
 8012018:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801201c:	461a      	mov	r2, r3
 801201e:	2104      	movs	r1, #4
 8012020:	6878      	ldr	r0, [r7, #4]
 8012022:	f7f9 fc07 	bl	800b834 <IKS4A1_MOTION_SENSOR_GetFullScale>
 8012026:	4603      	mov	r3, r0
 8012028:	2b00      	cmp	r3, #0
 801202a:	d007      	beq.n	801203c <Magneto_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	4a16      	ldr	r2, [pc, #88]	@ (8012088 <Magneto_Sensor_Handler+0x178>)
 8012030:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012034:	480b      	ldr	r0, [pc, #44]	@ (8012064 <Magneto_Sensor_Handler+0x154>)
 8012036:	f003 fd45 	bl	8015ac4 <sniprintf>
 801203a:	e009      	b.n	8012050 <Magneto_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
 801203c:	687a      	ldr	r2, [r7, #4]
 801203e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012040:	9300      	str	r3, [sp, #0]
 8012042:	4613      	mov	r3, r2
 8012044:	4a11      	ldr	r2, [pc, #68]	@ (801208c <Magneto_Sensor_Handler+0x17c>)
 8012046:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801204a:	4806      	ldr	r0, [pc, #24]	@ (8012064 <Magneto_Sensor_Handler+0x154>)
 801204c:	f003 fd3a 	bl	8015ac4 <sniprintf>
    }

    printf("%s", dataOut);
 8012050:	4904      	ldr	r1, [pc, #16]	@ (8012064 <Magneto_Sensor_Handler+0x154>)
 8012052:	4805      	ldr	r0, [pc, #20]	@ (8012068 <Magneto_Sensor_Handler+0x158>)
 8012054:	f003 fcc6 	bl	80159e4 <iprintf>
  }
}
 8012058:	bf00      	nop
 801205a:	3730      	adds	r7, #48	@ 0x30
 801205c:	46bd      	mov	sp, r7
 801205e:	bdb0      	pop	{r4, r5, r7, pc}
 8012060:	08017fa0 	.word	0x08017fa0
 8012064:	20000c54 	.word	0x20000c54
 8012068:	08017dd4 	.word	0x08017dd4
 801206c:	080180d0 	.word	0x080180d0
 8012070:	080180e4 	.word	0x080180e4
 8012074:	20000225 	.word	0x20000225
 8012078:	08018004 	.word	0x08018004
 801207c:	08018018 	.word	0x08018018
 8012080:	0801802c 	.word	0x0801802c
 8012084:	08018040 	.word	0x08018040
 8012088:	08018058 	.word	0x08018058
 801208c:	08018114 	.word	0x08018114

08012090 <Temp_Sensor_Handler>:
  * @brief  Handles the temperature data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Temp_Sensor_Handler(uint32_t Instance)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b08c      	sub	sp, #48	@ 0x30
 8012094:	af04      	add	r7, sp, #16
 8012096:	6078      	str	r0, [r7, #4]
  float odr;
  float temperature;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	4a47      	ldr	r2, [pc, #284]	@ (80121b8 <Temp_Sensor_Handler+0x128>)
 801209c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80120a0:	4846      	ldr	r0, [pc, #280]	@ (80121bc <Temp_Sensor_Handler+0x12c>)
 80120a2:	f003 fd0f 	bl	8015ac4 <sniprintf>
  printf("%s", dataOut);
 80120a6:	4945      	ldr	r1, [pc, #276]	@ (80121bc <Temp_Sensor_Handler+0x12c>)
 80120a8:	4845      	ldr	r0, [pc, #276]	@ (80121c0 <Temp_Sensor_Handler+0x130>)
 80120aa:	f003 fc9b 	bl	80159e4 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temperature))
 80120ae:	f107 0318 	add.w	r3, r7, #24
 80120b2:	461a      	mov	r2, r3
 80120b4:	2101      	movs	r1, #1
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f7f8 ff16 	bl	800aee8 <IKS4A1_ENV_SENSOR_GetValue>
 80120bc:	4603      	mov	r3, r0
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d007      	beq.n	80120d2 <Temp_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: Error\r\n", (int)Instance);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	4a3f      	ldr	r2, [pc, #252]	@ (80121c4 <Temp_Sensor_Handler+0x134>)
 80120c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80120ca:	483c      	ldr	r0, [pc, #240]	@ (80121bc <Temp_Sensor_Handler+0x12c>)
 80120cc:	f003 fcfa 	bl	8015ac4 <sniprintf>
 80120d0:	e01d      	b.n	801210e <Temp_Sensor_Handler+0x7e>
  }
  else
  {
    floatToInt(temperature, &out_value, 2);
 80120d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80120d6:	f107 030c 	add.w	r3, r7, #12
 80120da:	2102      	movs	r1, #2
 80120dc:	4618      	mov	r0, r3
 80120de:	eeb0 0a67 	vmov.f32	s0, s15
 80120e2:	f7ff fd15 	bl	8011b10 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 80120e6:	687a      	ldr	r2, [r7, #4]
 80120e8:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d001      	beq.n	80120f4 <Temp_Sensor_Handler+0x64>
 80120f0:	232d      	movs	r3, #45	@ 0x2d
 80120f2:	e000      	b.n	80120f6 <Temp_Sensor_Handler+0x66>
 80120f4:	232b      	movs	r3, #43	@ 0x2b
 80120f6:	6939      	ldr	r1, [r7, #16]
             (int)out_value.out_dec);
 80120f8:	6978      	ldr	r0, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 80120fa:	9002      	str	r0, [sp, #8]
 80120fc:	9101      	str	r1, [sp, #4]
 80120fe:	9300      	str	r3, [sp, #0]
 8012100:	4613      	mov	r3, r2
 8012102:	4a31      	ldr	r2, [pc, #196]	@ (80121c8 <Temp_Sensor_Handler+0x138>)
 8012104:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012108:	482c      	ldr	r0, [pc, #176]	@ (80121bc <Temp_Sensor_Handler+0x12c>)
 801210a:	f003 fcdb 	bl	8015ac4 <sniprintf>
  }

  printf("%s", dataOut);
 801210e:	492b      	ldr	r1, [pc, #172]	@ (80121bc <Temp_Sensor_Handler+0x12c>)
 8012110:	482b      	ldr	r0, [pc, #172]	@ (80121c0 <Temp_Sensor_Handler+0x130>)
 8012112:	f003 fc67 	bl	80159e4 <iprintf>

  if (verbose == 1)
 8012116:	4b2d      	ldr	r3, [pc, #180]	@ (80121cc <Temp_Sensor_Handler+0x13c>)
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	2b01      	cmp	r3, #1
 801211c:	d148      	bne.n	80121b0 <Temp_Sensor_Handler+0x120>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 801211e:	f107 030b 	add.w	r3, r7, #11
 8012122:	4619      	mov	r1, r3
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f7f8 fe73 	bl	800ae10 <IKS4A1_ENV_SENSOR_ReadID>
 801212a:	4603      	mov	r3, r0
 801212c:	2b00      	cmp	r3, #0
 801212e:	d007      	beq.n	8012140 <Temp_Sensor_Handler+0xb0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	4a27      	ldr	r2, [pc, #156]	@ (80121d0 <Temp_Sensor_Handler+0x140>)
 8012134:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012138:	4820      	ldr	r0, [pc, #128]	@ (80121bc <Temp_Sensor_Handler+0x12c>)
 801213a:	f003 fcc3 	bl	8015ac4 <sniprintf>
 801213e:	e008      	b.n	8012152 <Temp_Sensor_Handler+0xc2>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	7afa      	ldrb	r2, [r7, #11]
 8012144:	9200      	str	r2, [sp, #0]
 8012146:	4a23      	ldr	r2, [pc, #140]	@ (80121d4 <Temp_Sensor_Handler+0x144>)
 8012148:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801214c:	481b      	ldr	r0, [pc, #108]	@ (80121bc <Temp_Sensor_Handler+0x12c>)
 801214e:	f003 fcb9 	bl	8015ac4 <sniprintf>
    }

    printf("%s", dataOut);
 8012152:	491a      	ldr	r1, [pc, #104]	@ (80121bc <Temp_Sensor_Handler+0x12c>)
 8012154:	481a      	ldr	r0, [pc, #104]	@ (80121c0 <Temp_Sensor_Handler+0x130>)
 8012156:	f003 fc45 	bl	80159e4 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_TEMPERATURE, &odr))
 801215a:	f107 031c 	add.w	r3, r7, #28
 801215e:	461a      	mov	r2, r3
 8012160:	2101      	movs	r1, #1
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f7f8 fe7e 	bl	800ae64 <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 8012168:	4603      	mov	r3, r0
 801216a:	2b00      	cmp	r3, #0
 801216c:	d007      	beq.n	801217e <Temp_Sensor_Handler+0xee>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	4a19      	ldr	r2, [pc, #100]	@ (80121d8 <Temp_Sensor_Handler+0x148>)
 8012172:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012176:	4811      	ldr	r0, [pc, #68]	@ (80121bc <Temp_Sensor_Handler+0x12c>)
 8012178:	f003 fca4 	bl	8015ac4 <sniprintf>
 801217c:	e014      	b.n	80121a8 <Temp_Sensor_Handler+0x118>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 801217e:	edd7 7a07 	vldr	s15, [r7, #28]
 8012182:	f107 030c 	add.w	r3, r7, #12
 8012186:	2103      	movs	r1, #3
 8012188:	4618      	mov	r0, r3
 801218a:	eeb0 0a67 	vmov.f32	s0, s15
 801218e:	f7ff fcbf 	bl	8011b10 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 8012196:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8012198:	9101      	str	r1, [sp, #4]
 801219a:	9200      	str	r2, [sp, #0]
 801219c:	4a0f      	ldr	r2, [pc, #60]	@ (80121dc <Temp_Sensor_Handler+0x14c>)
 801219e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80121a2:	4806      	ldr	r0, [pc, #24]	@ (80121bc <Temp_Sensor_Handler+0x12c>)
 80121a4:	f003 fc8e 	bl	8015ac4 <sniprintf>
    }

    printf("%s", dataOut);
 80121a8:	4904      	ldr	r1, [pc, #16]	@ (80121bc <Temp_Sensor_Handler+0x12c>)
 80121aa:	4805      	ldr	r0, [pc, #20]	@ (80121c0 <Temp_Sensor_Handler+0x130>)
 80121ac:	f003 fc1a 	bl	80159e4 <iprintf>
  }
}
 80121b0:	bf00      	nop
 80121b2:	3720      	adds	r7, #32
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bd80      	pop	{r7, pc}
 80121b8:	08018128 	.word	0x08018128
 80121bc:	20000c54 	.word	0x20000c54
 80121c0:	08017dd4 	.word	0x08017dd4
 80121c4:	0801814c 	.word	0x0801814c
 80121c8:	08018160 	.word	0x08018160
 80121cc:	20000225 	.word	0x20000225
 80121d0:	08018004 	.word	0x08018004
 80121d4:	08018018 	.word	0x08018018
 80121d8:	08018180 	.word	0x08018180
 80121dc:	08018040 	.word	0x08018040

080121e0 <Press_Sensor_Handler>:
  * @brief  Handles the pressure sensor data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Press_Sensor_Handler(uint32_t Instance)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b08a      	sub	sp, #40	@ 0x28
 80121e4:	af02      	add	r7, sp, #8
 80121e6:	6078      	str	r0, [r7, #4]
  float odr;
  float pressure;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	4a43      	ldr	r2, [pc, #268]	@ (80122f8 <Press_Sensor_Handler+0x118>)
 80121ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80121f0:	4842      	ldr	r0, [pc, #264]	@ (80122fc <Press_Sensor_Handler+0x11c>)
 80121f2:	f003 fc67 	bl	8015ac4 <sniprintf>
  printf("%s", dataOut);
 80121f6:	4941      	ldr	r1, [pc, #260]	@ (80122fc <Press_Sensor_Handler+0x11c>)
 80121f8:	4841      	ldr	r0, [pc, #260]	@ (8012300 <Press_Sensor_Handler+0x120>)
 80121fa:	f003 fbf3 	bl	80159e4 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &pressure))
 80121fe:	f107 0318 	add.w	r3, r7, #24
 8012202:	461a      	mov	r2, r3
 8012204:	2102      	movs	r1, #2
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f7f8 fe6e 	bl	800aee8 <IKS4A1_ENV_SENSOR_GetValue>
 801220c:	4603      	mov	r3, r0
 801220e:	2b00      	cmp	r3, #0
 8012210:	d007      	beq.n	8012222 <Press_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: Error\r\n", (int)Instance);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	4a3b      	ldr	r2, [pc, #236]	@ (8012304 <Press_Sensor_Handler+0x124>)
 8012216:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801221a:	4838      	ldr	r0, [pc, #224]	@ (80122fc <Press_Sensor_Handler+0x11c>)
 801221c:	f003 fc52 	bl	8015ac4 <sniprintf>
 8012220:	e014      	b.n	801224c <Press_Sensor_Handler+0x6c>
  }
  else
  {
    floatToInt(pressure, &out_value, 2);
 8012222:	edd7 7a06 	vldr	s15, [r7, #24]
 8012226:	f107 030c 	add.w	r3, r7, #12
 801222a:	2102      	movs	r1, #2
 801222c:	4618      	mov	r0, r3
 801222e:	eeb0 0a67 	vmov.f32	s0, s15
 8012232:	f7ff fc6d 	bl	8011b10 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 801223a:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 801223c:	9101      	str	r1, [sp, #4]
 801223e:	9200      	str	r2, [sp, #0]
 8012240:	4a31      	ldr	r2, [pc, #196]	@ (8012308 <Press_Sensor_Handler+0x128>)
 8012242:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012246:	482d      	ldr	r0, [pc, #180]	@ (80122fc <Press_Sensor_Handler+0x11c>)
 8012248:	f003 fc3c 	bl	8015ac4 <sniprintf>
  }

  printf("%s", dataOut);
 801224c:	492b      	ldr	r1, [pc, #172]	@ (80122fc <Press_Sensor_Handler+0x11c>)
 801224e:	482c      	ldr	r0, [pc, #176]	@ (8012300 <Press_Sensor_Handler+0x120>)
 8012250:	f003 fbc8 	bl	80159e4 <iprintf>

  if (verbose == 1)
 8012254:	4b2d      	ldr	r3, [pc, #180]	@ (801230c <Press_Sensor_Handler+0x12c>)
 8012256:	781b      	ldrb	r3, [r3, #0]
 8012258:	2b01      	cmp	r3, #1
 801225a:	d148      	bne.n	80122ee <Press_Sensor_Handler+0x10e>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 801225c:	f107 030b 	add.w	r3, r7, #11
 8012260:	4619      	mov	r1, r3
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	f7f8 fdd4 	bl	800ae10 <IKS4A1_ENV_SENSOR_ReadID>
 8012268:	4603      	mov	r3, r0
 801226a:	2b00      	cmp	r3, #0
 801226c:	d007      	beq.n	801227e <Press_Sensor_Handler+0x9e>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	4a27      	ldr	r2, [pc, #156]	@ (8012310 <Press_Sensor_Handler+0x130>)
 8012272:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012276:	4821      	ldr	r0, [pc, #132]	@ (80122fc <Press_Sensor_Handler+0x11c>)
 8012278:	f003 fc24 	bl	8015ac4 <sniprintf>
 801227c:	e008      	b.n	8012290 <Press_Sensor_Handler+0xb0>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	7afa      	ldrb	r2, [r7, #11]
 8012282:	9200      	str	r2, [sp, #0]
 8012284:	4a23      	ldr	r2, [pc, #140]	@ (8012314 <Press_Sensor_Handler+0x134>)
 8012286:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801228a:	481c      	ldr	r0, [pc, #112]	@ (80122fc <Press_Sensor_Handler+0x11c>)
 801228c:	f003 fc1a 	bl	8015ac4 <sniprintf>
    }

    printf("%s", dataOut);
 8012290:	491a      	ldr	r1, [pc, #104]	@ (80122fc <Press_Sensor_Handler+0x11c>)
 8012292:	481b      	ldr	r0, [pc, #108]	@ (8012300 <Press_Sensor_Handler+0x120>)
 8012294:	f003 fba6 	bl	80159e4 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_PRESSURE, &odr))
 8012298:	f107 031c 	add.w	r3, r7, #28
 801229c:	461a      	mov	r2, r3
 801229e:	2102      	movs	r1, #2
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f7f8 fddf 	bl	800ae64 <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 80122a6:	4603      	mov	r3, r0
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d007      	beq.n	80122bc <Press_Sensor_Handler+0xdc>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	4a1a      	ldr	r2, [pc, #104]	@ (8012318 <Press_Sensor_Handler+0x138>)
 80122b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80122b4:	4811      	ldr	r0, [pc, #68]	@ (80122fc <Press_Sensor_Handler+0x11c>)
 80122b6:	f003 fc05 	bl	8015ac4 <sniprintf>
 80122ba:	e014      	b.n	80122e6 <Press_Sensor_Handler+0x106>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 80122bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80122c0:	f107 030c 	add.w	r3, r7, #12
 80122c4:	2103      	movs	r1, #3
 80122c6:	4618      	mov	r0, r3
 80122c8:	eeb0 0a67 	vmov.f32	s0, s15
 80122cc:	f7ff fc20 	bl	8011b10 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 80122d4:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 80122d6:	9101      	str	r1, [sp, #4]
 80122d8:	9200      	str	r2, [sp, #0]
 80122da:	4a10      	ldr	r2, [pc, #64]	@ (801231c <Press_Sensor_Handler+0x13c>)
 80122dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80122e0:	4806      	ldr	r0, [pc, #24]	@ (80122fc <Press_Sensor_Handler+0x11c>)
 80122e2:	f003 fbef 	bl	8015ac4 <sniprintf>
    }

    printf("%s", dataOut);
 80122e6:	4905      	ldr	r1, [pc, #20]	@ (80122fc <Press_Sensor_Handler+0x11c>)
 80122e8:	4805      	ldr	r0, [pc, #20]	@ (8012300 <Press_Sensor_Handler+0x120>)
 80122ea:	f003 fb7b 	bl	80159e4 <iprintf>
  }
}
 80122ee:	bf00      	nop
 80122f0:	3720      	adds	r7, #32
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}
 80122f6:	bf00      	nop
 80122f8:	08018128 	.word	0x08018128
 80122fc:	20000c54 	.word	0x20000c54
 8012300:	08017dd4 	.word	0x08017dd4
 8012304:	08018194 	.word	0x08018194
 8012308:	080181ac 	.word	0x080181ac
 801230c:	20000225 	.word	0x20000225
 8012310:	08018004 	.word	0x08018004
 8012314:	08018018 	.word	0x08018018
 8012318:	08018180 	.word	0x08018180
 801231c:	08018040 	.word	0x08018040

08012320 <Hum_Sensor_Handler>:
  * @brief  Handles the humidity data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Hum_Sensor_Handler(uint32_t Instance)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b08a      	sub	sp, #40	@ 0x28
 8012324:	af02      	add	r7, sp, #8
 8012326:	6078      	str	r0, [r7, #4]
  float odr;
  float humidity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	4a43      	ldr	r2, [pc, #268]	@ (8012438 <Hum_Sensor_Handler+0x118>)
 801232c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012330:	4842      	ldr	r0, [pc, #264]	@ (801243c <Hum_Sensor_Handler+0x11c>)
 8012332:	f003 fbc7 	bl	8015ac4 <sniprintf>
  printf("%s", dataOut);
 8012336:	4941      	ldr	r1, [pc, #260]	@ (801243c <Hum_Sensor_Handler+0x11c>)
 8012338:	4841      	ldr	r0, [pc, #260]	@ (8012440 <Hum_Sensor_Handler+0x120>)
 801233a:	f003 fb53 	bl	80159e4 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &humidity))
 801233e:	f107 0318 	add.w	r3, r7, #24
 8012342:	461a      	mov	r2, r3
 8012344:	2104      	movs	r1, #4
 8012346:	6878      	ldr	r0, [r7, #4]
 8012348:	f7f8 fdce 	bl	800aee8 <IKS4A1_ENV_SENSOR_GetValue>
 801234c:	4603      	mov	r3, r0
 801234e:	2b00      	cmp	r3, #0
 8012350:	d007      	beq.n	8012362 <Hum_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: Error\r\n", (int)Instance);
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	4a3b      	ldr	r2, [pc, #236]	@ (8012444 <Hum_Sensor_Handler+0x124>)
 8012356:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801235a:	4838      	ldr	r0, [pc, #224]	@ (801243c <Hum_Sensor_Handler+0x11c>)
 801235c:	f003 fbb2 	bl	8015ac4 <sniprintf>
 8012360:	e014      	b.n	801238c <Hum_Sensor_Handler+0x6c>
  }
  else
  {
    floatToInt(humidity, &out_value, 2);
 8012362:	edd7 7a06 	vldr	s15, [r7, #24]
 8012366:	f107 030c 	add.w	r3, r7, #12
 801236a:	2102      	movs	r1, #2
 801236c:	4618      	mov	r0, r3
 801236e:	eeb0 0a67 	vmov.f32	s0, s15
 8012372:	f7ff fbcd 	bl	8011b10 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 801237a:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 801237c:	9101      	str	r1, [sp, #4]
 801237e:	9200      	str	r2, [sp, #0]
 8012380:	4a31      	ldr	r2, [pc, #196]	@ (8012448 <Hum_Sensor_Handler+0x128>)
 8012382:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012386:	482d      	ldr	r0, [pc, #180]	@ (801243c <Hum_Sensor_Handler+0x11c>)
 8012388:	f003 fb9c 	bl	8015ac4 <sniprintf>
  }

  printf("%s", dataOut);
 801238c:	492b      	ldr	r1, [pc, #172]	@ (801243c <Hum_Sensor_Handler+0x11c>)
 801238e:	482c      	ldr	r0, [pc, #176]	@ (8012440 <Hum_Sensor_Handler+0x120>)
 8012390:	f003 fb28 	bl	80159e4 <iprintf>

  if (verbose == 1)
 8012394:	4b2d      	ldr	r3, [pc, #180]	@ (801244c <Hum_Sensor_Handler+0x12c>)
 8012396:	781b      	ldrb	r3, [r3, #0]
 8012398:	2b01      	cmp	r3, #1
 801239a:	d148      	bne.n	801242e <Hum_Sensor_Handler+0x10e>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 801239c:	f107 030b 	add.w	r3, r7, #11
 80123a0:	4619      	mov	r1, r3
 80123a2:	6878      	ldr	r0, [r7, #4]
 80123a4:	f7f8 fd34 	bl	800ae10 <IKS4A1_ENV_SENSOR_ReadID>
 80123a8:	4603      	mov	r3, r0
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d007      	beq.n	80123be <Hum_Sensor_Handler+0x9e>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	4a27      	ldr	r2, [pc, #156]	@ (8012450 <Hum_Sensor_Handler+0x130>)
 80123b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80123b6:	4821      	ldr	r0, [pc, #132]	@ (801243c <Hum_Sensor_Handler+0x11c>)
 80123b8:	f003 fb84 	bl	8015ac4 <sniprintf>
 80123bc:	e008      	b.n	80123d0 <Hum_Sensor_Handler+0xb0>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	7afa      	ldrb	r2, [r7, #11]
 80123c2:	9200      	str	r2, [sp, #0]
 80123c4:	4a23      	ldr	r2, [pc, #140]	@ (8012454 <Hum_Sensor_Handler+0x134>)
 80123c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80123ca:	481c      	ldr	r0, [pc, #112]	@ (801243c <Hum_Sensor_Handler+0x11c>)
 80123cc:	f003 fb7a 	bl	8015ac4 <sniprintf>
    }

    printf("%s", dataOut);
 80123d0:	491a      	ldr	r1, [pc, #104]	@ (801243c <Hum_Sensor_Handler+0x11c>)
 80123d2:	481b      	ldr	r0, [pc, #108]	@ (8012440 <Hum_Sensor_Handler+0x120>)
 80123d4:	f003 fb06 	bl	80159e4 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_HUMIDITY, &odr))
 80123d8:	f107 031c 	add.w	r3, r7, #28
 80123dc:	461a      	mov	r2, r3
 80123de:	2104      	movs	r1, #4
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f7f8 fd3f 	bl	800ae64 <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 80123e6:	4603      	mov	r3, r0
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d007      	beq.n	80123fc <Hum_Sensor_Handler+0xdc>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	4a1a      	ldr	r2, [pc, #104]	@ (8012458 <Hum_Sensor_Handler+0x138>)
 80123f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80123f4:	4811      	ldr	r0, [pc, #68]	@ (801243c <Hum_Sensor_Handler+0x11c>)
 80123f6:	f003 fb65 	bl	8015ac4 <sniprintf>
 80123fa:	e014      	b.n	8012426 <Hum_Sensor_Handler+0x106>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 80123fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8012400:	f107 030c 	add.w	r3, r7, #12
 8012404:	2103      	movs	r1, #3
 8012406:	4618      	mov	r0, r3
 8012408:	eeb0 0a67 	vmov.f32	s0, s15
 801240c:	f7ff fb80 	bl	8011b10 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 8012414:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8012416:	9101      	str	r1, [sp, #4]
 8012418:	9200      	str	r2, [sp, #0]
 801241a:	4a10      	ldr	r2, [pc, #64]	@ (801245c <Hum_Sensor_Handler+0x13c>)
 801241c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8012420:	4806      	ldr	r0, [pc, #24]	@ (801243c <Hum_Sensor_Handler+0x11c>)
 8012422:	f003 fb4f 	bl	8015ac4 <sniprintf>
    }

    printf("%s", dataOut);
 8012426:	4905      	ldr	r1, [pc, #20]	@ (801243c <Hum_Sensor_Handler+0x11c>)
 8012428:	4805      	ldr	r0, [pc, #20]	@ (8012440 <Hum_Sensor_Handler+0x120>)
 801242a:	f003 fadb 	bl	80159e4 <iprintf>
  }
}
 801242e:	bf00      	nop
 8012430:	3720      	adds	r7, #32
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
 8012436:	bf00      	nop
 8012438:	08018128 	.word	0x08018128
 801243c:	20000c54 	.word	0x20000c54
 8012440:	08017dd4 	.word	0x08017dd4
 8012444:	080181c8 	.word	0x080181c8
 8012448:	080181dc 	.word	0x080181dc
 801244c:	20000225 	.word	0x20000225
 8012450:	08018004 	.word	0x08018004
 8012454:	08018018 	.word	0x08018018
 8012458:	08018180 	.word	0x08018180
 801245c:	08018040 	.word	0x08018040

08012460 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b084      	sub	sp, #16
 8012464:	af00      	add	r7, sp, #0
 8012466:	4603      	mov	r3, r0
 8012468:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801246a:	79fb      	ldrb	r3, [r7, #7]
 801246c:	4a08      	ldr	r2, [pc, #32]	@ (8012490 <disk_status+0x30>)
 801246e:	009b      	lsls	r3, r3, #2
 8012470:	4413      	add	r3, r2
 8012472:	685b      	ldr	r3, [r3, #4]
 8012474:	685b      	ldr	r3, [r3, #4]
 8012476:	79fa      	ldrb	r2, [r7, #7]
 8012478:	4905      	ldr	r1, [pc, #20]	@ (8012490 <disk_status+0x30>)
 801247a:	440a      	add	r2, r1
 801247c:	7a12      	ldrb	r2, [r2, #8]
 801247e:	4610      	mov	r0, r2
 8012480:	4798      	blx	r3
 8012482:	4603      	mov	r3, r0
 8012484:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012486:	7bfb      	ldrb	r3, [r7, #15]
}
 8012488:	4618      	mov	r0, r3
 801248a:	3710      	adds	r7, #16
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}
 8012490:	20000d80 	.word	0x20000d80

08012494 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b084      	sub	sp, #16
 8012498:	af00      	add	r7, sp, #0
 801249a:	4603      	mov	r3, r0
 801249c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801249e:	2300      	movs	r3, #0
 80124a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80124a2:	79fb      	ldrb	r3, [r7, #7]
 80124a4:	4a0e      	ldr	r2, [pc, #56]	@ (80124e0 <disk_initialize+0x4c>)
 80124a6:	5cd3      	ldrb	r3, [r2, r3]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d114      	bne.n	80124d6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80124ac:	79fb      	ldrb	r3, [r7, #7]
 80124ae:	4a0c      	ldr	r2, [pc, #48]	@ (80124e0 <disk_initialize+0x4c>)
 80124b0:	009b      	lsls	r3, r3, #2
 80124b2:	4413      	add	r3, r2
 80124b4:	685b      	ldr	r3, [r3, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	79fa      	ldrb	r2, [r7, #7]
 80124ba:	4909      	ldr	r1, [pc, #36]	@ (80124e0 <disk_initialize+0x4c>)
 80124bc:	440a      	add	r2, r1
 80124be:	7a12      	ldrb	r2, [r2, #8]
 80124c0:	4610      	mov	r0, r2
 80124c2:	4798      	blx	r3
 80124c4:	4603      	mov	r3, r0
 80124c6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80124c8:	7bfb      	ldrb	r3, [r7, #15]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d103      	bne.n	80124d6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80124ce:	79fb      	ldrb	r3, [r7, #7]
 80124d0:	4a03      	ldr	r2, [pc, #12]	@ (80124e0 <disk_initialize+0x4c>)
 80124d2:	2101      	movs	r1, #1
 80124d4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80124d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80124d8:	4618      	mov	r0, r3
 80124da:	3710      	adds	r7, #16
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}
 80124e0:	20000d80 	.word	0x20000d80

080124e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80124e4:	b590      	push	{r4, r7, lr}
 80124e6:	b087      	sub	sp, #28
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	60b9      	str	r1, [r7, #8]
 80124ec:	607a      	str	r2, [r7, #4]
 80124ee:	603b      	str	r3, [r7, #0]
 80124f0:	4603      	mov	r3, r0
 80124f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80124f4:	7bfb      	ldrb	r3, [r7, #15]
 80124f6:	4a0a      	ldr	r2, [pc, #40]	@ (8012520 <disk_read+0x3c>)
 80124f8:	009b      	lsls	r3, r3, #2
 80124fa:	4413      	add	r3, r2
 80124fc:	685b      	ldr	r3, [r3, #4]
 80124fe:	689c      	ldr	r4, [r3, #8]
 8012500:	7bfb      	ldrb	r3, [r7, #15]
 8012502:	4a07      	ldr	r2, [pc, #28]	@ (8012520 <disk_read+0x3c>)
 8012504:	4413      	add	r3, r2
 8012506:	7a18      	ldrb	r0, [r3, #8]
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	687a      	ldr	r2, [r7, #4]
 801250c:	68b9      	ldr	r1, [r7, #8]
 801250e:	47a0      	blx	r4
 8012510:	4603      	mov	r3, r0
 8012512:	75fb      	strb	r3, [r7, #23]
  return res;
 8012514:	7dfb      	ldrb	r3, [r7, #23]
}
 8012516:	4618      	mov	r0, r3
 8012518:	371c      	adds	r7, #28
 801251a:	46bd      	mov	sp, r7
 801251c:	bd90      	pop	{r4, r7, pc}
 801251e:	bf00      	nop
 8012520:	20000d80 	.word	0x20000d80

08012524 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012524:	b590      	push	{r4, r7, lr}
 8012526:	b087      	sub	sp, #28
 8012528:	af00      	add	r7, sp, #0
 801252a:	60b9      	str	r1, [r7, #8]
 801252c:	607a      	str	r2, [r7, #4]
 801252e:	603b      	str	r3, [r7, #0]
 8012530:	4603      	mov	r3, r0
 8012532:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012534:	7bfb      	ldrb	r3, [r7, #15]
 8012536:	4a0a      	ldr	r2, [pc, #40]	@ (8012560 <disk_write+0x3c>)
 8012538:	009b      	lsls	r3, r3, #2
 801253a:	4413      	add	r3, r2
 801253c:	685b      	ldr	r3, [r3, #4]
 801253e:	68dc      	ldr	r4, [r3, #12]
 8012540:	7bfb      	ldrb	r3, [r7, #15]
 8012542:	4a07      	ldr	r2, [pc, #28]	@ (8012560 <disk_write+0x3c>)
 8012544:	4413      	add	r3, r2
 8012546:	7a18      	ldrb	r0, [r3, #8]
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	687a      	ldr	r2, [r7, #4]
 801254c:	68b9      	ldr	r1, [r7, #8]
 801254e:	47a0      	blx	r4
 8012550:	4603      	mov	r3, r0
 8012552:	75fb      	strb	r3, [r7, #23]
  return res;
 8012554:	7dfb      	ldrb	r3, [r7, #23]
}
 8012556:	4618      	mov	r0, r3
 8012558:	371c      	adds	r7, #28
 801255a:	46bd      	mov	sp, r7
 801255c:	bd90      	pop	{r4, r7, pc}
 801255e:	bf00      	nop
 8012560:	20000d80 	.word	0x20000d80

08012564 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b084      	sub	sp, #16
 8012568:	af00      	add	r7, sp, #0
 801256a:	4603      	mov	r3, r0
 801256c:	603a      	str	r2, [r7, #0]
 801256e:	71fb      	strb	r3, [r7, #7]
 8012570:	460b      	mov	r3, r1
 8012572:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012574:	79fb      	ldrb	r3, [r7, #7]
 8012576:	4a09      	ldr	r2, [pc, #36]	@ (801259c <disk_ioctl+0x38>)
 8012578:	009b      	lsls	r3, r3, #2
 801257a:	4413      	add	r3, r2
 801257c:	685b      	ldr	r3, [r3, #4]
 801257e:	691b      	ldr	r3, [r3, #16]
 8012580:	79fa      	ldrb	r2, [r7, #7]
 8012582:	4906      	ldr	r1, [pc, #24]	@ (801259c <disk_ioctl+0x38>)
 8012584:	440a      	add	r2, r1
 8012586:	7a10      	ldrb	r0, [r2, #8]
 8012588:	79b9      	ldrb	r1, [r7, #6]
 801258a:	683a      	ldr	r2, [r7, #0]
 801258c:	4798      	blx	r3
 801258e:	4603      	mov	r3, r0
 8012590:	73fb      	strb	r3, [r7, #15]
  return res;
 8012592:	7bfb      	ldrb	r3, [r7, #15]
}
 8012594:	4618      	mov	r0, r3
 8012596:	3710      	adds	r7, #16
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}
 801259c:	20000d80 	.word	0x20000d80

080125a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80125a0:	b480      	push	{r7}
 80125a2:	b085      	sub	sp, #20
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	3301      	adds	r3, #1
 80125ac:	781b      	ldrb	r3, [r3, #0]
 80125ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80125b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80125b4:	021b      	lsls	r3, r3, #8
 80125b6:	b21a      	sxth	r2, r3
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	781b      	ldrb	r3, [r3, #0]
 80125bc:	b21b      	sxth	r3, r3
 80125be:	4313      	orrs	r3, r2
 80125c0:	b21b      	sxth	r3, r3
 80125c2:	81fb      	strh	r3, [r7, #14]
	return rv;
 80125c4:	89fb      	ldrh	r3, [r7, #14]
}
 80125c6:	4618      	mov	r0, r3
 80125c8:	3714      	adds	r7, #20
 80125ca:	46bd      	mov	sp, r7
 80125cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d0:	4770      	bx	lr

080125d2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80125d2:	b480      	push	{r7}
 80125d4:	b085      	sub	sp, #20
 80125d6:	af00      	add	r7, sp, #0
 80125d8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	3303      	adds	r3, #3
 80125de:	781b      	ldrb	r3, [r3, #0]
 80125e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	021b      	lsls	r3, r3, #8
 80125e6:	687a      	ldr	r2, [r7, #4]
 80125e8:	3202      	adds	r2, #2
 80125ea:	7812      	ldrb	r2, [r2, #0]
 80125ec:	4313      	orrs	r3, r2
 80125ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	021b      	lsls	r3, r3, #8
 80125f4:	687a      	ldr	r2, [r7, #4]
 80125f6:	3201      	adds	r2, #1
 80125f8:	7812      	ldrb	r2, [r2, #0]
 80125fa:	4313      	orrs	r3, r2
 80125fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	021b      	lsls	r3, r3, #8
 8012602:	687a      	ldr	r2, [r7, #4]
 8012604:	7812      	ldrb	r2, [r2, #0]
 8012606:	4313      	orrs	r3, r2
 8012608:	60fb      	str	r3, [r7, #12]
	return rv;
 801260a:	68fb      	ldr	r3, [r7, #12]
}
 801260c:	4618      	mov	r0, r3
 801260e:	3714      	adds	r7, #20
 8012610:	46bd      	mov	sp, r7
 8012612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012616:	4770      	bx	lr

08012618 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012618:	b480      	push	{r7}
 801261a:	b083      	sub	sp, #12
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
 8012620:	460b      	mov	r3, r1
 8012622:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	1c5a      	adds	r2, r3, #1
 8012628:	607a      	str	r2, [r7, #4]
 801262a:	887a      	ldrh	r2, [r7, #2]
 801262c:	b2d2      	uxtb	r2, r2
 801262e:	701a      	strb	r2, [r3, #0]
 8012630:	887b      	ldrh	r3, [r7, #2]
 8012632:	0a1b      	lsrs	r3, r3, #8
 8012634:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	1c5a      	adds	r2, r3, #1
 801263a:	607a      	str	r2, [r7, #4]
 801263c:	887a      	ldrh	r2, [r7, #2]
 801263e:	b2d2      	uxtb	r2, r2
 8012640:	701a      	strb	r2, [r3, #0]
}
 8012642:	bf00      	nop
 8012644:	370c      	adds	r7, #12
 8012646:	46bd      	mov	sp, r7
 8012648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264c:	4770      	bx	lr

0801264e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801264e:	b480      	push	{r7}
 8012650:	b083      	sub	sp, #12
 8012652:	af00      	add	r7, sp, #0
 8012654:	6078      	str	r0, [r7, #4]
 8012656:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	1c5a      	adds	r2, r3, #1
 801265c:	607a      	str	r2, [r7, #4]
 801265e:	683a      	ldr	r2, [r7, #0]
 8012660:	b2d2      	uxtb	r2, r2
 8012662:	701a      	strb	r2, [r3, #0]
 8012664:	683b      	ldr	r3, [r7, #0]
 8012666:	0a1b      	lsrs	r3, r3, #8
 8012668:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	1c5a      	adds	r2, r3, #1
 801266e:	607a      	str	r2, [r7, #4]
 8012670:	683a      	ldr	r2, [r7, #0]
 8012672:	b2d2      	uxtb	r2, r2
 8012674:	701a      	strb	r2, [r3, #0]
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	0a1b      	lsrs	r3, r3, #8
 801267a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	1c5a      	adds	r2, r3, #1
 8012680:	607a      	str	r2, [r7, #4]
 8012682:	683a      	ldr	r2, [r7, #0]
 8012684:	b2d2      	uxtb	r2, r2
 8012686:	701a      	strb	r2, [r3, #0]
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	0a1b      	lsrs	r3, r3, #8
 801268c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	1c5a      	adds	r2, r3, #1
 8012692:	607a      	str	r2, [r7, #4]
 8012694:	683a      	ldr	r2, [r7, #0]
 8012696:	b2d2      	uxtb	r2, r2
 8012698:	701a      	strb	r2, [r3, #0]
}
 801269a:	bf00      	nop
 801269c:	370c      	adds	r7, #12
 801269e:	46bd      	mov	sp, r7
 80126a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a4:	4770      	bx	lr

080126a6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80126a6:	b480      	push	{r7}
 80126a8:	b087      	sub	sp, #28
 80126aa:	af00      	add	r7, sp, #0
 80126ac:	60f8      	str	r0, [r7, #12]
 80126ae:	60b9      	str	r1, [r7, #8]
 80126b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d00d      	beq.n	80126dc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80126c0:	693a      	ldr	r2, [r7, #16]
 80126c2:	1c53      	adds	r3, r2, #1
 80126c4:	613b      	str	r3, [r7, #16]
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	1c59      	adds	r1, r3, #1
 80126ca:	6179      	str	r1, [r7, #20]
 80126cc:	7812      	ldrb	r2, [r2, #0]
 80126ce:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	3b01      	subs	r3, #1
 80126d4:	607b      	str	r3, [r7, #4]
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d1f1      	bne.n	80126c0 <mem_cpy+0x1a>
	}
}
 80126dc:	bf00      	nop
 80126de:	371c      	adds	r7, #28
 80126e0:	46bd      	mov	sp, r7
 80126e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e6:	4770      	bx	lr

080126e8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80126e8:	b480      	push	{r7}
 80126ea:	b087      	sub	sp, #28
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	60f8      	str	r0, [r7, #12]
 80126f0:	60b9      	str	r1, [r7, #8]
 80126f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80126f8:	697b      	ldr	r3, [r7, #20]
 80126fa:	1c5a      	adds	r2, r3, #1
 80126fc:	617a      	str	r2, [r7, #20]
 80126fe:	68ba      	ldr	r2, [r7, #8]
 8012700:	b2d2      	uxtb	r2, r2
 8012702:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	3b01      	subs	r3, #1
 8012708:	607b      	str	r3, [r7, #4]
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d1f3      	bne.n	80126f8 <mem_set+0x10>
}
 8012710:	bf00      	nop
 8012712:	bf00      	nop
 8012714:	371c      	adds	r7, #28
 8012716:	46bd      	mov	sp, r7
 8012718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271c:	4770      	bx	lr

0801271e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801271e:	b480      	push	{r7}
 8012720:	b089      	sub	sp, #36	@ 0x24
 8012722:	af00      	add	r7, sp, #0
 8012724:	60f8      	str	r0, [r7, #12]
 8012726:	60b9      	str	r1, [r7, #8]
 8012728:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	61fb      	str	r3, [r7, #28]
 801272e:	68bb      	ldr	r3, [r7, #8]
 8012730:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012732:	2300      	movs	r3, #0
 8012734:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012736:	69fb      	ldr	r3, [r7, #28]
 8012738:	1c5a      	adds	r2, r3, #1
 801273a:	61fa      	str	r2, [r7, #28]
 801273c:	781b      	ldrb	r3, [r3, #0]
 801273e:	4619      	mov	r1, r3
 8012740:	69bb      	ldr	r3, [r7, #24]
 8012742:	1c5a      	adds	r2, r3, #1
 8012744:	61ba      	str	r2, [r7, #24]
 8012746:	781b      	ldrb	r3, [r3, #0]
 8012748:	1acb      	subs	r3, r1, r3
 801274a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	3b01      	subs	r3, #1
 8012750:	607b      	str	r3, [r7, #4]
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d002      	beq.n	801275e <mem_cmp+0x40>
 8012758:	697b      	ldr	r3, [r7, #20]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d0eb      	beq.n	8012736 <mem_cmp+0x18>

	return r;
 801275e:	697b      	ldr	r3, [r7, #20]
}
 8012760:	4618      	mov	r0, r3
 8012762:	3724      	adds	r7, #36	@ 0x24
 8012764:	46bd      	mov	sp, r7
 8012766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276a:	4770      	bx	lr

0801276c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801276c:	b480      	push	{r7}
 801276e:	b083      	sub	sp, #12
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012776:	e002      	b.n	801277e <chk_chr+0x12>
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	3301      	adds	r3, #1
 801277c:	607b      	str	r3, [r7, #4]
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	781b      	ldrb	r3, [r3, #0]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d005      	beq.n	8012792 <chk_chr+0x26>
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	461a      	mov	r2, r3
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	4293      	cmp	r3, r2
 8012790:	d1f2      	bne.n	8012778 <chk_chr+0xc>
	return *str;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	781b      	ldrb	r3, [r3, #0]
}
 8012796:	4618      	mov	r0, r3
 8012798:	370c      	adds	r7, #12
 801279a:	46bd      	mov	sp, r7
 801279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a0:	4770      	bx	lr
	...

080127a4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80127a4:	b480      	push	{r7}
 80127a6:	b085      	sub	sp, #20
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
 80127ac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80127ae:	2300      	movs	r3, #0
 80127b0:	60bb      	str	r3, [r7, #8]
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	60fb      	str	r3, [r7, #12]
 80127b6:	e029      	b.n	801280c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80127b8:	4a27      	ldr	r2, [pc, #156]	@ (8012858 <chk_lock+0xb4>)
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	011b      	lsls	r3, r3, #4
 80127be:	4413      	add	r3, r2
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d01d      	beq.n	8012802 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80127c6:	4a24      	ldr	r2, [pc, #144]	@ (8012858 <chk_lock+0xb4>)
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	011b      	lsls	r3, r3, #4
 80127cc:	4413      	add	r3, r2
 80127ce:	681a      	ldr	r2, [r3, #0]
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d116      	bne.n	8012806 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80127d8:	4a1f      	ldr	r2, [pc, #124]	@ (8012858 <chk_lock+0xb4>)
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	011b      	lsls	r3, r3, #4
 80127de:	4413      	add	r3, r2
 80127e0:	3304      	adds	r3, #4
 80127e2:	681a      	ldr	r2, [r3, #0]
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80127e8:	429a      	cmp	r2, r3
 80127ea:	d10c      	bne.n	8012806 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80127ec:	4a1a      	ldr	r2, [pc, #104]	@ (8012858 <chk_lock+0xb4>)
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	011b      	lsls	r3, r3, #4
 80127f2:	4413      	add	r3, r2
 80127f4:	3308      	adds	r3, #8
 80127f6:	681a      	ldr	r2, [r3, #0]
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80127fc:	429a      	cmp	r2, r3
 80127fe:	d102      	bne.n	8012806 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012800:	e007      	b.n	8012812 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012802:	2301      	movs	r3, #1
 8012804:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	3301      	adds	r3, #1
 801280a:	60fb      	str	r3, [r7, #12]
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	2b01      	cmp	r3, #1
 8012810:	d9d2      	bls.n	80127b8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	2b02      	cmp	r3, #2
 8012816:	d109      	bne.n	801282c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d102      	bne.n	8012824 <chk_lock+0x80>
 801281e:	683b      	ldr	r3, [r7, #0]
 8012820:	2b02      	cmp	r3, #2
 8012822:	d101      	bne.n	8012828 <chk_lock+0x84>
 8012824:	2300      	movs	r3, #0
 8012826:	e010      	b.n	801284a <chk_lock+0xa6>
 8012828:	2312      	movs	r3, #18
 801282a:	e00e      	b.n	801284a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d108      	bne.n	8012844 <chk_lock+0xa0>
 8012832:	4a09      	ldr	r2, [pc, #36]	@ (8012858 <chk_lock+0xb4>)
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	011b      	lsls	r3, r3, #4
 8012838:	4413      	add	r3, r2
 801283a:	330c      	adds	r3, #12
 801283c:	881b      	ldrh	r3, [r3, #0]
 801283e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012842:	d101      	bne.n	8012848 <chk_lock+0xa4>
 8012844:	2310      	movs	r3, #16
 8012846:	e000      	b.n	801284a <chk_lock+0xa6>
 8012848:	2300      	movs	r3, #0
}
 801284a:	4618      	mov	r0, r3
 801284c:	3714      	adds	r7, #20
 801284e:	46bd      	mov	sp, r7
 8012850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012854:	4770      	bx	lr
 8012856:	bf00      	nop
 8012858:	20000d60 	.word	0x20000d60

0801285c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801285c:	b480      	push	{r7}
 801285e:	b083      	sub	sp, #12
 8012860:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012862:	2300      	movs	r3, #0
 8012864:	607b      	str	r3, [r7, #4]
 8012866:	e002      	b.n	801286e <enq_lock+0x12>
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	3301      	adds	r3, #1
 801286c:	607b      	str	r3, [r7, #4]
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	2b01      	cmp	r3, #1
 8012872:	d806      	bhi.n	8012882 <enq_lock+0x26>
 8012874:	4a09      	ldr	r2, [pc, #36]	@ (801289c <enq_lock+0x40>)
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	011b      	lsls	r3, r3, #4
 801287a:	4413      	add	r3, r2
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d1f2      	bne.n	8012868 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2b02      	cmp	r3, #2
 8012886:	bf14      	ite	ne
 8012888:	2301      	movne	r3, #1
 801288a:	2300      	moveq	r3, #0
 801288c:	b2db      	uxtb	r3, r3
}
 801288e:	4618      	mov	r0, r3
 8012890:	370c      	adds	r7, #12
 8012892:	46bd      	mov	sp, r7
 8012894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012898:	4770      	bx	lr
 801289a:	bf00      	nop
 801289c:	20000d60 	.word	0x20000d60

080128a0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80128a0:	b480      	push	{r7}
 80128a2:	b085      	sub	sp, #20
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
 80128a8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80128aa:	2300      	movs	r3, #0
 80128ac:	60fb      	str	r3, [r7, #12]
 80128ae:	e01f      	b.n	80128f0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80128b0:	4a41      	ldr	r2, [pc, #260]	@ (80129b8 <inc_lock+0x118>)
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	011b      	lsls	r3, r3, #4
 80128b6:	4413      	add	r3, r2
 80128b8:	681a      	ldr	r2, [r3, #0]
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	429a      	cmp	r2, r3
 80128c0:	d113      	bne.n	80128ea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80128c2:	4a3d      	ldr	r2, [pc, #244]	@ (80129b8 <inc_lock+0x118>)
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	011b      	lsls	r3, r3, #4
 80128c8:	4413      	add	r3, r2
 80128ca:	3304      	adds	r3, #4
 80128cc:	681a      	ldr	r2, [r3, #0]
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80128d2:	429a      	cmp	r2, r3
 80128d4:	d109      	bne.n	80128ea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80128d6:	4a38      	ldr	r2, [pc, #224]	@ (80129b8 <inc_lock+0x118>)
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	011b      	lsls	r3, r3, #4
 80128dc:	4413      	add	r3, r2
 80128de:	3308      	adds	r3, #8
 80128e0:	681a      	ldr	r2, [r3, #0]
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80128e6:	429a      	cmp	r2, r3
 80128e8:	d006      	beq.n	80128f8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	3301      	adds	r3, #1
 80128ee:	60fb      	str	r3, [r7, #12]
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	2b01      	cmp	r3, #1
 80128f4:	d9dc      	bls.n	80128b0 <inc_lock+0x10>
 80128f6:	e000      	b.n	80128fa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80128f8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	2b02      	cmp	r3, #2
 80128fe:	d132      	bne.n	8012966 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012900:	2300      	movs	r3, #0
 8012902:	60fb      	str	r3, [r7, #12]
 8012904:	e002      	b.n	801290c <inc_lock+0x6c>
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	3301      	adds	r3, #1
 801290a:	60fb      	str	r3, [r7, #12]
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	2b01      	cmp	r3, #1
 8012910:	d806      	bhi.n	8012920 <inc_lock+0x80>
 8012912:	4a29      	ldr	r2, [pc, #164]	@ (80129b8 <inc_lock+0x118>)
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	011b      	lsls	r3, r3, #4
 8012918:	4413      	add	r3, r2
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d1f2      	bne.n	8012906 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	2b02      	cmp	r3, #2
 8012924:	d101      	bne.n	801292a <inc_lock+0x8a>
 8012926:	2300      	movs	r3, #0
 8012928:	e040      	b.n	80129ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	681a      	ldr	r2, [r3, #0]
 801292e:	4922      	ldr	r1, [pc, #136]	@ (80129b8 <inc_lock+0x118>)
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	011b      	lsls	r3, r3, #4
 8012934:	440b      	add	r3, r1
 8012936:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	689a      	ldr	r2, [r3, #8]
 801293c:	491e      	ldr	r1, [pc, #120]	@ (80129b8 <inc_lock+0x118>)
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	011b      	lsls	r3, r3, #4
 8012942:	440b      	add	r3, r1
 8012944:	3304      	adds	r3, #4
 8012946:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	695a      	ldr	r2, [r3, #20]
 801294c:	491a      	ldr	r1, [pc, #104]	@ (80129b8 <inc_lock+0x118>)
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	011b      	lsls	r3, r3, #4
 8012952:	440b      	add	r3, r1
 8012954:	3308      	adds	r3, #8
 8012956:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012958:	4a17      	ldr	r2, [pc, #92]	@ (80129b8 <inc_lock+0x118>)
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	011b      	lsls	r3, r3, #4
 801295e:	4413      	add	r3, r2
 8012960:	330c      	adds	r3, #12
 8012962:	2200      	movs	r2, #0
 8012964:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8012966:	683b      	ldr	r3, [r7, #0]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d009      	beq.n	8012980 <inc_lock+0xe0>
 801296c:	4a12      	ldr	r2, [pc, #72]	@ (80129b8 <inc_lock+0x118>)
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	011b      	lsls	r3, r3, #4
 8012972:	4413      	add	r3, r2
 8012974:	330c      	adds	r3, #12
 8012976:	881b      	ldrh	r3, [r3, #0]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d001      	beq.n	8012980 <inc_lock+0xe0>
 801297c:	2300      	movs	r3, #0
 801297e:	e015      	b.n	80129ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d108      	bne.n	8012998 <inc_lock+0xf8>
 8012986:	4a0c      	ldr	r2, [pc, #48]	@ (80129b8 <inc_lock+0x118>)
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	011b      	lsls	r3, r3, #4
 801298c:	4413      	add	r3, r2
 801298e:	330c      	adds	r3, #12
 8012990:	881b      	ldrh	r3, [r3, #0]
 8012992:	3301      	adds	r3, #1
 8012994:	b29a      	uxth	r2, r3
 8012996:	e001      	b.n	801299c <inc_lock+0xfc>
 8012998:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801299c:	4906      	ldr	r1, [pc, #24]	@ (80129b8 <inc_lock+0x118>)
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	011b      	lsls	r3, r3, #4
 80129a2:	440b      	add	r3, r1
 80129a4:	330c      	adds	r3, #12
 80129a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	3301      	adds	r3, #1
}
 80129ac:	4618      	mov	r0, r3
 80129ae:	3714      	adds	r7, #20
 80129b0:	46bd      	mov	sp, r7
 80129b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b6:	4770      	bx	lr
 80129b8:	20000d60 	.word	0x20000d60

080129bc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80129bc:	b480      	push	{r7}
 80129be:	b085      	sub	sp, #20
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	3b01      	subs	r3, #1
 80129c8:	607b      	str	r3, [r7, #4]
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	2b01      	cmp	r3, #1
 80129ce:	d825      	bhi.n	8012a1c <dec_lock+0x60>
		n = Files[i].ctr;
 80129d0:	4a17      	ldr	r2, [pc, #92]	@ (8012a30 <dec_lock+0x74>)
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	011b      	lsls	r3, r3, #4
 80129d6:	4413      	add	r3, r2
 80129d8:	330c      	adds	r3, #12
 80129da:	881b      	ldrh	r3, [r3, #0]
 80129dc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80129de:	89fb      	ldrh	r3, [r7, #14]
 80129e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80129e4:	d101      	bne.n	80129ea <dec_lock+0x2e>
 80129e6:	2300      	movs	r3, #0
 80129e8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80129ea:	89fb      	ldrh	r3, [r7, #14]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d002      	beq.n	80129f6 <dec_lock+0x3a>
 80129f0:	89fb      	ldrh	r3, [r7, #14]
 80129f2:	3b01      	subs	r3, #1
 80129f4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80129f6:	4a0e      	ldr	r2, [pc, #56]	@ (8012a30 <dec_lock+0x74>)
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	011b      	lsls	r3, r3, #4
 80129fc:	4413      	add	r3, r2
 80129fe:	330c      	adds	r3, #12
 8012a00:	89fa      	ldrh	r2, [r7, #14]
 8012a02:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012a04:	89fb      	ldrh	r3, [r7, #14]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d105      	bne.n	8012a16 <dec_lock+0x5a>
 8012a0a:	4a09      	ldr	r2, [pc, #36]	@ (8012a30 <dec_lock+0x74>)
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	011b      	lsls	r3, r3, #4
 8012a10:	4413      	add	r3, r2
 8012a12:	2200      	movs	r2, #0
 8012a14:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012a16:	2300      	movs	r3, #0
 8012a18:	737b      	strb	r3, [r7, #13]
 8012a1a:	e001      	b.n	8012a20 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012a1c:	2302      	movs	r3, #2
 8012a1e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8012a20:	7b7b      	ldrb	r3, [r7, #13]
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3714      	adds	r7, #20
 8012a26:	46bd      	mov	sp, r7
 8012a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2c:	4770      	bx	lr
 8012a2e:	bf00      	nop
 8012a30:	20000d60 	.word	0x20000d60

08012a34 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012a34:	b480      	push	{r7}
 8012a36:	b085      	sub	sp, #20
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	60fb      	str	r3, [r7, #12]
 8012a40:	e010      	b.n	8012a64 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012a42:	4a0d      	ldr	r2, [pc, #52]	@ (8012a78 <clear_lock+0x44>)
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	011b      	lsls	r3, r3, #4
 8012a48:	4413      	add	r3, r2
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	687a      	ldr	r2, [r7, #4]
 8012a4e:	429a      	cmp	r2, r3
 8012a50:	d105      	bne.n	8012a5e <clear_lock+0x2a>
 8012a52:	4a09      	ldr	r2, [pc, #36]	@ (8012a78 <clear_lock+0x44>)
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	011b      	lsls	r3, r3, #4
 8012a58:	4413      	add	r3, r2
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	3301      	adds	r3, #1
 8012a62:	60fb      	str	r3, [r7, #12]
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	2b01      	cmp	r3, #1
 8012a68:	d9eb      	bls.n	8012a42 <clear_lock+0xe>
	}
}
 8012a6a:	bf00      	nop
 8012a6c:	bf00      	nop
 8012a6e:	3714      	adds	r7, #20
 8012a70:	46bd      	mov	sp, r7
 8012a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a76:	4770      	bx	lr
 8012a78:	20000d60 	.word	0x20000d60

08012a7c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b086      	sub	sp, #24
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012a84:	2300      	movs	r3, #0
 8012a86:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	78db      	ldrb	r3, [r3, #3]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d034      	beq.n	8012afa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a94:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	7858      	ldrb	r0, [r3, #1]
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8012aa0:	2301      	movs	r3, #1
 8012aa2:	697a      	ldr	r2, [r7, #20]
 8012aa4:	f7ff fd3e 	bl	8012524 <disk_write>
 8012aa8:	4603      	mov	r3, r0
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d002      	beq.n	8012ab4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8012aae:	2301      	movs	r3, #1
 8012ab0:	73fb      	strb	r3, [r7, #15]
 8012ab2:	e022      	b.n	8012afa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012abe:	697a      	ldr	r2, [r7, #20]
 8012ac0:	1ad2      	subs	r2, r2, r3
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	69db      	ldr	r3, [r3, #28]
 8012ac6:	429a      	cmp	r2, r3
 8012ac8:	d217      	bcs.n	8012afa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	789b      	ldrb	r3, [r3, #2]
 8012ace:	613b      	str	r3, [r7, #16]
 8012ad0:	e010      	b.n	8012af4 <sync_window+0x78>
					wsect += fs->fsize;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	69db      	ldr	r3, [r3, #28]
 8012ad6:	697a      	ldr	r2, [r7, #20]
 8012ad8:	4413      	add	r3, r2
 8012ada:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	7858      	ldrb	r0, [r3, #1]
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8012ae6:	2301      	movs	r3, #1
 8012ae8:	697a      	ldr	r2, [r7, #20]
 8012aea:	f7ff fd1b 	bl	8012524 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012aee:	693b      	ldr	r3, [r7, #16]
 8012af0:	3b01      	subs	r3, #1
 8012af2:	613b      	str	r3, [r7, #16]
 8012af4:	693b      	ldr	r3, [r7, #16]
 8012af6:	2b01      	cmp	r3, #1
 8012af8:	d8eb      	bhi.n	8012ad2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3718      	adds	r7, #24
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}

08012b04 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b084      	sub	sp, #16
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
 8012b0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012b0e:	2300      	movs	r3, #0
 8012b10:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b16:	683a      	ldr	r2, [r7, #0]
 8012b18:	429a      	cmp	r2, r3
 8012b1a:	d01b      	beq.n	8012b54 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012b1c:	6878      	ldr	r0, [r7, #4]
 8012b1e:	f7ff ffad 	bl	8012a7c <sync_window>
 8012b22:	4603      	mov	r3, r0
 8012b24:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012b26:	7bfb      	ldrb	r3, [r7, #15]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d113      	bne.n	8012b54 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	7858      	ldrb	r0, [r3, #1]
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8012b36:	2301      	movs	r3, #1
 8012b38:	683a      	ldr	r2, [r7, #0]
 8012b3a:	f7ff fcd3 	bl	80124e4 <disk_read>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d004      	beq.n	8012b4e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012b44:	f04f 33ff 	mov.w	r3, #4294967295
 8012b48:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8012b4a:	2301      	movs	r3, #1
 8012b4c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	683a      	ldr	r2, [r7, #0]
 8012b52:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8012b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3710      	adds	r7, #16
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}
	...

08012b60 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b084      	sub	sp, #16
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f7ff ff87 	bl	8012a7c <sync_window>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012b72:	7bfb      	ldrb	r3, [r7, #15]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d158      	bne.n	8012c2a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	781b      	ldrb	r3, [r3, #0]
 8012b7c:	2b03      	cmp	r3, #3
 8012b7e:	d148      	bne.n	8012c12 <sync_fs+0xb2>
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	791b      	ldrb	r3, [r3, #4]
 8012b84:	2b01      	cmp	r3, #1
 8012b86:	d144      	bne.n	8012c12 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	3334      	adds	r3, #52	@ 0x34
 8012b8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b90:	2100      	movs	r1, #0
 8012b92:	4618      	mov	r0, r3
 8012b94:	f7ff fda8 	bl	80126e8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	3334      	adds	r3, #52	@ 0x34
 8012b9c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012ba0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8012ba4:	4618      	mov	r0, r3
 8012ba6:	f7ff fd37 	bl	8012618 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	3334      	adds	r3, #52	@ 0x34
 8012bae:	4921      	ldr	r1, [pc, #132]	@ (8012c34 <sync_fs+0xd4>)
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f7ff fd4c 	bl	801264e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	3334      	adds	r3, #52	@ 0x34
 8012bba:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012bbe:	491e      	ldr	r1, [pc, #120]	@ (8012c38 <sync_fs+0xd8>)
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f7ff fd44 	bl	801264e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	3334      	adds	r3, #52	@ 0x34
 8012bca:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	695b      	ldr	r3, [r3, #20]
 8012bd2:	4619      	mov	r1, r3
 8012bd4:	4610      	mov	r0, r2
 8012bd6:	f7ff fd3a 	bl	801264e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	3334      	adds	r3, #52	@ 0x34
 8012bde:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	691b      	ldr	r3, [r3, #16]
 8012be6:	4619      	mov	r1, r3
 8012be8:	4610      	mov	r0, r2
 8012bea:	f7ff fd30 	bl	801264e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	6a1b      	ldr	r3, [r3, #32]
 8012bf2:	1c5a      	adds	r2, r3, #1
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	7858      	ldrb	r0, [r3, #1]
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012c06:	2301      	movs	r3, #1
 8012c08:	f7ff fc8c 	bl	8012524 <disk_write>
			fs->fsi_flag = 0;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2200      	movs	r2, #0
 8012c10:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	785b      	ldrb	r3, [r3, #1]
 8012c16:	2200      	movs	r2, #0
 8012c18:	2100      	movs	r1, #0
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f7ff fca2 	bl	8012564 <disk_ioctl>
 8012c20:	4603      	mov	r3, r0
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d001      	beq.n	8012c2a <sync_fs+0xca>
 8012c26:	2301      	movs	r3, #1
 8012c28:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3710      	adds	r7, #16
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}
 8012c34:	41615252 	.word	0x41615252
 8012c38:	61417272 	.word	0x61417272

08012c3c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012c3c:	b480      	push	{r7}
 8012c3e:	b083      	sub	sp, #12
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
 8012c44:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8012c46:	683b      	ldr	r3, [r7, #0]
 8012c48:	3b02      	subs	r3, #2
 8012c4a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	699b      	ldr	r3, [r3, #24]
 8012c50:	3b02      	subs	r3, #2
 8012c52:	683a      	ldr	r2, [r7, #0]
 8012c54:	429a      	cmp	r2, r3
 8012c56:	d301      	bcc.n	8012c5c <clust2sect+0x20>
 8012c58:	2300      	movs	r3, #0
 8012c5a:	e008      	b.n	8012c6e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	895b      	ldrh	r3, [r3, #10]
 8012c60:	461a      	mov	r2, r3
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	fb03 f202 	mul.w	r2, r3, r2
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c6c:	4413      	add	r3, r2
}
 8012c6e:	4618      	mov	r0, r3
 8012c70:	370c      	adds	r7, #12
 8012c72:	46bd      	mov	sp, r7
 8012c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c78:	4770      	bx	lr

08012c7a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012c7a:	b580      	push	{r7, lr}
 8012c7c:	b086      	sub	sp, #24
 8012c7e:	af00      	add	r7, sp, #0
 8012c80:	6078      	str	r0, [r7, #4]
 8012c82:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	2b01      	cmp	r3, #1
 8012c8e:	d904      	bls.n	8012c9a <get_fat+0x20>
 8012c90:	693b      	ldr	r3, [r7, #16]
 8012c92:	699b      	ldr	r3, [r3, #24]
 8012c94:	683a      	ldr	r2, [r7, #0]
 8012c96:	429a      	cmp	r2, r3
 8012c98:	d302      	bcc.n	8012ca0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	617b      	str	r3, [r7, #20]
 8012c9e:	e08e      	b.n	8012dbe <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8012ca4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012ca6:	693b      	ldr	r3, [r7, #16]
 8012ca8:	781b      	ldrb	r3, [r3, #0]
 8012caa:	2b03      	cmp	r3, #3
 8012cac:	d061      	beq.n	8012d72 <get_fat+0xf8>
 8012cae:	2b03      	cmp	r3, #3
 8012cb0:	dc7b      	bgt.n	8012daa <get_fat+0x130>
 8012cb2:	2b01      	cmp	r3, #1
 8012cb4:	d002      	beq.n	8012cbc <get_fat+0x42>
 8012cb6:	2b02      	cmp	r3, #2
 8012cb8:	d041      	beq.n	8012d3e <get_fat+0xc4>
 8012cba:	e076      	b.n	8012daa <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	60fb      	str	r3, [r7, #12]
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	085b      	lsrs	r3, r3, #1
 8012cc4:	68fa      	ldr	r2, [r7, #12]
 8012cc6:	4413      	add	r3, r2
 8012cc8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012cca:	693b      	ldr	r3, [r7, #16]
 8012ccc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	0a5b      	lsrs	r3, r3, #9
 8012cd2:	4413      	add	r3, r2
 8012cd4:	4619      	mov	r1, r3
 8012cd6:	6938      	ldr	r0, [r7, #16]
 8012cd8:	f7ff ff14 	bl	8012b04 <move_window>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d166      	bne.n	8012db0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	1c5a      	adds	r2, r3, #1
 8012ce6:	60fa      	str	r2, [r7, #12]
 8012ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012cec:	693a      	ldr	r2, [r7, #16]
 8012cee:	4413      	add	r3, r2
 8012cf0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012cf4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	0a5b      	lsrs	r3, r3, #9
 8012cfe:	4413      	add	r3, r2
 8012d00:	4619      	mov	r1, r3
 8012d02:	6938      	ldr	r0, [r7, #16]
 8012d04:	f7ff fefe 	bl	8012b04 <move_window>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d152      	bne.n	8012db4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d14:	693a      	ldr	r2, [r7, #16]
 8012d16:	4413      	add	r3, r2
 8012d18:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012d1c:	021b      	lsls	r3, r3, #8
 8012d1e:	68ba      	ldr	r2, [r7, #8]
 8012d20:	4313      	orrs	r3, r2
 8012d22:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012d24:	683b      	ldr	r3, [r7, #0]
 8012d26:	f003 0301 	and.w	r3, r3, #1
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d002      	beq.n	8012d34 <get_fat+0xba>
 8012d2e:	68bb      	ldr	r3, [r7, #8]
 8012d30:	091b      	lsrs	r3, r3, #4
 8012d32:	e002      	b.n	8012d3a <get_fat+0xc0>
 8012d34:	68bb      	ldr	r3, [r7, #8]
 8012d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012d3a:	617b      	str	r3, [r7, #20]
			break;
 8012d3c:	e03f      	b.n	8012dbe <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012d3e:	693b      	ldr	r3, [r7, #16]
 8012d40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012d42:	683b      	ldr	r3, [r7, #0]
 8012d44:	0a1b      	lsrs	r3, r3, #8
 8012d46:	4413      	add	r3, r2
 8012d48:	4619      	mov	r1, r3
 8012d4a:	6938      	ldr	r0, [r7, #16]
 8012d4c:	f7ff feda 	bl	8012b04 <move_window>
 8012d50:	4603      	mov	r3, r0
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d130      	bne.n	8012db8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012d56:	693b      	ldr	r3, [r7, #16]
 8012d58:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	005b      	lsls	r3, r3, #1
 8012d60:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012d64:	4413      	add	r3, r2
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7ff fc1a 	bl	80125a0 <ld_word>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	617b      	str	r3, [r7, #20]
			break;
 8012d70:	e025      	b.n	8012dbe <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012d72:	693b      	ldr	r3, [r7, #16]
 8012d74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	09db      	lsrs	r3, r3, #7
 8012d7a:	4413      	add	r3, r2
 8012d7c:	4619      	mov	r1, r3
 8012d7e:	6938      	ldr	r0, [r7, #16]
 8012d80:	f7ff fec0 	bl	8012b04 <move_window>
 8012d84:	4603      	mov	r3, r0
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d118      	bne.n	8012dbc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012d8a:	693b      	ldr	r3, [r7, #16]
 8012d8c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	009b      	lsls	r3, r3, #2
 8012d94:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012d98:	4413      	add	r3, r2
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	f7ff fc19 	bl	80125d2 <ld_dword>
 8012da0:	4603      	mov	r3, r0
 8012da2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8012da6:	617b      	str	r3, [r7, #20]
			break;
 8012da8:	e009      	b.n	8012dbe <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012daa:	2301      	movs	r3, #1
 8012dac:	617b      	str	r3, [r7, #20]
 8012dae:	e006      	b.n	8012dbe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012db0:	bf00      	nop
 8012db2:	e004      	b.n	8012dbe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012db4:	bf00      	nop
 8012db6:	e002      	b.n	8012dbe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012db8:	bf00      	nop
 8012dba:	e000      	b.n	8012dbe <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012dbc:	bf00      	nop
		}
	}

	return val;
 8012dbe:	697b      	ldr	r3, [r7, #20]
}
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3718      	adds	r7, #24
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}

08012dc8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012dc8:	b590      	push	{r4, r7, lr}
 8012dca:	b089      	sub	sp, #36	@ 0x24
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	60f8      	str	r0, [r7, #12]
 8012dd0:	60b9      	str	r1, [r7, #8]
 8012dd2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012dd4:	2302      	movs	r3, #2
 8012dd6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	2b01      	cmp	r3, #1
 8012ddc:	f240 80d9 	bls.w	8012f92 <put_fat+0x1ca>
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	699b      	ldr	r3, [r3, #24]
 8012de4:	68ba      	ldr	r2, [r7, #8]
 8012de6:	429a      	cmp	r2, r3
 8012de8:	f080 80d3 	bcs.w	8012f92 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	781b      	ldrb	r3, [r3, #0]
 8012df0:	2b03      	cmp	r3, #3
 8012df2:	f000 8096 	beq.w	8012f22 <put_fat+0x15a>
 8012df6:	2b03      	cmp	r3, #3
 8012df8:	f300 80cb 	bgt.w	8012f92 <put_fat+0x1ca>
 8012dfc:	2b01      	cmp	r3, #1
 8012dfe:	d002      	beq.n	8012e06 <put_fat+0x3e>
 8012e00:	2b02      	cmp	r3, #2
 8012e02:	d06e      	beq.n	8012ee2 <put_fat+0x11a>
 8012e04:	e0c5      	b.n	8012f92 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012e06:	68bb      	ldr	r3, [r7, #8]
 8012e08:	61bb      	str	r3, [r7, #24]
 8012e0a:	69bb      	ldr	r3, [r7, #24]
 8012e0c:	085b      	lsrs	r3, r3, #1
 8012e0e:	69ba      	ldr	r2, [r7, #24]
 8012e10:	4413      	add	r3, r2
 8012e12:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e18:	69bb      	ldr	r3, [r7, #24]
 8012e1a:	0a5b      	lsrs	r3, r3, #9
 8012e1c:	4413      	add	r3, r2
 8012e1e:	4619      	mov	r1, r3
 8012e20:	68f8      	ldr	r0, [r7, #12]
 8012e22:	f7ff fe6f 	bl	8012b04 <move_window>
 8012e26:	4603      	mov	r3, r0
 8012e28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012e2a:	7ffb      	ldrb	r3, [r7, #31]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	f040 80a9 	bne.w	8012f84 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012e38:	69bb      	ldr	r3, [r7, #24]
 8012e3a:	1c59      	adds	r1, r3, #1
 8012e3c:	61b9      	str	r1, [r7, #24]
 8012e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012e42:	4413      	add	r3, r2
 8012e44:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012e46:	68bb      	ldr	r3, [r7, #8]
 8012e48:	f003 0301 	and.w	r3, r3, #1
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d00d      	beq.n	8012e6c <put_fat+0xa4>
 8012e50:	697b      	ldr	r3, [r7, #20]
 8012e52:	781b      	ldrb	r3, [r3, #0]
 8012e54:	b25b      	sxtb	r3, r3
 8012e56:	f003 030f 	and.w	r3, r3, #15
 8012e5a:	b25a      	sxtb	r2, r3
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	b25b      	sxtb	r3, r3
 8012e60:	011b      	lsls	r3, r3, #4
 8012e62:	b25b      	sxtb	r3, r3
 8012e64:	4313      	orrs	r3, r2
 8012e66:	b25b      	sxtb	r3, r3
 8012e68:	b2db      	uxtb	r3, r3
 8012e6a:	e001      	b.n	8012e70 <put_fat+0xa8>
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	b2db      	uxtb	r3, r3
 8012e70:	697a      	ldr	r2, [r7, #20]
 8012e72:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	2201      	movs	r2, #1
 8012e78:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e7e:	69bb      	ldr	r3, [r7, #24]
 8012e80:	0a5b      	lsrs	r3, r3, #9
 8012e82:	4413      	add	r3, r2
 8012e84:	4619      	mov	r1, r3
 8012e86:	68f8      	ldr	r0, [r7, #12]
 8012e88:	f7ff fe3c 	bl	8012b04 <move_window>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012e90:	7ffb      	ldrb	r3, [r7, #31]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d178      	bne.n	8012f88 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012e9c:	69bb      	ldr	r3, [r7, #24]
 8012e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ea2:	4413      	add	r3, r2
 8012ea4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	f003 0301 	and.w	r3, r3, #1
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d003      	beq.n	8012eb8 <put_fat+0xf0>
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	091b      	lsrs	r3, r3, #4
 8012eb4:	b2db      	uxtb	r3, r3
 8012eb6:	e00e      	b.n	8012ed6 <put_fat+0x10e>
 8012eb8:	697b      	ldr	r3, [r7, #20]
 8012eba:	781b      	ldrb	r3, [r3, #0]
 8012ebc:	b25b      	sxtb	r3, r3
 8012ebe:	f023 030f 	bic.w	r3, r3, #15
 8012ec2:	b25a      	sxtb	r2, r3
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	0a1b      	lsrs	r3, r3, #8
 8012ec8:	b25b      	sxtb	r3, r3
 8012eca:	f003 030f 	and.w	r3, r3, #15
 8012ece:	b25b      	sxtb	r3, r3
 8012ed0:	4313      	orrs	r3, r2
 8012ed2:	b25b      	sxtb	r3, r3
 8012ed4:	b2db      	uxtb	r3, r3
 8012ed6:	697a      	ldr	r2, [r7, #20]
 8012ed8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	2201      	movs	r2, #1
 8012ede:	70da      	strb	r2, [r3, #3]
			break;
 8012ee0:	e057      	b.n	8012f92 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012ee6:	68bb      	ldr	r3, [r7, #8]
 8012ee8:	0a1b      	lsrs	r3, r3, #8
 8012eea:	4413      	add	r3, r2
 8012eec:	4619      	mov	r1, r3
 8012eee:	68f8      	ldr	r0, [r7, #12]
 8012ef0:	f7ff fe08 	bl	8012b04 <move_window>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012ef8:	7ffb      	ldrb	r3, [r7, #31]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d146      	bne.n	8012f8c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	005b      	lsls	r3, r3, #1
 8012f08:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012f0c:	4413      	add	r3, r2
 8012f0e:	687a      	ldr	r2, [r7, #4]
 8012f10:	b292      	uxth	r2, r2
 8012f12:	4611      	mov	r1, r2
 8012f14:	4618      	mov	r0, r3
 8012f16:	f7ff fb7f 	bl	8012618 <st_word>
			fs->wflag = 1;
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	2201      	movs	r2, #1
 8012f1e:	70da      	strb	r2, [r3, #3]
			break;
 8012f20:	e037      	b.n	8012f92 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	09db      	lsrs	r3, r3, #7
 8012f2a:	4413      	add	r3, r2
 8012f2c:	4619      	mov	r1, r3
 8012f2e:	68f8      	ldr	r0, [r7, #12]
 8012f30:	f7ff fde8 	bl	8012b04 <move_window>
 8012f34:	4603      	mov	r3, r0
 8012f36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012f38:	7ffb      	ldrb	r3, [r7, #31]
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d128      	bne.n	8012f90 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012f4a:	68bb      	ldr	r3, [r7, #8]
 8012f4c:	009b      	lsls	r3, r3, #2
 8012f4e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012f52:	4413      	add	r3, r2
 8012f54:	4618      	mov	r0, r3
 8012f56:	f7ff fb3c 	bl	80125d2 <ld_dword>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8012f60:	4323      	orrs	r3, r4
 8012f62:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	009b      	lsls	r3, r3, #2
 8012f6e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012f72:	4413      	add	r3, r2
 8012f74:	6879      	ldr	r1, [r7, #4]
 8012f76:	4618      	mov	r0, r3
 8012f78:	f7ff fb69 	bl	801264e <st_dword>
			fs->wflag = 1;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	2201      	movs	r2, #1
 8012f80:	70da      	strb	r2, [r3, #3]
			break;
 8012f82:	e006      	b.n	8012f92 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012f84:	bf00      	nop
 8012f86:	e004      	b.n	8012f92 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012f88:	bf00      	nop
 8012f8a:	e002      	b.n	8012f92 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012f8c:	bf00      	nop
 8012f8e:	e000      	b.n	8012f92 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012f90:	bf00      	nop
		}
	}
	return res;
 8012f92:	7ffb      	ldrb	r3, [r7, #31]
}
 8012f94:	4618      	mov	r0, r3
 8012f96:	3724      	adds	r7, #36	@ 0x24
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd90      	pop	{r4, r7, pc}

08012f9c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b088      	sub	sp, #32
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	60f8      	str	r0, [r7, #12]
 8012fa4:	60b9      	str	r1, [r7, #8]
 8012fa6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012fa8:	2300      	movs	r3, #0
 8012faa:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	2b01      	cmp	r3, #1
 8012fb6:	d904      	bls.n	8012fc2 <remove_chain+0x26>
 8012fb8:	69bb      	ldr	r3, [r7, #24]
 8012fba:	699b      	ldr	r3, [r3, #24]
 8012fbc:	68ba      	ldr	r2, [r7, #8]
 8012fbe:	429a      	cmp	r2, r3
 8012fc0:	d301      	bcc.n	8012fc6 <remove_chain+0x2a>
 8012fc2:	2302      	movs	r3, #2
 8012fc4:	e04b      	b.n	801305e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d00c      	beq.n	8012fe6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8012fd0:	6879      	ldr	r1, [r7, #4]
 8012fd2:	69b8      	ldr	r0, [r7, #24]
 8012fd4:	f7ff fef8 	bl	8012dc8 <put_fat>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012fdc:	7ffb      	ldrb	r3, [r7, #31]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d001      	beq.n	8012fe6 <remove_chain+0x4a>
 8012fe2:	7ffb      	ldrb	r3, [r7, #31]
 8012fe4:	e03b      	b.n	801305e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012fe6:	68b9      	ldr	r1, [r7, #8]
 8012fe8:	68f8      	ldr	r0, [r7, #12]
 8012fea:	f7ff fe46 	bl	8012c7a <get_fat>
 8012fee:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012ff0:	697b      	ldr	r3, [r7, #20]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d031      	beq.n	801305a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012ff6:	697b      	ldr	r3, [r7, #20]
 8012ff8:	2b01      	cmp	r3, #1
 8012ffa:	d101      	bne.n	8013000 <remove_chain+0x64>
 8012ffc:	2302      	movs	r3, #2
 8012ffe:	e02e      	b.n	801305e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013006:	d101      	bne.n	801300c <remove_chain+0x70>
 8013008:	2301      	movs	r3, #1
 801300a:	e028      	b.n	801305e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801300c:	2200      	movs	r2, #0
 801300e:	68b9      	ldr	r1, [r7, #8]
 8013010:	69b8      	ldr	r0, [r7, #24]
 8013012:	f7ff fed9 	bl	8012dc8 <put_fat>
 8013016:	4603      	mov	r3, r0
 8013018:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801301a:	7ffb      	ldrb	r3, [r7, #31]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d001      	beq.n	8013024 <remove_chain+0x88>
 8013020:	7ffb      	ldrb	r3, [r7, #31]
 8013022:	e01c      	b.n	801305e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013024:	69bb      	ldr	r3, [r7, #24]
 8013026:	695a      	ldr	r2, [r3, #20]
 8013028:	69bb      	ldr	r3, [r7, #24]
 801302a:	699b      	ldr	r3, [r3, #24]
 801302c:	3b02      	subs	r3, #2
 801302e:	429a      	cmp	r2, r3
 8013030:	d20b      	bcs.n	801304a <remove_chain+0xae>
			fs->free_clst++;
 8013032:	69bb      	ldr	r3, [r7, #24]
 8013034:	695b      	ldr	r3, [r3, #20]
 8013036:	1c5a      	adds	r2, r3, #1
 8013038:	69bb      	ldr	r3, [r7, #24]
 801303a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801303c:	69bb      	ldr	r3, [r7, #24]
 801303e:	791b      	ldrb	r3, [r3, #4]
 8013040:	f043 0301 	orr.w	r3, r3, #1
 8013044:	b2da      	uxtb	r2, r3
 8013046:	69bb      	ldr	r3, [r7, #24]
 8013048:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801304a:	697b      	ldr	r3, [r7, #20]
 801304c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801304e:	69bb      	ldr	r3, [r7, #24]
 8013050:	699b      	ldr	r3, [r3, #24]
 8013052:	68ba      	ldr	r2, [r7, #8]
 8013054:	429a      	cmp	r2, r3
 8013056:	d3c6      	bcc.n	8012fe6 <remove_chain+0x4a>
 8013058:	e000      	b.n	801305c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801305a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801305c:	2300      	movs	r3, #0
}
 801305e:	4618      	mov	r0, r3
 8013060:	3720      	adds	r7, #32
 8013062:	46bd      	mov	sp, r7
 8013064:	bd80      	pop	{r7, pc}

08013066 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013066:	b580      	push	{r7, lr}
 8013068:	b088      	sub	sp, #32
 801306a:	af00      	add	r7, sp, #0
 801306c:	6078      	str	r0, [r7, #4]
 801306e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013076:	683b      	ldr	r3, [r7, #0]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d10d      	bne.n	8013098 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801307c:	693b      	ldr	r3, [r7, #16]
 801307e:	691b      	ldr	r3, [r3, #16]
 8013080:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013082:	69bb      	ldr	r3, [r7, #24]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d004      	beq.n	8013092 <create_chain+0x2c>
 8013088:	693b      	ldr	r3, [r7, #16]
 801308a:	699b      	ldr	r3, [r3, #24]
 801308c:	69ba      	ldr	r2, [r7, #24]
 801308e:	429a      	cmp	r2, r3
 8013090:	d31b      	bcc.n	80130ca <create_chain+0x64>
 8013092:	2301      	movs	r3, #1
 8013094:	61bb      	str	r3, [r7, #24]
 8013096:	e018      	b.n	80130ca <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013098:	6839      	ldr	r1, [r7, #0]
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	f7ff fded 	bl	8012c7a <get_fat>
 80130a0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	2b01      	cmp	r3, #1
 80130a6:	d801      	bhi.n	80130ac <create_chain+0x46>
 80130a8:	2301      	movs	r3, #1
 80130aa:	e070      	b.n	801318e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130b2:	d101      	bne.n	80130b8 <create_chain+0x52>
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	e06a      	b.n	801318e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80130b8:	693b      	ldr	r3, [r7, #16]
 80130ba:	699b      	ldr	r3, [r3, #24]
 80130bc:	68fa      	ldr	r2, [r7, #12]
 80130be:	429a      	cmp	r2, r3
 80130c0:	d201      	bcs.n	80130c6 <create_chain+0x60>
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	e063      	b.n	801318e <create_chain+0x128>
		scl = clst;
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80130ca:	69bb      	ldr	r3, [r7, #24]
 80130cc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80130ce:	69fb      	ldr	r3, [r7, #28]
 80130d0:	3301      	adds	r3, #1
 80130d2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80130d4:	693b      	ldr	r3, [r7, #16]
 80130d6:	699b      	ldr	r3, [r3, #24]
 80130d8:	69fa      	ldr	r2, [r7, #28]
 80130da:	429a      	cmp	r2, r3
 80130dc:	d307      	bcc.n	80130ee <create_chain+0x88>
				ncl = 2;
 80130de:	2302      	movs	r3, #2
 80130e0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80130e2:	69fa      	ldr	r2, [r7, #28]
 80130e4:	69bb      	ldr	r3, [r7, #24]
 80130e6:	429a      	cmp	r2, r3
 80130e8:	d901      	bls.n	80130ee <create_chain+0x88>
 80130ea:	2300      	movs	r3, #0
 80130ec:	e04f      	b.n	801318e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80130ee:	69f9      	ldr	r1, [r7, #28]
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f7ff fdc2 	bl	8012c7a <get_fat>
 80130f6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d00e      	beq.n	801311c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	2b01      	cmp	r3, #1
 8013102:	d003      	beq.n	801310c <create_chain+0xa6>
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	f1b3 3fff 	cmp.w	r3, #4294967295
 801310a:	d101      	bne.n	8013110 <create_chain+0xaa>
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	e03e      	b.n	801318e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013110:	69fa      	ldr	r2, [r7, #28]
 8013112:	69bb      	ldr	r3, [r7, #24]
 8013114:	429a      	cmp	r2, r3
 8013116:	d1da      	bne.n	80130ce <create_chain+0x68>
 8013118:	2300      	movs	r3, #0
 801311a:	e038      	b.n	801318e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801311c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801311e:	f04f 32ff 	mov.w	r2, #4294967295
 8013122:	69f9      	ldr	r1, [r7, #28]
 8013124:	6938      	ldr	r0, [r7, #16]
 8013126:	f7ff fe4f 	bl	8012dc8 <put_fat>
 801312a:	4603      	mov	r3, r0
 801312c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801312e:	7dfb      	ldrb	r3, [r7, #23]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d109      	bne.n	8013148 <create_chain+0xe2>
 8013134:	683b      	ldr	r3, [r7, #0]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d006      	beq.n	8013148 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801313a:	69fa      	ldr	r2, [r7, #28]
 801313c:	6839      	ldr	r1, [r7, #0]
 801313e:	6938      	ldr	r0, [r7, #16]
 8013140:	f7ff fe42 	bl	8012dc8 <put_fat>
 8013144:	4603      	mov	r3, r0
 8013146:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013148:	7dfb      	ldrb	r3, [r7, #23]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d116      	bne.n	801317c <create_chain+0x116>
		fs->last_clst = ncl;
 801314e:	693b      	ldr	r3, [r7, #16]
 8013150:	69fa      	ldr	r2, [r7, #28]
 8013152:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013154:	693b      	ldr	r3, [r7, #16]
 8013156:	695a      	ldr	r2, [r3, #20]
 8013158:	693b      	ldr	r3, [r7, #16]
 801315a:	699b      	ldr	r3, [r3, #24]
 801315c:	3b02      	subs	r3, #2
 801315e:	429a      	cmp	r2, r3
 8013160:	d804      	bhi.n	801316c <create_chain+0x106>
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	695b      	ldr	r3, [r3, #20]
 8013166:	1e5a      	subs	r2, r3, #1
 8013168:	693b      	ldr	r3, [r7, #16]
 801316a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801316c:	693b      	ldr	r3, [r7, #16]
 801316e:	791b      	ldrb	r3, [r3, #4]
 8013170:	f043 0301 	orr.w	r3, r3, #1
 8013174:	b2da      	uxtb	r2, r3
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	711a      	strb	r2, [r3, #4]
 801317a:	e007      	b.n	801318c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801317c:	7dfb      	ldrb	r3, [r7, #23]
 801317e:	2b01      	cmp	r3, #1
 8013180:	d102      	bne.n	8013188 <create_chain+0x122>
 8013182:	f04f 33ff 	mov.w	r3, #4294967295
 8013186:	e000      	b.n	801318a <create_chain+0x124>
 8013188:	2301      	movs	r3, #1
 801318a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801318c:	69fb      	ldr	r3, [r7, #28]
}
 801318e:	4618      	mov	r0, r3
 8013190:	3720      	adds	r7, #32
 8013192:	46bd      	mov	sp, r7
 8013194:	bd80      	pop	{r7, pc}

08013196 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013196:	b480      	push	{r7}
 8013198:	b087      	sub	sp, #28
 801319a:	af00      	add	r7, sp, #0
 801319c:	6078      	str	r0, [r7, #4]
 801319e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131aa:	3304      	adds	r3, #4
 80131ac:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	0a5b      	lsrs	r3, r3, #9
 80131b2:	68fa      	ldr	r2, [r7, #12]
 80131b4:	8952      	ldrh	r2, [r2, #10]
 80131b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80131ba:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80131bc:	693b      	ldr	r3, [r7, #16]
 80131be:	1d1a      	adds	r2, r3, #4
 80131c0:	613a      	str	r2, [r7, #16]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80131c6:	68bb      	ldr	r3, [r7, #8]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d101      	bne.n	80131d0 <clmt_clust+0x3a>
 80131cc:	2300      	movs	r3, #0
 80131ce:	e010      	b.n	80131f2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80131d0:	697a      	ldr	r2, [r7, #20]
 80131d2:	68bb      	ldr	r3, [r7, #8]
 80131d4:	429a      	cmp	r2, r3
 80131d6:	d307      	bcc.n	80131e8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80131d8:	697a      	ldr	r2, [r7, #20]
 80131da:	68bb      	ldr	r3, [r7, #8]
 80131dc:	1ad3      	subs	r3, r2, r3
 80131de:	617b      	str	r3, [r7, #20]
 80131e0:	693b      	ldr	r3, [r7, #16]
 80131e2:	3304      	adds	r3, #4
 80131e4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80131e6:	e7e9      	b.n	80131bc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80131e8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80131ea:	693b      	ldr	r3, [r7, #16]
 80131ec:	681a      	ldr	r2, [r3, #0]
 80131ee:	697b      	ldr	r3, [r7, #20]
 80131f0:	4413      	add	r3, r2
}
 80131f2:	4618      	mov	r0, r3
 80131f4:	371c      	adds	r7, #28
 80131f6:	46bd      	mov	sp, r7
 80131f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fc:	4770      	bx	lr

080131fe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80131fe:	b580      	push	{r7, lr}
 8013200:	b086      	sub	sp, #24
 8013202:	af00      	add	r7, sp, #0
 8013204:	6078      	str	r0, [r7, #4]
 8013206:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013214:	d204      	bcs.n	8013220 <dir_sdi+0x22>
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	f003 031f 	and.w	r3, r3, #31
 801321c:	2b00      	cmp	r3, #0
 801321e:	d001      	beq.n	8013224 <dir_sdi+0x26>
		return FR_INT_ERR;
 8013220:	2302      	movs	r3, #2
 8013222:	e063      	b.n	80132ec <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	683a      	ldr	r2, [r7, #0]
 8013228:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	689b      	ldr	r3, [r3, #8]
 801322e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013230:	697b      	ldr	r3, [r7, #20]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d106      	bne.n	8013244 <dir_sdi+0x46>
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	781b      	ldrb	r3, [r3, #0]
 801323a:	2b02      	cmp	r3, #2
 801323c:	d902      	bls.n	8013244 <dir_sdi+0x46>
		clst = fs->dirbase;
 801323e:	693b      	ldr	r3, [r7, #16]
 8013240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013242:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013244:	697b      	ldr	r3, [r7, #20]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d10c      	bne.n	8013264 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801324a:	683b      	ldr	r3, [r7, #0]
 801324c:	095b      	lsrs	r3, r3, #5
 801324e:	693a      	ldr	r2, [r7, #16]
 8013250:	8912      	ldrh	r2, [r2, #8]
 8013252:	4293      	cmp	r3, r2
 8013254:	d301      	bcc.n	801325a <dir_sdi+0x5c>
 8013256:	2302      	movs	r3, #2
 8013258:	e048      	b.n	80132ec <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801325a:	693b      	ldr	r3, [r7, #16]
 801325c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	61da      	str	r2, [r3, #28]
 8013262:	e029      	b.n	80132b8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013264:	693b      	ldr	r3, [r7, #16]
 8013266:	895b      	ldrh	r3, [r3, #10]
 8013268:	025b      	lsls	r3, r3, #9
 801326a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801326c:	e019      	b.n	80132a2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	6979      	ldr	r1, [r7, #20]
 8013272:	4618      	mov	r0, r3
 8013274:	f7ff fd01 	bl	8012c7a <get_fat>
 8013278:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801327a:	697b      	ldr	r3, [r7, #20]
 801327c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013280:	d101      	bne.n	8013286 <dir_sdi+0x88>
 8013282:	2301      	movs	r3, #1
 8013284:	e032      	b.n	80132ec <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013286:	697b      	ldr	r3, [r7, #20]
 8013288:	2b01      	cmp	r3, #1
 801328a:	d904      	bls.n	8013296 <dir_sdi+0x98>
 801328c:	693b      	ldr	r3, [r7, #16]
 801328e:	699b      	ldr	r3, [r3, #24]
 8013290:	697a      	ldr	r2, [r7, #20]
 8013292:	429a      	cmp	r2, r3
 8013294:	d301      	bcc.n	801329a <dir_sdi+0x9c>
 8013296:	2302      	movs	r3, #2
 8013298:	e028      	b.n	80132ec <dir_sdi+0xee>
			ofs -= csz;
 801329a:	683a      	ldr	r2, [r7, #0]
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	1ad3      	subs	r3, r2, r3
 80132a0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80132a2:	683a      	ldr	r2, [r7, #0]
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	429a      	cmp	r2, r3
 80132a8:	d2e1      	bcs.n	801326e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80132aa:	6979      	ldr	r1, [r7, #20]
 80132ac:	6938      	ldr	r0, [r7, #16]
 80132ae:	f7ff fcc5 	bl	8012c3c <clust2sect>
 80132b2:	4602      	mov	r2, r0
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	697a      	ldr	r2, [r7, #20]
 80132bc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	69db      	ldr	r3, [r3, #28]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d101      	bne.n	80132ca <dir_sdi+0xcc>
 80132c6:	2302      	movs	r3, #2
 80132c8:	e010      	b.n	80132ec <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	69da      	ldr	r2, [r3, #28]
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	0a5b      	lsrs	r3, r3, #9
 80132d2:	441a      	add	r2, r3
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80132d8:	693b      	ldr	r3, [r7, #16]
 80132da:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80132de:	683b      	ldr	r3, [r7, #0]
 80132e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80132e4:	441a      	add	r2, r3
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80132ea:	2300      	movs	r3, #0
}
 80132ec:	4618      	mov	r0, r3
 80132ee:	3718      	adds	r7, #24
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}

080132f4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b086      	sub	sp, #24
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
 80132fc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	695b      	ldr	r3, [r3, #20]
 8013308:	3320      	adds	r3, #32
 801330a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	69db      	ldr	r3, [r3, #28]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d003      	beq.n	801331c <dir_next+0x28>
 8013314:	68bb      	ldr	r3, [r7, #8]
 8013316:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801331a:	d301      	bcc.n	8013320 <dir_next+0x2c>
 801331c:	2304      	movs	r3, #4
 801331e:	e0aa      	b.n	8013476 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013326:	2b00      	cmp	r3, #0
 8013328:	f040 8098 	bne.w	801345c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	69db      	ldr	r3, [r3, #28]
 8013330:	1c5a      	adds	r2, r3, #1
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	699b      	ldr	r3, [r3, #24]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d10b      	bne.n	8013356 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801333e:	68bb      	ldr	r3, [r7, #8]
 8013340:	095b      	lsrs	r3, r3, #5
 8013342:	68fa      	ldr	r2, [r7, #12]
 8013344:	8912      	ldrh	r2, [r2, #8]
 8013346:	4293      	cmp	r3, r2
 8013348:	f0c0 8088 	bcc.w	801345c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2200      	movs	r2, #0
 8013350:	61da      	str	r2, [r3, #28]
 8013352:	2304      	movs	r3, #4
 8013354:	e08f      	b.n	8013476 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013356:	68bb      	ldr	r3, [r7, #8]
 8013358:	0a5b      	lsrs	r3, r3, #9
 801335a:	68fa      	ldr	r2, [r7, #12]
 801335c:	8952      	ldrh	r2, [r2, #10]
 801335e:	3a01      	subs	r2, #1
 8013360:	4013      	ands	r3, r2
 8013362:	2b00      	cmp	r3, #0
 8013364:	d17a      	bne.n	801345c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013366:	687a      	ldr	r2, [r7, #4]
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	699b      	ldr	r3, [r3, #24]
 801336c:	4619      	mov	r1, r3
 801336e:	4610      	mov	r0, r2
 8013370:	f7ff fc83 	bl	8012c7a <get_fat>
 8013374:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	2b01      	cmp	r3, #1
 801337a:	d801      	bhi.n	8013380 <dir_next+0x8c>
 801337c:	2302      	movs	r3, #2
 801337e:	e07a      	b.n	8013476 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013386:	d101      	bne.n	801338c <dir_next+0x98>
 8013388:	2301      	movs	r3, #1
 801338a:	e074      	b.n	8013476 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	699b      	ldr	r3, [r3, #24]
 8013390:	697a      	ldr	r2, [r7, #20]
 8013392:	429a      	cmp	r2, r3
 8013394:	d358      	bcc.n	8013448 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013396:	683b      	ldr	r3, [r7, #0]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d104      	bne.n	80133a6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	2200      	movs	r2, #0
 80133a0:	61da      	str	r2, [r3, #28]
 80133a2:	2304      	movs	r3, #4
 80133a4:	e067      	b.n	8013476 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80133a6:	687a      	ldr	r2, [r7, #4]
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	699b      	ldr	r3, [r3, #24]
 80133ac:	4619      	mov	r1, r3
 80133ae:	4610      	mov	r0, r2
 80133b0:	f7ff fe59 	bl	8013066 <create_chain>
 80133b4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80133b6:	697b      	ldr	r3, [r7, #20]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d101      	bne.n	80133c0 <dir_next+0xcc>
 80133bc:	2307      	movs	r3, #7
 80133be:	e05a      	b.n	8013476 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	2b01      	cmp	r3, #1
 80133c4:	d101      	bne.n	80133ca <dir_next+0xd6>
 80133c6:	2302      	movs	r3, #2
 80133c8:	e055      	b.n	8013476 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80133ca:	697b      	ldr	r3, [r7, #20]
 80133cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133d0:	d101      	bne.n	80133d6 <dir_next+0xe2>
 80133d2:	2301      	movs	r3, #1
 80133d4:	e04f      	b.n	8013476 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80133d6:	68f8      	ldr	r0, [r7, #12]
 80133d8:	f7ff fb50 	bl	8012a7c <sync_window>
 80133dc:	4603      	mov	r3, r0
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d001      	beq.n	80133e6 <dir_next+0xf2>
 80133e2:	2301      	movs	r3, #1
 80133e4:	e047      	b.n	8013476 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	3334      	adds	r3, #52	@ 0x34
 80133ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80133ee:	2100      	movs	r1, #0
 80133f0:	4618      	mov	r0, r3
 80133f2:	f7ff f979 	bl	80126e8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80133f6:	2300      	movs	r3, #0
 80133f8:	613b      	str	r3, [r7, #16]
 80133fa:	6979      	ldr	r1, [r7, #20]
 80133fc:	68f8      	ldr	r0, [r7, #12]
 80133fe:	f7ff fc1d 	bl	8012c3c <clust2sect>
 8013402:	4602      	mov	r2, r0
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	631a      	str	r2, [r3, #48]	@ 0x30
 8013408:	e012      	b.n	8013430 <dir_next+0x13c>
						fs->wflag = 1;
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	2201      	movs	r2, #1
 801340e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013410:	68f8      	ldr	r0, [r7, #12]
 8013412:	f7ff fb33 	bl	8012a7c <sync_window>
 8013416:	4603      	mov	r3, r0
 8013418:	2b00      	cmp	r3, #0
 801341a:	d001      	beq.n	8013420 <dir_next+0x12c>
 801341c:	2301      	movs	r3, #1
 801341e:	e02a      	b.n	8013476 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013420:	693b      	ldr	r3, [r7, #16]
 8013422:	3301      	adds	r3, #1
 8013424:	613b      	str	r3, [r7, #16]
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801342a:	1c5a      	adds	r2, r3, #1
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	631a      	str	r2, [r3, #48]	@ 0x30
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	895b      	ldrh	r3, [r3, #10]
 8013434:	461a      	mov	r2, r3
 8013436:	693b      	ldr	r3, [r7, #16]
 8013438:	4293      	cmp	r3, r2
 801343a:	d3e6      	bcc.n	801340a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013440:	693b      	ldr	r3, [r7, #16]
 8013442:	1ad2      	subs	r2, r2, r3
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	697a      	ldr	r2, [r7, #20]
 801344c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801344e:	6979      	ldr	r1, [r7, #20]
 8013450:	68f8      	ldr	r0, [r7, #12]
 8013452:	f7ff fbf3 	bl	8012c3c <clust2sect>
 8013456:	4602      	mov	r2, r0
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	68ba      	ldr	r2, [r7, #8]
 8013460:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8013468:	68bb      	ldr	r3, [r7, #8]
 801346a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801346e:	441a      	add	r2, r3
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013474:	2300      	movs	r3, #0
}
 8013476:	4618      	mov	r0, r3
 8013478:	3718      	adds	r7, #24
 801347a:	46bd      	mov	sp, r7
 801347c:	bd80      	pop	{r7, pc}

0801347e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801347e:	b580      	push	{r7, lr}
 8013480:	b086      	sub	sp, #24
 8013482:	af00      	add	r7, sp, #0
 8013484:	6078      	str	r0, [r7, #4]
 8013486:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801348e:	2100      	movs	r1, #0
 8013490:	6878      	ldr	r0, [r7, #4]
 8013492:	f7ff feb4 	bl	80131fe <dir_sdi>
 8013496:	4603      	mov	r3, r0
 8013498:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801349a:	7dfb      	ldrb	r3, [r7, #23]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d12b      	bne.n	80134f8 <dir_alloc+0x7a>
		n = 0;
 80134a0:	2300      	movs	r3, #0
 80134a2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	69db      	ldr	r3, [r3, #28]
 80134a8:	4619      	mov	r1, r3
 80134aa:	68f8      	ldr	r0, [r7, #12]
 80134ac:	f7ff fb2a 	bl	8012b04 <move_window>
 80134b0:	4603      	mov	r3, r0
 80134b2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80134b4:	7dfb      	ldrb	r3, [r7, #23]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d11d      	bne.n	80134f6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	6a1b      	ldr	r3, [r3, #32]
 80134be:	781b      	ldrb	r3, [r3, #0]
 80134c0:	2be5      	cmp	r3, #229	@ 0xe5
 80134c2:	d004      	beq.n	80134ce <dir_alloc+0x50>
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	6a1b      	ldr	r3, [r3, #32]
 80134c8:	781b      	ldrb	r3, [r3, #0]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d107      	bne.n	80134de <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80134ce:	693b      	ldr	r3, [r7, #16]
 80134d0:	3301      	adds	r3, #1
 80134d2:	613b      	str	r3, [r7, #16]
 80134d4:	693a      	ldr	r2, [r7, #16]
 80134d6:	683b      	ldr	r3, [r7, #0]
 80134d8:	429a      	cmp	r2, r3
 80134da:	d102      	bne.n	80134e2 <dir_alloc+0x64>
 80134dc:	e00c      	b.n	80134f8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80134de:	2300      	movs	r3, #0
 80134e0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80134e2:	2101      	movs	r1, #1
 80134e4:	6878      	ldr	r0, [r7, #4]
 80134e6:	f7ff ff05 	bl	80132f4 <dir_next>
 80134ea:	4603      	mov	r3, r0
 80134ec:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80134ee:	7dfb      	ldrb	r3, [r7, #23]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d0d7      	beq.n	80134a4 <dir_alloc+0x26>
 80134f4:	e000      	b.n	80134f8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80134f6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80134f8:	7dfb      	ldrb	r3, [r7, #23]
 80134fa:	2b04      	cmp	r3, #4
 80134fc:	d101      	bne.n	8013502 <dir_alloc+0x84>
 80134fe:	2307      	movs	r3, #7
 8013500:	75fb      	strb	r3, [r7, #23]
	return res;
 8013502:	7dfb      	ldrb	r3, [r7, #23]
}
 8013504:	4618      	mov	r0, r3
 8013506:	3718      	adds	r7, #24
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}

0801350c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b084      	sub	sp, #16
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
 8013514:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013516:	683b      	ldr	r3, [r7, #0]
 8013518:	331a      	adds	r3, #26
 801351a:	4618      	mov	r0, r3
 801351c:	f7ff f840 	bl	80125a0 <ld_word>
 8013520:	4603      	mov	r3, r0
 8013522:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	781b      	ldrb	r3, [r3, #0]
 8013528:	2b03      	cmp	r3, #3
 801352a:	d109      	bne.n	8013540 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801352c:	683b      	ldr	r3, [r7, #0]
 801352e:	3314      	adds	r3, #20
 8013530:	4618      	mov	r0, r3
 8013532:	f7ff f835 	bl	80125a0 <ld_word>
 8013536:	4603      	mov	r3, r0
 8013538:	041b      	lsls	r3, r3, #16
 801353a:	68fa      	ldr	r2, [r7, #12]
 801353c:	4313      	orrs	r3, r2
 801353e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013540:	68fb      	ldr	r3, [r7, #12]
}
 8013542:	4618      	mov	r0, r3
 8013544:	3710      	adds	r7, #16
 8013546:	46bd      	mov	sp, r7
 8013548:	bd80      	pop	{r7, pc}

0801354a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801354a:	b580      	push	{r7, lr}
 801354c:	b084      	sub	sp, #16
 801354e:	af00      	add	r7, sp, #0
 8013550:	60f8      	str	r0, [r7, #12]
 8013552:	60b9      	str	r1, [r7, #8]
 8013554:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013556:	68bb      	ldr	r3, [r7, #8]
 8013558:	331a      	adds	r3, #26
 801355a:	687a      	ldr	r2, [r7, #4]
 801355c:	b292      	uxth	r2, r2
 801355e:	4611      	mov	r1, r2
 8013560:	4618      	mov	r0, r3
 8013562:	f7ff f859 	bl	8012618 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	781b      	ldrb	r3, [r3, #0]
 801356a:	2b03      	cmp	r3, #3
 801356c:	d109      	bne.n	8013582 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801356e:	68bb      	ldr	r3, [r7, #8]
 8013570:	f103 0214 	add.w	r2, r3, #20
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	0c1b      	lsrs	r3, r3, #16
 8013578:	b29b      	uxth	r3, r3
 801357a:	4619      	mov	r1, r3
 801357c:	4610      	mov	r0, r2
 801357e:	f7ff f84b 	bl	8012618 <st_word>
	}
}
 8013582:	bf00      	nop
 8013584:	3710      	adds	r7, #16
 8013586:	46bd      	mov	sp, r7
 8013588:	bd80      	pop	{r7, pc}
	...

0801358c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801358c:	b590      	push	{r4, r7, lr}
 801358e:	b087      	sub	sp, #28
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
 8013594:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	331a      	adds	r3, #26
 801359a:	4618      	mov	r0, r3
 801359c:	f7ff f800 	bl	80125a0 <ld_word>
 80135a0:	4603      	mov	r3, r0
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d001      	beq.n	80135aa <cmp_lfn+0x1e>
 80135a6:	2300      	movs	r3, #0
 80135a8:	e059      	b.n	801365e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	781b      	ldrb	r3, [r3, #0]
 80135ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80135b2:	1e5a      	subs	r2, r3, #1
 80135b4:	4613      	mov	r3, r2
 80135b6:	005b      	lsls	r3, r3, #1
 80135b8:	4413      	add	r3, r2
 80135ba:	009b      	lsls	r3, r3, #2
 80135bc:	4413      	add	r3, r2
 80135be:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80135c0:	2301      	movs	r3, #1
 80135c2:	81fb      	strh	r3, [r7, #14]
 80135c4:	2300      	movs	r3, #0
 80135c6:	613b      	str	r3, [r7, #16]
 80135c8:	e033      	b.n	8013632 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80135ca:	4a27      	ldr	r2, [pc, #156]	@ (8013668 <cmp_lfn+0xdc>)
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	4413      	add	r3, r2
 80135d0:	781b      	ldrb	r3, [r3, #0]
 80135d2:	461a      	mov	r2, r3
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	4413      	add	r3, r2
 80135d8:	4618      	mov	r0, r3
 80135da:	f7fe ffe1 	bl	80125a0 <ld_word>
 80135de:	4603      	mov	r3, r0
 80135e0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80135e2:	89fb      	ldrh	r3, [r7, #14]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d01a      	beq.n	801361e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80135e8:	697b      	ldr	r3, [r7, #20]
 80135ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80135ec:	d812      	bhi.n	8013614 <cmp_lfn+0x88>
 80135ee:	89bb      	ldrh	r3, [r7, #12]
 80135f0:	4618      	mov	r0, r3
 80135f2:	f001 ffd5 	bl	80155a0 <ff_wtoupper>
 80135f6:	4603      	mov	r3, r0
 80135f8:	461c      	mov	r4, r3
 80135fa:	697b      	ldr	r3, [r7, #20]
 80135fc:	1c5a      	adds	r2, r3, #1
 80135fe:	617a      	str	r2, [r7, #20]
 8013600:	005b      	lsls	r3, r3, #1
 8013602:	687a      	ldr	r2, [r7, #4]
 8013604:	4413      	add	r3, r2
 8013606:	881b      	ldrh	r3, [r3, #0]
 8013608:	4618      	mov	r0, r3
 801360a:	f001 ffc9 	bl	80155a0 <ff_wtoupper>
 801360e:	4603      	mov	r3, r0
 8013610:	429c      	cmp	r4, r3
 8013612:	d001      	beq.n	8013618 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8013614:	2300      	movs	r3, #0
 8013616:	e022      	b.n	801365e <cmp_lfn+0xd2>
			}
			wc = uc;
 8013618:	89bb      	ldrh	r3, [r7, #12]
 801361a:	81fb      	strh	r3, [r7, #14]
 801361c:	e006      	b.n	801362c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801361e:	89bb      	ldrh	r3, [r7, #12]
 8013620:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013624:	4293      	cmp	r3, r2
 8013626:	d001      	beq.n	801362c <cmp_lfn+0xa0>
 8013628:	2300      	movs	r3, #0
 801362a:	e018      	b.n	801365e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801362c:	693b      	ldr	r3, [r7, #16]
 801362e:	3301      	adds	r3, #1
 8013630:	613b      	str	r3, [r7, #16]
 8013632:	693b      	ldr	r3, [r7, #16]
 8013634:	2b0c      	cmp	r3, #12
 8013636:	d9c8      	bls.n	80135ca <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	781b      	ldrb	r3, [r3, #0]
 801363c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013640:	2b00      	cmp	r3, #0
 8013642:	d00b      	beq.n	801365c <cmp_lfn+0xd0>
 8013644:	89fb      	ldrh	r3, [r7, #14]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d008      	beq.n	801365c <cmp_lfn+0xd0>
 801364a:	697b      	ldr	r3, [r7, #20]
 801364c:	005b      	lsls	r3, r3, #1
 801364e:	687a      	ldr	r2, [r7, #4]
 8013650:	4413      	add	r3, r2
 8013652:	881b      	ldrh	r3, [r3, #0]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d001      	beq.n	801365c <cmp_lfn+0xd0>
 8013658:	2300      	movs	r3, #0
 801365a:	e000      	b.n	801365e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801365c:	2301      	movs	r3, #1
}
 801365e:	4618      	mov	r0, r3
 8013660:	371c      	adds	r7, #28
 8013662:	46bd      	mov	sp, r7
 8013664:	bd90      	pop	{r4, r7, pc}
 8013666:	bf00      	nop
 8013668:	08018304 	.word	0x08018304

0801366c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b088      	sub	sp, #32
 8013670:	af00      	add	r7, sp, #0
 8013672:	60f8      	str	r0, [r7, #12]
 8013674:	60b9      	str	r1, [r7, #8]
 8013676:	4611      	mov	r1, r2
 8013678:	461a      	mov	r2, r3
 801367a:	460b      	mov	r3, r1
 801367c:	71fb      	strb	r3, [r7, #7]
 801367e:	4613      	mov	r3, r2
 8013680:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	330d      	adds	r3, #13
 8013686:	79ba      	ldrb	r2, [r7, #6]
 8013688:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801368a:	68bb      	ldr	r3, [r7, #8]
 801368c:	330b      	adds	r3, #11
 801368e:	220f      	movs	r2, #15
 8013690:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8013692:	68bb      	ldr	r3, [r7, #8]
 8013694:	330c      	adds	r3, #12
 8013696:	2200      	movs	r2, #0
 8013698:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801369a:	68bb      	ldr	r3, [r7, #8]
 801369c:	331a      	adds	r3, #26
 801369e:	2100      	movs	r1, #0
 80136a0:	4618      	mov	r0, r3
 80136a2:	f7fe ffb9 	bl	8012618 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80136a6:	79fb      	ldrb	r3, [r7, #7]
 80136a8:	1e5a      	subs	r2, r3, #1
 80136aa:	4613      	mov	r3, r2
 80136ac:	005b      	lsls	r3, r3, #1
 80136ae:	4413      	add	r3, r2
 80136b0:	009b      	lsls	r3, r3, #2
 80136b2:	4413      	add	r3, r2
 80136b4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80136b6:	2300      	movs	r3, #0
 80136b8:	82fb      	strh	r3, [r7, #22]
 80136ba:	2300      	movs	r3, #0
 80136bc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80136be:	8afb      	ldrh	r3, [r7, #22]
 80136c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80136c4:	4293      	cmp	r3, r2
 80136c6:	d007      	beq.n	80136d8 <put_lfn+0x6c>
 80136c8:	69fb      	ldr	r3, [r7, #28]
 80136ca:	1c5a      	adds	r2, r3, #1
 80136cc:	61fa      	str	r2, [r7, #28]
 80136ce:	005b      	lsls	r3, r3, #1
 80136d0:	68fa      	ldr	r2, [r7, #12]
 80136d2:	4413      	add	r3, r2
 80136d4:	881b      	ldrh	r3, [r3, #0]
 80136d6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80136d8:	4a17      	ldr	r2, [pc, #92]	@ (8013738 <put_lfn+0xcc>)
 80136da:	69bb      	ldr	r3, [r7, #24]
 80136dc:	4413      	add	r3, r2
 80136de:	781b      	ldrb	r3, [r3, #0]
 80136e0:	461a      	mov	r2, r3
 80136e2:	68bb      	ldr	r3, [r7, #8]
 80136e4:	4413      	add	r3, r2
 80136e6:	8afa      	ldrh	r2, [r7, #22]
 80136e8:	4611      	mov	r1, r2
 80136ea:	4618      	mov	r0, r3
 80136ec:	f7fe ff94 	bl	8012618 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80136f0:	8afb      	ldrh	r3, [r7, #22]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d102      	bne.n	80136fc <put_lfn+0x90>
 80136f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80136fa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80136fc:	69bb      	ldr	r3, [r7, #24]
 80136fe:	3301      	adds	r3, #1
 8013700:	61bb      	str	r3, [r7, #24]
 8013702:	69bb      	ldr	r3, [r7, #24]
 8013704:	2b0c      	cmp	r3, #12
 8013706:	d9da      	bls.n	80136be <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8013708:	8afb      	ldrh	r3, [r7, #22]
 801370a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801370e:	4293      	cmp	r3, r2
 8013710:	d006      	beq.n	8013720 <put_lfn+0xb4>
 8013712:	69fb      	ldr	r3, [r7, #28]
 8013714:	005b      	lsls	r3, r3, #1
 8013716:	68fa      	ldr	r2, [r7, #12]
 8013718:	4413      	add	r3, r2
 801371a:	881b      	ldrh	r3, [r3, #0]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d103      	bne.n	8013728 <put_lfn+0xbc>
 8013720:	79fb      	ldrb	r3, [r7, #7]
 8013722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013726:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	79fa      	ldrb	r2, [r7, #7]
 801372c:	701a      	strb	r2, [r3, #0]
}
 801372e:	bf00      	nop
 8013730:	3720      	adds	r7, #32
 8013732:	46bd      	mov	sp, r7
 8013734:	bd80      	pop	{r7, pc}
 8013736:	bf00      	nop
 8013738:	08018304 	.word	0x08018304

0801373c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b08c      	sub	sp, #48	@ 0x30
 8013740:	af00      	add	r7, sp, #0
 8013742:	60f8      	str	r0, [r7, #12]
 8013744:	60b9      	str	r1, [r7, #8]
 8013746:	607a      	str	r2, [r7, #4]
 8013748:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801374a:	220b      	movs	r2, #11
 801374c:	68b9      	ldr	r1, [r7, #8]
 801374e:	68f8      	ldr	r0, [r7, #12]
 8013750:	f7fe ffa9 	bl	80126a6 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	2b05      	cmp	r3, #5
 8013758:	d92b      	bls.n	80137b2 <gen_numname+0x76>
		sr = seq;
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801375e:	e022      	b.n	80137a6 <gen_numname+0x6a>
			wc = *lfn++;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	1c9a      	adds	r2, r3, #2
 8013764:	607a      	str	r2, [r7, #4]
 8013766:	881b      	ldrh	r3, [r3, #0]
 8013768:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801376a:	2300      	movs	r3, #0
 801376c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801376e:	e017      	b.n	80137a0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8013770:	69fb      	ldr	r3, [r7, #28]
 8013772:	005a      	lsls	r2, r3, #1
 8013774:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013776:	f003 0301 	and.w	r3, r3, #1
 801377a:	4413      	add	r3, r2
 801377c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801377e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013780:	085b      	lsrs	r3, r3, #1
 8013782:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8013784:	69fb      	ldr	r3, [r7, #28]
 8013786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801378a:	2b00      	cmp	r3, #0
 801378c:	d005      	beq.n	801379a <gen_numname+0x5e>
 801378e:	69fb      	ldr	r3, [r7, #28]
 8013790:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8013794:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8013798:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801379a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801379c:	3301      	adds	r3, #1
 801379e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80137a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137a2:	2b0f      	cmp	r3, #15
 80137a4:	d9e4      	bls.n	8013770 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	881b      	ldrh	r3, [r3, #0]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d1d8      	bne.n	8013760 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80137ae:	69fb      	ldr	r3, [r7, #28]
 80137b0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80137b2:	2307      	movs	r3, #7
 80137b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80137b6:	683b      	ldr	r3, [r7, #0]
 80137b8:	b2db      	uxtb	r3, r3
 80137ba:	f003 030f 	and.w	r3, r3, #15
 80137be:	b2db      	uxtb	r3, r3
 80137c0:	3330      	adds	r3, #48	@ 0x30
 80137c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80137c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80137ca:	2b39      	cmp	r3, #57	@ 0x39
 80137cc:	d904      	bls.n	80137d8 <gen_numname+0x9c>
 80137ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80137d2:	3307      	adds	r3, #7
 80137d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80137d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137da:	1e5a      	subs	r2, r3, #1
 80137dc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80137de:	3330      	adds	r3, #48	@ 0x30
 80137e0:	443b      	add	r3, r7
 80137e2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80137e6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80137ea:	683b      	ldr	r3, [r7, #0]
 80137ec:	091b      	lsrs	r3, r3, #4
 80137ee:	603b      	str	r3, [r7, #0]
	} while (seq);
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d1df      	bne.n	80137b6 <gen_numname+0x7a>
	ns[i] = '~';
 80137f6:	f107 0214 	add.w	r2, r7, #20
 80137fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137fc:	4413      	add	r3, r2
 80137fe:	227e      	movs	r2, #126	@ 0x7e
 8013800:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8013802:	2300      	movs	r3, #0
 8013804:	627b      	str	r3, [r7, #36]	@ 0x24
 8013806:	e002      	b.n	801380e <gen_numname+0xd2>
 8013808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801380a:	3301      	adds	r3, #1
 801380c:	627b      	str	r3, [r7, #36]	@ 0x24
 801380e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013812:	429a      	cmp	r2, r3
 8013814:	d205      	bcs.n	8013822 <gen_numname+0xe6>
 8013816:	68fa      	ldr	r2, [r7, #12]
 8013818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801381a:	4413      	add	r3, r2
 801381c:	781b      	ldrb	r3, [r3, #0]
 801381e:	2b20      	cmp	r3, #32
 8013820:	d1f2      	bne.n	8013808 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013824:	2b07      	cmp	r3, #7
 8013826:	d807      	bhi.n	8013838 <gen_numname+0xfc>
 8013828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801382a:	1c5a      	adds	r2, r3, #1
 801382c:	62ba      	str	r2, [r7, #40]	@ 0x28
 801382e:	3330      	adds	r3, #48	@ 0x30
 8013830:	443b      	add	r3, r7
 8013832:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8013836:	e000      	b.n	801383a <gen_numname+0xfe>
 8013838:	2120      	movs	r1, #32
 801383a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801383c:	1c5a      	adds	r2, r3, #1
 801383e:	627a      	str	r2, [r7, #36]	@ 0x24
 8013840:	68fa      	ldr	r2, [r7, #12]
 8013842:	4413      	add	r3, r2
 8013844:	460a      	mov	r2, r1
 8013846:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8013848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801384a:	2b07      	cmp	r3, #7
 801384c:	d9e9      	bls.n	8013822 <gen_numname+0xe6>
}
 801384e:	bf00      	nop
 8013850:	bf00      	nop
 8013852:	3730      	adds	r7, #48	@ 0x30
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}

08013858 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8013858:	b480      	push	{r7}
 801385a:	b085      	sub	sp, #20
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8013860:	2300      	movs	r3, #0
 8013862:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8013864:	230b      	movs	r3, #11
 8013866:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8013868:	7bfb      	ldrb	r3, [r7, #15]
 801386a:	b2da      	uxtb	r2, r3
 801386c:	0852      	lsrs	r2, r2, #1
 801386e:	01db      	lsls	r3, r3, #7
 8013870:	4313      	orrs	r3, r2
 8013872:	b2da      	uxtb	r2, r3
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	1c59      	adds	r1, r3, #1
 8013878:	6079      	str	r1, [r7, #4]
 801387a:	781b      	ldrb	r3, [r3, #0]
 801387c:	4413      	add	r3, r2
 801387e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8013880:	68bb      	ldr	r3, [r7, #8]
 8013882:	3b01      	subs	r3, #1
 8013884:	60bb      	str	r3, [r7, #8]
 8013886:	68bb      	ldr	r3, [r7, #8]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d1ed      	bne.n	8013868 <sum_sfn+0x10>
	return sum;
 801388c:	7bfb      	ldrb	r3, [r7, #15]
}
 801388e:	4618      	mov	r0, r3
 8013890:	3714      	adds	r7, #20
 8013892:	46bd      	mov	sp, r7
 8013894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013898:	4770      	bx	lr

0801389a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801389a:	b580      	push	{r7, lr}
 801389c:	b086      	sub	sp, #24
 801389e:	af00      	add	r7, sp, #0
 80138a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80138a8:	2100      	movs	r1, #0
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	f7ff fca7 	bl	80131fe <dir_sdi>
 80138b0:	4603      	mov	r3, r0
 80138b2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80138b4:	7dfb      	ldrb	r3, [r7, #23]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d001      	beq.n	80138be <dir_find+0x24>
 80138ba:	7dfb      	ldrb	r3, [r7, #23]
 80138bc:	e0a9      	b.n	8013a12 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80138be:	23ff      	movs	r3, #255	@ 0xff
 80138c0:	753b      	strb	r3, [r7, #20]
 80138c2:	7d3b      	ldrb	r3, [r7, #20]
 80138c4:	757b      	strb	r3, [r7, #21]
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	f04f 32ff 	mov.w	r2, #4294967295
 80138cc:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	69db      	ldr	r3, [r3, #28]
 80138d2:	4619      	mov	r1, r3
 80138d4:	6938      	ldr	r0, [r7, #16]
 80138d6:	f7ff f915 	bl	8012b04 <move_window>
 80138da:	4603      	mov	r3, r0
 80138dc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80138de:	7dfb      	ldrb	r3, [r7, #23]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	f040 8090 	bne.w	8013a06 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	6a1b      	ldr	r3, [r3, #32]
 80138ea:	781b      	ldrb	r3, [r3, #0]
 80138ec:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80138ee:	7dbb      	ldrb	r3, [r7, #22]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d102      	bne.n	80138fa <dir_find+0x60>
 80138f4:	2304      	movs	r3, #4
 80138f6:	75fb      	strb	r3, [r7, #23]
 80138f8:	e08a      	b.n	8013a10 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	6a1b      	ldr	r3, [r3, #32]
 80138fe:	330b      	adds	r3, #11
 8013900:	781b      	ldrb	r3, [r3, #0]
 8013902:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013906:	73fb      	strb	r3, [r7, #15]
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	7bfa      	ldrb	r2, [r7, #15]
 801390c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801390e:	7dbb      	ldrb	r3, [r7, #22]
 8013910:	2be5      	cmp	r3, #229	@ 0xe5
 8013912:	d007      	beq.n	8013924 <dir_find+0x8a>
 8013914:	7bfb      	ldrb	r3, [r7, #15]
 8013916:	f003 0308 	and.w	r3, r3, #8
 801391a:	2b00      	cmp	r3, #0
 801391c:	d009      	beq.n	8013932 <dir_find+0x98>
 801391e:	7bfb      	ldrb	r3, [r7, #15]
 8013920:	2b0f      	cmp	r3, #15
 8013922:	d006      	beq.n	8013932 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8013924:	23ff      	movs	r3, #255	@ 0xff
 8013926:	757b      	strb	r3, [r7, #21]
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	f04f 32ff 	mov.w	r2, #4294967295
 801392e:	631a      	str	r2, [r3, #48]	@ 0x30
 8013930:	e05e      	b.n	80139f0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8013932:	7bfb      	ldrb	r3, [r7, #15]
 8013934:	2b0f      	cmp	r3, #15
 8013936:	d136      	bne.n	80139a6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801393e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013942:	2b00      	cmp	r3, #0
 8013944:	d154      	bne.n	80139f0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8013946:	7dbb      	ldrb	r3, [r7, #22]
 8013948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801394c:	2b00      	cmp	r3, #0
 801394e:	d00d      	beq.n	801396c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	6a1b      	ldr	r3, [r3, #32]
 8013954:	7b5b      	ldrb	r3, [r3, #13]
 8013956:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8013958:	7dbb      	ldrb	r3, [r7, #22]
 801395a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801395e:	75bb      	strb	r3, [r7, #22]
 8013960:	7dbb      	ldrb	r3, [r7, #22]
 8013962:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	695a      	ldr	r2, [r3, #20]
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801396c:	7dba      	ldrb	r2, [r7, #22]
 801396e:	7d7b      	ldrb	r3, [r7, #21]
 8013970:	429a      	cmp	r2, r3
 8013972:	d115      	bne.n	80139a0 <dir_find+0x106>
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	6a1b      	ldr	r3, [r3, #32]
 8013978:	330d      	adds	r3, #13
 801397a:	781b      	ldrb	r3, [r3, #0]
 801397c:	7d3a      	ldrb	r2, [r7, #20]
 801397e:	429a      	cmp	r2, r3
 8013980:	d10e      	bne.n	80139a0 <dir_find+0x106>
 8013982:	693b      	ldr	r3, [r7, #16]
 8013984:	68da      	ldr	r2, [r3, #12]
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	6a1b      	ldr	r3, [r3, #32]
 801398a:	4619      	mov	r1, r3
 801398c:	4610      	mov	r0, r2
 801398e:	f7ff fdfd 	bl	801358c <cmp_lfn>
 8013992:	4603      	mov	r3, r0
 8013994:	2b00      	cmp	r3, #0
 8013996:	d003      	beq.n	80139a0 <dir_find+0x106>
 8013998:	7d7b      	ldrb	r3, [r7, #21]
 801399a:	3b01      	subs	r3, #1
 801399c:	b2db      	uxtb	r3, r3
 801399e:	e000      	b.n	80139a2 <dir_find+0x108>
 80139a0:	23ff      	movs	r3, #255	@ 0xff
 80139a2:	757b      	strb	r3, [r7, #21]
 80139a4:	e024      	b.n	80139f0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80139a6:	7d7b      	ldrb	r3, [r7, #21]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d109      	bne.n	80139c0 <dir_find+0x126>
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	6a1b      	ldr	r3, [r3, #32]
 80139b0:	4618      	mov	r0, r3
 80139b2:	f7ff ff51 	bl	8013858 <sum_sfn>
 80139b6:	4603      	mov	r3, r0
 80139b8:	461a      	mov	r2, r3
 80139ba:	7d3b      	ldrb	r3, [r7, #20]
 80139bc:	4293      	cmp	r3, r2
 80139be:	d024      	beq.n	8013a0a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80139c6:	f003 0301 	and.w	r3, r3, #1
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d10a      	bne.n	80139e4 <dir_find+0x14a>
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	6a18      	ldr	r0, [r3, #32]
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	3324      	adds	r3, #36	@ 0x24
 80139d6:	220b      	movs	r2, #11
 80139d8:	4619      	mov	r1, r3
 80139da:	f7fe fea0 	bl	801271e <mem_cmp>
 80139de:	4603      	mov	r3, r0
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d014      	beq.n	8013a0e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80139e4:	23ff      	movs	r3, #255	@ 0xff
 80139e6:	757b      	strb	r3, [r7, #21]
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	f04f 32ff 	mov.w	r2, #4294967295
 80139ee:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80139f0:	2100      	movs	r1, #0
 80139f2:	6878      	ldr	r0, [r7, #4]
 80139f4:	f7ff fc7e 	bl	80132f4 <dir_next>
 80139f8:	4603      	mov	r3, r0
 80139fa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80139fc:	7dfb      	ldrb	r3, [r7, #23]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	f43f af65 	beq.w	80138ce <dir_find+0x34>
 8013a04:	e004      	b.n	8013a10 <dir_find+0x176>
		if (res != FR_OK) break;
 8013a06:	bf00      	nop
 8013a08:	e002      	b.n	8013a10 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8013a0a:	bf00      	nop
 8013a0c:	e000      	b.n	8013a10 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8013a0e:	bf00      	nop

	return res;
 8013a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a12:	4618      	mov	r0, r3
 8013a14:	3718      	adds	r7, #24
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}
	...

08013a1c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b08c      	sub	sp, #48	@ 0x30
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013a30:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d001      	beq.n	8013a3c <dir_register+0x20>
 8013a38:	2306      	movs	r3, #6
 8013a3a:	e0e0      	b.n	8013bfe <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8013a40:	e002      	b.n	8013a48 <dir_register+0x2c>
 8013a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a44:	3301      	adds	r3, #1
 8013a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8013a48:	69fb      	ldr	r3, [r7, #28]
 8013a4a:	68da      	ldr	r2, [r3, #12]
 8013a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a4e:	005b      	lsls	r3, r3, #1
 8013a50:	4413      	add	r3, r2
 8013a52:	881b      	ldrh	r3, [r3, #0]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d1f4      	bne.n	8013a42 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8013a5e:	f107 030c 	add.w	r3, r7, #12
 8013a62:	220c      	movs	r2, #12
 8013a64:	4618      	mov	r0, r3
 8013a66:	f7fe fe1e 	bl	80126a6 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8013a6a:	7dfb      	ldrb	r3, [r7, #23]
 8013a6c:	f003 0301 	and.w	r3, r3, #1
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d032      	beq.n	8013ada <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	2240      	movs	r2, #64	@ 0x40
 8013a78:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8013a7c:	2301      	movs	r3, #1
 8013a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013a80:	e016      	b.n	8013ab0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8013a88:	69fb      	ldr	r3, [r7, #28]
 8013a8a:	68da      	ldr	r2, [r3, #12]
 8013a8c:	f107 010c 	add.w	r1, r7, #12
 8013a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a92:	f7ff fe53 	bl	801373c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8013a96:	6878      	ldr	r0, [r7, #4]
 8013a98:	f7ff feff 	bl	801389a <dir_find>
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8013aa2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d106      	bne.n	8013ab8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8013aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013aac:	3301      	adds	r3, #1
 8013aae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ab2:	2b63      	cmp	r3, #99	@ 0x63
 8013ab4:	d9e5      	bls.n	8013a82 <dir_register+0x66>
 8013ab6:	e000      	b.n	8013aba <dir_register+0x9e>
			if (res != FR_OK) break;
 8013ab8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8013aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013abc:	2b64      	cmp	r3, #100	@ 0x64
 8013abe:	d101      	bne.n	8013ac4 <dir_register+0xa8>
 8013ac0:	2307      	movs	r3, #7
 8013ac2:	e09c      	b.n	8013bfe <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8013ac4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013ac8:	2b04      	cmp	r3, #4
 8013aca:	d002      	beq.n	8013ad2 <dir_register+0xb6>
 8013acc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013ad0:	e095      	b.n	8013bfe <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8013ad2:	7dfa      	ldrb	r2, [r7, #23]
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8013ada:	7dfb      	ldrb	r3, [r7, #23]
 8013adc:	f003 0302 	and.w	r3, r3, #2
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d007      	beq.n	8013af4 <dir_register+0xd8>
 8013ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ae6:	330c      	adds	r3, #12
 8013ae8:	4a47      	ldr	r2, [pc, #284]	@ (8013c08 <dir_register+0x1ec>)
 8013aea:	fba2 2303 	umull	r2, r3, r2, r3
 8013aee:	089b      	lsrs	r3, r3, #2
 8013af0:	3301      	adds	r3, #1
 8013af2:	e000      	b.n	8013af6 <dir_register+0xda>
 8013af4:	2301      	movs	r3, #1
 8013af6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8013af8:	6a39      	ldr	r1, [r7, #32]
 8013afa:	6878      	ldr	r0, [r7, #4]
 8013afc:	f7ff fcbf 	bl	801347e <dir_alloc>
 8013b00:	4603      	mov	r3, r0
 8013b02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8013b06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d148      	bne.n	8013ba0 <dir_register+0x184>
 8013b0e:	6a3b      	ldr	r3, [r7, #32]
 8013b10:	3b01      	subs	r3, #1
 8013b12:	623b      	str	r3, [r7, #32]
 8013b14:	6a3b      	ldr	r3, [r7, #32]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d042      	beq.n	8013ba0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	695a      	ldr	r2, [r3, #20]
 8013b1e:	6a3b      	ldr	r3, [r7, #32]
 8013b20:	015b      	lsls	r3, r3, #5
 8013b22:	1ad3      	subs	r3, r2, r3
 8013b24:	4619      	mov	r1, r3
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f7ff fb69 	bl	80131fe <dir_sdi>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8013b32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d132      	bne.n	8013ba0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	3324      	adds	r3, #36	@ 0x24
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7ff fe8a 	bl	8013858 <sum_sfn>
 8013b44:	4603      	mov	r3, r0
 8013b46:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	69db      	ldr	r3, [r3, #28]
 8013b4c:	4619      	mov	r1, r3
 8013b4e:	69f8      	ldr	r0, [r7, #28]
 8013b50:	f7fe ffd8 	bl	8012b04 <move_window>
 8013b54:	4603      	mov	r3, r0
 8013b56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8013b5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d11d      	bne.n	8013b9e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8013b62:	69fb      	ldr	r3, [r7, #28]
 8013b64:	68d8      	ldr	r0, [r3, #12]
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	6a19      	ldr	r1, [r3, #32]
 8013b6a:	6a3b      	ldr	r3, [r7, #32]
 8013b6c:	b2da      	uxtb	r2, r3
 8013b6e:	7efb      	ldrb	r3, [r7, #27]
 8013b70:	f7ff fd7c 	bl	801366c <put_lfn>
				fs->wflag = 1;
 8013b74:	69fb      	ldr	r3, [r7, #28]
 8013b76:	2201      	movs	r2, #1
 8013b78:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8013b7a:	2100      	movs	r1, #0
 8013b7c:	6878      	ldr	r0, [r7, #4]
 8013b7e:	f7ff fbb9 	bl	80132f4 <dir_next>
 8013b82:	4603      	mov	r3, r0
 8013b84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8013b88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d107      	bne.n	8013ba0 <dir_register+0x184>
 8013b90:	6a3b      	ldr	r3, [r7, #32]
 8013b92:	3b01      	subs	r3, #1
 8013b94:	623b      	str	r3, [r7, #32]
 8013b96:	6a3b      	ldr	r3, [r7, #32]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d1d5      	bne.n	8013b48 <dir_register+0x12c>
 8013b9c:	e000      	b.n	8013ba0 <dir_register+0x184>
				if (res != FR_OK) break;
 8013b9e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013ba0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d128      	bne.n	8013bfa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	69db      	ldr	r3, [r3, #28]
 8013bac:	4619      	mov	r1, r3
 8013bae:	69f8      	ldr	r0, [r7, #28]
 8013bb0:	f7fe ffa8 	bl	8012b04 <move_window>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8013bba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d11b      	bne.n	8013bfa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	6a1b      	ldr	r3, [r3, #32]
 8013bc6:	2220      	movs	r2, #32
 8013bc8:	2100      	movs	r1, #0
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f7fe fd8c 	bl	80126e8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6a18      	ldr	r0, [r3, #32]
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	3324      	adds	r3, #36	@ 0x24
 8013bd8:	220b      	movs	r2, #11
 8013bda:	4619      	mov	r1, r3
 8013bdc:	f7fe fd63 	bl	80126a6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	6a1b      	ldr	r3, [r3, #32]
 8013bea:	330c      	adds	r3, #12
 8013bec:	f002 0218 	and.w	r2, r2, #24
 8013bf0:	b2d2      	uxtb	r2, r2
 8013bf2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8013bf4:	69fb      	ldr	r3, [r7, #28]
 8013bf6:	2201      	movs	r2, #1
 8013bf8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013bfa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8013bfe:	4618      	mov	r0, r3
 8013c00:	3730      	adds	r7, #48	@ 0x30
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}
 8013c06:	bf00      	nop
 8013c08:	4ec4ec4f 	.word	0x4ec4ec4f

08013c0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b08a      	sub	sp, #40	@ 0x28
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
 8013c14:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8013c16:	683b      	ldr	r3, [r7, #0]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	613b      	str	r3, [r7, #16]
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	68db      	ldr	r3, [r3, #12]
 8013c22:	60fb      	str	r3, [r7, #12]
 8013c24:	2300      	movs	r3, #0
 8013c26:	617b      	str	r3, [r7, #20]
 8013c28:	697b      	ldr	r3, [r7, #20]
 8013c2a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8013c2c:	69bb      	ldr	r3, [r7, #24]
 8013c2e:	1c5a      	adds	r2, r3, #1
 8013c30:	61ba      	str	r2, [r7, #24]
 8013c32:	693a      	ldr	r2, [r7, #16]
 8013c34:	4413      	add	r3, r2
 8013c36:	781b      	ldrb	r3, [r3, #0]
 8013c38:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8013c3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013c3c:	2b1f      	cmp	r3, #31
 8013c3e:	d940      	bls.n	8013cc2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8013c40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013c42:	2b2f      	cmp	r3, #47	@ 0x2f
 8013c44:	d006      	beq.n	8013c54 <create_name+0x48>
 8013c46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013c48:	2b5c      	cmp	r3, #92	@ 0x5c
 8013c4a:	d110      	bne.n	8013c6e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013c4c:	e002      	b.n	8013c54 <create_name+0x48>
 8013c4e:	69bb      	ldr	r3, [r7, #24]
 8013c50:	3301      	adds	r3, #1
 8013c52:	61bb      	str	r3, [r7, #24]
 8013c54:	693a      	ldr	r2, [r7, #16]
 8013c56:	69bb      	ldr	r3, [r7, #24]
 8013c58:	4413      	add	r3, r2
 8013c5a:	781b      	ldrb	r3, [r3, #0]
 8013c5c:	2b2f      	cmp	r3, #47	@ 0x2f
 8013c5e:	d0f6      	beq.n	8013c4e <create_name+0x42>
 8013c60:	693a      	ldr	r2, [r7, #16]
 8013c62:	69bb      	ldr	r3, [r7, #24]
 8013c64:	4413      	add	r3, r2
 8013c66:	781b      	ldrb	r3, [r3, #0]
 8013c68:	2b5c      	cmp	r3, #92	@ 0x5c
 8013c6a:	d0f0      	beq.n	8013c4e <create_name+0x42>
			break;
 8013c6c:	e02a      	b.n	8013cc4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8013c6e:	697b      	ldr	r3, [r7, #20]
 8013c70:	2bfe      	cmp	r3, #254	@ 0xfe
 8013c72:	d901      	bls.n	8013c78 <create_name+0x6c>
 8013c74:	2306      	movs	r3, #6
 8013c76:	e17d      	b.n	8013f74 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8013c78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013c7a:	b2db      	uxtb	r3, r3
 8013c7c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8013c7e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013c80:	2101      	movs	r1, #1
 8013c82:	4618      	mov	r0, r3
 8013c84:	f001 fc50 	bl	8015528 <ff_convert>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8013c8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d101      	bne.n	8013c96 <create_name+0x8a>
 8013c92:	2306      	movs	r3, #6
 8013c94:	e16e      	b.n	8013f74 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8013c96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013c98:	2b7f      	cmp	r3, #127	@ 0x7f
 8013c9a:	d809      	bhi.n	8013cb0 <create_name+0xa4>
 8013c9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013c9e:	4619      	mov	r1, r3
 8013ca0:	488d      	ldr	r0, [pc, #564]	@ (8013ed8 <create_name+0x2cc>)
 8013ca2:	f7fe fd63 	bl	801276c <chk_chr>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d001      	beq.n	8013cb0 <create_name+0xa4>
 8013cac:	2306      	movs	r3, #6
 8013cae:	e161      	b.n	8013f74 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	1c5a      	adds	r2, r3, #1
 8013cb4:	617a      	str	r2, [r7, #20]
 8013cb6:	005b      	lsls	r3, r3, #1
 8013cb8:	68fa      	ldr	r2, [r7, #12]
 8013cba:	4413      	add	r3, r2
 8013cbc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013cbe:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8013cc0:	e7b4      	b.n	8013c2c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8013cc2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8013cc4:	693a      	ldr	r2, [r7, #16]
 8013cc6:	69bb      	ldr	r3, [r7, #24]
 8013cc8:	441a      	add	r2, r3
 8013cca:	683b      	ldr	r3, [r7, #0]
 8013ccc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013cce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013cd0:	2b1f      	cmp	r3, #31
 8013cd2:	d801      	bhi.n	8013cd8 <create_name+0xcc>
 8013cd4:	2304      	movs	r3, #4
 8013cd6:	e000      	b.n	8013cda <create_name+0xce>
 8013cd8:	2300      	movs	r3, #0
 8013cda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013cde:	e011      	b.n	8013d04 <create_name+0xf8>
		w = lfn[di - 1];
 8013ce0:	697b      	ldr	r3, [r7, #20]
 8013ce2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8013ce6:	3b01      	subs	r3, #1
 8013ce8:	005b      	lsls	r3, r3, #1
 8013cea:	68fa      	ldr	r2, [r7, #12]
 8013cec:	4413      	add	r3, r2
 8013cee:	881b      	ldrh	r3, [r3, #0]
 8013cf0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8013cf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013cf4:	2b20      	cmp	r3, #32
 8013cf6:	d002      	beq.n	8013cfe <create_name+0xf2>
 8013cf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013cfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8013cfc:	d106      	bne.n	8013d0c <create_name+0x100>
		di--;
 8013cfe:	697b      	ldr	r3, [r7, #20]
 8013d00:	3b01      	subs	r3, #1
 8013d02:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013d04:	697b      	ldr	r3, [r7, #20]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d1ea      	bne.n	8013ce0 <create_name+0xd4>
 8013d0a:	e000      	b.n	8013d0e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8013d0c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8013d0e:	697b      	ldr	r3, [r7, #20]
 8013d10:	005b      	lsls	r3, r3, #1
 8013d12:	68fa      	ldr	r2, [r7, #12]
 8013d14:	4413      	add	r3, r2
 8013d16:	2200      	movs	r2, #0
 8013d18:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8013d1a:	697b      	ldr	r3, [r7, #20]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d101      	bne.n	8013d24 <create_name+0x118>
 8013d20:	2306      	movs	r3, #6
 8013d22:	e127      	b.n	8013f74 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	3324      	adds	r3, #36	@ 0x24
 8013d28:	220b      	movs	r2, #11
 8013d2a:	2120      	movs	r1, #32
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	f7fe fcdb 	bl	80126e8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8013d32:	2300      	movs	r3, #0
 8013d34:	61bb      	str	r3, [r7, #24]
 8013d36:	e002      	b.n	8013d3e <create_name+0x132>
 8013d38:	69bb      	ldr	r3, [r7, #24]
 8013d3a:	3301      	adds	r3, #1
 8013d3c:	61bb      	str	r3, [r7, #24]
 8013d3e:	69bb      	ldr	r3, [r7, #24]
 8013d40:	005b      	lsls	r3, r3, #1
 8013d42:	68fa      	ldr	r2, [r7, #12]
 8013d44:	4413      	add	r3, r2
 8013d46:	881b      	ldrh	r3, [r3, #0]
 8013d48:	2b20      	cmp	r3, #32
 8013d4a:	d0f5      	beq.n	8013d38 <create_name+0x12c>
 8013d4c:	69bb      	ldr	r3, [r7, #24]
 8013d4e:	005b      	lsls	r3, r3, #1
 8013d50:	68fa      	ldr	r2, [r7, #12]
 8013d52:	4413      	add	r3, r2
 8013d54:	881b      	ldrh	r3, [r3, #0]
 8013d56:	2b2e      	cmp	r3, #46	@ 0x2e
 8013d58:	d0ee      	beq.n	8013d38 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8013d5a:	69bb      	ldr	r3, [r7, #24]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d009      	beq.n	8013d74 <create_name+0x168>
 8013d60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013d64:	f043 0303 	orr.w	r3, r3, #3
 8013d68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8013d6c:	e002      	b.n	8013d74 <create_name+0x168>
 8013d6e:	697b      	ldr	r3, [r7, #20]
 8013d70:	3b01      	subs	r3, #1
 8013d72:	617b      	str	r3, [r7, #20]
 8013d74:	697b      	ldr	r3, [r7, #20]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d009      	beq.n	8013d8e <create_name+0x182>
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8013d80:	3b01      	subs	r3, #1
 8013d82:	005b      	lsls	r3, r3, #1
 8013d84:	68fa      	ldr	r2, [r7, #12]
 8013d86:	4413      	add	r3, r2
 8013d88:	881b      	ldrh	r3, [r3, #0]
 8013d8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8013d8c:	d1ef      	bne.n	8013d6e <create_name+0x162>

	i = b = 0; ni = 8;
 8013d8e:	2300      	movs	r3, #0
 8013d90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013d94:	2300      	movs	r3, #0
 8013d96:	623b      	str	r3, [r7, #32]
 8013d98:	2308      	movs	r3, #8
 8013d9a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8013d9c:	69bb      	ldr	r3, [r7, #24]
 8013d9e:	1c5a      	adds	r2, r3, #1
 8013da0:	61ba      	str	r2, [r7, #24]
 8013da2:	005b      	lsls	r3, r3, #1
 8013da4:	68fa      	ldr	r2, [r7, #12]
 8013da6:	4413      	add	r3, r2
 8013da8:	881b      	ldrh	r3, [r3, #0]
 8013daa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8013dac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	f000 8090 	beq.w	8013ed4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8013db4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013db6:	2b20      	cmp	r3, #32
 8013db8:	d006      	beq.n	8013dc8 <create_name+0x1bc>
 8013dba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013dbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8013dbe:	d10a      	bne.n	8013dd6 <create_name+0x1ca>
 8013dc0:	69ba      	ldr	r2, [r7, #24]
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	d006      	beq.n	8013dd6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8013dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013dcc:	f043 0303 	orr.w	r3, r3, #3
 8013dd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013dd4:	e07d      	b.n	8013ed2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8013dd6:	6a3a      	ldr	r2, [r7, #32]
 8013dd8:	69fb      	ldr	r3, [r7, #28]
 8013dda:	429a      	cmp	r2, r3
 8013ddc:	d203      	bcs.n	8013de6 <create_name+0x1da>
 8013dde:	69ba      	ldr	r2, [r7, #24]
 8013de0:	697b      	ldr	r3, [r7, #20]
 8013de2:	429a      	cmp	r2, r3
 8013de4:	d123      	bne.n	8013e2e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8013de6:	69fb      	ldr	r3, [r7, #28]
 8013de8:	2b0b      	cmp	r3, #11
 8013dea:	d106      	bne.n	8013dfa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8013dec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013df0:	f043 0303 	orr.w	r3, r3, #3
 8013df4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013df8:	e075      	b.n	8013ee6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8013dfa:	69ba      	ldr	r2, [r7, #24]
 8013dfc:	697b      	ldr	r3, [r7, #20]
 8013dfe:	429a      	cmp	r2, r3
 8013e00:	d005      	beq.n	8013e0e <create_name+0x202>
 8013e02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013e06:	f043 0303 	orr.w	r3, r3, #3
 8013e0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8013e0e:	69ba      	ldr	r2, [r7, #24]
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	429a      	cmp	r2, r3
 8013e14:	d866      	bhi.n	8013ee4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	61bb      	str	r3, [r7, #24]
 8013e1a:	2308      	movs	r3, #8
 8013e1c:	623b      	str	r3, [r7, #32]
 8013e1e:	230b      	movs	r3, #11
 8013e20:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8013e22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013e26:	009b      	lsls	r3, r3, #2
 8013e28:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013e2c:	e051      	b.n	8013ed2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8013e2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e30:	2b7f      	cmp	r3, #127	@ 0x7f
 8013e32:	d914      	bls.n	8013e5e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8013e34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e36:	2100      	movs	r1, #0
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f001 fb75 	bl	8015528 <ff_convert>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8013e42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d004      	beq.n	8013e52 <create_name+0x246>
 8013e48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e4a:	3b80      	subs	r3, #128	@ 0x80
 8013e4c:	4a23      	ldr	r2, [pc, #140]	@ (8013edc <create_name+0x2d0>)
 8013e4e:	5cd3      	ldrb	r3, [r2, r3]
 8013e50:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8013e52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013e56:	f043 0302 	orr.w	r3, r3, #2
 8013e5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8013e5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d007      	beq.n	8013e74 <create_name+0x268>
 8013e64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e66:	4619      	mov	r1, r3
 8013e68:	481d      	ldr	r0, [pc, #116]	@ (8013ee0 <create_name+0x2d4>)
 8013e6a:	f7fe fc7f 	bl	801276c <chk_chr>
 8013e6e:	4603      	mov	r3, r0
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d008      	beq.n	8013e86 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8013e74:	235f      	movs	r3, #95	@ 0x5f
 8013e76:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8013e78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013e7c:	f043 0303 	orr.w	r3, r3, #3
 8013e80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013e84:	e01b      	b.n	8013ebe <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8013e86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e88:	2b40      	cmp	r3, #64	@ 0x40
 8013e8a:	d909      	bls.n	8013ea0 <create_name+0x294>
 8013e8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e8e:	2b5a      	cmp	r3, #90	@ 0x5a
 8013e90:	d806      	bhi.n	8013ea0 <create_name+0x294>
					b |= 2;
 8013e92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013e96:	f043 0302 	orr.w	r3, r3, #2
 8013e9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013e9e:	e00e      	b.n	8013ebe <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8013ea0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013ea2:	2b60      	cmp	r3, #96	@ 0x60
 8013ea4:	d90b      	bls.n	8013ebe <create_name+0x2b2>
 8013ea6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013ea8:	2b7a      	cmp	r3, #122	@ 0x7a
 8013eaa:	d808      	bhi.n	8013ebe <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8013eac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013eb0:	f043 0301 	orr.w	r3, r3, #1
 8013eb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013eb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013eba:	3b20      	subs	r3, #32
 8013ebc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8013ebe:	6a3b      	ldr	r3, [r7, #32]
 8013ec0:	1c5a      	adds	r2, r3, #1
 8013ec2:	623a      	str	r2, [r7, #32]
 8013ec4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013ec6:	b2d1      	uxtb	r1, r2
 8013ec8:	687a      	ldr	r2, [r7, #4]
 8013eca:	4413      	add	r3, r2
 8013ecc:	460a      	mov	r2, r1
 8013ece:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8013ed2:	e763      	b.n	8013d9c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8013ed4:	bf00      	nop
 8013ed6:	e006      	b.n	8013ee6 <create_name+0x2da>
 8013ed8:	080181f4 	.word	0x080181f4
 8013edc:	08018284 	.word	0x08018284
 8013ee0:	08018200 	.word	0x08018200
			if (si > di) break;			/* No extension */
 8013ee4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8013eec:	2be5      	cmp	r3, #229	@ 0xe5
 8013eee:	d103      	bne.n	8013ef8 <create_name+0x2ec>
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2205      	movs	r2, #5
 8013ef4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8013ef8:	69fb      	ldr	r3, [r7, #28]
 8013efa:	2b08      	cmp	r3, #8
 8013efc:	d104      	bne.n	8013f08 <create_name+0x2fc>
 8013efe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013f02:	009b      	lsls	r3, r3, #2
 8013f04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013f08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013f0c:	f003 030c 	and.w	r3, r3, #12
 8013f10:	2b0c      	cmp	r3, #12
 8013f12:	d005      	beq.n	8013f20 <create_name+0x314>
 8013f14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013f18:	f003 0303 	and.w	r3, r3, #3
 8013f1c:	2b03      	cmp	r3, #3
 8013f1e:	d105      	bne.n	8013f2c <create_name+0x320>
 8013f20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013f24:	f043 0302 	orr.w	r3, r3, #2
 8013f28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8013f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013f30:	f003 0302 	and.w	r3, r3, #2
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d117      	bne.n	8013f68 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8013f38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013f3c:	f003 0303 	and.w	r3, r3, #3
 8013f40:	2b01      	cmp	r3, #1
 8013f42:	d105      	bne.n	8013f50 <create_name+0x344>
 8013f44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013f48:	f043 0310 	orr.w	r3, r3, #16
 8013f4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8013f50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013f54:	f003 030c 	and.w	r3, r3, #12
 8013f58:	2b04      	cmp	r3, #4
 8013f5a:	d105      	bne.n	8013f68 <create_name+0x35c>
 8013f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013f60:	f043 0308 	orr.w	r3, r3, #8
 8013f64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8013f6e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8013f72:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8013f74:	4618      	mov	r0, r3
 8013f76:	3728      	adds	r7, #40	@ 0x28
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	bd80      	pop	{r7, pc}

08013f7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b086      	sub	sp, #24
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
 8013f84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013f8a:	693b      	ldr	r3, [r7, #16]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013f90:	e002      	b.n	8013f98 <follow_path+0x1c>
 8013f92:	683b      	ldr	r3, [r7, #0]
 8013f94:	3301      	adds	r3, #1
 8013f96:	603b      	str	r3, [r7, #0]
 8013f98:	683b      	ldr	r3, [r7, #0]
 8013f9a:	781b      	ldrb	r3, [r3, #0]
 8013f9c:	2b2f      	cmp	r3, #47	@ 0x2f
 8013f9e:	d0f8      	beq.n	8013f92 <follow_path+0x16>
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	781b      	ldrb	r3, [r3, #0]
 8013fa4:	2b5c      	cmp	r3, #92	@ 0x5c
 8013fa6:	d0f4      	beq.n	8013f92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013fa8:	693b      	ldr	r3, [r7, #16]
 8013faa:	2200      	movs	r2, #0
 8013fac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013fae:	683b      	ldr	r3, [r7, #0]
 8013fb0:	781b      	ldrb	r3, [r3, #0]
 8013fb2:	2b1f      	cmp	r3, #31
 8013fb4:	d80a      	bhi.n	8013fcc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	2280      	movs	r2, #128	@ 0x80
 8013fba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8013fbe:	2100      	movs	r1, #0
 8013fc0:	6878      	ldr	r0, [r7, #4]
 8013fc2:	f7ff f91c 	bl	80131fe <dir_sdi>
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	75fb      	strb	r3, [r7, #23]
 8013fca:	e043      	b.n	8014054 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013fcc:	463b      	mov	r3, r7
 8013fce:	4619      	mov	r1, r3
 8013fd0:	6878      	ldr	r0, [r7, #4]
 8013fd2:	f7ff fe1b 	bl	8013c0c <create_name>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013fda:	7dfb      	ldrb	r3, [r7, #23]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d134      	bne.n	801404a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013fe0:	6878      	ldr	r0, [r7, #4]
 8013fe2:	f7ff fc5a 	bl	801389a <dir_find>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013ff0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013ff2:	7dfb      	ldrb	r3, [r7, #23]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d00a      	beq.n	801400e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013ff8:	7dfb      	ldrb	r3, [r7, #23]
 8013ffa:	2b04      	cmp	r3, #4
 8013ffc:	d127      	bne.n	801404e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013ffe:	7afb      	ldrb	r3, [r7, #11]
 8014000:	f003 0304 	and.w	r3, r3, #4
 8014004:	2b00      	cmp	r3, #0
 8014006:	d122      	bne.n	801404e <follow_path+0xd2>
 8014008:	2305      	movs	r3, #5
 801400a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801400c:	e01f      	b.n	801404e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801400e:	7afb      	ldrb	r3, [r7, #11]
 8014010:	f003 0304 	and.w	r3, r3, #4
 8014014:	2b00      	cmp	r3, #0
 8014016:	d11c      	bne.n	8014052 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8014018:	693b      	ldr	r3, [r7, #16]
 801401a:	799b      	ldrb	r3, [r3, #6]
 801401c:	f003 0310 	and.w	r3, r3, #16
 8014020:	2b00      	cmp	r3, #0
 8014022:	d102      	bne.n	801402a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8014024:	2305      	movs	r3, #5
 8014026:	75fb      	strb	r3, [r7, #23]
 8014028:	e014      	b.n	8014054 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	695b      	ldr	r3, [r3, #20]
 8014034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014038:	4413      	add	r3, r2
 801403a:	4619      	mov	r1, r3
 801403c:	68f8      	ldr	r0, [r7, #12]
 801403e:	f7ff fa65 	bl	801350c <ld_clust>
 8014042:	4602      	mov	r2, r0
 8014044:	693b      	ldr	r3, [r7, #16]
 8014046:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014048:	e7c0      	b.n	8013fcc <follow_path+0x50>
			if (res != FR_OK) break;
 801404a:	bf00      	nop
 801404c:	e002      	b.n	8014054 <follow_path+0xd8>
				break;
 801404e:	bf00      	nop
 8014050:	e000      	b.n	8014054 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014052:	bf00      	nop
			}
		}
	}

	return res;
 8014054:	7dfb      	ldrb	r3, [r7, #23]
}
 8014056:	4618      	mov	r0, r3
 8014058:	3718      	adds	r7, #24
 801405a:	46bd      	mov	sp, r7
 801405c:	bd80      	pop	{r7, pc}

0801405e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801405e:	b480      	push	{r7}
 8014060:	b087      	sub	sp, #28
 8014062:	af00      	add	r7, sp, #0
 8014064:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8014066:	f04f 33ff 	mov.w	r3, #4294967295
 801406a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d031      	beq.n	80140d8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	617b      	str	r3, [r7, #20]
 801407a:	e002      	b.n	8014082 <get_ldnumber+0x24>
 801407c:	697b      	ldr	r3, [r7, #20]
 801407e:	3301      	adds	r3, #1
 8014080:	617b      	str	r3, [r7, #20]
 8014082:	697b      	ldr	r3, [r7, #20]
 8014084:	781b      	ldrb	r3, [r3, #0]
 8014086:	2b1f      	cmp	r3, #31
 8014088:	d903      	bls.n	8014092 <get_ldnumber+0x34>
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	781b      	ldrb	r3, [r3, #0]
 801408e:	2b3a      	cmp	r3, #58	@ 0x3a
 8014090:	d1f4      	bne.n	801407c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014092:	697b      	ldr	r3, [r7, #20]
 8014094:	781b      	ldrb	r3, [r3, #0]
 8014096:	2b3a      	cmp	r3, #58	@ 0x3a
 8014098:	d11c      	bne.n	80140d4 <get_ldnumber+0x76>
			tp = *path;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	1c5a      	adds	r2, r3, #1
 80140a4:	60fa      	str	r2, [r7, #12]
 80140a6:	781b      	ldrb	r3, [r3, #0]
 80140a8:	3b30      	subs	r3, #48	@ 0x30
 80140aa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80140ac:	68bb      	ldr	r3, [r7, #8]
 80140ae:	2b09      	cmp	r3, #9
 80140b0:	d80e      	bhi.n	80140d0 <get_ldnumber+0x72>
 80140b2:	68fa      	ldr	r2, [r7, #12]
 80140b4:	697b      	ldr	r3, [r7, #20]
 80140b6:	429a      	cmp	r2, r3
 80140b8:	d10a      	bne.n	80140d0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80140ba:	68bb      	ldr	r3, [r7, #8]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d107      	bne.n	80140d0 <get_ldnumber+0x72>
					vol = (int)i;
 80140c0:	68bb      	ldr	r3, [r7, #8]
 80140c2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80140c4:	697b      	ldr	r3, [r7, #20]
 80140c6:	3301      	adds	r3, #1
 80140c8:	617b      	str	r3, [r7, #20]
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	697a      	ldr	r2, [r7, #20]
 80140ce:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80140d0:	693b      	ldr	r3, [r7, #16]
 80140d2:	e002      	b.n	80140da <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80140d4:	2300      	movs	r3, #0
 80140d6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80140d8:	693b      	ldr	r3, [r7, #16]
}
 80140da:	4618      	mov	r0, r3
 80140dc:	371c      	adds	r7, #28
 80140de:	46bd      	mov	sp, r7
 80140e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e4:	4770      	bx	lr
	...

080140e8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b082      	sub	sp, #8
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
 80140f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	2200      	movs	r2, #0
 80140f6:	70da      	strb	r2, [r3, #3]
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	f04f 32ff 	mov.w	r2, #4294967295
 80140fe:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014100:	6839      	ldr	r1, [r7, #0]
 8014102:	6878      	ldr	r0, [r7, #4]
 8014104:	f7fe fcfe 	bl	8012b04 <move_window>
 8014108:	4603      	mov	r3, r0
 801410a:	2b00      	cmp	r3, #0
 801410c:	d001      	beq.n	8014112 <check_fs+0x2a>
 801410e:	2304      	movs	r3, #4
 8014110:	e038      	b.n	8014184 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	3334      	adds	r3, #52	@ 0x34
 8014116:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801411a:	4618      	mov	r0, r3
 801411c:	f7fe fa40 	bl	80125a0 <ld_word>
 8014120:	4603      	mov	r3, r0
 8014122:	461a      	mov	r2, r3
 8014124:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8014128:	429a      	cmp	r2, r3
 801412a:	d001      	beq.n	8014130 <check_fs+0x48>
 801412c:	2303      	movs	r3, #3
 801412e:	e029      	b.n	8014184 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014136:	2be9      	cmp	r3, #233	@ 0xe9
 8014138:	d009      	beq.n	801414e <check_fs+0x66>
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014140:	2beb      	cmp	r3, #235	@ 0xeb
 8014142:	d11e      	bne.n	8014182 <check_fs+0x9a>
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 801414a:	2b90      	cmp	r3, #144	@ 0x90
 801414c:	d119      	bne.n	8014182 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	3334      	adds	r3, #52	@ 0x34
 8014152:	3336      	adds	r3, #54	@ 0x36
 8014154:	4618      	mov	r0, r3
 8014156:	f7fe fa3c 	bl	80125d2 <ld_dword>
 801415a:	4603      	mov	r3, r0
 801415c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8014160:	4a0a      	ldr	r2, [pc, #40]	@ (801418c <check_fs+0xa4>)
 8014162:	4293      	cmp	r3, r2
 8014164:	d101      	bne.n	801416a <check_fs+0x82>
 8014166:	2300      	movs	r3, #0
 8014168:	e00c      	b.n	8014184 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	3334      	adds	r3, #52	@ 0x34
 801416e:	3352      	adds	r3, #82	@ 0x52
 8014170:	4618      	mov	r0, r3
 8014172:	f7fe fa2e 	bl	80125d2 <ld_dword>
 8014176:	4603      	mov	r3, r0
 8014178:	4a05      	ldr	r2, [pc, #20]	@ (8014190 <check_fs+0xa8>)
 801417a:	4293      	cmp	r3, r2
 801417c:	d101      	bne.n	8014182 <check_fs+0x9a>
 801417e:	2300      	movs	r3, #0
 8014180:	e000      	b.n	8014184 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8014182:	2302      	movs	r3, #2
}
 8014184:	4618      	mov	r0, r3
 8014186:	3708      	adds	r7, #8
 8014188:	46bd      	mov	sp, r7
 801418a:	bd80      	pop	{r7, pc}
 801418c:	00544146 	.word	0x00544146
 8014190:	33544146 	.word	0x33544146

08014194 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014194:	b580      	push	{r7, lr}
 8014196:	b096      	sub	sp, #88	@ 0x58
 8014198:	af00      	add	r7, sp, #0
 801419a:	60f8      	str	r0, [r7, #12]
 801419c:	60b9      	str	r1, [r7, #8]
 801419e:	4613      	mov	r3, r2
 80141a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	2200      	movs	r2, #0
 80141a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80141a8:	68f8      	ldr	r0, [r7, #12]
 80141aa:	f7ff ff58 	bl	801405e <get_ldnumber>
 80141ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80141b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	da01      	bge.n	80141ba <find_volume+0x26>
 80141b6:	230b      	movs	r3, #11
 80141b8:	e22d      	b.n	8014616 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80141ba:	4aa1      	ldr	r2, [pc, #644]	@ (8014440 <find_volume+0x2ac>)
 80141bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80141be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80141c2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80141c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d101      	bne.n	80141ce <find_volume+0x3a>
 80141ca:	230c      	movs	r3, #12
 80141cc:	e223      	b.n	8014616 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80141d2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80141d4:	79fb      	ldrb	r3, [r7, #7]
 80141d6:	f023 0301 	bic.w	r3, r3, #1
 80141da:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80141dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141de:	781b      	ldrb	r3, [r3, #0]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d01a      	beq.n	801421a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80141e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141e6:	785b      	ldrb	r3, [r3, #1]
 80141e8:	4618      	mov	r0, r3
 80141ea:	f7fe f939 	bl	8012460 <disk_status>
 80141ee:	4603      	mov	r3, r0
 80141f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80141f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80141f8:	f003 0301 	and.w	r3, r3, #1
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d10c      	bne.n	801421a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014200:	79fb      	ldrb	r3, [r7, #7]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d007      	beq.n	8014216 <find_volume+0x82>
 8014206:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801420a:	f003 0304 	and.w	r3, r3, #4
 801420e:	2b00      	cmp	r3, #0
 8014210:	d001      	beq.n	8014216 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8014212:	230a      	movs	r3, #10
 8014214:	e1ff      	b.n	8014616 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8014216:	2300      	movs	r3, #0
 8014218:	e1fd      	b.n	8014616 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801421a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801421c:	2200      	movs	r2, #0
 801421e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014222:	b2da      	uxtb	r2, r3
 8014224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014226:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801422a:	785b      	ldrb	r3, [r3, #1]
 801422c:	4618      	mov	r0, r3
 801422e:	f7fe f931 	bl	8012494 <disk_initialize>
 8014232:	4603      	mov	r3, r0
 8014234:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014238:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801423c:	f003 0301 	and.w	r3, r3, #1
 8014240:	2b00      	cmp	r3, #0
 8014242:	d001      	beq.n	8014248 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014244:	2303      	movs	r3, #3
 8014246:	e1e6      	b.n	8014616 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014248:	79fb      	ldrb	r3, [r7, #7]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d007      	beq.n	801425e <find_volume+0xca>
 801424e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014252:	f003 0304 	and.w	r3, r3, #4
 8014256:	2b00      	cmp	r3, #0
 8014258:	d001      	beq.n	801425e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801425a:	230a      	movs	r3, #10
 801425c:	e1db      	b.n	8014616 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801425e:	2300      	movs	r3, #0
 8014260:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014262:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8014264:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014266:	f7ff ff3f 	bl	80140e8 <check_fs>
 801426a:	4603      	mov	r3, r0
 801426c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014270:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014274:	2b02      	cmp	r3, #2
 8014276:	d149      	bne.n	801430c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014278:	2300      	movs	r3, #0
 801427a:	643b      	str	r3, [r7, #64]	@ 0x40
 801427c:	e01e      	b.n	80142bc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801427e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014280:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014286:	011b      	lsls	r3, r3, #4
 8014288:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801428c:	4413      	add	r3, r2
 801428e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014292:	3304      	adds	r3, #4
 8014294:	781b      	ldrb	r3, [r3, #0]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d006      	beq.n	80142a8 <find_volume+0x114>
 801429a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801429c:	3308      	adds	r3, #8
 801429e:	4618      	mov	r0, r3
 80142a0:	f7fe f997 	bl	80125d2 <ld_dword>
 80142a4:	4602      	mov	r2, r0
 80142a6:	e000      	b.n	80142aa <find_volume+0x116>
 80142a8:	2200      	movs	r2, #0
 80142aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80142ac:	009b      	lsls	r3, r3, #2
 80142ae:	3358      	adds	r3, #88	@ 0x58
 80142b0:	443b      	add	r3, r7
 80142b2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80142b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80142b8:	3301      	adds	r3, #1
 80142ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80142bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80142be:	2b03      	cmp	r3, #3
 80142c0:	d9dd      	bls.n	801427e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80142c2:	2300      	movs	r3, #0
 80142c4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80142c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d002      	beq.n	80142d2 <find_volume+0x13e>
 80142cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80142ce:	3b01      	subs	r3, #1
 80142d0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80142d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80142d4:	009b      	lsls	r3, r3, #2
 80142d6:	3358      	adds	r3, #88	@ 0x58
 80142d8:	443b      	add	r3, r7
 80142da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80142de:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80142e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d005      	beq.n	80142f2 <find_volume+0x15e>
 80142e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80142e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80142ea:	f7ff fefd 	bl	80140e8 <check_fs>
 80142ee:	4603      	mov	r3, r0
 80142f0:	e000      	b.n	80142f4 <find_volume+0x160>
 80142f2:	2303      	movs	r3, #3
 80142f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80142f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80142fc:	2b01      	cmp	r3, #1
 80142fe:	d905      	bls.n	801430c <find_volume+0x178>
 8014300:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014302:	3301      	adds	r3, #1
 8014304:	643b      	str	r3, [r7, #64]	@ 0x40
 8014306:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014308:	2b03      	cmp	r3, #3
 801430a:	d9e2      	bls.n	80142d2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801430c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014310:	2b04      	cmp	r3, #4
 8014312:	d101      	bne.n	8014318 <find_volume+0x184>
 8014314:	2301      	movs	r3, #1
 8014316:	e17e      	b.n	8014616 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014318:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801431c:	2b01      	cmp	r3, #1
 801431e:	d901      	bls.n	8014324 <find_volume+0x190>
 8014320:	230d      	movs	r3, #13
 8014322:	e178      	b.n	8014616 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014326:	3334      	adds	r3, #52	@ 0x34
 8014328:	330b      	adds	r3, #11
 801432a:	4618      	mov	r0, r3
 801432c:	f7fe f938 	bl	80125a0 <ld_word>
 8014330:	4603      	mov	r3, r0
 8014332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014336:	d001      	beq.n	801433c <find_volume+0x1a8>
 8014338:	230d      	movs	r3, #13
 801433a:	e16c      	b.n	8014616 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801433c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801433e:	3334      	adds	r3, #52	@ 0x34
 8014340:	3316      	adds	r3, #22
 8014342:	4618      	mov	r0, r3
 8014344:	f7fe f92c 	bl	80125a0 <ld_word>
 8014348:	4603      	mov	r3, r0
 801434a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801434c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801434e:	2b00      	cmp	r3, #0
 8014350:	d106      	bne.n	8014360 <find_volume+0x1cc>
 8014352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014354:	3334      	adds	r3, #52	@ 0x34
 8014356:	3324      	adds	r3, #36	@ 0x24
 8014358:	4618      	mov	r0, r3
 801435a:	f7fe f93a 	bl	80125d2 <ld_dword>
 801435e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8014360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014362:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014364:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014368:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801436c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801436e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014372:	789b      	ldrb	r3, [r3, #2]
 8014374:	2b01      	cmp	r3, #1
 8014376:	d005      	beq.n	8014384 <find_volume+0x1f0>
 8014378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801437a:	789b      	ldrb	r3, [r3, #2]
 801437c:	2b02      	cmp	r3, #2
 801437e:	d001      	beq.n	8014384 <find_volume+0x1f0>
 8014380:	230d      	movs	r3, #13
 8014382:	e148      	b.n	8014616 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014386:	789b      	ldrb	r3, [r3, #2]
 8014388:	461a      	mov	r2, r3
 801438a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801438c:	fb02 f303 	mul.w	r3, r2, r3
 8014390:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014394:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8014398:	461a      	mov	r2, r3
 801439a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801439c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801439e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143a0:	895b      	ldrh	r3, [r3, #10]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d008      	beq.n	80143b8 <find_volume+0x224>
 80143a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143a8:	895b      	ldrh	r3, [r3, #10]
 80143aa:	461a      	mov	r2, r3
 80143ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143ae:	895b      	ldrh	r3, [r3, #10]
 80143b0:	3b01      	subs	r3, #1
 80143b2:	4013      	ands	r3, r2
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d001      	beq.n	80143bc <find_volume+0x228>
 80143b8:	230d      	movs	r3, #13
 80143ba:	e12c      	b.n	8014616 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80143bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143be:	3334      	adds	r3, #52	@ 0x34
 80143c0:	3311      	adds	r3, #17
 80143c2:	4618      	mov	r0, r3
 80143c4:	f7fe f8ec 	bl	80125a0 <ld_word>
 80143c8:	4603      	mov	r3, r0
 80143ca:	461a      	mov	r2, r3
 80143cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80143d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143d2:	891b      	ldrh	r3, [r3, #8]
 80143d4:	f003 030f 	and.w	r3, r3, #15
 80143d8:	b29b      	uxth	r3, r3
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d001      	beq.n	80143e2 <find_volume+0x24e>
 80143de:	230d      	movs	r3, #13
 80143e0:	e119      	b.n	8014616 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80143e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143e4:	3334      	adds	r3, #52	@ 0x34
 80143e6:	3313      	adds	r3, #19
 80143e8:	4618      	mov	r0, r3
 80143ea:	f7fe f8d9 	bl	80125a0 <ld_word>
 80143ee:	4603      	mov	r3, r0
 80143f0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80143f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d106      	bne.n	8014406 <find_volume+0x272>
 80143f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143fa:	3334      	adds	r3, #52	@ 0x34
 80143fc:	3320      	adds	r3, #32
 80143fe:	4618      	mov	r0, r3
 8014400:	f7fe f8e7 	bl	80125d2 <ld_dword>
 8014404:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014408:	3334      	adds	r3, #52	@ 0x34
 801440a:	330e      	adds	r3, #14
 801440c:	4618      	mov	r0, r3
 801440e:	f7fe f8c7 	bl	80125a0 <ld_word>
 8014412:	4603      	mov	r3, r0
 8014414:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014416:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014418:	2b00      	cmp	r3, #0
 801441a:	d101      	bne.n	8014420 <find_volume+0x28c>
 801441c:	230d      	movs	r3, #13
 801441e:	e0fa      	b.n	8014616 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014420:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8014422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014424:	4413      	add	r3, r2
 8014426:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014428:	8912      	ldrh	r2, [r2, #8]
 801442a:	0912      	lsrs	r2, r2, #4
 801442c:	b292      	uxth	r2, r2
 801442e:	4413      	add	r3, r2
 8014430:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014432:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014436:	429a      	cmp	r2, r3
 8014438:	d204      	bcs.n	8014444 <find_volume+0x2b0>
 801443a:	230d      	movs	r3, #13
 801443c:	e0eb      	b.n	8014616 <find_volume+0x482>
 801443e:	bf00      	nop
 8014440:	20000d58 	.word	0x20000d58
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014444:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014448:	1ad3      	subs	r3, r2, r3
 801444a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801444c:	8952      	ldrh	r2, [r2, #10]
 801444e:	fbb3 f3f2 	udiv	r3, r3, r2
 8014452:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014456:	2b00      	cmp	r3, #0
 8014458:	d101      	bne.n	801445e <find_volume+0x2ca>
 801445a:	230d      	movs	r3, #13
 801445c:	e0db      	b.n	8014616 <find_volume+0x482>
		fmt = FS_FAT32;
 801445e:	2303      	movs	r3, #3
 8014460:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014466:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801446a:	4293      	cmp	r3, r2
 801446c:	d802      	bhi.n	8014474 <find_volume+0x2e0>
 801446e:	2302      	movs	r3, #2
 8014470:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014476:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801447a:	4293      	cmp	r3, r2
 801447c:	d802      	bhi.n	8014484 <find_volume+0x2f0>
 801447e:	2301      	movs	r3, #1
 8014480:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014486:	1c9a      	adds	r2, r3, #2
 8014488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801448a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801448c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801448e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014490:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014492:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8014494:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014496:	441a      	add	r2, r3
 8014498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801449a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801449c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801449e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144a0:	441a      	add	r2, r3
 80144a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144a4:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80144a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80144aa:	2b03      	cmp	r3, #3
 80144ac:	d11e      	bne.n	80144ec <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80144ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144b0:	3334      	adds	r3, #52	@ 0x34
 80144b2:	332a      	adds	r3, #42	@ 0x2a
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7fe f873 	bl	80125a0 <ld_word>
 80144ba:	4603      	mov	r3, r0
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d001      	beq.n	80144c4 <find_volume+0x330>
 80144c0:	230d      	movs	r3, #13
 80144c2:	e0a8      	b.n	8014616 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80144c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144c6:	891b      	ldrh	r3, [r3, #8]
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d001      	beq.n	80144d0 <find_volume+0x33c>
 80144cc:	230d      	movs	r3, #13
 80144ce:	e0a2      	b.n	8014616 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80144d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144d2:	3334      	adds	r3, #52	@ 0x34
 80144d4:	332c      	adds	r3, #44	@ 0x2c
 80144d6:	4618      	mov	r0, r3
 80144d8:	f7fe f87b 	bl	80125d2 <ld_dword>
 80144dc:	4602      	mov	r2, r0
 80144de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144e0:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80144e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144e4:	699b      	ldr	r3, [r3, #24]
 80144e6:	009b      	lsls	r3, r3, #2
 80144e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80144ea:	e01f      	b.n	801452c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80144ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144ee:	891b      	ldrh	r3, [r3, #8]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d101      	bne.n	80144f8 <find_volume+0x364>
 80144f4:	230d      	movs	r3, #13
 80144f6:	e08e      	b.n	8014616 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80144f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80144fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80144fe:	441a      	add	r2, r3
 8014500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014502:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014504:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014508:	2b02      	cmp	r3, #2
 801450a:	d103      	bne.n	8014514 <find_volume+0x380>
 801450c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801450e:	699b      	ldr	r3, [r3, #24]
 8014510:	005b      	lsls	r3, r3, #1
 8014512:	e00a      	b.n	801452a <find_volume+0x396>
 8014514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014516:	699a      	ldr	r2, [r3, #24]
 8014518:	4613      	mov	r3, r2
 801451a:	005b      	lsls	r3, r3, #1
 801451c:	4413      	add	r3, r2
 801451e:	085a      	lsrs	r2, r3, #1
 8014520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014522:	699b      	ldr	r3, [r3, #24]
 8014524:	f003 0301 	and.w	r3, r3, #1
 8014528:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801452a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801452c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801452e:	69da      	ldr	r2, [r3, #28]
 8014530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014532:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8014536:	0a5b      	lsrs	r3, r3, #9
 8014538:	429a      	cmp	r2, r3
 801453a:	d201      	bcs.n	8014540 <find_volume+0x3ac>
 801453c:	230d      	movs	r3, #13
 801453e:	e06a      	b.n	8014616 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014542:	f04f 32ff 	mov.w	r2, #4294967295
 8014546:	615a      	str	r2, [r3, #20]
 8014548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801454a:	695a      	ldr	r2, [r3, #20]
 801454c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801454e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8014550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014552:	2280      	movs	r2, #128	@ 0x80
 8014554:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014556:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801455a:	2b03      	cmp	r3, #3
 801455c:	d149      	bne.n	80145f2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801455e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014560:	3334      	adds	r3, #52	@ 0x34
 8014562:	3330      	adds	r3, #48	@ 0x30
 8014564:	4618      	mov	r0, r3
 8014566:	f7fe f81b 	bl	80125a0 <ld_word>
 801456a:	4603      	mov	r3, r0
 801456c:	2b01      	cmp	r3, #1
 801456e:	d140      	bne.n	80145f2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014572:	3301      	adds	r3, #1
 8014574:	4619      	mov	r1, r3
 8014576:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014578:	f7fe fac4 	bl	8012b04 <move_window>
 801457c:	4603      	mov	r3, r0
 801457e:	2b00      	cmp	r3, #0
 8014580:	d137      	bne.n	80145f2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8014582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014584:	2200      	movs	r2, #0
 8014586:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801458a:	3334      	adds	r3, #52	@ 0x34
 801458c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014590:	4618      	mov	r0, r3
 8014592:	f7fe f805 	bl	80125a0 <ld_word>
 8014596:	4603      	mov	r3, r0
 8014598:	461a      	mov	r2, r3
 801459a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801459e:	429a      	cmp	r2, r3
 80145a0:	d127      	bne.n	80145f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80145a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145a4:	3334      	adds	r3, #52	@ 0x34
 80145a6:	4618      	mov	r0, r3
 80145a8:	f7fe f813 	bl	80125d2 <ld_dword>
 80145ac:	4603      	mov	r3, r0
 80145ae:	4a1c      	ldr	r2, [pc, #112]	@ (8014620 <find_volume+0x48c>)
 80145b0:	4293      	cmp	r3, r2
 80145b2:	d11e      	bne.n	80145f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80145b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145b6:	3334      	adds	r3, #52	@ 0x34
 80145b8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80145bc:	4618      	mov	r0, r3
 80145be:	f7fe f808 	bl	80125d2 <ld_dword>
 80145c2:	4603      	mov	r3, r0
 80145c4:	4a17      	ldr	r2, [pc, #92]	@ (8014624 <find_volume+0x490>)
 80145c6:	4293      	cmp	r3, r2
 80145c8:	d113      	bne.n	80145f2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80145ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145cc:	3334      	adds	r3, #52	@ 0x34
 80145ce:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80145d2:	4618      	mov	r0, r3
 80145d4:	f7fd fffd 	bl	80125d2 <ld_dword>
 80145d8:	4602      	mov	r2, r0
 80145da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145dc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80145de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145e0:	3334      	adds	r3, #52	@ 0x34
 80145e2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80145e6:	4618      	mov	r0, r3
 80145e8:	f7fd fff3 	bl	80125d2 <ld_dword>
 80145ec:	4602      	mov	r2, r0
 80145ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145f0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80145f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145f4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80145f8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80145fa:	4b0b      	ldr	r3, [pc, #44]	@ (8014628 <find_volume+0x494>)
 80145fc:	881b      	ldrh	r3, [r3, #0]
 80145fe:	3301      	adds	r3, #1
 8014600:	b29a      	uxth	r2, r3
 8014602:	4b09      	ldr	r3, [pc, #36]	@ (8014628 <find_volume+0x494>)
 8014604:	801a      	strh	r2, [r3, #0]
 8014606:	4b08      	ldr	r3, [pc, #32]	@ (8014628 <find_volume+0x494>)
 8014608:	881a      	ldrh	r2, [r3, #0]
 801460a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801460c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801460e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014610:	f7fe fa10 	bl	8012a34 <clear_lock>
#endif
	return FR_OK;
 8014614:	2300      	movs	r3, #0
}
 8014616:	4618      	mov	r0, r3
 8014618:	3758      	adds	r7, #88	@ 0x58
 801461a:	46bd      	mov	sp, r7
 801461c:	bd80      	pop	{r7, pc}
 801461e:	bf00      	nop
 8014620:	41615252 	.word	0x41615252
 8014624:	61417272 	.word	0x61417272
 8014628:	20000d5c 	.word	0x20000d5c

0801462c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b084      	sub	sp, #16
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
 8014634:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014636:	2309      	movs	r3, #9
 8014638:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d01c      	beq.n	801467a <validate+0x4e>
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d018      	beq.n	801467a <validate+0x4e>
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	781b      	ldrb	r3, [r3, #0]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d013      	beq.n	801467a <validate+0x4e>
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	889a      	ldrh	r2, [r3, #4]
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	88db      	ldrh	r3, [r3, #6]
 801465c:	429a      	cmp	r2, r3
 801465e:	d10c      	bne.n	801467a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	785b      	ldrb	r3, [r3, #1]
 8014666:	4618      	mov	r0, r3
 8014668:	f7fd fefa 	bl	8012460 <disk_status>
 801466c:	4603      	mov	r3, r0
 801466e:	f003 0301 	and.w	r3, r3, #1
 8014672:	2b00      	cmp	r3, #0
 8014674:	d101      	bne.n	801467a <validate+0x4e>
			res = FR_OK;
 8014676:	2300      	movs	r3, #0
 8014678:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801467a:	7bfb      	ldrb	r3, [r7, #15]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d102      	bne.n	8014686 <validate+0x5a>
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	e000      	b.n	8014688 <validate+0x5c>
 8014686:	2300      	movs	r3, #0
 8014688:	683a      	ldr	r2, [r7, #0]
 801468a:	6013      	str	r3, [r2, #0]
	return res;
 801468c:	7bfb      	ldrb	r3, [r7, #15]
}
 801468e:	4618      	mov	r0, r3
 8014690:	3710      	adds	r7, #16
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
	...

08014698 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b088      	sub	sp, #32
 801469c:	af00      	add	r7, sp, #0
 801469e:	60f8      	str	r0, [r7, #12]
 80146a0:	60b9      	str	r1, [r7, #8]
 80146a2:	4613      	mov	r3, r2
 80146a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80146a6:	68bb      	ldr	r3, [r7, #8]
 80146a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80146aa:	f107 0310 	add.w	r3, r7, #16
 80146ae:	4618      	mov	r0, r3
 80146b0:	f7ff fcd5 	bl	801405e <get_ldnumber>
 80146b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80146b6:	69fb      	ldr	r3, [r7, #28]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	da01      	bge.n	80146c0 <f_mount+0x28>
 80146bc:	230b      	movs	r3, #11
 80146be:	e02b      	b.n	8014718 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80146c0:	4a17      	ldr	r2, [pc, #92]	@ (8014720 <f_mount+0x88>)
 80146c2:	69fb      	ldr	r3, [r7, #28]
 80146c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80146c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80146ca:	69bb      	ldr	r3, [r7, #24]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d005      	beq.n	80146dc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80146d0:	69b8      	ldr	r0, [r7, #24]
 80146d2:	f7fe f9af 	bl	8012a34 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80146d6:	69bb      	ldr	r3, [r7, #24]
 80146d8:	2200      	movs	r2, #0
 80146da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d002      	beq.n	80146e8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	2200      	movs	r2, #0
 80146e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80146e8:	68fa      	ldr	r2, [r7, #12]
 80146ea:	490d      	ldr	r1, [pc, #52]	@ (8014720 <f_mount+0x88>)
 80146ec:	69fb      	ldr	r3, [r7, #28]
 80146ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d002      	beq.n	80146fe <f_mount+0x66>
 80146f8:	79fb      	ldrb	r3, [r7, #7]
 80146fa:	2b01      	cmp	r3, #1
 80146fc:	d001      	beq.n	8014702 <f_mount+0x6a>
 80146fe:	2300      	movs	r3, #0
 8014700:	e00a      	b.n	8014718 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014702:	f107 010c 	add.w	r1, r7, #12
 8014706:	f107 0308 	add.w	r3, r7, #8
 801470a:	2200      	movs	r2, #0
 801470c:	4618      	mov	r0, r3
 801470e:	f7ff fd41 	bl	8014194 <find_volume>
 8014712:	4603      	mov	r3, r0
 8014714:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014716:	7dfb      	ldrb	r3, [r7, #23]
}
 8014718:	4618      	mov	r0, r3
 801471a:	3720      	adds	r7, #32
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}
 8014720:	20000d58 	.word	0x20000d58

08014724 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b09a      	sub	sp, #104	@ 0x68
 8014728:	af00      	add	r7, sp, #0
 801472a:	60f8      	str	r0, [r7, #12]
 801472c:	60b9      	str	r1, [r7, #8]
 801472e:	4613      	mov	r3, r2
 8014730:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d101      	bne.n	801473c <f_open+0x18>
 8014738:	2309      	movs	r3, #9
 801473a:	e1b9      	b.n	8014ab0 <f_open+0x38c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801473c:	79fb      	ldrb	r3, [r7, #7]
 801473e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014742:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014744:	79fa      	ldrb	r2, [r7, #7]
 8014746:	f107 0110 	add.w	r1, r7, #16
 801474a:	f107 0308 	add.w	r3, r7, #8
 801474e:	4618      	mov	r0, r3
 8014750:	f7ff fd20 	bl	8014194 <find_volume>
 8014754:	4603      	mov	r3, r0
 8014756:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801475a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801475e:	2b00      	cmp	r3, #0
 8014760:	f040 819d 	bne.w	8014a9e <f_open+0x37a>
		dj.obj.fs = fs;
 8014764:	693b      	ldr	r3, [r7, #16]
 8014766:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8014768:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801476c:	f000 ffa2 	bl	80156b4 <ff_memalloc>
 8014770:	65b8      	str	r0, [r7, #88]	@ 0x58
 8014772:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014774:	2b00      	cmp	r3, #0
 8014776:	d101      	bne.n	801477c <f_open+0x58>
 8014778:	2311      	movs	r3, #17
 801477a:	e199      	b.n	8014ab0 <f_open+0x38c>
 801477c:	693b      	ldr	r3, [r7, #16]
 801477e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014780:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8014782:	68ba      	ldr	r2, [r7, #8]
 8014784:	f107 0314 	add.w	r3, r7, #20
 8014788:	4611      	mov	r1, r2
 801478a:	4618      	mov	r0, r3
 801478c:	f7ff fbf6 	bl	8013f7c <follow_path>
 8014790:	4603      	mov	r3, r0
 8014792:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014796:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801479a:	2b00      	cmp	r3, #0
 801479c:	d118      	bne.n	80147d0 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801479e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80147a2:	b25b      	sxtb	r3, r3
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	da03      	bge.n	80147b0 <f_open+0x8c>
				res = FR_INVALID_NAME;
 80147a8:	2306      	movs	r3, #6
 80147aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80147ae:	e00f      	b.n	80147d0 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80147b0:	79fb      	ldrb	r3, [r7, #7]
 80147b2:	2b01      	cmp	r3, #1
 80147b4:	bf8c      	ite	hi
 80147b6:	2301      	movhi	r3, #1
 80147b8:	2300      	movls	r3, #0
 80147ba:	b2db      	uxtb	r3, r3
 80147bc:	461a      	mov	r2, r3
 80147be:	f107 0314 	add.w	r3, r7, #20
 80147c2:	4611      	mov	r1, r2
 80147c4:	4618      	mov	r0, r3
 80147c6:	f7fd ffed 	bl	80127a4 <chk_lock>
 80147ca:	4603      	mov	r3, r0
 80147cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80147d0:	79fb      	ldrb	r3, [r7, #7]
 80147d2:	f003 031c 	and.w	r3, r3, #28
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d07f      	beq.n	80148da <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 80147da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d017      	beq.n	8014812 <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80147e2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80147e6:	2b04      	cmp	r3, #4
 80147e8:	d10e      	bne.n	8014808 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80147ea:	f7fe f837 	bl	801285c <enq_lock>
 80147ee:	4603      	mov	r3, r0
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d006      	beq.n	8014802 <f_open+0xde>
 80147f4:	f107 0314 	add.w	r3, r7, #20
 80147f8:	4618      	mov	r0, r3
 80147fa:	f7ff f90f 	bl	8013a1c <dir_register>
 80147fe:	4603      	mov	r3, r0
 8014800:	e000      	b.n	8014804 <f_open+0xe0>
 8014802:	2312      	movs	r3, #18
 8014804:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014808:	79fb      	ldrb	r3, [r7, #7]
 801480a:	f043 0308 	orr.w	r3, r3, #8
 801480e:	71fb      	strb	r3, [r7, #7]
 8014810:	e010      	b.n	8014834 <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014812:	7ebb      	ldrb	r3, [r7, #26]
 8014814:	f003 0311 	and.w	r3, r3, #17
 8014818:	2b00      	cmp	r3, #0
 801481a:	d003      	beq.n	8014824 <f_open+0x100>
					res = FR_DENIED;
 801481c:	2307      	movs	r3, #7
 801481e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8014822:	e007      	b.n	8014834 <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014824:	79fb      	ldrb	r3, [r7, #7]
 8014826:	f003 0304 	and.w	r3, r3, #4
 801482a:	2b00      	cmp	r3, #0
 801482c:	d002      	beq.n	8014834 <f_open+0x110>
 801482e:	2308      	movs	r3, #8
 8014830:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014834:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014838:	2b00      	cmp	r3, #0
 801483a:	d168      	bne.n	801490e <f_open+0x1ea>
 801483c:	79fb      	ldrb	r3, [r7, #7]
 801483e:	f003 0308 	and.w	r3, r3, #8
 8014842:	2b00      	cmp	r3, #0
 8014844:	d063      	beq.n	801490e <f_open+0x1ea>
				dw = GET_FATTIME();
 8014846:	f7fc fe9f 	bl	8011588 <get_fattime>
 801484a:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801484c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801484e:	330e      	adds	r3, #14
 8014850:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8014852:	4618      	mov	r0, r3
 8014854:	f7fd fefb 	bl	801264e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801485a:	3316      	adds	r3, #22
 801485c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801485e:	4618      	mov	r0, r3
 8014860:	f7fd fef5 	bl	801264e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014866:	330b      	adds	r3, #11
 8014868:	2220      	movs	r2, #32
 801486a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801486c:	693b      	ldr	r3, [r7, #16]
 801486e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014870:	4611      	mov	r1, r2
 8014872:	4618      	mov	r0, r3
 8014874:	f7fe fe4a 	bl	801350c <ld_clust>
 8014878:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801487a:	693b      	ldr	r3, [r7, #16]
 801487c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801487e:	2200      	movs	r2, #0
 8014880:	4618      	mov	r0, r3
 8014882:	f7fe fe62 	bl	801354a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014888:	331c      	adds	r3, #28
 801488a:	2100      	movs	r1, #0
 801488c:	4618      	mov	r0, r3
 801488e:	f7fd fede 	bl	801264e <st_dword>
					fs->wflag = 1;
 8014892:	693b      	ldr	r3, [r7, #16]
 8014894:	2201      	movs	r2, #1
 8014896:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014898:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801489a:	2b00      	cmp	r3, #0
 801489c:	d037      	beq.n	801490e <f_open+0x1ea>
						dw = fs->winsect;
 801489e:	693b      	ldr	r3, [r7, #16]
 80148a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80148a2:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 80148a4:	f107 0314 	add.w	r3, r7, #20
 80148a8:	2200      	movs	r2, #0
 80148aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80148ac:	4618      	mov	r0, r3
 80148ae:	f7fe fb75 	bl	8012f9c <remove_chain>
 80148b2:	4603      	mov	r3, r0
 80148b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80148b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d126      	bne.n	801490e <f_open+0x1ea>
							res = move_window(fs, dw);
 80148c0:	693b      	ldr	r3, [r7, #16]
 80148c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80148c4:	4618      	mov	r0, r3
 80148c6:	f7fe f91d 	bl	8012b04 <move_window>
 80148ca:	4603      	mov	r3, r0
 80148cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80148d0:	693b      	ldr	r3, [r7, #16]
 80148d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80148d4:	3a01      	subs	r2, #1
 80148d6:	611a      	str	r2, [r3, #16]
 80148d8:	e019      	b.n	801490e <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80148da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d115      	bne.n	801490e <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80148e2:	7ebb      	ldrb	r3, [r7, #26]
 80148e4:	f003 0310 	and.w	r3, r3, #16
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d003      	beq.n	80148f4 <f_open+0x1d0>
					res = FR_NO_FILE;
 80148ec:	2304      	movs	r3, #4
 80148ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80148f2:	e00c      	b.n	801490e <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80148f4:	79fb      	ldrb	r3, [r7, #7]
 80148f6:	f003 0302 	and.w	r3, r3, #2
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d007      	beq.n	801490e <f_open+0x1ea>
 80148fe:	7ebb      	ldrb	r3, [r7, #26]
 8014900:	f003 0301 	and.w	r3, r3, #1
 8014904:	2b00      	cmp	r3, #0
 8014906:	d002      	beq.n	801490e <f_open+0x1ea>
						res = FR_DENIED;
 8014908:	2307      	movs	r3, #7
 801490a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801490e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014912:	2b00      	cmp	r3, #0
 8014914:	d126      	bne.n	8014964 <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014916:	79fb      	ldrb	r3, [r7, #7]
 8014918:	f003 0308 	and.w	r3, r3, #8
 801491c:	2b00      	cmp	r3, #0
 801491e:	d003      	beq.n	8014928 <f_open+0x204>
				mode |= FA_MODIFIED;
 8014920:	79fb      	ldrb	r3, [r7, #7]
 8014922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014926:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014928:	693b      	ldr	r3, [r7, #16]
 801492a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8014930:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014936:	79fb      	ldrb	r3, [r7, #7]
 8014938:	2b01      	cmp	r3, #1
 801493a:	bf8c      	ite	hi
 801493c:	2301      	movhi	r3, #1
 801493e:	2300      	movls	r3, #0
 8014940:	b2db      	uxtb	r3, r3
 8014942:	461a      	mov	r2, r3
 8014944:	f107 0314 	add.w	r3, r7, #20
 8014948:	4611      	mov	r1, r2
 801494a:	4618      	mov	r0, r3
 801494c:	f7fd ffa8 	bl	80128a0 <inc_lock>
 8014950:	4602      	mov	r2, r0
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	691b      	ldr	r3, [r3, #16]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d102      	bne.n	8014964 <f_open+0x240>
 801495e:	2302      	movs	r3, #2
 8014960:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014964:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014968:	2b00      	cmp	r3, #0
 801496a:	f040 8095 	bne.w	8014a98 <f_open+0x374>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801496e:	693b      	ldr	r3, [r7, #16]
 8014970:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014972:	4611      	mov	r1, r2
 8014974:	4618      	mov	r0, r3
 8014976:	f7fe fdc9 	bl	801350c <ld_clust>
 801497a:	4602      	mov	r2, r0
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014982:	331c      	adds	r3, #28
 8014984:	4618      	mov	r0, r3
 8014986:	f7fd fe24 	bl	80125d2 <ld_dword>
 801498a:	4602      	mov	r2, r0
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	2200      	movs	r2, #0
 8014994:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014996:	693a      	ldr	r2, [r7, #16]
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801499c:	693b      	ldr	r3, [r7, #16]
 801499e:	88da      	ldrh	r2, [r3, #6]
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	79fa      	ldrb	r2, [r7, #7]
 80149a8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	2200      	movs	r2, #0
 80149ae:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	2200      	movs	r2, #0
 80149b4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	2200      	movs	r2, #0
 80149ba:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	3330      	adds	r3, #48	@ 0x30
 80149c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80149c4:	2100      	movs	r1, #0
 80149c6:	4618      	mov	r0, r3
 80149c8:	f7fd fe8e 	bl	80126e8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80149cc:	79fb      	ldrb	r3, [r7, #7]
 80149ce:	f003 0320 	and.w	r3, r3, #32
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d060      	beq.n	8014a98 <f_open+0x374>
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	68db      	ldr	r3, [r3, #12]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d05c      	beq.n	8014a98 <f_open+0x374>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	68da      	ldr	r2, [r3, #12]
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80149e6:	693b      	ldr	r3, [r7, #16]
 80149e8:	895b      	ldrh	r3, [r3, #10]
 80149ea:	025b      	lsls	r3, r3, #9
 80149ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	689b      	ldr	r3, [r3, #8]
 80149f2:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	68db      	ldr	r3, [r3, #12]
 80149f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80149fa:	e016      	b.n	8014a2a <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014a00:	4618      	mov	r0, r3
 8014a02:	f7fe f93a 	bl	8012c7a <get_fat>
 8014a06:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8014a08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014a0a:	2b01      	cmp	r3, #1
 8014a0c:	d802      	bhi.n	8014a14 <f_open+0x2f0>
 8014a0e:	2302      	movs	r3, #2
 8014a10:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014a14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a1a:	d102      	bne.n	8014a22 <f_open+0x2fe>
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014a22:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014a24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a26:	1ad3      	subs	r3, r2, r3
 8014a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014a2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d103      	bne.n	8014a3a <f_open+0x316>
 8014a32:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014a34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014a36:	429a      	cmp	r2, r3
 8014a38:	d8e0      	bhi.n	80149fc <f_open+0x2d8>
				}
				fp->clust = clst;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014a3e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014a40:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d127      	bne.n	8014a98 <f_open+0x374>
 8014a48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d022      	beq.n	8014a98 <f_open+0x374>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014a52:	693b      	ldr	r3, [r7, #16]
 8014a54:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014a56:	4618      	mov	r0, r3
 8014a58:	f7fe f8f0 	bl	8012c3c <clust2sect>
 8014a5c:	64b8      	str	r0, [r7, #72]	@ 0x48
 8014a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d103      	bne.n	8014a6c <f_open+0x348>
						res = FR_INT_ERR;
 8014a64:	2302      	movs	r3, #2
 8014a66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8014a6a:	e015      	b.n	8014a98 <f_open+0x374>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014a6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014a6e:	0a5a      	lsrs	r2, r3, #9
 8014a70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014a72:	441a      	add	r2, r3
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014a78:	693b      	ldr	r3, [r7, #16]
 8014a7a:	7858      	ldrb	r0, [r3, #1]
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	6a1a      	ldr	r2, [r3, #32]
 8014a86:	2301      	movs	r3, #1
 8014a88:	f7fd fd2c 	bl	80124e4 <disk_read>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d002      	beq.n	8014a98 <f_open+0x374>
 8014a92:	2301      	movs	r3, #1
 8014a94:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8014a98:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8014a9a:	f000 fe17 	bl	80156cc <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014a9e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d002      	beq.n	8014aac <f_open+0x388>
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014aac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	3768      	adds	r7, #104	@ 0x68
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	bd80      	pop	{r7, pc}

08014ab8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b08c      	sub	sp, #48	@ 0x30
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	60f8      	str	r0, [r7, #12]
 8014ac0:	60b9      	str	r1, [r7, #8]
 8014ac2:	607a      	str	r2, [r7, #4]
 8014ac4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014aca:	683b      	ldr	r3, [r7, #0]
 8014acc:	2200      	movs	r2, #0
 8014ace:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	f107 0210 	add.w	r2, r7, #16
 8014ad6:	4611      	mov	r1, r2
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f7ff fda7 	bl	801462c <validate>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014ae4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d107      	bne.n	8014afc <f_write+0x44>
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	7d5b      	ldrb	r3, [r3, #21]
 8014af0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8014af4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d002      	beq.n	8014b02 <f_write+0x4a>
 8014afc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014b00:	e14b      	b.n	8014d9a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	7d1b      	ldrb	r3, [r3, #20]
 8014b06:	f003 0302 	and.w	r3, r3, #2
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d101      	bne.n	8014b12 <f_write+0x5a>
 8014b0e:	2307      	movs	r3, #7
 8014b10:	e143      	b.n	8014d9a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	699a      	ldr	r2, [r3, #24]
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	441a      	add	r2, r3
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	699b      	ldr	r3, [r3, #24]
 8014b1e:	429a      	cmp	r2, r3
 8014b20:	f080 812d 	bcs.w	8014d7e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	699b      	ldr	r3, [r3, #24]
 8014b28:	43db      	mvns	r3, r3
 8014b2a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014b2c:	e127      	b.n	8014d7e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	699b      	ldr	r3, [r3, #24]
 8014b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	f040 80e3 	bne.w	8014d02 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	699b      	ldr	r3, [r3, #24]
 8014b40:	0a5b      	lsrs	r3, r3, #9
 8014b42:	693a      	ldr	r2, [r7, #16]
 8014b44:	8952      	ldrh	r2, [r2, #10]
 8014b46:	3a01      	subs	r2, #1
 8014b48:	4013      	ands	r3, r2
 8014b4a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014b4c:	69bb      	ldr	r3, [r7, #24]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d143      	bne.n	8014bda <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	699b      	ldr	r3, [r3, #24]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d10c      	bne.n	8014b74 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	689b      	ldr	r3, [r3, #8]
 8014b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d11a      	bne.n	8014b9c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	2100      	movs	r1, #0
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f7fe fa7b 	bl	8013066 <create_chain>
 8014b70:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014b72:	e013      	b.n	8014b9c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d007      	beq.n	8014b8c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	699b      	ldr	r3, [r3, #24]
 8014b80:	4619      	mov	r1, r3
 8014b82:	68f8      	ldr	r0, [r7, #12]
 8014b84:	f7fe fb07 	bl	8013196 <clmt_clust>
 8014b88:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014b8a:	e007      	b.n	8014b9c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014b8c:	68fa      	ldr	r2, [r7, #12]
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	69db      	ldr	r3, [r3, #28]
 8014b92:	4619      	mov	r1, r3
 8014b94:	4610      	mov	r0, r2
 8014b96:	f7fe fa66 	bl	8013066 <create_chain>
 8014b9a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	f000 80f2 	beq.w	8014d88 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ba6:	2b01      	cmp	r3, #1
 8014ba8:	d104      	bne.n	8014bb4 <f_write+0xfc>
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	2202      	movs	r2, #2
 8014bae:	755a      	strb	r2, [r3, #21]
 8014bb0:	2302      	movs	r3, #2
 8014bb2:	e0f2      	b.n	8014d9a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bba:	d104      	bne.n	8014bc6 <f_write+0x10e>
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	2201      	movs	r2, #1
 8014bc0:	755a      	strb	r2, [r3, #21]
 8014bc2:	2301      	movs	r3, #1
 8014bc4:	e0e9      	b.n	8014d9a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014bca:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	689b      	ldr	r3, [r3, #8]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d102      	bne.n	8014bda <f_write+0x122>
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014bd8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	7d1b      	ldrb	r3, [r3, #20]
 8014bde:	b25b      	sxtb	r3, r3
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	da18      	bge.n	8014c16 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014be4:	693b      	ldr	r3, [r7, #16]
 8014be6:	7858      	ldrb	r0, [r3, #1]
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	6a1a      	ldr	r2, [r3, #32]
 8014bf2:	2301      	movs	r3, #1
 8014bf4:	f7fd fc96 	bl	8012524 <disk_write>
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d004      	beq.n	8014c08 <f_write+0x150>
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	2201      	movs	r2, #1
 8014c02:	755a      	strb	r2, [r3, #21]
 8014c04:	2301      	movs	r3, #1
 8014c06:	e0c8      	b.n	8014d9a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	7d1b      	ldrb	r3, [r3, #20]
 8014c0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014c10:	b2da      	uxtb	r2, r3
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014c16:	693a      	ldr	r2, [r7, #16]
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	69db      	ldr	r3, [r3, #28]
 8014c1c:	4619      	mov	r1, r3
 8014c1e:	4610      	mov	r0, r2
 8014c20:	f7fe f80c 	bl	8012c3c <clust2sect>
 8014c24:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d104      	bne.n	8014c36 <f_write+0x17e>
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	2202      	movs	r2, #2
 8014c30:	755a      	strb	r2, [r3, #21]
 8014c32:	2302      	movs	r3, #2
 8014c34:	e0b1      	b.n	8014d9a <f_write+0x2e2>
			sect += csect;
 8014c36:	697a      	ldr	r2, [r7, #20]
 8014c38:	69bb      	ldr	r3, [r7, #24]
 8014c3a:	4413      	add	r3, r2
 8014c3c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	0a5b      	lsrs	r3, r3, #9
 8014c42:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014c44:	6a3b      	ldr	r3, [r7, #32]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d03c      	beq.n	8014cc4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014c4a:	69ba      	ldr	r2, [r7, #24]
 8014c4c:	6a3b      	ldr	r3, [r7, #32]
 8014c4e:	4413      	add	r3, r2
 8014c50:	693a      	ldr	r2, [r7, #16]
 8014c52:	8952      	ldrh	r2, [r2, #10]
 8014c54:	4293      	cmp	r3, r2
 8014c56:	d905      	bls.n	8014c64 <f_write+0x1ac>
					cc = fs->csize - csect;
 8014c58:	693b      	ldr	r3, [r7, #16]
 8014c5a:	895b      	ldrh	r3, [r3, #10]
 8014c5c:	461a      	mov	r2, r3
 8014c5e:	69bb      	ldr	r3, [r7, #24]
 8014c60:	1ad3      	subs	r3, r2, r3
 8014c62:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014c64:	693b      	ldr	r3, [r7, #16]
 8014c66:	7858      	ldrb	r0, [r3, #1]
 8014c68:	6a3b      	ldr	r3, [r7, #32]
 8014c6a:	697a      	ldr	r2, [r7, #20]
 8014c6c:	69f9      	ldr	r1, [r7, #28]
 8014c6e:	f7fd fc59 	bl	8012524 <disk_write>
 8014c72:	4603      	mov	r3, r0
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d004      	beq.n	8014c82 <f_write+0x1ca>
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	2201      	movs	r2, #1
 8014c7c:	755a      	strb	r2, [r3, #21]
 8014c7e:	2301      	movs	r3, #1
 8014c80:	e08b      	b.n	8014d9a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	6a1a      	ldr	r2, [r3, #32]
 8014c86:	697b      	ldr	r3, [r7, #20]
 8014c88:	1ad3      	subs	r3, r2, r3
 8014c8a:	6a3a      	ldr	r2, [r7, #32]
 8014c8c:	429a      	cmp	r2, r3
 8014c8e:	d915      	bls.n	8014cbc <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	6a1a      	ldr	r2, [r3, #32]
 8014c9a:	697b      	ldr	r3, [r7, #20]
 8014c9c:	1ad3      	subs	r3, r2, r3
 8014c9e:	025b      	lsls	r3, r3, #9
 8014ca0:	69fa      	ldr	r2, [r7, #28]
 8014ca2:	4413      	add	r3, r2
 8014ca4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014ca8:	4619      	mov	r1, r3
 8014caa:	f7fd fcfc 	bl	80126a6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	7d1b      	ldrb	r3, [r3, #20]
 8014cb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014cb6:	b2da      	uxtb	r2, r3
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014cbc:	6a3b      	ldr	r3, [r7, #32]
 8014cbe:	025b      	lsls	r3, r3, #9
 8014cc0:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8014cc2:	e03f      	b.n	8014d44 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	6a1b      	ldr	r3, [r3, #32]
 8014cc8:	697a      	ldr	r2, [r7, #20]
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	d016      	beq.n	8014cfc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	699a      	ldr	r2, [r3, #24]
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014cd6:	429a      	cmp	r2, r3
 8014cd8:	d210      	bcs.n	8014cfc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014cda:	693b      	ldr	r3, [r7, #16]
 8014cdc:	7858      	ldrb	r0, [r3, #1]
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014ce4:	2301      	movs	r3, #1
 8014ce6:	697a      	ldr	r2, [r7, #20]
 8014ce8:	f7fd fbfc 	bl	80124e4 <disk_read>
 8014cec:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d004      	beq.n	8014cfc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	2201      	movs	r2, #1
 8014cf6:	755a      	strb	r2, [r3, #21]
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	e04e      	b.n	8014d9a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	697a      	ldr	r2, [r7, #20]
 8014d00:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	699b      	ldr	r3, [r3, #24]
 8014d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014d0a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8014d0e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	429a      	cmp	r2, r3
 8014d16:	d901      	bls.n	8014d1c <f_write+0x264>
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	699b      	ldr	r3, [r3, #24]
 8014d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014d2a:	4413      	add	r3, r2
 8014d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d2e:	69f9      	ldr	r1, [r7, #28]
 8014d30:	4618      	mov	r0, r3
 8014d32:	f7fd fcb8 	bl	80126a6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	7d1b      	ldrb	r3, [r3, #20]
 8014d3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014d3e:	b2da      	uxtb	r2, r3
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014d44:	69fa      	ldr	r2, [r7, #28]
 8014d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d48:	4413      	add	r3, r2
 8014d4a:	61fb      	str	r3, [r7, #28]
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	699a      	ldr	r2, [r3, #24]
 8014d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d52:	441a      	add	r2, r3
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	619a      	str	r2, [r3, #24]
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	68da      	ldr	r2, [r3, #12]
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	699b      	ldr	r3, [r3, #24]
 8014d60:	429a      	cmp	r2, r3
 8014d62:	bf38      	it	cc
 8014d64:	461a      	movcc	r2, r3
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	60da      	str	r2, [r3, #12]
 8014d6a:	683b      	ldr	r3, [r7, #0]
 8014d6c:	681a      	ldr	r2, [r3, #0]
 8014d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d70:	441a      	add	r2, r3
 8014d72:	683b      	ldr	r3, [r7, #0]
 8014d74:	601a      	str	r2, [r3, #0]
 8014d76:	687a      	ldr	r2, [r7, #4]
 8014d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d7a:	1ad3      	subs	r3, r2, r3
 8014d7c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	f47f aed4 	bne.w	8014b2e <f_write+0x76>
 8014d86:	e000      	b.n	8014d8a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014d88:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	7d1b      	ldrb	r3, [r3, #20]
 8014d8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014d92:	b2da      	uxtb	r2, r3
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014d98:	2300      	movs	r3, #0
}
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	3730      	adds	r7, #48	@ 0x30
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	bd80      	pop	{r7, pc}

08014da2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014da2:	b580      	push	{r7, lr}
 8014da4:	b086      	sub	sp, #24
 8014da6:	af00      	add	r7, sp, #0
 8014da8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	f107 0208 	add.w	r2, r7, #8
 8014db0:	4611      	mov	r1, r2
 8014db2:	4618      	mov	r0, r3
 8014db4:	f7ff fc3a 	bl	801462c <validate>
 8014db8:	4603      	mov	r3, r0
 8014dba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014dbc:	7dfb      	ldrb	r3, [r7, #23]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d168      	bne.n	8014e94 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	7d1b      	ldrb	r3, [r3, #20]
 8014dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d062      	beq.n	8014e94 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	7d1b      	ldrb	r3, [r3, #20]
 8014dd2:	b25b      	sxtb	r3, r3
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	da15      	bge.n	8014e04 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014dd8:	68bb      	ldr	r3, [r7, #8]
 8014dda:	7858      	ldrb	r0, [r3, #1]
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	6a1a      	ldr	r2, [r3, #32]
 8014de6:	2301      	movs	r3, #1
 8014de8:	f7fd fb9c 	bl	8012524 <disk_write>
 8014dec:	4603      	mov	r3, r0
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d001      	beq.n	8014df6 <f_sync+0x54>
 8014df2:	2301      	movs	r3, #1
 8014df4:	e04f      	b.n	8014e96 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	7d1b      	ldrb	r3, [r3, #20]
 8014dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014dfe:	b2da      	uxtb	r2, r3
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014e04:	f7fc fbc0 	bl	8011588 <get_fattime>
 8014e08:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014e0a:	68ba      	ldr	r2, [r7, #8]
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e10:	4619      	mov	r1, r3
 8014e12:	4610      	mov	r0, r2
 8014e14:	f7fd fe76 	bl	8012b04 <move_window>
 8014e18:	4603      	mov	r3, r0
 8014e1a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014e1c:	7dfb      	ldrb	r3, [r7, #23]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d138      	bne.n	8014e94 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e26:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	330b      	adds	r3, #11
 8014e2c:	781a      	ldrb	r2, [r3, #0]
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	330b      	adds	r3, #11
 8014e32:	f042 0220 	orr.w	r2, r2, #32
 8014e36:	b2d2      	uxtb	r2, r2
 8014e38:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	6818      	ldr	r0, [r3, #0]
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	689b      	ldr	r3, [r3, #8]
 8014e42:	461a      	mov	r2, r3
 8014e44:	68f9      	ldr	r1, [r7, #12]
 8014e46:	f7fe fb80 	bl	801354a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	f103 021c 	add.w	r2, r3, #28
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	68db      	ldr	r3, [r3, #12]
 8014e54:	4619      	mov	r1, r3
 8014e56:	4610      	mov	r0, r2
 8014e58:	f7fd fbf9 	bl	801264e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	3316      	adds	r3, #22
 8014e60:	6939      	ldr	r1, [r7, #16]
 8014e62:	4618      	mov	r0, r3
 8014e64:	f7fd fbf3 	bl	801264e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	3312      	adds	r3, #18
 8014e6c:	2100      	movs	r1, #0
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f7fd fbd2 	bl	8012618 <st_word>
					fs->wflag = 1;
 8014e74:	68bb      	ldr	r3, [r7, #8]
 8014e76:	2201      	movs	r2, #1
 8014e78:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014e7a:	68bb      	ldr	r3, [r7, #8]
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	f7fd fe6f 	bl	8012b60 <sync_fs>
 8014e82:	4603      	mov	r3, r0
 8014e84:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	7d1b      	ldrb	r3, [r3, #20]
 8014e8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014e8e:	b2da      	uxtb	r2, r3
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3718      	adds	r7, #24
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}

08014e9e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014e9e:	b580      	push	{r7, lr}
 8014ea0:	b084      	sub	sp, #16
 8014ea2:	af00      	add	r7, sp, #0
 8014ea4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014ea6:	6878      	ldr	r0, [r7, #4]
 8014ea8:	f7ff ff7b 	bl	8014da2 <f_sync>
 8014eac:	4603      	mov	r3, r0
 8014eae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014eb0:	7bfb      	ldrb	r3, [r7, #15]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d118      	bne.n	8014ee8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	f107 0208 	add.w	r2, r7, #8
 8014ebc:	4611      	mov	r1, r2
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f7ff fbb4 	bl	801462c <validate>
 8014ec4:	4603      	mov	r3, r0
 8014ec6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014ec8:	7bfb      	ldrb	r3, [r7, #15]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d10c      	bne.n	8014ee8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	691b      	ldr	r3, [r3, #16]
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	f7fd fd72 	bl	80129bc <dec_lock>
 8014ed8:	4603      	mov	r3, r0
 8014eda:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014edc:	7bfb      	ldrb	r3, [r7, #15]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d102      	bne.n	8014ee8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	2200      	movs	r2, #0
 8014ee6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014eea:	4618      	mov	r0, r3
 8014eec:	3710      	adds	r7, #16
 8014eee:	46bd      	mov	sp, r7
 8014ef0:	bd80      	pop	{r7, pc}

08014ef2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014ef2:	b580      	push	{r7, lr}
 8014ef4:	b090      	sub	sp, #64	@ 0x40
 8014ef6:	af00      	add	r7, sp, #0
 8014ef8:	6078      	str	r0, [r7, #4]
 8014efa:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	f107 0208 	add.w	r2, r7, #8
 8014f02:	4611      	mov	r1, r2
 8014f04:	4618      	mov	r0, r3
 8014f06:	f7ff fb91 	bl	801462c <validate>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014f10:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d103      	bne.n	8014f20 <f_lseek+0x2e>
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	7d5b      	ldrb	r3, [r3, #21]
 8014f1c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014f20:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d002      	beq.n	8014f2e <f_lseek+0x3c>
 8014f28:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014f2c:	e1e6      	b.n	80152fc <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	f000 80d1 	beq.w	80150da <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f3e:	d15a      	bne.n	8014ff6 <f_lseek+0x104>
			tbl = fp->cltbl;
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f44:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f48:	1d1a      	adds	r2, r3, #4
 8014f4a:	627a      	str	r2, [r7, #36]	@ 0x24
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	617b      	str	r3, [r7, #20]
 8014f50:	2302      	movs	r3, #2
 8014f52:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	689b      	ldr	r3, [r3, #8]
 8014f58:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8014f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d03a      	beq.n	8014fd6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8014f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f62:	613b      	str	r3, [r7, #16]
 8014f64:	2300      	movs	r3, #0
 8014f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f6a:	3302      	adds	r3, #2
 8014f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8014f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f70:	60fb      	str	r3, [r7, #12]
 8014f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f74:	3301      	adds	r3, #1
 8014f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	f7fd fe7c 	bl	8012c7a <get_fat>
 8014f82:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f86:	2b01      	cmp	r3, #1
 8014f88:	d804      	bhi.n	8014f94 <f_lseek+0xa2>
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	2202      	movs	r2, #2
 8014f8e:	755a      	strb	r2, [r3, #21]
 8014f90:	2302      	movs	r3, #2
 8014f92:	e1b3      	b.n	80152fc <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f9a:	d104      	bne.n	8014fa6 <f_lseek+0xb4>
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	2201      	movs	r2, #1
 8014fa0:	755a      	strb	r2, [r3, #21]
 8014fa2:	2301      	movs	r3, #1
 8014fa4:	e1aa      	b.n	80152fc <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	3301      	adds	r3, #1
 8014faa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014fac:	429a      	cmp	r2, r3
 8014fae:	d0de      	beq.n	8014f6e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014fb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014fb2:	697b      	ldr	r3, [r7, #20]
 8014fb4:	429a      	cmp	r2, r3
 8014fb6:	d809      	bhi.n	8014fcc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8014fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fba:	1d1a      	adds	r2, r3, #4
 8014fbc:	627a      	str	r2, [r7, #36]	@ 0x24
 8014fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014fc0:	601a      	str	r2, [r3, #0]
 8014fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fc4:	1d1a      	adds	r2, r3, #4
 8014fc6:	627a      	str	r2, [r7, #36]	@ 0x24
 8014fc8:	693a      	ldr	r2, [r7, #16]
 8014fca:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	699b      	ldr	r3, [r3, #24]
 8014fd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014fd2:	429a      	cmp	r2, r3
 8014fd4:	d3c4      	bcc.n	8014f60 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014fda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014fdc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014fde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	429a      	cmp	r2, r3
 8014fe4:	d803      	bhi.n	8014fee <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8014fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fe8:	2200      	movs	r2, #0
 8014fea:	601a      	str	r2, [r3, #0]
 8014fec:	e184      	b.n	80152f8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014fee:	2311      	movs	r3, #17
 8014ff0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8014ff4:	e180      	b.n	80152f8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	68db      	ldr	r3, [r3, #12]
 8014ffa:	683a      	ldr	r2, [r7, #0]
 8014ffc:	429a      	cmp	r2, r3
 8014ffe:	d902      	bls.n	8015006 <f_lseek+0x114>
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	68db      	ldr	r3, [r3, #12]
 8015004:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	683a      	ldr	r2, [r7, #0]
 801500a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801500c:	683b      	ldr	r3, [r7, #0]
 801500e:	2b00      	cmp	r3, #0
 8015010:	f000 8172 	beq.w	80152f8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	3b01      	subs	r3, #1
 8015018:	4619      	mov	r1, r3
 801501a:	6878      	ldr	r0, [r7, #4]
 801501c:	f7fe f8bb 	bl	8013196 <clmt_clust>
 8015020:	4602      	mov	r2, r0
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8015026:	68ba      	ldr	r2, [r7, #8]
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	69db      	ldr	r3, [r3, #28]
 801502c:	4619      	mov	r1, r3
 801502e:	4610      	mov	r0, r2
 8015030:	f7fd fe04 	bl	8012c3c <clust2sect>
 8015034:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8015036:	69bb      	ldr	r3, [r7, #24]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d104      	bne.n	8015046 <f_lseek+0x154>
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	2202      	movs	r2, #2
 8015040:	755a      	strb	r2, [r3, #21]
 8015042:	2302      	movs	r3, #2
 8015044:	e15a      	b.n	80152fc <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8015046:	683b      	ldr	r3, [r7, #0]
 8015048:	3b01      	subs	r3, #1
 801504a:	0a5b      	lsrs	r3, r3, #9
 801504c:	68ba      	ldr	r2, [r7, #8]
 801504e:	8952      	ldrh	r2, [r2, #10]
 8015050:	3a01      	subs	r2, #1
 8015052:	4013      	ands	r3, r2
 8015054:	69ba      	ldr	r2, [r7, #24]
 8015056:	4413      	add	r3, r2
 8015058:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	699b      	ldr	r3, [r3, #24]
 801505e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015062:	2b00      	cmp	r3, #0
 8015064:	f000 8148 	beq.w	80152f8 <f_lseek+0x406>
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	6a1b      	ldr	r3, [r3, #32]
 801506c:	69ba      	ldr	r2, [r7, #24]
 801506e:	429a      	cmp	r2, r3
 8015070:	f000 8142 	beq.w	80152f8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	7d1b      	ldrb	r3, [r3, #20]
 8015078:	b25b      	sxtb	r3, r3
 801507a:	2b00      	cmp	r3, #0
 801507c:	da18      	bge.n	80150b0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801507e:	68bb      	ldr	r3, [r7, #8]
 8015080:	7858      	ldrb	r0, [r3, #1]
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	6a1a      	ldr	r2, [r3, #32]
 801508c:	2301      	movs	r3, #1
 801508e:	f7fd fa49 	bl	8012524 <disk_write>
 8015092:	4603      	mov	r3, r0
 8015094:	2b00      	cmp	r3, #0
 8015096:	d004      	beq.n	80150a2 <f_lseek+0x1b0>
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	2201      	movs	r2, #1
 801509c:	755a      	strb	r2, [r3, #21]
 801509e:	2301      	movs	r3, #1
 80150a0:	e12c      	b.n	80152fc <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	7d1b      	ldrb	r3, [r3, #20]
 80150a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80150aa:	b2da      	uxtb	r2, r3
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80150b0:	68bb      	ldr	r3, [r7, #8]
 80150b2:	7858      	ldrb	r0, [r3, #1]
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80150ba:	2301      	movs	r3, #1
 80150bc:	69ba      	ldr	r2, [r7, #24]
 80150be:	f7fd fa11 	bl	80124e4 <disk_read>
 80150c2:	4603      	mov	r3, r0
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d004      	beq.n	80150d2 <f_lseek+0x1e0>
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	2201      	movs	r2, #1
 80150cc:	755a      	strb	r2, [r3, #21]
 80150ce:	2301      	movs	r3, #1
 80150d0:	e114      	b.n	80152fc <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	69ba      	ldr	r2, [r7, #24]
 80150d6:	621a      	str	r2, [r3, #32]
 80150d8:	e10e      	b.n	80152f8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	68db      	ldr	r3, [r3, #12]
 80150de:	683a      	ldr	r2, [r7, #0]
 80150e0:	429a      	cmp	r2, r3
 80150e2:	d908      	bls.n	80150f6 <f_lseek+0x204>
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	7d1b      	ldrb	r3, [r3, #20]
 80150e8:	f003 0302 	and.w	r3, r3, #2
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d102      	bne.n	80150f6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	68db      	ldr	r3, [r3, #12]
 80150f4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	699b      	ldr	r3, [r3, #24]
 80150fa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80150fc:	2300      	movs	r3, #0
 80150fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015104:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8015106:	683b      	ldr	r3, [r7, #0]
 8015108:	2b00      	cmp	r3, #0
 801510a:	f000 80a7 	beq.w	801525c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801510e:	68bb      	ldr	r3, [r7, #8]
 8015110:	895b      	ldrh	r3, [r3, #10]
 8015112:	025b      	lsls	r3, r3, #9
 8015114:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8015116:	6a3b      	ldr	r3, [r7, #32]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d01b      	beq.n	8015154 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801511c:	683b      	ldr	r3, [r7, #0]
 801511e:	1e5a      	subs	r2, r3, #1
 8015120:	69fb      	ldr	r3, [r7, #28]
 8015122:	fbb2 f2f3 	udiv	r2, r2, r3
 8015126:	6a3b      	ldr	r3, [r7, #32]
 8015128:	1e59      	subs	r1, r3, #1
 801512a:	69fb      	ldr	r3, [r7, #28]
 801512c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8015130:	429a      	cmp	r2, r3
 8015132:	d30f      	bcc.n	8015154 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8015134:	6a3b      	ldr	r3, [r7, #32]
 8015136:	1e5a      	subs	r2, r3, #1
 8015138:	69fb      	ldr	r3, [r7, #28]
 801513a:	425b      	negs	r3, r3
 801513c:	401a      	ands	r2, r3
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	699b      	ldr	r3, [r3, #24]
 8015146:	683a      	ldr	r2, [r7, #0]
 8015148:	1ad3      	subs	r3, r2, r3
 801514a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	69db      	ldr	r3, [r3, #28]
 8015150:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015152:	e022      	b.n	801519a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	689b      	ldr	r3, [r3, #8]
 8015158:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801515a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801515c:	2b00      	cmp	r3, #0
 801515e:	d119      	bne.n	8015194 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	2100      	movs	r1, #0
 8015164:	4618      	mov	r0, r3
 8015166:	f7fd ff7e 	bl	8013066 <create_chain>
 801516a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801516c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801516e:	2b01      	cmp	r3, #1
 8015170:	d104      	bne.n	801517c <f_lseek+0x28a>
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	2202      	movs	r2, #2
 8015176:	755a      	strb	r2, [r3, #21]
 8015178:	2302      	movs	r3, #2
 801517a:	e0bf      	b.n	80152fc <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801517c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801517e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015182:	d104      	bne.n	801518e <f_lseek+0x29c>
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	2201      	movs	r2, #1
 8015188:	755a      	strb	r2, [r3, #21]
 801518a:	2301      	movs	r3, #1
 801518c:	e0b6      	b.n	80152fc <f_lseek+0x40a>
					fp->obj.sclust = clst;
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015192:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015198:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801519a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801519c:	2b00      	cmp	r3, #0
 801519e:	d05d      	beq.n	801525c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80151a0:	e03a      	b.n	8015218 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80151a2:	683a      	ldr	r2, [r7, #0]
 80151a4:	69fb      	ldr	r3, [r7, #28]
 80151a6:	1ad3      	subs	r3, r2, r3
 80151a8:	603b      	str	r3, [r7, #0]
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	699a      	ldr	r2, [r3, #24]
 80151ae:	69fb      	ldr	r3, [r7, #28]
 80151b0:	441a      	add	r2, r3
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	7d1b      	ldrb	r3, [r3, #20]
 80151ba:	f003 0302 	and.w	r3, r3, #2
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d00b      	beq.n	80151da <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7fd ff4d 	bl	8013066 <create_chain>
 80151cc:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80151ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d108      	bne.n	80151e6 <f_lseek+0x2f4>
							ofs = 0; break;
 80151d4:	2300      	movs	r3, #0
 80151d6:	603b      	str	r3, [r7, #0]
 80151d8:	e022      	b.n	8015220 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80151de:	4618      	mov	r0, r3
 80151e0:	f7fd fd4b 	bl	8012c7a <get_fat>
 80151e4:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80151e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80151e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151ec:	d104      	bne.n	80151f8 <f_lseek+0x306>
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	2201      	movs	r2, #1
 80151f2:	755a      	strb	r2, [r3, #21]
 80151f4:	2301      	movs	r3, #1
 80151f6:	e081      	b.n	80152fc <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80151f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80151fa:	2b01      	cmp	r3, #1
 80151fc:	d904      	bls.n	8015208 <f_lseek+0x316>
 80151fe:	68bb      	ldr	r3, [r7, #8]
 8015200:	699b      	ldr	r3, [r3, #24]
 8015202:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015204:	429a      	cmp	r2, r3
 8015206:	d304      	bcc.n	8015212 <f_lseek+0x320>
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	2202      	movs	r2, #2
 801520c:	755a      	strb	r2, [r3, #21]
 801520e:	2302      	movs	r3, #2
 8015210:	e074      	b.n	80152fc <f_lseek+0x40a>
					fp->clust = clst;
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015216:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8015218:	683a      	ldr	r2, [r7, #0]
 801521a:	69fb      	ldr	r3, [r7, #28]
 801521c:	429a      	cmp	r2, r3
 801521e:	d8c0      	bhi.n	80151a2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	699a      	ldr	r2, [r3, #24]
 8015224:	683b      	ldr	r3, [r7, #0]
 8015226:	441a      	add	r2, r3
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801522c:	683b      	ldr	r3, [r7, #0]
 801522e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015232:	2b00      	cmp	r3, #0
 8015234:	d012      	beq.n	801525c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8015236:	68bb      	ldr	r3, [r7, #8]
 8015238:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801523a:	4618      	mov	r0, r3
 801523c:	f7fd fcfe 	bl	8012c3c <clust2sect>
 8015240:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8015242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015244:	2b00      	cmp	r3, #0
 8015246:	d104      	bne.n	8015252 <f_lseek+0x360>
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	2202      	movs	r2, #2
 801524c:	755a      	strb	r2, [r3, #21]
 801524e:	2302      	movs	r3, #2
 8015250:	e054      	b.n	80152fc <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8015252:	683b      	ldr	r3, [r7, #0]
 8015254:	0a5b      	lsrs	r3, r3, #9
 8015256:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015258:	4413      	add	r3, r2
 801525a:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	699a      	ldr	r2, [r3, #24]
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	68db      	ldr	r3, [r3, #12]
 8015264:	429a      	cmp	r2, r3
 8015266:	d90a      	bls.n	801527e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	699a      	ldr	r2, [r3, #24]
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	7d1b      	ldrb	r3, [r3, #20]
 8015274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015278:	b2da      	uxtb	r2, r3
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	699b      	ldr	r3, [r3, #24]
 8015282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015286:	2b00      	cmp	r3, #0
 8015288:	d036      	beq.n	80152f8 <f_lseek+0x406>
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	6a1b      	ldr	r3, [r3, #32]
 801528e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015290:	429a      	cmp	r2, r3
 8015292:	d031      	beq.n	80152f8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	7d1b      	ldrb	r3, [r3, #20]
 8015298:	b25b      	sxtb	r3, r3
 801529a:	2b00      	cmp	r3, #0
 801529c:	da18      	bge.n	80152d0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801529e:	68bb      	ldr	r3, [r7, #8]
 80152a0:	7858      	ldrb	r0, [r3, #1]
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	6a1a      	ldr	r2, [r3, #32]
 80152ac:	2301      	movs	r3, #1
 80152ae:	f7fd f939 	bl	8012524 <disk_write>
 80152b2:	4603      	mov	r3, r0
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d004      	beq.n	80152c2 <f_lseek+0x3d0>
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	2201      	movs	r2, #1
 80152bc:	755a      	strb	r2, [r3, #21]
 80152be:	2301      	movs	r3, #1
 80152c0:	e01c      	b.n	80152fc <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	7d1b      	ldrb	r3, [r3, #20]
 80152c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80152ca:	b2da      	uxtb	r2, r3
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80152d0:	68bb      	ldr	r3, [r7, #8]
 80152d2:	7858      	ldrb	r0, [r3, #1]
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80152da:	2301      	movs	r3, #1
 80152dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80152de:	f7fd f901 	bl	80124e4 <disk_read>
 80152e2:	4603      	mov	r3, r0
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d004      	beq.n	80152f2 <f_lseek+0x400>
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	2201      	movs	r2, #1
 80152ec:	755a      	strb	r2, [r3, #21]
 80152ee:	2301      	movs	r3, #1
 80152f0:	e004      	b.n	80152fc <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80152f6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80152f8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80152fc:	4618      	mov	r0, r3
 80152fe:	3740      	adds	r7, #64	@ 0x40
 8015300:	46bd      	mov	sp, r7
 8015302:	bd80      	pop	{r7, pc}

08015304 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8015304:	b580      	push	{r7, lr}
 8015306:	b092      	sub	sp, #72	@ 0x48
 8015308:	af00      	add	r7, sp, #0
 801530a:	60f8      	str	r0, [r7, #12]
 801530c:	60b9      	str	r1, [r7, #8]
 801530e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8015310:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8015314:	f107 030c 	add.w	r3, r7, #12
 8015318:	2200      	movs	r2, #0
 801531a:	4618      	mov	r0, r3
 801531c:	f7fe ff3a 	bl	8014194 <find_volume>
 8015320:	4603      	mov	r3, r0
 8015322:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8015326:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801532a:	2b00      	cmp	r3, #0
 801532c:	f040 8099 	bne.w	8015462 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8015330:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8015336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015338:	695a      	ldr	r2, [r3, #20]
 801533a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801533c:	699b      	ldr	r3, [r3, #24]
 801533e:	3b02      	subs	r3, #2
 8015340:	429a      	cmp	r2, r3
 8015342:	d804      	bhi.n	801534e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8015344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015346:	695a      	ldr	r2, [r3, #20]
 8015348:	68bb      	ldr	r3, [r7, #8]
 801534a:	601a      	str	r2, [r3, #0]
 801534c:	e089      	b.n	8015462 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801534e:	2300      	movs	r3, #0
 8015350:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8015352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015354:	781b      	ldrb	r3, [r3, #0]
 8015356:	2b01      	cmp	r3, #1
 8015358:	d128      	bne.n	80153ac <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 801535a:	2302      	movs	r3, #2
 801535c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801535e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015360:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8015362:	f107 0314 	add.w	r3, r7, #20
 8015366:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015368:	4618      	mov	r0, r3
 801536a:	f7fd fc86 	bl	8012c7a <get_fat>
 801536e:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8015370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015376:	d103      	bne.n	8015380 <f_getfree+0x7c>
 8015378:	2301      	movs	r3, #1
 801537a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801537e:	e063      	b.n	8015448 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8015380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015382:	2b01      	cmp	r3, #1
 8015384:	d103      	bne.n	801538e <f_getfree+0x8a>
 8015386:	2302      	movs	r3, #2
 8015388:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801538c:	e05c      	b.n	8015448 <f_getfree+0x144>
					if (stat == 0) nfree++;
 801538e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015390:	2b00      	cmp	r3, #0
 8015392:	d102      	bne.n	801539a <f_getfree+0x96>
 8015394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015396:	3301      	adds	r3, #1
 8015398:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 801539a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801539c:	3301      	adds	r3, #1
 801539e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80153a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153a2:	699b      	ldr	r3, [r3, #24]
 80153a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80153a6:	429a      	cmp	r2, r3
 80153a8:	d3db      	bcc.n	8015362 <f_getfree+0x5e>
 80153aa:	e04d      	b.n	8015448 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80153ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153ae:	699b      	ldr	r3, [r3, #24]
 80153b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80153b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153b6:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 80153b8:	2300      	movs	r3, #0
 80153ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80153bc:	2300      	movs	r3, #0
 80153be:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 80153c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d113      	bne.n	80153ee <f_getfree+0xea>
							res = move_window(fs, sect++);
 80153c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80153c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153ca:	1c5a      	adds	r2, r3, #1
 80153cc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80153ce:	4619      	mov	r1, r3
 80153d0:	f7fd fb98 	bl	8012b04 <move_window>
 80153d4:	4603      	mov	r3, r0
 80153d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 80153da:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d131      	bne.n	8015446 <f_getfree+0x142>
							p = fs->win;
 80153e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153e4:	3334      	adds	r3, #52	@ 0x34
 80153e6:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 80153e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80153ec:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80153ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153f0:	781b      	ldrb	r3, [r3, #0]
 80153f2:	2b02      	cmp	r3, #2
 80153f4:	d10f      	bne.n	8015416 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80153f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80153f8:	f7fd f8d2 	bl	80125a0 <ld_word>
 80153fc:	4603      	mov	r3, r0
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d102      	bne.n	8015408 <f_getfree+0x104>
 8015402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015404:	3301      	adds	r3, #1
 8015406:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8015408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801540a:	3302      	adds	r3, #2
 801540c:	633b      	str	r3, [r7, #48]	@ 0x30
 801540e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015410:	3b02      	subs	r3, #2
 8015412:	637b      	str	r3, [r7, #52]	@ 0x34
 8015414:	e010      	b.n	8015438 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8015416:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015418:	f7fd f8db 	bl	80125d2 <ld_dword>
 801541c:	4603      	mov	r3, r0
 801541e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8015422:	2b00      	cmp	r3, #0
 8015424:	d102      	bne.n	801542c <f_getfree+0x128>
 8015426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015428:	3301      	adds	r3, #1
 801542a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 801542c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801542e:	3304      	adds	r3, #4
 8015430:	633b      	str	r3, [r7, #48]	@ 0x30
 8015432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015434:	3b04      	subs	r3, #4
 8015436:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8015438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801543a:	3b01      	subs	r3, #1
 801543c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801543e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015440:	2b00      	cmp	r3, #0
 8015442:	d1bd      	bne.n	80153c0 <f_getfree+0xbc>
 8015444:	e000      	b.n	8015448 <f_getfree+0x144>
							if (res != FR_OK) break;
 8015446:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801544c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801544e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015450:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015452:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8015454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015456:	791a      	ldrb	r2, [r3, #4]
 8015458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801545a:	f042 0201 	orr.w	r2, r2, #1
 801545e:	b2d2      	uxtb	r2, r2
 8015460:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8015462:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8015466:	4618      	mov	r0, r3
 8015468:	3748      	adds	r7, #72	@ 0x48
 801546a:	46bd      	mov	sp, r7
 801546c:	bd80      	pop	{r7, pc}
	...

08015470 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015470:	b480      	push	{r7}
 8015472:	b087      	sub	sp, #28
 8015474:	af00      	add	r7, sp, #0
 8015476:	60f8      	str	r0, [r7, #12]
 8015478:	60b9      	str	r1, [r7, #8]
 801547a:	4613      	mov	r3, r2
 801547c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801547e:	2301      	movs	r3, #1
 8015480:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015482:	2300      	movs	r3, #0
 8015484:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015486:	4b1f      	ldr	r3, [pc, #124]	@ (8015504 <FATFS_LinkDriverEx+0x94>)
 8015488:	7a5b      	ldrb	r3, [r3, #9]
 801548a:	b2db      	uxtb	r3, r3
 801548c:	2b00      	cmp	r3, #0
 801548e:	d131      	bne.n	80154f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015490:	4b1c      	ldr	r3, [pc, #112]	@ (8015504 <FATFS_LinkDriverEx+0x94>)
 8015492:	7a5b      	ldrb	r3, [r3, #9]
 8015494:	b2db      	uxtb	r3, r3
 8015496:	461a      	mov	r2, r3
 8015498:	4b1a      	ldr	r3, [pc, #104]	@ (8015504 <FATFS_LinkDriverEx+0x94>)
 801549a:	2100      	movs	r1, #0
 801549c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801549e:	4b19      	ldr	r3, [pc, #100]	@ (8015504 <FATFS_LinkDriverEx+0x94>)
 80154a0:	7a5b      	ldrb	r3, [r3, #9]
 80154a2:	b2db      	uxtb	r3, r3
 80154a4:	4a17      	ldr	r2, [pc, #92]	@ (8015504 <FATFS_LinkDriverEx+0x94>)
 80154a6:	009b      	lsls	r3, r3, #2
 80154a8:	4413      	add	r3, r2
 80154aa:	68fa      	ldr	r2, [r7, #12]
 80154ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80154ae:	4b15      	ldr	r3, [pc, #84]	@ (8015504 <FATFS_LinkDriverEx+0x94>)
 80154b0:	7a5b      	ldrb	r3, [r3, #9]
 80154b2:	b2db      	uxtb	r3, r3
 80154b4:	461a      	mov	r2, r3
 80154b6:	4b13      	ldr	r3, [pc, #76]	@ (8015504 <FATFS_LinkDriverEx+0x94>)
 80154b8:	4413      	add	r3, r2
 80154ba:	79fa      	ldrb	r2, [r7, #7]
 80154bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80154be:	4b11      	ldr	r3, [pc, #68]	@ (8015504 <FATFS_LinkDriverEx+0x94>)
 80154c0:	7a5b      	ldrb	r3, [r3, #9]
 80154c2:	b2db      	uxtb	r3, r3
 80154c4:	1c5a      	adds	r2, r3, #1
 80154c6:	b2d1      	uxtb	r1, r2
 80154c8:	4a0e      	ldr	r2, [pc, #56]	@ (8015504 <FATFS_LinkDriverEx+0x94>)
 80154ca:	7251      	strb	r1, [r2, #9]
 80154cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80154ce:	7dbb      	ldrb	r3, [r7, #22]
 80154d0:	3330      	adds	r3, #48	@ 0x30
 80154d2:	b2da      	uxtb	r2, r3
 80154d4:	68bb      	ldr	r3, [r7, #8]
 80154d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80154d8:	68bb      	ldr	r3, [r7, #8]
 80154da:	3301      	adds	r3, #1
 80154dc:	223a      	movs	r2, #58	@ 0x3a
 80154de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80154e0:	68bb      	ldr	r3, [r7, #8]
 80154e2:	3302      	adds	r3, #2
 80154e4:	222f      	movs	r2, #47	@ 0x2f
 80154e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80154e8:	68bb      	ldr	r3, [r7, #8]
 80154ea:	3303      	adds	r3, #3
 80154ec:	2200      	movs	r2, #0
 80154ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80154f0:	2300      	movs	r3, #0
 80154f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80154f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80154f6:	4618      	mov	r0, r3
 80154f8:	371c      	adds	r7, #28
 80154fa:	46bd      	mov	sp, r7
 80154fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015500:	4770      	bx	lr
 8015502:	bf00      	nop
 8015504:	20000d80 	.word	0x20000d80

08015508 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b082      	sub	sp, #8
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
 8015510:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015512:	2200      	movs	r2, #0
 8015514:	6839      	ldr	r1, [r7, #0]
 8015516:	6878      	ldr	r0, [r7, #4]
 8015518:	f7ff ffaa 	bl	8015470 <FATFS_LinkDriverEx>
 801551c:	4603      	mov	r3, r0
}
 801551e:	4618      	mov	r0, r3
 8015520:	3708      	adds	r7, #8
 8015522:	46bd      	mov	sp, r7
 8015524:	bd80      	pop	{r7, pc}
	...

08015528 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8015528:	b480      	push	{r7}
 801552a:	b085      	sub	sp, #20
 801552c:	af00      	add	r7, sp, #0
 801552e:	4603      	mov	r3, r0
 8015530:	6039      	str	r1, [r7, #0]
 8015532:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8015534:	88fb      	ldrh	r3, [r7, #6]
 8015536:	2b7f      	cmp	r3, #127	@ 0x7f
 8015538:	d802      	bhi.n	8015540 <ff_convert+0x18>
		c = chr;
 801553a:	88fb      	ldrh	r3, [r7, #6]
 801553c:	81fb      	strh	r3, [r7, #14]
 801553e:	e025      	b.n	801558c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8015540:	683b      	ldr	r3, [r7, #0]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d00b      	beq.n	801555e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8015546:	88fb      	ldrh	r3, [r7, #6]
 8015548:	2bff      	cmp	r3, #255	@ 0xff
 801554a:	d805      	bhi.n	8015558 <ff_convert+0x30>
 801554c:	88fb      	ldrh	r3, [r7, #6]
 801554e:	3b80      	subs	r3, #128	@ 0x80
 8015550:	4a12      	ldr	r2, [pc, #72]	@ (801559c <ff_convert+0x74>)
 8015552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015556:	e000      	b.n	801555a <ff_convert+0x32>
 8015558:	2300      	movs	r3, #0
 801555a:	81fb      	strh	r3, [r7, #14]
 801555c:	e016      	b.n	801558c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801555e:	2300      	movs	r3, #0
 8015560:	81fb      	strh	r3, [r7, #14]
 8015562:	e009      	b.n	8015578 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8015564:	89fb      	ldrh	r3, [r7, #14]
 8015566:	4a0d      	ldr	r2, [pc, #52]	@ (801559c <ff_convert+0x74>)
 8015568:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801556c:	88fa      	ldrh	r2, [r7, #6]
 801556e:	429a      	cmp	r2, r3
 8015570:	d006      	beq.n	8015580 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8015572:	89fb      	ldrh	r3, [r7, #14]
 8015574:	3301      	adds	r3, #1
 8015576:	81fb      	strh	r3, [r7, #14]
 8015578:	89fb      	ldrh	r3, [r7, #14]
 801557a:	2b7f      	cmp	r3, #127	@ 0x7f
 801557c:	d9f2      	bls.n	8015564 <ff_convert+0x3c>
 801557e:	e000      	b.n	8015582 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8015580:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8015582:	89fb      	ldrh	r3, [r7, #14]
 8015584:	3380      	adds	r3, #128	@ 0x80
 8015586:	b29b      	uxth	r3, r3
 8015588:	b2db      	uxtb	r3, r3
 801558a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801558c:	89fb      	ldrh	r3, [r7, #14]
}
 801558e:	4618      	mov	r0, r3
 8015590:	3714      	adds	r7, #20
 8015592:	46bd      	mov	sp, r7
 8015594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015598:	4770      	bx	lr
 801559a:	bf00      	nop
 801559c:	08018314 	.word	0x08018314

080155a0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80155a0:	b480      	push	{r7}
 80155a2:	b087      	sub	sp, #28
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	4603      	mov	r3, r0
 80155a8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80155aa:	88fb      	ldrh	r3, [r7, #6]
 80155ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80155b0:	d201      	bcs.n	80155b6 <ff_wtoupper+0x16>
 80155b2:	4b3e      	ldr	r3, [pc, #248]	@ (80156ac <ff_wtoupper+0x10c>)
 80155b4:	e000      	b.n	80155b8 <ff_wtoupper+0x18>
 80155b6:	4b3e      	ldr	r3, [pc, #248]	@ (80156b0 <ff_wtoupper+0x110>)
 80155b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80155ba:	697b      	ldr	r3, [r7, #20]
 80155bc:	1c9a      	adds	r2, r3, #2
 80155be:	617a      	str	r2, [r7, #20]
 80155c0:	881b      	ldrh	r3, [r3, #0]
 80155c2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80155c4:	8a7b      	ldrh	r3, [r7, #18]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d068      	beq.n	801569c <ff_wtoupper+0xfc>
 80155ca:	88fa      	ldrh	r2, [r7, #6]
 80155cc:	8a7b      	ldrh	r3, [r7, #18]
 80155ce:	429a      	cmp	r2, r3
 80155d0:	d364      	bcc.n	801569c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80155d2:	697b      	ldr	r3, [r7, #20]
 80155d4:	1c9a      	adds	r2, r3, #2
 80155d6:	617a      	str	r2, [r7, #20]
 80155d8:	881b      	ldrh	r3, [r3, #0]
 80155da:	823b      	strh	r3, [r7, #16]
 80155dc:	8a3b      	ldrh	r3, [r7, #16]
 80155de:	0a1b      	lsrs	r3, r3, #8
 80155e0:	81fb      	strh	r3, [r7, #14]
 80155e2:	8a3b      	ldrh	r3, [r7, #16]
 80155e4:	b2db      	uxtb	r3, r3
 80155e6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80155e8:	88fa      	ldrh	r2, [r7, #6]
 80155ea:	8a79      	ldrh	r1, [r7, #18]
 80155ec:	8a3b      	ldrh	r3, [r7, #16]
 80155ee:	440b      	add	r3, r1
 80155f0:	429a      	cmp	r2, r3
 80155f2:	da49      	bge.n	8015688 <ff_wtoupper+0xe8>
			switch (cmd) {
 80155f4:	89fb      	ldrh	r3, [r7, #14]
 80155f6:	2b08      	cmp	r3, #8
 80155f8:	d84f      	bhi.n	801569a <ff_wtoupper+0xfa>
 80155fa:	a201      	add	r2, pc, #4	@ (adr r2, 8015600 <ff_wtoupper+0x60>)
 80155fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015600:	08015625 	.word	0x08015625
 8015604:	08015637 	.word	0x08015637
 8015608:	0801564d 	.word	0x0801564d
 801560c:	08015655 	.word	0x08015655
 8015610:	0801565d 	.word	0x0801565d
 8015614:	08015665 	.word	0x08015665
 8015618:	0801566d 	.word	0x0801566d
 801561c:	08015675 	.word	0x08015675
 8015620:	0801567d 	.word	0x0801567d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8015624:	88fa      	ldrh	r2, [r7, #6]
 8015626:	8a7b      	ldrh	r3, [r7, #18]
 8015628:	1ad3      	subs	r3, r2, r3
 801562a:	005b      	lsls	r3, r3, #1
 801562c:	697a      	ldr	r2, [r7, #20]
 801562e:	4413      	add	r3, r2
 8015630:	881b      	ldrh	r3, [r3, #0]
 8015632:	80fb      	strh	r3, [r7, #6]
 8015634:	e027      	b.n	8015686 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8015636:	88fa      	ldrh	r2, [r7, #6]
 8015638:	8a7b      	ldrh	r3, [r7, #18]
 801563a:	1ad3      	subs	r3, r2, r3
 801563c:	b29b      	uxth	r3, r3
 801563e:	f003 0301 	and.w	r3, r3, #1
 8015642:	b29b      	uxth	r3, r3
 8015644:	88fa      	ldrh	r2, [r7, #6]
 8015646:	1ad3      	subs	r3, r2, r3
 8015648:	80fb      	strh	r3, [r7, #6]
 801564a:	e01c      	b.n	8015686 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801564c:	88fb      	ldrh	r3, [r7, #6]
 801564e:	3b10      	subs	r3, #16
 8015650:	80fb      	strh	r3, [r7, #6]
 8015652:	e018      	b.n	8015686 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8015654:	88fb      	ldrh	r3, [r7, #6]
 8015656:	3b20      	subs	r3, #32
 8015658:	80fb      	strh	r3, [r7, #6]
 801565a:	e014      	b.n	8015686 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801565c:	88fb      	ldrh	r3, [r7, #6]
 801565e:	3b30      	subs	r3, #48	@ 0x30
 8015660:	80fb      	strh	r3, [r7, #6]
 8015662:	e010      	b.n	8015686 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8015664:	88fb      	ldrh	r3, [r7, #6]
 8015666:	3b1a      	subs	r3, #26
 8015668:	80fb      	strh	r3, [r7, #6]
 801566a:	e00c      	b.n	8015686 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801566c:	88fb      	ldrh	r3, [r7, #6]
 801566e:	3308      	adds	r3, #8
 8015670:	80fb      	strh	r3, [r7, #6]
 8015672:	e008      	b.n	8015686 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8015674:	88fb      	ldrh	r3, [r7, #6]
 8015676:	3b50      	subs	r3, #80	@ 0x50
 8015678:	80fb      	strh	r3, [r7, #6]
 801567a:	e004      	b.n	8015686 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801567c:	88fb      	ldrh	r3, [r7, #6]
 801567e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8015682:	80fb      	strh	r3, [r7, #6]
 8015684:	bf00      	nop
			}
			break;
 8015686:	e008      	b.n	801569a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8015688:	89fb      	ldrh	r3, [r7, #14]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d195      	bne.n	80155ba <ff_wtoupper+0x1a>
 801568e:	8a3b      	ldrh	r3, [r7, #16]
 8015690:	005b      	lsls	r3, r3, #1
 8015692:	697a      	ldr	r2, [r7, #20]
 8015694:	4413      	add	r3, r2
 8015696:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8015698:	e78f      	b.n	80155ba <ff_wtoupper+0x1a>
			break;
 801569a:	bf00      	nop
	}

	return chr;
 801569c:	88fb      	ldrh	r3, [r7, #6]
}
 801569e:	4618      	mov	r0, r3
 80156a0:	371c      	adds	r7, #28
 80156a2:	46bd      	mov	sp, r7
 80156a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a8:	4770      	bx	lr
 80156aa:	bf00      	nop
 80156ac:	08018414 	.word	0x08018414
 80156b0:	08018608 	.word	0x08018608

080156b4 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b082      	sub	sp, #8
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 80156bc:	6878      	ldr	r0, [r7, #4]
 80156be:	f000 f811 	bl	80156e4 <malloc>
 80156c2:	4603      	mov	r3, r0
}
 80156c4:	4618      	mov	r0, r3
 80156c6:	3708      	adds	r7, #8
 80156c8:	46bd      	mov	sp, r7
 80156ca:	bd80      	pop	{r7, pc}

080156cc <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b082      	sub	sp, #8
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 80156d4:	6878      	ldr	r0, [r7, #4]
 80156d6:	f000 f80d 	bl	80156f4 <free>
}
 80156da:	bf00      	nop
 80156dc:	3708      	adds	r7, #8
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd80      	pop	{r7, pc}
	...

080156e4 <malloc>:
 80156e4:	4b02      	ldr	r3, [pc, #8]	@ (80156f0 <malloc+0xc>)
 80156e6:	4601      	mov	r1, r0
 80156e8:	6818      	ldr	r0, [r3, #0]
 80156ea:	f000 b82d 	b.w	8015748 <_malloc_r>
 80156ee:	bf00      	nop
 80156f0:	20000234 	.word	0x20000234

080156f4 <free>:
 80156f4:	4b02      	ldr	r3, [pc, #8]	@ (8015700 <free+0xc>)
 80156f6:	4601      	mov	r1, r0
 80156f8:	6818      	ldr	r0, [r3, #0]
 80156fa:	f000 bb7d 	b.w	8015df8 <_free_r>
 80156fe:	bf00      	nop
 8015700:	20000234 	.word	0x20000234

08015704 <sbrk_aligned>:
 8015704:	b570      	push	{r4, r5, r6, lr}
 8015706:	4e0f      	ldr	r6, [pc, #60]	@ (8015744 <sbrk_aligned+0x40>)
 8015708:	460c      	mov	r4, r1
 801570a:	6831      	ldr	r1, [r6, #0]
 801570c:	4605      	mov	r5, r0
 801570e:	b911      	cbnz	r1, 8015716 <sbrk_aligned+0x12>
 8015710:	f000 fb22 	bl	8015d58 <_sbrk_r>
 8015714:	6030      	str	r0, [r6, #0]
 8015716:	4621      	mov	r1, r4
 8015718:	4628      	mov	r0, r5
 801571a:	f000 fb1d 	bl	8015d58 <_sbrk_r>
 801571e:	1c43      	adds	r3, r0, #1
 8015720:	d103      	bne.n	801572a <sbrk_aligned+0x26>
 8015722:	f04f 34ff 	mov.w	r4, #4294967295
 8015726:	4620      	mov	r0, r4
 8015728:	bd70      	pop	{r4, r5, r6, pc}
 801572a:	1cc4      	adds	r4, r0, #3
 801572c:	f024 0403 	bic.w	r4, r4, #3
 8015730:	42a0      	cmp	r0, r4
 8015732:	d0f8      	beq.n	8015726 <sbrk_aligned+0x22>
 8015734:	1a21      	subs	r1, r4, r0
 8015736:	4628      	mov	r0, r5
 8015738:	f000 fb0e 	bl	8015d58 <_sbrk_r>
 801573c:	3001      	adds	r0, #1
 801573e:	d1f2      	bne.n	8015726 <sbrk_aligned+0x22>
 8015740:	e7ef      	b.n	8015722 <sbrk_aligned+0x1e>
 8015742:	bf00      	nop
 8015744:	20000d8c 	.word	0x20000d8c

08015748 <_malloc_r>:
 8015748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801574c:	1ccd      	adds	r5, r1, #3
 801574e:	f025 0503 	bic.w	r5, r5, #3
 8015752:	3508      	adds	r5, #8
 8015754:	2d0c      	cmp	r5, #12
 8015756:	bf38      	it	cc
 8015758:	250c      	movcc	r5, #12
 801575a:	2d00      	cmp	r5, #0
 801575c:	4606      	mov	r6, r0
 801575e:	db01      	blt.n	8015764 <_malloc_r+0x1c>
 8015760:	42a9      	cmp	r1, r5
 8015762:	d904      	bls.n	801576e <_malloc_r+0x26>
 8015764:	230c      	movs	r3, #12
 8015766:	6033      	str	r3, [r6, #0]
 8015768:	2000      	movs	r0, #0
 801576a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801576e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015844 <_malloc_r+0xfc>
 8015772:	f000 f869 	bl	8015848 <__malloc_lock>
 8015776:	f8d8 3000 	ldr.w	r3, [r8]
 801577a:	461c      	mov	r4, r3
 801577c:	bb44      	cbnz	r4, 80157d0 <_malloc_r+0x88>
 801577e:	4629      	mov	r1, r5
 8015780:	4630      	mov	r0, r6
 8015782:	f7ff ffbf 	bl	8015704 <sbrk_aligned>
 8015786:	1c43      	adds	r3, r0, #1
 8015788:	4604      	mov	r4, r0
 801578a:	d158      	bne.n	801583e <_malloc_r+0xf6>
 801578c:	f8d8 4000 	ldr.w	r4, [r8]
 8015790:	4627      	mov	r7, r4
 8015792:	2f00      	cmp	r7, #0
 8015794:	d143      	bne.n	801581e <_malloc_r+0xd6>
 8015796:	2c00      	cmp	r4, #0
 8015798:	d04b      	beq.n	8015832 <_malloc_r+0xea>
 801579a:	6823      	ldr	r3, [r4, #0]
 801579c:	4639      	mov	r1, r7
 801579e:	4630      	mov	r0, r6
 80157a0:	eb04 0903 	add.w	r9, r4, r3
 80157a4:	f000 fad8 	bl	8015d58 <_sbrk_r>
 80157a8:	4581      	cmp	r9, r0
 80157aa:	d142      	bne.n	8015832 <_malloc_r+0xea>
 80157ac:	6821      	ldr	r1, [r4, #0]
 80157ae:	1a6d      	subs	r5, r5, r1
 80157b0:	4629      	mov	r1, r5
 80157b2:	4630      	mov	r0, r6
 80157b4:	f7ff ffa6 	bl	8015704 <sbrk_aligned>
 80157b8:	3001      	adds	r0, #1
 80157ba:	d03a      	beq.n	8015832 <_malloc_r+0xea>
 80157bc:	6823      	ldr	r3, [r4, #0]
 80157be:	442b      	add	r3, r5
 80157c0:	6023      	str	r3, [r4, #0]
 80157c2:	f8d8 3000 	ldr.w	r3, [r8]
 80157c6:	685a      	ldr	r2, [r3, #4]
 80157c8:	bb62      	cbnz	r2, 8015824 <_malloc_r+0xdc>
 80157ca:	f8c8 7000 	str.w	r7, [r8]
 80157ce:	e00f      	b.n	80157f0 <_malloc_r+0xa8>
 80157d0:	6822      	ldr	r2, [r4, #0]
 80157d2:	1b52      	subs	r2, r2, r5
 80157d4:	d420      	bmi.n	8015818 <_malloc_r+0xd0>
 80157d6:	2a0b      	cmp	r2, #11
 80157d8:	d917      	bls.n	801580a <_malloc_r+0xc2>
 80157da:	1961      	adds	r1, r4, r5
 80157dc:	42a3      	cmp	r3, r4
 80157de:	6025      	str	r5, [r4, #0]
 80157e0:	bf18      	it	ne
 80157e2:	6059      	strne	r1, [r3, #4]
 80157e4:	6863      	ldr	r3, [r4, #4]
 80157e6:	bf08      	it	eq
 80157e8:	f8c8 1000 	streq.w	r1, [r8]
 80157ec:	5162      	str	r2, [r4, r5]
 80157ee:	604b      	str	r3, [r1, #4]
 80157f0:	4630      	mov	r0, r6
 80157f2:	f000 f82f 	bl	8015854 <__malloc_unlock>
 80157f6:	f104 000b 	add.w	r0, r4, #11
 80157fa:	1d23      	adds	r3, r4, #4
 80157fc:	f020 0007 	bic.w	r0, r0, #7
 8015800:	1ac2      	subs	r2, r0, r3
 8015802:	bf1c      	itt	ne
 8015804:	1a1b      	subne	r3, r3, r0
 8015806:	50a3      	strne	r3, [r4, r2]
 8015808:	e7af      	b.n	801576a <_malloc_r+0x22>
 801580a:	6862      	ldr	r2, [r4, #4]
 801580c:	42a3      	cmp	r3, r4
 801580e:	bf0c      	ite	eq
 8015810:	f8c8 2000 	streq.w	r2, [r8]
 8015814:	605a      	strne	r2, [r3, #4]
 8015816:	e7eb      	b.n	80157f0 <_malloc_r+0xa8>
 8015818:	4623      	mov	r3, r4
 801581a:	6864      	ldr	r4, [r4, #4]
 801581c:	e7ae      	b.n	801577c <_malloc_r+0x34>
 801581e:	463c      	mov	r4, r7
 8015820:	687f      	ldr	r7, [r7, #4]
 8015822:	e7b6      	b.n	8015792 <_malloc_r+0x4a>
 8015824:	461a      	mov	r2, r3
 8015826:	685b      	ldr	r3, [r3, #4]
 8015828:	42a3      	cmp	r3, r4
 801582a:	d1fb      	bne.n	8015824 <_malloc_r+0xdc>
 801582c:	2300      	movs	r3, #0
 801582e:	6053      	str	r3, [r2, #4]
 8015830:	e7de      	b.n	80157f0 <_malloc_r+0xa8>
 8015832:	230c      	movs	r3, #12
 8015834:	6033      	str	r3, [r6, #0]
 8015836:	4630      	mov	r0, r6
 8015838:	f000 f80c 	bl	8015854 <__malloc_unlock>
 801583c:	e794      	b.n	8015768 <_malloc_r+0x20>
 801583e:	6005      	str	r5, [r0, #0]
 8015840:	e7d6      	b.n	80157f0 <_malloc_r+0xa8>
 8015842:	bf00      	nop
 8015844:	20000d90 	.word	0x20000d90

08015848 <__malloc_lock>:
 8015848:	4801      	ldr	r0, [pc, #4]	@ (8015850 <__malloc_lock+0x8>)
 801584a:	f000 bad2 	b.w	8015df2 <__retarget_lock_acquire_recursive>
 801584e:	bf00      	nop
 8015850:	20000ed4 	.word	0x20000ed4

08015854 <__malloc_unlock>:
 8015854:	4801      	ldr	r0, [pc, #4]	@ (801585c <__malloc_unlock+0x8>)
 8015856:	f000 bacd 	b.w	8015df4 <__retarget_lock_release_recursive>
 801585a:	bf00      	nop
 801585c:	20000ed4 	.word	0x20000ed4

08015860 <std>:
 8015860:	2300      	movs	r3, #0
 8015862:	b510      	push	{r4, lr}
 8015864:	4604      	mov	r4, r0
 8015866:	e9c0 3300 	strd	r3, r3, [r0]
 801586a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801586e:	6083      	str	r3, [r0, #8]
 8015870:	8181      	strh	r1, [r0, #12]
 8015872:	6643      	str	r3, [r0, #100]	@ 0x64
 8015874:	81c2      	strh	r2, [r0, #14]
 8015876:	6183      	str	r3, [r0, #24]
 8015878:	4619      	mov	r1, r3
 801587a:	2208      	movs	r2, #8
 801587c:	305c      	adds	r0, #92	@ 0x5c
 801587e:	f000 fa2f 	bl	8015ce0 <memset>
 8015882:	4b0d      	ldr	r3, [pc, #52]	@ (80158b8 <std+0x58>)
 8015884:	6263      	str	r3, [r4, #36]	@ 0x24
 8015886:	4b0d      	ldr	r3, [pc, #52]	@ (80158bc <std+0x5c>)
 8015888:	62a3      	str	r3, [r4, #40]	@ 0x28
 801588a:	4b0d      	ldr	r3, [pc, #52]	@ (80158c0 <std+0x60>)
 801588c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801588e:	4b0d      	ldr	r3, [pc, #52]	@ (80158c4 <std+0x64>)
 8015890:	6323      	str	r3, [r4, #48]	@ 0x30
 8015892:	4b0d      	ldr	r3, [pc, #52]	@ (80158c8 <std+0x68>)
 8015894:	6224      	str	r4, [r4, #32]
 8015896:	429c      	cmp	r4, r3
 8015898:	d006      	beq.n	80158a8 <std+0x48>
 801589a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801589e:	4294      	cmp	r4, r2
 80158a0:	d002      	beq.n	80158a8 <std+0x48>
 80158a2:	33d0      	adds	r3, #208	@ 0xd0
 80158a4:	429c      	cmp	r4, r3
 80158a6:	d105      	bne.n	80158b4 <std+0x54>
 80158a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80158ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80158b0:	f000 ba9e 	b.w	8015df0 <__retarget_lock_init_recursive>
 80158b4:	bd10      	pop	{r4, pc}
 80158b6:	bf00      	nop
 80158b8:	08015b31 	.word	0x08015b31
 80158bc:	08015b53 	.word	0x08015b53
 80158c0:	08015b8b 	.word	0x08015b8b
 80158c4:	08015baf 	.word	0x08015baf
 80158c8:	20000d94 	.word	0x20000d94

080158cc <stdio_exit_handler>:
 80158cc:	4a02      	ldr	r2, [pc, #8]	@ (80158d8 <stdio_exit_handler+0xc>)
 80158ce:	4903      	ldr	r1, [pc, #12]	@ (80158dc <stdio_exit_handler+0x10>)
 80158d0:	4803      	ldr	r0, [pc, #12]	@ (80158e0 <stdio_exit_handler+0x14>)
 80158d2:	f000 b869 	b.w	80159a8 <_fwalk_sglue>
 80158d6:	bf00      	nop
 80158d8:	20000228 	.word	0x20000228
 80158dc:	080167e1 	.word	0x080167e1
 80158e0:	20000238 	.word	0x20000238

080158e4 <cleanup_stdio>:
 80158e4:	6841      	ldr	r1, [r0, #4]
 80158e6:	4b0c      	ldr	r3, [pc, #48]	@ (8015918 <cleanup_stdio+0x34>)
 80158e8:	4299      	cmp	r1, r3
 80158ea:	b510      	push	{r4, lr}
 80158ec:	4604      	mov	r4, r0
 80158ee:	d001      	beq.n	80158f4 <cleanup_stdio+0x10>
 80158f0:	f000 ff76 	bl	80167e0 <_fflush_r>
 80158f4:	68a1      	ldr	r1, [r4, #8]
 80158f6:	4b09      	ldr	r3, [pc, #36]	@ (801591c <cleanup_stdio+0x38>)
 80158f8:	4299      	cmp	r1, r3
 80158fa:	d002      	beq.n	8015902 <cleanup_stdio+0x1e>
 80158fc:	4620      	mov	r0, r4
 80158fe:	f000 ff6f 	bl	80167e0 <_fflush_r>
 8015902:	68e1      	ldr	r1, [r4, #12]
 8015904:	4b06      	ldr	r3, [pc, #24]	@ (8015920 <cleanup_stdio+0x3c>)
 8015906:	4299      	cmp	r1, r3
 8015908:	d004      	beq.n	8015914 <cleanup_stdio+0x30>
 801590a:	4620      	mov	r0, r4
 801590c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015910:	f000 bf66 	b.w	80167e0 <_fflush_r>
 8015914:	bd10      	pop	{r4, pc}
 8015916:	bf00      	nop
 8015918:	20000d94 	.word	0x20000d94
 801591c:	20000dfc 	.word	0x20000dfc
 8015920:	20000e64 	.word	0x20000e64

08015924 <global_stdio_init.part.0>:
 8015924:	b510      	push	{r4, lr}
 8015926:	4b0b      	ldr	r3, [pc, #44]	@ (8015954 <global_stdio_init.part.0+0x30>)
 8015928:	4c0b      	ldr	r4, [pc, #44]	@ (8015958 <global_stdio_init.part.0+0x34>)
 801592a:	4a0c      	ldr	r2, [pc, #48]	@ (801595c <global_stdio_init.part.0+0x38>)
 801592c:	601a      	str	r2, [r3, #0]
 801592e:	4620      	mov	r0, r4
 8015930:	2200      	movs	r2, #0
 8015932:	2104      	movs	r1, #4
 8015934:	f7ff ff94 	bl	8015860 <std>
 8015938:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801593c:	2201      	movs	r2, #1
 801593e:	2109      	movs	r1, #9
 8015940:	f7ff ff8e 	bl	8015860 <std>
 8015944:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015948:	2202      	movs	r2, #2
 801594a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801594e:	2112      	movs	r1, #18
 8015950:	f7ff bf86 	b.w	8015860 <std>
 8015954:	20000ecc 	.word	0x20000ecc
 8015958:	20000d94 	.word	0x20000d94
 801595c:	080158cd 	.word	0x080158cd

08015960 <__sfp_lock_acquire>:
 8015960:	4801      	ldr	r0, [pc, #4]	@ (8015968 <__sfp_lock_acquire+0x8>)
 8015962:	f000 ba46 	b.w	8015df2 <__retarget_lock_acquire_recursive>
 8015966:	bf00      	nop
 8015968:	20000ed5 	.word	0x20000ed5

0801596c <__sfp_lock_release>:
 801596c:	4801      	ldr	r0, [pc, #4]	@ (8015974 <__sfp_lock_release+0x8>)
 801596e:	f000 ba41 	b.w	8015df4 <__retarget_lock_release_recursive>
 8015972:	bf00      	nop
 8015974:	20000ed5 	.word	0x20000ed5

08015978 <__sinit>:
 8015978:	b510      	push	{r4, lr}
 801597a:	4604      	mov	r4, r0
 801597c:	f7ff fff0 	bl	8015960 <__sfp_lock_acquire>
 8015980:	6a23      	ldr	r3, [r4, #32]
 8015982:	b11b      	cbz	r3, 801598c <__sinit+0x14>
 8015984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015988:	f7ff bff0 	b.w	801596c <__sfp_lock_release>
 801598c:	4b04      	ldr	r3, [pc, #16]	@ (80159a0 <__sinit+0x28>)
 801598e:	6223      	str	r3, [r4, #32]
 8015990:	4b04      	ldr	r3, [pc, #16]	@ (80159a4 <__sinit+0x2c>)
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d1f5      	bne.n	8015984 <__sinit+0xc>
 8015998:	f7ff ffc4 	bl	8015924 <global_stdio_init.part.0>
 801599c:	e7f2      	b.n	8015984 <__sinit+0xc>
 801599e:	bf00      	nop
 80159a0:	080158e5 	.word	0x080158e5
 80159a4:	20000ecc 	.word	0x20000ecc

080159a8 <_fwalk_sglue>:
 80159a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159ac:	4607      	mov	r7, r0
 80159ae:	4688      	mov	r8, r1
 80159b0:	4614      	mov	r4, r2
 80159b2:	2600      	movs	r6, #0
 80159b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80159b8:	f1b9 0901 	subs.w	r9, r9, #1
 80159bc:	d505      	bpl.n	80159ca <_fwalk_sglue+0x22>
 80159be:	6824      	ldr	r4, [r4, #0]
 80159c0:	2c00      	cmp	r4, #0
 80159c2:	d1f7      	bne.n	80159b4 <_fwalk_sglue+0xc>
 80159c4:	4630      	mov	r0, r6
 80159c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159ca:	89ab      	ldrh	r3, [r5, #12]
 80159cc:	2b01      	cmp	r3, #1
 80159ce:	d907      	bls.n	80159e0 <_fwalk_sglue+0x38>
 80159d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80159d4:	3301      	adds	r3, #1
 80159d6:	d003      	beq.n	80159e0 <_fwalk_sglue+0x38>
 80159d8:	4629      	mov	r1, r5
 80159da:	4638      	mov	r0, r7
 80159dc:	47c0      	blx	r8
 80159de:	4306      	orrs	r6, r0
 80159e0:	3568      	adds	r5, #104	@ 0x68
 80159e2:	e7e9      	b.n	80159b8 <_fwalk_sglue+0x10>

080159e4 <iprintf>:
 80159e4:	b40f      	push	{r0, r1, r2, r3}
 80159e6:	b507      	push	{r0, r1, r2, lr}
 80159e8:	4906      	ldr	r1, [pc, #24]	@ (8015a04 <iprintf+0x20>)
 80159ea:	ab04      	add	r3, sp, #16
 80159ec:	6808      	ldr	r0, [r1, #0]
 80159ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80159f2:	6881      	ldr	r1, [r0, #8]
 80159f4:	9301      	str	r3, [sp, #4]
 80159f6:	f000 fbcb 	bl	8016190 <_vfiprintf_r>
 80159fa:	b003      	add	sp, #12
 80159fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a00:	b004      	add	sp, #16
 8015a02:	4770      	bx	lr
 8015a04:	20000234 	.word	0x20000234

08015a08 <_puts_r>:
 8015a08:	6a03      	ldr	r3, [r0, #32]
 8015a0a:	b570      	push	{r4, r5, r6, lr}
 8015a0c:	6884      	ldr	r4, [r0, #8]
 8015a0e:	4605      	mov	r5, r0
 8015a10:	460e      	mov	r6, r1
 8015a12:	b90b      	cbnz	r3, 8015a18 <_puts_r+0x10>
 8015a14:	f7ff ffb0 	bl	8015978 <__sinit>
 8015a18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015a1a:	07db      	lsls	r3, r3, #31
 8015a1c:	d405      	bmi.n	8015a2a <_puts_r+0x22>
 8015a1e:	89a3      	ldrh	r3, [r4, #12]
 8015a20:	0598      	lsls	r0, r3, #22
 8015a22:	d402      	bmi.n	8015a2a <_puts_r+0x22>
 8015a24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015a26:	f000 f9e4 	bl	8015df2 <__retarget_lock_acquire_recursive>
 8015a2a:	89a3      	ldrh	r3, [r4, #12]
 8015a2c:	0719      	lsls	r1, r3, #28
 8015a2e:	d502      	bpl.n	8015a36 <_puts_r+0x2e>
 8015a30:	6923      	ldr	r3, [r4, #16]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d135      	bne.n	8015aa2 <_puts_r+0x9a>
 8015a36:	4621      	mov	r1, r4
 8015a38:	4628      	mov	r0, r5
 8015a3a:	f000 f8fb 	bl	8015c34 <__swsetup_r>
 8015a3e:	b380      	cbz	r0, 8015aa2 <_puts_r+0x9a>
 8015a40:	f04f 35ff 	mov.w	r5, #4294967295
 8015a44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015a46:	07da      	lsls	r2, r3, #31
 8015a48:	d405      	bmi.n	8015a56 <_puts_r+0x4e>
 8015a4a:	89a3      	ldrh	r3, [r4, #12]
 8015a4c:	059b      	lsls	r3, r3, #22
 8015a4e:	d402      	bmi.n	8015a56 <_puts_r+0x4e>
 8015a50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015a52:	f000 f9cf 	bl	8015df4 <__retarget_lock_release_recursive>
 8015a56:	4628      	mov	r0, r5
 8015a58:	bd70      	pop	{r4, r5, r6, pc}
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	da04      	bge.n	8015a68 <_puts_r+0x60>
 8015a5e:	69a2      	ldr	r2, [r4, #24]
 8015a60:	429a      	cmp	r2, r3
 8015a62:	dc17      	bgt.n	8015a94 <_puts_r+0x8c>
 8015a64:	290a      	cmp	r1, #10
 8015a66:	d015      	beq.n	8015a94 <_puts_r+0x8c>
 8015a68:	6823      	ldr	r3, [r4, #0]
 8015a6a:	1c5a      	adds	r2, r3, #1
 8015a6c:	6022      	str	r2, [r4, #0]
 8015a6e:	7019      	strb	r1, [r3, #0]
 8015a70:	68a3      	ldr	r3, [r4, #8]
 8015a72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015a76:	3b01      	subs	r3, #1
 8015a78:	60a3      	str	r3, [r4, #8]
 8015a7a:	2900      	cmp	r1, #0
 8015a7c:	d1ed      	bne.n	8015a5a <_puts_r+0x52>
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	da11      	bge.n	8015aa6 <_puts_r+0x9e>
 8015a82:	4622      	mov	r2, r4
 8015a84:	210a      	movs	r1, #10
 8015a86:	4628      	mov	r0, r5
 8015a88:	f000 f895 	bl	8015bb6 <__swbuf_r>
 8015a8c:	3001      	adds	r0, #1
 8015a8e:	d0d7      	beq.n	8015a40 <_puts_r+0x38>
 8015a90:	250a      	movs	r5, #10
 8015a92:	e7d7      	b.n	8015a44 <_puts_r+0x3c>
 8015a94:	4622      	mov	r2, r4
 8015a96:	4628      	mov	r0, r5
 8015a98:	f000 f88d 	bl	8015bb6 <__swbuf_r>
 8015a9c:	3001      	adds	r0, #1
 8015a9e:	d1e7      	bne.n	8015a70 <_puts_r+0x68>
 8015aa0:	e7ce      	b.n	8015a40 <_puts_r+0x38>
 8015aa2:	3e01      	subs	r6, #1
 8015aa4:	e7e4      	b.n	8015a70 <_puts_r+0x68>
 8015aa6:	6823      	ldr	r3, [r4, #0]
 8015aa8:	1c5a      	adds	r2, r3, #1
 8015aaa:	6022      	str	r2, [r4, #0]
 8015aac:	220a      	movs	r2, #10
 8015aae:	701a      	strb	r2, [r3, #0]
 8015ab0:	e7ee      	b.n	8015a90 <_puts_r+0x88>
	...

08015ab4 <puts>:
 8015ab4:	4b02      	ldr	r3, [pc, #8]	@ (8015ac0 <puts+0xc>)
 8015ab6:	4601      	mov	r1, r0
 8015ab8:	6818      	ldr	r0, [r3, #0]
 8015aba:	f7ff bfa5 	b.w	8015a08 <_puts_r>
 8015abe:	bf00      	nop
 8015ac0:	20000234 	.word	0x20000234

08015ac4 <sniprintf>:
 8015ac4:	b40c      	push	{r2, r3}
 8015ac6:	b530      	push	{r4, r5, lr}
 8015ac8:	4b18      	ldr	r3, [pc, #96]	@ (8015b2c <sniprintf+0x68>)
 8015aca:	1e0c      	subs	r4, r1, #0
 8015acc:	681d      	ldr	r5, [r3, #0]
 8015ace:	b09d      	sub	sp, #116	@ 0x74
 8015ad0:	da08      	bge.n	8015ae4 <sniprintf+0x20>
 8015ad2:	238b      	movs	r3, #139	@ 0x8b
 8015ad4:	602b      	str	r3, [r5, #0]
 8015ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8015ada:	b01d      	add	sp, #116	@ 0x74
 8015adc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ae0:	b002      	add	sp, #8
 8015ae2:	4770      	bx	lr
 8015ae4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015ae8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015aec:	f04f 0300 	mov.w	r3, #0
 8015af0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8015af2:	bf14      	ite	ne
 8015af4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015af8:	4623      	moveq	r3, r4
 8015afa:	9304      	str	r3, [sp, #16]
 8015afc:	9307      	str	r3, [sp, #28]
 8015afe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015b02:	9002      	str	r0, [sp, #8]
 8015b04:	9006      	str	r0, [sp, #24]
 8015b06:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015b0a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015b0c:	ab21      	add	r3, sp, #132	@ 0x84
 8015b0e:	a902      	add	r1, sp, #8
 8015b10:	4628      	mov	r0, r5
 8015b12:	9301      	str	r3, [sp, #4]
 8015b14:	f000 fa16 	bl	8015f44 <_svfiprintf_r>
 8015b18:	1c43      	adds	r3, r0, #1
 8015b1a:	bfbc      	itt	lt
 8015b1c:	238b      	movlt	r3, #139	@ 0x8b
 8015b1e:	602b      	strlt	r3, [r5, #0]
 8015b20:	2c00      	cmp	r4, #0
 8015b22:	d0da      	beq.n	8015ada <sniprintf+0x16>
 8015b24:	9b02      	ldr	r3, [sp, #8]
 8015b26:	2200      	movs	r2, #0
 8015b28:	701a      	strb	r2, [r3, #0]
 8015b2a:	e7d6      	b.n	8015ada <sniprintf+0x16>
 8015b2c:	20000234 	.word	0x20000234

08015b30 <__sread>:
 8015b30:	b510      	push	{r4, lr}
 8015b32:	460c      	mov	r4, r1
 8015b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b38:	f000 f8fc 	bl	8015d34 <_read_r>
 8015b3c:	2800      	cmp	r0, #0
 8015b3e:	bfab      	itete	ge
 8015b40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015b42:	89a3      	ldrhlt	r3, [r4, #12]
 8015b44:	181b      	addge	r3, r3, r0
 8015b46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015b4a:	bfac      	ite	ge
 8015b4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015b4e:	81a3      	strhlt	r3, [r4, #12]
 8015b50:	bd10      	pop	{r4, pc}

08015b52 <__swrite>:
 8015b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b56:	461f      	mov	r7, r3
 8015b58:	898b      	ldrh	r3, [r1, #12]
 8015b5a:	05db      	lsls	r3, r3, #23
 8015b5c:	4605      	mov	r5, r0
 8015b5e:	460c      	mov	r4, r1
 8015b60:	4616      	mov	r6, r2
 8015b62:	d505      	bpl.n	8015b70 <__swrite+0x1e>
 8015b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b68:	2302      	movs	r3, #2
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	f000 f8d0 	bl	8015d10 <_lseek_r>
 8015b70:	89a3      	ldrh	r3, [r4, #12]
 8015b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015b7a:	81a3      	strh	r3, [r4, #12]
 8015b7c:	4632      	mov	r2, r6
 8015b7e:	463b      	mov	r3, r7
 8015b80:	4628      	mov	r0, r5
 8015b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b86:	f000 b8f7 	b.w	8015d78 <_write_r>

08015b8a <__sseek>:
 8015b8a:	b510      	push	{r4, lr}
 8015b8c:	460c      	mov	r4, r1
 8015b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b92:	f000 f8bd 	bl	8015d10 <_lseek_r>
 8015b96:	1c43      	adds	r3, r0, #1
 8015b98:	89a3      	ldrh	r3, [r4, #12]
 8015b9a:	bf15      	itete	ne
 8015b9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015b9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015ba2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015ba6:	81a3      	strheq	r3, [r4, #12]
 8015ba8:	bf18      	it	ne
 8015baa:	81a3      	strhne	r3, [r4, #12]
 8015bac:	bd10      	pop	{r4, pc}

08015bae <__sclose>:
 8015bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bb2:	f000 b89d 	b.w	8015cf0 <_close_r>

08015bb6 <__swbuf_r>:
 8015bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bb8:	460e      	mov	r6, r1
 8015bba:	4614      	mov	r4, r2
 8015bbc:	4605      	mov	r5, r0
 8015bbe:	b118      	cbz	r0, 8015bc8 <__swbuf_r+0x12>
 8015bc0:	6a03      	ldr	r3, [r0, #32]
 8015bc2:	b90b      	cbnz	r3, 8015bc8 <__swbuf_r+0x12>
 8015bc4:	f7ff fed8 	bl	8015978 <__sinit>
 8015bc8:	69a3      	ldr	r3, [r4, #24]
 8015bca:	60a3      	str	r3, [r4, #8]
 8015bcc:	89a3      	ldrh	r3, [r4, #12]
 8015bce:	071a      	lsls	r2, r3, #28
 8015bd0:	d501      	bpl.n	8015bd6 <__swbuf_r+0x20>
 8015bd2:	6923      	ldr	r3, [r4, #16]
 8015bd4:	b943      	cbnz	r3, 8015be8 <__swbuf_r+0x32>
 8015bd6:	4621      	mov	r1, r4
 8015bd8:	4628      	mov	r0, r5
 8015bda:	f000 f82b 	bl	8015c34 <__swsetup_r>
 8015bde:	b118      	cbz	r0, 8015be8 <__swbuf_r+0x32>
 8015be0:	f04f 37ff 	mov.w	r7, #4294967295
 8015be4:	4638      	mov	r0, r7
 8015be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015be8:	6823      	ldr	r3, [r4, #0]
 8015bea:	6922      	ldr	r2, [r4, #16]
 8015bec:	1a98      	subs	r0, r3, r2
 8015bee:	6963      	ldr	r3, [r4, #20]
 8015bf0:	b2f6      	uxtb	r6, r6
 8015bf2:	4283      	cmp	r3, r0
 8015bf4:	4637      	mov	r7, r6
 8015bf6:	dc05      	bgt.n	8015c04 <__swbuf_r+0x4e>
 8015bf8:	4621      	mov	r1, r4
 8015bfa:	4628      	mov	r0, r5
 8015bfc:	f000 fdf0 	bl	80167e0 <_fflush_r>
 8015c00:	2800      	cmp	r0, #0
 8015c02:	d1ed      	bne.n	8015be0 <__swbuf_r+0x2a>
 8015c04:	68a3      	ldr	r3, [r4, #8]
 8015c06:	3b01      	subs	r3, #1
 8015c08:	60a3      	str	r3, [r4, #8]
 8015c0a:	6823      	ldr	r3, [r4, #0]
 8015c0c:	1c5a      	adds	r2, r3, #1
 8015c0e:	6022      	str	r2, [r4, #0]
 8015c10:	701e      	strb	r6, [r3, #0]
 8015c12:	6962      	ldr	r2, [r4, #20]
 8015c14:	1c43      	adds	r3, r0, #1
 8015c16:	429a      	cmp	r2, r3
 8015c18:	d004      	beq.n	8015c24 <__swbuf_r+0x6e>
 8015c1a:	89a3      	ldrh	r3, [r4, #12]
 8015c1c:	07db      	lsls	r3, r3, #31
 8015c1e:	d5e1      	bpl.n	8015be4 <__swbuf_r+0x2e>
 8015c20:	2e0a      	cmp	r6, #10
 8015c22:	d1df      	bne.n	8015be4 <__swbuf_r+0x2e>
 8015c24:	4621      	mov	r1, r4
 8015c26:	4628      	mov	r0, r5
 8015c28:	f000 fdda 	bl	80167e0 <_fflush_r>
 8015c2c:	2800      	cmp	r0, #0
 8015c2e:	d0d9      	beq.n	8015be4 <__swbuf_r+0x2e>
 8015c30:	e7d6      	b.n	8015be0 <__swbuf_r+0x2a>
	...

08015c34 <__swsetup_r>:
 8015c34:	b538      	push	{r3, r4, r5, lr}
 8015c36:	4b29      	ldr	r3, [pc, #164]	@ (8015cdc <__swsetup_r+0xa8>)
 8015c38:	4605      	mov	r5, r0
 8015c3a:	6818      	ldr	r0, [r3, #0]
 8015c3c:	460c      	mov	r4, r1
 8015c3e:	b118      	cbz	r0, 8015c48 <__swsetup_r+0x14>
 8015c40:	6a03      	ldr	r3, [r0, #32]
 8015c42:	b90b      	cbnz	r3, 8015c48 <__swsetup_r+0x14>
 8015c44:	f7ff fe98 	bl	8015978 <__sinit>
 8015c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c4c:	0719      	lsls	r1, r3, #28
 8015c4e:	d422      	bmi.n	8015c96 <__swsetup_r+0x62>
 8015c50:	06da      	lsls	r2, r3, #27
 8015c52:	d407      	bmi.n	8015c64 <__swsetup_r+0x30>
 8015c54:	2209      	movs	r2, #9
 8015c56:	602a      	str	r2, [r5, #0]
 8015c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015c5c:	81a3      	strh	r3, [r4, #12]
 8015c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8015c62:	e033      	b.n	8015ccc <__swsetup_r+0x98>
 8015c64:	0758      	lsls	r0, r3, #29
 8015c66:	d512      	bpl.n	8015c8e <__swsetup_r+0x5a>
 8015c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015c6a:	b141      	cbz	r1, 8015c7e <__swsetup_r+0x4a>
 8015c6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015c70:	4299      	cmp	r1, r3
 8015c72:	d002      	beq.n	8015c7a <__swsetup_r+0x46>
 8015c74:	4628      	mov	r0, r5
 8015c76:	f000 f8bf 	bl	8015df8 <_free_r>
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8015c7e:	89a3      	ldrh	r3, [r4, #12]
 8015c80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015c84:	81a3      	strh	r3, [r4, #12]
 8015c86:	2300      	movs	r3, #0
 8015c88:	6063      	str	r3, [r4, #4]
 8015c8a:	6923      	ldr	r3, [r4, #16]
 8015c8c:	6023      	str	r3, [r4, #0]
 8015c8e:	89a3      	ldrh	r3, [r4, #12]
 8015c90:	f043 0308 	orr.w	r3, r3, #8
 8015c94:	81a3      	strh	r3, [r4, #12]
 8015c96:	6923      	ldr	r3, [r4, #16]
 8015c98:	b94b      	cbnz	r3, 8015cae <__swsetup_r+0x7a>
 8015c9a:	89a3      	ldrh	r3, [r4, #12]
 8015c9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015ca4:	d003      	beq.n	8015cae <__swsetup_r+0x7a>
 8015ca6:	4621      	mov	r1, r4
 8015ca8:	4628      	mov	r0, r5
 8015caa:	f000 fde7 	bl	801687c <__smakebuf_r>
 8015cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015cb2:	f013 0201 	ands.w	r2, r3, #1
 8015cb6:	d00a      	beq.n	8015cce <__swsetup_r+0x9a>
 8015cb8:	2200      	movs	r2, #0
 8015cba:	60a2      	str	r2, [r4, #8]
 8015cbc:	6962      	ldr	r2, [r4, #20]
 8015cbe:	4252      	negs	r2, r2
 8015cc0:	61a2      	str	r2, [r4, #24]
 8015cc2:	6922      	ldr	r2, [r4, #16]
 8015cc4:	b942      	cbnz	r2, 8015cd8 <__swsetup_r+0xa4>
 8015cc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015cca:	d1c5      	bne.n	8015c58 <__swsetup_r+0x24>
 8015ccc:	bd38      	pop	{r3, r4, r5, pc}
 8015cce:	0799      	lsls	r1, r3, #30
 8015cd0:	bf58      	it	pl
 8015cd2:	6962      	ldrpl	r2, [r4, #20]
 8015cd4:	60a2      	str	r2, [r4, #8]
 8015cd6:	e7f4      	b.n	8015cc2 <__swsetup_r+0x8e>
 8015cd8:	2000      	movs	r0, #0
 8015cda:	e7f7      	b.n	8015ccc <__swsetup_r+0x98>
 8015cdc:	20000234 	.word	0x20000234

08015ce0 <memset>:
 8015ce0:	4402      	add	r2, r0
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	4293      	cmp	r3, r2
 8015ce6:	d100      	bne.n	8015cea <memset+0xa>
 8015ce8:	4770      	bx	lr
 8015cea:	f803 1b01 	strb.w	r1, [r3], #1
 8015cee:	e7f9      	b.n	8015ce4 <memset+0x4>

08015cf0 <_close_r>:
 8015cf0:	b538      	push	{r3, r4, r5, lr}
 8015cf2:	4d06      	ldr	r5, [pc, #24]	@ (8015d0c <_close_r+0x1c>)
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	4604      	mov	r4, r0
 8015cf8:	4608      	mov	r0, r1
 8015cfa:	602b      	str	r3, [r5, #0]
 8015cfc:	f7ec fd2d 	bl	800275a <_close>
 8015d00:	1c43      	adds	r3, r0, #1
 8015d02:	d102      	bne.n	8015d0a <_close_r+0x1a>
 8015d04:	682b      	ldr	r3, [r5, #0]
 8015d06:	b103      	cbz	r3, 8015d0a <_close_r+0x1a>
 8015d08:	6023      	str	r3, [r4, #0]
 8015d0a:	bd38      	pop	{r3, r4, r5, pc}
 8015d0c:	20000ed0 	.word	0x20000ed0

08015d10 <_lseek_r>:
 8015d10:	b538      	push	{r3, r4, r5, lr}
 8015d12:	4d07      	ldr	r5, [pc, #28]	@ (8015d30 <_lseek_r+0x20>)
 8015d14:	4604      	mov	r4, r0
 8015d16:	4608      	mov	r0, r1
 8015d18:	4611      	mov	r1, r2
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	602a      	str	r2, [r5, #0]
 8015d1e:	461a      	mov	r2, r3
 8015d20:	f7ec fd42 	bl	80027a8 <_lseek>
 8015d24:	1c43      	adds	r3, r0, #1
 8015d26:	d102      	bne.n	8015d2e <_lseek_r+0x1e>
 8015d28:	682b      	ldr	r3, [r5, #0]
 8015d2a:	b103      	cbz	r3, 8015d2e <_lseek_r+0x1e>
 8015d2c:	6023      	str	r3, [r4, #0]
 8015d2e:	bd38      	pop	{r3, r4, r5, pc}
 8015d30:	20000ed0 	.word	0x20000ed0

08015d34 <_read_r>:
 8015d34:	b538      	push	{r3, r4, r5, lr}
 8015d36:	4d07      	ldr	r5, [pc, #28]	@ (8015d54 <_read_r+0x20>)
 8015d38:	4604      	mov	r4, r0
 8015d3a:	4608      	mov	r0, r1
 8015d3c:	4611      	mov	r1, r2
 8015d3e:	2200      	movs	r2, #0
 8015d40:	602a      	str	r2, [r5, #0]
 8015d42:	461a      	mov	r2, r3
 8015d44:	f7ec fcd0 	bl	80026e8 <_read>
 8015d48:	1c43      	adds	r3, r0, #1
 8015d4a:	d102      	bne.n	8015d52 <_read_r+0x1e>
 8015d4c:	682b      	ldr	r3, [r5, #0]
 8015d4e:	b103      	cbz	r3, 8015d52 <_read_r+0x1e>
 8015d50:	6023      	str	r3, [r4, #0]
 8015d52:	bd38      	pop	{r3, r4, r5, pc}
 8015d54:	20000ed0 	.word	0x20000ed0

08015d58 <_sbrk_r>:
 8015d58:	b538      	push	{r3, r4, r5, lr}
 8015d5a:	4d06      	ldr	r5, [pc, #24]	@ (8015d74 <_sbrk_r+0x1c>)
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	4604      	mov	r4, r0
 8015d60:	4608      	mov	r0, r1
 8015d62:	602b      	str	r3, [r5, #0]
 8015d64:	f7ec fd2e 	bl	80027c4 <_sbrk>
 8015d68:	1c43      	adds	r3, r0, #1
 8015d6a:	d102      	bne.n	8015d72 <_sbrk_r+0x1a>
 8015d6c:	682b      	ldr	r3, [r5, #0]
 8015d6e:	b103      	cbz	r3, 8015d72 <_sbrk_r+0x1a>
 8015d70:	6023      	str	r3, [r4, #0]
 8015d72:	bd38      	pop	{r3, r4, r5, pc}
 8015d74:	20000ed0 	.word	0x20000ed0

08015d78 <_write_r>:
 8015d78:	b538      	push	{r3, r4, r5, lr}
 8015d7a:	4d07      	ldr	r5, [pc, #28]	@ (8015d98 <_write_r+0x20>)
 8015d7c:	4604      	mov	r4, r0
 8015d7e:	4608      	mov	r0, r1
 8015d80:	4611      	mov	r1, r2
 8015d82:	2200      	movs	r2, #0
 8015d84:	602a      	str	r2, [r5, #0]
 8015d86:	461a      	mov	r2, r3
 8015d88:	f7ec fccb 	bl	8002722 <_write>
 8015d8c:	1c43      	adds	r3, r0, #1
 8015d8e:	d102      	bne.n	8015d96 <_write_r+0x1e>
 8015d90:	682b      	ldr	r3, [r5, #0]
 8015d92:	b103      	cbz	r3, 8015d96 <_write_r+0x1e>
 8015d94:	6023      	str	r3, [r4, #0]
 8015d96:	bd38      	pop	{r3, r4, r5, pc}
 8015d98:	20000ed0 	.word	0x20000ed0

08015d9c <__errno>:
 8015d9c:	4b01      	ldr	r3, [pc, #4]	@ (8015da4 <__errno+0x8>)
 8015d9e:	6818      	ldr	r0, [r3, #0]
 8015da0:	4770      	bx	lr
 8015da2:	bf00      	nop
 8015da4:	20000234 	.word	0x20000234

08015da8 <__libc_init_array>:
 8015da8:	b570      	push	{r4, r5, r6, lr}
 8015daa:	4d0d      	ldr	r5, [pc, #52]	@ (8015de0 <__libc_init_array+0x38>)
 8015dac:	4c0d      	ldr	r4, [pc, #52]	@ (8015de4 <__libc_init_array+0x3c>)
 8015dae:	1b64      	subs	r4, r4, r5
 8015db0:	10a4      	asrs	r4, r4, #2
 8015db2:	2600      	movs	r6, #0
 8015db4:	42a6      	cmp	r6, r4
 8015db6:	d109      	bne.n	8015dcc <__libc_init_array+0x24>
 8015db8:	4d0b      	ldr	r5, [pc, #44]	@ (8015de8 <__libc_init_array+0x40>)
 8015dba:	4c0c      	ldr	r4, [pc, #48]	@ (8015dec <__libc_init_array+0x44>)
 8015dbc:	f001 fdb2 	bl	8017924 <_init>
 8015dc0:	1b64      	subs	r4, r4, r5
 8015dc2:	10a4      	asrs	r4, r4, #2
 8015dc4:	2600      	movs	r6, #0
 8015dc6:	42a6      	cmp	r6, r4
 8015dc8:	d105      	bne.n	8015dd6 <__libc_init_array+0x2e>
 8015dca:	bd70      	pop	{r4, r5, r6, pc}
 8015dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8015dd0:	4798      	blx	r3
 8015dd2:	3601      	adds	r6, #1
 8015dd4:	e7ee      	b.n	8015db4 <__libc_init_array+0xc>
 8015dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8015dda:	4798      	blx	r3
 8015ddc:	3601      	adds	r6, #1
 8015dde:	e7f2      	b.n	8015dc6 <__libc_init_array+0x1e>
 8015de0:	08018740 	.word	0x08018740
 8015de4:	08018740 	.word	0x08018740
 8015de8:	08018740 	.word	0x08018740
 8015dec:	08018744 	.word	0x08018744

08015df0 <__retarget_lock_init_recursive>:
 8015df0:	4770      	bx	lr

08015df2 <__retarget_lock_acquire_recursive>:
 8015df2:	4770      	bx	lr

08015df4 <__retarget_lock_release_recursive>:
 8015df4:	4770      	bx	lr
	...

08015df8 <_free_r>:
 8015df8:	b538      	push	{r3, r4, r5, lr}
 8015dfa:	4605      	mov	r5, r0
 8015dfc:	2900      	cmp	r1, #0
 8015dfe:	d041      	beq.n	8015e84 <_free_r+0x8c>
 8015e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e04:	1f0c      	subs	r4, r1, #4
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	bfb8      	it	lt
 8015e0a:	18e4      	addlt	r4, r4, r3
 8015e0c:	f7ff fd1c 	bl	8015848 <__malloc_lock>
 8015e10:	4a1d      	ldr	r2, [pc, #116]	@ (8015e88 <_free_r+0x90>)
 8015e12:	6813      	ldr	r3, [r2, #0]
 8015e14:	b933      	cbnz	r3, 8015e24 <_free_r+0x2c>
 8015e16:	6063      	str	r3, [r4, #4]
 8015e18:	6014      	str	r4, [r2, #0]
 8015e1a:	4628      	mov	r0, r5
 8015e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e20:	f7ff bd18 	b.w	8015854 <__malloc_unlock>
 8015e24:	42a3      	cmp	r3, r4
 8015e26:	d908      	bls.n	8015e3a <_free_r+0x42>
 8015e28:	6820      	ldr	r0, [r4, #0]
 8015e2a:	1821      	adds	r1, r4, r0
 8015e2c:	428b      	cmp	r3, r1
 8015e2e:	bf01      	itttt	eq
 8015e30:	6819      	ldreq	r1, [r3, #0]
 8015e32:	685b      	ldreq	r3, [r3, #4]
 8015e34:	1809      	addeq	r1, r1, r0
 8015e36:	6021      	streq	r1, [r4, #0]
 8015e38:	e7ed      	b.n	8015e16 <_free_r+0x1e>
 8015e3a:	461a      	mov	r2, r3
 8015e3c:	685b      	ldr	r3, [r3, #4]
 8015e3e:	b10b      	cbz	r3, 8015e44 <_free_r+0x4c>
 8015e40:	42a3      	cmp	r3, r4
 8015e42:	d9fa      	bls.n	8015e3a <_free_r+0x42>
 8015e44:	6811      	ldr	r1, [r2, #0]
 8015e46:	1850      	adds	r0, r2, r1
 8015e48:	42a0      	cmp	r0, r4
 8015e4a:	d10b      	bne.n	8015e64 <_free_r+0x6c>
 8015e4c:	6820      	ldr	r0, [r4, #0]
 8015e4e:	4401      	add	r1, r0
 8015e50:	1850      	adds	r0, r2, r1
 8015e52:	4283      	cmp	r3, r0
 8015e54:	6011      	str	r1, [r2, #0]
 8015e56:	d1e0      	bne.n	8015e1a <_free_r+0x22>
 8015e58:	6818      	ldr	r0, [r3, #0]
 8015e5a:	685b      	ldr	r3, [r3, #4]
 8015e5c:	6053      	str	r3, [r2, #4]
 8015e5e:	4408      	add	r0, r1
 8015e60:	6010      	str	r0, [r2, #0]
 8015e62:	e7da      	b.n	8015e1a <_free_r+0x22>
 8015e64:	d902      	bls.n	8015e6c <_free_r+0x74>
 8015e66:	230c      	movs	r3, #12
 8015e68:	602b      	str	r3, [r5, #0]
 8015e6a:	e7d6      	b.n	8015e1a <_free_r+0x22>
 8015e6c:	6820      	ldr	r0, [r4, #0]
 8015e6e:	1821      	adds	r1, r4, r0
 8015e70:	428b      	cmp	r3, r1
 8015e72:	bf04      	itt	eq
 8015e74:	6819      	ldreq	r1, [r3, #0]
 8015e76:	685b      	ldreq	r3, [r3, #4]
 8015e78:	6063      	str	r3, [r4, #4]
 8015e7a:	bf04      	itt	eq
 8015e7c:	1809      	addeq	r1, r1, r0
 8015e7e:	6021      	streq	r1, [r4, #0]
 8015e80:	6054      	str	r4, [r2, #4]
 8015e82:	e7ca      	b.n	8015e1a <_free_r+0x22>
 8015e84:	bd38      	pop	{r3, r4, r5, pc}
 8015e86:	bf00      	nop
 8015e88:	20000d90 	.word	0x20000d90

08015e8c <__ssputs_r>:
 8015e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e90:	688e      	ldr	r6, [r1, #8]
 8015e92:	461f      	mov	r7, r3
 8015e94:	42be      	cmp	r6, r7
 8015e96:	680b      	ldr	r3, [r1, #0]
 8015e98:	4682      	mov	sl, r0
 8015e9a:	460c      	mov	r4, r1
 8015e9c:	4690      	mov	r8, r2
 8015e9e:	d82d      	bhi.n	8015efc <__ssputs_r+0x70>
 8015ea0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015ea4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015ea8:	d026      	beq.n	8015ef8 <__ssputs_r+0x6c>
 8015eaa:	6965      	ldr	r5, [r4, #20]
 8015eac:	6909      	ldr	r1, [r1, #16]
 8015eae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015eb2:	eba3 0901 	sub.w	r9, r3, r1
 8015eb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015eba:	1c7b      	adds	r3, r7, #1
 8015ebc:	444b      	add	r3, r9
 8015ebe:	106d      	asrs	r5, r5, #1
 8015ec0:	429d      	cmp	r5, r3
 8015ec2:	bf38      	it	cc
 8015ec4:	461d      	movcc	r5, r3
 8015ec6:	0553      	lsls	r3, r2, #21
 8015ec8:	d527      	bpl.n	8015f1a <__ssputs_r+0x8e>
 8015eca:	4629      	mov	r1, r5
 8015ecc:	f7ff fc3c 	bl	8015748 <_malloc_r>
 8015ed0:	4606      	mov	r6, r0
 8015ed2:	b360      	cbz	r0, 8015f2e <__ssputs_r+0xa2>
 8015ed4:	6921      	ldr	r1, [r4, #16]
 8015ed6:	464a      	mov	r2, r9
 8015ed8:	f000 fd48 	bl	801696c <memcpy>
 8015edc:	89a3      	ldrh	r3, [r4, #12]
 8015ede:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015ee6:	81a3      	strh	r3, [r4, #12]
 8015ee8:	6126      	str	r6, [r4, #16]
 8015eea:	6165      	str	r5, [r4, #20]
 8015eec:	444e      	add	r6, r9
 8015eee:	eba5 0509 	sub.w	r5, r5, r9
 8015ef2:	6026      	str	r6, [r4, #0]
 8015ef4:	60a5      	str	r5, [r4, #8]
 8015ef6:	463e      	mov	r6, r7
 8015ef8:	42be      	cmp	r6, r7
 8015efa:	d900      	bls.n	8015efe <__ssputs_r+0x72>
 8015efc:	463e      	mov	r6, r7
 8015efe:	6820      	ldr	r0, [r4, #0]
 8015f00:	4632      	mov	r2, r6
 8015f02:	4641      	mov	r1, r8
 8015f04:	f000 fcf6 	bl	80168f4 <memmove>
 8015f08:	68a3      	ldr	r3, [r4, #8]
 8015f0a:	1b9b      	subs	r3, r3, r6
 8015f0c:	60a3      	str	r3, [r4, #8]
 8015f0e:	6823      	ldr	r3, [r4, #0]
 8015f10:	4433      	add	r3, r6
 8015f12:	6023      	str	r3, [r4, #0]
 8015f14:	2000      	movs	r0, #0
 8015f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f1a:	462a      	mov	r2, r5
 8015f1c:	f000 fd34 	bl	8016988 <_realloc_r>
 8015f20:	4606      	mov	r6, r0
 8015f22:	2800      	cmp	r0, #0
 8015f24:	d1e0      	bne.n	8015ee8 <__ssputs_r+0x5c>
 8015f26:	6921      	ldr	r1, [r4, #16]
 8015f28:	4650      	mov	r0, sl
 8015f2a:	f7ff ff65 	bl	8015df8 <_free_r>
 8015f2e:	230c      	movs	r3, #12
 8015f30:	f8ca 3000 	str.w	r3, [sl]
 8015f34:	89a3      	ldrh	r3, [r4, #12]
 8015f36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015f3a:	81a3      	strh	r3, [r4, #12]
 8015f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8015f40:	e7e9      	b.n	8015f16 <__ssputs_r+0x8a>
	...

08015f44 <_svfiprintf_r>:
 8015f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f48:	4698      	mov	r8, r3
 8015f4a:	898b      	ldrh	r3, [r1, #12]
 8015f4c:	061b      	lsls	r3, r3, #24
 8015f4e:	b09d      	sub	sp, #116	@ 0x74
 8015f50:	4607      	mov	r7, r0
 8015f52:	460d      	mov	r5, r1
 8015f54:	4614      	mov	r4, r2
 8015f56:	d510      	bpl.n	8015f7a <_svfiprintf_r+0x36>
 8015f58:	690b      	ldr	r3, [r1, #16]
 8015f5a:	b973      	cbnz	r3, 8015f7a <_svfiprintf_r+0x36>
 8015f5c:	2140      	movs	r1, #64	@ 0x40
 8015f5e:	f7ff fbf3 	bl	8015748 <_malloc_r>
 8015f62:	6028      	str	r0, [r5, #0]
 8015f64:	6128      	str	r0, [r5, #16]
 8015f66:	b930      	cbnz	r0, 8015f76 <_svfiprintf_r+0x32>
 8015f68:	230c      	movs	r3, #12
 8015f6a:	603b      	str	r3, [r7, #0]
 8015f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8015f70:	b01d      	add	sp, #116	@ 0x74
 8015f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f76:	2340      	movs	r3, #64	@ 0x40
 8015f78:	616b      	str	r3, [r5, #20]
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015f7e:	2320      	movs	r3, #32
 8015f80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015f84:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f88:	2330      	movs	r3, #48	@ 0x30
 8015f8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016128 <_svfiprintf_r+0x1e4>
 8015f8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015f92:	f04f 0901 	mov.w	r9, #1
 8015f96:	4623      	mov	r3, r4
 8015f98:	469a      	mov	sl, r3
 8015f9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f9e:	b10a      	cbz	r2, 8015fa4 <_svfiprintf_r+0x60>
 8015fa0:	2a25      	cmp	r2, #37	@ 0x25
 8015fa2:	d1f9      	bne.n	8015f98 <_svfiprintf_r+0x54>
 8015fa4:	ebba 0b04 	subs.w	fp, sl, r4
 8015fa8:	d00b      	beq.n	8015fc2 <_svfiprintf_r+0x7e>
 8015faa:	465b      	mov	r3, fp
 8015fac:	4622      	mov	r2, r4
 8015fae:	4629      	mov	r1, r5
 8015fb0:	4638      	mov	r0, r7
 8015fb2:	f7ff ff6b 	bl	8015e8c <__ssputs_r>
 8015fb6:	3001      	adds	r0, #1
 8015fb8:	f000 80a7 	beq.w	801610a <_svfiprintf_r+0x1c6>
 8015fbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015fbe:	445a      	add	r2, fp
 8015fc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8015fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	f000 809f 	beq.w	801610a <_svfiprintf_r+0x1c6>
 8015fcc:	2300      	movs	r3, #0
 8015fce:	f04f 32ff 	mov.w	r2, #4294967295
 8015fd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015fd6:	f10a 0a01 	add.w	sl, sl, #1
 8015fda:	9304      	str	r3, [sp, #16]
 8015fdc:	9307      	str	r3, [sp, #28]
 8015fde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015fe2:	931a      	str	r3, [sp, #104]	@ 0x68
 8015fe4:	4654      	mov	r4, sl
 8015fe6:	2205      	movs	r2, #5
 8015fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fec:	484e      	ldr	r0, [pc, #312]	@ (8016128 <_svfiprintf_r+0x1e4>)
 8015fee:	f7ea f8ff 	bl	80001f0 <memchr>
 8015ff2:	9a04      	ldr	r2, [sp, #16]
 8015ff4:	b9d8      	cbnz	r0, 801602e <_svfiprintf_r+0xea>
 8015ff6:	06d0      	lsls	r0, r2, #27
 8015ff8:	bf44      	itt	mi
 8015ffa:	2320      	movmi	r3, #32
 8015ffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016000:	0711      	lsls	r1, r2, #28
 8016002:	bf44      	itt	mi
 8016004:	232b      	movmi	r3, #43	@ 0x2b
 8016006:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801600a:	f89a 3000 	ldrb.w	r3, [sl]
 801600e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016010:	d015      	beq.n	801603e <_svfiprintf_r+0xfa>
 8016012:	9a07      	ldr	r2, [sp, #28]
 8016014:	4654      	mov	r4, sl
 8016016:	2000      	movs	r0, #0
 8016018:	f04f 0c0a 	mov.w	ip, #10
 801601c:	4621      	mov	r1, r4
 801601e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016022:	3b30      	subs	r3, #48	@ 0x30
 8016024:	2b09      	cmp	r3, #9
 8016026:	d94b      	bls.n	80160c0 <_svfiprintf_r+0x17c>
 8016028:	b1b0      	cbz	r0, 8016058 <_svfiprintf_r+0x114>
 801602a:	9207      	str	r2, [sp, #28]
 801602c:	e014      	b.n	8016058 <_svfiprintf_r+0x114>
 801602e:	eba0 0308 	sub.w	r3, r0, r8
 8016032:	fa09 f303 	lsl.w	r3, r9, r3
 8016036:	4313      	orrs	r3, r2
 8016038:	9304      	str	r3, [sp, #16]
 801603a:	46a2      	mov	sl, r4
 801603c:	e7d2      	b.n	8015fe4 <_svfiprintf_r+0xa0>
 801603e:	9b03      	ldr	r3, [sp, #12]
 8016040:	1d19      	adds	r1, r3, #4
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	9103      	str	r1, [sp, #12]
 8016046:	2b00      	cmp	r3, #0
 8016048:	bfbb      	ittet	lt
 801604a:	425b      	neglt	r3, r3
 801604c:	f042 0202 	orrlt.w	r2, r2, #2
 8016050:	9307      	strge	r3, [sp, #28]
 8016052:	9307      	strlt	r3, [sp, #28]
 8016054:	bfb8      	it	lt
 8016056:	9204      	strlt	r2, [sp, #16]
 8016058:	7823      	ldrb	r3, [r4, #0]
 801605a:	2b2e      	cmp	r3, #46	@ 0x2e
 801605c:	d10a      	bne.n	8016074 <_svfiprintf_r+0x130>
 801605e:	7863      	ldrb	r3, [r4, #1]
 8016060:	2b2a      	cmp	r3, #42	@ 0x2a
 8016062:	d132      	bne.n	80160ca <_svfiprintf_r+0x186>
 8016064:	9b03      	ldr	r3, [sp, #12]
 8016066:	1d1a      	adds	r2, r3, #4
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	9203      	str	r2, [sp, #12]
 801606c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016070:	3402      	adds	r4, #2
 8016072:	9305      	str	r3, [sp, #20]
 8016074:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016138 <_svfiprintf_r+0x1f4>
 8016078:	7821      	ldrb	r1, [r4, #0]
 801607a:	2203      	movs	r2, #3
 801607c:	4650      	mov	r0, sl
 801607e:	f7ea f8b7 	bl	80001f0 <memchr>
 8016082:	b138      	cbz	r0, 8016094 <_svfiprintf_r+0x150>
 8016084:	9b04      	ldr	r3, [sp, #16]
 8016086:	eba0 000a 	sub.w	r0, r0, sl
 801608a:	2240      	movs	r2, #64	@ 0x40
 801608c:	4082      	lsls	r2, r0
 801608e:	4313      	orrs	r3, r2
 8016090:	3401      	adds	r4, #1
 8016092:	9304      	str	r3, [sp, #16]
 8016094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016098:	4824      	ldr	r0, [pc, #144]	@ (801612c <_svfiprintf_r+0x1e8>)
 801609a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801609e:	2206      	movs	r2, #6
 80160a0:	f7ea f8a6 	bl	80001f0 <memchr>
 80160a4:	2800      	cmp	r0, #0
 80160a6:	d036      	beq.n	8016116 <_svfiprintf_r+0x1d2>
 80160a8:	4b21      	ldr	r3, [pc, #132]	@ (8016130 <_svfiprintf_r+0x1ec>)
 80160aa:	bb1b      	cbnz	r3, 80160f4 <_svfiprintf_r+0x1b0>
 80160ac:	9b03      	ldr	r3, [sp, #12]
 80160ae:	3307      	adds	r3, #7
 80160b0:	f023 0307 	bic.w	r3, r3, #7
 80160b4:	3308      	adds	r3, #8
 80160b6:	9303      	str	r3, [sp, #12]
 80160b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80160ba:	4433      	add	r3, r6
 80160bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80160be:	e76a      	b.n	8015f96 <_svfiprintf_r+0x52>
 80160c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80160c4:	460c      	mov	r4, r1
 80160c6:	2001      	movs	r0, #1
 80160c8:	e7a8      	b.n	801601c <_svfiprintf_r+0xd8>
 80160ca:	2300      	movs	r3, #0
 80160cc:	3401      	adds	r4, #1
 80160ce:	9305      	str	r3, [sp, #20]
 80160d0:	4619      	mov	r1, r3
 80160d2:	f04f 0c0a 	mov.w	ip, #10
 80160d6:	4620      	mov	r0, r4
 80160d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80160dc:	3a30      	subs	r2, #48	@ 0x30
 80160de:	2a09      	cmp	r2, #9
 80160e0:	d903      	bls.n	80160ea <_svfiprintf_r+0x1a6>
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d0c6      	beq.n	8016074 <_svfiprintf_r+0x130>
 80160e6:	9105      	str	r1, [sp, #20]
 80160e8:	e7c4      	b.n	8016074 <_svfiprintf_r+0x130>
 80160ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80160ee:	4604      	mov	r4, r0
 80160f0:	2301      	movs	r3, #1
 80160f2:	e7f0      	b.n	80160d6 <_svfiprintf_r+0x192>
 80160f4:	ab03      	add	r3, sp, #12
 80160f6:	9300      	str	r3, [sp, #0]
 80160f8:	462a      	mov	r2, r5
 80160fa:	4b0e      	ldr	r3, [pc, #56]	@ (8016134 <_svfiprintf_r+0x1f0>)
 80160fc:	a904      	add	r1, sp, #16
 80160fe:	4638      	mov	r0, r7
 8016100:	f3af 8000 	nop.w
 8016104:	1c42      	adds	r2, r0, #1
 8016106:	4606      	mov	r6, r0
 8016108:	d1d6      	bne.n	80160b8 <_svfiprintf_r+0x174>
 801610a:	89ab      	ldrh	r3, [r5, #12]
 801610c:	065b      	lsls	r3, r3, #25
 801610e:	f53f af2d 	bmi.w	8015f6c <_svfiprintf_r+0x28>
 8016112:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016114:	e72c      	b.n	8015f70 <_svfiprintf_r+0x2c>
 8016116:	ab03      	add	r3, sp, #12
 8016118:	9300      	str	r3, [sp, #0]
 801611a:	462a      	mov	r2, r5
 801611c:	4b05      	ldr	r3, [pc, #20]	@ (8016134 <_svfiprintf_r+0x1f0>)
 801611e:	a904      	add	r1, sp, #16
 8016120:	4638      	mov	r0, r7
 8016122:	f000 f9bb 	bl	801649c <_printf_i>
 8016126:	e7ed      	b.n	8016104 <_svfiprintf_r+0x1c0>
 8016128:	080186c4 	.word	0x080186c4
 801612c:	080186ce 	.word	0x080186ce
 8016130:	00000000 	.word	0x00000000
 8016134:	08015e8d 	.word	0x08015e8d
 8016138:	080186ca 	.word	0x080186ca

0801613c <__sfputc_r>:
 801613c:	6893      	ldr	r3, [r2, #8]
 801613e:	3b01      	subs	r3, #1
 8016140:	2b00      	cmp	r3, #0
 8016142:	b410      	push	{r4}
 8016144:	6093      	str	r3, [r2, #8]
 8016146:	da08      	bge.n	801615a <__sfputc_r+0x1e>
 8016148:	6994      	ldr	r4, [r2, #24]
 801614a:	42a3      	cmp	r3, r4
 801614c:	db01      	blt.n	8016152 <__sfputc_r+0x16>
 801614e:	290a      	cmp	r1, #10
 8016150:	d103      	bne.n	801615a <__sfputc_r+0x1e>
 8016152:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016156:	f7ff bd2e 	b.w	8015bb6 <__swbuf_r>
 801615a:	6813      	ldr	r3, [r2, #0]
 801615c:	1c58      	adds	r0, r3, #1
 801615e:	6010      	str	r0, [r2, #0]
 8016160:	7019      	strb	r1, [r3, #0]
 8016162:	4608      	mov	r0, r1
 8016164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016168:	4770      	bx	lr

0801616a <__sfputs_r>:
 801616a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801616c:	4606      	mov	r6, r0
 801616e:	460f      	mov	r7, r1
 8016170:	4614      	mov	r4, r2
 8016172:	18d5      	adds	r5, r2, r3
 8016174:	42ac      	cmp	r4, r5
 8016176:	d101      	bne.n	801617c <__sfputs_r+0x12>
 8016178:	2000      	movs	r0, #0
 801617a:	e007      	b.n	801618c <__sfputs_r+0x22>
 801617c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016180:	463a      	mov	r2, r7
 8016182:	4630      	mov	r0, r6
 8016184:	f7ff ffda 	bl	801613c <__sfputc_r>
 8016188:	1c43      	adds	r3, r0, #1
 801618a:	d1f3      	bne.n	8016174 <__sfputs_r+0xa>
 801618c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016190 <_vfiprintf_r>:
 8016190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016194:	460d      	mov	r5, r1
 8016196:	b09d      	sub	sp, #116	@ 0x74
 8016198:	4614      	mov	r4, r2
 801619a:	4698      	mov	r8, r3
 801619c:	4606      	mov	r6, r0
 801619e:	b118      	cbz	r0, 80161a8 <_vfiprintf_r+0x18>
 80161a0:	6a03      	ldr	r3, [r0, #32]
 80161a2:	b90b      	cbnz	r3, 80161a8 <_vfiprintf_r+0x18>
 80161a4:	f7ff fbe8 	bl	8015978 <__sinit>
 80161a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80161aa:	07d9      	lsls	r1, r3, #31
 80161ac:	d405      	bmi.n	80161ba <_vfiprintf_r+0x2a>
 80161ae:	89ab      	ldrh	r3, [r5, #12]
 80161b0:	059a      	lsls	r2, r3, #22
 80161b2:	d402      	bmi.n	80161ba <_vfiprintf_r+0x2a>
 80161b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80161b6:	f7ff fe1c 	bl	8015df2 <__retarget_lock_acquire_recursive>
 80161ba:	89ab      	ldrh	r3, [r5, #12]
 80161bc:	071b      	lsls	r3, r3, #28
 80161be:	d501      	bpl.n	80161c4 <_vfiprintf_r+0x34>
 80161c0:	692b      	ldr	r3, [r5, #16]
 80161c2:	b99b      	cbnz	r3, 80161ec <_vfiprintf_r+0x5c>
 80161c4:	4629      	mov	r1, r5
 80161c6:	4630      	mov	r0, r6
 80161c8:	f7ff fd34 	bl	8015c34 <__swsetup_r>
 80161cc:	b170      	cbz	r0, 80161ec <_vfiprintf_r+0x5c>
 80161ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80161d0:	07dc      	lsls	r4, r3, #31
 80161d2:	d504      	bpl.n	80161de <_vfiprintf_r+0x4e>
 80161d4:	f04f 30ff 	mov.w	r0, #4294967295
 80161d8:	b01d      	add	sp, #116	@ 0x74
 80161da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161de:	89ab      	ldrh	r3, [r5, #12]
 80161e0:	0598      	lsls	r0, r3, #22
 80161e2:	d4f7      	bmi.n	80161d4 <_vfiprintf_r+0x44>
 80161e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80161e6:	f7ff fe05 	bl	8015df4 <__retarget_lock_release_recursive>
 80161ea:	e7f3      	b.n	80161d4 <_vfiprintf_r+0x44>
 80161ec:	2300      	movs	r3, #0
 80161ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80161f0:	2320      	movs	r3, #32
 80161f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80161f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80161fa:	2330      	movs	r3, #48	@ 0x30
 80161fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80163ac <_vfiprintf_r+0x21c>
 8016200:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016204:	f04f 0901 	mov.w	r9, #1
 8016208:	4623      	mov	r3, r4
 801620a:	469a      	mov	sl, r3
 801620c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016210:	b10a      	cbz	r2, 8016216 <_vfiprintf_r+0x86>
 8016212:	2a25      	cmp	r2, #37	@ 0x25
 8016214:	d1f9      	bne.n	801620a <_vfiprintf_r+0x7a>
 8016216:	ebba 0b04 	subs.w	fp, sl, r4
 801621a:	d00b      	beq.n	8016234 <_vfiprintf_r+0xa4>
 801621c:	465b      	mov	r3, fp
 801621e:	4622      	mov	r2, r4
 8016220:	4629      	mov	r1, r5
 8016222:	4630      	mov	r0, r6
 8016224:	f7ff ffa1 	bl	801616a <__sfputs_r>
 8016228:	3001      	adds	r0, #1
 801622a:	f000 80a7 	beq.w	801637c <_vfiprintf_r+0x1ec>
 801622e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016230:	445a      	add	r2, fp
 8016232:	9209      	str	r2, [sp, #36]	@ 0x24
 8016234:	f89a 3000 	ldrb.w	r3, [sl]
 8016238:	2b00      	cmp	r3, #0
 801623a:	f000 809f 	beq.w	801637c <_vfiprintf_r+0x1ec>
 801623e:	2300      	movs	r3, #0
 8016240:	f04f 32ff 	mov.w	r2, #4294967295
 8016244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016248:	f10a 0a01 	add.w	sl, sl, #1
 801624c:	9304      	str	r3, [sp, #16]
 801624e:	9307      	str	r3, [sp, #28]
 8016250:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016254:	931a      	str	r3, [sp, #104]	@ 0x68
 8016256:	4654      	mov	r4, sl
 8016258:	2205      	movs	r2, #5
 801625a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801625e:	4853      	ldr	r0, [pc, #332]	@ (80163ac <_vfiprintf_r+0x21c>)
 8016260:	f7e9 ffc6 	bl	80001f0 <memchr>
 8016264:	9a04      	ldr	r2, [sp, #16]
 8016266:	b9d8      	cbnz	r0, 80162a0 <_vfiprintf_r+0x110>
 8016268:	06d1      	lsls	r1, r2, #27
 801626a:	bf44      	itt	mi
 801626c:	2320      	movmi	r3, #32
 801626e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016272:	0713      	lsls	r3, r2, #28
 8016274:	bf44      	itt	mi
 8016276:	232b      	movmi	r3, #43	@ 0x2b
 8016278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801627c:	f89a 3000 	ldrb.w	r3, [sl]
 8016280:	2b2a      	cmp	r3, #42	@ 0x2a
 8016282:	d015      	beq.n	80162b0 <_vfiprintf_r+0x120>
 8016284:	9a07      	ldr	r2, [sp, #28]
 8016286:	4654      	mov	r4, sl
 8016288:	2000      	movs	r0, #0
 801628a:	f04f 0c0a 	mov.w	ip, #10
 801628e:	4621      	mov	r1, r4
 8016290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016294:	3b30      	subs	r3, #48	@ 0x30
 8016296:	2b09      	cmp	r3, #9
 8016298:	d94b      	bls.n	8016332 <_vfiprintf_r+0x1a2>
 801629a:	b1b0      	cbz	r0, 80162ca <_vfiprintf_r+0x13a>
 801629c:	9207      	str	r2, [sp, #28]
 801629e:	e014      	b.n	80162ca <_vfiprintf_r+0x13a>
 80162a0:	eba0 0308 	sub.w	r3, r0, r8
 80162a4:	fa09 f303 	lsl.w	r3, r9, r3
 80162a8:	4313      	orrs	r3, r2
 80162aa:	9304      	str	r3, [sp, #16]
 80162ac:	46a2      	mov	sl, r4
 80162ae:	e7d2      	b.n	8016256 <_vfiprintf_r+0xc6>
 80162b0:	9b03      	ldr	r3, [sp, #12]
 80162b2:	1d19      	adds	r1, r3, #4
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	9103      	str	r1, [sp, #12]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	bfbb      	ittet	lt
 80162bc:	425b      	neglt	r3, r3
 80162be:	f042 0202 	orrlt.w	r2, r2, #2
 80162c2:	9307      	strge	r3, [sp, #28]
 80162c4:	9307      	strlt	r3, [sp, #28]
 80162c6:	bfb8      	it	lt
 80162c8:	9204      	strlt	r2, [sp, #16]
 80162ca:	7823      	ldrb	r3, [r4, #0]
 80162cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80162ce:	d10a      	bne.n	80162e6 <_vfiprintf_r+0x156>
 80162d0:	7863      	ldrb	r3, [r4, #1]
 80162d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80162d4:	d132      	bne.n	801633c <_vfiprintf_r+0x1ac>
 80162d6:	9b03      	ldr	r3, [sp, #12]
 80162d8:	1d1a      	adds	r2, r3, #4
 80162da:	681b      	ldr	r3, [r3, #0]
 80162dc:	9203      	str	r2, [sp, #12]
 80162de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80162e2:	3402      	adds	r4, #2
 80162e4:	9305      	str	r3, [sp, #20]
 80162e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80163bc <_vfiprintf_r+0x22c>
 80162ea:	7821      	ldrb	r1, [r4, #0]
 80162ec:	2203      	movs	r2, #3
 80162ee:	4650      	mov	r0, sl
 80162f0:	f7e9 ff7e 	bl	80001f0 <memchr>
 80162f4:	b138      	cbz	r0, 8016306 <_vfiprintf_r+0x176>
 80162f6:	9b04      	ldr	r3, [sp, #16]
 80162f8:	eba0 000a 	sub.w	r0, r0, sl
 80162fc:	2240      	movs	r2, #64	@ 0x40
 80162fe:	4082      	lsls	r2, r0
 8016300:	4313      	orrs	r3, r2
 8016302:	3401      	adds	r4, #1
 8016304:	9304      	str	r3, [sp, #16]
 8016306:	f814 1b01 	ldrb.w	r1, [r4], #1
 801630a:	4829      	ldr	r0, [pc, #164]	@ (80163b0 <_vfiprintf_r+0x220>)
 801630c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016310:	2206      	movs	r2, #6
 8016312:	f7e9 ff6d 	bl	80001f0 <memchr>
 8016316:	2800      	cmp	r0, #0
 8016318:	d03f      	beq.n	801639a <_vfiprintf_r+0x20a>
 801631a:	4b26      	ldr	r3, [pc, #152]	@ (80163b4 <_vfiprintf_r+0x224>)
 801631c:	bb1b      	cbnz	r3, 8016366 <_vfiprintf_r+0x1d6>
 801631e:	9b03      	ldr	r3, [sp, #12]
 8016320:	3307      	adds	r3, #7
 8016322:	f023 0307 	bic.w	r3, r3, #7
 8016326:	3308      	adds	r3, #8
 8016328:	9303      	str	r3, [sp, #12]
 801632a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801632c:	443b      	add	r3, r7
 801632e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016330:	e76a      	b.n	8016208 <_vfiprintf_r+0x78>
 8016332:	fb0c 3202 	mla	r2, ip, r2, r3
 8016336:	460c      	mov	r4, r1
 8016338:	2001      	movs	r0, #1
 801633a:	e7a8      	b.n	801628e <_vfiprintf_r+0xfe>
 801633c:	2300      	movs	r3, #0
 801633e:	3401      	adds	r4, #1
 8016340:	9305      	str	r3, [sp, #20]
 8016342:	4619      	mov	r1, r3
 8016344:	f04f 0c0a 	mov.w	ip, #10
 8016348:	4620      	mov	r0, r4
 801634a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801634e:	3a30      	subs	r2, #48	@ 0x30
 8016350:	2a09      	cmp	r2, #9
 8016352:	d903      	bls.n	801635c <_vfiprintf_r+0x1cc>
 8016354:	2b00      	cmp	r3, #0
 8016356:	d0c6      	beq.n	80162e6 <_vfiprintf_r+0x156>
 8016358:	9105      	str	r1, [sp, #20]
 801635a:	e7c4      	b.n	80162e6 <_vfiprintf_r+0x156>
 801635c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016360:	4604      	mov	r4, r0
 8016362:	2301      	movs	r3, #1
 8016364:	e7f0      	b.n	8016348 <_vfiprintf_r+0x1b8>
 8016366:	ab03      	add	r3, sp, #12
 8016368:	9300      	str	r3, [sp, #0]
 801636a:	462a      	mov	r2, r5
 801636c:	4b12      	ldr	r3, [pc, #72]	@ (80163b8 <_vfiprintf_r+0x228>)
 801636e:	a904      	add	r1, sp, #16
 8016370:	4630      	mov	r0, r6
 8016372:	f3af 8000 	nop.w
 8016376:	4607      	mov	r7, r0
 8016378:	1c78      	adds	r0, r7, #1
 801637a:	d1d6      	bne.n	801632a <_vfiprintf_r+0x19a>
 801637c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801637e:	07d9      	lsls	r1, r3, #31
 8016380:	d405      	bmi.n	801638e <_vfiprintf_r+0x1fe>
 8016382:	89ab      	ldrh	r3, [r5, #12]
 8016384:	059a      	lsls	r2, r3, #22
 8016386:	d402      	bmi.n	801638e <_vfiprintf_r+0x1fe>
 8016388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801638a:	f7ff fd33 	bl	8015df4 <__retarget_lock_release_recursive>
 801638e:	89ab      	ldrh	r3, [r5, #12]
 8016390:	065b      	lsls	r3, r3, #25
 8016392:	f53f af1f 	bmi.w	80161d4 <_vfiprintf_r+0x44>
 8016396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016398:	e71e      	b.n	80161d8 <_vfiprintf_r+0x48>
 801639a:	ab03      	add	r3, sp, #12
 801639c:	9300      	str	r3, [sp, #0]
 801639e:	462a      	mov	r2, r5
 80163a0:	4b05      	ldr	r3, [pc, #20]	@ (80163b8 <_vfiprintf_r+0x228>)
 80163a2:	a904      	add	r1, sp, #16
 80163a4:	4630      	mov	r0, r6
 80163a6:	f000 f879 	bl	801649c <_printf_i>
 80163aa:	e7e4      	b.n	8016376 <_vfiprintf_r+0x1e6>
 80163ac:	080186c4 	.word	0x080186c4
 80163b0:	080186ce 	.word	0x080186ce
 80163b4:	00000000 	.word	0x00000000
 80163b8:	0801616b 	.word	0x0801616b
 80163bc:	080186ca 	.word	0x080186ca

080163c0 <_printf_common>:
 80163c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163c4:	4616      	mov	r6, r2
 80163c6:	4698      	mov	r8, r3
 80163c8:	688a      	ldr	r2, [r1, #8]
 80163ca:	690b      	ldr	r3, [r1, #16]
 80163cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80163d0:	4293      	cmp	r3, r2
 80163d2:	bfb8      	it	lt
 80163d4:	4613      	movlt	r3, r2
 80163d6:	6033      	str	r3, [r6, #0]
 80163d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80163dc:	4607      	mov	r7, r0
 80163de:	460c      	mov	r4, r1
 80163e0:	b10a      	cbz	r2, 80163e6 <_printf_common+0x26>
 80163e2:	3301      	adds	r3, #1
 80163e4:	6033      	str	r3, [r6, #0]
 80163e6:	6823      	ldr	r3, [r4, #0]
 80163e8:	0699      	lsls	r1, r3, #26
 80163ea:	bf42      	ittt	mi
 80163ec:	6833      	ldrmi	r3, [r6, #0]
 80163ee:	3302      	addmi	r3, #2
 80163f0:	6033      	strmi	r3, [r6, #0]
 80163f2:	6825      	ldr	r5, [r4, #0]
 80163f4:	f015 0506 	ands.w	r5, r5, #6
 80163f8:	d106      	bne.n	8016408 <_printf_common+0x48>
 80163fa:	f104 0a19 	add.w	sl, r4, #25
 80163fe:	68e3      	ldr	r3, [r4, #12]
 8016400:	6832      	ldr	r2, [r6, #0]
 8016402:	1a9b      	subs	r3, r3, r2
 8016404:	42ab      	cmp	r3, r5
 8016406:	dc26      	bgt.n	8016456 <_printf_common+0x96>
 8016408:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801640c:	6822      	ldr	r2, [r4, #0]
 801640e:	3b00      	subs	r3, #0
 8016410:	bf18      	it	ne
 8016412:	2301      	movne	r3, #1
 8016414:	0692      	lsls	r2, r2, #26
 8016416:	d42b      	bmi.n	8016470 <_printf_common+0xb0>
 8016418:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801641c:	4641      	mov	r1, r8
 801641e:	4638      	mov	r0, r7
 8016420:	47c8      	blx	r9
 8016422:	3001      	adds	r0, #1
 8016424:	d01e      	beq.n	8016464 <_printf_common+0xa4>
 8016426:	6823      	ldr	r3, [r4, #0]
 8016428:	6922      	ldr	r2, [r4, #16]
 801642a:	f003 0306 	and.w	r3, r3, #6
 801642e:	2b04      	cmp	r3, #4
 8016430:	bf02      	ittt	eq
 8016432:	68e5      	ldreq	r5, [r4, #12]
 8016434:	6833      	ldreq	r3, [r6, #0]
 8016436:	1aed      	subeq	r5, r5, r3
 8016438:	68a3      	ldr	r3, [r4, #8]
 801643a:	bf0c      	ite	eq
 801643c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016440:	2500      	movne	r5, #0
 8016442:	4293      	cmp	r3, r2
 8016444:	bfc4      	itt	gt
 8016446:	1a9b      	subgt	r3, r3, r2
 8016448:	18ed      	addgt	r5, r5, r3
 801644a:	2600      	movs	r6, #0
 801644c:	341a      	adds	r4, #26
 801644e:	42b5      	cmp	r5, r6
 8016450:	d11a      	bne.n	8016488 <_printf_common+0xc8>
 8016452:	2000      	movs	r0, #0
 8016454:	e008      	b.n	8016468 <_printf_common+0xa8>
 8016456:	2301      	movs	r3, #1
 8016458:	4652      	mov	r2, sl
 801645a:	4641      	mov	r1, r8
 801645c:	4638      	mov	r0, r7
 801645e:	47c8      	blx	r9
 8016460:	3001      	adds	r0, #1
 8016462:	d103      	bne.n	801646c <_printf_common+0xac>
 8016464:	f04f 30ff 	mov.w	r0, #4294967295
 8016468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801646c:	3501      	adds	r5, #1
 801646e:	e7c6      	b.n	80163fe <_printf_common+0x3e>
 8016470:	18e1      	adds	r1, r4, r3
 8016472:	1c5a      	adds	r2, r3, #1
 8016474:	2030      	movs	r0, #48	@ 0x30
 8016476:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801647a:	4422      	add	r2, r4
 801647c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016480:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016484:	3302      	adds	r3, #2
 8016486:	e7c7      	b.n	8016418 <_printf_common+0x58>
 8016488:	2301      	movs	r3, #1
 801648a:	4622      	mov	r2, r4
 801648c:	4641      	mov	r1, r8
 801648e:	4638      	mov	r0, r7
 8016490:	47c8      	blx	r9
 8016492:	3001      	adds	r0, #1
 8016494:	d0e6      	beq.n	8016464 <_printf_common+0xa4>
 8016496:	3601      	adds	r6, #1
 8016498:	e7d9      	b.n	801644e <_printf_common+0x8e>
	...

0801649c <_printf_i>:
 801649c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80164a0:	7e0f      	ldrb	r7, [r1, #24]
 80164a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80164a4:	2f78      	cmp	r7, #120	@ 0x78
 80164a6:	4691      	mov	r9, r2
 80164a8:	4680      	mov	r8, r0
 80164aa:	460c      	mov	r4, r1
 80164ac:	469a      	mov	sl, r3
 80164ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80164b2:	d807      	bhi.n	80164c4 <_printf_i+0x28>
 80164b4:	2f62      	cmp	r7, #98	@ 0x62
 80164b6:	d80a      	bhi.n	80164ce <_printf_i+0x32>
 80164b8:	2f00      	cmp	r7, #0
 80164ba:	f000 80d1 	beq.w	8016660 <_printf_i+0x1c4>
 80164be:	2f58      	cmp	r7, #88	@ 0x58
 80164c0:	f000 80b8 	beq.w	8016634 <_printf_i+0x198>
 80164c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80164c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80164cc:	e03a      	b.n	8016544 <_printf_i+0xa8>
 80164ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80164d2:	2b15      	cmp	r3, #21
 80164d4:	d8f6      	bhi.n	80164c4 <_printf_i+0x28>
 80164d6:	a101      	add	r1, pc, #4	@ (adr r1, 80164dc <_printf_i+0x40>)
 80164d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80164dc:	08016535 	.word	0x08016535
 80164e0:	08016549 	.word	0x08016549
 80164e4:	080164c5 	.word	0x080164c5
 80164e8:	080164c5 	.word	0x080164c5
 80164ec:	080164c5 	.word	0x080164c5
 80164f0:	080164c5 	.word	0x080164c5
 80164f4:	08016549 	.word	0x08016549
 80164f8:	080164c5 	.word	0x080164c5
 80164fc:	080164c5 	.word	0x080164c5
 8016500:	080164c5 	.word	0x080164c5
 8016504:	080164c5 	.word	0x080164c5
 8016508:	08016647 	.word	0x08016647
 801650c:	08016573 	.word	0x08016573
 8016510:	08016601 	.word	0x08016601
 8016514:	080164c5 	.word	0x080164c5
 8016518:	080164c5 	.word	0x080164c5
 801651c:	08016669 	.word	0x08016669
 8016520:	080164c5 	.word	0x080164c5
 8016524:	08016573 	.word	0x08016573
 8016528:	080164c5 	.word	0x080164c5
 801652c:	080164c5 	.word	0x080164c5
 8016530:	08016609 	.word	0x08016609
 8016534:	6833      	ldr	r3, [r6, #0]
 8016536:	1d1a      	adds	r2, r3, #4
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	6032      	str	r2, [r6, #0]
 801653c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016540:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016544:	2301      	movs	r3, #1
 8016546:	e09c      	b.n	8016682 <_printf_i+0x1e6>
 8016548:	6833      	ldr	r3, [r6, #0]
 801654a:	6820      	ldr	r0, [r4, #0]
 801654c:	1d19      	adds	r1, r3, #4
 801654e:	6031      	str	r1, [r6, #0]
 8016550:	0606      	lsls	r6, r0, #24
 8016552:	d501      	bpl.n	8016558 <_printf_i+0xbc>
 8016554:	681d      	ldr	r5, [r3, #0]
 8016556:	e003      	b.n	8016560 <_printf_i+0xc4>
 8016558:	0645      	lsls	r5, r0, #25
 801655a:	d5fb      	bpl.n	8016554 <_printf_i+0xb8>
 801655c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016560:	2d00      	cmp	r5, #0
 8016562:	da03      	bge.n	801656c <_printf_i+0xd0>
 8016564:	232d      	movs	r3, #45	@ 0x2d
 8016566:	426d      	negs	r5, r5
 8016568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801656c:	4858      	ldr	r0, [pc, #352]	@ (80166d0 <_printf_i+0x234>)
 801656e:	230a      	movs	r3, #10
 8016570:	e011      	b.n	8016596 <_printf_i+0xfa>
 8016572:	6821      	ldr	r1, [r4, #0]
 8016574:	6833      	ldr	r3, [r6, #0]
 8016576:	0608      	lsls	r0, r1, #24
 8016578:	f853 5b04 	ldr.w	r5, [r3], #4
 801657c:	d402      	bmi.n	8016584 <_printf_i+0xe8>
 801657e:	0649      	lsls	r1, r1, #25
 8016580:	bf48      	it	mi
 8016582:	b2ad      	uxthmi	r5, r5
 8016584:	2f6f      	cmp	r7, #111	@ 0x6f
 8016586:	4852      	ldr	r0, [pc, #328]	@ (80166d0 <_printf_i+0x234>)
 8016588:	6033      	str	r3, [r6, #0]
 801658a:	bf14      	ite	ne
 801658c:	230a      	movne	r3, #10
 801658e:	2308      	moveq	r3, #8
 8016590:	2100      	movs	r1, #0
 8016592:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016596:	6866      	ldr	r6, [r4, #4]
 8016598:	60a6      	str	r6, [r4, #8]
 801659a:	2e00      	cmp	r6, #0
 801659c:	db05      	blt.n	80165aa <_printf_i+0x10e>
 801659e:	6821      	ldr	r1, [r4, #0]
 80165a0:	432e      	orrs	r6, r5
 80165a2:	f021 0104 	bic.w	r1, r1, #4
 80165a6:	6021      	str	r1, [r4, #0]
 80165a8:	d04b      	beq.n	8016642 <_printf_i+0x1a6>
 80165aa:	4616      	mov	r6, r2
 80165ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80165b0:	fb03 5711 	mls	r7, r3, r1, r5
 80165b4:	5dc7      	ldrb	r7, [r0, r7]
 80165b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80165ba:	462f      	mov	r7, r5
 80165bc:	42bb      	cmp	r3, r7
 80165be:	460d      	mov	r5, r1
 80165c0:	d9f4      	bls.n	80165ac <_printf_i+0x110>
 80165c2:	2b08      	cmp	r3, #8
 80165c4:	d10b      	bne.n	80165de <_printf_i+0x142>
 80165c6:	6823      	ldr	r3, [r4, #0]
 80165c8:	07df      	lsls	r7, r3, #31
 80165ca:	d508      	bpl.n	80165de <_printf_i+0x142>
 80165cc:	6923      	ldr	r3, [r4, #16]
 80165ce:	6861      	ldr	r1, [r4, #4]
 80165d0:	4299      	cmp	r1, r3
 80165d2:	bfde      	ittt	le
 80165d4:	2330      	movle	r3, #48	@ 0x30
 80165d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80165da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80165de:	1b92      	subs	r2, r2, r6
 80165e0:	6122      	str	r2, [r4, #16]
 80165e2:	f8cd a000 	str.w	sl, [sp]
 80165e6:	464b      	mov	r3, r9
 80165e8:	aa03      	add	r2, sp, #12
 80165ea:	4621      	mov	r1, r4
 80165ec:	4640      	mov	r0, r8
 80165ee:	f7ff fee7 	bl	80163c0 <_printf_common>
 80165f2:	3001      	adds	r0, #1
 80165f4:	d14a      	bne.n	801668c <_printf_i+0x1f0>
 80165f6:	f04f 30ff 	mov.w	r0, #4294967295
 80165fa:	b004      	add	sp, #16
 80165fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016600:	6823      	ldr	r3, [r4, #0]
 8016602:	f043 0320 	orr.w	r3, r3, #32
 8016606:	6023      	str	r3, [r4, #0]
 8016608:	4832      	ldr	r0, [pc, #200]	@ (80166d4 <_printf_i+0x238>)
 801660a:	2778      	movs	r7, #120	@ 0x78
 801660c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016610:	6823      	ldr	r3, [r4, #0]
 8016612:	6831      	ldr	r1, [r6, #0]
 8016614:	061f      	lsls	r7, r3, #24
 8016616:	f851 5b04 	ldr.w	r5, [r1], #4
 801661a:	d402      	bmi.n	8016622 <_printf_i+0x186>
 801661c:	065f      	lsls	r7, r3, #25
 801661e:	bf48      	it	mi
 8016620:	b2ad      	uxthmi	r5, r5
 8016622:	6031      	str	r1, [r6, #0]
 8016624:	07d9      	lsls	r1, r3, #31
 8016626:	bf44      	itt	mi
 8016628:	f043 0320 	orrmi.w	r3, r3, #32
 801662c:	6023      	strmi	r3, [r4, #0]
 801662e:	b11d      	cbz	r5, 8016638 <_printf_i+0x19c>
 8016630:	2310      	movs	r3, #16
 8016632:	e7ad      	b.n	8016590 <_printf_i+0xf4>
 8016634:	4826      	ldr	r0, [pc, #152]	@ (80166d0 <_printf_i+0x234>)
 8016636:	e7e9      	b.n	801660c <_printf_i+0x170>
 8016638:	6823      	ldr	r3, [r4, #0]
 801663a:	f023 0320 	bic.w	r3, r3, #32
 801663e:	6023      	str	r3, [r4, #0]
 8016640:	e7f6      	b.n	8016630 <_printf_i+0x194>
 8016642:	4616      	mov	r6, r2
 8016644:	e7bd      	b.n	80165c2 <_printf_i+0x126>
 8016646:	6833      	ldr	r3, [r6, #0]
 8016648:	6825      	ldr	r5, [r4, #0]
 801664a:	6961      	ldr	r1, [r4, #20]
 801664c:	1d18      	adds	r0, r3, #4
 801664e:	6030      	str	r0, [r6, #0]
 8016650:	062e      	lsls	r6, r5, #24
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	d501      	bpl.n	801665a <_printf_i+0x1be>
 8016656:	6019      	str	r1, [r3, #0]
 8016658:	e002      	b.n	8016660 <_printf_i+0x1c4>
 801665a:	0668      	lsls	r0, r5, #25
 801665c:	d5fb      	bpl.n	8016656 <_printf_i+0x1ba>
 801665e:	8019      	strh	r1, [r3, #0]
 8016660:	2300      	movs	r3, #0
 8016662:	6123      	str	r3, [r4, #16]
 8016664:	4616      	mov	r6, r2
 8016666:	e7bc      	b.n	80165e2 <_printf_i+0x146>
 8016668:	6833      	ldr	r3, [r6, #0]
 801666a:	1d1a      	adds	r2, r3, #4
 801666c:	6032      	str	r2, [r6, #0]
 801666e:	681e      	ldr	r6, [r3, #0]
 8016670:	6862      	ldr	r2, [r4, #4]
 8016672:	2100      	movs	r1, #0
 8016674:	4630      	mov	r0, r6
 8016676:	f7e9 fdbb 	bl	80001f0 <memchr>
 801667a:	b108      	cbz	r0, 8016680 <_printf_i+0x1e4>
 801667c:	1b80      	subs	r0, r0, r6
 801667e:	6060      	str	r0, [r4, #4]
 8016680:	6863      	ldr	r3, [r4, #4]
 8016682:	6123      	str	r3, [r4, #16]
 8016684:	2300      	movs	r3, #0
 8016686:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801668a:	e7aa      	b.n	80165e2 <_printf_i+0x146>
 801668c:	6923      	ldr	r3, [r4, #16]
 801668e:	4632      	mov	r2, r6
 8016690:	4649      	mov	r1, r9
 8016692:	4640      	mov	r0, r8
 8016694:	47d0      	blx	sl
 8016696:	3001      	adds	r0, #1
 8016698:	d0ad      	beq.n	80165f6 <_printf_i+0x15a>
 801669a:	6823      	ldr	r3, [r4, #0]
 801669c:	079b      	lsls	r3, r3, #30
 801669e:	d413      	bmi.n	80166c8 <_printf_i+0x22c>
 80166a0:	68e0      	ldr	r0, [r4, #12]
 80166a2:	9b03      	ldr	r3, [sp, #12]
 80166a4:	4298      	cmp	r0, r3
 80166a6:	bfb8      	it	lt
 80166a8:	4618      	movlt	r0, r3
 80166aa:	e7a6      	b.n	80165fa <_printf_i+0x15e>
 80166ac:	2301      	movs	r3, #1
 80166ae:	4632      	mov	r2, r6
 80166b0:	4649      	mov	r1, r9
 80166b2:	4640      	mov	r0, r8
 80166b4:	47d0      	blx	sl
 80166b6:	3001      	adds	r0, #1
 80166b8:	d09d      	beq.n	80165f6 <_printf_i+0x15a>
 80166ba:	3501      	adds	r5, #1
 80166bc:	68e3      	ldr	r3, [r4, #12]
 80166be:	9903      	ldr	r1, [sp, #12]
 80166c0:	1a5b      	subs	r3, r3, r1
 80166c2:	42ab      	cmp	r3, r5
 80166c4:	dcf2      	bgt.n	80166ac <_printf_i+0x210>
 80166c6:	e7eb      	b.n	80166a0 <_printf_i+0x204>
 80166c8:	2500      	movs	r5, #0
 80166ca:	f104 0619 	add.w	r6, r4, #25
 80166ce:	e7f5      	b.n	80166bc <_printf_i+0x220>
 80166d0:	080186d5 	.word	0x080186d5
 80166d4:	080186e6 	.word	0x080186e6

080166d8 <__sflush_r>:
 80166d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80166dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166e0:	0716      	lsls	r6, r2, #28
 80166e2:	4605      	mov	r5, r0
 80166e4:	460c      	mov	r4, r1
 80166e6:	d454      	bmi.n	8016792 <__sflush_r+0xba>
 80166e8:	684b      	ldr	r3, [r1, #4]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	dc02      	bgt.n	80166f4 <__sflush_r+0x1c>
 80166ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	dd48      	ble.n	8016786 <__sflush_r+0xae>
 80166f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80166f6:	2e00      	cmp	r6, #0
 80166f8:	d045      	beq.n	8016786 <__sflush_r+0xae>
 80166fa:	2300      	movs	r3, #0
 80166fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016700:	682f      	ldr	r7, [r5, #0]
 8016702:	6a21      	ldr	r1, [r4, #32]
 8016704:	602b      	str	r3, [r5, #0]
 8016706:	d030      	beq.n	801676a <__sflush_r+0x92>
 8016708:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801670a:	89a3      	ldrh	r3, [r4, #12]
 801670c:	0759      	lsls	r1, r3, #29
 801670e:	d505      	bpl.n	801671c <__sflush_r+0x44>
 8016710:	6863      	ldr	r3, [r4, #4]
 8016712:	1ad2      	subs	r2, r2, r3
 8016714:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016716:	b10b      	cbz	r3, 801671c <__sflush_r+0x44>
 8016718:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801671a:	1ad2      	subs	r2, r2, r3
 801671c:	2300      	movs	r3, #0
 801671e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016720:	6a21      	ldr	r1, [r4, #32]
 8016722:	4628      	mov	r0, r5
 8016724:	47b0      	blx	r6
 8016726:	1c43      	adds	r3, r0, #1
 8016728:	89a3      	ldrh	r3, [r4, #12]
 801672a:	d106      	bne.n	801673a <__sflush_r+0x62>
 801672c:	6829      	ldr	r1, [r5, #0]
 801672e:	291d      	cmp	r1, #29
 8016730:	d82b      	bhi.n	801678a <__sflush_r+0xb2>
 8016732:	4a2a      	ldr	r2, [pc, #168]	@ (80167dc <__sflush_r+0x104>)
 8016734:	40ca      	lsrs	r2, r1
 8016736:	07d6      	lsls	r6, r2, #31
 8016738:	d527      	bpl.n	801678a <__sflush_r+0xb2>
 801673a:	2200      	movs	r2, #0
 801673c:	6062      	str	r2, [r4, #4]
 801673e:	04d9      	lsls	r1, r3, #19
 8016740:	6922      	ldr	r2, [r4, #16]
 8016742:	6022      	str	r2, [r4, #0]
 8016744:	d504      	bpl.n	8016750 <__sflush_r+0x78>
 8016746:	1c42      	adds	r2, r0, #1
 8016748:	d101      	bne.n	801674e <__sflush_r+0x76>
 801674a:	682b      	ldr	r3, [r5, #0]
 801674c:	b903      	cbnz	r3, 8016750 <__sflush_r+0x78>
 801674e:	6560      	str	r0, [r4, #84]	@ 0x54
 8016750:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016752:	602f      	str	r7, [r5, #0]
 8016754:	b1b9      	cbz	r1, 8016786 <__sflush_r+0xae>
 8016756:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801675a:	4299      	cmp	r1, r3
 801675c:	d002      	beq.n	8016764 <__sflush_r+0x8c>
 801675e:	4628      	mov	r0, r5
 8016760:	f7ff fb4a 	bl	8015df8 <_free_r>
 8016764:	2300      	movs	r3, #0
 8016766:	6363      	str	r3, [r4, #52]	@ 0x34
 8016768:	e00d      	b.n	8016786 <__sflush_r+0xae>
 801676a:	2301      	movs	r3, #1
 801676c:	4628      	mov	r0, r5
 801676e:	47b0      	blx	r6
 8016770:	4602      	mov	r2, r0
 8016772:	1c50      	adds	r0, r2, #1
 8016774:	d1c9      	bne.n	801670a <__sflush_r+0x32>
 8016776:	682b      	ldr	r3, [r5, #0]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d0c6      	beq.n	801670a <__sflush_r+0x32>
 801677c:	2b1d      	cmp	r3, #29
 801677e:	d001      	beq.n	8016784 <__sflush_r+0xac>
 8016780:	2b16      	cmp	r3, #22
 8016782:	d11e      	bne.n	80167c2 <__sflush_r+0xea>
 8016784:	602f      	str	r7, [r5, #0]
 8016786:	2000      	movs	r0, #0
 8016788:	e022      	b.n	80167d0 <__sflush_r+0xf8>
 801678a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801678e:	b21b      	sxth	r3, r3
 8016790:	e01b      	b.n	80167ca <__sflush_r+0xf2>
 8016792:	690f      	ldr	r7, [r1, #16]
 8016794:	2f00      	cmp	r7, #0
 8016796:	d0f6      	beq.n	8016786 <__sflush_r+0xae>
 8016798:	0793      	lsls	r3, r2, #30
 801679a:	680e      	ldr	r6, [r1, #0]
 801679c:	bf08      	it	eq
 801679e:	694b      	ldreq	r3, [r1, #20]
 80167a0:	600f      	str	r7, [r1, #0]
 80167a2:	bf18      	it	ne
 80167a4:	2300      	movne	r3, #0
 80167a6:	eba6 0807 	sub.w	r8, r6, r7
 80167aa:	608b      	str	r3, [r1, #8]
 80167ac:	f1b8 0f00 	cmp.w	r8, #0
 80167b0:	dde9      	ble.n	8016786 <__sflush_r+0xae>
 80167b2:	6a21      	ldr	r1, [r4, #32]
 80167b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80167b6:	4643      	mov	r3, r8
 80167b8:	463a      	mov	r2, r7
 80167ba:	4628      	mov	r0, r5
 80167bc:	47b0      	blx	r6
 80167be:	2800      	cmp	r0, #0
 80167c0:	dc08      	bgt.n	80167d4 <__sflush_r+0xfc>
 80167c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80167c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80167ca:	81a3      	strh	r3, [r4, #12]
 80167cc:	f04f 30ff 	mov.w	r0, #4294967295
 80167d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167d4:	4407      	add	r7, r0
 80167d6:	eba8 0800 	sub.w	r8, r8, r0
 80167da:	e7e7      	b.n	80167ac <__sflush_r+0xd4>
 80167dc:	20400001 	.word	0x20400001

080167e0 <_fflush_r>:
 80167e0:	b538      	push	{r3, r4, r5, lr}
 80167e2:	690b      	ldr	r3, [r1, #16]
 80167e4:	4605      	mov	r5, r0
 80167e6:	460c      	mov	r4, r1
 80167e8:	b913      	cbnz	r3, 80167f0 <_fflush_r+0x10>
 80167ea:	2500      	movs	r5, #0
 80167ec:	4628      	mov	r0, r5
 80167ee:	bd38      	pop	{r3, r4, r5, pc}
 80167f0:	b118      	cbz	r0, 80167fa <_fflush_r+0x1a>
 80167f2:	6a03      	ldr	r3, [r0, #32]
 80167f4:	b90b      	cbnz	r3, 80167fa <_fflush_r+0x1a>
 80167f6:	f7ff f8bf 	bl	8015978 <__sinit>
 80167fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d0f3      	beq.n	80167ea <_fflush_r+0xa>
 8016802:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016804:	07d0      	lsls	r0, r2, #31
 8016806:	d404      	bmi.n	8016812 <_fflush_r+0x32>
 8016808:	0599      	lsls	r1, r3, #22
 801680a:	d402      	bmi.n	8016812 <_fflush_r+0x32>
 801680c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801680e:	f7ff faf0 	bl	8015df2 <__retarget_lock_acquire_recursive>
 8016812:	4628      	mov	r0, r5
 8016814:	4621      	mov	r1, r4
 8016816:	f7ff ff5f 	bl	80166d8 <__sflush_r>
 801681a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801681c:	07da      	lsls	r2, r3, #31
 801681e:	4605      	mov	r5, r0
 8016820:	d4e4      	bmi.n	80167ec <_fflush_r+0xc>
 8016822:	89a3      	ldrh	r3, [r4, #12]
 8016824:	059b      	lsls	r3, r3, #22
 8016826:	d4e1      	bmi.n	80167ec <_fflush_r+0xc>
 8016828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801682a:	f7ff fae3 	bl	8015df4 <__retarget_lock_release_recursive>
 801682e:	e7dd      	b.n	80167ec <_fflush_r+0xc>

08016830 <__swhatbuf_r>:
 8016830:	b570      	push	{r4, r5, r6, lr}
 8016832:	460c      	mov	r4, r1
 8016834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016838:	2900      	cmp	r1, #0
 801683a:	b096      	sub	sp, #88	@ 0x58
 801683c:	4615      	mov	r5, r2
 801683e:	461e      	mov	r6, r3
 8016840:	da0d      	bge.n	801685e <__swhatbuf_r+0x2e>
 8016842:	89a3      	ldrh	r3, [r4, #12]
 8016844:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016848:	f04f 0100 	mov.w	r1, #0
 801684c:	bf14      	ite	ne
 801684e:	2340      	movne	r3, #64	@ 0x40
 8016850:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016854:	2000      	movs	r0, #0
 8016856:	6031      	str	r1, [r6, #0]
 8016858:	602b      	str	r3, [r5, #0]
 801685a:	b016      	add	sp, #88	@ 0x58
 801685c:	bd70      	pop	{r4, r5, r6, pc}
 801685e:	466a      	mov	r2, sp
 8016860:	f000 f862 	bl	8016928 <_fstat_r>
 8016864:	2800      	cmp	r0, #0
 8016866:	dbec      	blt.n	8016842 <__swhatbuf_r+0x12>
 8016868:	9901      	ldr	r1, [sp, #4]
 801686a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801686e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016872:	4259      	negs	r1, r3
 8016874:	4159      	adcs	r1, r3
 8016876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801687a:	e7eb      	b.n	8016854 <__swhatbuf_r+0x24>

0801687c <__smakebuf_r>:
 801687c:	898b      	ldrh	r3, [r1, #12]
 801687e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016880:	079d      	lsls	r5, r3, #30
 8016882:	4606      	mov	r6, r0
 8016884:	460c      	mov	r4, r1
 8016886:	d507      	bpl.n	8016898 <__smakebuf_r+0x1c>
 8016888:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801688c:	6023      	str	r3, [r4, #0]
 801688e:	6123      	str	r3, [r4, #16]
 8016890:	2301      	movs	r3, #1
 8016892:	6163      	str	r3, [r4, #20]
 8016894:	b003      	add	sp, #12
 8016896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016898:	ab01      	add	r3, sp, #4
 801689a:	466a      	mov	r2, sp
 801689c:	f7ff ffc8 	bl	8016830 <__swhatbuf_r>
 80168a0:	9f00      	ldr	r7, [sp, #0]
 80168a2:	4605      	mov	r5, r0
 80168a4:	4639      	mov	r1, r7
 80168a6:	4630      	mov	r0, r6
 80168a8:	f7fe ff4e 	bl	8015748 <_malloc_r>
 80168ac:	b948      	cbnz	r0, 80168c2 <__smakebuf_r+0x46>
 80168ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80168b2:	059a      	lsls	r2, r3, #22
 80168b4:	d4ee      	bmi.n	8016894 <__smakebuf_r+0x18>
 80168b6:	f023 0303 	bic.w	r3, r3, #3
 80168ba:	f043 0302 	orr.w	r3, r3, #2
 80168be:	81a3      	strh	r3, [r4, #12]
 80168c0:	e7e2      	b.n	8016888 <__smakebuf_r+0xc>
 80168c2:	89a3      	ldrh	r3, [r4, #12]
 80168c4:	6020      	str	r0, [r4, #0]
 80168c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80168ca:	81a3      	strh	r3, [r4, #12]
 80168cc:	9b01      	ldr	r3, [sp, #4]
 80168ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80168d2:	b15b      	cbz	r3, 80168ec <__smakebuf_r+0x70>
 80168d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80168d8:	4630      	mov	r0, r6
 80168da:	f000 f837 	bl	801694c <_isatty_r>
 80168de:	b128      	cbz	r0, 80168ec <__smakebuf_r+0x70>
 80168e0:	89a3      	ldrh	r3, [r4, #12]
 80168e2:	f023 0303 	bic.w	r3, r3, #3
 80168e6:	f043 0301 	orr.w	r3, r3, #1
 80168ea:	81a3      	strh	r3, [r4, #12]
 80168ec:	89a3      	ldrh	r3, [r4, #12]
 80168ee:	431d      	orrs	r5, r3
 80168f0:	81a5      	strh	r5, [r4, #12]
 80168f2:	e7cf      	b.n	8016894 <__smakebuf_r+0x18>

080168f4 <memmove>:
 80168f4:	4288      	cmp	r0, r1
 80168f6:	b510      	push	{r4, lr}
 80168f8:	eb01 0402 	add.w	r4, r1, r2
 80168fc:	d902      	bls.n	8016904 <memmove+0x10>
 80168fe:	4284      	cmp	r4, r0
 8016900:	4623      	mov	r3, r4
 8016902:	d807      	bhi.n	8016914 <memmove+0x20>
 8016904:	1e43      	subs	r3, r0, #1
 8016906:	42a1      	cmp	r1, r4
 8016908:	d008      	beq.n	801691c <memmove+0x28>
 801690a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801690e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016912:	e7f8      	b.n	8016906 <memmove+0x12>
 8016914:	4402      	add	r2, r0
 8016916:	4601      	mov	r1, r0
 8016918:	428a      	cmp	r2, r1
 801691a:	d100      	bne.n	801691e <memmove+0x2a>
 801691c:	bd10      	pop	{r4, pc}
 801691e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016926:	e7f7      	b.n	8016918 <memmove+0x24>

08016928 <_fstat_r>:
 8016928:	b538      	push	{r3, r4, r5, lr}
 801692a:	4d07      	ldr	r5, [pc, #28]	@ (8016948 <_fstat_r+0x20>)
 801692c:	2300      	movs	r3, #0
 801692e:	4604      	mov	r4, r0
 8016930:	4608      	mov	r0, r1
 8016932:	4611      	mov	r1, r2
 8016934:	602b      	str	r3, [r5, #0]
 8016936:	f7eb ff1c 	bl	8002772 <_fstat>
 801693a:	1c43      	adds	r3, r0, #1
 801693c:	d102      	bne.n	8016944 <_fstat_r+0x1c>
 801693e:	682b      	ldr	r3, [r5, #0]
 8016940:	b103      	cbz	r3, 8016944 <_fstat_r+0x1c>
 8016942:	6023      	str	r3, [r4, #0]
 8016944:	bd38      	pop	{r3, r4, r5, pc}
 8016946:	bf00      	nop
 8016948:	20000ed0 	.word	0x20000ed0

0801694c <_isatty_r>:
 801694c:	b538      	push	{r3, r4, r5, lr}
 801694e:	4d06      	ldr	r5, [pc, #24]	@ (8016968 <_isatty_r+0x1c>)
 8016950:	2300      	movs	r3, #0
 8016952:	4604      	mov	r4, r0
 8016954:	4608      	mov	r0, r1
 8016956:	602b      	str	r3, [r5, #0]
 8016958:	f7eb ff1b 	bl	8002792 <_isatty>
 801695c:	1c43      	adds	r3, r0, #1
 801695e:	d102      	bne.n	8016966 <_isatty_r+0x1a>
 8016960:	682b      	ldr	r3, [r5, #0]
 8016962:	b103      	cbz	r3, 8016966 <_isatty_r+0x1a>
 8016964:	6023      	str	r3, [r4, #0]
 8016966:	bd38      	pop	{r3, r4, r5, pc}
 8016968:	20000ed0 	.word	0x20000ed0

0801696c <memcpy>:
 801696c:	440a      	add	r2, r1
 801696e:	4291      	cmp	r1, r2
 8016970:	f100 33ff 	add.w	r3, r0, #4294967295
 8016974:	d100      	bne.n	8016978 <memcpy+0xc>
 8016976:	4770      	bx	lr
 8016978:	b510      	push	{r4, lr}
 801697a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801697e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016982:	4291      	cmp	r1, r2
 8016984:	d1f9      	bne.n	801697a <memcpy+0xe>
 8016986:	bd10      	pop	{r4, pc}

08016988 <_realloc_r>:
 8016988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801698c:	4607      	mov	r7, r0
 801698e:	4614      	mov	r4, r2
 8016990:	460d      	mov	r5, r1
 8016992:	b921      	cbnz	r1, 801699e <_realloc_r+0x16>
 8016994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016998:	4611      	mov	r1, r2
 801699a:	f7fe bed5 	b.w	8015748 <_malloc_r>
 801699e:	b92a      	cbnz	r2, 80169ac <_realloc_r+0x24>
 80169a0:	f7ff fa2a 	bl	8015df8 <_free_r>
 80169a4:	4625      	mov	r5, r4
 80169a6:	4628      	mov	r0, r5
 80169a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169ac:	f000 f81a 	bl	80169e4 <_malloc_usable_size_r>
 80169b0:	4284      	cmp	r4, r0
 80169b2:	4606      	mov	r6, r0
 80169b4:	d802      	bhi.n	80169bc <_realloc_r+0x34>
 80169b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80169ba:	d8f4      	bhi.n	80169a6 <_realloc_r+0x1e>
 80169bc:	4621      	mov	r1, r4
 80169be:	4638      	mov	r0, r7
 80169c0:	f7fe fec2 	bl	8015748 <_malloc_r>
 80169c4:	4680      	mov	r8, r0
 80169c6:	b908      	cbnz	r0, 80169cc <_realloc_r+0x44>
 80169c8:	4645      	mov	r5, r8
 80169ca:	e7ec      	b.n	80169a6 <_realloc_r+0x1e>
 80169cc:	42b4      	cmp	r4, r6
 80169ce:	4622      	mov	r2, r4
 80169d0:	4629      	mov	r1, r5
 80169d2:	bf28      	it	cs
 80169d4:	4632      	movcs	r2, r6
 80169d6:	f7ff ffc9 	bl	801696c <memcpy>
 80169da:	4629      	mov	r1, r5
 80169dc:	4638      	mov	r0, r7
 80169de:	f7ff fa0b 	bl	8015df8 <_free_r>
 80169e2:	e7f1      	b.n	80169c8 <_realloc_r+0x40>

080169e4 <_malloc_usable_size_r>:
 80169e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169e8:	1f18      	subs	r0, r3, #4
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	bfbc      	itt	lt
 80169ee:	580b      	ldrlt	r3, [r1, r0]
 80169f0:	18c0      	addlt	r0, r0, r3
 80169f2:	4770      	bx	lr

080169f4 <pow>:
 80169f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169f6:	ed2d 8b02 	vpush	{d8}
 80169fa:	eeb0 8a40 	vmov.f32	s16, s0
 80169fe:	eef0 8a60 	vmov.f32	s17, s1
 8016a02:	ec55 4b11 	vmov	r4, r5, d1
 8016a06:	f000 f8ab 	bl	8016b60 <__ieee754_pow>
 8016a0a:	4622      	mov	r2, r4
 8016a0c:	462b      	mov	r3, r5
 8016a0e:	4620      	mov	r0, r4
 8016a10:	4629      	mov	r1, r5
 8016a12:	ec57 6b10 	vmov	r6, r7, d0
 8016a16:	f7ea f891 	bl	8000b3c <__aeabi_dcmpun>
 8016a1a:	2800      	cmp	r0, #0
 8016a1c:	d13b      	bne.n	8016a96 <pow+0xa2>
 8016a1e:	ec51 0b18 	vmov	r0, r1, d8
 8016a22:	2200      	movs	r2, #0
 8016a24:	2300      	movs	r3, #0
 8016a26:	f7ea f857 	bl	8000ad8 <__aeabi_dcmpeq>
 8016a2a:	b1b8      	cbz	r0, 8016a5c <pow+0x68>
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	2300      	movs	r3, #0
 8016a30:	4620      	mov	r0, r4
 8016a32:	4629      	mov	r1, r5
 8016a34:	f7ea f850 	bl	8000ad8 <__aeabi_dcmpeq>
 8016a38:	2800      	cmp	r0, #0
 8016a3a:	d146      	bne.n	8016aca <pow+0xd6>
 8016a3c:	ec45 4b10 	vmov	d0, r4, r5
 8016a40:	f000 f848 	bl	8016ad4 <finite>
 8016a44:	b338      	cbz	r0, 8016a96 <pow+0xa2>
 8016a46:	2200      	movs	r2, #0
 8016a48:	2300      	movs	r3, #0
 8016a4a:	4620      	mov	r0, r4
 8016a4c:	4629      	mov	r1, r5
 8016a4e:	f7ea f84d 	bl	8000aec <__aeabi_dcmplt>
 8016a52:	b300      	cbz	r0, 8016a96 <pow+0xa2>
 8016a54:	f7ff f9a2 	bl	8015d9c <__errno>
 8016a58:	2322      	movs	r3, #34	@ 0x22
 8016a5a:	e01b      	b.n	8016a94 <pow+0xa0>
 8016a5c:	ec47 6b10 	vmov	d0, r6, r7
 8016a60:	f000 f838 	bl	8016ad4 <finite>
 8016a64:	b9e0      	cbnz	r0, 8016aa0 <pow+0xac>
 8016a66:	eeb0 0a48 	vmov.f32	s0, s16
 8016a6a:	eef0 0a68 	vmov.f32	s1, s17
 8016a6e:	f000 f831 	bl	8016ad4 <finite>
 8016a72:	b1a8      	cbz	r0, 8016aa0 <pow+0xac>
 8016a74:	ec45 4b10 	vmov	d0, r4, r5
 8016a78:	f000 f82c 	bl	8016ad4 <finite>
 8016a7c:	b180      	cbz	r0, 8016aa0 <pow+0xac>
 8016a7e:	4632      	mov	r2, r6
 8016a80:	463b      	mov	r3, r7
 8016a82:	4630      	mov	r0, r6
 8016a84:	4639      	mov	r1, r7
 8016a86:	f7ea f859 	bl	8000b3c <__aeabi_dcmpun>
 8016a8a:	2800      	cmp	r0, #0
 8016a8c:	d0e2      	beq.n	8016a54 <pow+0x60>
 8016a8e:	f7ff f985 	bl	8015d9c <__errno>
 8016a92:	2321      	movs	r3, #33	@ 0x21
 8016a94:	6003      	str	r3, [r0, #0]
 8016a96:	ecbd 8b02 	vpop	{d8}
 8016a9a:	ec47 6b10 	vmov	d0, r6, r7
 8016a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016aa0:	2200      	movs	r2, #0
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	4630      	mov	r0, r6
 8016aa6:	4639      	mov	r1, r7
 8016aa8:	f7ea f816 	bl	8000ad8 <__aeabi_dcmpeq>
 8016aac:	2800      	cmp	r0, #0
 8016aae:	d0f2      	beq.n	8016a96 <pow+0xa2>
 8016ab0:	eeb0 0a48 	vmov.f32	s0, s16
 8016ab4:	eef0 0a68 	vmov.f32	s1, s17
 8016ab8:	f000 f80c 	bl	8016ad4 <finite>
 8016abc:	2800      	cmp	r0, #0
 8016abe:	d0ea      	beq.n	8016a96 <pow+0xa2>
 8016ac0:	ec45 4b10 	vmov	d0, r4, r5
 8016ac4:	f000 f806 	bl	8016ad4 <finite>
 8016ac8:	e7c3      	b.n	8016a52 <pow+0x5e>
 8016aca:	4f01      	ldr	r7, [pc, #4]	@ (8016ad0 <pow+0xdc>)
 8016acc:	2600      	movs	r6, #0
 8016ace:	e7e2      	b.n	8016a96 <pow+0xa2>
 8016ad0:	3ff00000 	.word	0x3ff00000

08016ad4 <finite>:
 8016ad4:	b082      	sub	sp, #8
 8016ad6:	ed8d 0b00 	vstr	d0, [sp]
 8016ada:	9801      	ldr	r0, [sp, #4]
 8016adc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8016ae0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8016ae4:	0fc0      	lsrs	r0, r0, #31
 8016ae6:	b002      	add	sp, #8
 8016ae8:	4770      	bx	lr
	...

08016aec <trunc>:
 8016aec:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8016af0:	ec5c bb10 	vmov	fp, ip, d0
 8016af4:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8016af8:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8016afc:	2913      	cmp	r1, #19
 8016afe:	4664      	mov	r4, ip
 8016b00:	dc14      	bgt.n	8016b2c <trunc+0x40>
 8016b02:	2900      	cmp	r1, #0
 8016b04:	bfa4      	itt	ge
 8016b06:	4b15      	ldrge	r3, [pc, #84]	@ (8016b5c <trunc+0x70>)
 8016b08:	fa43 f101 	asrge.w	r1, r3, r1
 8016b0c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8016b10:	bfad      	iteet	ge
 8016b12:	4021      	andge	r1, r4
 8016b14:	2200      	movlt	r2, #0
 8016b16:	4603      	movlt	r3, r0
 8016b18:	2200      	movge	r2, #0
 8016b1a:	bfa8      	it	ge
 8016b1c:	ea41 0300 	orrge.w	r3, r1, r0
 8016b20:	4693      	mov	fp, r2
 8016b22:	469c      	mov	ip, r3
 8016b24:	ec4c bb10 	vmov	d0, fp, ip
 8016b28:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8016b2c:	2933      	cmp	r1, #51	@ 0x33
 8016b2e:	dd0b      	ble.n	8016b48 <trunc+0x5c>
 8016b30:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8016b34:	d1f6      	bne.n	8016b24 <trunc+0x38>
 8016b36:	465a      	mov	r2, fp
 8016b38:	4663      	mov	r3, ip
 8016b3a:	4658      	mov	r0, fp
 8016b3c:	4621      	mov	r1, r4
 8016b3e:	f7e9 fbad 	bl	800029c <__adddf3>
 8016b42:	4683      	mov	fp, r0
 8016b44:	468c      	mov	ip, r1
 8016b46:	e7ed      	b.n	8016b24 <trunc+0x38>
 8016b48:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 8016b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8016b50:	40c3      	lsrs	r3, r0
 8016b52:	ea2b 0603 	bic.w	r6, fp, r3
 8016b56:	46b3      	mov	fp, r6
 8016b58:	46a4      	mov	ip, r4
 8016b5a:	e7e3      	b.n	8016b24 <trunc+0x38>
 8016b5c:	fff00000 	.word	0xfff00000

08016b60 <__ieee754_pow>:
 8016b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b64:	b091      	sub	sp, #68	@ 0x44
 8016b66:	ed8d 1b00 	vstr	d1, [sp]
 8016b6a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8016b6e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8016b72:	ea5a 0001 	orrs.w	r0, sl, r1
 8016b76:	ec57 6b10 	vmov	r6, r7, d0
 8016b7a:	d113      	bne.n	8016ba4 <__ieee754_pow+0x44>
 8016b7c:	19b3      	adds	r3, r6, r6
 8016b7e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8016b82:	4152      	adcs	r2, r2
 8016b84:	4298      	cmp	r0, r3
 8016b86:	4b9a      	ldr	r3, [pc, #616]	@ (8016df0 <__ieee754_pow+0x290>)
 8016b88:	4193      	sbcs	r3, r2
 8016b8a:	f080 84ee 	bcs.w	801756a <__ieee754_pow+0xa0a>
 8016b8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016b92:	4630      	mov	r0, r6
 8016b94:	4639      	mov	r1, r7
 8016b96:	f7e9 fb81 	bl	800029c <__adddf3>
 8016b9a:	ec41 0b10 	vmov	d0, r0, r1
 8016b9e:	b011      	add	sp, #68	@ 0x44
 8016ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ba4:	4a93      	ldr	r2, [pc, #588]	@ (8016df4 <__ieee754_pow+0x294>)
 8016ba6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8016baa:	4295      	cmp	r5, r2
 8016bac:	46b8      	mov	r8, r7
 8016bae:	4633      	mov	r3, r6
 8016bb0:	d80a      	bhi.n	8016bc8 <__ieee754_pow+0x68>
 8016bb2:	d104      	bne.n	8016bbe <__ieee754_pow+0x5e>
 8016bb4:	2e00      	cmp	r6, #0
 8016bb6:	d1ea      	bne.n	8016b8e <__ieee754_pow+0x2e>
 8016bb8:	45aa      	cmp	sl, r5
 8016bba:	d8e8      	bhi.n	8016b8e <__ieee754_pow+0x2e>
 8016bbc:	e001      	b.n	8016bc2 <__ieee754_pow+0x62>
 8016bbe:	4592      	cmp	sl, r2
 8016bc0:	d802      	bhi.n	8016bc8 <__ieee754_pow+0x68>
 8016bc2:	4592      	cmp	sl, r2
 8016bc4:	d10f      	bne.n	8016be6 <__ieee754_pow+0x86>
 8016bc6:	b171      	cbz	r1, 8016be6 <__ieee754_pow+0x86>
 8016bc8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8016bcc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8016bd0:	ea58 0803 	orrs.w	r8, r8, r3
 8016bd4:	d1db      	bne.n	8016b8e <__ieee754_pow+0x2e>
 8016bd6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016bda:	18db      	adds	r3, r3, r3
 8016bdc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8016be0:	4152      	adcs	r2, r2
 8016be2:	4598      	cmp	r8, r3
 8016be4:	e7cf      	b.n	8016b86 <__ieee754_pow+0x26>
 8016be6:	f1b8 0f00 	cmp.w	r8, #0
 8016bea:	46ab      	mov	fp, r5
 8016bec:	da43      	bge.n	8016c76 <__ieee754_pow+0x116>
 8016bee:	4a82      	ldr	r2, [pc, #520]	@ (8016df8 <__ieee754_pow+0x298>)
 8016bf0:	4592      	cmp	sl, r2
 8016bf2:	d856      	bhi.n	8016ca2 <__ieee754_pow+0x142>
 8016bf4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8016bf8:	4592      	cmp	sl, r2
 8016bfa:	f240 84c5 	bls.w	8017588 <__ieee754_pow+0xa28>
 8016bfe:	ea4f 522a 	mov.w	r2, sl, asr #20
 8016c02:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8016c06:	2a14      	cmp	r2, #20
 8016c08:	dd18      	ble.n	8016c3c <__ieee754_pow+0xdc>
 8016c0a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8016c0e:	fa21 f402 	lsr.w	r4, r1, r2
 8016c12:	fa04 f202 	lsl.w	r2, r4, r2
 8016c16:	428a      	cmp	r2, r1
 8016c18:	f040 84b6 	bne.w	8017588 <__ieee754_pow+0xa28>
 8016c1c:	f004 0401 	and.w	r4, r4, #1
 8016c20:	f1c4 0402 	rsb	r4, r4, #2
 8016c24:	2900      	cmp	r1, #0
 8016c26:	d159      	bne.n	8016cdc <__ieee754_pow+0x17c>
 8016c28:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8016c2c:	d148      	bne.n	8016cc0 <__ieee754_pow+0x160>
 8016c2e:	4632      	mov	r2, r6
 8016c30:	463b      	mov	r3, r7
 8016c32:	4630      	mov	r0, r6
 8016c34:	4639      	mov	r1, r7
 8016c36:	f7e9 fce7 	bl	8000608 <__aeabi_dmul>
 8016c3a:	e7ae      	b.n	8016b9a <__ieee754_pow+0x3a>
 8016c3c:	2900      	cmp	r1, #0
 8016c3e:	d14c      	bne.n	8016cda <__ieee754_pow+0x17a>
 8016c40:	f1c2 0214 	rsb	r2, r2, #20
 8016c44:	fa4a f402 	asr.w	r4, sl, r2
 8016c48:	fa04 f202 	lsl.w	r2, r4, r2
 8016c4c:	4552      	cmp	r2, sl
 8016c4e:	f040 8498 	bne.w	8017582 <__ieee754_pow+0xa22>
 8016c52:	f004 0401 	and.w	r4, r4, #1
 8016c56:	f1c4 0402 	rsb	r4, r4, #2
 8016c5a:	4a68      	ldr	r2, [pc, #416]	@ (8016dfc <__ieee754_pow+0x29c>)
 8016c5c:	4592      	cmp	sl, r2
 8016c5e:	d1e3      	bne.n	8016c28 <__ieee754_pow+0xc8>
 8016c60:	f1b9 0f00 	cmp.w	r9, #0
 8016c64:	f280 8489 	bge.w	801757a <__ieee754_pow+0xa1a>
 8016c68:	4964      	ldr	r1, [pc, #400]	@ (8016dfc <__ieee754_pow+0x29c>)
 8016c6a:	4632      	mov	r2, r6
 8016c6c:	463b      	mov	r3, r7
 8016c6e:	2000      	movs	r0, #0
 8016c70:	f7e9 fdf4 	bl	800085c <__aeabi_ddiv>
 8016c74:	e791      	b.n	8016b9a <__ieee754_pow+0x3a>
 8016c76:	2400      	movs	r4, #0
 8016c78:	bb81      	cbnz	r1, 8016cdc <__ieee754_pow+0x17c>
 8016c7a:	4a5e      	ldr	r2, [pc, #376]	@ (8016df4 <__ieee754_pow+0x294>)
 8016c7c:	4592      	cmp	sl, r2
 8016c7e:	d1ec      	bne.n	8016c5a <__ieee754_pow+0xfa>
 8016c80:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8016c84:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8016c88:	431a      	orrs	r2, r3
 8016c8a:	f000 846e 	beq.w	801756a <__ieee754_pow+0xa0a>
 8016c8e:	4b5c      	ldr	r3, [pc, #368]	@ (8016e00 <__ieee754_pow+0x2a0>)
 8016c90:	429d      	cmp	r5, r3
 8016c92:	d908      	bls.n	8016ca6 <__ieee754_pow+0x146>
 8016c94:	f1b9 0f00 	cmp.w	r9, #0
 8016c98:	f280 846b 	bge.w	8017572 <__ieee754_pow+0xa12>
 8016c9c:	2000      	movs	r0, #0
 8016c9e:	2100      	movs	r1, #0
 8016ca0:	e77b      	b.n	8016b9a <__ieee754_pow+0x3a>
 8016ca2:	2402      	movs	r4, #2
 8016ca4:	e7e8      	b.n	8016c78 <__ieee754_pow+0x118>
 8016ca6:	f1b9 0f00 	cmp.w	r9, #0
 8016caa:	f04f 0000 	mov.w	r0, #0
 8016cae:	f04f 0100 	mov.w	r1, #0
 8016cb2:	f6bf af72 	bge.w	8016b9a <__ieee754_pow+0x3a>
 8016cb6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016cba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8016cbe:	e76c      	b.n	8016b9a <__ieee754_pow+0x3a>
 8016cc0:	4a50      	ldr	r2, [pc, #320]	@ (8016e04 <__ieee754_pow+0x2a4>)
 8016cc2:	4591      	cmp	r9, r2
 8016cc4:	d10a      	bne.n	8016cdc <__ieee754_pow+0x17c>
 8016cc6:	f1b8 0f00 	cmp.w	r8, #0
 8016cca:	db07      	blt.n	8016cdc <__ieee754_pow+0x17c>
 8016ccc:	ec47 6b10 	vmov	d0, r6, r7
 8016cd0:	b011      	add	sp, #68	@ 0x44
 8016cd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cd6:	f000 bd4f 	b.w	8017778 <__ieee754_sqrt>
 8016cda:	2400      	movs	r4, #0
 8016cdc:	ec47 6b10 	vmov	d0, r6, r7
 8016ce0:	9302      	str	r3, [sp, #8]
 8016ce2:	f000 fc87 	bl	80175f4 <fabs>
 8016ce6:	9b02      	ldr	r3, [sp, #8]
 8016ce8:	ec51 0b10 	vmov	r0, r1, d0
 8016cec:	bb43      	cbnz	r3, 8016d40 <__ieee754_pow+0x1e0>
 8016cee:	4b43      	ldr	r3, [pc, #268]	@ (8016dfc <__ieee754_pow+0x29c>)
 8016cf0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8016cf4:	429a      	cmp	r2, r3
 8016cf6:	d000      	beq.n	8016cfa <__ieee754_pow+0x19a>
 8016cf8:	bb15      	cbnz	r5, 8016d40 <__ieee754_pow+0x1e0>
 8016cfa:	f1b9 0f00 	cmp.w	r9, #0
 8016cfe:	da05      	bge.n	8016d0c <__ieee754_pow+0x1ac>
 8016d00:	4602      	mov	r2, r0
 8016d02:	460b      	mov	r3, r1
 8016d04:	2000      	movs	r0, #0
 8016d06:	493d      	ldr	r1, [pc, #244]	@ (8016dfc <__ieee754_pow+0x29c>)
 8016d08:	f7e9 fda8 	bl	800085c <__aeabi_ddiv>
 8016d0c:	f1b8 0f00 	cmp.w	r8, #0
 8016d10:	f6bf af43 	bge.w	8016b9a <__ieee754_pow+0x3a>
 8016d14:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8016d18:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8016d1c:	4325      	orrs	r5, r4
 8016d1e:	d108      	bne.n	8016d32 <__ieee754_pow+0x1d2>
 8016d20:	4602      	mov	r2, r0
 8016d22:	460b      	mov	r3, r1
 8016d24:	4610      	mov	r0, r2
 8016d26:	4619      	mov	r1, r3
 8016d28:	f7e9 fab6 	bl	8000298 <__aeabi_dsub>
 8016d2c:	4602      	mov	r2, r0
 8016d2e:	460b      	mov	r3, r1
 8016d30:	e79e      	b.n	8016c70 <__ieee754_pow+0x110>
 8016d32:	2c01      	cmp	r4, #1
 8016d34:	f47f af31 	bne.w	8016b9a <__ieee754_pow+0x3a>
 8016d38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016d3c:	4619      	mov	r1, r3
 8016d3e:	e72c      	b.n	8016b9a <__ieee754_pow+0x3a>
 8016d40:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8016d44:	3b01      	subs	r3, #1
 8016d46:	ea53 0204 	orrs.w	r2, r3, r4
 8016d4a:	d102      	bne.n	8016d52 <__ieee754_pow+0x1f2>
 8016d4c:	4632      	mov	r2, r6
 8016d4e:	463b      	mov	r3, r7
 8016d50:	e7e8      	b.n	8016d24 <__ieee754_pow+0x1c4>
 8016d52:	3c01      	subs	r4, #1
 8016d54:	431c      	orrs	r4, r3
 8016d56:	d016      	beq.n	8016d86 <__ieee754_pow+0x226>
 8016d58:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8016de0 <__ieee754_pow+0x280>
 8016d5c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8016d60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016d64:	f240 8110 	bls.w	8016f88 <__ieee754_pow+0x428>
 8016d68:	4b27      	ldr	r3, [pc, #156]	@ (8016e08 <__ieee754_pow+0x2a8>)
 8016d6a:	459a      	cmp	sl, r3
 8016d6c:	4b24      	ldr	r3, [pc, #144]	@ (8016e00 <__ieee754_pow+0x2a0>)
 8016d6e:	d916      	bls.n	8016d9e <__ieee754_pow+0x23e>
 8016d70:	429d      	cmp	r5, r3
 8016d72:	d80b      	bhi.n	8016d8c <__ieee754_pow+0x22c>
 8016d74:	f1b9 0f00 	cmp.w	r9, #0
 8016d78:	da0b      	bge.n	8016d92 <__ieee754_pow+0x232>
 8016d7a:	2000      	movs	r0, #0
 8016d7c:	b011      	add	sp, #68	@ 0x44
 8016d7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d82:	f000 bcf1 	b.w	8017768 <__math_oflow>
 8016d86:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8016de8 <__ieee754_pow+0x288>
 8016d8a:	e7e7      	b.n	8016d5c <__ieee754_pow+0x1fc>
 8016d8c:	f1b9 0f00 	cmp.w	r9, #0
 8016d90:	dcf3      	bgt.n	8016d7a <__ieee754_pow+0x21a>
 8016d92:	2000      	movs	r0, #0
 8016d94:	b011      	add	sp, #68	@ 0x44
 8016d96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d9a:	f000 bcdd 	b.w	8017758 <__math_uflow>
 8016d9e:	429d      	cmp	r5, r3
 8016da0:	d20c      	bcs.n	8016dbc <__ieee754_pow+0x25c>
 8016da2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016da6:	2200      	movs	r2, #0
 8016da8:	2300      	movs	r3, #0
 8016daa:	f7e9 fe9f 	bl	8000aec <__aeabi_dcmplt>
 8016dae:	3800      	subs	r0, #0
 8016db0:	bf18      	it	ne
 8016db2:	2001      	movne	r0, #1
 8016db4:	f1b9 0f00 	cmp.w	r9, #0
 8016db8:	daec      	bge.n	8016d94 <__ieee754_pow+0x234>
 8016dba:	e7df      	b.n	8016d7c <__ieee754_pow+0x21c>
 8016dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8016dfc <__ieee754_pow+0x29c>)
 8016dbe:	429d      	cmp	r5, r3
 8016dc0:	f04f 0200 	mov.w	r2, #0
 8016dc4:	d922      	bls.n	8016e0c <__ieee754_pow+0x2ac>
 8016dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016dca:	2300      	movs	r3, #0
 8016dcc:	f7e9 fe8e 	bl	8000aec <__aeabi_dcmplt>
 8016dd0:	3800      	subs	r0, #0
 8016dd2:	bf18      	it	ne
 8016dd4:	2001      	movne	r0, #1
 8016dd6:	f1b9 0f00 	cmp.w	r9, #0
 8016dda:	dccf      	bgt.n	8016d7c <__ieee754_pow+0x21c>
 8016ddc:	e7da      	b.n	8016d94 <__ieee754_pow+0x234>
 8016dde:	bf00      	nop
 8016de0:	00000000 	.word	0x00000000
 8016de4:	3ff00000 	.word	0x3ff00000
 8016de8:	00000000 	.word	0x00000000
 8016dec:	bff00000 	.word	0xbff00000
 8016df0:	fff00000 	.word	0xfff00000
 8016df4:	7ff00000 	.word	0x7ff00000
 8016df8:	433fffff 	.word	0x433fffff
 8016dfc:	3ff00000 	.word	0x3ff00000
 8016e00:	3fefffff 	.word	0x3fefffff
 8016e04:	3fe00000 	.word	0x3fe00000
 8016e08:	43f00000 	.word	0x43f00000
 8016e0c:	4b5a      	ldr	r3, [pc, #360]	@ (8016f78 <__ieee754_pow+0x418>)
 8016e0e:	f7e9 fa43 	bl	8000298 <__aeabi_dsub>
 8016e12:	a351      	add	r3, pc, #324	@ (adr r3, 8016f58 <__ieee754_pow+0x3f8>)
 8016e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e18:	4604      	mov	r4, r0
 8016e1a:	460d      	mov	r5, r1
 8016e1c:	f7e9 fbf4 	bl	8000608 <__aeabi_dmul>
 8016e20:	a34f      	add	r3, pc, #316	@ (adr r3, 8016f60 <__ieee754_pow+0x400>)
 8016e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e26:	4606      	mov	r6, r0
 8016e28:	460f      	mov	r7, r1
 8016e2a:	4620      	mov	r0, r4
 8016e2c:	4629      	mov	r1, r5
 8016e2e:	f7e9 fbeb 	bl	8000608 <__aeabi_dmul>
 8016e32:	4b52      	ldr	r3, [pc, #328]	@ (8016f7c <__ieee754_pow+0x41c>)
 8016e34:	4682      	mov	sl, r0
 8016e36:	468b      	mov	fp, r1
 8016e38:	2200      	movs	r2, #0
 8016e3a:	4620      	mov	r0, r4
 8016e3c:	4629      	mov	r1, r5
 8016e3e:	f7e9 fbe3 	bl	8000608 <__aeabi_dmul>
 8016e42:	4602      	mov	r2, r0
 8016e44:	460b      	mov	r3, r1
 8016e46:	a148      	add	r1, pc, #288	@ (adr r1, 8016f68 <__ieee754_pow+0x408>)
 8016e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016e4c:	f7e9 fa24 	bl	8000298 <__aeabi_dsub>
 8016e50:	4622      	mov	r2, r4
 8016e52:	462b      	mov	r3, r5
 8016e54:	f7e9 fbd8 	bl	8000608 <__aeabi_dmul>
 8016e58:	4602      	mov	r2, r0
 8016e5a:	460b      	mov	r3, r1
 8016e5c:	2000      	movs	r0, #0
 8016e5e:	4948      	ldr	r1, [pc, #288]	@ (8016f80 <__ieee754_pow+0x420>)
 8016e60:	f7e9 fa1a 	bl	8000298 <__aeabi_dsub>
 8016e64:	4622      	mov	r2, r4
 8016e66:	4680      	mov	r8, r0
 8016e68:	4689      	mov	r9, r1
 8016e6a:	462b      	mov	r3, r5
 8016e6c:	4620      	mov	r0, r4
 8016e6e:	4629      	mov	r1, r5
 8016e70:	f7e9 fbca 	bl	8000608 <__aeabi_dmul>
 8016e74:	4602      	mov	r2, r0
 8016e76:	460b      	mov	r3, r1
 8016e78:	4640      	mov	r0, r8
 8016e7a:	4649      	mov	r1, r9
 8016e7c:	f7e9 fbc4 	bl	8000608 <__aeabi_dmul>
 8016e80:	a33b      	add	r3, pc, #236	@ (adr r3, 8016f70 <__ieee754_pow+0x410>)
 8016e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e86:	f7e9 fbbf 	bl	8000608 <__aeabi_dmul>
 8016e8a:	4602      	mov	r2, r0
 8016e8c:	460b      	mov	r3, r1
 8016e8e:	4650      	mov	r0, sl
 8016e90:	4659      	mov	r1, fp
 8016e92:	f7e9 fa01 	bl	8000298 <__aeabi_dsub>
 8016e96:	4602      	mov	r2, r0
 8016e98:	460b      	mov	r3, r1
 8016e9a:	4680      	mov	r8, r0
 8016e9c:	4689      	mov	r9, r1
 8016e9e:	4630      	mov	r0, r6
 8016ea0:	4639      	mov	r1, r7
 8016ea2:	f7e9 f9fb 	bl	800029c <__adddf3>
 8016ea6:	2400      	movs	r4, #0
 8016ea8:	4632      	mov	r2, r6
 8016eaa:	463b      	mov	r3, r7
 8016eac:	4620      	mov	r0, r4
 8016eae:	460d      	mov	r5, r1
 8016eb0:	f7e9 f9f2 	bl	8000298 <__aeabi_dsub>
 8016eb4:	4602      	mov	r2, r0
 8016eb6:	460b      	mov	r3, r1
 8016eb8:	4640      	mov	r0, r8
 8016eba:	4649      	mov	r1, r9
 8016ebc:	f7e9 f9ec 	bl	8000298 <__aeabi_dsub>
 8016ec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ec4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016ec8:	2300      	movs	r3, #0
 8016eca:	9304      	str	r3, [sp, #16]
 8016ecc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016ed0:	4606      	mov	r6, r0
 8016ed2:	460f      	mov	r7, r1
 8016ed4:	465b      	mov	r3, fp
 8016ed6:	4652      	mov	r2, sl
 8016ed8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016edc:	f7e9 f9dc 	bl	8000298 <__aeabi_dsub>
 8016ee0:	4622      	mov	r2, r4
 8016ee2:	462b      	mov	r3, r5
 8016ee4:	f7e9 fb90 	bl	8000608 <__aeabi_dmul>
 8016ee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016eec:	4680      	mov	r8, r0
 8016eee:	4689      	mov	r9, r1
 8016ef0:	4630      	mov	r0, r6
 8016ef2:	4639      	mov	r1, r7
 8016ef4:	f7e9 fb88 	bl	8000608 <__aeabi_dmul>
 8016ef8:	4602      	mov	r2, r0
 8016efa:	460b      	mov	r3, r1
 8016efc:	4640      	mov	r0, r8
 8016efe:	4649      	mov	r1, r9
 8016f00:	f7e9 f9cc 	bl	800029c <__adddf3>
 8016f04:	465b      	mov	r3, fp
 8016f06:	4606      	mov	r6, r0
 8016f08:	460f      	mov	r7, r1
 8016f0a:	4652      	mov	r2, sl
 8016f0c:	4620      	mov	r0, r4
 8016f0e:	4629      	mov	r1, r5
 8016f10:	f7e9 fb7a 	bl	8000608 <__aeabi_dmul>
 8016f14:	460b      	mov	r3, r1
 8016f16:	4602      	mov	r2, r0
 8016f18:	4680      	mov	r8, r0
 8016f1a:	4689      	mov	r9, r1
 8016f1c:	4630      	mov	r0, r6
 8016f1e:	4639      	mov	r1, r7
 8016f20:	f7e9 f9bc 	bl	800029c <__adddf3>
 8016f24:	4b17      	ldr	r3, [pc, #92]	@ (8016f84 <__ieee754_pow+0x424>)
 8016f26:	4299      	cmp	r1, r3
 8016f28:	4604      	mov	r4, r0
 8016f2a:	460d      	mov	r5, r1
 8016f2c:	468b      	mov	fp, r1
 8016f2e:	f340 820b 	ble.w	8017348 <__ieee754_pow+0x7e8>
 8016f32:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8016f36:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8016f3a:	4303      	orrs	r3, r0
 8016f3c:	f000 81ea 	beq.w	8017314 <__ieee754_pow+0x7b4>
 8016f40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016f44:	2200      	movs	r2, #0
 8016f46:	2300      	movs	r3, #0
 8016f48:	f7e9 fdd0 	bl	8000aec <__aeabi_dcmplt>
 8016f4c:	3800      	subs	r0, #0
 8016f4e:	bf18      	it	ne
 8016f50:	2001      	movne	r0, #1
 8016f52:	e713      	b.n	8016d7c <__ieee754_pow+0x21c>
 8016f54:	f3af 8000 	nop.w
 8016f58:	60000000 	.word	0x60000000
 8016f5c:	3ff71547 	.word	0x3ff71547
 8016f60:	f85ddf44 	.word	0xf85ddf44
 8016f64:	3e54ae0b 	.word	0x3e54ae0b
 8016f68:	55555555 	.word	0x55555555
 8016f6c:	3fd55555 	.word	0x3fd55555
 8016f70:	652b82fe 	.word	0x652b82fe
 8016f74:	3ff71547 	.word	0x3ff71547
 8016f78:	3ff00000 	.word	0x3ff00000
 8016f7c:	3fd00000 	.word	0x3fd00000
 8016f80:	3fe00000 	.word	0x3fe00000
 8016f84:	408fffff 	.word	0x408fffff
 8016f88:	4bd5      	ldr	r3, [pc, #852]	@ (80172e0 <__ieee754_pow+0x780>)
 8016f8a:	ea08 0303 	and.w	r3, r8, r3
 8016f8e:	2200      	movs	r2, #0
 8016f90:	b92b      	cbnz	r3, 8016f9e <__ieee754_pow+0x43e>
 8016f92:	4bd4      	ldr	r3, [pc, #848]	@ (80172e4 <__ieee754_pow+0x784>)
 8016f94:	f7e9 fb38 	bl	8000608 <__aeabi_dmul>
 8016f98:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8016f9c:	468b      	mov	fp, r1
 8016f9e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8016fa2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8016fa6:	4413      	add	r3, r2
 8016fa8:	930a      	str	r3, [sp, #40]	@ 0x28
 8016faa:	4bcf      	ldr	r3, [pc, #828]	@ (80172e8 <__ieee754_pow+0x788>)
 8016fac:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8016fb0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8016fb4:	459b      	cmp	fp, r3
 8016fb6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016fba:	dd08      	ble.n	8016fce <__ieee754_pow+0x46e>
 8016fbc:	4bcb      	ldr	r3, [pc, #812]	@ (80172ec <__ieee754_pow+0x78c>)
 8016fbe:	459b      	cmp	fp, r3
 8016fc0:	f340 81a5 	ble.w	801730e <__ieee754_pow+0x7ae>
 8016fc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016fc6:	3301      	adds	r3, #1
 8016fc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8016fca:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8016fce:	f04f 0a00 	mov.w	sl, #0
 8016fd2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016fd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016fd8:	4bc5      	ldr	r3, [pc, #788]	@ (80172f0 <__ieee754_pow+0x790>)
 8016fda:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016fde:	ed93 7b00 	vldr	d7, [r3]
 8016fe2:	4629      	mov	r1, r5
 8016fe4:	ec53 2b17 	vmov	r2, r3, d7
 8016fe8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016fec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016ff0:	f7e9 f952 	bl	8000298 <__aeabi_dsub>
 8016ff4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016ff8:	4606      	mov	r6, r0
 8016ffa:	460f      	mov	r7, r1
 8016ffc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017000:	f7e9 f94c 	bl	800029c <__adddf3>
 8017004:	4602      	mov	r2, r0
 8017006:	460b      	mov	r3, r1
 8017008:	2000      	movs	r0, #0
 801700a:	49ba      	ldr	r1, [pc, #744]	@ (80172f4 <__ieee754_pow+0x794>)
 801700c:	f7e9 fc26 	bl	800085c <__aeabi_ddiv>
 8017010:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8017014:	4602      	mov	r2, r0
 8017016:	460b      	mov	r3, r1
 8017018:	4630      	mov	r0, r6
 801701a:	4639      	mov	r1, r7
 801701c:	f7e9 faf4 	bl	8000608 <__aeabi_dmul>
 8017020:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017024:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8017028:	106d      	asrs	r5, r5, #1
 801702a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801702e:	f04f 0b00 	mov.w	fp, #0
 8017032:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8017036:	4661      	mov	r1, ip
 8017038:	2200      	movs	r2, #0
 801703a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801703e:	4658      	mov	r0, fp
 8017040:	46e1      	mov	r9, ip
 8017042:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8017046:	4614      	mov	r4, r2
 8017048:	461d      	mov	r5, r3
 801704a:	f7e9 fadd 	bl	8000608 <__aeabi_dmul>
 801704e:	4602      	mov	r2, r0
 8017050:	460b      	mov	r3, r1
 8017052:	4630      	mov	r0, r6
 8017054:	4639      	mov	r1, r7
 8017056:	f7e9 f91f 	bl	8000298 <__aeabi_dsub>
 801705a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801705e:	4606      	mov	r6, r0
 8017060:	460f      	mov	r7, r1
 8017062:	4620      	mov	r0, r4
 8017064:	4629      	mov	r1, r5
 8017066:	f7e9 f917 	bl	8000298 <__aeabi_dsub>
 801706a:	4602      	mov	r2, r0
 801706c:	460b      	mov	r3, r1
 801706e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017072:	f7e9 f911 	bl	8000298 <__aeabi_dsub>
 8017076:	465a      	mov	r2, fp
 8017078:	464b      	mov	r3, r9
 801707a:	f7e9 fac5 	bl	8000608 <__aeabi_dmul>
 801707e:	4602      	mov	r2, r0
 8017080:	460b      	mov	r3, r1
 8017082:	4630      	mov	r0, r6
 8017084:	4639      	mov	r1, r7
 8017086:	f7e9 f907 	bl	8000298 <__aeabi_dsub>
 801708a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801708e:	f7e9 fabb 	bl	8000608 <__aeabi_dmul>
 8017092:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017096:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801709a:	4610      	mov	r0, r2
 801709c:	4619      	mov	r1, r3
 801709e:	f7e9 fab3 	bl	8000608 <__aeabi_dmul>
 80170a2:	a37d      	add	r3, pc, #500	@ (adr r3, 8017298 <__ieee754_pow+0x738>)
 80170a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170a8:	4604      	mov	r4, r0
 80170aa:	460d      	mov	r5, r1
 80170ac:	f7e9 faac 	bl	8000608 <__aeabi_dmul>
 80170b0:	a37b      	add	r3, pc, #492	@ (adr r3, 80172a0 <__ieee754_pow+0x740>)
 80170b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170b6:	f7e9 f8f1 	bl	800029c <__adddf3>
 80170ba:	4622      	mov	r2, r4
 80170bc:	462b      	mov	r3, r5
 80170be:	f7e9 faa3 	bl	8000608 <__aeabi_dmul>
 80170c2:	a379      	add	r3, pc, #484	@ (adr r3, 80172a8 <__ieee754_pow+0x748>)
 80170c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170c8:	f7e9 f8e8 	bl	800029c <__adddf3>
 80170cc:	4622      	mov	r2, r4
 80170ce:	462b      	mov	r3, r5
 80170d0:	f7e9 fa9a 	bl	8000608 <__aeabi_dmul>
 80170d4:	a376      	add	r3, pc, #472	@ (adr r3, 80172b0 <__ieee754_pow+0x750>)
 80170d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170da:	f7e9 f8df 	bl	800029c <__adddf3>
 80170de:	4622      	mov	r2, r4
 80170e0:	462b      	mov	r3, r5
 80170e2:	f7e9 fa91 	bl	8000608 <__aeabi_dmul>
 80170e6:	a374      	add	r3, pc, #464	@ (adr r3, 80172b8 <__ieee754_pow+0x758>)
 80170e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ec:	f7e9 f8d6 	bl	800029c <__adddf3>
 80170f0:	4622      	mov	r2, r4
 80170f2:	462b      	mov	r3, r5
 80170f4:	f7e9 fa88 	bl	8000608 <__aeabi_dmul>
 80170f8:	a371      	add	r3, pc, #452	@ (adr r3, 80172c0 <__ieee754_pow+0x760>)
 80170fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170fe:	f7e9 f8cd 	bl	800029c <__adddf3>
 8017102:	4622      	mov	r2, r4
 8017104:	4606      	mov	r6, r0
 8017106:	460f      	mov	r7, r1
 8017108:	462b      	mov	r3, r5
 801710a:	4620      	mov	r0, r4
 801710c:	4629      	mov	r1, r5
 801710e:	f7e9 fa7b 	bl	8000608 <__aeabi_dmul>
 8017112:	4602      	mov	r2, r0
 8017114:	460b      	mov	r3, r1
 8017116:	4630      	mov	r0, r6
 8017118:	4639      	mov	r1, r7
 801711a:	f7e9 fa75 	bl	8000608 <__aeabi_dmul>
 801711e:	465a      	mov	r2, fp
 8017120:	4604      	mov	r4, r0
 8017122:	460d      	mov	r5, r1
 8017124:	464b      	mov	r3, r9
 8017126:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801712a:	f7e9 f8b7 	bl	800029c <__adddf3>
 801712e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017132:	f7e9 fa69 	bl	8000608 <__aeabi_dmul>
 8017136:	4622      	mov	r2, r4
 8017138:	462b      	mov	r3, r5
 801713a:	f7e9 f8af 	bl	800029c <__adddf3>
 801713e:	465a      	mov	r2, fp
 8017140:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017144:	464b      	mov	r3, r9
 8017146:	4658      	mov	r0, fp
 8017148:	4649      	mov	r1, r9
 801714a:	f7e9 fa5d 	bl	8000608 <__aeabi_dmul>
 801714e:	4b6a      	ldr	r3, [pc, #424]	@ (80172f8 <__ieee754_pow+0x798>)
 8017150:	2200      	movs	r2, #0
 8017152:	4606      	mov	r6, r0
 8017154:	460f      	mov	r7, r1
 8017156:	f7e9 f8a1 	bl	800029c <__adddf3>
 801715a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801715e:	f7e9 f89d 	bl	800029c <__adddf3>
 8017162:	46d8      	mov	r8, fp
 8017164:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8017168:	460d      	mov	r5, r1
 801716a:	465a      	mov	r2, fp
 801716c:	460b      	mov	r3, r1
 801716e:	4640      	mov	r0, r8
 8017170:	4649      	mov	r1, r9
 8017172:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8017176:	f7e9 fa47 	bl	8000608 <__aeabi_dmul>
 801717a:	465c      	mov	r4, fp
 801717c:	4680      	mov	r8, r0
 801717e:	4689      	mov	r9, r1
 8017180:	4b5d      	ldr	r3, [pc, #372]	@ (80172f8 <__ieee754_pow+0x798>)
 8017182:	2200      	movs	r2, #0
 8017184:	4620      	mov	r0, r4
 8017186:	4629      	mov	r1, r5
 8017188:	f7e9 f886 	bl	8000298 <__aeabi_dsub>
 801718c:	4632      	mov	r2, r6
 801718e:	463b      	mov	r3, r7
 8017190:	f7e9 f882 	bl	8000298 <__aeabi_dsub>
 8017194:	4602      	mov	r2, r0
 8017196:	460b      	mov	r3, r1
 8017198:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801719c:	f7e9 f87c 	bl	8000298 <__aeabi_dsub>
 80171a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80171a4:	f7e9 fa30 	bl	8000608 <__aeabi_dmul>
 80171a8:	4622      	mov	r2, r4
 80171aa:	4606      	mov	r6, r0
 80171ac:	460f      	mov	r7, r1
 80171ae:	462b      	mov	r3, r5
 80171b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80171b4:	f7e9 fa28 	bl	8000608 <__aeabi_dmul>
 80171b8:	4602      	mov	r2, r0
 80171ba:	460b      	mov	r3, r1
 80171bc:	4630      	mov	r0, r6
 80171be:	4639      	mov	r1, r7
 80171c0:	f7e9 f86c 	bl	800029c <__adddf3>
 80171c4:	4606      	mov	r6, r0
 80171c6:	460f      	mov	r7, r1
 80171c8:	4602      	mov	r2, r0
 80171ca:	460b      	mov	r3, r1
 80171cc:	4640      	mov	r0, r8
 80171ce:	4649      	mov	r1, r9
 80171d0:	f7e9 f864 	bl	800029c <__adddf3>
 80171d4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80171d8:	a33b      	add	r3, pc, #236	@ (adr r3, 80172c8 <__ieee754_pow+0x768>)
 80171da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171de:	4658      	mov	r0, fp
 80171e0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80171e4:	460d      	mov	r5, r1
 80171e6:	f7e9 fa0f 	bl	8000608 <__aeabi_dmul>
 80171ea:	465c      	mov	r4, fp
 80171ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80171f0:	4642      	mov	r2, r8
 80171f2:	464b      	mov	r3, r9
 80171f4:	4620      	mov	r0, r4
 80171f6:	4629      	mov	r1, r5
 80171f8:	f7e9 f84e 	bl	8000298 <__aeabi_dsub>
 80171fc:	4602      	mov	r2, r0
 80171fe:	460b      	mov	r3, r1
 8017200:	4630      	mov	r0, r6
 8017202:	4639      	mov	r1, r7
 8017204:	f7e9 f848 	bl	8000298 <__aeabi_dsub>
 8017208:	a331      	add	r3, pc, #196	@ (adr r3, 80172d0 <__ieee754_pow+0x770>)
 801720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801720e:	f7e9 f9fb 	bl	8000608 <__aeabi_dmul>
 8017212:	a331      	add	r3, pc, #196	@ (adr r3, 80172d8 <__ieee754_pow+0x778>)
 8017214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017218:	4606      	mov	r6, r0
 801721a:	460f      	mov	r7, r1
 801721c:	4620      	mov	r0, r4
 801721e:	4629      	mov	r1, r5
 8017220:	f7e9 f9f2 	bl	8000608 <__aeabi_dmul>
 8017224:	4602      	mov	r2, r0
 8017226:	460b      	mov	r3, r1
 8017228:	4630      	mov	r0, r6
 801722a:	4639      	mov	r1, r7
 801722c:	f7e9 f836 	bl	800029c <__adddf3>
 8017230:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017232:	4b32      	ldr	r3, [pc, #200]	@ (80172fc <__ieee754_pow+0x79c>)
 8017234:	4413      	add	r3, r2
 8017236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801723a:	f7e9 f82f 	bl	800029c <__adddf3>
 801723e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017242:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017244:	f7e9 f976 	bl	8000534 <__aeabi_i2d>
 8017248:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801724a:	4b2d      	ldr	r3, [pc, #180]	@ (8017300 <__ieee754_pow+0x7a0>)
 801724c:	4413      	add	r3, r2
 801724e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017252:	4606      	mov	r6, r0
 8017254:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017258:	460f      	mov	r7, r1
 801725a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801725e:	f7e9 f81d 	bl	800029c <__adddf3>
 8017262:	4642      	mov	r2, r8
 8017264:	464b      	mov	r3, r9
 8017266:	f7e9 f819 	bl	800029c <__adddf3>
 801726a:	4632      	mov	r2, r6
 801726c:	463b      	mov	r3, r7
 801726e:	f7e9 f815 	bl	800029c <__adddf3>
 8017272:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8017276:	4632      	mov	r2, r6
 8017278:	463b      	mov	r3, r7
 801727a:	4658      	mov	r0, fp
 801727c:	460d      	mov	r5, r1
 801727e:	f7e9 f80b 	bl	8000298 <__aeabi_dsub>
 8017282:	4642      	mov	r2, r8
 8017284:	464b      	mov	r3, r9
 8017286:	f7e9 f807 	bl	8000298 <__aeabi_dsub>
 801728a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801728e:	f7e9 f803 	bl	8000298 <__aeabi_dsub>
 8017292:	465c      	mov	r4, fp
 8017294:	e036      	b.n	8017304 <__ieee754_pow+0x7a4>
 8017296:	bf00      	nop
 8017298:	4a454eef 	.word	0x4a454eef
 801729c:	3fca7e28 	.word	0x3fca7e28
 80172a0:	93c9db65 	.word	0x93c9db65
 80172a4:	3fcd864a 	.word	0x3fcd864a
 80172a8:	a91d4101 	.word	0xa91d4101
 80172ac:	3fd17460 	.word	0x3fd17460
 80172b0:	518f264d 	.word	0x518f264d
 80172b4:	3fd55555 	.word	0x3fd55555
 80172b8:	db6fabff 	.word	0xdb6fabff
 80172bc:	3fdb6db6 	.word	0x3fdb6db6
 80172c0:	33333303 	.word	0x33333303
 80172c4:	3fe33333 	.word	0x3fe33333
 80172c8:	e0000000 	.word	0xe0000000
 80172cc:	3feec709 	.word	0x3feec709
 80172d0:	dc3a03fd 	.word	0xdc3a03fd
 80172d4:	3feec709 	.word	0x3feec709
 80172d8:	145b01f5 	.word	0x145b01f5
 80172dc:	be3e2fe0 	.word	0xbe3e2fe0
 80172e0:	7ff00000 	.word	0x7ff00000
 80172e4:	43400000 	.word	0x43400000
 80172e8:	0003988e 	.word	0x0003988e
 80172ec:	000bb679 	.word	0x000bb679
 80172f0:	08018718 	.word	0x08018718
 80172f4:	3ff00000 	.word	0x3ff00000
 80172f8:	40080000 	.word	0x40080000
 80172fc:	080186f8 	.word	0x080186f8
 8017300:	08018708 	.word	0x08018708
 8017304:	4602      	mov	r2, r0
 8017306:	460b      	mov	r3, r1
 8017308:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801730c:	e5d6      	b.n	8016ebc <__ieee754_pow+0x35c>
 801730e:	f04f 0a01 	mov.w	sl, #1
 8017312:	e65e      	b.n	8016fd2 <__ieee754_pow+0x472>
 8017314:	a3b5      	add	r3, pc, #724	@ (adr r3, 80175ec <__ieee754_pow+0xa8c>)
 8017316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801731a:	4630      	mov	r0, r6
 801731c:	4639      	mov	r1, r7
 801731e:	f7e8 ffbd 	bl	800029c <__adddf3>
 8017322:	4642      	mov	r2, r8
 8017324:	e9cd 0100 	strd	r0, r1, [sp]
 8017328:	464b      	mov	r3, r9
 801732a:	4620      	mov	r0, r4
 801732c:	4629      	mov	r1, r5
 801732e:	f7e8 ffb3 	bl	8000298 <__aeabi_dsub>
 8017332:	4602      	mov	r2, r0
 8017334:	460b      	mov	r3, r1
 8017336:	e9dd 0100 	ldrd	r0, r1, [sp]
 801733a:	f7e9 fbf5 	bl	8000b28 <__aeabi_dcmpgt>
 801733e:	2800      	cmp	r0, #0
 8017340:	f47f adfe 	bne.w	8016f40 <__ieee754_pow+0x3e0>
 8017344:	4ba2      	ldr	r3, [pc, #648]	@ (80175d0 <__ieee754_pow+0xa70>)
 8017346:	e022      	b.n	801738e <__ieee754_pow+0x82e>
 8017348:	4ca2      	ldr	r4, [pc, #648]	@ (80175d4 <__ieee754_pow+0xa74>)
 801734a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801734e:	42a3      	cmp	r3, r4
 8017350:	d919      	bls.n	8017386 <__ieee754_pow+0x826>
 8017352:	4ba1      	ldr	r3, [pc, #644]	@ (80175d8 <__ieee754_pow+0xa78>)
 8017354:	440b      	add	r3, r1
 8017356:	4303      	orrs	r3, r0
 8017358:	d009      	beq.n	801736e <__ieee754_pow+0x80e>
 801735a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801735e:	2200      	movs	r2, #0
 8017360:	2300      	movs	r3, #0
 8017362:	f7e9 fbc3 	bl	8000aec <__aeabi_dcmplt>
 8017366:	3800      	subs	r0, #0
 8017368:	bf18      	it	ne
 801736a:	2001      	movne	r0, #1
 801736c:	e512      	b.n	8016d94 <__ieee754_pow+0x234>
 801736e:	4642      	mov	r2, r8
 8017370:	464b      	mov	r3, r9
 8017372:	f7e8 ff91 	bl	8000298 <__aeabi_dsub>
 8017376:	4632      	mov	r2, r6
 8017378:	463b      	mov	r3, r7
 801737a:	f7e9 fbcb 	bl	8000b14 <__aeabi_dcmpge>
 801737e:	2800      	cmp	r0, #0
 8017380:	d1eb      	bne.n	801735a <__ieee754_pow+0x7fa>
 8017382:	4b96      	ldr	r3, [pc, #600]	@ (80175dc <__ieee754_pow+0xa7c>)
 8017384:	e003      	b.n	801738e <__ieee754_pow+0x82e>
 8017386:	4a96      	ldr	r2, [pc, #600]	@ (80175e0 <__ieee754_pow+0xa80>)
 8017388:	4293      	cmp	r3, r2
 801738a:	f240 80e7 	bls.w	801755c <__ieee754_pow+0x9fc>
 801738e:	151b      	asrs	r3, r3, #20
 8017390:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8017394:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8017398:	fa4a fa03 	asr.w	sl, sl, r3
 801739c:	44da      	add	sl, fp
 801739e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80173a2:	4890      	ldr	r0, [pc, #576]	@ (80175e4 <__ieee754_pow+0xa84>)
 80173a4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80173a8:	4108      	asrs	r0, r1
 80173aa:	ea00 030a 	and.w	r3, r0, sl
 80173ae:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80173b2:	f1c1 0114 	rsb	r1, r1, #20
 80173b6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80173ba:	fa4a fa01 	asr.w	sl, sl, r1
 80173be:	f1bb 0f00 	cmp.w	fp, #0
 80173c2:	4640      	mov	r0, r8
 80173c4:	4649      	mov	r1, r9
 80173c6:	f04f 0200 	mov.w	r2, #0
 80173ca:	bfb8      	it	lt
 80173cc:	f1ca 0a00 	rsblt	sl, sl, #0
 80173d0:	f7e8 ff62 	bl	8000298 <__aeabi_dsub>
 80173d4:	4680      	mov	r8, r0
 80173d6:	4689      	mov	r9, r1
 80173d8:	4632      	mov	r2, r6
 80173da:	463b      	mov	r3, r7
 80173dc:	4640      	mov	r0, r8
 80173de:	4649      	mov	r1, r9
 80173e0:	f7e8 ff5c 	bl	800029c <__adddf3>
 80173e4:	2400      	movs	r4, #0
 80173e6:	a36a      	add	r3, pc, #424	@ (adr r3, 8017590 <__ieee754_pow+0xa30>)
 80173e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ec:	4620      	mov	r0, r4
 80173ee:	460d      	mov	r5, r1
 80173f0:	f7e9 f90a 	bl	8000608 <__aeabi_dmul>
 80173f4:	4642      	mov	r2, r8
 80173f6:	e9cd 0100 	strd	r0, r1, [sp]
 80173fa:	464b      	mov	r3, r9
 80173fc:	4620      	mov	r0, r4
 80173fe:	4629      	mov	r1, r5
 8017400:	f7e8 ff4a 	bl	8000298 <__aeabi_dsub>
 8017404:	4602      	mov	r2, r0
 8017406:	460b      	mov	r3, r1
 8017408:	4630      	mov	r0, r6
 801740a:	4639      	mov	r1, r7
 801740c:	f7e8 ff44 	bl	8000298 <__aeabi_dsub>
 8017410:	a361      	add	r3, pc, #388	@ (adr r3, 8017598 <__ieee754_pow+0xa38>)
 8017412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017416:	f7e9 f8f7 	bl	8000608 <__aeabi_dmul>
 801741a:	a361      	add	r3, pc, #388	@ (adr r3, 80175a0 <__ieee754_pow+0xa40>)
 801741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017420:	4680      	mov	r8, r0
 8017422:	4689      	mov	r9, r1
 8017424:	4620      	mov	r0, r4
 8017426:	4629      	mov	r1, r5
 8017428:	f7e9 f8ee 	bl	8000608 <__aeabi_dmul>
 801742c:	4602      	mov	r2, r0
 801742e:	460b      	mov	r3, r1
 8017430:	4640      	mov	r0, r8
 8017432:	4649      	mov	r1, r9
 8017434:	f7e8 ff32 	bl	800029c <__adddf3>
 8017438:	4604      	mov	r4, r0
 801743a:	460d      	mov	r5, r1
 801743c:	4602      	mov	r2, r0
 801743e:	460b      	mov	r3, r1
 8017440:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017444:	f7e8 ff2a 	bl	800029c <__adddf3>
 8017448:	e9dd 2300 	ldrd	r2, r3, [sp]
 801744c:	4680      	mov	r8, r0
 801744e:	4689      	mov	r9, r1
 8017450:	f7e8 ff22 	bl	8000298 <__aeabi_dsub>
 8017454:	4602      	mov	r2, r0
 8017456:	460b      	mov	r3, r1
 8017458:	4620      	mov	r0, r4
 801745a:	4629      	mov	r1, r5
 801745c:	f7e8 ff1c 	bl	8000298 <__aeabi_dsub>
 8017460:	4642      	mov	r2, r8
 8017462:	4606      	mov	r6, r0
 8017464:	460f      	mov	r7, r1
 8017466:	464b      	mov	r3, r9
 8017468:	4640      	mov	r0, r8
 801746a:	4649      	mov	r1, r9
 801746c:	f7e9 f8cc 	bl	8000608 <__aeabi_dmul>
 8017470:	a34d      	add	r3, pc, #308	@ (adr r3, 80175a8 <__ieee754_pow+0xa48>)
 8017472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017476:	4604      	mov	r4, r0
 8017478:	460d      	mov	r5, r1
 801747a:	f7e9 f8c5 	bl	8000608 <__aeabi_dmul>
 801747e:	a34c      	add	r3, pc, #304	@ (adr r3, 80175b0 <__ieee754_pow+0xa50>)
 8017480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017484:	f7e8 ff08 	bl	8000298 <__aeabi_dsub>
 8017488:	4622      	mov	r2, r4
 801748a:	462b      	mov	r3, r5
 801748c:	f7e9 f8bc 	bl	8000608 <__aeabi_dmul>
 8017490:	a349      	add	r3, pc, #292	@ (adr r3, 80175b8 <__ieee754_pow+0xa58>)
 8017492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017496:	f7e8 ff01 	bl	800029c <__adddf3>
 801749a:	4622      	mov	r2, r4
 801749c:	462b      	mov	r3, r5
 801749e:	f7e9 f8b3 	bl	8000608 <__aeabi_dmul>
 80174a2:	a347      	add	r3, pc, #284	@ (adr r3, 80175c0 <__ieee754_pow+0xa60>)
 80174a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174a8:	f7e8 fef6 	bl	8000298 <__aeabi_dsub>
 80174ac:	4622      	mov	r2, r4
 80174ae:	462b      	mov	r3, r5
 80174b0:	f7e9 f8aa 	bl	8000608 <__aeabi_dmul>
 80174b4:	a344      	add	r3, pc, #272	@ (adr r3, 80175c8 <__ieee754_pow+0xa68>)
 80174b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ba:	f7e8 feef 	bl	800029c <__adddf3>
 80174be:	4622      	mov	r2, r4
 80174c0:	462b      	mov	r3, r5
 80174c2:	f7e9 f8a1 	bl	8000608 <__aeabi_dmul>
 80174c6:	4602      	mov	r2, r0
 80174c8:	460b      	mov	r3, r1
 80174ca:	4640      	mov	r0, r8
 80174cc:	4649      	mov	r1, r9
 80174ce:	f7e8 fee3 	bl	8000298 <__aeabi_dsub>
 80174d2:	4604      	mov	r4, r0
 80174d4:	460d      	mov	r5, r1
 80174d6:	4602      	mov	r2, r0
 80174d8:	460b      	mov	r3, r1
 80174da:	4640      	mov	r0, r8
 80174dc:	4649      	mov	r1, r9
 80174de:	f7e9 f893 	bl	8000608 <__aeabi_dmul>
 80174e2:	2200      	movs	r2, #0
 80174e4:	e9cd 0100 	strd	r0, r1, [sp]
 80174e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80174ec:	4620      	mov	r0, r4
 80174ee:	4629      	mov	r1, r5
 80174f0:	f7e8 fed2 	bl	8000298 <__aeabi_dsub>
 80174f4:	4602      	mov	r2, r0
 80174f6:	460b      	mov	r3, r1
 80174f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80174fc:	f7e9 f9ae 	bl	800085c <__aeabi_ddiv>
 8017500:	4632      	mov	r2, r6
 8017502:	4604      	mov	r4, r0
 8017504:	460d      	mov	r5, r1
 8017506:	463b      	mov	r3, r7
 8017508:	4640      	mov	r0, r8
 801750a:	4649      	mov	r1, r9
 801750c:	f7e9 f87c 	bl	8000608 <__aeabi_dmul>
 8017510:	4632      	mov	r2, r6
 8017512:	463b      	mov	r3, r7
 8017514:	f7e8 fec2 	bl	800029c <__adddf3>
 8017518:	4602      	mov	r2, r0
 801751a:	460b      	mov	r3, r1
 801751c:	4620      	mov	r0, r4
 801751e:	4629      	mov	r1, r5
 8017520:	f7e8 feba 	bl	8000298 <__aeabi_dsub>
 8017524:	4642      	mov	r2, r8
 8017526:	464b      	mov	r3, r9
 8017528:	f7e8 feb6 	bl	8000298 <__aeabi_dsub>
 801752c:	460b      	mov	r3, r1
 801752e:	4602      	mov	r2, r0
 8017530:	492d      	ldr	r1, [pc, #180]	@ (80175e8 <__ieee754_pow+0xa88>)
 8017532:	2000      	movs	r0, #0
 8017534:	f7e8 feb0 	bl	8000298 <__aeabi_dsub>
 8017538:	ec41 0b10 	vmov	d0, r0, r1
 801753c:	ee10 3a90 	vmov	r3, s1
 8017540:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8017544:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8017548:	da0b      	bge.n	8017562 <__ieee754_pow+0xa02>
 801754a:	4650      	mov	r0, sl
 801754c:	f000 f85c 	bl	8017608 <scalbn>
 8017550:	ec51 0b10 	vmov	r0, r1, d0
 8017554:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017558:	f7ff bb6d 	b.w	8016c36 <__ieee754_pow+0xd6>
 801755c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8017560:	e73a      	b.n	80173d8 <__ieee754_pow+0x878>
 8017562:	ec51 0b10 	vmov	r0, r1, d0
 8017566:	4619      	mov	r1, r3
 8017568:	e7f4      	b.n	8017554 <__ieee754_pow+0x9f4>
 801756a:	491f      	ldr	r1, [pc, #124]	@ (80175e8 <__ieee754_pow+0xa88>)
 801756c:	2000      	movs	r0, #0
 801756e:	f7ff bb14 	b.w	8016b9a <__ieee754_pow+0x3a>
 8017572:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017576:	f7ff bb10 	b.w	8016b9a <__ieee754_pow+0x3a>
 801757a:	4630      	mov	r0, r6
 801757c:	4639      	mov	r1, r7
 801757e:	f7ff bb0c 	b.w	8016b9a <__ieee754_pow+0x3a>
 8017582:	460c      	mov	r4, r1
 8017584:	f7ff bb69 	b.w	8016c5a <__ieee754_pow+0xfa>
 8017588:	2400      	movs	r4, #0
 801758a:	f7ff bb4b 	b.w	8016c24 <__ieee754_pow+0xc4>
 801758e:	bf00      	nop
 8017590:	00000000 	.word	0x00000000
 8017594:	3fe62e43 	.word	0x3fe62e43
 8017598:	fefa39ef 	.word	0xfefa39ef
 801759c:	3fe62e42 	.word	0x3fe62e42
 80175a0:	0ca86c39 	.word	0x0ca86c39
 80175a4:	be205c61 	.word	0xbe205c61
 80175a8:	72bea4d0 	.word	0x72bea4d0
 80175ac:	3e663769 	.word	0x3e663769
 80175b0:	c5d26bf1 	.word	0xc5d26bf1
 80175b4:	3ebbbd41 	.word	0x3ebbbd41
 80175b8:	af25de2c 	.word	0xaf25de2c
 80175bc:	3f11566a 	.word	0x3f11566a
 80175c0:	16bebd93 	.word	0x16bebd93
 80175c4:	3f66c16c 	.word	0x3f66c16c
 80175c8:	5555553e 	.word	0x5555553e
 80175cc:	3fc55555 	.word	0x3fc55555
 80175d0:	40900000 	.word	0x40900000
 80175d4:	4090cbff 	.word	0x4090cbff
 80175d8:	3f6f3400 	.word	0x3f6f3400
 80175dc:	4090cc00 	.word	0x4090cc00
 80175e0:	3fe00000 	.word	0x3fe00000
 80175e4:	fff00000 	.word	0xfff00000
 80175e8:	3ff00000 	.word	0x3ff00000
 80175ec:	652b82fe 	.word	0x652b82fe
 80175f0:	3c971547 	.word	0x3c971547

080175f4 <fabs>:
 80175f4:	ec51 0b10 	vmov	r0, r1, d0
 80175f8:	4602      	mov	r2, r0
 80175fa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80175fe:	ec43 2b10 	vmov	d0, r2, r3
 8017602:	4770      	bx	lr
 8017604:	0000      	movs	r0, r0
	...

08017608 <scalbn>:
 8017608:	b570      	push	{r4, r5, r6, lr}
 801760a:	ec55 4b10 	vmov	r4, r5, d0
 801760e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8017612:	4606      	mov	r6, r0
 8017614:	462b      	mov	r3, r5
 8017616:	b991      	cbnz	r1, 801763e <scalbn+0x36>
 8017618:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801761c:	4323      	orrs	r3, r4
 801761e:	d03b      	beq.n	8017698 <scalbn+0x90>
 8017620:	4b33      	ldr	r3, [pc, #204]	@ (80176f0 <scalbn+0xe8>)
 8017622:	4620      	mov	r0, r4
 8017624:	4629      	mov	r1, r5
 8017626:	2200      	movs	r2, #0
 8017628:	f7e8 ffee 	bl	8000608 <__aeabi_dmul>
 801762c:	4b31      	ldr	r3, [pc, #196]	@ (80176f4 <scalbn+0xec>)
 801762e:	429e      	cmp	r6, r3
 8017630:	4604      	mov	r4, r0
 8017632:	460d      	mov	r5, r1
 8017634:	da0f      	bge.n	8017656 <scalbn+0x4e>
 8017636:	a326      	add	r3, pc, #152	@ (adr r3, 80176d0 <scalbn+0xc8>)
 8017638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801763c:	e01e      	b.n	801767c <scalbn+0x74>
 801763e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8017642:	4291      	cmp	r1, r2
 8017644:	d10b      	bne.n	801765e <scalbn+0x56>
 8017646:	4622      	mov	r2, r4
 8017648:	4620      	mov	r0, r4
 801764a:	4629      	mov	r1, r5
 801764c:	f7e8 fe26 	bl	800029c <__adddf3>
 8017650:	4604      	mov	r4, r0
 8017652:	460d      	mov	r5, r1
 8017654:	e020      	b.n	8017698 <scalbn+0x90>
 8017656:	460b      	mov	r3, r1
 8017658:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801765c:	3936      	subs	r1, #54	@ 0x36
 801765e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8017662:	4296      	cmp	r6, r2
 8017664:	dd0d      	ble.n	8017682 <scalbn+0x7a>
 8017666:	2d00      	cmp	r5, #0
 8017668:	a11b      	add	r1, pc, #108	@ (adr r1, 80176d8 <scalbn+0xd0>)
 801766a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801766e:	da02      	bge.n	8017676 <scalbn+0x6e>
 8017670:	a11b      	add	r1, pc, #108	@ (adr r1, 80176e0 <scalbn+0xd8>)
 8017672:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017676:	a318      	add	r3, pc, #96	@ (adr r3, 80176d8 <scalbn+0xd0>)
 8017678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801767c:	f7e8 ffc4 	bl	8000608 <__aeabi_dmul>
 8017680:	e7e6      	b.n	8017650 <scalbn+0x48>
 8017682:	1872      	adds	r2, r6, r1
 8017684:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8017688:	428a      	cmp	r2, r1
 801768a:	dcec      	bgt.n	8017666 <scalbn+0x5e>
 801768c:	2a00      	cmp	r2, #0
 801768e:	dd06      	ble.n	801769e <scalbn+0x96>
 8017690:	f36f 531e 	bfc	r3, #20, #11
 8017694:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017698:	ec45 4b10 	vmov	d0, r4, r5
 801769c:	bd70      	pop	{r4, r5, r6, pc}
 801769e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80176a2:	da08      	bge.n	80176b6 <scalbn+0xae>
 80176a4:	2d00      	cmp	r5, #0
 80176a6:	a10a      	add	r1, pc, #40	@ (adr r1, 80176d0 <scalbn+0xc8>)
 80176a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80176ac:	dac3      	bge.n	8017636 <scalbn+0x2e>
 80176ae:	a10e      	add	r1, pc, #56	@ (adr r1, 80176e8 <scalbn+0xe0>)
 80176b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80176b4:	e7bf      	b.n	8017636 <scalbn+0x2e>
 80176b6:	3236      	adds	r2, #54	@ 0x36
 80176b8:	f36f 531e 	bfc	r3, #20, #11
 80176bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80176c0:	4620      	mov	r0, r4
 80176c2:	4b0d      	ldr	r3, [pc, #52]	@ (80176f8 <scalbn+0xf0>)
 80176c4:	4629      	mov	r1, r5
 80176c6:	2200      	movs	r2, #0
 80176c8:	e7d8      	b.n	801767c <scalbn+0x74>
 80176ca:	bf00      	nop
 80176cc:	f3af 8000 	nop.w
 80176d0:	c2f8f359 	.word	0xc2f8f359
 80176d4:	01a56e1f 	.word	0x01a56e1f
 80176d8:	8800759c 	.word	0x8800759c
 80176dc:	7e37e43c 	.word	0x7e37e43c
 80176e0:	8800759c 	.word	0x8800759c
 80176e4:	fe37e43c 	.word	0xfe37e43c
 80176e8:	c2f8f359 	.word	0xc2f8f359
 80176ec:	81a56e1f 	.word	0x81a56e1f
 80176f0:	43500000 	.word	0x43500000
 80176f4:	ffff3cb0 	.word	0xffff3cb0
 80176f8:	3c900000 	.word	0x3c900000

080176fc <with_errno>:
 80176fc:	b510      	push	{r4, lr}
 80176fe:	ed2d 8b02 	vpush	{d8}
 8017702:	eeb0 8a40 	vmov.f32	s16, s0
 8017706:	eef0 8a60 	vmov.f32	s17, s1
 801770a:	4604      	mov	r4, r0
 801770c:	f7fe fb46 	bl	8015d9c <__errno>
 8017710:	eeb0 0a48 	vmov.f32	s0, s16
 8017714:	eef0 0a68 	vmov.f32	s1, s17
 8017718:	ecbd 8b02 	vpop	{d8}
 801771c:	6004      	str	r4, [r0, #0]
 801771e:	bd10      	pop	{r4, pc}

08017720 <xflow>:
 8017720:	4603      	mov	r3, r0
 8017722:	b507      	push	{r0, r1, r2, lr}
 8017724:	ec51 0b10 	vmov	r0, r1, d0
 8017728:	b183      	cbz	r3, 801774c <xflow+0x2c>
 801772a:	4602      	mov	r2, r0
 801772c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017730:	e9cd 2300 	strd	r2, r3, [sp]
 8017734:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017738:	f7e8 ff66 	bl	8000608 <__aeabi_dmul>
 801773c:	ec41 0b10 	vmov	d0, r0, r1
 8017740:	2022      	movs	r0, #34	@ 0x22
 8017742:	b003      	add	sp, #12
 8017744:	f85d eb04 	ldr.w	lr, [sp], #4
 8017748:	f7ff bfd8 	b.w	80176fc <with_errno>
 801774c:	4602      	mov	r2, r0
 801774e:	460b      	mov	r3, r1
 8017750:	e7ee      	b.n	8017730 <xflow+0x10>
 8017752:	0000      	movs	r0, r0
 8017754:	0000      	movs	r0, r0
	...

08017758 <__math_uflow>:
 8017758:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017760 <__math_uflow+0x8>
 801775c:	f7ff bfe0 	b.w	8017720 <xflow>
 8017760:	00000000 	.word	0x00000000
 8017764:	10000000 	.word	0x10000000

08017768 <__math_oflow>:
 8017768:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017770 <__math_oflow+0x8>
 801776c:	f7ff bfd8 	b.w	8017720 <xflow>
 8017770:	00000000 	.word	0x00000000
 8017774:	70000000 	.word	0x70000000

08017778 <__ieee754_sqrt>:
 8017778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801777c:	4a66      	ldr	r2, [pc, #408]	@ (8017918 <__ieee754_sqrt+0x1a0>)
 801777e:	ec55 4b10 	vmov	r4, r5, d0
 8017782:	43aa      	bics	r2, r5
 8017784:	462b      	mov	r3, r5
 8017786:	4621      	mov	r1, r4
 8017788:	d110      	bne.n	80177ac <__ieee754_sqrt+0x34>
 801778a:	4622      	mov	r2, r4
 801778c:	4620      	mov	r0, r4
 801778e:	4629      	mov	r1, r5
 8017790:	f7e8 ff3a 	bl	8000608 <__aeabi_dmul>
 8017794:	4602      	mov	r2, r0
 8017796:	460b      	mov	r3, r1
 8017798:	4620      	mov	r0, r4
 801779a:	4629      	mov	r1, r5
 801779c:	f7e8 fd7e 	bl	800029c <__adddf3>
 80177a0:	4604      	mov	r4, r0
 80177a2:	460d      	mov	r5, r1
 80177a4:	ec45 4b10 	vmov	d0, r4, r5
 80177a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177ac:	2d00      	cmp	r5, #0
 80177ae:	dc0e      	bgt.n	80177ce <__ieee754_sqrt+0x56>
 80177b0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80177b4:	4322      	orrs	r2, r4
 80177b6:	d0f5      	beq.n	80177a4 <__ieee754_sqrt+0x2c>
 80177b8:	b19d      	cbz	r5, 80177e2 <__ieee754_sqrt+0x6a>
 80177ba:	4622      	mov	r2, r4
 80177bc:	4620      	mov	r0, r4
 80177be:	4629      	mov	r1, r5
 80177c0:	f7e8 fd6a 	bl	8000298 <__aeabi_dsub>
 80177c4:	4602      	mov	r2, r0
 80177c6:	460b      	mov	r3, r1
 80177c8:	f7e9 f848 	bl	800085c <__aeabi_ddiv>
 80177cc:	e7e8      	b.n	80177a0 <__ieee754_sqrt+0x28>
 80177ce:	152a      	asrs	r2, r5, #20
 80177d0:	d115      	bne.n	80177fe <__ieee754_sqrt+0x86>
 80177d2:	2000      	movs	r0, #0
 80177d4:	e009      	b.n	80177ea <__ieee754_sqrt+0x72>
 80177d6:	0acb      	lsrs	r3, r1, #11
 80177d8:	3a15      	subs	r2, #21
 80177da:	0549      	lsls	r1, r1, #21
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d0fa      	beq.n	80177d6 <__ieee754_sqrt+0x5e>
 80177e0:	e7f7      	b.n	80177d2 <__ieee754_sqrt+0x5a>
 80177e2:	462a      	mov	r2, r5
 80177e4:	e7fa      	b.n	80177dc <__ieee754_sqrt+0x64>
 80177e6:	005b      	lsls	r3, r3, #1
 80177e8:	3001      	adds	r0, #1
 80177ea:	02dc      	lsls	r4, r3, #11
 80177ec:	d5fb      	bpl.n	80177e6 <__ieee754_sqrt+0x6e>
 80177ee:	1e44      	subs	r4, r0, #1
 80177f0:	1b12      	subs	r2, r2, r4
 80177f2:	f1c0 0420 	rsb	r4, r0, #32
 80177f6:	fa21 f404 	lsr.w	r4, r1, r4
 80177fa:	4323      	orrs	r3, r4
 80177fc:	4081      	lsls	r1, r0
 80177fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017802:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8017806:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801780a:	07d2      	lsls	r2, r2, #31
 801780c:	bf5c      	itt	pl
 801780e:	005b      	lslpl	r3, r3, #1
 8017810:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8017814:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017818:	bf58      	it	pl
 801781a:	0049      	lslpl	r1, r1, #1
 801781c:	2600      	movs	r6, #0
 801781e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8017822:	107f      	asrs	r7, r7, #1
 8017824:	0049      	lsls	r1, r1, #1
 8017826:	2016      	movs	r0, #22
 8017828:	4632      	mov	r2, r6
 801782a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801782e:	1915      	adds	r5, r2, r4
 8017830:	429d      	cmp	r5, r3
 8017832:	bfde      	ittt	le
 8017834:	192a      	addle	r2, r5, r4
 8017836:	1b5b      	suble	r3, r3, r5
 8017838:	1936      	addle	r6, r6, r4
 801783a:	0fcd      	lsrs	r5, r1, #31
 801783c:	3801      	subs	r0, #1
 801783e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8017842:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017846:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801784a:	d1f0      	bne.n	801782e <__ieee754_sqrt+0xb6>
 801784c:	4605      	mov	r5, r0
 801784e:	2420      	movs	r4, #32
 8017850:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8017854:	4293      	cmp	r3, r2
 8017856:	eb0c 0e00 	add.w	lr, ip, r0
 801785a:	dc02      	bgt.n	8017862 <__ieee754_sqrt+0xea>
 801785c:	d113      	bne.n	8017886 <__ieee754_sqrt+0x10e>
 801785e:	458e      	cmp	lr, r1
 8017860:	d811      	bhi.n	8017886 <__ieee754_sqrt+0x10e>
 8017862:	f1be 0f00 	cmp.w	lr, #0
 8017866:	eb0e 000c 	add.w	r0, lr, ip
 801786a:	da3f      	bge.n	80178ec <__ieee754_sqrt+0x174>
 801786c:	2800      	cmp	r0, #0
 801786e:	db3d      	blt.n	80178ec <__ieee754_sqrt+0x174>
 8017870:	f102 0801 	add.w	r8, r2, #1
 8017874:	1a9b      	subs	r3, r3, r2
 8017876:	458e      	cmp	lr, r1
 8017878:	bf88      	it	hi
 801787a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801787e:	eba1 010e 	sub.w	r1, r1, lr
 8017882:	4465      	add	r5, ip
 8017884:	4642      	mov	r2, r8
 8017886:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801788a:	3c01      	subs	r4, #1
 801788c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8017890:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017894:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8017898:	d1dc      	bne.n	8017854 <__ieee754_sqrt+0xdc>
 801789a:	4319      	orrs	r1, r3
 801789c:	d01b      	beq.n	80178d6 <__ieee754_sqrt+0x15e>
 801789e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 801791c <__ieee754_sqrt+0x1a4>
 80178a2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8017920 <__ieee754_sqrt+0x1a8>
 80178a6:	e9da 0100 	ldrd	r0, r1, [sl]
 80178aa:	e9db 2300 	ldrd	r2, r3, [fp]
 80178ae:	f7e8 fcf3 	bl	8000298 <__aeabi_dsub>
 80178b2:	e9da 8900 	ldrd	r8, r9, [sl]
 80178b6:	4602      	mov	r2, r0
 80178b8:	460b      	mov	r3, r1
 80178ba:	4640      	mov	r0, r8
 80178bc:	4649      	mov	r1, r9
 80178be:	f7e9 f91f 	bl	8000b00 <__aeabi_dcmple>
 80178c2:	b140      	cbz	r0, 80178d6 <__ieee754_sqrt+0x15e>
 80178c4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80178c8:	e9da 0100 	ldrd	r0, r1, [sl]
 80178cc:	e9db 2300 	ldrd	r2, r3, [fp]
 80178d0:	d10e      	bne.n	80178f0 <__ieee754_sqrt+0x178>
 80178d2:	3601      	adds	r6, #1
 80178d4:	4625      	mov	r5, r4
 80178d6:	1073      	asrs	r3, r6, #1
 80178d8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80178dc:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80178e0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80178e4:	086b      	lsrs	r3, r5, #1
 80178e6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80178ea:	e759      	b.n	80177a0 <__ieee754_sqrt+0x28>
 80178ec:	4690      	mov	r8, r2
 80178ee:	e7c1      	b.n	8017874 <__ieee754_sqrt+0xfc>
 80178f0:	f7e8 fcd4 	bl	800029c <__adddf3>
 80178f4:	e9da 8900 	ldrd	r8, r9, [sl]
 80178f8:	4602      	mov	r2, r0
 80178fa:	460b      	mov	r3, r1
 80178fc:	4640      	mov	r0, r8
 80178fe:	4649      	mov	r1, r9
 8017900:	f7e9 f8f4 	bl	8000aec <__aeabi_dcmplt>
 8017904:	b120      	cbz	r0, 8017910 <__ieee754_sqrt+0x198>
 8017906:	1cab      	adds	r3, r5, #2
 8017908:	bf08      	it	eq
 801790a:	3601      	addeq	r6, #1
 801790c:	3502      	adds	r5, #2
 801790e:	e7e2      	b.n	80178d6 <__ieee754_sqrt+0x15e>
 8017910:	1c6b      	adds	r3, r5, #1
 8017912:	f023 0501 	bic.w	r5, r3, #1
 8017916:	e7de      	b.n	80178d6 <__ieee754_sqrt+0x15e>
 8017918:	7ff00000 	.word	0x7ff00000
 801791c:	08018730 	.word	0x08018730
 8017920:	08018728 	.word	0x08018728

08017924 <_init>:
 8017924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017926:	bf00      	nop
 8017928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801792a:	bc08      	pop	{r3}
 801792c:	469e      	mov	lr, r3
 801792e:	4770      	bx	lr

08017930 <_fini>:
 8017930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017932:	bf00      	nop
 8017934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017936:	bc08      	pop	{r3}
 8017938:	469e      	mov	lr, r3
 801793a:	4770      	bx	lr
