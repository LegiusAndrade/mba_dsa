
fw_acquisition_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001672c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e20  080168d0  080168d0  000178d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080176f0  080176f0  00019284  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080176f0  080176f0  000186f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080176f8  080176f8  00019284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080176f8  080176f8  000186f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080176fc  080176fc  000186fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  20000000  08017700  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015160  20000284  08017984  00019284  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200153e4  08017984  000193e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d671  00000000  00000000  000192b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006340  00000000  00000000  00056925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000036d8  00000000  00000000  0005cc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002aa0  00000000  00000000  00060340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f1c0  00000000  00000000  00062de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003757b  00000000  00000000  00081fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af43a  00000000  00000000  000b951b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168955  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fb14  00000000  00000000  00168998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  001784ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000284 	.word	0x20000284
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080168b4 	.word	0x080168b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000288 	.word	0x20000288
 80001dc:	080168b4 	.word	0x080168b4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b988 	b.w	8000fa0 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	468e      	mov	lr, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d962      	bls.n	8000d84 <__udivmoddi4+0xdc>
 8000cbe:	fab2 f682 	clz	r6, r2
 8000cc2:	b14e      	cbz	r6, 8000cd8 <__udivmoddi4+0x30>
 8000cc4:	f1c6 0320 	rsb	r3, r6, #32
 8000cc8:	fa01 f806 	lsl.w	r8, r1, r6
 8000ccc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cd0:	40b7      	lsls	r7, r6
 8000cd2:	ea43 0808 	orr.w	r8, r3, r8
 8000cd6:	40b4      	lsls	r4, r6
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	fa1f fc87 	uxth.w	ip, r7
 8000ce0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ce4:	0c23      	lsrs	r3, r4, #16
 8000ce6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cee:	fb01 f20c 	mul.w	r2, r1, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cfc:	f080 80ea 	bcs.w	8000ed4 <__udivmoddi4+0x22c>
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f240 80e7 	bls.w	8000ed4 <__udivmoddi4+0x22c>
 8000d06:	3902      	subs	r1, #2
 8000d08:	443b      	add	r3, r7
 8000d0a:	1a9a      	subs	r2, r3, r2
 8000d0c:	b2a3      	uxth	r3, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1e:	459c      	cmp	ip, r3
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x8e>
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	f080 80d6 	bcs.w	8000ed8 <__udivmoddi4+0x230>
 8000d2c:	459c      	cmp	ip, r3
 8000d2e:	f240 80d3 	bls.w	8000ed8 <__udivmoddi4+0x230>
 8000d32:	443b      	add	r3, r7
 8000d34:	3802      	subs	r0, #2
 8000d36:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3a:	eba3 030c 	sub.w	r3, r3, ip
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11d      	cbz	r5, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40f3      	lsrs	r3, r6
 8000d44:	2200      	movs	r2, #0
 8000d46:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d905      	bls.n	8000d5e <__udivmoddi4+0xb6>
 8000d52:	b10d      	cbz	r5, 8000d58 <__udivmoddi4+0xb0>
 8000d54:	e9c5 0100 	strd	r0, r1, [r5]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e7f5      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d5e:	fab3 f183 	clz	r1, r3
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d146      	bne.n	8000df4 <__udivmoddi4+0x14c>
 8000d66:	4573      	cmp	r3, lr
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xc8>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 8105 	bhi.w	8000f7a <__udivmoddi4+0x2d2>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	4690      	mov	r8, r2
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d0e5      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d7e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d82:	e7e2      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f000 8090 	beq.w	8000eaa <__udivmoddi4+0x202>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	f040 80a4 	bne.w	8000edc <__udivmoddi4+0x234>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9c:	b280      	uxth	r0, r0
 8000d9e:	b2bc      	uxth	r4, r7
 8000da0:	2101      	movs	r1, #1
 8000da2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000da6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dae:	fb04 f20c 	mul.w	r2, r4, ip
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x11e>
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x11c>
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	f200 80e0 	bhi.w	8000f84 <__udivmoddi4+0x2dc>
 8000dc4:	46c4      	mov	ip, r8
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dcc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dd0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dd4:	fb02 f404 	mul.w	r4, r2, r4
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x144>
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	f102 30ff 	add.w	r0, r2, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x142>
 8000de4:	429c      	cmp	r4, r3
 8000de6:	f200 80ca 	bhi.w	8000f7e <__udivmoddi4+0x2d6>
 8000dea:	4602      	mov	r2, r0
 8000dec:	1b1b      	subs	r3, r3, r4
 8000dee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000df2:	e7a5      	b.n	8000d40 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	fa0e f401 	lsl.w	r4, lr, r1
 8000e04:	fa20 f306 	lsr.w	r3, r0, r6
 8000e08:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e0c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e10:	4323      	orrs	r3, r4
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	fa1f fc87 	uxth.w	ip, r7
 8000e1a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e1e:	0c1c      	lsrs	r4, r3, #16
 8000e20:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e24:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e28:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	d909      	bls.n	8000e48 <__udivmoddi4+0x1a0>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	f080 809c 	bcs.w	8000f76 <__udivmoddi4+0x2ce>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f240 8099 	bls.w	8000f76 <__udivmoddi4+0x2ce>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	eba4 040e 	sub.w	r4, r4, lr
 8000e4c:	fa1f fe83 	uxth.w	lr, r3
 8000e50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e54:	fb09 4413 	mls	r4, r9, r3, r4
 8000e58:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e5c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e60:	45a4      	cmp	ip, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1ce>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e6a:	f080 8082 	bcs.w	8000f72 <__udivmoddi4+0x2ca>
 8000e6e:	45a4      	cmp	ip, r4
 8000e70:	d97f      	bls.n	8000f72 <__udivmoddi4+0x2ca>
 8000e72:	3b02      	subs	r3, #2
 8000e74:	443c      	add	r4, r7
 8000e76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e7a:	eba4 040c 	sub.w	r4, r4, ip
 8000e7e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e82:	4564      	cmp	r4, ip
 8000e84:	4673      	mov	r3, lr
 8000e86:	46e1      	mov	r9, ip
 8000e88:	d362      	bcc.n	8000f50 <__udivmoddi4+0x2a8>
 8000e8a:	d05f      	beq.n	8000f4c <__udivmoddi4+0x2a4>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x1fe>
 8000e8e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e92:	eb64 0409 	sbc.w	r4, r4, r9
 8000e96:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e9e:	431e      	orrs	r6, r3
 8000ea0:	40cc      	lsrs	r4, r1
 8000ea2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	e74f      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000eaa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eae:	0c01      	lsrs	r1, r0, #16
 8000eb0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000eb4:	b280      	uxth	r0, r0
 8000eb6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	463c      	mov	r4, r7
 8000ec0:	46b8      	mov	r8, r7
 8000ec2:	46be      	mov	lr, r7
 8000ec4:	2620      	movs	r6, #32
 8000ec6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eca:	eba2 0208 	sub.w	r2, r2, r8
 8000ece:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ed2:	e766      	b.n	8000da2 <__udivmoddi4+0xfa>
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	e718      	b.n	8000d0a <__udivmoddi4+0x62>
 8000ed8:	4610      	mov	r0, r2
 8000eda:	e72c      	b.n	8000d36 <__udivmoddi4+0x8e>
 8000edc:	f1c6 0220 	rsb	r2, r6, #32
 8000ee0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ee4:	40b7      	lsls	r7, r6
 8000ee6:	40b1      	lsls	r1, r6
 8000ee8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ef6:	b2bc      	uxth	r4, r7
 8000ef8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb08 f904 	mul.w	r9, r8, r4
 8000f06:	40b0      	lsls	r0, r6
 8000f08:	4589      	cmp	r9, r1
 8000f0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f0e:	b280      	uxth	r0, r0
 8000f10:	d93e      	bls.n	8000f90 <__udivmoddi4+0x2e8>
 8000f12:	1879      	adds	r1, r7, r1
 8000f14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f18:	d201      	bcs.n	8000f1e <__udivmoddi4+0x276>
 8000f1a:	4589      	cmp	r9, r1
 8000f1c:	d81f      	bhi.n	8000f5e <__udivmoddi4+0x2b6>
 8000f1e:	eba1 0109 	sub.w	r1, r1, r9
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fb09 f804 	mul.w	r8, r9, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	4542      	cmp	r2, r8
 8000f36:	d229      	bcs.n	8000f8c <__udivmoddi4+0x2e4>
 8000f38:	18ba      	adds	r2, r7, r2
 8000f3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f3e:	d2c4      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f40:	4542      	cmp	r2, r8
 8000f42:	d2c2      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f44:	f1a9 0102 	sub.w	r1, r9, #2
 8000f48:	443a      	add	r2, r7
 8000f4a:	e7be      	b.n	8000eca <__udivmoddi4+0x222>
 8000f4c:	45f0      	cmp	r8, lr
 8000f4e:	d29d      	bcs.n	8000e8c <__udivmoddi4+0x1e4>
 8000f50:	ebbe 0302 	subs.w	r3, lr, r2
 8000f54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f58:	3801      	subs	r0, #1
 8000f5a:	46e1      	mov	r9, ip
 8000f5c:	e796      	b.n	8000e8c <__udivmoddi4+0x1e4>
 8000f5e:	eba7 0909 	sub.w	r9, r7, r9
 8000f62:	4449      	add	r1, r9
 8000f64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6c:	fb09 f804 	mul.w	r8, r9, r4
 8000f70:	e7db      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f72:	4673      	mov	r3, lr
 8000f74:	e77f      	b.n	8000e76 <__udivmoddi4+0x1ce>
 8000f76:	4650      	mov	r0, sl
 8000f78:	e766      	b.n	8000e48 <__udivmoddi4+0x1a0>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e6fd      	b.n	8000d7a <__udivmoddi4+0xd2>
 8000f7e:	443b      	add	r3, r7
 8000f80:	3a02      	subs	r2, #2
 8000f82:	e733      	b.n	8000dec <__udivmoddi4+0x144>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	443b      	add	r3, r7
 8000f8a:	e71c      	b.n	8000dc6 <__udivmoddi4+0x11e>
 8000f8c:	4649      	mov	r1, r9
 8000f8e:	e79c      	b.n	8000eca <__udivmoddi4+0x222>
 8000f90:	eba1 0109 	sub.w	r1, r1, r9
 8000f94:	46c4      	mov	ip, r8
 8000f96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9a:	fb09 f804 	mul.w	r8, r9, r4
 8000f9e:	e7c4      	b.n	8000f2a <__udivmoddi4+0x282>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fb0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d013      	beq.n	8000fe4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fbc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fc0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000fc4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00b      	beq.n	8000fe4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fcc:	e000      	b.n	8000fd0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fd0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f9      	beq.n	8000fce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fda:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write( int file, char * ptr, int len )
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
    for( int i = 0; i < len; i++ )
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	e009      	b.n	8001018 <_write+0x26>
    {
        ITM_SendChar( *ptr++ );
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	60ba      	str	r2, [r7, #8]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ffc9 	bl	8000fa4 <ITM_SendChar>
    for( int i = 0; i < len; i++ )
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbf1      	blt.n	8001004 <_write+0x12>
    }
    return len;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main( void )
{
 800102c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102e:	b0d3      	sub	sp, #332	@ 0x14c
 8001030:	af0a      	add	r7, sp, #40	@ 0x28
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001032:	f00b faed 	bl	800c610 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001036:	f000 f96f 	bl	8001318 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800103a:	f000 fa5f 	bl	80014fc <MX_GPIO_Init>
    MX_TIM1_Init();
 800103e:	f000 fa0d 	bl	800145c <MX_TIM1_Init>
    MX_SPI1_Init();
 8001042:	f000 f9d5 	bl	80013f0 <MX_SPI1_Init>
    MX_MEMS_Init();
 8001046:	f00f fc63 	bl	8010910 <MX_MEMS_Init>
    /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT( &htim1 );
 800104a:	48a9      	ldr	r0, [pc, #676]	@ (80012f0 <main+0x2c4>)
 800104c:	f00e fda6 	bl	800fb9c <HAL_TIM_Base_Start_IT>
    IKS4A1_MOTION_SENSOR_SetOutputDataRate( IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO, 1920.0f );
 8001050:	ed9f 0aa8 	vldr	s0, [pc, #672]	@ 80012f4 <main+0x2c8>
 8001054:	2102      	movs	r1, #2
 8001056:	2001      	movs	r0, #1
 8001058:	f00a fd9c 	bl	800bb94 <IKS4A1_MOTION_SENSOR_SetOutputDataRate>
    IKS4A1_MOTION_SENSOR_SetOutputDataRate( IKS4A1_LSM6DSO16IS_0, MOTION_ACCELERO, 1667.0f );
 800105c:	ed9f 0aa6 	vldr	s0, [pc, #664]	@ 80012f8 <main+0x2cc>
 8001060:	2102      	movs	r1, #2
 8001062:	2003      	movs	r0, #3
 8001064:	f00a fd96 	bl	800bb94 <IKS4A1_MOTION_SENSOR_SetOutputDataRate>
    IKS4A1_MOTION_SENSOR_SetOutputDataRate( IKS4A1_LSM6DSV16X_0, MOTION_GYRO, 1920.0f );
 8001068:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 80012f4 <main+0x2c8>
 800106c:	2101      	movs	r1, #1
 800106e:	2001      	movs	r0, #1
 8001070:	f00a fd90 	bl	800bb94 <IKS4A1_MOTION_SENSOR_SetOutputDataRate>
    IKS4A1_MOTION_SENSOR_SetOutputDataRate( IKS4A1_LSM6DSO16IS_0, MOTION_GYRO, 1667.0f );
 8001074:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 80012f8 <main+0x2cc>
 8001078:	2101      	movs	r1, #1
 800107a:	2003      	movs	r0, #3
 800107c:	f00a fd8a 	bl	800bb94 <IKS4A1_MOTION_SENSOR_SetOutputDataRate>
    IKS4A1_MOTION_SENSOR_SetOutputDataRate( IKS4A1_LIS2MDL_0, MOTION_MAGNETO, 100.0f );
 8001080:	ed9f 0a9e 	vldr	s0, [pc, #632]	@ 80012fc <main+0x2d0>
 8001084:	2104      	movs	r1, #4
 8001086:	2000      	movs	r0, #0
 8001088:	f00a fd84 	bl	800bb94 <IKS4A1_MOTION_SENSOR_SetOutputDataRate>
    IKS4A1_MOTION_SENSOR_SetFullScale( IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO, 2 );
 800108c:	2202      	movs	r2, #2
 800108e:	2102      	movs	r1, #2
 8001090:	2001      	movs	r0, #1
 8001092:	f00a fdc5 	bl	800bc20 <IKS4A1_MOTION_SENSOR_SetFullScale>
    IKS4A1_MOTION_SENSOR_SetFullScale( IKS4A1_LSM6DSO16IS_0, MOTION_ACCELERO, 2 );
 8001096:	2202      	movs	r2, #2
 8001098:	2102      	movs	r1, #2
 800109a:	2003      	movs	r0, #3
 800109c:	f00a fdc0 	bl	800bc20 <IKS4A1_MOTION_SENSOR_SetFullScale>
    IKS4A1_MOTION_SENSOR_SetFullScale( IKS4A1_LSM6DSV16X_0, MOTION_GYRO, 2000 );
 80010a0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010a4:	2101      	movs	r1, #1
 80010a6:	2001      	movs	r0, #1
 80010a8:	f00a fdba 	bl	800bc20 <IKS4A1_MOTION_SENSOR_SetFullScale>
    IKS4A1_MOTION_SENSOR_SetFullScale( IKS4A1_LSM6DSO16IS_0, MOTION_GYRO, 2000 );
 80010ac:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010b0:	2101      	movs	r1, #1
 80010b2:	2003      	movs	r0, #3
 80010b4:	f00a fdb4 	bl	800bc20 <IKS4A1_MOTION_SENSOR_SetFullScale>
    IKS4A1_MOTION_SENSOR_SetFullScale( IKS4A1_LIS2MDL_0, MOTION_MAGNETO, 4 );
 80010b8:	2204      	movs	r2, #4
 80010ba:	2104      	movs	r1, #4
 80010bc:	2000      	movs	r0, #0
 80010be:	f00a fdaf 	bl	800bc20 <IKS4A1_MOTION_SENSOR_SetFullScale>

    float a, b, c, d, e;
    int32_t f, g, h, i, j;
    IKS4A1_MOTION_SENSOR_GetOutputDataRate( IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO, &a );
 80010c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010c6:	461a      	mov	r2, r3
 80010c8:	2102      	movs	r1, #2
 80010ca:	2001      	movs	r0, #1
 80010cc:	f00a fcda 	bl	800ba84 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
    IKS4A1_MOTION_SENSOR_GetOutputDataRate( IKS4A1_LSM6DSO16IS_0, MOTION_ACCELERO, &b );
 80010d0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80010d4:	461a      	mov	r2, r3
 80010d6:	2102      	movs	r1, #2
 80010d8:	2003      	movs	r0, #3
 80010da:	f00a fcd3 	bl	800ba84 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
    IKS4A1_MOTION_SENSOR_GetOutputDataRate( IKS4A1_LSM6DSV16X_0, MOTION_GYRO, &c );
 80010de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80010e2:	461a      	mov	r2, r3
 80010e4:	2101      	movs	r1, #1
 80010e6:	2001      	movs	r0, #1
 80010e8:	f00a fccc 	bl	800ba84 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
    IKS4A1_MOTION_SENSOR_GetOutputDataRate( IKS4A1_LSM6DSO16IS_0, MOTION_GYRO, &d );
 80010ec:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80010f0:	461a      	mov	r2, r3
 80010f2:	2101      	movs	r1, #1
 80010f4:	2003      	movs	r0, #3
 80010f6:	f00a fcc5 	bl	800ba84 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
    IKS4A1_MOTION_SENSOR_GetOutputDataRate( IKS4A1_LIS2MDL_0, MOTION_MAGNETO, &e );
 80010fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80010fe:	461a      	mov	r2, r3
 8001100:	2104      	movs	r1, #4
 8001102:	2000      	movs	r0, #0
 8001104:	f00a fcbe 	bl	800ba84 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
    IKS4A1_MOTION_SENSOR_GetFullScale( IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO, &f );
 8001108:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 800110c:	461a      	mov	r2, r3
 800110e:	2102      	movs	r1, #2
 8001110:	2001      	movs	r0, #1
 8001112:	f00a fcfb 	bl	800bb0c <IKS4A1_MOTION_SENSOR_GetFullScale>
    IKS4A1_MOTION_SENSOR_GetFullScale( IKS4A1_LSM6DSO16IS_0, MOTION_ACCELERO, &g );
 8001116:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800111a:	461a      	mov	r2, r3
 800111c:	2102      	movs	r1, #2
 800111e:	2003      	movs	r0, #3
 8001120:	f00a fcf4 	bl	800bb0c <IKS4A1_MOTION_SENSOR_GetFullScale>
    IKS4A1_MOTION_SENSOR_GetFullScale( IKS4A1_LSM6DSV16X_0, MOTION_GYRO, &h );
 8001124:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001128:	461a      	mov	r2, r3
 800112a:	2101      	movs	r1, #1
 800112c:	2001      	movs	r0, #1
 800112e:	f00a fced 	bl	800bb0c <IKS4A1_MOTION_SENSOR_GetFullScale>
    IKS4A1_MOTION_SENSOR_GetFullScale( IKS4A1_LSM6DSO16IS_0, MOTION_GYRO, &i );
 8001132:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001136:	461a      	mov	r2, r3
 8001138:	2101      	movs	r1, #1
 800113a:	2003      	movs	r0, #3
 800113c:	f00a fce6 	bl	800bb0c <IKS4A1_MOTION_SENSOR_GetFullScale>
    IKS4A1_MOTION_SENSOR_GetFullScale( IKS4A1_LIS2MDL_0, MOTION_MAGNETO, &j );
 8001140:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001144:	461a      	mov	r2, r3
 8001146:	2104      	movs	r1, #4
 8001148:	2000      	movs	r0, #0
 800114a:	f00a fcdf 	bl	800bb0c <IKS4A1_MOTION_SENSOR_GetFullScale>
        /* USER CODE END WHILE */

        //MX_MEMS_Process();
        /* USER CODE BEGIN 3 */

        if( data_ready )
 800114e:	4b6c      	ldr	r3, [pc, #432]	@ (8001300 <main+0x2d4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0fb      	beq.n	800114e <main+0x122>
        {
            const char name_file[] = { "sensor_data.csv" };
 8001156:	4b6b      	ldr	r3, [pc, #428]	@ (8001304 <main+0x2d8>)
 8001158:	f107 04e4 	add.w	r4, r7, #228	@ 0xe4
 800115c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800115e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            const char header_csv[] = {
 8001162:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800116a:	4a67      	ldr	r2, [pc, #412]	@ (8001308 <main+0x2dc>)
 800116c:	4618      	mov	r0, r3
 800116e:	4611      	mov	r1, r2
 8001170:	234a      	movs	r3, #74	@ 0x4a
 8001172:	461a      	mov	r2, r3
 8001174:	f013 fe05 	bl	8014d82 <memcpy>
                    "Timestamp,Accel_X,Accel_Y,Accel_Z,Gyro_X,Gyro_Y,Gyro_Z,Mag_X,Mag_Y,Mag_Z\n" };
            // Save data to SD card
            sd_mount();
 8001178:	f000 fcd8 	bl	8001b2c <sd_mount>
            sd_list_files();
 800117c:	f000 ff0a 	bl	8001f94 <sd_list_files>
            sd_write_file( name_file, header_csv ); // Write header
 8001180:	f107 0218 	add.w	r2, r7, #24
 8001184:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fd64 	bl	8001c58 <sd_write_file>

            for( size_t i = 0; i < AMOUNT_DATA; i++ )
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001196:	e09c      	b.n	80012d2 <main+0x2a6>
            {
                char line[128] = { 0 };
 8001198:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800119c:	2280      	movs	r2, #128	@ 0x80
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f013 fd63 	bl	8014c6c <memset>
                snprintf( line, sizeof( line ), "%lu,%d,%d,%d,%d,%d,%d,%ld,%ld,%ld\n", (unsigned long) sensor_data[i].timestamp,
 80011a6:	4959      	ldr	r1, [pc, #356]	@ (800130c <main+0x2e0>)
 80011a8:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80011ac:	4613      	mov	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	440b      	add	r3, r1
 80011b6:	6819      	ldr	r1, [r3, #0]
                          (int) sensor_data[i].acceleration.x, (int) sensor_data[i].acceleration.y, (int) sensor_data[i].acceleration.z,
 80011b8:	4854      	ldr	r0, [pc, #336]	@ (800130c <main+0x2e0>)
 80011ba:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	4403      	add	r3, r0
 80011c8:	3304      	adds	r3, #4
 80011ca:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf( line, sizeof( line ), "%lu,%d,%d,%d,%d,%d,%d,%ld,%ld,%ld\n", (unsigned long) sensor_data[i].timestamp,
 80011ce:	461c      	mov	r4, r3
                          (int) sensor_data[i].acceleration.x, (int) sensor_data[i].acceleration.y, (int) sensor_data[i].acceleration.z,
 80011d0:	484e      	ldr	r0, [pc, #312]	@ (800130c <main+0x2e0>)
 80011d2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	4403      	add	r3, r0
 80011e0:	3306      	adds	r3, #6
 80011e2:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf( line, sizeof( line ), "%lu,%d,%d,%d,%d,%d,%d,%ld,%ld,%ld\n", (unsigned long) sensor_data[i].timestamp,
 80011e6:	461d      	mov	r5, r3
                          (int) sensor_data[i].acceleration.x, (int) sensor_data[i].acceleration.y, (int) sensor_data[i].acceleration.z,
 80011e8:	4848      	ldr	r0, [pc, #288]	@ (800130c <main+0x2e0>)
 80011ea:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80011ee:	4613      	mov	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4413      	add	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	4403      	add	r3, r0
 80011f8:	3308      	adds	r3, #8
 80011fa:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf( line, sizeof( line ), "%lu,%d,%d,%d,%d,%d,%d,%ld,%ld,%ld\n", (unsigned long) sensor_data[i].timestamp,
 80011fe:	461e      	mov	r6, r3
                          (int) sensor_data[i].angular_velocity.x, (int) sensor_data[i].angular_velocity.y, (int) sensor_data[i].angular_velocity.z,
 8001200:	4842      	ldr	r0, [pc, #264]	@ (800130c <main+0x2e0>)
 8001202:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	4403      	add	r3, r0
 8001210:	330a      	adds	r3, #10
 8001212:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf( line, sizeof( line ), "%lu,%d,%d,%d,%d,%d,%d,%ld,%ld,%ld\n", (unsigned long) sensor_data[i].timestamp,
 8001216:	617b      	str	r3, [r7, #20]
                          (int) sensor_data[i].angular_velocity.x, (int) sensor_data[i].angular_velocity.y, (int) sensor_data[i].angular_velocity.z,
 8001218:	483c      	ldr	r0, [pc, #240]	@ (800130c <main+0x2e0>)
 800121a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4403      	add	r3, r0
 8001228:	330c      	adds	r3, #12
 800122a:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf( line, sizeof( line ), "%lu,%d,%d,%d,%d,%d,%d,%ld,%ld,%ld\n", (unsigned long) sensor_data[i].timestamp,
 800122e:	613b      	str	r3, [r7, #16]
                          (int) sensor_data[i].angular_velocity.x, (int) sensor_data[i].angular_velocity.y, (int) sensor_data[i].angular_velocity.z,
 8001230:	4836      	ldr	r0, [pc, #216]	@ (800130c <main+0x2e0>)
 8001232:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4403      	add	r3, r0
 8001240:	330e      	adds	r3, #14
 8001242:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf( line, sizeof( line ), "%lu,%d,%d,%d,%d,%d,%d,%ld,%ld,%ld\n", (unsigned long) sensor_data[i].timestamp,
 8001246:	60fb      	str	r3, [r7, #12]
                          (long) sensor_data[i].magnetic_field.x, (long) sensor_data[i].magnetic_field.y, (long) sensor_data[i].magnetic_field.z );
 8001248:	4830      	ldr	r0, [pc, #192]	@ (800130c <main+0x2e0>)
 800124a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	4403      	add	r3, r0
 8001258:	3310      	adds	r3, #16
 800125a:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf( line, sizeof( line ), "%lu,%d,%d,%d,%d,%d,%d,%ld,%ld,%ld\n", (unsigned long) sensor_data[i].timestamp,
 800125e:	60bb      	str	r3, [r7, #8]
                          (long) sensor_data[i].magnetic_field.x, (long) sensor_data[i].magnetic_field.y, (long) sensor_data[i].magnetic_field.z );
 8001260:	482a      	ldr	r0, [pc, #168]	@ (800130c <main+0x2e0>)
 8001262:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4403      	add	r3, r0
 8001270:	3312      	adds	r3, #18
 8001272:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf( line, sizeof( line ), "%lu,%d,%d,%d,%d,%d,%d,%ld,%ld,%ld\n", (unsigned long) sensor_data[i].timestamp,
 8001276:	607b      	str	r3, [r7, #4]
                          (long) sensor_data[i].magnetic_field.x, (long) sensor_data[i].magnetic_field.y, (long) sensor_data[i].magnetic_field.z );
 8001278:	4824      	ldr	r0, [pc, #144]	@ (800130c <main+0x2e0>)
 800127a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800127e:	4613      	mov	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4413      	add	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	4403      	add	r3, r0
 8001288:	3314      	adds	r3, #20
 800128a:	f9b3 3000 	ldrsh.w	r3, [r3]
                snprintf( line, sizeof( line ), "%lu,%d,%d,%d,%d,%d,%d,%ld,%ld,%ld\n", (unsigned long) sensor_data[i].timestamp,
 800128e:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8001292:	9308      	str	r3, [sp, #32]
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	9207      	str	r2, [sp, #28]
 8001298:	68ba      	ldr	r2, [r7, #8]
 800129a:	9206      	str	r2, [sp, #24]
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	9205      	str	r2, [sp, #20]
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	9204      	str	r2, [sp, #16]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	9303      	str	r3, [sp, #12]
 80012a8:	9602      	str	r6, [sp, #8]
 80012aa:	9501      	str	r5, [sp, #4]
 80012ac:	9400      	str	r4, [sp, #0]
 80012ae:	460b      	mov	r3, r1
 80012b0:	4a17      	ldr	r2, [pc, #92]	@ (8001310 <main+0x2e4>)
 80012b2:	2180      	movs	r1, #128	@ 0x80
 80012b4:	f013 fbcc 	bl	8014a50 <sniprintf>
                sd_append_file( name_file, line );
 80012b8:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80012bc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fd30 	bl	8001d28 <sd_append_file>
            for( size_t i = 0; i < AMOUNT_DATA; i++ )
 80012c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80012cc:	3301      	adds	r3, #1
 80012ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80012d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80012d6:	f640 52ab 	movw	r2, #3499	@ 0xdab
 80012da:	4293      	cmp	r3, r2
 80012dc:	f67f af5c 	bls.w	8001198 <main+0x16c>
            }
            sd_unmount();
 80012e0:	f000 fc98 	bl	8001c14 <sd_unmount>
            status = COMPLETE;
 80012e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <main+0x2e8>)
 80012e6:	2203      	movs	r2, #3
 80012e8:	701a      	strb	r2, [r3, #0]
            while( 1 );
 80012ea:	bf00      	nop
 80012ec:	e7fd      	b.n	80012ea <main+0x2be>
 80012ee:	bf00      	nop
 80012f0:	200002f8 	.word	0x200002f8
 80012f4:	44f00000 	.word	0x44f00000
 80012f8:	44d06000 	.word	0x44d06000
 80012fc:	42c80000 	.word	0x42c80000
 8001300:	20014b60 	.word	0x20014b60
 8001304:	080168f4 	.word	0x080168f4
 8001308:	08016904 	.word	0x08016904
 800130c:	20000340 	.word	0x20000340
 8001310:	080168d0 	.word	0x080168d0
 8001314:	20014b6c 	.word	0x20014b6c

08001318 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config( void )
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b094      	sub	sp, #80	@ 0x50
 800131c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800131e:	f107 0320 	add.w	r3, r7, #32
 8001322:	2230      	movs	r2, #48	@ 0x30
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f013 fca0 	bl	8014c6c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE( );
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	4b29      	ldr	r3, [pc, #164]	@ (80013e8 <SystemClock_Config+0xd0>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	4a28      	ldr	r2, [pc, #160]	@ (80013e8 <SystemClock_Config+0xd0>)
 8001346:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134a:	6413      	str	r3, [r2, #64]	@ 0x40
 800134c:	4b26      	ldr	r3, [pc, #152]	@ (80013e8 <SystemClock_Config+0xd0>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG( PWR_REGULATOR_VOLTAGE_SCALE2 );
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	4b23      	ldr	r3, [pc, #140]	@ (80013ec <SystemClock_Config+0xd4>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001364:	4a21      	ldr	r2, [pc, #132]	@ (80013ec <SystemClock_Config+0xd4>)
 8001366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ec <SystemClock_Config+0xd4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001378:	2302      	movs	r3, #2
 800137a:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800137c:	2301      	movs	r3, #1
 800137e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001380:	2310      	movs	r3, #16
 8001382:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001384:	2302      	movs	r3, #2
 8001386:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001388:	2300      	movs	r3, #0
 800138a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 16;
 800138c:	2310      	movs	r3, #16
 800138e:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 8001390:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001394:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001396:	2304      	movs	r3, #4
 8001398:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 800139a:	2307      	movs	r3, #7
 800139c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if( HAL_RCC_OscConfig( &RCC_OscInitStruct ) != HAL_OK )
 800139e:	f107 0320 	add.w	r3, r7, #32
 80013a2:	4618      	mov	r0, r3
 80013a4:	f00d fac0 	bl	800e928 <HAL_RCC_OscConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0x9a>
    {
        Error_Handler();
 80013ae:	f000 fad5 	bl	800195c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013b2:	230f      	movs	r3, #15
 80013b4:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b6:	2302      	movs	r3, #2
 80013b8:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c2:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]

    if( HAL_RCC_ClockConfig( &RCC_ClkInitStruct, FLASH_LATENCY_2 ) != HAL_OK )
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2102      	movs	r1, #2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00d fd22 	bl	800ee18 <HAL_RCC_ClockConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <SystemClock_Config+0xc6>
    {
        Error_Handler();
 80013da:	f000 fabf 	bl	800195c <Error_Handler>
    }
}
 80013de:	bf00      	nop
 80013e0:	3750      	adds	r7, #80	@ 0x50
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40007000 	.word	0x40007000

080013f0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init( void )
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 80013f4:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <MX_SPI1_Init+0x64>)
 80013f6:	4a18      	ldr	r2, [pc, #96]	@ (8001458 <MX_SPI1_Init+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 80013fa:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <MX_SPI1_Init+0x64>)
 80013fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001400:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001402:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <MX_SPI1_Init+0x64>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <MX_SPI1_Init+0x64>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <MX_SPI1_Init+0x64>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001414:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <MX_SPI1_Init+0x64>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <MX_SPI1_Init+0x64>)
 800141c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001420:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001422:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <MX_SPI1_Init+0x64>)
 8001424:	2228      	movs	r2, #40	@ 0x28
 8001426:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001428:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <MX_SPI1_Init+0x64>)
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <MX_SPI1_Init+0x64>)
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001434:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <MX_SPI1_Init+0x64>)
 8001436:	2200      	movs	r2, #0
 8001438:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <MX_SPI1_Init+0x64>)
 800143c:	220a      	movs	r2, #10
 800143e:	62da      	str	r2, [r3, #44]	@ 0x2c
    if( HAL_SPI_Init( &hspi1 ) != HAL_OK )
 8001440:	4804      	ldr	r0, [pc, #16]	@ (8001454 <MX_SPI1_Init+0x64>)
 8001442:	f00d ff09 	bl	800f258 <HAL_SPI_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_SPI1_Init+0x60>
    {
        Error_Handler();
 800144c:	f000 fa86 	bl	800195c <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200002a0 	.word	0x200002a0
 8001458:	40013000 	.word	0x40013000

0800145c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init( void )
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001470:	463b      	mov	r3, r7
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 8001478:	4b1e      	ldr	r3, [pc, #120]	@ (80014f4 <MX_TIM1_Init+0x98>)
 800147a:	4a1f      	ldr	r2, [pc, #124]	@ (80014f8 <MX_TIM1_Init+0x9c>)
 800147c:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 8399;
 800147e:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <MX_TIM1_Init+0x98>)
 8001480:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001484:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b1b      	ldr	r3, [pc, #108]	@ (80014f4 <MX_TIM1_Init+0x98>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 99;
 800148c:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <MX_TIM1_Init+0x98>)
 800148e:	2263      	movs	r2, #99	@ 0x63
 8001490:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001492:	4b18      	ldr	r3, [pc, #96]	@ (80014f4 <MX_TIM1_Init+0x98>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8001498:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <MX_TIM1_Init+0x98>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800149e:	4b15      	ldr	r3, [pc, #84]	@ (80014f4 <MX_TIM1_Init+0x98>)
 80014a0:	2280      	movs	r2, #128	@ 0x80
 80014a2:	619a      	str	r2, [r3, #24]
    if( HAL_TIM_Base_Init( &htim1 ) != HAL_OK )
 80014a4:	4813      	ldr	r0, [pc, #76]	@ (80014f4 <MX_TIM1_Init+0x98>)
 80014a6:	f00e fb29 	bl	800fafc <HAL_TIM_Base_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM1_Init+0x58>
    {
        Error_Handler();
 80014b0:	f000 fa54 	bl	800195c <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b8:	60bb      	str	r3, [r7, #8]
    if( HAL_TIM_ConfigClockSource( &htim1, &sClockSourceConfig ) != HAL_OK )
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4619      	mov	r1, r3
 80014c0:	480c      	ldr	r0, [pc, #48]	@ (80014f4 <MX_TIM1_Init+0x98>)
 80014c2:	f00e fcbd 	bl	800fe40 <HAL_TIM_ConfigClockSource>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM1_Init+0x74>
    {
        Error_Handler();
 80014cc:	f000 fa46 	bl	800195c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d0:	2300      	movs	r3, #0
 80014d2:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
    if( HAL_TIMEx_MasterConfigSynchronization( &htim1, &sMasterConfig ) != HAL_OK )
 80014d8:	463b      	mov	r3, r7
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <MX_TIM1_Init+0x98>)
 80014de:	f00e febf 	bl	8010260 <HAL_TIMEx_MasterConfigSynchronization>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM1_Init+0x90>
    {
        Error_Handler();
 80014e8:	f000 fa38 	bl	800195c <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200002f8 	.word	0x200002f8
 80014f8:	40010000 	.word	0x40010000

080014fc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init( void )
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	@ 0x28
 8001500:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE( );
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b37      	ldr	r3, [pc, #220]	@ (80015f4 <MX_GPIO_Init+0xf8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a36      	ldr	r2, [pc, #216]	@ (80015f4 <MX_GPIO_Init+0xf8>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b34      	ldr	r3, [pc, #208]	@ (80015f4 <MX_GPIO_Init+0xf8>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE( );
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b30      	ldr	r3, [pc, #192]	@ (80015f4 <MX_GPIO_Init+0xf8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	4a2f      	ldr	r2, [pc, #188]	@ (80015f4 <MX_GPIO_Init+0xf8>)
 8001538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800153c:	6313      	str	r3, [r2, #48]	@ 0x30
 800153e:	4b2d      	ldr	r3, [pc, #180]	@ (80015f4 <MX_GPIO_Init+0xf8>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE( );
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	4b29      	ldr	r3, [pc, #164]	@ (80015f4 <MX_GPIO_Init+0xf8>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a28      	ldr	r2, [pc, #160]	@ (80015f4 <MX_GPIO_Init+0xf8>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b26      	ldr	r3, [pc, #152]	@ (80015f4 <MX_GPIO_Init+0xf8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE( );
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b22      	ldr	r3, [pc, #136]	@ (80015f4 <MX_GPIO_Init+0xf8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a21      	ldr	r2, [pc, #132]	@ (80015f4 <MX_GPIO_Init+0xf8>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b1f      	ldr	r3, [pc, #124]	@ (80015f4 <MX_GPIO_Init+0xf8>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin( LED_STATUS_D7_GPIO_Port, LED_STATUS_D7_Pin, GPIO_PIN_RESET );
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001588:	481b      	ldr	r0, [pc, #108]	@ (80015f8 <MX_GPIO_Init+0xfc>)
 800158a:	f00b fc97 	bl	800cebc <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin( SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET );
 800158e:	2201      	movs	r2, #1
 8001590:	2120      	movs	r1, #32
 8001592:	481a      	ldr	r0, [pc, #104]	@ (80015fc <MX_GPIO_Init+0x100>)
 8001594:	f00b fc92 	bl	800cebc <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_STATUS_D7_Pin */
    GPIO_InitStruct.Pin = LED_STATUS_D7_Pin;
 8001598:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800159c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init( LED_STATUS_D7_GPIO_Port, &GPIO_InitStruct );
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	4811      	ldr	r0, [pc, #68]	@ (80015f8 <MX_GPIO_Init+0xfc>)
 80015b2:	f00b fa03 	bl	800c9bc <HAL_GPIO_Init>

    /*Configure GPIO pin : BUTTON_D8_Pin */
    GPIO_InitStruct.Pin = BUTTON_D8_Pin;
 80015b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init( BUTTON_D8_GPIO_Port, &GPIO_InitStruct );
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4619      	mov	r1, r3
 80015ca:	480b      	ldr	r0, [pc, #44]	@ (80015f8 <MX_GPIO_Init+0xfc>)
 80015cc:	f00b f9f6 	bl	800c9bc <HAL_GPIO_Init>

    /*Configure GPIO pin : SD_CS_Pin */
    GPIO_InitStruct.Pin = SD_CS_Pin;
 80015d0:	2320      	movs	r3, #32
 80015d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015dc:	2302      	movs	r3, #2
 80015de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init( SD_CS_GPIO_Port, &GPIO_InitStruct );
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_GPIO_Init+0x100>)
 80015e8:	f00b f9e8 	bl	800c9bc <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */

    /* USER CODE END MX_GPIO_Init_2 */
}
 80015ec:	bf00      	nop
 80015ee:	3728      	adds	r7, #40	@ 0x28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020400 	.word	0x40020400

08001600 <Check_Button>:

/* USER CODE BEGIN 4 */
void Check_Button( void )
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
    if( HAL_GPIO_ReadPin( BUTTON_D8_GPIO_Port, BUTTON_D8_Pin ) == GPIO_PIN_RESET ) // Button pressed
 8001604:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001608:	4818      	ldr	r0, [pc, #96]	@ (800166c <Check_Button+0x6c>)
 800160a:	f00b fc3f 	bl	800ce8c <HAL_GPIO_ReadPin>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d123      	bne.n	800165c <Check_Button+0x5c>
    {
        debounce_button++;
 8001614:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <Check_Button+0x70>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	4a15      	ldr	r2, [pc, #84]	@ (8001670 <Check_Button+0x70>)
 800161c:	6013      	str	r3, [r2, #0]
        if( button_state == _BUTTON_RELEASED && status == READY )
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <Check_Button+0x74>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d120      	bne.n	8001668 <Check_Button+0x68>
 8001626:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <Check_Button+0x78>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d11c      	bne.n	8001668 <Check_Button+0x68>
        {
            if( debounce_button >= 5 ) // debounce time ~500ms
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <Check_Button+0x70>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b04      	cmp	r3, #4
 8001634:	d918      	bls.n	8001668 <Check_Button+0x68>
            {
                button_state = _BUTTON_PRESSED;
 8001636:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <Check_Button+0x74>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
                debounce_button = 0;
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <Check_Button+0x70>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]

                status = ACQUIRING;
 8001642:	4b0d      	ldr	r3, [pc, #52]	@ (8001678 <Check_Button+0x78>)
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
                count_data = 0;
 8001648:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <Check_Button+0x7c>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
                data_ready = 0;
 800164e:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <Check_Button+0x80>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]

                count_led_status = 0;
 8001654:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <Check_Button+0x84>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
    {
        debounce_button = 0;
        button_state = _BUTTON_RELEASED;
    }

}
 800165a:	e005      	b.n	8001668 <Check_Button+0x68>
        debounce_button = 0;
 800165c:	4b04      	ldr	r3, [pc, #16]	@ (8001670 <Check_Button+0x70>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
        button_state = _BUTTON_RELEASED;
 8001662:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <Check_Button+0x74>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40020000 	.word	0x40020000
 8001670:	20014b70 	.word	0x20014b70
 8001674:	20014b74 	.word	0x20014b74
 8001678:	20014b6c 	.word	0x20014b6c
 800167c:	20014b64 	.word	0x20014b64
 8001680:	20014b60 	.word	0x20014b60
 8001684:	20014b68 	.word	0x20014b68

08001688 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef * htim )
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

    if( htim->Instance == TIM1 )  // Check if the interrupt comes from TIM1
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4aa7      	ldr	r2, [pc, #668]	@ (8001934 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001696:	4293      	cmp	r3, r2
 8001698:	f040 8148 	bne.w	800192c <HAL_TIM_PeriodElapsedCallback+0x2a4>
    {
        if( status == ACQUIRING )
 800169c:	4ba6      	ldr	r3, [pc, #664]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	f040 80fc 	bne.w	800189e <HAL_TIM_PeriodElapsedCallback+0x216>
        {
            // Your code to be executed every second
            if( count_data < AMOUNT_DATA )
 80016a6:	4ba5      	ldr	r3, [pc, #660]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f640 52ab 	movw	r2, #3499	@ 0xdab
 80016ae:	4293      	cmp	r3, r2
 80016b0:	f200 80ef 	bhi.w	8001892 <HAL_TIM_PeriodElapsedCallback+0x20a>
            {
                IKS4A1_MOTION_SENSOR_Axes_t data = { 0 };
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
                if( IKS4A1_MOTION_SENSOR_GetAxes( IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO, &data ) != 0 )
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	461a      	mov	r2, r3
 80016c6:	2102      	movs	r1, #2
 80016c8:	2001      	movs	r0, #1
 80016ca:	f00a f997 	bl	800b9fc <IKS4A1_MOTION_SENSOR_GetAxes>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d147      	bne.n	8001764 <HAL_TIM_PeriodElapsedCallback+0xdc>
                {
                    // Handle error
                }
                else
                {
                    sensor_data[count_data].acceleration.x = TEST_LIMIT( data.x ); // to g
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80016da:	da06      	bge.n	80016ea <HAL_TIM_PeriodElapsedCallback+0x62>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4a98      	ldr	r2, [pc, #608]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	bfb8      	it	lt
 80016e4:	4613      	movlt	r3, r2
 80016e6:	b219      	sxth	r1, r3
 80016e8:	e001      	b.n	80016ee <HAL_TIM_PeriodElapsedCallback+0x66>
 80016ea:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80016ee:	4b93      	ldr	r3, [pc, #588]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4894      	ldr	r0, [pc, #592]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4403      	add	r3, r0
 80016fe:	3304      	adds	r3, #4
 8001700:	460a      	mov	r2, r1
 8001702:	801a      	strh	r2, [r3, #0]
                    sensor_data[count_data].acceleration.y = TEST_LIMIT( data.y );
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800170a:	da06      	bge.n	800171a <HAL_TIM_PeriodElapsedCallback+0x92>
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4a8c      	ldr	r2, [pc, #560]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	bfb8      	it	lt
 8001714:	4613      	movlt	r3, r2
 8001716:	b219      	sxth	r1, r3
 8001718:	e001      	b.n	800171e <HAL_TIM_PeriodElapsedCallback+0x96>
 800171a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800171e:	4b87      	ldr	r3, [pc, #540]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	4888      	ldr	r0, [pc, #544]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	4403      	add	r3, r0
 800172e:	3306      	adds	r3, #6
 8001730:	460a      	mov	r2, r1
 8001732:	801a      	strh	r2, [r3, #0]
                    sensor_data[count_data].acceleration.z = TEST_LIMIT( data.z );
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800173a:	da06      	bge.n	800174a <HAL_TIM_PeriodElapsedCallback+0xc2>
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	4a80      	ldr	r2, [pc, #512]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	bfb8      	it	lt
 8001744:	4613      	movlt	r3, r2
 8001746:	b219      	sxth	r1, r3
 8001748:	e001      	b.n	800174e <HAL_TIM_PeriodElapsedCallback+0xc6>
 800174a:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 800174e:	4b7b      	ldr	r3, [pc, #492]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	487c      	ldr	r0, [pc, #496]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	4403      	add	r3, r0
 800175e:	3308      	adds	r3, #8
 8001760:	460a      	mov	r2, r1
 8001762:	801a      	strh	r2, [r3, #0]
                }
                if( IKS4A1_MOTION_SENSOR_GetAxes( IKS4A1_LSM6DSV16X_0, MOTION_GYRO, &data ) != 0 )
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	461a      	mov	r2, r3
 800176a:	2101      	movs	r1, #1
 800176c:	2001      	movs	r0, #1
 800176e:	f00a f945 	bl	800b9fc <IKS4A1_MOTION_SENSOR_GetAxes>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d138      	bne.n	80017ea <HAL_TIM_PeriodElapsedCallback+0x162>
                {
                    // Handle error
                }
                else
                {
                    sensor_data[count_data].angular_velocity.x = data.x / 1000; // to dps
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4a73      	ldr	r2, [pc, #460]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800177c:	fb82 1203 	smull	r1, r2, r2, r3
 8001780:	1192      	asrs	r2, r2, #6
 8001782:	17db      	asrs	r3, r3, #31
 8001784:	1ad1      	subs	r1, r2, r3
 8001786:	4b6d      	ldr	r3, [pc, #436]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	b208      	sxth	r0, r1
 800178c:	496d      	ldr	r1, [pc, #436]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800178e:	4613      	mov	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4413      	add	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	440b      	add	r3, r1
 8001798:	330a      	adds	r3, #10
 800179a:	4602      	mov	r2, r0
 800179c:	801a      	strh	r2, [r3, #0]
                    sensor_data[count_data].angular_velocity.y = data.y / 1000;
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4a69      	ldr	r2, [pc, #420]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80017a2:	fb82 1203 	smull	r1, r2, r2, r3
 80017a6:	1192      	asrs	r2, r2, #6
 80017a8:	17db      	asrs	r3, r3, #31
 80017aa:	1ad1      	subs	r1, r2, r3
 80017ac:	4b63      	ldr	r3, [pc, #396]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	b208      	sxth	r0, r1
 80017b2:	4964      	ldr	r1, [pc, #400]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	330c      	adds	r3, #12
 80017c0:	4602      	mov	r2, r0
 80017c2:	801a      	strh	r2, [r3, #0]
                    sensor_data[count_data].angular_velocity.z = data.z / 1000;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	4a60      	ldr	r2, [pc, #384]	@ (8001948 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80017c8:	fb82 1203 	smull	r1, r2, r2, r3
 80017cc:	1192      	asrs	r2, r2, #6
 80017ce:	17db      	asrs	r3, r3, #31
 80017d0:	1ad1      	subs	r1, r2, r3
 80017d2:	4b5a      	ldr	r3, [pc, #360]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	b208      	sxth	r0, r1
 80017d8:	495a      	ldr	r1, [pc, #360]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80017da:	4613      	mov	r3, r2
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	440b      	add	r3, r1
 80017e4:	330e      	adds	r3, #14
 80017e6:	4602      	mov	r2, r0
 80017e8:	801a      	strh	r2, [r3, #0]
                {
                    sensor_data[count_data].angular_velocity_2.x = data.x / 1000; // to dps
                    sensor_data[count_data].angular_velocity_2.y = data.y / 1000;
                    sensor_data[count_data].angular_velocity_2.z = data.z / 1000;
                }*/
                if( IKS4A1_MOTION_SENSOR_GetAxes( IKS4A1_LIS2MDL_0, MOTION_MAGNETO, &data ) != 0 )
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	461a      	mov	r2, r3
 80017f0:	2104      	movs	r1, #4
 80017f2:	2000      	movs	r0, #0
 80017f4:	f00a f902 	bl	800b9fc <IKS4A1_MOTION_SENSOR_GetAxes>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d126      	bne.n	800184c <HAL_TIM_PeriodElapsedCallback+0x1c4>
                {
                    // Handle error
                }
                else
                {
                    sensor_data[count_data].magnetic_field.x = data.x; // to mgauss
 80017fe:	68f9      	ldr	r1, [r7, #12]
 8001800:	4b4e      	ldr	r3, [pc, #312]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	b208      	sxth	r0, r1
 8001806:	494f      	ldr	r1, [pc, #316]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001808:	4613      	mov	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	4413      	add	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	440b      	add	r3, r1
 8001812:	3310      	adds	r3, #16
 8001814:	4602      	mov	r2, r0
 8001816:	801a      	strh	r2, [r3, #0]
                    sensor_data[count_data].magnetic_field.y = data.y;
 8001818:	6939      	ldr	r1, [r7, #16]
 800181a:	4b48      	ldr	r3, [pc, #288]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	b208      	sxth	r0, r1
 8001820:	4948      	ldr	r1, [pc, #288]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	440b      	add	r3, r1
 800182c:	3312      	adds	r3, #18
 800182e:	4602      	mov	r2, r0
 8001830:	801a      	strh	r2, [r3, #0]
                    sensor_data[count_data].magnetic_field.z = data.z;
 8001832:	6979      	ldr	r1, [r7, #20]
 8001834:	4b41      	ldr	r3, [pc, #260]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	b208      	sxth	r0, r1
 800183a:	4942      	ldr	r1, [pc, #264]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	3314      	adds	r3, #20
 8001848:	4602      	mov	r2, r0
 800184a:	801a      	strh	r2, [r3, #0]
                }

                sensor_data[count_data].timestamp = count_data * BASE_TIME_TIM1; //now - prev;
 800184c:	4b3b      	ldr	r3, [pc, #236]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800184e:	6819      	ldr	r1, [r3, #0]
 8001850:	4b3a      	ldr	r3, [pc, #232]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	460b      	mov	r3, r1
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4618      	mov	r0, r3
 800185e:	4939      	ldr	r1, [pc, #228]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	440b      	add	r3, r1
 800186a:	6018      	str	r0, [r3, #0]
                printf( "Timestamp: %lu ms\n", (unsigned long) sensor_data[count_data].timestamp );
 800186c:	4b33      	ldr	r3, [pc, #204]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4934      	ldr	r1, [pc, #208]	@ (8001944 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4619      	mov	r1, r3
 8001880:	4832      	ldr	r0, [pc, #200]	@ (800194c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001882:	f013 f875 	bl	8014970 <iprintf>
                count_data++;
 8001886:	4b2d      	ldr	r3, [pc, #180]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	3301      	adds	r3, #1
 800188c:	4a2b      	ldr	r2, [pc, #172]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	e005      	b.n	800189e <HAL_TIM_PeriodElapsedCallback+0x216>

            }
            else
            {
                status = WRITING_SD;
 8001892:	4b29      	ldr	r3, [pc, #164]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001894:	2202      	movs	r2, #2
 8001896:	701a      	strb	r2, [r3, #0]
                data_ready = 1;           // avisa a thread principal
 8001898:	4b2d      	ldr	r3, [pc, #180]	@ (8001950 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]
            }
        }

        count_led_status++;
 800189e:	4b2d      	ldr	r3, [pc, #180]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	3301      	adds	r3, #1
 80018a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80018a6:	6013      	str	r3, [r2, #0]
        switch( status )
 80018a8:	4b23      	ldr	r3, [pc, #140]	@ (8001938 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d832      	bhi.n	8001916 <HAL_TIM_PeriodElapsedCallback+0x28e>
 80018b0:	a201      	add	r2, pc, #4	@ (adr r2, 80018b8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80018b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b6:	bf00      	nop
 80018b8:	080018c9 	.word	0x080018c9
 80018bc:	080018d9 	.word	0x080018d9
 80018c0:	080018e9 	.word	0x080018e9
 80018c4:	080018f9 	.word	0x080018f9
        {
            case READY:
            {
                if( count_led_status >= 1000 / BASE_TIME_TIM1 ) // toggle every second
 80018c8:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b63      	cmp	r3, #99	@ 0x63
 80018ce:	d91d      	bls.n	800190c <HAL_TIM_PeriodElapsedCallback+0x284>
                {
                    count_led_status = 0;
 80018d0:	4b20      	ldr	r3, [pc, #128]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
                }
            }
                break;
 80018d6:	e019      	b.n	800190c <HAL_TIM_PeriodElapsedCallback+0x284>
            case ACQUIRING:
            {
                if( count_led_status >= 500 / BASE_TIME_TIM1 ) // toggle every 500ms
 80018d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b31      	cmp	r3, #49	@ 0x31
 80018de:	d917      	bls.n	8001910 <HAL_TIM_PeriodElapsedCallback+0x288>
                {
                    count_led_status = 0;
 80018e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
                }

            }
                break;
 80018e6:	e013      	b.n	8001910 <HAL_TIM_PeriodElapsedCallback+0x288>
            case WRITING_SD:
            {
                if( count_led_status >= 100 / BASE_TIME_TIM1 ) // toggle every 100ms
 80018e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b09      	cmp	r3, #9
 80018ee:	d911      	bls.n	8001914 <HAL_TIM_PeriodElapsedCallback+0x28c>
                {
                    count_led_status = 0;
 80018f0:	4b18      	ldr	r3, [pc, #96]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
                }

            }
                break;
 80018f6:	e00d      	b.n	8001914 <HAL_TIM_PeriodElapsedCallback+0x28c>
            case COMPLETE:
            {
                count_led_status = 1;
 80018f8:	4b16      	ldr	r3, [pc, #88]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
                HAL_GPIO_WritePin( LED_STATUS_D7_GPIO_Port, LED_STATUS_D7_Pin, GPIO_PIN_SET );
 80018fe:	2201      	movs	r2, #1
 8001900:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001904:	4814      	ldr	r0, [pc, #80]	@ (8001958 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001906:	f00b fad9 	bl	800cebc <HAL_GPIO_WritePin>

            }
                break;
 800190a:	e004      	b.n	8001916 <HAL_TIM_PeriodElapsedCallback+0x28e>
                break;
 800190c:	bf00      	nop
 800190e:	e002      	b.n	8001916 <HAL_TIM_PeriodElapsedCallback+0x28e>
                break;
 8001910:	bf00      	nop
 8001912:	e000      	b.n	8001916 <HAL_TIM_PeriodElapsedCallback+0x28e>
                break;
 8001914:	bf00      	nop

        }

        if( count_led_status == 0 )
 8001916:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d104      	bne.n	8001928 <HAL_TIM_PeriodElapsedCallback+0x2a0>
        {
            HAL_GPIO_TogglePin( LED_STATUS_D7_GPIO_Port, LED_STATUS_D7_Pin );
 800191e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001922:	480d      	ldr	r0, [pc, #52]	@ (8001958 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001924:	f00b fae3 	bl	800ceee <HAL_GPIO_TogglePin>
        }

        Check_Button();
 8001928:	f7ff fe6a 	bl	8001600 <Check_Button>

    }
}
 800192c:	bf00      	nop
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40010000 	.word	0x40010000
 8001938:	20014b6c 	.word	0x20014b6c
 800193c:	20014b64 	.word	0x20014b64
 8001940:	ffff8000 	.word	0xffff8000
 8001944:	20000340 	.word	0x20000340
 8001948:	10624dd3 	.word	0x10624dd3
 800194c:	08016950 	.word	0x08016950
 8001950:	20014b60 	.word	0x20014b60
 8001954:	20014b68 	.word	0x20014b68
 8001958:	40020000 	.word	0x40020000

0800195c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler( void )
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001960:	b672      	cpsid	i
}
 8001962:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while( 1 )
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <Error_Handler+0x8>

08001968 <SD_disk_status>:
#include "diskio.h"
#include "sd_spi.h"
#include "ff_gen_drv.h"


DSTATUS SD_disk_status(BYTE drv) {
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <SD_disk_status+0x14>
        return STA_NOINIT;
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <SD_disk_status+0x16>
    return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <SD_disk_initialize>:

DSTATUS SD_disk_initialize(BYTE drv) {
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <SD_disk_initialize+0x14>
        return STA_NOINIT;
 800199a:	2301      	movs	r3, #1
 800199c:	e007      	b.n	80019ae <SD_disk_initialize+0x24>

    return (SD_SPI_Init() == SD_OK) ? 0 : STA_NOINIT;
 800199e:	f000 fbd1 	bl	8002144 <SD_SPI_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf14      	ite	ne
 80019a8:	2301      	movne	r3, #1
 80019aa:	2300      	moveq	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	4603      	mov	r3, r0
 80019c6:	73fb      	strb	r3, [r7, #15]
    if (pdrv != 0 || count == 0)
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d102      	bne.n	80019d4 <SD_disk_read+0x1c>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <SD_disk_read+0x20>
        return RES_PARERR;
 80019d4:	2304      	movs	r3, #4
 80019d6:	e010      	b.n	80019fa <SD_disk_read+0x42>
    if (!card_initialized) return RES_NOTRDY;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a04 <SD_disk_read+0x4c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <SD_disk_read+0x2c>
 80019e0:	2303      	movs	r3, #3
 80019e2:	e00a      	b.n	80019fa <SD_disk_read+0x42>
    return (SD_ReadBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	68b8      	ldr	r0, [r7, #8]
 80019ea:	f000 fc9d 	bl	8002328 <SD_ReadBlocks>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20014db1 	.word	0x20014db1

08001a08 <SD_disk_write>:

DRESULT SD_disk_write(BYTE pdrv,  BYTE *buff, DWORD sector, UINT count) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	4603      	mov	r3, r0
 8001a16:	73fb      	strb	r3, [r7, #15]
    if (pdrv || !count) return RES_PARERR;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d102      	bne.n	8001a24 <SD_disk_write+0x1c>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <SD_disk_write+0x20>
 8001a24:	2304      	movs	r3, #4
 8001a26:	e010      	b.n	8001a4a <SD_disk_write+0x42>
    if (!card_initialized) return RES_NOTRDY;
 8001a28:	4b0a      	ldr	r3, [pc, #40]	@ (8001a54 <SD_disk_write+0x4c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <SD_disk_write+0x2c>
 8001a30:	2303      	movs	r3, #3
 8001a32:	e00a      	b.n	8001a4a <SD_disk_write+0x42>
    return (SD_WriteBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	68b8      	ldr	r0, [r7, #8]
 8001a3a:	f000 fd49 	bl	80024d0 <SD_WriteBlocks>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bf14      	ite	ne
 8001a44:	2301      	movne	r3, #1
 8001a46:	2300      	moveq	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20014db1 	.word	0x20014db1

08001a58 <SD_disk_ioctl>:

DRESULT SD_disk_ioctl(BYTE pdrv, BYTE cmd, void *buff) {
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	603a      	str	r2, [r7, #0]
 8001a62:	71fb      	strb	r3, [r7, #7]
 8001a64:	460b      	mov	r3, r1
 8001a66:	71bb      	strb	r3, [r7, #6]
    if (pdrv != 0)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <SD_disk_ioctl+0x1a>
        return RES_PARERR;
 8001a6e:	2304      	movs	r3, #4
 8001a70:	e022      	b.n	8001ab8 <SD_disk_ioctl+0x60>

    switch (cmd) {
 8001a72:	79bb      	ldrb	r3, [r7, #6]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d81e      	bhi.n	8001ab6 <SD_disk_ioctl+0x5e>
 8001a78:	a201      	add	r2, pc, #4	@ (adr r2, 8001a80 <SD_disk_ioctl+0x28>)
 8001a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7e:	bf00      	nop
 8001a80:	08001a91 	.word	0x08001a91
 8001a84:	08001aa1 	.word	0x08001aa1
 8001a88:	08001a95 	.word	0x08001a95
 8001a8c:	08001aad 	.word	0x08001aad
    case CTRL_SYNC:
        return RES_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	e011      	b.n	8001ab8 <SD_disk_ioctl+0x60>
    case GET_SECTOR_SIZE:
        *(WORD *)buff = 512;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a9a:	801a      	strh	r2, [r3, #0]
        return RES_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e00b      	b.n	8001ab8 <SD_disk_ioctl+0x60>
    case GET_SECTOR_COUNT:
        *(DWORD *)buff = 0x10000; // Example: 32MB SD card (65536 * 512)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001aa6:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	e005      	b.n	8001ab8 <SD_disk_ioctl+0x60>
    case GET_BLOCK_SIZE:
        *(DWORD *)buff = 1;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e000      	b.n	8001ab8 <SD_disk_ioctl+0x60>
    default:
        return RES_PARERR;
 8001ab6:	2304      	movs	r3, #4
    }
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <sd_get_space_kb>:
//	}
//		return res;
//}

int sd_get_space_kb( void )
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
    FATFS *pfs;
    DWORD fre_clust, tot_sect, fre_sect, total_kb, free_kb;
    FRESULT res = f_getfree( sd_path, &fre_clust, &pfs );
 8001aca:	f107 0208 	add.w	r2, r7, #8
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4814      	ldr	r0, [pc, #80]	@ (8001b24 <sd_get_space_kb+0x60>)
 8001ad4:	f012 fbdc 	bl	8014290 <f_getfree>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	77fb      	strb	r3, [r7, #31]
    if( res != FR_OK )
 8001adc:	7ffb      	ldrb	r3, [r7, #31]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <sd_get_space_kb+0x22>
        return res;
 8001ae2:	7ffb      	ldrb	r3, [r7, #31]
 8001ae4:	e01a      	b.n	8001b1c <sd_get_space_kb+0x58>

    tot_sect = ( pfs->n_fatent - 2 ) * pfs->csize;
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	3b02      	subs	r3, #2
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	8952      	ldrh	r2, [r2, #10]
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	61bb      	str	r3, [r7, #24]
    fre_sect = fre_clust * pfs->csize;
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	895b      	ldrh	r3, [r3, #10]
 8001afa:	461a      	mov	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	617b      	str	r3, [r7, #20]
    total_kb = tot_sect / 2;
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	085b      	lsrs	r3, r3, #1
 8001b08:	613b      	str	r3, [r7, #16]
    free_kb = fre_sect / 2;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	085b      	lsrs	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
    printf( "💾 Total: %lu KB, Free: %lu KB\r\n", total_kb, free_kb );
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	6939      	ldr	r1, [r7, #16]
 8001b14:	4804      	ldr	r0, [pc, #16]	@ (8001b28 <sd_get_space_kb+0x64>)
 8001b16:	f012 ff2b 	bl	8014970 <iprintf>
    return FR_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3720      	adds	r7, #32
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20014b78 	.word	0x20014b78
 8001b28:	08016964 	.word	0x08016964

08001b2c <sd_mount>:

int sd_mount( void )
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
    FRESULT res;
    extern uint8_t sd_is_sdhc( void );

    printf( "Linking SD driver...\r\n" );
 8001b32:	4829      	ldr	r0, [pc, #164]	@ (8001bd8 <sd_mount+0xac>)
 8001b34:	f012 ff84 	bl	8014a40 <puts>
    if( FATFS_LinkDriver( &SD_Driver, sd_path ) != 0 )
 8001b38:	4928      	ldr	r1, [pc, #160]	@ (8001bdc <sd_mount+0xb0>)
 8001b3a:	4829      	ldr	r0, [pc, #164]	@ (8001be0 <sd_mount+0xb4>)
 8001b3c:	f012 fcaa 	bl	8014494 <FATFS_LinkDriver>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d004      	beq.n	8001b50 <sd_mount+0x24>
    {
        printf( "FATFS_LinkDriver failed\n" );
 8001b46:	4827      	ldr	r0, [pc, #156]	@ (8001be4 <sd_mount+0xb8>)
 8001b48:	f012 ff7a 	bl	8014a40 <puts>
        return FR_DISK_ERR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e03f      	b.n	8001bd0 <sd_mount+0xa4>
    }

    printf( "Initializing disk...\r\n" );
 8001b50:	4825      	ldr	r0, [pc, #148]	@ (8001be8 <sd_mount+0xbc>)
 8001b52:	f012 ff75 	bl	8014a40 <puts>
    DSTATUS stat = disk_initialize( 0 );
 8001b56:	2000      	movs	r0, #0
 8001b58:	f00f f984 	bl	8010e64 <disk_initialize>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	71fb      	strb	r3, [r7, #7]
    if( stat != 0 )
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00c      	beq.n	8001b80 <sd_mount+0x54>
    {
        printf( "disk_initialize failed: 0x%02X\n", stat );
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4820      	ldr	r0, [pc, #128]	@ (8001bec <sd_mount+0xc0>)
 8001b6c:	f012 ff00 	bl	8014970 <iprintf>
        printf( "FR_NOT_READY\tTry Hard Reset or Check Connection/Power\r\n" );
 8001b70:	481f      	ldr	r0, [pc, #124]	@ (8001bf0 <sd_mount+0xc4>)
 8001b72:	f012 ff65 	bl	8014a40 <puts>
        printf( "Make sure \"MX_FATFS_Init\" is not being called in the main function\n"
 8001b76:	481f      	ldr	r0, [pc, #124]	@ (8001bf4 <sd_mount+0xc8>)
 8001b78:	f012 ff62 	bl	8014a40 <puts>
                "You need to disable its call in CubeMX->Project Manager->Advance Settings->Uncheck Generate code for MX_FATFS_Init\r\n" );
        return FR_NOT_READY;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e027      	b.n	8001bd0 <sd_mount+0xa4>
    }

    printf( "Attempting mount at %s...\r\n", sd_path );
 8001b80:	4916      	ldr	r1, [pc, #88]	@ (8001bdc <sd_mount+0xb0>)
 8001b82:	481d      	ldr	r0, [pc, #116]	@ (8001bf8 <sd_mount+0xcc>)
 8001b84:	f012 fef4 	bl	8014970 <iprintf>
    res = f_mount( &fs, sd_path, 1 );
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4914      	ldr	r1, [pc, #80]	@ (8001bdc <sd_mount+0xb0>)
 8001b8c:	481b      	ldr	r0, [pc, #108]	@ (8001bfc <sd_mount+0xd0>)
 8001b8e:	f011 fc53 	bl	8013438 <f_mount>
 8001b92:	4603      	mov	r3, r0
 8001b94:	71bb      	strb	r3, [r7, #6]
    if( res == FR_OK )
 8001b96:	79bb      	ldrb	r3, [r7, #6]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d113      	bne.n	8001bc4 <sd_mount+0x98>
    {
        printf( "SD card mounted successfully at %s\r\n", sd_path );
 8001b9c:	490f      	ldr	r1, [pc, #60]	@ (8001bdc <sd_mount+0xb0>)
 8001b9e:	4818      	ldr	r0, [pc, #96]	@ (8001c00 <sd_mount+0xd4>)
 8001ba0:	f012 fee6 	bl	8014970 <iprintf>
        printf( "Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC" );
 8001ba4:	f000 fac2 	bl	800212c <sd_is_sdhc>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <sd_mount+0x86>
 8001bae:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <sd_mount+0xd8>)
 8001bb0:	e000      	b.n	8001bb4 <sd_mount+0x88>
 8001bb2:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <sd_mount+0xdc>)
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4815      	ldr	r0, [pc, #84]	@ (8001c0c <sd_mount+0xe0>)
 8001bb8:	f012 feda 	bl	8014970 <iprintf>

        // Capacity and free space reporting
        sd_get_space_kb();
 8001bbc:	f7ff ff82 	bl	8001ac4 <sd_get_space_kb>
        return FR_OK;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e005      	b.n	8001bd0 <sd_mount+0xa4>
//			printf("Mount failed even after format: %d\r\n", res);
//		}
//		return res;
//	}
// Any other mount error
    printf( "Mount failed with code: %d\r\n", res );
 8001bc4:	79bb      	ldrb	r3, [r7, #6]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4811      	ldr	r0, [pc, #68]	@ (8001c10 <sd_mount+0xe4>)
 8001bca:	f012 fed1 	bl	8014970 <iprintf>
    return res;
 8001bce:	79bb      	ldrb	r3, [r7, #6]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	08016988 	.word	0x08016988
 8001bdc:	20014b78 	.word	0x20014b78
 8001be0:	080171f8 	.word	0x080171f8
 8001be4:	080169a0 	.word	0x080169a0
 8001be8:	080169b8 	.word	0x080169b8
 8001bec:	080169d0 	.word	0x080169d0
 8001bf0:	080169f0 	.word	0x080169f0
 8001bf4:	08016a28 	.word	0x08016a28
 8001bf8:	08016ae0 	.word	0x08016ae0
 8001bfc:	20014b7c 	.word	0x20014b7c
 8001c00:	08016afc 	.word	0x08016afc
 8001c04:	08016b24 	.word	0x08016b24
 8001c08:	08016b30 	.word	0x08016b30
 8001c0c:	08016b38 	.word	0x08016b38
 8001c10:	08016b48 	.word	0x08016b48

08001c14 <sd_unmount>:

int sd_unmount( void )
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
    FRESULT res = f_mount( NULL, sd_path, 1 );
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	490a      	ldr	r1, [pc, #40]	@ (8001c48 <sd_unmount+0x34>)
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f011 fc0a 	bl	8013438 <f_mount>
 8001c24:	4603      	mov	r3, r0
 8001c26:	71fb      	strb	r3, [r7, #7]
    printf( "SD card unmounted: %s\r\n", ( res == FR_OK ) ? "OK" : "Failed" );
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <sd_unmount+0x1e>
 8001c2e:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <sd_unmount+0x38>)
 8001c30:	e000      	b.n	8001c34 <sd_unmount+0x20>
 8001c32:	4b07      	ldr	r3, [pc, #28]	@ (8001c50 <sd_unmount+0x3c>)
 8001c34:	4619      	mov	r1, r3
 8001c36:	4807      	ldr	r0, [pc, #28]	@ (8001c54 <sd_unmount+0x40>)
 8001c38:	f012 fe9a 	bl	8014970 <iprintf>
    return res;
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20014b78 	.word	0x20014b78
 8001c4c:	08016b68 	.word	0x08016b68
 8001c50:	08016b6c 	.word	0x08016b6c
 8001c54:	08016b74 	.word	0x08016b74

08001c58 <sd_write_file>:

int sd_write_file( const char * filename, const char * text )
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001c64:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001c68:	6018      	str	r0, [r3, #0]
 8001c6a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001c6e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001c72:	6019      	str	r1, [r3, #0]
    FIL file;
    UINT bw;
    FRESULT res = f_open( &file, filename, FA_CREATE_ALWAYS | FA_WRITE );
 8001c74:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001c78:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001c7c:	f107 000c 	add.w	r0, r7, #12
 8001c80:	220a      	movs	r2, #10
 8001c82:	6819      	ldr	r1, [r3, #0]
 8001c84:	f011 fc1e 	bl	80134c4 <f_open>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
    if( res != FR_OK )
 8001c8e:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <sd_write_file+0x44>
        return res;
 8001c96:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001c9a:	e03e      	b.n	8001d1a <sd_write_file+0xc2>

    res = f_write( &file, text, strlen( text ), &bw );
 8001c9c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001ca0:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	f7fe faa5 	bl	80001f4 <strlen>
 8001caa:	4604      	mov	r4, r0
 8001cac:	f107 0308 	add.w	r3, r7, #8
 8001cb0:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8001cb4:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8001cb8:	f107 000c 	add.w	r0, r7, #12
 8001cbc:	4622      	mov	r2, r4
 8001cbe:	6809      	ldr	r1, [r1, #0]
 8001cc0:	f011 fdca 	bl	8013858 <f_write>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
    f_close( &file );
 8001cca:	f107 030c 	add.w	r3, r7, #12
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f011 ffb5 	bl	8013c3e <f_close>
    printf( "Write %u bytes to %s\r\n", bw, filename );
 8001cd4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001cd8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001cdc:	6819      	ldr	r1, [r3, #0]
 8001cde:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001ce2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	480e      	ldr	r0, [pc, #56]	@ (8001d24 <sd_write_file+0xcc>)
 8001cea:	f012 fe41 	bl	8014970 <iprintf>
    return ( res == FR_OK && bw == strlen( text ) ) ? FR_OK : FR_DISK_ERR;
 8001cee:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10e      	bne.n	8001d14 <sd_write_file+0xbc>
 8001cf6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001cfa:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	f7fe fa78 	bl	80001f4 <strlen>
 8001d04:	4602      	mov	r2, r0
 8001d06:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001d0a:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <sd_write_file+0xc0>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <sd_write_file+0xc2>
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd90      	pop	{r4, r7, pc}
 8001d24:	08016b8c 	.word	0x08016b8c

08001d28 <sd_append_file>:

int sd_append_file( const char * filename, const char * text )
{
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001d34:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001d38:	6018      	str	r0, [r3, #0]
 8001d3a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001d3e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001d42:	6019      	str	r1, [r3, #0]
    FIL file;
    UINT bw;
    FRESULT res = f_open( &file, filename, FA_OPEN_ALWAYS | FA_WRITE );
 8001d44:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001d48:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001d4c:	f107 000c 	add.w	r0, r7, #12
 8001d50:	2212      	movs	r2, #18
 8001d52:	6819      	ldr	r1, [r3, #0]
 8001d54:	f011 fbb6 	bl	80134c4 <f_open>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
    if( res != FR_OK )
 8001d5e:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <sd_append_file+0x44>
        return res;
 8001d66:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001d6a:	e058      	b.n	8001e1e <sd_append_file+0xf6>

    res = f_lseek( &file, f_size( &file ) );
 8001d6c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001d70:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f011 ff88 	bl	8013c92 <f_lseek>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
    if( res != FR_OK )
 8001d88:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <sd_append_file+0x78>
    {
        f_close( &file );
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	4618      	mov	r0, r3
 8001d96:	f011 ff52 	bl	8013c3e <f_close>
        return res;
 8001d9a:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001d9e:	e03e      	b.n	8001e1e <sd_append_file+0xf6>
    }

    res = f_write( &file, text, strlen( text ), &bw );
 8001da0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001da4:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	f7fe fa23 	bl	80001f4 <strlen>
 8001dae:	4604      	mov	r4, r0
 8001db0:	f107 0308 	add.w	r3, r7, #8
 8001db4:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8001db8:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8001dbc:	f107 000c 	add.w	r0, r7, #12
 8001dc0:	4622      	mov	r2, r4
 8001dc2:	6809      	ldr	r1, [r1, #0]
 8001dc4:	f011 fd48 	bl	8013858 <f_write>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
    f_close( &file );
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f011 ff33 	bl	8013c3e <f_close>
    printf( "Appended %u bytes to %s\r\n", bw, filename );
 8001dd8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001ddc:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001de0:	6819      	ldr	r1, [r3, #0]
 8001de2:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001de6:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	480e      	ldr	r0, [pc, #56]	@ (8001e28 <sd_append_file+0x100>)
 8001dee:	f012 fdbf 	bl	8014970 <iprintf>
    return ( res == FR_OK && bw == strlen( text ) ) ? FR_OK : FR_DISK_ERR;
 8001df2:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10e      	bne.n	8001e18 <sd_append_file+0xf0>
 8001dfa:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001dfe:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	f7fe f9f6 	bl	80001f4 <strlen>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001e0e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <sd_append_file+0xf4>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e000      	b.n	8001e1e <sd_append_file+0xf6>
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd90      	pop	{r4, r7, pc}
 8001e28:	08016ba4 	.word	0x08016ba4

08001e2c <sd_list_directory_recursive>:
    printf( "Create directory %s: %s\r\n", path, ( res == FR_OK ? "OK" : "Failed" ) );
    return res;
}

void sd_list_directory_recursive( const char * path, int depth )
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b0fa      	sub	sp, #488	@ 0x1e8
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001e36:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001e3a:	6018      	str	r0, [r3, #0]
 8001e3c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001e40:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001e44:	6019      	str	r1, [r3, #0]
    DIR dir;
    FILINFO fno;
    FRESULT res = f_opendir( &dir, path );
 8001e46:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001e4a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001e4e:	f507 72d2 	add.w	r2, r7, #420	@ 0x1a4
 8001e52:	6819      	ldr	r1, [r3, #0]
 8001e54:	4610      	mov	r0, r2
 8001e56:	f012 f925 	bl	80140a4 <f_opendir>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df
    if( res != FR_OK )
 8001e60:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00f      	beq.n	8001e88 <sd_list_directory_recursive+0x5c>
    {
        printf( "%*s[ERR] Cannot open: %s\r\n", depth * 2, "", path );
 8001e68:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001e6c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	0059      	lsls	r1, r3, #1
 8001e74:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001e78:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f78 <sd_list_directory_recursive+0x14c>)
 8001e80:	483e      	ldr	r0, [pc, #248]	@ (8001f7c <sd_list_directory_recursive+0x150>)
 8001e82:	f012 fd75 	bl	8014970 <iprintf>
 8001e86:	e072      	b.n	8001f6e <sd_list_directory_recursive+0x142>
        return;
    }

    while( 1 )
    {
        res = f_readdir( &dir, &fno );
 8001e88:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001e8c:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f012 f9af 	bl	80141f6 <f_readdir>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df
        if( res != FR_OK || fno.fname[0] == 0 )
 8001e9e:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d15e      	bne.n	8001f64 <sd_list_directory_recursive+0x138>
 8001ea6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001eaa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001eae:	7d9b      	ldrb	r3, [r3, #22]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d057      	beq.n	8001f64 <sd_list_directory_recursive+0x138>
            break;

        const char *name = ( *fno.fname ) ? fno.fname : fno.fname;
 8001eb4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001eb8:	3316      	adds	r3, #22
 8001eba:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8

        if( fno.fattrib & AM_DIR )
 8001ebe:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001ec2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001ec6:	7a1b      	ldrb	r3, [r3, #8]
 8001ec8:	f003 0310 	and.w	r3, r3, #16
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d036      	beq.n	8001f3e <sd_list_directory_recursive+0x112>
        {
            if( strcmp( name, "." ) && strcmp( name, ".." ) )
 8001ed0:	492b      	ldr	r1, [pc, #172]	@ (8001f80 <sd_list_directory_recursive+0x154>)
 8001ed2:	f8d7 01d8 	ldr.w	r0, [r7, #472]	@ 0x1d8
 8001ed6:	f7fe f983 	bl	80001e0 <strcmp>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0d3      	beq.n	8001e88 <sd_list_directory_recursive+0x5c>
 8001ee0:	4928      	ldr	r1, [pc, #160]	@ (8001f84 <sd_list_directory_recursive+0x158>)
 8001ee2:	f8d7 01d8 	ldr.w	r0, [r7, #472]	@ 0x1d8
 8001ee6:	f7fe f97b 	bl	80001e0 <strcmp>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0cb      	beq.n	8001e88 <sd_list_directory_recursive+0x5c>
            {
                printf( "%*s📁 %s\r\n", depth * 2, "", name );
 8001ef0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001ef4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	0059      	lsls	r1, r3, #1
 8001efc:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8001f00:	4a1d      	ldr	r2, [pc, #116]	@ (8001f78 <sd_list_directory_recursive+0x14c>)
 8001f02:	4821      	ldr	r0, [pc, #132]	@ (8001f88 <sd_list_directory_recursive+0x15c>)
 8001f04:	f012 fd34 	bl	8014970 <iprintf>
                char newpath[128];
                snprintf( newpath, sizeof( newpath ), "%s/%s", path, name );
 8001f08:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001f0c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001f10:	f107 000c 	add.w	r0, r7, #12
 8001f14:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001f18:	9200      	str	r2, [sp, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8001f8c <sd_list_directory_recursive+0x160>)
 8001f1e:	2180      	movs	r1, #128	@ 0x80
 8001f20:	f012 fd96 	bl	8014a50 <sniprintf>
                sd_list_directory_recursive( newpath, depth + 1 );
 8001f24:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001f28:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff78 	bl	8001e2c <sd_list_directory_recursive>
 8001f3c:	e7a4      	b.n	8001e88 <sd_list_directory_recursive+0x5c>
            }
        }
        else
        {
            printf( "%*s📄 %s (%lu bytes)\r\n", depth * 2, "", name, (unsigned long) fno.fsize );
 8001f3e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001f42:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0059      	lsls	r1, r3, #1
 8001f4a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001f4e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8001f5a:	4a07      	ldr	r2, [pc, #28]	@ (8001f78 <sd_list_directory_recursive+0x14c>)
 8001f5c:	480c      	ldr	r0, [pc, #48]	@ (8001f90 <sd_list_directory_recursive+0x164>)
 8001f5e:	f012 fd07 	bl	8014970 <iprintf>
    {
 8001f62:	e791      	b.n	8001e88 <sd_list_directory_recursive+0x5c>
        }
    }
    f_closedir( &dir );
 8001f64:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f012 f91e 	bl	80141aa <f_closedir>
}
 8001f6e:	f507 77f0 	add.w	r7, r7, #480	@ 0x1e0
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	08016cc8 	.word	0x08016cc8
 8001f7c:	08016ccc 	.word	0x08016ccc
 8001f80:	08016ce8 	.word	0x08016ce8
 8001f84:	08016cec 	.word	0x08016cec
 8001f88:	08016cf0 	.word	0x08016cf0
 8001f8c:	08016d00 	.word	0x08016d00
 8001f90:	08016d08 	.word	0x08016d08

08001f94 <sd_list_files>:

void sd_list_files( void )
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
    printf( "📂 Files on SD Card:\r\n" );
 8001f98:	4805      	ldr	r0, [pc, #20]	@ (8001fb0 <sd_list_files+0x1c>)
 8001f9a:	f012 fd51 	bl	8014a40 <puts>
    sd_list_directory_recursive( sd_path, 0 );
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4804      	ldr	r0, [pc, #16]	@ (8001fb4 <sd_list_files+0x20>)
 8001fa2:	f7ff ff43 	bl	8001e2c <sd_list_directory_recursive>
    printf( "\r\n\r\n" );
 8001fa6:	4804      	ldr	r0, [pc, #16]	@ (8001fb8 <sd_list_files+0x24>)
 8001fa8:	f012 fd4a 	bl	8014a40 <puts>
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	08016d24 	.word	0x08016d24
 8001fb4:	20014b78 	.word	0x20014b78
 8001fb8:	08016d3c 	.word	0x08016d3c

08001fbc <SD_TransmitByte>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
	if (hspi == &hspi1) dma_rx_done = 1;
}
#endif

static void SD_TransmitByte(uint8_t data) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&SD_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 8001fc6:	1df9      	adds	r1, r7, #7
 8001fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4803      	ldr	r0, [pc, #12]	@ (8001fdc <SD_TransmitByte+0x20>)
 8001fd0:	f00d f9cb 	bl	800f36a <HAL_SPI_Transmit>
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	200002a0 	.word	0x200002a0

08001fe0 <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af02      	add	r7, sp, #8
    uint8_t dummy = 0xFF, data = 0;
 8001fe6:	23ff      	movs	r3, #255	@ 0xff
 8001fe8:	71fb      	strb	r3, [r7, #7]
 8001fea:	2300      	movs	r3, #0
 8001fec:	71bb      	strb	r3, [r7, #6]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dummy, &data, 1, HAL_MAX_DELAY);
 8001fee:	1dba      	adds	r2, r7, #6
 8001ff0:	1df9      	adds	r1, r7, #7
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	4804      	ldr	r0, [pc, #16]	@ (800200c <SD_ReceiveByte+0x2c>)
 8001ffc:	f00d faf9 	bl	800f5f2 <HAL_SPI_TransmitReceive>
    return data;
 8002000:	79bb      	ldrb	r3, [r7, #6]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200002a0 	.word	0x200002a0

08002010 <SD_TransmitBuffer>:

static void SD_TransmitBuffer(const uint8_t *buffer, uint16_t len) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
#if USE_DMA
    dma_tx_done = 0;
    HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t *)buffer, len);
    while (!dma_tx_done);
#else
    HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 800201c:	887a      	ldrh	r2, [r7, #2]
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4803      	ldr	r0, [pc, #12]	@ (8002034 <SD_TransmitBuffer+0x24>)
 8002026:	f00d f9a0 	bl	800f36a <HAL_SPI_Transmit>
#endif
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200002a0 	.word	0x200002a0

08002038 <SD_ReceiveBuffer>:

static void SD_ReceiveBuffer(uint8_t *buffer, uint16_t len) {
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < len; i++) tx_dummy[i] = 0xFF;  // Fill with 0xFF
    dma_rx_done = 0;
    HAL_SPI_TransmitReceive_DMA(&hspi1, tx_dummy, buffer, len);
    while (!dma_rx_done);
#else
    for (uint16_t i = 0; i < len; i++) {
 8002044:	2300      	movs	r3, #0
 8002046:	81fb      	strh	r3, [r7, #14]
 8002048:	e009      	b.n	800205e <SD_ReceiveBuffer+0x26>
        buffer[i] = SD_ReceiveByte();
 800204a:	89fb      	ldrh	r3, [r7, #14]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	18d4      	adds	r4, r2, r3
 8002050:	f7ff ffc6 	bl	8001fe0 <SD_ReceiveByte>
 8002054:	4603      	mov	r3, r0
 8002056:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < len; i++) {
 8002058:	89fb      	ldrh	r3, [r7, #14]
 800205a:	3301      	adds	r3, #1
 800205c:	81fb      	strh	r3, [r7, #14]
 800205e:	89fa      	ldrh	r2, [r7, #14]
 8002060:	887b      	ldrh	r3, [r7, #2]
 8002062:	429a      	cmp	r2, r3
 8002064:	d3f1      	bcc.n	800204a <SD_ReceiveBuffer+0x12>
    }
#endif
}
 8002066:	bf00      	nop
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	bd90      	pop	{r4, r7, pc}

08002070 <SD_WaitReady>:

static SD_Status SD_WaitReady(void) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
    uint32_t timeout = HAL_GetTick() + 500;
 8002076:	f00a fb31 	bl	800c6dc <HAL_GetTick>
 800207a:	4603      	mov	r3, r0
 800207c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002080:	607b      	str	r3, [r7, #4]
    uint8_t resp;
    do {
        resp = SD_ReceiveByte();
 8002082:	f7ff ffad 	bl	8001fe0 <SD_ReceiveByte>
 8002086:	4603      	mov	r3, r0
 8002088:	70fb      	strb	r3, [r7, #3]
        if (resp == 0xFF) return SD_OK;
 800208a:	78fb      	ldrb	r3, [r7, #3]
 800208c:	2bff      	cmp	r3, #255	@ 0xff
 800208e:	d101      	bne.n	8002094 <SD_WaitReady+0x24>
 8002090:	2300      	movs	r3, #0
 8002092:	e006      	b.n	80020a2 <SD_WaitReady+0x32>
    } while (HAL_GetTick() < timeout);
 8002094:	f00a fb22 	bl	800c6dc <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4293      	cmp	r3, r2
 800209e:	d8f0      	bhi.n	8002082 <SD_WaitReady+0x12>
    return SD_ERROR;
 80020a0:	2301      	movs	r3, #1
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	6039      	str	r1, [r7, #0]
 80020b4:	71fb      	strb	r3, [r7, #7]
 80020b6:	4613      	mov	r3, r2
 80020b8:	71bb      	strb	r3, [r7, #6]
    uint8_t response, retry = 0xFF;
 80020ba:	23ff      	movs	r3, #255	@ 0xff
 80020bc:	73fb      	strb	r3, [r7, #15]

    SD_WaitReady();
 80020be:	f7ff ffd7 	bl	8002070 <SD_WaitReady>
    SD_TransmitByte(0x40 | cmd);
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff ff76 	bl	8001fbc <SD_TransmitByte>
    SD_TransmitByte(arg >> 24);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	0e1b      	lsrs	r3, r3, #24
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ff70 	bl	8001fbc <SD_TransmitByte>
    SD_TransmitByte(arg >> 16);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	0c1b      	lsrs	r3, r3, #16
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff ff6a 	bl	8001fbc <SD_TransmitByte>
    SD_TransmitByte(arg >> 8);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	0a1b      	lsrs	r3, r3, #8
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff64 	bl	8001fbc <SD_TransmitByte>
    SD_TransmitByte(arg);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff5f 	bl	8001fbc <SD_TransmitByte>
    SD_TransmitByte(crc);
 80020fe:	79bb      	ldrb	r3, [r7, #6]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff5b 	bl	8001fbc <SD_TransmitByte>

    do {
        response = SD_ReceiveByte();
 8002106:	f7ff ff6b 	bl	8001fe0 <SD_ReceiveByte>
 800210a:	4603      	mov	r3, r0
 800210c:	73bb      	strb	r3, [r7, #14]
    } while ((response & 0x80) && --retry);
 800210e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002112:	2b00      	cmp	r3, #0
 8002114:	da05      	bge.n	8002122 <SD_SendCommand+0x78>
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	3b01      	subs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f1      	bne.n	8002106 <SD_SendCommand+0x5c>

    return response;
 8002122:	7bbb      	ldrb	r3, [r7, #14]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <sd_is_sdhc>:

static uint8_t sdhc = 0;
uint8_t sd_is_sdhc(void) {
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
    return sdhc;
 8002130:	4b03      	ldr	r3, [pc, #12]	@ (8002140 <sd_is_sdhc+0x14>)
 8002132:	781b      	ldrb	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20014db0 	.word	0x20014db0

08002144 <SD_SPI_Init>:
uint8_t card_initialized = 0;

SD_Status SD_SPI_Init(void) {
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
    uint8_t i, response;
    uint8_t r7[4];
    uint32_t retry;

    SD_CS_HIGH();
 800214a:	2201      	movs	r2, #1
 800214c:	2120      	movs	r1, #32
 800214e:	4873      	ldr	r0, [pc, #460]	@ (800231c <SD_SPI_Init+0x1d8>)
 8002150:	f00a feb4 	bl	800cebc <HAL_GPIO_WritePin>
    for (i = 0; i < 10; i++) SD_TransmitByte(0xFF);
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]
 8002158:	e005      	b.n	8002166 <SD_SPI_Init+0x22>
 800215a:	20ff      	movs	r0, #255	@ 0xff
 800215c:	f7ff ff2e 	bl	8001fbc <SD_TransmitByte>
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	3301      	adds	r3, #1
 8002164:	73fb      	strb	r3, [r7, #15]
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	2b09      	cmp	r3, #9
 800216a:	d9f6      	bls.n	800215a <SD_SPI_Init+0x16>

    SD_CS_LOW();
 800216c:	2200      	movs	r2, #0
 800216e:	2120      	movs	r1, #32
 8002170:	486a      	ldr	r0, [pc, #424]	@ (800231c <SD_SPI_Init+0x1d8>)
 8002172:	f00a fea3 	bl	800cebc <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD0, 0, 0x95);
 8002176:	2295      	movs	r2, #149	@ 0x95
 8002178:	2100      	movs	r1, #0
 800217a:	2000      	movs	r0, #0
 800217c:	f7ff ff95 	bl	80020aa <SD_SendCommand>
 8002180:	4603      	mov	r3, r0
 8002182:	73bb      	strb	r3, [r7, #14]
    SD_CS_HIGH();
 8002184:	2201      	movs	r2, #1
 8002186:	2120      	movs	r1, #32
 8002188:	4864      	ldr	r0, [pc, #400]	@ (800231c <SD_SPI_Init+0x1d8>)
 800218a:	f00a fe97 	bl	800cebc <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 800218e:	20ff      	movs	r0, #255	@ 0xff
 8002190:	f7ff ff14 	bl	8001fbc <SD_TransmitByte>
    if (response != 0x01) return SD_ERROR;
 8002194:	7bbb      	ldrb	r3, [r7, #14]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d001      	beq.n	800219e <SD_SPI_Init+0x5a>
 800219a:	2301      	movs	r3, #1
 800219c:	e0ba      	b.n	8002314 <SD_SPI_Init+0x1d0>

    SD_CS_LOW();
 800219e:	2200      	movs	r2, #0
 80021a0:	2120      	movs	r1, #32
 80021a2:	485e      	ldr	r0, [pc, #376]	@ (800231c <SD_SPI_Init+0x1d8>)
 80021a4:	f00a fe8a 	bl	800cebc <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD8, 0x000001AA, 0x87);
 80021a8:	2287      	movs	r2, #135	@ 0x87
 80021aa:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80021ae:	2008      	movs	r0, #8
 80021b0:	f7ff ff7b 	bl	80020aa <SD_SendCommand>
 80021b4:	4603      	mov	r3, r0
 80021b6:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 4; i++) r7[i] = SD_ReceiveByte();
 80021b8:	2300      	movs	r3, #0
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	e00c      	b.n	80021d8 <SD_SPI_Init+0x94>
 80021be:	7bfc      	ldrb	r4, [r7, #15]
 80021c0:	f7ff ff0e 	bl	8001fe0 <SD_ReceiveByte>
 80021c4:	4603      	mov	r3, r0
 80021c6:	461a      	mov	r2, r3
 80021c8:	f104 0310 	add.w	r3, r4, #16
 80021cc:	443b      	add	r3, r7
 80021ce:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	3301      	adds	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d9ef      	bls.n	80021be <SD_SPI_Init+0x7a>
    SD_CS_HIGH();
 80021de:	2201      	movs	r2, #1
 80021e0:	2120      	movs	r1, #32
 80021e2:	484e      	ldr	r0, [pc, #312]	@ (800231c <SD_SPI_Init+0x1d8>)
 80021e4:	f00a fe6a 	bl	800cebc <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 80021e8:	20ff      	movs	r0, #255	@ 0xff
 80021ea:	f7ff fee7 	bl	8001fbc <SD_TransmitByte>

    sdhc = 0;
 80021ee:	4b4c      	ldr	r3, [pc, #304]	@ (8002320 <SD_SPI_Init+0x1dc>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
    retry = HAL_GetTick() + 1000;
 80021f4:	f00a fa72 	bl	800c6dc <HAL_GetTick>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80021fe:	60bb      	str	r3, [r7, #8]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8002200:	7bbb      	ldrb	r3, [r7, #14]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d15a      	bne.n	80022bc <SD_SPI_Init+0x178>
 8002206:	79bb      	ldrb	r3, [r7, #6]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d157      	bne.n	80022bc <SD_SPI_Init+0x178>
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	2baa      	cmp	r3, #170	@ 0xaa
 8002210:	d154      	bne.n	80022bc <SD_SPI_Init+0x178>
        do {
            SD_CS_LOW();
 8002212:	2200      	movs	r2, #0
 8002214:	2120      	movs	r1, #32
 8002216:	4841      	ldr	r0, [pc, #260]	@ (800231c <SD_SPI_Init+0x1d8>)
 8002218:	f00a fe50 	bl	800cebc <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 800221c:	22ff      	movs	r2, #255	@ 0xff
 800221e:	2100      	movs	r1, #0
 8002220:	2037      	movs	r0, #55	@ 0x37
 8002222:	f7ff ff42 	bl	80020aa <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0x40000000, 0xFF);
 8002226:	22ff      	movs	r2, #255	@ 0xff
 8002228:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800222c:	2029      	movs	r0, #41	@ 0x29
 800222e:	f7ff ff3c 	bl	80020aa <SD_SendCommand>
 8002232:	4603      	mov	r3, r0
 8002234:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 8002236:	2201      	movs	r2, #1
 8002238:	2120      	movs	r1, #32
 800223a:	4838      	ldr	r0, [pc, #224]	@ (800231c <SD_SPI_Init+0x1d8>)
 800223c:	f00a fe3e 	bl	800cebc <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8002240:	20ff      	movs	r0, #255	@ 0xff
 8002242:	f7ff febb 	bl	8001fbc <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8002246:	7bbb      	ldrb	r3, [r7, #14]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <SD_SPI_Init+0x114>
 800224c:	f00a fa46 	bl	800c6dc <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	4293      	cmp	r3, r2
 8002256:	d8dc      	bhi.n	8002212 <SD_SPI_Init+0xce>

        if (response != 0x00) return SD_ERROR;
 8002258:	7bbb      	ldrb	r3, [r7, #14]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <SD_SPI_Init+0x11e>
 800225e:	2301      	movs	r3, #1
 8002260:	e058      	b.n	8002314 <SD_SPI_Init+0x1d0>

        SD_CS_LOW();
 8002262:	2200      	movs	r2, #0
 8002264:	2120      	movs	r1, #32
 8002266:	482d      	ldr	r0, [pc, #180]	@ (800231c <SD_SPI_Init+0x1d8>)
 8002268:	f00a fe28 	bl	800cebc <HAL_GPIO_WritePin>
        response = SD_SendCommand(CMD58, 0, 0xFF);
 800226c:	22ff      	movs	r2, #255	@ 0xff
 800226e:	2100      	movs	r1, #0
 8002270:	203a      	movs	r0, #58	@ 0x3a
 8002272:	f7ff ff1a 	bl	80020aa <SD_SendCommand>
 8002276:	4603      	mov	r3, r0
 8002278:	73bb      	strb	r3, [r7, #14]
        uint8_t ocr[4];
        for (i = 0; i < 4; i++) ocr[i] = SD_ReceiveByte();
 800227a:	2300      	movs	r3, #0
 800227c:	73fb      	strb	r3, [r7, #15]
 800227e:	e00c      	b.n	800229a <SD_SPI_Init+0x156>
 8002280:	7bfc      	ldrb	r4, [r7, #15]
 8002282:	f7ff fead 	bl	8001fe0 <SD_ReceiveByte>
 8002286:	4603      	mov	r3, r0
 8002288:	461a      	mov	r2, r3
 800228a:	f104 0310 	add.w	r3, r4, #16
 800228e:	443b      	add	r3, r7
 8002290:	f803 2c10 	strb.w	r2, [r3, #-16]
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	3301      	adds	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d9ef      	bls.n	8002280 <SD_SPI_Init+0x13c>
        SD_CS_HIGH();
 80022a0:	2201      	movs	r2, #1
 80022a2:	2120      	movs	r1, #32
 80022a4:	481d      	ldr	r0, [pc, #116]	@ (800231c <SD_SPI_Init+0x1d8>)
 80022a6:	f00a fe09 	bl	800cebc <HAL_GPIO_WritePin>
        if (ocr[0] & 0x40) sdhc = 1;
 80022aa:	783b      	ldrb	r3, [r7, #0]
 80022ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d02a      	beq.n	800230a <SD_SPI_Init+0x1c6>
 80022b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <SD_SPI_Init+0x1dc>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 80022ba:	e026      	b.n	800230a <SD_SPI_Init+0x1c6>
    } else {
        do {
            SD_CS_LOW();
 80022bc:	2200      	movs	r2, #0
 80022be:	2120      	movs	r1, #32
 80022c0:	4816      	ldr	r0, [pc, #88]	@ (800231c <SD_SPI_Init+0x1d8>)
 80022c2:	f00a fdfb 	bl	800cebc <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 80022c6:	22ff      	movs	r2, #255	@ 0xff
 80022c8:	2100      	movs	r1, #0
 80022ca:	2037      	movs	r0, #55	@ 0x37
 80022cc:	f7ff feed 	bl	80020aa <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0, 0xFF);
 80022d0:	22ff      	movs	r2, #255	@ 0xff
 80022d2:	2100      	movs	r1, #0
 80022d4:	2029      	movs	r0, #41	@ 0x29
 80022d6:	f7ff fee8 	bl	80020aa <SD_SendCommand>
 80022da:	4603      	mov	r3, r0
 80022dc:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 80022de:	2201      	movs	r2, #1
 80022e0:	2120      	movs	r1, #32
 80022e2:	480e      	ldr	r0, [pc, #56]	@ (800231c <SD_SPI_Init+0x1d8>)
 80022e4:	f00a fdea 	bl	800cebc <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 80022e8:	20ff      	movs	r0, #255	@ 0xff
 80022ea:	f7ff fe67 	bl	8001fbc <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 80022ee:	7bbb      	ldrb	r3, [r7, #14]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d005      	beq.n	8002300 <SD_SPI_Init+0x1bc>
 80022f4:	f00a f9f2 	bl	800c6dc <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d8dd      	bhi.n	80022bc <SD_SPI_Init+0x178>
        if (response != 0x00) return SD_ERROR;
 8002300:	7bbb      	ldrb	r3, [r7, #14]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <SD_SPI_Init+0x1c8>
 8002306:	2301      	movs	r3, #1
 8002308:	e004      	b.n	8002314 <SD_SPI_Init+0x1d0>
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 800230a:	bf00      	nop
    }

    card_initialized = 1;
 800230c:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <SD_SPI_Init+0x1e0>)
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
    return SD_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	bd90      	pop	{r4, r7, pc}
 800231c:	40020400 	.word	0x40020400
 8002320:	20014db0 	.word	0x20014db0
 8002324:	20014db1 	.word	0x20014db1

08002328 <SD_ReadBlocks>:

SD_Status SD_ReadBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <SD_ReadBlocks+0x16>
 800233a:	2301      	movs	r3, #1
 800233c:	e054      	b.n	80023e8 <SD_ReadBlocks+0xc0>

    if (count == 1) {
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d14b      	bne.n	80023dc <SD_ReadBlocks+0xb4>
    	if (!sdhc) sector *= 512;
 8002344:	4b2a      	ldr	r3, [pc, #168]	@ (80023f0 <SD_ReadBlocks+0xc8>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d102      	bne.n	8002352 <SD_ReadBlocks+0x2a>
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	025b      	lsls	r3, r3, #9
 8002350:	60bb      	str	r3, [r7, #8]
        SD_CS_LOW();
 8002352:	2200      	movs	r2, #0
 8002354:	2120      	movs	r1, #32
 8002356:	4827      	ldr	r0, [pc, #156]	@ (80023f4 <SD_ReadBlocks+0xcc>)
 8002358:	f00a fdb0 	bl	800cebc <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD17, sector, 0xFF) != 0x00) {
 800235c:	22ff      	movs	r2, #255	@ 0xff
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	2011      	movs	r0, #17
 8002362:	f7ff fea2 	bl	80020aa <SD_SendCommand>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <SD_ReadBlocks+0x52>
            SD_CS_HIGH();
 800236c:	2201      	movs	r2, #1
 800236e:	2120      	movs	r1, #32
 8002370:	4820      	ldr	r0, [pc, #128]	@ (80023f4 <SD_ReadBlocks+0xcc>)
 8002372:	f00a fda3 	bl	800cebc <HAL_GPIO_WritePin>
            return SD_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e036      	b.n	80023e8 <SD_ReadBlocks+0xc0>
        }

        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 800237a:	f00a f9af 	bl	800c6dc <HAL_GetTick>
 800237e:	4603      	mov	r3, r0
 8002380:	33c8      	adds	r3, #200	@ 0xc8
 8002382:	617b      	str	r3, [r7, #20]
        do {
            token = SD_ReceiveByte();
 8002384:	f7ff fe2c 	bl	8001fe0 <SD_ReceiveByte>
 8002388:	4603      	mov	r3, r0
 800238a:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 800238c:	7cfb      	ldrb	r3, [r7, #19]
 800238e:	2bfe      	cmp	r3, #254	@ 0xfe
 8002390:	d006      	beq.n	80023a0 <SD_ReadBlocks+0x78>
        } while (HAL_GetTick() < timeout);
 8002392:	f00a f9a3 	bl	800c6dc <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	4293      	cmp	r3, r2
 800239c:	d8f2      	bhi.n	8002384 <SD_ReadBlocks+0x5c>
 800239e:	e000      	b.n	80023a2 <SD_ReadBlocks+0x7a>
            if (token == 0xFE) break;
 80023a0:	bf00      	nop
        if (token != 0xFE) {
 80023a2:	7cfb      	ldrb	r3, [r7, #19]
 80023a4:	2bfe      	cmp	r3, #254	@ 0xfe
 80023a6:	d006      	beq.n	80023b6 <SD_ReadBlocks+0x8e>
            SD_CS_HIGH();
 80023a8:	2201      	movs	r2, #1
 80023aa:	2120      	movs	r1, #32
 80023ac:	4811      	ldr	r0, [pc, #68]	@ (80023f4 <SD_ReadBlocks+0xcc>)
 80023ae:	f00a fd85 	bl	800cebc <HAL_GPIO_WritePin>
            return SD_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e018      	b.n	80023e8 <SD_ReadBlocks+0xc0>
        }

        SD_ReceiveBuffer(buff, 512);
 80023b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f7ff fe3c 	bl	8002038 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // CRC
 80023c0:	f7ff fe0e 	bl	8001fe0 <SD_ReceiveByte>
        SD_ReceiveByte();
 80023c4:	f7ff fe0c 	bl	8001fe0 <SD_ReceiveByte>
        SD_CS_HIGH();
 80023c8:	2201      	movs	r2, #1
 80023ca:	2120      	movs	r1, #32
 80023cc:	4809      	ldr	r0, [pc, #36]	@ (80023f4 <SD_ReadBlocks+0xcc>)
 80023ce:	f00a fd75 	bl	800cebc <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 80023d2:	20ff      	movs	r0, #255	@ 0xff
 80023d4:	f7ff fdf2 	bl	8001fbc <SD_TransmitByte>
        return SD_OK;
 80023d8:	2300      	movs	r3, #0
 80023da:	e005      	b.n	80023e8 <SD_ReadBlocks+0xc0>
    } else {
        return SD_ReadMultiBlocks(buff, sector, count);
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 f809 	bl	80023f8 <SD_ReadMultiBlocks>
 80023e6:	4603      	mov	r3, r0
    }
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20014db0 	.word	0x20014db0
 80023f4:	40020400 	.word	0x40020400

080023f8 <SD_ReadMultiBlocks>:

SD_Status SD_ReadMultiBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <SD_ReadMultiBlocks+0x16>
 800240a:	2301      	movs	r3, #1
 800240c:	e058      	b.n	80024c0 <SD_ReadMultiBlocks+0xc8>
    if (!sdhc) sector *= 512;
 800240e:	4b2e      	ldr	r3, [pc, #184]	@ (80024c8 <SD_ReadMultiBlocks+0xd0>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d102      	bne.n	800241c <SD_ReadMultiBlocks+0x24>
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	025b      	lsls	r3, r3, #9
 800241a:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 800241c:	2200      	movs	r2, #0
 800241e:	2120      	movs	r1, #32
 8002420:	482a      	ldr	r0, [pc, #168]	@ (80024cc <SD_ReadMultiBlocks+0xd4>)
 8002422:	f00a fd4b 	bl	800cebc <HAL_GPIO_WritePin>
    if (SD_SendCommand(18, sector, 0xFF) != 0x00) {
 8002426:	22ff      	movs	r2, #255	@ 0xff
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	2012      	movs	r0, #18
 800242c:	f7ff fe3d 	bl	80020aa <SD_SendCommand>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d031      	beq.n	800249a <SD_ReadMultiBlocks+0xa2>
        SD_CS_HIGH();
 8002436:	2201      	movs	r2, #1
 8002438:	2120      	movs	r1, #32
 800243a:	4824      	ldr	r0, [pc, #144]	@ (80024cc <SD_ReadMultiBlocks+0xd4>)
 800243c:	f00a fd3e 	bl	800cebc <HAL_GPIO_WritePin>
        return SD_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e03d      	b.n	80024c0 <SD_ReadMultiBlocks+0xc8>
    }

    while (count--) {
        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8002444:	f00a f94a 	bl	800c6dc <HAL_GetTick>
 8002448:	4603      	mov	r3, r0
 800244a:	33c8      	adds	r3, #200	@ 0xc8
 800244c:	617b      	str	r3, [r7, #20]

        do {
            token = SD_ReceiveByte();
 800244e:	f7ff fdc7 	bl	8001fe0 <SD_ReceiveByte>
 8002452:	4603      	mov	r3, r0
 8002454:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 8002456:	7cfb      	ldrb	r3, [r7, #19]
 8002458:	2bfe      	cmp	r3, #254	@ 0xfe
 800245a:	d006      	beq.n	800246a <SD_ReadMultiBlocks+0x72>
        } while (HAL_GetTick() < timeout);
 800245c:	f00a f93e 	bl	800c6dc <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	4293      	cmp	r3, r2
 8002466:	d8f2      	bhi.n	800244e <SD_ReadMultiBlocks+0x56>
 8002468:	e000      	b.n	800246c <SD_ReadMultiBlocks+0x74>
            if (token == 0xFE) break;
 800246a:	bf00      	nop

        if (token != 0xFE) {
 800246c:	7cfb      	ldrb	r3, [r7, #19]
 800246e:	2bfe      	cmp	r3, #254	@ 0xfe
 8002470:	d006      	beq.n	8002480 <SD_ReadMultiBlocks+0x88>
            SD_CS_HIGH();
 8002472:	2201      	movs	r2, #1
 8002474:	2120      	movs	r1, #32
 8002476:	4815      	ldr	r0, [pc, #84]	@ (80024cc <SD_ReadMultiBlocks+0xd4>)
 8002478:	f00a fd20 	bl	800cebc <HAL_GPIO_WritePin>
            return SD_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e01f      	b.n	80024c0 <SD_ReadMultiBlocks+0xc8>
        }

        SD_ReceiveBuffer(buff, 512);
 8002480:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f7ff fdd7 	bl	8002038 <SD_ReceiveBuffer>
        SD_ReceiveByte();  // discard CRC
 800248a:	f7ff fda9 	bl	8001fe0 <SD_ReceiveByte>
        SD_ReceiveByte();
 800248e:	f7ff fda7 	bl	8001fe0 <SD_ReceiveByte>

        buff += 512;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002498:	60fb      	str	r3, [r7, #12]
    while (count--) {
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	1e5a      	subs	r2, r3, #1
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1cf      	bne.n	8002444 <SD_ReadMultiBlocks+0x4c>
    }

    SD_SendCommand(12, 0, 0xFF);  // STOP_TRANSMISSION
 80024a4:	22ff      	movs	r2, #255	@ 0xff
 80024a6:	2100      	movs	r1, #0
 80024a8:	200c      	movs	r0, #12
 80024aa:	f7ff fdfe 	bl	80020aa <SD_SendCommand>
    SD_CS_HIGH();
 80024ae:	2201      	movs	r2, #1
 80024b0:	2120      	movs	r1, #32
 80024b2:	4806      	ldr	r0, [pc, #24]	@ (80024cc <SD_ReadMultiBlocks+0xd4>)
 80024b4:	f00a fd02 	bl	800cebc <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF); // Extra 8 clocks
 80024b8:	20ff      	movs	r0, #255	@ 0xff
 80024ba:	f7ff fd7f 	bl	8001fbc <SD_TransmitByte>

    return SD_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20014db0 	.word	0x20014db0
 80024cc:	40020400 	.word	0x40020400

080024d0 <SD_WriteBlocks>:

SD_Status SD_WriteBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <SD_WriteBlocks+0x16>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e051      	b.n	800258a <SD_WriteBlocks+0xba>

    if (count == 1) {
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d148      	bne.n	800257e <SD_WriteBlocks+0xae>
    	if (!sdhc) sector *= 512;
 80024ec:	4b29      	ldr	r3, [pc, #164]	@ (8002594 <SD_WriteBlocks+0xc4>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <SD_WriteBlocks+0x2a>
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	025b      	lsls	r3, r3, #9
 80024f8:	60bb      	str	r3, [r7, #8]
        SD_CS_LOW();
 80024fa:	2200      	movs	r2, #0
 80024fc:	2120      	movs	r1, #32
 80024fe:	4826      	ldr	r0, [pc, #152]	@ (8002598 <SD_WriteBlocks+0xc8>)
 8002500:	f00a fcdc 	bl	800cebc <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD24, sector, 0xFF) != 0x00) {
 8002504:	22ff      	movs	r2, #255	@ 0xff
 8002506:	68b9      	ldr	r1, [r7, #8]
 8002508:	2018      	movs	r0, #24
 800250a:	f7ff fdce 	bl	80020aa <SD_SendCommand>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d006      	beq.n	8002522 <SD_WriteBlocks+0x52>
            SD_CS_HIGH();
 8002514:	2201      	movs	r2, #1
 8002516:	2120      	movs	r1, #32
 8002518:	481f      	ldr	r0, [pc, #124]	@ (8002598 <SD_WriteBlocks+0xc8>)
 800251a:	f00a fccf 	bl	800cebc <HAL_GPIO_WritePin>
            return SD_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e033      	b.n	800258a <SD_WriteBlocks+0xba>
        }

        SD_TransmitByte(0xFE);
 8002522:	20fe      	movs	r0, #254	@ 0xfe
 8002524:	f7ff fd4a 	bl	8001fbc <SD_TransmitByte>
        SD_TransmitBuffer(buff, 512);
 8002528:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800252c:	68f8      	ldr	r0, [r7, #12]
 800252e:	f7ff fd6f 	bl	8002010 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);
 8002532:	20ff      	movs	r0, #255	@ 0xff
 8002534:	f7ff fd42 	bl	8001fbc <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 8002538:	20ff      	movs	r0, #255	@ 0xff
 800253a:	f7ff fd3f 	bl	8001fbc <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 800253e:	f7ff fd4f 	bl	8001fe0 <SD_ReceiveByte>
 8002542:	4603      	mov	r3, r0
 8002544:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 8002546:	7dfb      	ldrb	r3, [r7, #23]
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	2b05      	cmp	r3, #5
 800254e:	d006      	beq.n	800255e <SD_WriteBlocks+0x8e>
            SD_CS_HIGH();
 8002550:	2201      	movs	r2, #1
 8002552:	2120      	movs	r1, #32
 8002554:	4810      	ldr	r0, [pc, #64]	@ (8002598 <SD_WriteBlocks+0xc8>)
 8002556:	f00a fcb1 	bl	800cebc <HAL_GPIO_WritePin>
            return SD_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e015      	b.n	800258a <SD_WriteBlocks+0xba>
        }

        while (SD_ReceiveByte() == 0);
 800255e:	bf00      	nop
 8002560:	f7ff fd3e 	bl	8001fe0 <SD_ReceiveByte>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0fa      	beq.n	8002560 <SD_WriteBlocks+0x90>
        SD_CS_HIGH();
 800256a:	2201      	movs	r2, #1
 800256c:	2120      	movs	r1, #32
 800256e:	480a      	ldr	r0, [pc, #40]	@ (8002598 <SD_WriteBlocks+0xc8>)
 8002570:	f00a fca4 	bl	800cebc <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8002574:	20ff      	movs	r0, #255	@ 0xff
 8002576:	f7ff fd21 	bl	8001fbc <SD_TransmitByte>

        return SD_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e005      	b.n	800258a <SD_WriteBlocks+0xba>
    } else {
        return SD_WriteMultiBlocks(buff, sector, count);
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f80a 	bl	800259c <SD_WriteMultiBlocks>
 8002588:	4603      	mov	r3, r0
    }
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20014db0 	.word	0x20014db0
 8002598:	40020400 	.word	0x40020400

0800259c <SD_WriteMultiBlocks>:

SD_Status SD_WriteMultiBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <SD_WriteMultiBlocks+0x16>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e059      	b.n	8002666 <SD_WriteMultiBlocks+0xca>
    if (!sdhc) sector *= 512;
 80025b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002670 <SD_WriteMultiBlocks+0xd4>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d102      	bne.n	80025c0 <SD_WriteMultiBlocks+0x24>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	025b      	lsls	r3, r3, #9
 80025be:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 80025c0:	2200      	movs	r2, #0
 80025c2:	2120      	movs	r1, #32
 80025c4:	482b      	ldr	r0, [pc, #172]	@ (8002674 <SD_WriteMultiBlocks+0xd8>)
 80025c6:	f00a fc79 	bl	800cebc <HAL_GPIO_WritePin>
    if (SD_SendCommand(25, sector, 0xFF) != 0x00) {
 80025ca:	22ff      	movs	r2, #255	@ 0xff
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	2019      	movs	r0, #25
 80025d0:	f7ff fd6b 	bl	80020aa <SD_SendCommand>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d02e      	beq.n	8002638 <SD_WriteMultiBlocks+0x9c>
        SD_CS_HIGH();
 80025da:	2201      	movs	r2, #1
 80025dc:	2120      	movs	r1, #32
 80025de:	4825      	ldr	r0, [pc, #148]	@ (8002674 <SD_WriteMultiBlocks+0xd8>)
 80025e0:	f00a fc6c 	bl	800cebc <HAL_GPIO_WritePin>
        return SD_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e03e      	b.n	8002666 <SD_WriteMultiBlocks+0xca>
    }

    while (count--) {
        SD_TransmitByte(0xFC);  // Start multi-block write token
 80025e8:	20fc      	movs	r0, #252	@ 0xfc
 80025ea:	f7ff fce7 	bl	8001fbc <SD_TransmitByte>

        SD_TransmitBuffer((uint8_t *)buff, 512);
 80025ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f7ff fd0c 	bl	8002010 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);  // dummy CRC
 80025f8:	20ff      	movs	r0, #255	@ 0xff
 80025fa:	f7ff fcdf 	bl	8001fbc <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 80025fe:	20ff      	movs	r0, #255	@ 0xff
 8002600:	f7ff fcdc 	bl	8001fbc <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 8002604:	f7ff fcec 	bl	8001fe0 <SD_ReceiveByte>
 8002608:	4603      	mov	r3, r0
 800260a:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 800260c:	7dfb      	ldrb	r3, [r7, #23]
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	2b05      	cmp	r3, #5
 8002614:	d006      	beq.n	8002624 <SD_WriteMultiBlocks+0x88>
            SD_CS_HIGH();
 8002616:	2201      	movs	r2, #1
 8002618:	2120      	movs	r1, #32
 800261a:	4816      	ldr	r0, [pc, #88]	@ (8002674 <SD_WriteMultiBlocks+0xd8>)
 800261c:	f00a fc4e 	bl	800cebc <HAL_GPIO_WritePin>
            return SD_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e020      	b.n	8002666 <SD_WriteMultiBlocks+0xca>
        }

        while (SD_ReceiveByte() == 0);  // busy wait
 8002624:	bf00      	nop
 8002626:	f7ff fcdb 	bl	8001fe0 <SD_ReceiveByte>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0fa      	beq.n	8002626 <SD_WriteMultiBlocks+0x8a>
        buff += 512;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002636:	60fb      	str	r3, [r7, #12]
    while (count--) {
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	1e5a      	subs	r2, r3, #1
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1d2      	bne.n	80025e8 <SD_WriteMultiBlocks+0x4c>
    }

    SD_TransmitByte(0xFD);  // STOP_TRAN token
 8002642:	20fd      	movs	r0, #253	@ 0xfd
 8002644:	f7ff fcba 	bl	8001fbc <SD_TransmitByte>
    while (SD_ReceiveByte() == 0);  // busy wait
 8002648:	bf00      	nop
 800264a:	f7ff fcc9 	bl	8001fe0 <SD_ReceiveByte>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0fa      	beq.n	800264a <SD_WriteMultiBlocks+0xae>

    SD_CS_HIGH();
 8002654:	2201      	movs	r2, #1
 8002656:	2120      	movs	r1, #32
 8002658:	4806      	ldr	r0, [pc, #24]	@ (8002674 <SD_WriteMultiBlocks+0xd8>)
 800265a:	f00a fc2f 	bl	800cebc <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 800265e:	20ff      	movs	r0, #255	@ 0xff
 8002660:	f7ff fcac 	bl	8001fbc <SD_TransmitByte>

    return SD_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20014db0 	.word	0x20014db0
 8002674:	40020400 	.word	0x40020400

08002678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]
 8002682:	4b10      	ldr	r3, [pc, #64]	@ (80026c4 <HAL_MspInit+0x4c>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002686:	4a0f      	ldr	r2, [pc, #60]	@ (80026c4 <HAL_MspInit+0x4c>)
 8002688:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800268c:	6453      	str	r3, [r2, #68]	@ 0x44
 800268e:	4b0d      	ldr	r3, [pc, #52]	@ (80026c4 <HAL_MspInit+0x4c>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002696:	607b      	str	r3, [r7, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	603b      	str	r3, [r7, #0]
 800269e:	4b09      	ldr	r3, [pc, #36]	@ (80026c4 <HAL_MspInit+0x4c>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	4a08      	ldr	r2, [pc, #32]	@ (80026c4 <HAL_MspInit+0x4c>)
 80026a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026aa:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <HAL_MspInit+0x4c>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800

080026c8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	@ 0x28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a19      	ldr	r2, [pc, #100]	@ (800274c <HAL_SPI_MspInit+0x84>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d12b      	bne.n	8002742 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	4b18      	ldr	r3, [pc, #96]	@ (8002750 <HAL_SPI_MspInit+0x88>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f2:	4a17      	ldr	r2, [pc, #92]	@ (8002750 <HAL_SPI_MspInit+0x88>)
 80026f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026fa:	4b15      	ldr	r3, [pc, #84]	@ (8002750 <HAL_SPI_MspInit+0x88>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002702:	613b      	str	r3, [r7, #16]
 8002704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <HAL_SPI_MspInit+0x88>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	4a10      	ldr	r2, [pc, #64]	@ (8002750 <HAL_SPI_MspInit+0x88>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6313      	str	r3, [r2, #48]	@ 0x30
 8002716:	4b0e      	ldr	r3, [pc, #56]	@ (8002750 <HAL_SPI_MspInit+0x88>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002722:	23e0      	movs	r3, #224	@ 0xe0
 8002724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	2302      	movs	r3, #2
 8002728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272e:	2303      	movs	r3, #3
 8002730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002732:	2305      	movs	r3, #5
 8002734:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002736:	f107 0314 	add.w	r3, r7, #20
 800273a:	4619      	mov	r1, r3
 800273c:	4805      	ldr	r0, [pc, #20]	@ (8002754 <HAL_SPI_MspInit+0x8c>)
 800273e:	f00a f93d 	bl	800c9bc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002742:	bf00      	nop
 8002744:	3728      	adds	r7, #40	@ 0x28
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40013000 	.word	0x40013000
 8002750:	40023800 	.word	0x40023800
 8002754:	40020000 	.word	0x40020000

08002758 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a12      	ldr	r2, [pc, #72]	@ (80027b0 <HAL_TIM_Base_MspInit+0x58>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d11d      	bne.n	80027a6 <HAL_TIM_Base_MspInit+0x4e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <HAL_TIM_Base_MspInit+0x5c>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002772:	4a10      	ldr	r2, [pc, #64]	@ (80027b4 <HAL_TIM_Base_MspInit+0x5c>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6453      	str	r3, [r2, #68]	@ 0x44
 800277a:	4b0e      	ldr	r3, [pc, #56]	@ (80027b4 <HAL_TIM_Base_MspInit+0x5c>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002786:	2200      	movs	r2, #0
 8002788:	2100      	movs	r1, #0
 800278a:	2018      	movs	r0, #24
 800278c:	f00a f8b1 	bl	800c8f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002790:	2018      	movs	r0, #24
 8002792:	f00a f8ca 	bl	800c92a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002796:	2200      	movs	r2, #0
 8002798:	2100      	movs	r1, #0
 800279a:	2019      	movs	r0, #25
 800279c:	f00a f8a9 	bl	800c8f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80027a0:	2019      	movs	r0, #25
 80027a2:	f00a f8c2 	bl	800c92a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40010000 	.word	0x40010000
 80027b4:	40023800 	.word	0x40023800

080027b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027bc:	bf00      	nop
 80027be:	e7fd      	b.n	80027bc <NMI_Handler+0x4>

080027c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c4:	bf00      	nop
 80027c6:	e7fd      	b.n	80027c4 <HardFault_Handler+0x4>

080027c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027cc:	bf00      	nop
 80027ce:	e7fd      	b.n	80027cc <MemManage_Handler+0x4>

080027d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027d4:	bf00      	nop
 80027d6:	e7fd      	b.n	80027d4 <BusFault_Handler+0x4>

080027d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027dc:	bf00      	nop
 80027de:	e7fd      	b.n	80027dc <UsageFault_Handler+0x4>

080027e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800280e:	f009 ff51 	bl	800c6b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800281c:	4802      	ldr	r0, [pc, #8]	@ (8002828 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800281e:	f00d fa1f 	bl	800fc60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	200002f8 	.word	0x200002f8

0800282c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002830:	4802      	ldr	r0, [pc, #8]	@ (800283c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002832:	f00d fa15 	bl	800fc60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	200002f8 	.word	0x200002f8

08002840 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800284a:	4b13      	ldr	r3, [pc, #76]	@ (8002898 <BSP_I2C1_Init+0x58>)
 800284c:	4a13      	ldr	r2, [pc, #76]	@ (800289c <BSP_I2C1_Init+0x5c>)
 800284e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002850:	4b13      	ldr	r3, [pc, #76]	@ (80028a0 <BSP_I2C1_Init+0x60>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	4912      	ldr	r1, [pc, #72]	@ (80028a0 <BSP_I2C1_Init+0x60>)
 8002858:	600a      	str	r2, [r1, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d117      	bne.n	800288e <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800285e:	480e      	ldr	r0, [pc, #56]	@ (8002898 <BSP_I2C1_Init+0x58>)
 8002860:	f00b fb44 	bl	800deec <HAL_I2C_GetState>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d111      	bne.n	800288e <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800286a:	480b      	ldr	r0, [pc, #44]	@ (8002898 <BSP_I2C1_Init+0x58>)
 800286c:	f000 f936 	bl	8002adc <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10b      	bne.n	800288e <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002876:	4808      	ldr	r0, [pc, #32]	@ (8002898 <BSP_I2C1_Init+0x58>)
 8002878:	f000 f8fc 	bl	8002a74 <MX_I2C1_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002882:	f06f 0307 	mvn.w	r3, #7
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	e001      	b.n	800288e <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800288a:	2300      	movs	r3, #0
 800288c:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800288e:	687b      	ldr	r3, [r7, #4]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20014db4 	.word	0x20014db4
 800289c:	40005400 	.word	0x40005400
 80028a0:	20014e08 	.word	0x20014e08

080028a4 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80028ae:	4b0f      	ldr	r3, [pc, #60]	@ (80028ec <BSP_I2C1_DeInit+0x48>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d014      	beq.n	80028e0 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80028b6:	4b0d      	ldr	r3, [pc, #52]	@ (80028ec <BSP_I2C1_DeInit+0x48>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	4a0b      	ldr	r2, [pc, #44]	@ (80028ec <BSP_I2C1_DeInit+0x48>)
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	4b0a      	ldr	r3, [pc, #40]	@ (80028ec <BSP_I2C1_DeInit+0x48>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10b      	bne.n	80028e0 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80028c8:	4809      	ldr	r0, [pc, #36]	@ (80028f0 <BSP_I2C1_DeInit+0x4c>)
 80028ca:	f000 f951 	bl	8002b70 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80028ce:	4808      	ldr	r0, [pc, #32]	@ (80028f0 <BSP_I2C1_DeInit+0x4c>)
 80028d0:	f00a fc6c 	bl	800d1ac <HAL_I2C_DeInit>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80028da:	f06f 0307 	mvn.w	r3, #7
 80028de:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80028e0:	687b      	ldr	r3, [r7, #4]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20014e08 	.word	0x20014e08
 80028f0:	20014db4 	.word	0x20014db4

080028f4 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	@ 0x28
 80028f8:	af04      	add	r7, sp, #16
 80028fa:	60ba      	str	r2, [r7, #8]
 80028fc:	461a      	mov	r2, r3
 80028fe:	4603      	mov	r3, r0
 8002900:	81fb      	strh	r3, [r7, #14]
 8002902:	460b      	mov	r3, r1
 8002904:	81bb      	strh	r3, [r7, #12]
 8002906:	4613      	mov	r3, r2
 8002908:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800290e:	89ba      	ldrh	r2, [r7, #12]
 8002910:	89f9      	ldrh	r1, [r7, #14]
 8002912:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002916:	9302      	str	r3, [sp, #8]
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	2301      	movs	r3, #1
 8002922:	480c      	ldr	r0, [pc, #48]	@ (8002954 <BSP_I2C1_WriteReg+0x60>)
 8002924:	f00a ffb6 	bl	800d894 <HAL_I2C_Mem_Write>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00c      	beq.n	8002948 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800292e:	4809      	ldr	r0, [pc, #36]	@ (8002954 <BSP_I2C1_WriteReg+0x60>)
 8002930:	f00b faea 	bl	800df08 <HAL_I2C_GetError>
 8002934:	4603      	mov	r3, r0
 8002936:	2b04      	cmp	r3, #4
 8002938:	d103      	bne.n	8002942 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800293a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	e002      	b.n	8002948 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002942:	f06f 0303 	mvn.w	r3, #3
 8002946:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002948:	697b      	ldr	r3, [r7, #20]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20014db4 	.word	0x20014db4

08002958 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	@ 0x28
 800295c:	af04      	add	r7, sp, #16
 800295e:	60ba      	str	r2, [r7, #8]
 8002960:	461a      	mov	r2, r3
 8002962:	4603      	mov	r3, r0
 8002964:	81fb      	strh	r3, [r7, #14]
 8002966:	460b      	mov	r3, r1
 8002968:	81bb      	strh	r3, [r7, #12]
 800296a:	4613      	mov	r3, r2
 800296c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002972:	89ba      	ldrh	r2, [r7, #12]
 8002974:	89f9      	ldrh	r1, [r7, #14]
 8002976:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800297a:	9302      	str	r3, [sp, #8]
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	9301      	str	r3, [sp, #4]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	2301      	movs	r3, #1
 8002986:	480c      	ldr	r0, [pc, #48]	@ (80029b8 <BSP_I2C1_ReadReg+0x60>)
 8002988:	f00b f87e 	bl	800da88 <HAL_I2C_Mem_Read>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00c      	beq.n	80029ac <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002992:	4809      	ldr	r0, [pc, #36]	@ (80029b8 <BSP_I2C1_ReadReg+0x60>)
 8002994:	f00b fab8 	bl	800df08 <HAL_I2C_GetError>
 8002998:	4603      	mov	r3, r0
 800299a:	2b04      	cmp	r3, #4
 800299c:	d103      	bne.n	80029a6 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800299e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	e002      	b.n	80029ac <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80029a6:	f06f 0303 	mvn.w	r3, #3
 80029aa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80029ac:	697b      	ldr	r3, [r7, #20]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20014db4 	.word	0x20014db4

080029bc <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	80fb      	strh	r3, [r7, #6]
 80029c8:	4613      	mov	r3, r2
 80029ca:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80029d0:	88bb      	ldrh	r3, [r7, #4]
 80029d2:	88f9      	ldrh	r1, [r7, #6]
 80029d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029d8:	9200      	str	r2, [sp, #0]
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	480b      	ldr	r0, [pc, #44]	@ (8002a0c <BSP_I2C1_Send+0x50>)
 80029de:	f00a fc29 	bl	800d234 <HAL_I2C_Master_Transmit>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00c      	beq.n	8002a02 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80029e8:	4808      	ldr	r0, [pc, #32]	@ (8002a0c <BSP_I2C1_Send+0x50>)
 80029ea:	f00b fa8d 	bl	800df08 <HAL_I2C_GetError>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d003      	beq.n	80029fc <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80029f4:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	e002      	b.n	8002a02 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80029fc:	f06f 0303 	mvn.w	r3, #3
 8002a00:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002a02:	68fb      	ldr	r3, [r7, #12]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20014db4 	.word	0x20014db4

08002a10 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	4603      	mov	r3, r0
 8002a18:	6039      	str	r1, [r7, #0]
 8002a1a:	80fb      	strh	r3, [r7, #6]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002a24:	88bb      	ldrh	r3, [r7, #4]
 8002a26:	88f9      	ldrh	r1, [r7, #6]
 8002a28:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a2c:	9200      	str	r2, [sp, #0]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	480b      	ldr	r0, [pc, #44]	@ (8002a60 <BSP_I2C1_Recv+0x50>)
 8002a32:	f00a fcfd 	bl	800d430 <HAL_I2C_Master_Receive>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00c      	beq.n	8002a56 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8002a3c:	4808      	ldr	r0, [pc, #32]	@ (8002a60 <BSP_I2C1_Recv+0x50>)
 8002a3e:	f00b fa63 	bl	800df08 <HAL_I2C_GetError>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d003      	beq.n	8002a50 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002a48:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	e002      	b.n	8002a56 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002a50:	f06f 0303 	mvn.w	r3, #3
 8002a54:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8002a56:	68fb      	ldr	r3, [r7, #12]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20014db4 	.word	0x20014db4

08002a64 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002a68:	f009 fe38 	bl	800c6dc <HAL_GetTick>
 8002a6c:	4603      	mov	r3, r0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a14      	ldr	r2, [pc, #80]	@ (8002ad4 <MX_I2C1_Init+0x60>)
 8002a84:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a13      	ldr	r2, [pc, #76]	@ (8002ad8 <MX_I2C1_Init+0x64>)
 8002a8a:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a9e:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f00a fa33 	bl	800cf24 <HAL_I2C_Init>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40005400 	.word	0x40005400
 8002ad8:	00061a80 	.word	0x00061a80

08002adc <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	@ 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b68 <I2C1_MspInit+0x8c>)
 8002aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aec:	4a1e      	ldr	r2, [pc, #120]	@ (8002b68 <I2C1_MspInit+0x8c>)
 8002aee:	f043 0302 	orr.w	r3, r3, #2
 8002af2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b68 <I2C1_MspInit+0x8c>)
 8002af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002b00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b06:	2312      	movs	r3, #18
 8002b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8002b12:	2304      	movs	r3, #4
 8002b14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002b16:	f107 0314 	add.w	r3, r7, #20
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4813      	ldr	r0, [pc, #76]	@ (8002b6c <I2C1_MspInit+0x90>)
 8002b1e:	f009 ff4d 	bl	800c9bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002b22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b28:	2312      	movs	r3, #18
 8002b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b30:	2303      	movs	r3, #3
 8002b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002b34:	2304      	movs	r3, #4
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	480b      	ldr	r0, [pc, #44]	@ (8002b6c <I2C1_MspInit+0x90>)
 8002b40:	f009 ff3c 	bl	800c9bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b44:	2300      	movs	r3, #0
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	4b07      	ldr	r3, [pc, #28]	@ (8002b68 <I2C1_MspInit+0x8c>)
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	4a06      	ldr	r2, [pc, #24]	@ (8002b68 <I2C1_MspInit+0x8c>)
 8002b4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b52:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b54:	4b04      	ldr	r3, [pc, #16]	@ (8002b68 <I2C1_MspInit+0x8c>)
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002b60:	bf00      	nop
 8002b62:	3728      	adds	r7, #40	@ 0x28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40020400 	.word	0x40020400

08002b70 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002b78:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <I2C1_MspDeInit+0x30>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7c:	4a08      	ldr	r2, [pc, #32]	@ (8002ba0 <I2C1_MspDeInit+0x30>)
 8002b7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b82:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002b84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b88:	4806      	ldr	r0, [pc, #24]	@ (8002ba4 <I2C1_MspDeInit+0x34>)
 8002b8a:	f00a f89b 	bl	800ccc4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8002b8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b92:	4804      	ldr	r0, [pc, #16]	@ (8002ba4 <I2C1_MspDeInit+0x34>)
 8002b94:	f00a f896 	bl	800ccc4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40020400 	.word	0x40020400

08002ba8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	e00a      	b.n	8002bd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bba:	f3af 8000 	nop.w
 8002bbe:	4601      	mov	r1, r0
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	60ba      	str	r2, [r7, #8]
 8002bc6:	b2ca      	uxtb	r2, r1
 8002bc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	dbf0      	blt.n	8002bba <_read+0x12>
  }

  return len;
 8002bd8:	687b      	ldr	r3, [r7, #4]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c0a:	605a      	str	r2, [r3, #4]
  return 0;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <_isatty>:

int _isatty(int file)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c22:	2301      	movs	r3, #1
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c54:	4a14      	ldr	r2, [pc, #80]	@ (8002ca8 <_sbrk+0x5c>)
 8002c56:	4b15      	ldr	r3, [pc, #84]	@ (8002cac <_sbrk+0x60>)
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c60:	4b13      	ldr	r3, [pc, #76]	@ (8002cb0 <_sbrk+0x64>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c68:	4b11      	ldr	r3, [pc, #68]	@ (8002cb0 <_sbrk+0x64>)
 8002c6a:	4a12      	ldr	r2, [pc, #72]	@ (8002cb4 <_sbrk+0x68>)
 8002c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c6e:	4b10      	ldr	r3, [pc, #64]	@ (8002cb0 <_sbrk+0x64>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d207      	bcs.n	8002c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c7c:	f012 f854 	bl	8014d28 <__errno>
 8002c80:	4603      	mov	r3, r0
 8002c82:	220c      	movs	r2, #12
 8002c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c86:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8a:	e009      	b.n	8002ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c8c:	4b08      	ldr	r3, [pc, #32]	@ (8002cb0 <_sbrk+0x64>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c92:	4b07      	ldr	r3, [pc, #28]	@ (8002cb0 <_sbrk+0x64>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4413      	add	r3, r2
 8002c9a:	4a05      	ldr	r2, [pc, #20]	@ (8002cb0 <_sbrk+0x64>)
 8002c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20018000 	.word	0x20018000
 8002cac:	00000400 	.word	0x00000400
 8002cb0:	20014e0c 	.word	0x20014e0c
 8002cb4:	200153e8 	.word	0x200153e8

08002cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cbc:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <SystemInit+0x20>)
 8002cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc2:	4a05      	ldr	r2, [pc, #20]	@ (8002cd8 <SystemInit+0x20>)
 8002cc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <Reset_Handler>:
 8002cdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d14 <LoopFillZerobss+0xe>
 8002ce0:	f7ff ffea 	bl	8002cb8 <SystemInit>
 8002ce4:	480c      	ldr	r0, [pc, #48]	@ (8002d18 <LoopFillZerobss+0x12>)
 8002ce6:	490d      	ldr	r1, [pc, #52]	@ (8002d1c <LoopFillZerobss+0x16>)
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d20 <LoopFillZerobss+0x1a>)
 8002cea:	2300      	movs	r3, #0
 8002cec:	e002      	b.n	8002cf4 <LoopCopyDataInit>

08002cee <CopyDataInit>:
 8002cee:	58d4      	ldr	r4, [r2, r3]
 8002cf0:	50c4      	str	r4, [r0, r3]
 8002cf2:	3304      	adds	r3, #4

08002cf4 <LoopCopyDataInit>:
 8002cf4:	18c4      	adds	r4, r0, r3
 8002cf6:	428c      	cmp	r4, r1
 8002cf8:	d3f9      	bcc.n	8002cee <CopyDataInit>
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8002d24 <LoopFillZerobss+0x1e>)
 8002cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8002d28 <LoopFillZerobss+0x22>)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	e001      	b.n	8002d06 <LoopFillZerobss>

08002d02 <FillZerobss>:
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	3204      	adds	r2, #4

08002d06 <LoopFillZerobss>:
 8002d06:	42a2      	cmp	r2, r4
 8002d08:	d3fb      	bcc.n	8002d02 <FillZerobss>
 8002d0a:	f012 f813 	bl	8014d34 <__libc_init_array>
 8002d0e:	f7fe f98d 	bl	800102c <main>
 8002d12:	4770      	bx	lr
 8002d14:	20018000 	.word	0x20018000
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	20000284 	.word	0x20000284
 8002d20:	08017700 	.word	0x08017700
 8002d24:	20000284 	.word	0x20000284
 8002d28:	200153e4 	.word	0x200153e4

08002d2c <ADC_IRQHandler>:
 8002d2c:	e7fe      	b.n	8002d2c <ADC_IRQHandler>
	...

08002d30 <LIS2DUXS12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_RegisterBusIO(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_IO_t *pIO)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d103      	bne.n	8002d4c <LIS2DUXS12_RegisterBusIO+0x1c>
  {
    ret = LIS2DUXS12_ERROR;
 8002d44:	f04f 33ff 	mov.w	r3, #4294967295
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	e088      	b.n	8002e5e <LIS2DUXS12_RegisterBusIO+0x12e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	7b1a      	ldrb	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	699a      	ldr	r2, [r3, #24]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	619a      	str	r2, [r3, #24]
    pObj->IO.Delay     = pIO->Delay;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	69da      	ldr	r2, [r3, #28]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	61da      	str	r2, [r3, #28]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a36      	ldr	r2, [pc, #216]	@ (8002e68 <LIS2DUXS12_RegisterBusIO+0x138>)
 8002d90:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a35      	ldr	r2, [pc, #212]	@ (8002e6c <LIS2DUXS12_RegisterBusIO+0x13c>)
 8002d96:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	69da      	ldr	r2, [r3, #28]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d103      	bne.n	8002db6 <LIS2DUXS12_RegisterBusIO+0x86>
    {
      ret = LIS2DUXS12_ERROR;
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e053      	b.n	8002e5e <LIS2DUXS12_RegisterBusIO+0x12e>
    }
    else if (pObj->IO.Init() != LIS2DUXS12_OK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4798      	blx	r3
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <LIS2DUXS12_RegisterBusIO+0x9a>
    {
      ret = LIS2DUXS12_ERROR;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	e049      	b.n	8002e5e <LIS2DUXS12_RegisterBusIO+0x12e>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DUXS12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d11c      	bne.n	8002e0c <LIS2DUXS12_RegisterBusIO+0xdc>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d140      	bne.n	8002e5e <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          /* Exit from deep power down only the first time in SPI mode */
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f8f4 	bl	8002fca <LIS2DUXS12_ExitDeepPowerDownSPI>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <LIS2DUXS12_RegisterBusIO+0xbe>
          {
            ret = LIS2DUXS12_ERROR;
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dec:	60fb      	str	r3, [r7, #12]
          }
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x50;
 8002dee:	2350      	movs	r3, #80	@ 0x50
 8002df0:	72fb      	strb	r3, [r7, #11]

          if (LIS2DUXS12_Write_Reg(pObj, LIS2DUXS12_CTRL1, data) != LIS2DUXS12_OK)
 8002df2:	7afb      	ldrb	r3, [r7, #11]
 8002df4:	461a      	mov	r2, r3
 8002df6:	2110      	movs	r1, #16
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fbf6 	bl	80035ea <LIS2DUXS12_Write_Reg>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d02c      	beq.n	8002e5e <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 8002e04:	f04f 33ff 	mov.w	r3, #4294967295
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	e028      	b.n	8002e5e <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_SPI_4WIRES_BUS)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d10e      	bne.n	8002e32 <LIS2DUXS12_RegisterBusIO+0x102>
      {
        /* Exit from deep power down only the first time in SPI mode */
        if (pObj->is_initialized == 0U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d11f      	bne.n	8002e5e <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f8d3 	bl	8002fca <LIS2DUXS12_ExitDeepPowerDownSPI>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d019      	beq.n	8002e5e <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 8002e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	e015      	b.n	8002e5e <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_I2C_BUS)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10e      	bne.n	8002e58 <LIS2DUXS12_RegisterBusIO+0x128>
      {
        /* Exit from deep power down only the first time in I2C mode */
        if (pObj->is_initialized == 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10c      	bne.n	8002e5e <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          if (LIS2DUXS12_ExitDeepPowerDownI2C(pObj) != LIS2DUXS12_OK)
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f8ab 	bl	8002fa0 <LIS2DUXS12_ExitDeepPowerDownI2C>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d006      	beq.n	8002e5e <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 8002e50:	f04f 33ff 	mov.w	r3, #4294967295
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	e002      	b.n	8002e5e <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else
      {
        ret = LIS2DUXS12_ERROR;
 8002e58:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5c:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	08003aa5 	.word	0x08003aa5
 8002e6c:	08003adb 	.word	0x08003adb

08002e70 <LIS2DUXS12_Init>:
  * @brief  Initialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Init(LIS2DUXS12_Object_t *pObj)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  lis2duxs12_i3c_cfg_t val;

  if(pObj->IO.BusType != LIS2DUXS12_I3C_BUS)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d01f      	beq.n	8002ec0 <LIS2DUXS12_Init+0x50>
  {
    /* Disable I3C */
    if (lis2duxs12_i3c_configure_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3320      	adds	r3, #32
 8002e84:	f107 0214 	add.w	r2, r7, #20
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f001 fb0a 	bl	80044a4 <lis2duxs12_i3c_configure_get>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <LIS2DUXS12_Init+0x2c>
    {
      return LIS2DUXS12_ERROR;
 8002e96:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9a:	e05c      	b.n	8002f56 <LIS2DUXS12_Init+0xe6>
    }
    val.asf_on = PROPERTY_ENABLE;
 8002e9c:	7d7b      	ldrb	r3, [r7, #21]
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	757b      	strb	r3, [r7, #21]
    if (lis2duxs12_i3c_configure_set(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3320      	adds	r3, #32
 8002ea8:	f107 0214 	add.w	r2, r7, #20
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f001 fac0 	bl	8004434 <lis2duxs12_i3c_configure_set>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <LIS2DUXS12_Init+0x50>
    {
      return LIS2DUXS12_ERROR;
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebe:	e04a      	b.n	8002f56 <LIS2DUXS12_Init+0xe6>
    }
  }

  /* Set main memory bank */
  if (LIS2DUXS12_Set_Mem_Bank(pObj, (uint8_t)LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fbac 	bl	8003620 <LIS2DUXS12_Set_Mem_Bank>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <LIS2DUXS12_Init+0x64>
  {
    return LIS2DUXS12_ERROR;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	e040      	b.n	8002f56 <LIS2DUXS12_Init+0xe6>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. Enable BDU. */
  if (lis2duxs12_init_set(&(pObj->Ctx), LIS2DUXS12_SENSOR_ONLY_ON) != LIS2DUXS12_OK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3320      	adds	r3, #32
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fec4 	bl	8003c68 <lis2duxs12_init_set>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <LIS2DUXS12_Init+0x7c>
  {
    return LIS2DUXS12_ERROR;
 8002ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eea:	e034      	b.n	8002f56 <LIS2DUXS12_Init+0xe6>
  }

  /* FIFO mode selection */
  lis2duxs12_fifo_mode_t fifo_mode =
 8002eec:	f107 030c 	add.w	r3, r7, #12
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	809a      	strh	r2, [r3, #4]
    .operation = LIS2DUXS12_BYPASS_MODE,
    .store     = LIS2DUXS12_FIFO_1X,
    .watermark = 0,
  };

  if (lis2duxs12_fifo_mode_set(&(pObj->Ctx), fifo_mode) != LIS2DUXS12_OK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f103 0020 	add.w	r0, r3, #32
 8002efc:	f107 030c 	add.w	r3, r7, #12
 8002f00:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002f04:	f001 fb33 	bl	800456e <lis2duxs12_fifo_mode_set>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <LIS2DUXS12_Init+0xa4>
  {
    return LIS2DUXS12_ERROR;
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f12:	e020      	b.n	8002f56 <LIS2DUXS12_Init+0xe6>
  }

  /* Select default output data rate */
  pObj->acc_odr = 100.0f;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a12      	ldr	r2, [pc, #72]	@ (8002f60 <LIS2DUXS12_Init+0xf0>)
 8002f18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Select default high performance mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_HIGH_PERFORMANCE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Output data rate: power down, full scale: 2g */
  lis2duxs12_md_t mode =
 8002f22:	f107 0308 	add.w	r3, r7, #8
 8002f26:	2100      	movs	r1, #0
 8002f28:	460a      	mov	r2, r1
 8002f2a:	801a      	strh	r2, [r3, #0]
 8002f2c:	460a      	mov	r2, r1
 8002f2e:	709a      	strb	r2, [r3, #2]
  {
    .odr = LIS2DUXS12_OFF,
    .fs  = LIS2DUXS12_2g,
  };

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3320      	adds	r3, #32
 8002f34:	f107 0208 	add.w	r2, r7, #8
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 ffe2 	bl	8003f04 <lis2duxs12_mode_set>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <LIS2DUXS12_Init+0xdc>
  {
    return LIS2DUXS12_ERROR;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	e004      	b.n	8002f56 <LIS2DUXS12_Init+0xe6>
  }

  pObj->is_initialized = 1;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	42c80000 	.word	0x42c80000

08002f64 <LIS2DUXS12_DeInit>:
  * @brief  Deinitialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_DeInit(LIS2DUXS12_Object_t *pObj)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DUXS12_ACC_Disable(pObj) != LIS2DUXS12_OK)
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f8ad 	bl	80030cc <LIS2DUXS12_ACC_Disable>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <LIS2DUXS12_DeInit+0x1a>
  {
    return LIS2DUXS12_ERROR;
 8002f78:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7c:	e00c      	b.n	8002f98 <LIS2DUXS12_DeInit+0x34>
  }

  /* Reset output data rate */
  pObj->acc_odr = 0.0f;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set low power mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_LOW_POWER;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 0;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <LIS2DUXS12_ExitDeepPowerDownI2C>:
  * @brief  Exit from deep power down in I2C
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownI2C(LIS2DUXS12_Object_t *pObj)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint8_t val;

  /* Perform dummy read in order to exit from deep power down in I2C mode.
   * NOTE: No return value check - expected first read fail. */
  (void)lis2duxs12_device_id_get(&(pObj->Ctx), &val);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3320      	adds	r3, #32
 8002fac:	f107 020f 	add.w	r2, r7, #15
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fe46 	bl	8003c44 <lis2duxs12_device_id_get>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbc:	2019      	movs	r0, #25
 8002fbe:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <LIS2DUXS12_ExitDeepPowerDownSPI>:
  * @brief  Exit from deep power down in SPI
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownSPI(LIS2DUXS12_Object_t *pObj)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  /* Write IF_WAKE_UP register to exit from deep power down in SPI mode*/
  (void)lis2duxs12_exit_deep_power_down(&(pObj->Ctx));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3320      	adds	r3, #32
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f001 f960 	bl	800429c <lis2duxs12_exit_deep_power_down>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe0:	2019      	movs	r0, #25
 8002fe2:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <LIS2DUXS12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ReadID(LIS2DUXS12_Object_t *pObj, uint8_t *Id)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	6039      	str	r1, [r7, #0]
  uint8_t val;

  if (lis2duxs12_device_id_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3320      	adds	r3, #32
 8002ffc:	f107 020f 	add.w	r2, r7, #15
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f000 fe1e 	bl	8003c44 <lis2duxs12_device_id_get>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <LIS2DUXS12_ReadID+0x26>
  {
    return LIS2DUXS12_ERROR;
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	e003      	b.n	800301c <LIS2DUXS12_ReadID+0x2e>
  }

  *Id = val;
 8003014:	7bfa      	ldrb	r2, [r7, #15]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	701a      	strb	r2, [r3, #0]

  return LIS2DUXS12_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <LIS2DUXS12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DUXS12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_GetCapabilities(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Capabilities_t *Capabilities)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc        = 1;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro       = 0;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2200      	movs	r2, #0
 8003038:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto    = 0;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2200      	movs	r2, #0
 800303e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower   = 1;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2201      	movs	r2, #1
 8003044:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS  = 0;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2200      	movs	r2, #0
 800304a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS   = 16;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2210      	movs	r2, #16
 8003050:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS   = 0;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2200      	movs	r2, #0
 8003056:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr = 0.0f;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr  = 800.0f;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4a06      	ldr	r2, [pc, #24]	@ (800307c <LIS2DUXS12_GetCapabilities+0x58>)
 8003064:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr  = 0.0f;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	619a      	str	r2, [r3, #24]
  return LIS2DUXS12_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	44480000 	.word	0x44480000

08003080 <LIS2DUXS12_ACC_Enable>:
  * @brief  Enable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Enable(LIS2DUXS12_Object_t *pObj)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <LIS2DUXS12_ACC_Enable+0x16>
  {
    return LIS2DUXS12_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e016      	b.n	80030c4 <LIS2DUXS12_ACC_Enable+0x44>
  }

  /* Output data rate selection. */
  if (LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->power_mode) != LIS2DUXS12_OK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80030a2:	4619      	mov	r1, r3
 80030a4:	eeb0 0a67 	vmov.f32	s0, s15
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fadb 	bl	8003664 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <LIS2DUXS12_ACC_Enable+0x3a>
  {
    return LIS2DUXS12_ERROR;
 80030b4:	f04f 33ff 	mov.w	r3, #4294967295
 80030b8:	e004      	b.n	80030c4 <LIS2DUXS12_ACC_Enable+0x44>
  }

  pObj->acc_is_enabled = 1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <LIS2DUXS12_ACC_Disable>:
  * @brief  Disable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Disable(LIS2DUXS12_Object_t *pObj)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  float_t Odr;
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <LIS2DUXS12_ACC_Disable+0x16>
  {
    return LIS2DUXS12_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	e046      	b.n	8003170 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (LIS2DUXS12_ACC_GetOutputDataRate(pObj, &Odr) != LIS2DUXS12_OK)
 80030e2:	f107 030c 	add.w	r3, r7, #12
 80030e6:	4619      	mov	r1, r3
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f893 	bl	8003214 <LIS2DUXS12_ACC_GetOutputDataRate>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <LIS2DUXS12_ACC_Disable+0x2e>
  {
    return LIS2DUXS12_ERROR;
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295
 80030f8:	e03a      	b.n	8003170 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (Odr == 800.0f)
 80030fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80030fe:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8003178 <LIS2DUXS12_ACC_Disable+0xac>
 8003102:	eef4 7a47 	vcmp.f32	s15, s14
 8003106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310a:	d10e      	bne.n	800312a <LIS2DUXS12_ACC_Disable+0x5e>
  {
    if (LIS2DUXS12_ACC_SetOutputDataRate(pObj, 400.0f) != LIS2DUXS12_OK)
 800310c:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800317c <LIS2DUXS12_ACC_Disable+0xb0>
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f94b 	bl	80033ac <LIS2DUXS12_ACC_SetOutputDataRate>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <LIS2DUXS12_ACC_Disable+0x56>
    {
      return LIS2DUXS12_ERROR;
 800311c:	f04f 33ff 	mov.w	r3, #4294967295
 8003120:	e026      	b.n	8003170 <LIS2DUXS12_ACC_Disable+0xa4>
    }

    /* Wait for 3 ms based on datasheet */
    pObj->Ctx.mdelay(3);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003126:	2003      	movs	r0, #3
 8003128:	4798      	blx	r3
  }

  /* Output data rate selection - power down. */
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3320      	adds	r3, #32
 800312e:	f107 0208 	add.w	r2, r7, #8
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f000 ffa1 	bl	800407c <lis2duxs12_mode_get>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <LIS2DUXS12_ACC_Disable+0x7a>
  {
    return LIS2DUXS12_ERROR;
 8003140:	f04f 33ff 	mov.w	r3, #4294967295
 8003144:	e014      	b.n	8003170 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  mode.odr = LIS2DUXS12_OFF;
 8003146:	2300      	movs	r3, #0
 8003148:	723b      	strb	r3, [r7, #8]

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3320      	adds	r3, #32
 800314e:	f107 0208 	add.w	r2, r7, #8
 8003152:	4611      	mov	r1, r2
 8003154:	4618      	mov	r0, r3
 8003156:	f000 fed5 	bl	8003f04 <lis2duxs12_mode_set>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <LIS2DUXS12_ACC_Disable+0x9a>
  {
    return LIS2DUXS12_ERROR;
 8003160:	f04f 33ff 	mov.w	r3, #4294967295
 8003164:	e004      	b.n	8003170 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  pObj->acc_is_enabled = 0;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	44480000 	.word	0x44480000
 800317c:	43c80000 	.word	0x43c80000

08003180 <LIS2DUXS12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetSensitivity(LIS2DUXS12_Object_t *pObj, float_t *Sensitivity)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3320      	adds	r3, #32
 8003192:	f107 0208 	add.w	r2, r7, #8
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f000 ff6f 	bl	800407c <lis2duxs12_mode_get>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <LIS2DUXS12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DUXS12_ERROR;
 80031a4:	f04f 33ff 	mov.w	r3, #4294967295
 80031a8:	e026      	b.n	80031f8 <LIS2DUXS12_ACC_GetSensitivity+0x78>
  }

  switch (mode.fs)
 80031aa:	7a7b      	ldrb	r3, [r7, #9]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d81b      	bhi.n	80031e8 <LIS2DUXS12_ACC_GetSensitivity+0x68>
 80031b0:	a201      	add	r2, pc, #4	@ (adr r2, 80031b8 <LIS2DUXS12_ACC_GetSensitivity+0x38>)
 80031b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	bf00      	nop
 80031b8:	080031c9 	.word	0x080031c9
 80031bc:	080031d1 	.word	0x080031d1
 80031c0:	080031d9 	.word	0x080031d9
 80031c4:	080031e1 	.word	0x080031e1
  {
    case LIS2DUXS12_2g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_2G;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003200 <LIS2DUXS12_ACC_GetSensitivity+0x80>)
 80031cc:	601a      	str	r2, [r3, #0]
      break;
 80031ce:	e012      	b.n	80031f6 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_4g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_4G;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	4a0c      	ldr	r2, [pc, #48]	@ (8003204 <LIS2DUXS12_ACC_GetSensitivity+0x84>)
 80031d4:	601a      	str	r2, [r3, #0]
      break;
 80031d6:	e00e      	b.n	80031f6 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_8g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_8G;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	4a0b      	ldr	r2, [pc, #44]	@ (8003208 <LIS2DUXS12_ACC_GetSensitivity+0x88>)
 80031dc:	601a      	str	r2, [r3, #0]
      break;
 80031de:	e00a      	b.n	80031f6 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_16g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_16G;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	4a0a      	ldr	r2, [pc, #40]	@ (800320c <LIS2DUXS12_ACC_GetSensitivity+0x8c>)
 80031e4:	601a      	str	r2, [r3, #0]
      break;
 80031e6:	e006      	b.n	80031f6 <LIS2DUXS12_ACC_GetSensitivity+0x76>

    default:
      *Sensitivity = -1.0f;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	4a09      	ldr	r2, [pc, #36]	@ (8003210 <LIS2DUXS12_ACC_GetSensitivity+0x90>)
 80031ec:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 80031ee:	f04f 33ff 	mov.w	r3, #4294967295
 80031f2:	60fb      	str	r3, [r7, #12]
      break;
 80031f4:	bf00      	nop
  }

  return ret;
 80031f6:	68fb      	ldr	r3, [r7, #12]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	3d79db23 	.word	0x3d79db23
 8003204:	3df9db23 	.word	0x3df9db23
 8003208:	3e79db23 	.word	0x3e79db23
 800320c:	3ef9db23 	.word	0x3ef9db23
 8003210:	bf800000 	.word	0xbf800000

08003214 <LIS2DUXS12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t *Odr)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual output data rate from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3320      	adds	r3, #32
 8003226:	f107 0208 	add.w	r2, r7, #8
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f000 ff25 	bl	800407c <lis2duxs12_mode_get>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <LIS2DUXS12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8003238:	f04f 33ff 	mov.w	r3, #4294967295
 800323c:	e09b      	b.n	8003376 <LIS2DUXS12_ACC_GetOutputDataRate+0x162>
  }

  switch (mode.odr)
 800323e:	7a3b      	ldrb	r3, [r7, #8]
 8003240:	2b2f      	cmp	r3, #47	@ 0x2f
 8003242:	f200 8090 	bhi.w	8003366 <LIS2DUXS12_ACC_GetOutputDataRate+0x152>
 8003246:	a201      	add	r2, pc, #4	@ (adr r2, 800324c <LIS2DUXS12_ACC_GetOutputDataRate+0x38>)
 8003248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324c:	0800330d 	.word	0x0800330d
 8003250:	08003317 	.word	0x08003317
 8003254:	0800331f 	.word	0x0800331f
 8003258:	08003337 	.word	0x08003337
 800325c:	08003327 	.word	0x08003327
 8003260:	0800332f 	.word	0x0800332f
 8003264:	08003337 	.word	0x08003337
 8003268:	0800333f 	.word	0x0800333f
 800326c:	08003347 	.word	0x08003347
 8003270:	0800334f 	.word	0x0800334f
 8003274:	08003357 	.word	0x08003357
 8003278:	0800335f 	.word	0x0800335f
 800327c:	08003367 	.word	0x08003367
 8003280:	08003367 	.word	0x08003367
 8003284:	08003367 	.word	0x08003367
 8003288:	08003367 	.word	0x08003367
 800328c:	08003367 	.word	0x08003367
 8003290:	08003367 	.word	0x08003367
 8003294:	08003367 	.word	0x08003367
 8003298:	08003367 	.word	0x08003367
 800329c:	08003327 	.word	0x08003327
 80032a0:	0800332f 	.word	0x0800332f
 80032a4:	08003337 	.word	0x08003337
 80032a8:	0800333f 	.word	0x0800333f
 80032ac:	08003347 	.word	0x08003347
 80032b0:	0800334f 	.word	0x0800334f
 80032b4:	08003357 	.word	0x08003357
 80032b8:	0800335f 	.word	0x0800335f
 80032bc:	08003367 	.word	0x08003367
 80032c0:	08003367 	.word	0x08003367
 80032c4:	08003367 	.word	0x08003367
 80032c8:	08003367 	.word	0x08003367
 80032cc:	08003367 	.word	0x08003367
 80032d0:	08003367 	.word	0x08003367
 80032d4:	08003367 	.word	0x08003367
 80032d8:	08003367 	.word	0x08003367
 80032dc:	08003367 	.word	0x08003367
 80032e0:	08003367 	.word	0x08003367
 80032e4:	08003367 	.word	0x08003367
 80032e8:	08003367 	.word	0x08003367
 80032ec:	08003367 	.word	0x08003367
 80032f0:	08003367 	.word	0x08003367
 80032f4:	08003367 	.word	0x08003367
 80032f8:	08003367 	.word	0x08003367
 80032fc:	08003367 	.word	0x08003367
 8003300:	08003367 	.word	0x08003367
 8003304:	0800330d 	.word	0x0800330d
 8003308:	0800330d 	.word	0x0800330d
  {
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_TRIG_PIN:
    case LIS2DUXS12_TRIG_SW:
      *Odr = 0.0f;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
      break;
 8003314:	e02e      	b.n	8003374 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_1Hz6_ULP:
      *Odr = 1.6f;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	4a19      	ldr	r2, [pc, #100]	@ (8003380 <LIS2DUXS12_ACC_GetOutputDataRate+0x16c>)
 800331a:	601a      	str	r2, [r3, #0]
      break;
 800331c:	e02a      	b.n	8003374 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_3Hz_ULP:
      *Odr = 3.0f;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	4a18      	ldr	r2, [pc, #96]	@ (8003384 <LIS2DUXS12_ACC_GetOutputDataRate+0x170>)
 8003322:	601a      	str	r2, [r3, #0]
      break;
 8003324:	e026      	b.n	8003374 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_6Hz_LP:
    case LIS2DUXS12_6Hz_HP:
      *Odr = 6.0f;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	4a17      	ldr	r2, [pc, #92]	@ (8003388 <LIS2DUXS12_ACC_GetOutputDataRate+0x174>)
 800332a:	601a      	str	r2, [r3, #0]
      break;
 800332c:	e022      	b.n	8003374 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_12Hz5_LP:
    case LIS2DUXS12_12Hz5_HP:
      *Odr = 12.5f;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	4a16      	ldr	r2, [pc, #88]	@ (800338c <LIS2DUXS12_ACC_GetOutputDataRate+0x178>)
 8003332:	601a      	str	r2, [r3, #0]
      break;
 8003334:	e01e      	b.n	8003374 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_25Hz_ULP:
    case LIS2DUXS12_25Hz_LP:
    case LIS2DUXS12_25Hz_HP:
      *Odr = 25.0f;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	4a15      	ldr	r2, [pc, #84]	@ (8003390 <LIS2DUXS12_ACC_GetOutputDataRate+0x17c>)
 800333a:	601a      	str	r2, [r3, #0]
      break;
 800333c:	e01a      	b.n	8003374 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_50Hz_LP:
    case LIS2DUXS12_50Hz_HP:
      *Odr = 50.0f;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	4a14      	ldr	r2, [pc, #80]	@ (8003394 <LIS2DUXS12_ACC_GetOutputDataRate+0x180>)
 8003342:	601a      	str	r2, [r3, #0]
      break;
 8003344:	e016      	b.n	8003374 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_100Hz_LP:
    case LIS2DUXS12_100Hz_HP:
      *Odr = 100.0f;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	4a13      	ldr	r2, [pc, #76]	@ (8003398 <LIS2DUXS12_ACC_GetOutputDataRate+0x184>)
 800334a:	601a      	str	r2, [r3, #0]
      break;
 800334c:	e012      	b.n	8003374 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_200Hz_LP:
    case LIS2DUXS12_200Hz_HP:
      *Odr = 200.0f;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	4a12      	ldr	r2, [pc, #72]	@ (800339c <LIS2DUXS12_ACC_GetOutputDataRate+0x188>)
 8003352:	601a      	str	r2, [r3, #0]
      break;
 8003354:	e00e      	b.n	8003374 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_400Hz_LP:
    case LIS2DUXS12_400Hz_HP:
      *Odr = 400.0f;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	4a11      	ldr	r2, [pc, #68]	@ (80033a0 <LIS2DUXS12_ACC_GetOutputDataRate+0x18c>)
 800335a:	601a      	str	r2, [r3, #0]
      break;
 800335c:	e00a      	b.n	8003374 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_800Hz_LP:
    case LIS2DUXS12_800Hz_HP:
      *Odr = 800.0f;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	4a10      	ldr	r2, [pc, #64]	@ (80033a4 <LIS2DUXS12_ACC_GetOutputDataRate+0x190>)
 8003362:	601a      	str	r2, [r3, #0]
      break;
 8003364:	e006      	b.n	8003374 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    default:
      *Odr = -1.0f;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	4a0f      	ldr	r2, [pc, #60]	@ (80033a8 <LIS2DUXS12_ACC_GetOutputDataRate+0x194>)
 800336a:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 800336c:	f04f 33ff 	mov.w	r3, #4294967295
 8003370:	60fb      	str	r3, [r7, #12]
      break;
 8003372:	bf00      	nop
  }

  return ret;
 8003374:	68fb      	ldr	r3, [r7, #12]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	3fcccccd 	.word	0x3fcccccd
 8003384:	40400000 	.word	0x40400000
 8003388:	40c00000 	.word	0x40c00000
 800338c:	41480000 	.word	0x41480000
 8003390:	41c80000 	.word	0x41c80000
 8003394:	42480000 	.word	0x42480000
 8003398:	42c80000 	.word	0x42c80000
 800339c:	43480000 	.word	0x43480000
 80033a0:	43c80000 	.word	0x43c80000
 80033a4:	44480000 	.word	0x44480000
 80033a8:	bf800000 	.word	0xbf800000

080033ac <LIS2DUXS12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t Odr)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use high performance mode */
  return LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DUXS12_HIGH_PERFORMANCE);
 80033b8:	2102      	movs	r1, #2
 80033ba:	ed97 0a00 	vldr	s0, [r7]
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f805 	bl	80033ce <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>
 80033c4:	4603      	mov	r3, r0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Odr the output data rate value to be set
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(LIS2DUXS12_Object_t *pObj, float_t Odr, LIS2DUXS12_Power_Mode_t Power)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	ed87 0a02 	vstr	s0, [r7, #8]
 80033da:	460b      	mov	r3, r1
 80033dc:	71fb      	strb	r3, [r7, #7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d108      	bne.n	80033fa <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x2c>
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Power);
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	4619      	mov	r1, r3
 80033ec:	ed97 0a02 	vldr	s0, [r7, #8]
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f937 	bl	8003664 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 80033f6:	4603      	mov	r3, r0
 80033f8:	e007      	b.n	800340a <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x3c>
  }
  else
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Power);
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	4619      	mov	r1, r3
 80033fe:	ed97 0a02 	vldr	s0, [r7, #8]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 faac 	bl	8003960 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>
 8003408:	4603      	mov	r3, r0
  }
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <LIS2DUXS12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetFullScale(LIS2DUXS12_Object_t *pObj, int32_t *FullScale)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3320      	adds	r3, #32
 8003426:	f107 0208 	add.w	r2, r7, #8
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f000 fe25 	bl	800407c <lis2duxs12_mode_get>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d002      	beq.n	800343e <LIS2DUXS12_ACC_GetFullScale+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8003438:	f04f 33ff 	mov.w	r3, #4294967295
 800343c:	e027      	b.n	800348e <LIS2DUXS12_ACC_GetFullScale+0x7a>
  }

  switch (mode.fs)
 800343e:	7a7b      	ldrb	r3, [r7, #9]
 8003440:	2b03      	cmp	r3, #3
 8003442:	d81b      	bhi.n	800347c <LIS2DUXS12_ACC_GetFullScale+0x68>
 8003444:	a201      	add	r2, pc, #4	@ (adr r2, 800344c <LIS2DUXS12_ACC_GetFullScale+0x38>)
 8003446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344a:	bf00      	nop
 800344c:	0800345d 	.word	0x0800345d
 8003450:	08003465 	.word	0x08003465
 8003454:	0800346d 	.word	0x0800346d
 8003458:	08003475 	.word	0x08003475
  {
    case LIS2DUXS12_2g:
      *FullScale =  2;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	2202      	movs	r2, #2
 8003460:	601a      	str	r2, [r3, #0]
      break;
 8003462:	e013      	b.n	800348c <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_4g:
      *FullScale =  4;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2204      	movs	r2, #4
 8003468:	601a      	str	r2, [r3, #0]
      break;
 800346a:	e00f      	b.n	800348c <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_8g:
      *FullScale =  8;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	2208      	movs	r2, #8
 8003470:	601a      	str	r2, [r3, #0]
      break;
 8003472:	e00b      	b.n	800348c <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_16g:
      *FullScale = 16;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2210      	movs	r2, #16
 8003478:	601a      	str	r2, [r3, #0]
      break;
 800347a:	e007      	b.n	800348c <LIS2DUXS12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	f04f 32ff 	mov.w	r2, #4294967295
 8003482:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8003484:	f04f 33ff 	mov.w	r3, #4294967295
 8003488:	60fb      	str	r3, [r7, #12]
      break;
 800348a:	bf00      	nop
  }

  return ret;
 800348c:	68fb      	ldr	r3, [r7, #12]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop

08003498 <LIS2DUXS12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetFullScale(LIS2DUXS12_Object_t *pObj, int32_t FullScale)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3320      	adds	r3, #32
 80034a6:	f107 020c 	add.w	r2, r7, #12
 80034aa:	4611      	mov	r1, r2
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fde5 	bl	800407c <lis2duxs12_mode_get>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <LIS2DUXS12_ACC_SetFullScale+0x26>
  {
    return LIS2DUXS12_ERROR;
 80034b8:	f04f 33ff 	mov.w	r3, #4294967295
 80034bc:	e01f      	b.n	80034fe <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
            : (FullScale <= 4) ? LIS2DUXS12_4g
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	dd0b      	ble.n	80034dc <LIS2DUXS12_ACC_SetFullScale+0x44>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	dd06      	ble.n	80034d8 <LIS2DUXS12_ACC_SetFullScale+0x40>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	dc01      	bgt.n	80034d4 <LIS2DUXS12_ACC_SetFullScale+0x3c>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e004      	b.n	80034de <LIS2DUXS12_ACC_SetFullScale+0x46>
 80034d4:	2303      	movs	r3, #3
 80034d6:	e002      	b.n	80034de <LIS2DUXS12_ACC_SetFullScale+0x46>
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <LIS2DUXS12_ACC_SetFullScale+0x46>
 80034dc:	2300      	movs	r3, #0
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
 80034de:	737b      	strb	r3, [r7, #13]
            : (FullScale <= 8) ? LIS2DUXS12_8g
            :                    LIS2DUXS12_16g;

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3320      	adds	r3, #32
 80034e4:	f107 020c 	add.w	r2, r7, #12
 80034e8:	4611      	mov	r1, r2
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fd0a 	bl	8003f04 <lis2duxs12_mode_set>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <LIS2DUXS12_ACC_SetFullScale+0x64>
  {
    return LIS2DUXS12_ERROR;
 80034f6:	f04f 33ff 	mov.w	r3, #4294967295
 80034fa:	e000      	b.n	80034fe <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  return LIS2DUXS12_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <LIS2DUXS12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxesRaw(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_AxesRaw_t *Value)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b088      	sub	sp, #32
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3320      	adds	r3, #32
 8003514:	f107 021c 	add.w	r2, r7, #28
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fdae 	bl	800407c <lis2duxs12_mode_get>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <LIS2DUXS12_ACC_GetAxesRaw+0x26>
  {
    return LIS2DUXS12_ERROR;
 8003526:	f04f 33ff 	mov.w	r3, #4294967295
 800352a:	e01b      	b.n	8003564 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3320      	adds	r3, #32
 8003530:	f107 0208 	add.w	r2, r7, #8
 8003534:	f107 011c 	add.w	r1, r7, #28
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fecf 	bl	80042dc <lis2duxs12_xl_data_get>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <LIS2DUXS12_ACC_GetAxesRaw+0x44>
  {
    return LIS2DUXS12_ERROR;
 8003544:	f04f 33ff 	mov.w	r3, #4294967295
 8003548:	e00c      	b.n	8003564 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  Value->x = data.raw[0];
 800354a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	801a      	strh	r2, [r3, #0]
  Value->y = data.raw[1];
 8003552:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	805a      	strh	r2, [r3, #2]
  Value->z = data.raw[2];
 800355a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	809a      	strh	r2, [r3, #4]

  return LIS2DUXS12_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3720      	adds	r7, #32
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <LIS2DUXS12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxes(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Axes_t *Acceleration)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3320      	adds	r3, #32
 800357a:	f107 021c 	add.w	r2, r7, #28
 800357e:	4611      	mov	r1, r2
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fd7b 	bl	800407c <lis2duxs12_mode_get>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <LIS2DUXS12_ACC_GetAxes+0x26>
  {
    return LIS2DUXS12_ERROR;
 800358c:	f04f 33ff 	mov.w	r3, #4294967295
 8003590:	e027      	b.n	80035e2 <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3320      	adds	r3, #32
 8003596:	f107 0208 	add.w	r2, r7, #8
 800359a:	f107 011c 	add.w	r1, r7, #28
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fe9c 	bl	80042dc <lis2duxs12_xl_data_get>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <LIS2DUXS12_ACC_GetAxes+0x44>
  {
    return LIS2DUXS12_ERROR;
 80035aa:	f04f 33ff 	mov.w	r3, #4294967295
 80035ae:	e018      	b.n	80035e2 <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  Acceleration->x = (int32_t)data.mg[0];
 80035b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80035b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035b8:	ee17 2a90 	vmov	r2, s15
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)data.mg[1];
 80035c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80035c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035c8:	ee17 2a90 	vmov	r2, s15
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)data.mg[2];
 80035d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80035d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035d8:	ee17 2a90 	vmov	r2, s15
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	609a      	str	r2, [r3, #8]

  return LIS2DUXS12_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3720      	adds	r7, #32
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <LIS2DUXS12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Write_Reg(LIS2DUXS12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	460b      	mov	r3, r1
 80035f4:	70fb      	strb	r3, [r7, #3]
 80035f6:	4613      	mov	r3, r2
 80035f8:	70bb      	strb	r3, [r7, #2]
  if (lis2duxs12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DUXS12_OK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f103 0020 	add.w	r0, r3, #32
 8003600:	1cba      	adds	r2, r7, #2
 8003602:	78f9      	ldrb	r1, [r7, #3]
 8003604:	2301      	movs	r3, #1
 8003606:	f000 faa0 	bl	8003b4a <lis2duxs12_write_reg>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <LIS2DUXS12_Write_Reg+0x2c>
  {
    return LIS2DUXS12_ERROR;
 8003610:	f04f 33ff 	mov.w	r3, #4294967295
 8003614:	e000      	b.n	8003618 <LIS2DUXS12_Write_Reg+0x2e>
  }

  return LIS2DUXS12_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <LIS2DUXS12_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LIS2DUXS12_MAIN_MEM_BANK, 1 - LIS2DUXS12_EMBED_FUNC_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Set_Mem_Bank(LIS2DUXS12_Object_t *pObj, uint8_t Val)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LIS2DUXS12_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]
  lis2duxs12_mem_bank_t reg;

  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
        :               LIS2DUXS12_MAIN_MEM_BANK;
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	2b01      	cmp	r3, #1
 8003634:	bf0c      	ite	eq
 8003636:	2301      	moveq	r3, #1
 8003638:	2300      	movne	r3, #0
 800363a:	b2db      	uxtb	r3, r3
  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
 800363c:	72fb      	strb	r3, [r7, #11]

  if (lis2duxs12_mem_bank_set(&(pObj->Ctx), reg) != LIS2DUXS12_OK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3320      	adds	r3, #32
 8003642:	7afa      	ldrb	r2, [r7, #11]
 8003644:	4611      	mov	r1, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f000 ff6b 	bl	8004522 <lis2duxs12_mem_bank_set>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <LIS2DUXS12_Set_Mem_Bank+0x38>
  {
    ret = LIS2DUXS12_ERROR;
 8003652:	f04f 33ff 	mov.w	r3, #4294967295
 8003656:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003658:	68fb      	ldr	r3, [r7, #12]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003670:	460b      	mov	r3, r1
 8003672:	71fb      	strb	r3, [r7, #7]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	3320      	adds	r3, #32
 8003678:	f107 0214 	add.w	r2, r7, #20
 800367c:	4611      	mov	r1, r2
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fcfc 	bl	800407c <lis2duxs12_mode_get>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c>
  {
    return LIS2DUXS12_ERROR;
 800368a:	f04f 33ff 	mov.w	r3, #4294967295
 800368e:	e142      	b.n	8003916 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d118      	bne.n	80036c8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x64>
  {
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
               : (Odr <= 3.0f) ? LIS2DUXS12_3Hz_ULP
 8003696:	edd7 7a02 	vldr	s15, [r7, #8]
 800369a:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8003920 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2bc>
 800369e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a6:	d801      	bhi.n	80036ac <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x48>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e00b      	b.n	80036c4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 80036ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80036b0:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80036b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036bc:	d801      	bhi.n	80036c2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x5e>
 80036be:	2302      	movs	r3, #2
 80036c0:	e000      	b.n	80036c4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 80036c2:	2303      	movs	r3, #3
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
 80036c4:	753b      	strb	r3, [r7, #20]
 80036c6:	e0a4      	b.n	8003812 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               :                 LIS2DUXS12_25Hz_ULP;
  }
  else if (Power == LIS2DUXS12_LOW_POWER)
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d14f      	bne.n	800376e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x10a>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_LP
 80036ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80036d2:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80036d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036de:	d801      	bhi.n	80036e4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x80>
 80036e0:	2304      	movs	r3, #4
 80036e2:	e042      	b.n	800376a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80036e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80036e8:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80036ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f4:	d801      	bhi.n	80036fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x96>
 80036f6:	2305      	movs	r3, #5
 80036f8:	e037      	b.n	800376a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80036fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80036fe:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8003702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370a:	d801      	bhi.n	8003710 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xac>
 800370c:	2306      	movs	r3, #6
 800370e:	e02c      	b.n	800376a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8003710:	edd7 7a02 	vldr	s15, [r7, #8]
 8003714:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8003924 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 8003718:	eef4 7ac7 	vcmpe.f32	s15, s14
 800371c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003720:	d801      	bhi.n	8003726 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xc2>
 8003722:	2307      	movs	r3, #7
 8003724:	e021      	b.n	800376a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8003726:	edd7 7a02 	vldr	s15, [r7, #8]
 800372a:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8003928 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 800372e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003736:	d801      	bhi.n	800373c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8003738:	2308      	movs	r3, #8
 800373a:	e016      	b.n	800376a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 800373c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003740:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 800392c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 8003744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374c:	d801      	bhi.n	8003752 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xee>
 800374e:	2309      	movs	r3, #9
 8003750:	e00b      	b.n	800376a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8003752:	edd7 7a02 	vldr	s15, [r7, #8]
 8003756:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8003930 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 800375a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800375e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003762:	d801      	bhi.n	8003768 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x104>
 8003764:	230a      	movs	r3, #10
 8003766:	e000      	b.n	800376a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8003768:	230b      	movs	r3, #11
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
 800376a:	753b      	strb	r3, [r7, #20]
 800376c:	e051      	b.n	8003812 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               : (Odr <= 100.0f) ? LIS2DUXS12_100Hz_LP
               : (Odr <= 200.0f) ? LIS2DUXS12_200Hz_LP
               : (Odr <= 400.0f) ? LIS2DUXS12_400Hz_LP
               :                   LIS2DUXS12_800Hz_LP;
  }
  else if (Power == LIS2DUXS12_HIGH_PERFORMANCE)
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d14e      	bne.n	8003812 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_HP
 8003774:	edd7 7a02 	vldr	s15, [r7, #8]
 8003778:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800377c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003784:	d801      	bhi.n	800378a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x126>
 8003786:	2314      	movs	r3, #20
 8003788:	e042      	b.n	8003810 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800378a:	edd7 7a02 	vldr	s15, [r7, #8]
 800378e:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8003792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379a:	d801      	bhi.n	80037a0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 800379c:	2315      	movs	r3, #21
 800379e:	e037      	b.n	8003810 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80037a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80037a4:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80037a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b0:	d801      	bhi.n	80037b6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x152>
 80037b2:	2316      	movs	r3, #22
 80037b4:	e02c      	b.n	8003810 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80037b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ba:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8003924 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 80037be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c6:	d801      	bhi.n	80037cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80037c8:	2317      	movs	r3, #23
 80037ca:	e021      	b.n	8003810 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80037cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80037d0:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003928 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 80037d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037dc:	d801      	bhi.n	80037e2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 80037de:	2318      	movs	r3, #24
 80037e0:	e016      	b.n	8003810 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80037e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80037e6:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800392c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 80037ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f2:	d801      	bhi.n	80037f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x194>
 80037f4:	2319      	movs	r3, #25
 80037f6:	e00b      	b.n	8003810 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80037f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80037fc:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8003930 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 8003800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003808:	d801      	bhi.n	800380e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 800380a:	231a      	movs	r3, #26
 800380c:	e000      	b.n	8003810 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800380e:	231b      	movs	r3, #27
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
 8003810:	753b      	strb	r3, [r7, #20]
  else
  {
    /* Do nothing */
  }

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	3320      	adds	r3, #32
 8003816:	f107 0214 	add.w	r2, r7, #20
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fb71 	bl	8003f04 <lis2duxs12_mode_set>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ca>
  {
    return LIS2DUXS12_ERROR;
 8003828:	f04f 33ff 	mov.w	r3, #4294967295
 800382c:	e073      	b.n	8003916 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Odr value */
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 800382e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 8003830:	2b01      	cmp	r3, #1
 8003832:	d05b      	beq.n	80038ec <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x288>
 8003834:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 8003836:	2b02      	cmp	r3, #2
 8003838:	d056      	beq.n	80038e8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x284>
 800383a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 800383c:	2b04      	cmp	r3, #4
 800383e:	d051      	beq.n	80038e4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x280>
 8003840:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 8003842:	2b14      	cmp	r3, #20
 8003844:	d04c      	beq.n	80038e0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x27c>
 8003846:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 8003848:	2b05      	cmp	r3, #5
 800384a:	d047      	beq.n	80038dc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x278>
 800384c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 800384e:	2b15      	cmp	r3, #21
 8003850:	d042      	beq.n	80038d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x274>
 8003852:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 8003854:	2b03      	cmp	r3, #3
 8003856:	d03d      	beq.n	80038d4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x270>
 8003858:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 800385a:	2b06      	cmp	r3, #6
 800385c:	d038      	beq.n	80038d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x26c>
 800385e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 8003860:	2b16      	cmp	r3, #22
 8003862:	d033      	beq.n	80038cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x268>
 8003864:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 8003866:	2b07      	cmp	r3, #7
 8003868:	d02e      	beq.n	80038c8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x264>
 800386a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 800386c:	2b17      	cmp	r3, #23
 800386e:	d029      	beq.n	80038c4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x260>
 8003870:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 8003872:	2b08      	cmp	r3, #8
 8003874:	d024      	beq.n	80038c0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x25c>
 8003876:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 8003878:	2b18      	cmp	r3, #24
 800387a:	d01f      	beq.n	80038bc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x258>
 800387c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 800387e:	2b09      	cmp	r3, #9
 8003880:	d01a      	beq.n	80038b8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x254>
 8003882:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 8003884:	2b19      	cmp	r3, #25
 8003886:	d015      	beq.n	80038b4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x250>
 8003888:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 800388a:	2b0a      	cmp	r3, #10
 800388c:	d010      	beq.n	80038b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x24c>
 800388e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 8003890:	2b1a      	cmp	r3, #26
 8003892:	d00b      	beq.n	80038ac <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x248>
 8003894:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 8003896:	2b0b      	cmp	r3, #11
 8003898:	d006      	beq.n	80038a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x244>
 800389a:	7d3b      	ldrb	r3, [r7, #20]
                  :                                     -1.0f;
 800389c:	2b1b      	cmp	r3, #27
 800389e:	d101      	bne.n	80038a4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x240>
 80038a0:	4b24      	ldr	r3, [pc, #144]	@ (8003934 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 80038a2:	e024      	b.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 80038a4:	4b24      	ldr	r3, [pc, #144]	@ (8003938 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d4>)
 80038a6:	e022      	b.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 80038a8:	4b22      	ldr	r3, [pc, #136]	@ (8003934 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 80038aa:	e020      	b.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 80038ac:	4b23      	ldr	r3, [pc, #140]	@ (800393c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 80038ae:	e01e      	b.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 80038b0:	4b22      	ldr	r3, [pc, #136]	@ (800393c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 80038b2:	e01c      	b.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 80038b4:	4b22      	ldr	r3, [pc, #136]	@ (8003940 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 80038b6:	e01a      	b.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 80038b8:	4b21      	ldr	r3, [pc, #132]	@ (8003940 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 80038ba:	e018      	b.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 80038bc:	4b21      	ldr	r3, [pc, #132]	@ (8003944 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 80038be:	e016      	b.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 80038c0:	4b20      	ldr	r3, [pc, #128]	@ (8003944 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 80038c2:	e014      	b.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 80038c4:	4b20      	ldr	r3, [pc, #128]	@ (8003948 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 80038c6:	e012      	b.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 80038c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003948 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 80038ca:	e010      	b.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 80038cc:	4b1f      	ldr	r3, [pc, #124]	@ (800394c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 80038ce:	e00e      	b.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 80038d0:	4b1e      	ldr	r3, [pc, #120]	@ (800394c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 80038d2:	e00c      	b.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 80038d4:	4b1d      	ldr	r3, [pc, #116]	@ (800394c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 80038d6:	e00a      	b.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 80038d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003950 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 80038da:	e008      	b.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 80038dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003950 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 80038de:	e006      	b.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 80038e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003954 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 80038e2:	e004      	b.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 80038e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003954 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 80038e6:	e002      	b.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 80038e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003958 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f4>)
 80038ea:	e000      	b.n	80038ee <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 80038ec:	4b1b      	ldr	r3, [pc, #108]	@ (800395c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f8>)
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	6353      	str	r3, [r2, #52]	@ 0x34

  if (pObj->acc_odr == -1.0f)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80038f8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80038fc:	eef4 7a47 	vcmp.f32	s15, s14
 8003900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003904:	d102      	bne.n	800390c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2a8>
  {
    return LIS2DUXS12_ERROR;
 8003906:	f04f 33ff 	mov.w	r3, #4294967295
 800390a:	e004      	b.n	8003916 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Power value */
  pObj->power_mode = Power;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	79fa      	ldrb	r2, [r7, #7]
 8003910:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	3fcccccd 	.word	0x3fcccccd
 8003924:	42480000 	.word	0x42480000
 8003928:	42c80000 	.word	0x42c80000
 800392c:	43480000 	.word	0x43480000
 8003930:	43c80000 	.word	0x43c80000
 8003934:	44480000 	.word	0x44480000
 8003938:	bf800000 	.word	0xbf800000
 800393c:	43c80000 	.word	0x43c80000
 8003940:	43480000 	.word	0x43480000
 8003944:	42c80000 	.word	0x42c80000
 8003948:	42480000 	.word	0x42480000
 800394c:	41c80000 	.word	0x41c80000
 8003950:	41480000 	.word	0x41480000
 8003954:	40c00000 	.word	0x40c00000
 8003958:	40400000 	.word	0x40400000
 800395c:	3fcccccd 	.word	0x3fcccccd

08003960 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	ed87 0a02 	vstr	s0, [r7, #8]
 800396c:	460b      	mov	r3, r1
 800396e:	71fb      	strb	r3, [r7, #7]
  /* Store the new Odr value */
  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d11a      	bne.n	80039ac <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x4c>
  {
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
                    : (Odr <= 3.0f) ? 3.0f
 8003976:	edd7 7a02 	vldr	s15, [r7, #8]
 800397a:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800397e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003986:	d802      	bhi.n	800398e <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x2e>
 8003988:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800398c:	e00b      	b.n	80039a6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
                    :                25.0f;
 800398e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003992:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800399a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800399e:	d801      	bhi.n	80039a4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x44>
 80039a0:	4b33      	ldr	r3, [pc, #204]	@ (8003a70 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x110>)
 80039a2:	e000      	b.n	80039a6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
 80039a4:	4b33      	ldr	r3, [pc, #204]	@ (8003a74 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	6353      	str	r3, [r2, #52]	@ 0x34
 80039aa:	e055      	b.n	8003a58 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  }
  else if ((Power == LIS2DUXS12_LOW_POWER) || (Power == LIS2DUXS12_HIGH_PERFORMANCE))
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d002      	beq.n	80039b8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x58>
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d14f      	bne.n	8003a58 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  {
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
                    : (Odr <=  12.5f) ?  12.5f
 80039b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80039bc:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80039c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c8:	d801      	bhi.n	80039ce <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x6e>
 80039ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003a78 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x118>)
 80039cc:	e042      	b.n	8003a54 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  25.0f) ?  25.0f
 80039ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80039d2:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80039d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039de:	d801      	bhi.n	80039e4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x84>
 80039e0:	4b26      	ldr	r3, [pc, #152]	@ (8003a7c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 80039e2:	e037      	b.n	8003a54 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  50.0f) ?  50.0f
 80039e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80039e8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80039ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f4:	d801      	bhi.n	80039fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x9a>
 80039f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003a74 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 80039f8:	e02c      	b.n	8003a54 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 100.0f) ? 100.0f
 80039fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80039fe:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8003a80 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x120>
 8003a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0a:	d801      	bhi.n	8003a10 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003a84 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x124>)
 8003a0e:	e021      	b.n	8003a54 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 200.0f) ? 200.0f
 8003a10:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a14:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003a88 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x128>
 8003a18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a20:	d801      	bhi.n	8003a26 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xc6>
 8003a22:	4b1a      	ldr	r3, [pc, #104]	@ (8003a8c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x12c>)
 8003a24:	e016      	b.n	8003a54 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 400.0f) ? 400.0f
 8003a26:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a2a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003a90 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x130>
 8003a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a36:	d801      	bhi.n	8003a3c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xdc>
 8003a38:	4b16      	ldr	r3, [pc, #88]	@ (8003a94 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x134>)
 8003a3a:	e00b      	b.n	8003a54 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    :                   800.0f;
 8003a3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a40:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003a98 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x138>
 8003a44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4c:	d801      	bhi.n	8003a52 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf2>
 8003a4e:	4b13      	ldr	r3, [pc, #76]	@ (8003a9c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x13c>)
 8003a50:	e000      	b.n	8003a54 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8003a52:	4b13      	ldr	r3, [pc, #76]	@ (8003aa0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x140>)
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	6353      	str	r3, [r2, #52]	@ 0x34
  {
    /* Do nothing */
  }

  /* Store the new Power value */
  pObj->power_mode = Power;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	79fa      	ldrb	r2, [r7, #7]
 8003a5c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40400000 	.word	0x40400000
 8003a74:	41c80000 	.word	0x41c80000
 8003a78:	40c00000 	.word	0x40c00000
 8003a7c:	41480000 	.word	0x41480000
 8003a80:	42480000 	.word	0x42480000
 8003a84:	42480000 	.word	0x42480000
 8003a88:	42c80000 	.word	0x42c80000
 8003a8c:	42c80000 	.word	0x42c80000
 8003a90:	43480000 	.word	0x43480000
 8003a94:	43480000 	.word	0x43480000
 8003a98:	43c80000 	.word	0x43c80000
 8003a9c:	43c80000 	.word	0x43c80000
 8003aa0:	44480000 	.word	0x44480000

08003aa4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003aa4:	b590      	push	{r4, r7, lr}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	607a      	str	r2, [r7, #4]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	72fb      	strb	r3, [r7, #11]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	695c      	ldr	r4, [r3, #20]
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	7b1b      	ldrb	r3, [r3, #12]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	7afb      	ldrb	r3, [r7, #11]
 8003ac8:	b299      	uxth	r1, r3
 8003aca:	893b      	ldrh	r3, [r7, #8]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	47a0      	blx	r4
 8003ad0:	4603      	mov	r3, r0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd90      	pop	{r4, r7, pc}

08003ada <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003ada:	b590      	push	{r4, r7, lr}
 8003adc:	b087      	sub	sp, #28
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	72fb      	strb	r3, [r7, #11]
 8003aea:	4613      	mov	r3, r2
 8003aec:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	691c      	ldr	r4, [r3, #16]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	7b1b      	ldrb	r3, [r3, #12]
 8003afa:	4618      	mov	r0, r3
 8003afc:	7afb      	ldrb	r3, [r7, #11]
 8003afe:	b299      	uxth	r1, r3
 8003b00:	893b      	ldrh	r3, [r7, #8]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	47a0      	blx	r4
 8003b06:	4603      	mov	r3, r0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd90      	pop	{r4, r7, pc}

08003b10 <lis2duxs12_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                   uint16_t len)
{
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	72fb      	strb	r3, [r7, #11]
 8003b20:	4613      	mov	r3, r2
 8003b22:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <lis2duxs12_read_reg+0x20>
  {
    return -1;
 8003b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2e:	e008      	b.n	8003b42 <lis2duxs12_read_reg+0x32>
  }

  return ctx->read_reg(ctx->handle, reg, data, len);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	685c      	ldr	r4, [r3, #4]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68d8      	ldr	r0, [r3, #12]
 8003b38:	893b      	ldrh	r3, [r7, #8]
 8003b3a:	7af9      	ldrb	r1, [r7, #11]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	47a0      	blx	r4
 8003b40:	4603      	mov	r3, r0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd90      	pop	{r4, r7, pc}

08003b4a <lis2duxs12_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                    uint16_t len)
{
 8003b4a:	b590      	push	{r4, r7, lr}
 8003b4c:	b085      	sub	sp, #20
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	461a      	mov	r2, r3
 8003b56:	460b      	mov	r3, r1
 8003b58:	72fb      	strb	r3, [r7, #11]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d102      	bne.n	8003b6a <lis2duxs12_write_reg+0x20>
  {
    return -1;
 8003b64:	f04f 33ff 	mov.w	r3, #4294967295
 8003b68:	e008      	b.n	8003b7c <lis2duxs12_write_reg+0x32>
  }

  return ctx->write_reg(ctx->handle, reg, data, len);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681c      	ldr	r4, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	68d8      	ldr	r0, [r3, #12]
 8003b72:	893b      	ldrh	r3, [r7, #8]
 8003b74:	7af9      	ldrb	r1, [r7, #11]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	47a0      	blx	r4
 8003b7a:	4603      	mov	r3, r0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd90      	pop	{r4, r7, pc}

08003b84 <lis2duxs12_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lis2duxs12_from_fs2g_to_mg(int16_t lsb)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.061f;
 8003b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b92:	ee07 3a90 	vmov	s15, r3
 8003b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b9a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003bb0 <lis2duxs12_from_fs2g_to_mg+0x2c>
 8003b9e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	3d79db23 	.word	0x3d79db23

08003bb4 <lis2duxs12_from_fs4g_to_mg>:

float_t lis2duxs12_from_fs4g_to_mg(int16_t lsb)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	4603      	mov	r3, r0
 8003bbc:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.122f;
 8003bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bca:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003be0 <lis2duxs12_from_fs4g_to_mg+0x2c>
 8003bce:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	3df9db23 	.word	0x3df9db23

08003be4 <lis2duxs12_from_fs8g_to_mg>:

float_t lis2duxs12_from_fs8g_to_mg(int16_t lsb)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.244f;
 8003bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bfa:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003c10 <lis2duxs12_from_fs8g_to_mg+0x2c>
 8003bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003c02:	eeb0 0a67 	vmov.f32	s0, s15
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	3e79db23 	.word	0x3e79db23

08003c14 <lis2duxs12_from_fs16g_to_mg>:

float_t lis2duxs12_from_fs16g_to_mg(int16_t lsb)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.488f;
 8003c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c2a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003c40 <lis2duxs12_from_fs16g_to_mg+0x2c>
 8003c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003c32:	eeb0 0a67 	vmov.f32	s0, s15
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	3ef9db23 	.word	0x3ef9db23

08003c44 <lis2duxs12_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_WHO_AM_I, val, 1);
 8003c4e:	2301      	movs	r3, #1
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	210f      	movs	r1, #15
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff ff5b 	bl	8003b10 <lis2duxs12_read_reg>
 8003c5a:	60f8      	str	r0, [r7, #12]

  return ret;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <lis2duxs12_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_init_set(const stmdev_ctx_t *ctx, lis2duxs12_init_t val)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  lis2duxs12_status_t status;
  uint8_t cnt = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	77fb      	strb	r3, [r7, #31]
  int32_t ret = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61bb      	str	r3, [r7, #24]

  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003c7c:	f107 0214 	add.w	r2, r7, #20
 8003c80:	2301      	movs	r3, #1
 8003c82:	2110      	movs	r1, #16
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff ff43 	bl	8003b10 <lis2duxs12_read_reg>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	4413      	add	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003c92:	f107 0210 	add.w	r2, r7, #16
 8003c96:	2301      	movs	r3, #1
 8003c98:	2113      	movs	r1, #19
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff ff38 	bl	8003b10 <lis2duxs12_read_reg>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
  switch (val)
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	f200 80ca 	bhi.w	8003e44 <lis2duxs12_init_set+0x1dc>
 8003cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb8 <lis2duxs12_init_set+0x50>)
 8003cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb6:	bf00      	nop
 8003cb8:	08003db9 	.word	0x08003db9
 8003cbc:	08003cc9 	.word	0x08003cc9
 8003cc0:	08003d43 	.word	0x08003d43
 8003cc4:	08003dff 	.word	0x08003dff
  {
    case LIS2DUXS12_BOOT:
      ctrl4.boot = PROPERTY_ENABLE;
 8003cc8:	7c3b      	ldrb	r3, [r7, #16]
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	743b      	strb	r3, [r7, #16]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003cd0:	f107 0210 	add.w	r2, r7, #16
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	2113      	movs	r1, #19
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff ff36 	bl	8003b4a <lis2duxs12_write_reg>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f040 80bb 	bne.w	8003e64 <lis2duxs12_init_set+0x1fc>
        break;
      }

      do
      {
        ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003cee:	f107 0210 	add.w	r2, r7, #16
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	2113      	movs	r1, #19
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff ff0a 	bl	8003b10 <lis2duxs12_read_reg>
 8003cfc:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d113      	bne.n	8003d2c <lis2duxs12_init_set+0xc4>
        {
          break;
        }

        /* boot procedure ended correctly */
        if (ctrl4.boot == 0U)
 8003d04:	7c3b      	ldrb	r3, [r7, #16]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00f      	beq.n	8003d30 <lis2duxs12_init_set+0xc8>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <lis2duxs12_init_set+0xb8>
        {
          ctx->mdelay(25); /* 25 ms of boot time */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2019      	movs	r0, #25
 8003d1e:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 8003d20:	7ffb      	ldrb	r3, [r7, #31]
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	77fa      	strb	r2, [r7, #31]
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d9e1      	bls.n	8003cee <lis2duxs12_init_set+0x86>
 8003d2a:	e002      	b.n	8003d32 <lis2duxs12_init_set+0xca>
          break;
 8003d2c:	bf00      	nop
 8003d2e:	e000      	b.n	8003d32 <lis2duxs12_init_set+0xca>
          break;
 8003d30:	bf00      	nop

      if (cnt >= 5U)
 8003d32:	7ffb      	ldrb	r3, [r7, #31]
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	f240 8097 	bls.w	8003e68 <lis2duxs12_init_set+0x200>
      {
        ret = -1;  /* boot procedure failed */
 8003d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3e:	61bb      	str	r3, [r7, #24]
      }
      break;
 8003d40:	e092      	b.n	8003e68 <lis2duxs12_init_set+0x200>
    case LIS2DUXS12_RESET:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 8003d42:	7d3b      	ldrb	r3, [r7, #20]
 8003d44:	f043 0320 	orr.w	r3, r3, #32
 8003d48:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003d4a:	f107 0214 	add.w	r2, r7, #20
 8003d4e:	2301      	movs	r3, #1
 8003d50:	2110      	movs	r1, #16
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff fef9 	bl	8003b4a <lis2duxs12_write_reg>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f040 8082 	bne.w	8003e6c <lis2duxs12_init_set+0x204>
        break;
      }

      do
      {
        ret = lis2duxs12_status_get(ctx, &status);
 8003d68:	f107 030c 	add.w	r3, r7, #12
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f884 	bl	8003e7c <lis2duxs12_status_get>
 8003d74:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d113      	bne.n	8003da4 <lis2duxs12_init_set+0x13c>
        {
          break;
        }

        /* sw-reset procedure ended correctly */
        if (status.sw_reset == 0U)
 8003d7c:	7b3b      	ldrb	r3, [r7, #12]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00f      	beq.n	8003da8 <lis2duxs12_init_set+0x140>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <lis2duxs12_init_set+0x130>
        {
          ctx->mdelay(1); /* should be 50 us */
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2001      	movs	r0, #1
 8003d96:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 8003d98:	7ffb      	ldrb	r3, [r7, #31]
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	77fa      	strb	r2, [r7, #31]
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d9e2      	bls.n	8003d68 <lis2duxs12_init_set+0x100>
 8003da2:	e002      	b.n	8003daa <lis2duxs12_init_set+0x142>
          break;
 8003da4:	bf00      	nop
 8003da6:	e000      	b.n	8003daa <lis2duxs12_init_set+0x142>
          break;
 8003da8:	bf00      	nop

      if (cnt >= 5U)
 8003daa:	7ffb      	ldrb	r3, [r7, #31]
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d95f      	bls.n	8003e70 <lis2duxs12_init_set+0x208>
      {
        ret = -1;  /* sw-reset procedure failed */
 8003db0:	f04f 33ff 	mov.w	r3, #4294967295
 8003db4:	61bb      	str	r3, [r7, #24]
      }
      break;
 8003db6:	e05b      	b.n	8003e70 <lis2duxs12_init_set+0x208>
    case LIS2DUXS12_SENSOR_ONLY_ON:
      /* no embedded funcs are used */
      ctrl4.emb_func_en = PROPERTY_DISABLE;
 8003db8:	7c3b      	ldrb	r3, [r7, #16]
 8003dba:	f023 0310 	bic.w	r3, r3, #16
 8003dbe:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 8003dc0:	7c3b      	ldrb	r3, [r7, #16]
 8003dc2:	f043 0320 	orr.w	r3, r3, #32
 8003dc6:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 8003dc8:	7d3b      	ldrb	r3, [r7, #20]
 8003dca:	f043 0310 	orr.w	r3, r3, #16
 8003dce:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003dd0:	f107 0210 	add.w	r2, r7, #16
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	2113      	movs	r1, #19
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff feb6 	bl	8003b4a <lis2duxs12_write_reg>
 8003dde:	4602      	mov	r2, r0
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	4413      	add	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003de6:	f107 0214 	add.w	r2, r7, #20
 8003dea:	2301      	movs	r3, #1
 8003dec:	2110      	movs	r1, #16
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff feab 	bl	8003b4a <lis2duxs12_write_reg>
 8003df4:	4602      	mov	r2, r0
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	4413      	add	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
      break;
 8003dfc:	e039      	b.n	8003e72 <lis2duxs12_init_set+0x20a>
    case LIS2DUXS12_SENSOR_EMB_FUNC_ON:
      /* complete configuration is used */
      ctrl4.emb_func_en = PROPERTY_ENABLE;
 8003dfe:	7c3b      	ldrb	r3, [r7, #16]
 8003e00:	f043 0310 	orr.w	r3, r3, #16
 8003e04:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 8003e06:	7c3b      	ldrb	r3, [r7, #16]
 8003e08:	f043 0320 	orr.w	r3, r3, #32
 8003e0c:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 8003e0e:	7d3b      	ldrb	r3, [r7, #20]
 8003e10:	f043 0310 	orr.w	r3, r3, #16
 8003e14:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003e16:	f107 0210 	add.w	r2, r7, #16
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	2113      	movs	r1, #19
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff fe93 	bl	8003b4a <lis2duxs12_write_reg>
 8003e24:	4602      	mov	r2, r0
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	4413      	add	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003e2c:	f107 0214 	add.w	r2, r7, #20
 8003e30:	2301      	movs	r3, #1
 8003e32:	2110      	movs	r1, #16
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff fe88 	bl	8003b4a <lis2duxs12_write_reg>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	4413      	add	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
      break;
 8003e42:	e016      	b.n	8003e72 <lis2duxs12_init_set+0x20a>
    default:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 8003e44:	7d3b      	ldrb	r3, [r7, #20]
 8003e46:	f043 0320 	orr.w	r3, r3, #32
 8003e4a:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003e4c:	f107 0214 	add.w	r2, r7, #20
 8003e50:	2301      	movs	r3, #1
 8003e52:	2110      	movs	r1, #16
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff fe78 	bl	8003b4a <lis2duxs12_write_reg>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	4413      	add	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
      break;
 8003e62:	e006      	b.n	8003e72 <lis2duxs12_init_set+0x20a>
        break;
 8003e64:	bf00      	nop
 8003e66:	e004      	b.n	8003e72 <lis2duxs12_init_set+0x20a>
      break;
 8003e68:	bf00      	nop
 8003e6a:	e002      	b.n	8003e72 <lis2duxs12_init_set+0x20a>
        break;
 8003e6c:	bf00      	nop
 8003e6e:	e000      	b.n	8003e72 <lis2duxs12_init_set+0x20a>
      break;
 8003e70:	bf00      	nop
  }
  return ret;
 8003e72:	69bb      	ldr	r3, [r7, #24]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3720      	adds	r7, #32
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <lis2duxs12_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_status_get(const stmdev_ctx_t *ctx, lis2duxs12_status_t *val)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  lis2duxs12_status_register_t status_register;
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_STATUS,
 8003e86:	f107 0210 	add.w	r2, r7, #16
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	2125      	movs	r1, #37	@ 0x25
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fe3e 	bl	8003b10 <lis2duxs12_read_reg>
 8003e94:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&status_register, 1);
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003e96:	f107 020c 	add.w	r2, r7, #12
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	2110      	movs	r1, #16
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff fe36 	bl	8003b10 <lis2duxs12_read_reg>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003eac:	f107 0208 	add.w	r2, r7, #8
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	2113      	movs	r1, #19
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff fe2b 	bl	8003b10 <lis2duxs12_read_reg>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]

  val->sw_reset = ctrl1.sw_reset;
 8003ec2:	7b3b      	ldrb	r3, [r7, #12]
 8003ec4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003ec8:	b2d9      	uxtb	r1, r3
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	7813      	ldrb	r3, [r2, #0]
 8003ece:	f361 0300 	bfi	r3, r1, #0, #1
 8003ed2:	7013      	strb	r3, [r2, #0]
  val->boot     = ctrl4.boot;
 8003ed4:	7a3b      	ldrb	r3, [r7, #8]
 8003ed6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003eda:	b2d9      	uxtb	r1, r3
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	7813      	ldrb	r3, [r2, #0]
 8003ee0:	f361 0341 	bfi	r3, r1, #1, #1
 8003ee4:	7013      	strb	r3, [r2, #0]
  val->drdy     = status_register.drdy;
 8003ee6:	7c3b      	ldrb	r3, [r7, #16]
 8003ee8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003eec:	b2d9      	uxtb	r1, r3
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	7813      	ldrb	r3, [r2, #0]
 8003ef2:	f361 0382 	bfi	r3, r1, #2, #1
 8003ef6:	7013      	strb	r3, [r2, #0]

  return ret;
 8003ef8:	697b      	ldr	r3, [r7, #20]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <lis2duxs12_mode_set>:
  * @param  val   set the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_set(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *val)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003f0e:	f107 020c 	add.w	r2, r7, #12
 8003f12:	2301      	movs	r3, #1
 8003f14:	2114      	movs	r1, #20
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff fdfa 	bl	8003b10 <lis2duxs12_read_reg>
 8003f1c:	6178      	str	r0, [r7, #20]

  ctrl5.odr = (uint8_t)val->odr & 0xFU;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	7b3b      	ldrb	r3, [r7, #12]
 8003f2a:	f362 1307 	bfi	r3, r2, #4, #4
 8003f2e:	733b      	strb	r3, [r7, #12]
  ctrl5.fs = (uint8_t)val->fs;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	785b      	ldrb	r3, [r3, #1]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	7b3b      	ldrb	r3, [r7, #12]
 8003f3c:	f362 0301 	bfi	r3, r2, #0, #2
 8003f40:	733b      	strb	r3, [r7, #12]

  /* set the bandwidth */
  switch (val->odr)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b06      	cmp	r3, #6
 8003f48:	d859      	bhi.n	8003ffe <lis2duxs12_mode_set+0xfa>
 8003f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f50 <lis2duxs12_mode_set+0x4c>)
 8003f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f50:	08003f6d 	.word	0x08003f6d
 8003f54:	08003f6d 	.word	0x08003f6d
 8003f58:	08003f6d 	.word	0x08003f6d
 8003f5c:	08003f6d 	.word	0x08003f6d
 8003f60:	08003f77 	.word	0x08003f77
 8003f64:	08003f93 	.word	0x08003f93
 8003f68:	08003fbf 	.word	0x08003fbf
    /* no anti-aliasing filter present */
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_1Hz6_ULP:
    case LIS2DUXS12_3Hz_ULP:
    case LIS2DUXS12_25Hz_ULP:
      ctrl5.bw = 0x0;
 8003f6c:	7b3b      	ldrb	r3, [r7, #12]
 8003f6e:	f023 030c 	bic.w	r3, r3, #12
 8003f72:	733b      	strb	r3, [r7, #12]
      break;
 8003f74:	e04d      	b.n	8004012 <lis2duxs12_mode_set+0x10e>

    /* low-power mode with ODR < 50 Hz */
    case LIS2DUXS12_6Hz_LP:
      switch (val->bw)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	789b      	ldrb	r3, [r3, #2]
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d003      	beq.n	8003f86 <lis2duxs12_mode_set+0x82>
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
        case LIS2DUXS12_ODR_div_8:
          /* value not allowed */
          ret = -1;
 8003f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f82:	617b      	str	r3, [r7, #20]
          break;
 8003f84:	e004      	b.n	8003f90 <lis2duxs12_mode_set+0x8c>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003f86:	7b3b      	ldrb	r3, [r7, #12]
 8003f88:	f043 030c 	orr.w	r3, r3, #12
 8003f8c:	733b      	strb	r3, [r7, #12]
          break;
 8003f8e:	bf00      	nop
      }
      break;
 8003f90:	e03f      	b.n	8004012 <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_12Hz5_LP:
      switch (val->bw)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	789b      	ldrb	r3, [r3, #2]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d005      	beq.n	8003fa6 <lis2duxs12_mode_set+0xa2>
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d009      	beq.n	8003fb2 <lis2duxs12_mode_set+0xae>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
          /* value not allowed */
          ret = -1;
 8003f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa2:	617b      	str	r3, [r7, #20]
          break;
 8003fa4:	e00a      	b.n	8003fbc <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 8003fa6:	7b3b      	ldrb	r3, [r7, #12]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	f362 0383 	bfi	r3, r2, #2, #2
 8003fae:	733b      	strb	r3, [r7, #12]
          break;
 8003fb0:	e004      	b.n	8003fbc <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003fb2:	7b3b      	ldrb	r3, [r7, #12]
 8003fb4:	f043 030c 	orr.w	r3, r3, #12
 8003fb8:	733b      	strb	r3, [r7, #12]
          break;
 8003fba:	bf00      	nop
      }
      break;
 8003fbc:	e029      	b.n	8004012 <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_25Hz_LP:
      switch (val->bw)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	789b      	ldrb	r3, [r3, #2]
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d015      	beq.n	8003ff2 <lis2duxs12_mode_set+0xee>
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	dc03      	bgt.n	8003fd2 <lis2duxs12_mode_set+0xce>
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d005      	beq.n	8003fda <lis2duxs12_mode_set+0xd6>
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d009      	beq.n	8003fe6 <lis2duxs12_mode_set+0xe2>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
          /* value not allowed */
          ret = -1;
 8003fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd6:	617b      	str	r3, [r7, #20]
          break;
 8003fd8:	e010      	b.n	8003ffc <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_4:
          ctrl5.bw = 0x1;
 8003fda:	7b3b      	ldrb	r3, [r7, #12]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f362 0383 	bfi	r3, r2, #2, #2
 8003fe2:	733b      	strb	r3, [r7, #12]
          break;
 8003fe4:	e00a      	b.n	8003ffc <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 8003fe6:	7b3b      	ldrb	r3, [r7, #12]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f362 0383 	bfi	r3, r2, #2, #2
 8003fee:	733b      	strb	r3, [r7, #12]
          break;
 8003ff0:	e004      	b.n	8003ffc <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003ff2:	7b3b      	ldrb	r3, [r7, #12]
 8003ff4:	f043 030c 	orr.w	r3, r3, #12
 8003ff8:	733b      	strb	r3, [r7, #12]
          break;
 8003ffa:	bf00      	nop
      }
      break;
 8003ffc:	e009      	b.n	8004012 <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_100Hz_HP:
    case LIS2DUXS12_200Hz_HP:
    case LIS2DUXS12_400Hz_HP:
    case LIS2DUXS12_800Hz_HP:
    default:
      ctrl5.bw = (uint8_t)val->bw;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	789b      	ldrb	r3, [r3, #2]
 8004002:	f003 0303 	and.w	r3, r3, #3
 8004006:	b2da      	uxtb	r2, r3
 8004008:	7b3b      	ldrb	r3, [r7, #12]
 800400a:	f362 0383 	bfi	r3, r2, #2, #2
 800400e:	733b      	strb	r3, [r7, #12]
      break;
 8004010:	bf00      	nop
  }

  if (ret != 0)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <lis2duxs12_mode_set+0x118>
  {
    return ret;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	e02b      	b.n	8004074 <lis2duxs12_mode_set+0x170>
  }

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 800401c:	f107 0210 	add.w	r2, r7, #16
 8004020:	2301      	movs	r3, #1
 8004022:	2112      	movs	r1, #18
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff fd73 	bl	8003b10 <lis2duxs12_read_reg>
 800402a:	6178      	str	r0, [r7, #20]

  ctrl3.hp_en = (((uint8_t)val->odr & 0x30U) == 0x10U) ? 1U : 0U;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004034:	2b10      	cmp	r3, #16
 8004036:	d101      	bne.n	800403c <lis2duxs12_mode_set+0x138>
 8004038:	2201      	movs	r2, #1
 800403a:	e000      	b.n	800403e <lis2duxs12_mode_set+0x13a>
 800403c:	2200      	movs	r2, #0
 800403e:	7c3b      	ldrb	r3, [r7, #16]
 8004040:	f362 0382 	bfi	r3, r2, #2, #1
 8004044:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d112      	bne.n	8004072 <lis2duxs12_mode_set+0x16e>
  {
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 800404c:	f107 020c 	add.w	r2, r7, #12
 8004050:	2301      	movs	r3, #1
 8004052:	2114      	movs	r1, #20
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff fd78 	bl	8003b4a <lis2duxs12_write_reg>
 800405a:	6178      	str	r0, [r7, #20]
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 800405c:	f107 0210 	add.w	r2, r7, #16
 8004060:	2301      	movs	r3, #1
 8004062:	2112      	movs	r1, #18
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff fd70 	bl	8003b4a <lis2duxs12_write_reg>
 800406a:	4602      	mov	r2, r0
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	4413      	add	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8004072:	697b      	ldr	r3, [r7, #20]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3718      	adds	r7, #24
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <lis2duxs12_mode_get>:
  * @param  val   get the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_get(const stmdev_ctx_t *ctx, lis2duxs12_md_t *val)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8004086:	f107 020c 	add.w	r2, r7, #12
 800408a:	2301      	movs	r3, #1
 800408c:	2114      	movs	r1, #20
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff fd3e 	bl	8003b10 <lis2duxs12_read_reg>
 8004094:	6178      	str	r0, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8004096:	f107 0210 	add.w	r2, r7, #16
 800409a:	2301      	movs	r3, #1
 800409c:	2112      	movs	r1, #18
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff fd36 	bl	8003b10 <lis2duxs12_read_reg>
 80040a4:	4602      	mov	r2, r0
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	4413      	add	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]

  switch (ctrl5.odr)
 80040ac:	7b3b      	ldrb	r3, [r7, #12]
 80040ae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b0f      	cmp	r3, #15
 80040b6:	f200 809b 	bhi.w	80041f0 <lis2duxs12_mode_get+0x174>
 80040ba:	a201      	add	r2, pc, #4	@ (adr r2, 80040c0 <lis2duxs12_mode_get+0x44>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	08004101 	.word	0x08004101
 80040c4:	08004109 	.word	0x08004109
 80040c8:	08004111 	.word	0x08004111
 80040cc:	08004119 	.word	0x08004119
 80040d0:	08004121 	.word	0x08004121
 80040d4:	08004139 	.word	0x08004139
 80040d8:	08004151 	.word	0x08004151
 80040dc:	08004169 	.word	0x08004169
 80040e0:	08004181 	.word	0x08004181
 80040e4:	08004199 	.word	0x08004199
 80040e8:	080041b1 	.word	0x080041b1
 80040ec:	080041c9 	.word	0x080041c9
 80040f0:	080041f1 	.word	0x080041f1
 80040f4:	080041f1 	.word	0x080041f1
 80040f8:	080041e1 	.word	0x080041e1
 80040fc:	080041e9 	.word	0x080041e9
  {
    case 0x00:
      val->odr = LIS2DUXS12_OFF;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2200      	movs	r2, #0
 8004104:	701a      	strb	r2, [r3, #0]
      break;
 8004106:	e077      	b.n	80041f8 <lis2duxs12_mode_get+0x17c>
    case 0x01:
      val->odr = LIS2DUXS12_1Hz6_ULP;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2201      	movs	r2, #1
 800410c:	701a      	strb	r2, [r3, #0]
      break;
 800410e:	e073      	b.n	80041f8 <lis2duxs12_mode_get+0x17c>
    case 0x02:
      val->odr = LIS2DUXS12_3Hz_ULP;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2202      	movs	r2, #2
 8004114:	701a      	strb	r2, [r3, #0]
      break;
 8004116:	e06f      	b.n	80041f8 <lis2duxs12_mode_get+0x17c>
    case 0x03:
      val->odr = LIS2DUXS12_25Hz_ULP;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2203      	movs	r2, #3
 800411c:	701a      	strb	r2, [r3, #0]
      break;
 800411e:	e06b      	b.n	80041f8 <lis2duxs12_mode_get+0x17c>
    case 0x04:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_6Hz_HP : LIS2DUXS12_6Hz_LP;
 8004120:	7c3b      	ldrb	r3, [r7, #16]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <lis2duxs12_mode_get+0xb4>
 800412c:	2214      	movs	r2, #20
 800412e:	e000      	b.n	8004132 <lis2duxs12_mode_get+0xb6>
 8004130:	2204      	movs	r2, #4
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	701a      	strb	r2, [r3, #0]
      break;
 8004136:	e05f      	b.n	80041f8 <lis2duxs12_mode_get+0x17c>
    case 0x05:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_12Hz5_HP : LIS2DUXS12_12Hz5_LP;
 8004138:	7c3b      	ldrb	r3, [r7, #16]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	b2db      	uxtb	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <lis2duxs12_mode_get+0xcc>
 8004144:	2215      	movs	r2, #21
 8004146:	e000      	b.n	800414a <lis2duxs12_mode_get+0xce>
 8004148:	2205      	movs	r2, #5
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	701a      	strb	r2, [r3, #0]
      break;
 800414e:	e053      	b.n	80041f8 <lis2duxs12_mode_get+0x17c>
    case 0x06:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_25Hz_HP : LIS2DUXS12_25Hz_LP;
 8004150:	7c3b      	ldrb	r3, [r7, #16]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <lis2duxs12_mode_get+0xe4>
 800415c:	2216      	movs	r2, #22
 800415e:	e000      	b.n	8004162 <lis2duxs12_mode_get+0xe6>
 8004160:	2206      	movs	r2, #6
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	701a      	strb	r2, [r3, #0]
      break;
 8004166:	e047      	b.n	80041f8 <lis2duxs12_mode_get+0x17c>
    case 0x07:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_50Hz_HP : LIS2DUXS12_50Hz_LP;
 8004168:	7c3b      	ldrb	r3, [r7, #16]
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <lis2duxs12_mode_get+0xfc>
 8004174:	2217      	movs	r2, #23
 8004176:	e000      	b.n	800417a <lis2duxs12_mode_get+0xfe>
 8004178:	2207      	movs	r2, #7
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	701a      	strb	r2, [r3, #0]
      break;
 800417e:	e03b      	b.n	80041f8 <lis2duxs12_mode_get+0x17c>
    case 0x08:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_100Hz_HP : LIS2DUXS12_100Hz_LP;
 8004180:	7c3b      	ldrb	r3, [r7, #16]
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <lis2duxs12_mode_get+0x114>
 800418c:	2218      	movs	r2, #24
 800418e:	e000      	b.n	8004192 <lis2duxs12_mode_get+0x116>
 8004190:	2208      	movs	r2, #8
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	701a      	strb	r2, [r3, #0]
      break;
 8004196:	e02f      	b.n	80041f8 <lis2duxs12_mode_get+0x17c>
    case 0x09:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_200Hz_HP : LIS2DUXS12_200Hz_LP;
 8004198:	7c3b      	ldrb	r3, [r7, #16]
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <lis2duxs12_mode_get+0x12c>
 80041a4:	2219      	movs	r2, #25
 80041a6:	e000      	b.n	80041aa <lis2duxs12_mode_get+0x12e>
 80041a8:	2209      	movs	r2, #9
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	701a      	strb	r2, [r3, #0]
      break;
 80041ae:	e023      	b.n	80041f8 <lis2duxs12_mode_get+0x17c>
    case 0x0A:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_400Hz_HP : LIS2DUXS12_400Hz_LP;
 80041b0:	7c3b      	ldrb	r3, [r7, #16]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <lis2duxs12_mode_get+0x144>
 80041bc:	221a      	movs	r2, #26
 80041be:	e000      	b.n	80041c2 <lis2duxs12_mode_get+0x146>
 80041c0:	220a      	movs	r2, #10
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	701a      	strb	r2, [r3, #0]
      break;
 80041c6:	e017      	b.n	80041f8 <lis2duxs12_mode_get+0x17c>
    case 0x0B:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_800Hz_HP : LIS2DUXS12_800Hz_LP;
 80041c8:	7c3b      	ldrb	r3, [r7, #16]
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <lis2duxs12_mode_get+0x15c>
 80041d4:	221b      	movs	r2, #27
 80041d6:	e000      	b.n	80041da <lis2duxs12_mode_get+0x15e>
 80041d8:	220b      	movs	r2, #11
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	701a      	strb	r2, [r3, #0]
      break;
 80041de:	e00b      	b.n	80041f8 <lis2duxs12_mode_get+0x17c>
    case 0xe:
      val->odr = LIS2DUXS12_TRIG_PIN;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	222e      	movs	r2, #46	@ 0x2e
 80041e4:	701a      	strb	r2, [r3, #0]
      break;
 80041e6:	e007      	b.n	80041f8 <lis2duxs12_mode_get+0x17c>
    case 0xf:
      val->odr = LIS2DUXS12_TRIG_SW;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	222f      	movs	r2, #47	@ 0x2f
 80041ec:	701a      	strb	r2, [r3, #0]
      break;
 80041ee:	e003      	b.n	80041f8 <lis2duxs12_mode_get+0x17c>
    default:
      val->odr = LIS2DUXS12_OFF;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]
      break;
 80041f6:	bf00      	nop
  }

  switch (ctrl5.fs)
 80041f8:	7b3b      	ldrb	r3, [r7, #12]
 80041fa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b03      	cmp	r3, #3
 8004202:	d81b      	bhi.n	800423c <lis2duxs12_mode_get+0x1c0>
 8004204:	a201      	add	r2, pc, #4	@ (adr r2, 800420c <lis2duxs12_mode_get+0x190>)
 8004206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420a:	bf00      	nop
 800420c:	0800421d 	.word	0x0800421d
 8004210:	08004225 	.word	0x08004225
 8004214:	0800422d 	.word	0x0800422d
 8004218:	08004235 	.word	0x08004235
  {
    case 0:
      val->fs = LIS2DUXS12_2g;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2200      	movs	r2, #0
 8004220:	705a      	strb	r2, [r3, #1]
      break;
 8004222:	e00f      	b.n	8004244 <lis2duxs12_mode_get+0x1c8>
    case 1:
      val->fs = LIS2DUXS12_4g;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2201      	movs	r2, #1
 8004228:	705a      	strb	r2, [r3, #1]
      break;
 800422a:	e00b      	b.n	8004244 <lis2duxs12_mode_get+0x1c8>
    case 2:
      val->fs = LIS2DUXS12_8g;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2202      	movs	r2, #2
 8004230:	705a      	strb	r2, [r3, #1]
      break;
 8004232:	e007      	b.n	8004244 <lis2duxs12_mode_get+0x1c8>
    case 3:
      val->fs = LIS2DUXS12_16g;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2203      	movs	r2, #3
 8004238:	705a      	strb	r2, [r3, #1]
      break;
 800423a:	e003      	b.n	8004244 <lis2duxs12_mode_get+0x1c8>
    default:
      val->fs = LIS2DUXS12_2g;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2200      	movs	r2, #0
 8004240:	705a      	strb	r2, [r3, #1]
      break;
 8004242:	bf00      	nop
  }

  switch (ctrl5.bw)
 8004244:	7b3b      	ldrb	r3, [r7, #12]
 8004246:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b03      	cmp	r3, #3
 800424e:	d81b      	bhi.n	8004288 <lis2duxs12_mode_get+0x20c>
 8004250:	a201      	add	r2, pc, #4	@ (adr r2, 8004258 <lis2duxs12_mode_get+0x1dc>)
 8004252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004256:	bf00      	nop
 8004258:	08004269 	.word	0x08004269
 800425c:	08004271 	.word	0x08004271
 8004260:	08004279 	.word	0x08004279
 8004264:	08004281 	.word	0x08004281
  {
    case 0:
      val->bw = LIS2DUXS12_ODR_div_2;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2200      	movs	r2, #0
 800426c:	709a      	strb	r2, [r3, #2]
      break;
 800426e:	e00f      	b.n	8004290 <lis2duxs12_mode_get+0x214>
    case 1:
      val->bw = LIS2DUXS12_ODR_div_4;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2201      	movs	r2, #1
 8004274:	709a      	strb	r2, [r3, #2]
      break;
 8004276:	e00b      	b.n	8004290 <lis2duxs12_mode_get+0x214>
    case 2:
      val->bw = LIS2DUXS12_ODR_div_8;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2202      	movs	r2, #2
 800427c:	709a      	strb	r2, [r3, #2]
      break;
 800427e:	e007      	b.n	8004290 <lis2duxs12_mode_get+0x214>
    case 3:
      val->bw = LIS2DUXS12_ODR_div_16;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2203      	movs	r2, #3
 8004284:	709a      	strb	r2, [r3, #2]
      break;
 8004286:	e003      	b.n	8004290 <lis2duxs12_mode_get+0x214>
    default:
      val->bw = LIS2DUXS12_ODR_div_2;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2200      	movs	r2, #0
 800428c:	709a      	strb	r2, [r3, #2]
      break;
 800428e:	bf00      	nop
  }

  return ret;
 8004290:	697b      	ldr	r3, [r7, #20]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop

0800429c <lis2duxs12_exit_deep_power_down>:
  * @param  val      Enter soft power down in SPI case
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_exit_deep_power_down(const stmdev_ctx_t *ctx)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  lis2duxs12_en_device_config_t en_device_config = {0};
 80042a4:	2300      	movs	r3, #0
 80042a6:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  en_device_config.soft_pd = PROPERTY_ENABLE;
 80042a8:	7a3b      	ldrb	r3, [r7, #8]
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	723b      	strb	r3, [r7, #8]
  ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_EN_DEVICE_CONFIG, (uint8_t *)&en_device_config, 1);
 80042b0:	f107 0208 	add.w	r2, r7, #8
 80042b4:	2301      	movs	r3, #1
 80042b6:	213e      	movs	r1, #62	@ 0x3e
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff fc46 	bl	8003b4a <lis2duxs12_write_reg>
 80042be:	60f8      	str	r0, [r7, #12]

  if (ctx->mdelay != NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <lis2duxs12_exit_deep_power_down+0x34>
  {
    ctx->mdelay(25); /* See AN5812 - paragraphs 3.1.1.1 and 3.1.1.2 */
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2019      	movs	r0, #25
 80042ce:	4798      	blx	r3
  }

  return ret;
 80042d0:	68fb      	ldr	r3, [r7, #12]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <lis2duxs12_xl_data_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_xl_data_get(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *md,
                               lis2duxs12_xl_data_t *data)
{
 80042dc:	b590      	push	{r4, r7, lr}
 80042de:	b089      	sub	sp, #36	@ 0x24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  uint8_t buff[6];
  int32_t ret;
  uint8_t i;
  uint8_t j;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_OUT_X_L, buff, 6);
 80042e8:	f107 0210 	add.w	r2, r7, #16
 80042ec:	2306      	movs	r3, #6
 80042ee:	2128      	movs	r1, #40	@ 0x28
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f7ff fc0d 	bl	8003b10 <lis2duxs12_read_reg>
 80042f6:	61b8      	str	r0, [r7, #24]

  /* acceleration conversion */
  j = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	77bb      	strb	r3, [r7, #30]
  for (i = 0U; i < 3U; i++)
 80042fc:	2300      	movs	r3, #0
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e08f      	b.n	8004422 <lis2duxs12_xl_data_get+0x146>
  {
    data->raw[i] = (int16_t)buff[j + 1U];
 8004302:	7fbb      	ldrb	r3, [r7, #30]
 8004304:	3301      	adds	r3, #1
 8004306:	3320      	adds	r3, #32
 8004308:	443b      	add	r3, r7
 800430a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800430e:	7ffb      	ldrb	r3, [r7, #31]
 8004310:	b211      	sxth	r1, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	3304      	adds	r3, #4
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	4413      	add	r3, r2
 800431a:	460a      	mov	r2, r1
 800431c:	809a      	strh	r2, [r3, #4]
    data->raw[i] = (data->raw[i] * 256) + (int16_t) buff[j];
 800431e:	7ffb      	ldrb	r3, [r7, #31]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	4413      	add	r3, r2
 8004328:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800432c:	b29b      	uxth	r3, r3
 800432e:	021b      	lsls	r3, r3, #8
 8004330:	b29b      	uxth	r3, r3
 8004332:	7fba      	ldrb	r2, [r7, #30]
 8004334:	3220      	adds	r2, #32
 8004336:	443a      	add	r2, r7
 8004338:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800433c:	4413      	add	r3, r2
 800433e:	b29a      	uxth	r2, r3
 8004340:	7ffb      	ldrb	r3, [r7, #31]
 8004342:	b211      	sxth	r1, r2
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	3304      	adds	r3, #4
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	4413      	add	r3, r2
 800434c:	460a      	mov	r2, r1
 800434e:	809a      	strh	r2, [r3, #4]
    j += 2U;
 8004350:	7fbb      	ldrb	r3, [r7, #30]
 8004352:	3302      	adds	r3, #2
 8004354:	77bb      	strb	r3, [r7, #30]
    switch (md->fs)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	785b      	ldrb	r3, [r3, #1]
 800435a:	2b03      	cmp	r3, #3
 800435c:	d856      	bhi.n	800440c <lis2duxs12_xl_data_get+0x130>
 800435e:	a201      	add	r2, pc, #4	@ (adr r2, 8004364 <lis2duxs12_xl_data_get+0x88>)
 8004360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004364:	08004375 	.word	0x08004375
 8004368:	0800439b 	.word	0x0800439b
 800436c:	080043c1 	.word	0x080043c1
 8004370:	080043e7 	.word	0x080043e7
    {
      case LIS2DUXS12_2g:
        data->mg[i] = lis2duxs12_from_fs2g_to_mg(data->raw[i]);
 8004374:	7ffb      	ldrb	r3, [r7, #31]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	3304      	adds	r3, #4
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	4413      	add	r3, r2
 800437e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004382:	7ffc      	ldrb	r4, [r7, #31]
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff fbfd 	bl	8003b84 <lis2duxs12_from_fs2g_to_mg>
 800438a:	eef0 7a40 	vmov.f32	s15, s0
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	00a3      	lsls	r3, r4, #2
 8004392:	4413      	add	r3, r2
 8004394:	edc3 7a00 	vstr	s15, [r3]
        break;
 8004398:	e040      	b.n	800441c <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_4g:
        data->mg[i] = lis2duxs12_from_fs4g_to_mg(data->raw[i]);
 800439a:	7ffb      	ldrb	r3, [r7, #31]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	4413      	add	r3, r2
 80043a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80043a8:	7ffc      	ldrb	r4, [r7, #31]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff fc02 	bl	8003bb4 <lis2duxs12_from_fs4g_to_mg>
 80043b0:	eef0 7a40 	vmov.f32	s15, s0
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	00a3      	lsls	r3, r4, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	edc3 7a00 	vstr	s15, [r3]
        break;
 80043be:	e02d      	b.n	800441c <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_8g:
        data->mg[i] = lis2duxs12_from_fs8g_to_mg(data->raw[i]);
 80043c0:	7ffb      	ldrb	r3, [r7, #31]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	3304      	adds	r3, #4
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	4413      	add	r3, r2
 80043ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80043ce:	7ffc      	ldrb	r4, [r7, #31]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fc07 	bl	8003be4 <lis2duxs12_from_fs8g_to_mg>
 80043d6:	eef0 7a40 	vmov.f32	s15, s0
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	00a3      	lsls	r3, r4, #2
 80043de:	4413      	add	r3, r2
 80043e0:	edc3 7a00 	vstr	s15, [r3]
        break;
 80043e4:	e01a      	b.n	800441c <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_16g:
        data->mg[i] = lis2duxs12_from_fs16g_to_mg(data->raw[i]);
 80043e6:	7ffb      	ldrb	r3, [r7, #31]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	3304      	adds	r3, #4
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	4413      	add	r3, r2
 80043f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80043f4:	7ffc      	ldrb	r4, [r7, #31]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff fc0c 	bl	8003c14 <lis2duxs12_from_fs16g_to_mg>
 80043fc:	eef0 7a40 	vmov.f32	s15, s0
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	00a3      	lsls	r3, r4, #2
 8004404:	4413      	add	r3, r2
 8004406:	edc3 7a00 	vstr	s15, [r3]
        break;
 800440a:	e007      	b.n	800441c <lis2duxs12_xl_data_get+0x140>
      default:
        data->mg[i] = 0.0f;
 800440c:	7ffb      	ldrb	r3, [r7, #31]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
        break;
 800441a:	bf00      	nop
  for (i = 0U; i < 3U; i++)
 800441c:	7ffb      	ldrb	r3, [r7, #31]
 800441e:	3301      	adds	r3, #1
 8004420:	77fb      	strb	r3, [r7, #31]
 8004422:	7ffb      	ldrb	r3, [r7, #31]
 8004424:	2b02      	cmp	r3, #2
 8004426:	f67f af6c 	bls.w	8004302 <lis2duxs12_xl_data_get+0x26>
    }
  }

  return ret;
 800442a:	69bb      	ldr	r3, [r7, #24]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3724      	adds	r7, #36	@ 0x24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd90      	pop	{r4, r7, pc}

08004434 <lis2duxs12_i3c_configure_set>:
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_i3c_configure_set(const stmdev_ctx_t *ctx, const lis2duxs12_i3c_cfg_t *val)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 800443e:	f107 0208 	add.w	r2, r7, #8
 8004442:	2301      	movs	r3, #1
 8004444:	2133      	movs	r1, #51	@ 0x33
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff fb62 	bl	8003b10 <lis2duxs12_read_reg>
 800444c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d122      	bne.n	800449a <lis2duxs12_i3c_configure_set+0x66>
  {
    i3c_cfg.bus_act_sel = (uint8_t)val->bus_act_sel;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	b2da      	uxtb	r2, r3
 800445e:	7a3b      	ldrb	r3, [r7, #8]
 8004460:	f362 0301 	bfi	r3, r2, #0, #2
 8004464:	723b      	strb	r3, [r7, #8]
    i3c_cfg.dis_drstdaa = val->drstdaa_en;
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	785b      	ldrb	r3, [r3, #1]
 800446a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800446e:	b2da      	uxtb	r2, r3
 8004470:	7a3b      	ldrb	r3, [r7, #8]
 8004472:	f362 1386 	bfi	r3, r2, #6, #1
 8004476:	723b      	strb	r3, [r7, #8]
    i3c_cfg.asf_on = val->asf_on;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	785b      	ldrb	r3, [r3, #1]
 800447c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004480:	b2da      	uxtb	r2, r3
 8004482:	7a3b      	ldrb	r3, [r7, #8]
 8004484:	f362 1345 	bfi	r3, r2, #5, #1
 8004488:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 800448a:	f107 0208 	add.w	r2, r7, #8
 800448e:	2301      	movs	r3, #1
 8004490:	2133      	movs	r1, #51	@ 0x33
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff fb59 	bl	8003b4a <lis2duxs12_write_reg>
 8004498:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800449a:	68fb      	ldr	r3, [r7, #12]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <lis2duxs12_i3c_configure_get>:
  * @param  ctx   communication interface handler.(ptr)
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */int32_t lis2duxs12_i3c_configure_get(const stmdev_ctx_t *ctx, lis2duxs12_i3c_cfg_t *val)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 80044ae:	f107 0208 	add.w	r2, r7, #8
 80044b2:	2301      	movs	r3, #1
 80044b4:	2133      	movs	r1, #51	@ 0x33
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff fb2a 	bl	8003b10 <lis2duxs12_read_reg>
 80044bc:	60f8      	str	r0, [r7, #12]

  val->drstdaa_en = i3c_cfg.dis_drstdaa;
 80044be:	7a3b      	ldrb	r3, [r7, #8]
 80044c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80044c4:	b2d9      	uxtb	r1, r3
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	7853      	ldrb	r3, [r2, #1]
 80044ca:	f361 0341 	bfi	r3, r1, #1, #1
 80044ce:	7053      	strb	r3, [r2, #1]
  val->asf_on = i3c_cfg.asf_on;
 80044d0:	7a3b      	ldrb	r3, [r7, #8]
 80044d2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80044d6:	b2d9      	uxtb	r1, r3
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	7853      	ldrb	r3, [r2, #1]
 80044dc:	f361 0300 	bfi	r3, r1, #0, #1
 80044e0:	7053      	strb	r3, [r2, #1]

  switch (val->bus_act_sel)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d00e      	beq.n	8004508 <lis2duxs12_i3c_configure_get+0x64>
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	dc10      	bgt.n	8004510 <lis2duxs12_i3c_configure_get+0x6c>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <lis2duxs12_i3c_configure_get+0x54>
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d004      	beq.n	8004500 <lis2duxs12_i3c_configure_get+0x5c>
 80044f6:	e00b      	b.n	8004510 <lis2duxs12_i3c_configure_get+0x6c>
  {
    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2200      	movs	r2, #0
 80044fc:	701a      	strb	r2, [r3, #0]
      break;
 80044fe:	e00b      	b.n	8004518 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2201      	movs	r2, #1
 8004504:	701a      	strb	r2, [r3, #0]
      break;
 8004506:	e007      	b.n	8004518 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2202      	movs	r2, #2
 800450c:	701a      	strb	r2, [r3, #0]
      break;
 800450e:	e003      	b.n	8004518 <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS:
    default:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2203      	movs	r2, #3
 8004514:	701a      	strb	r2, [r3, #0]
      break;
 8004516:	bf00      	nop
  }

  return ret;
 8004518:	68fb      	ldr	r3, [r7, #12]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <lis2duxs12_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, STRED_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mem_bank_set(const stmdev_ctx_t *ctx, lis2duxs12_mem_bank_t val)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	460b      	mov	r3, r1
 800452c:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 800452e:	f107 0208 	add.w	r2, r7, #8
 8004532:	2301      	movs	r3, #1
 8004534:	213f      	movs	r1, #63	@ 0x3f
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f7ff faea 	bl	8003b10 <lis2duxs12_read_reg>
 800453c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10f      	bne.n	8004564 <lis2duxs12_mem_bank_set+0x42>
  {
    func_cfg_access.emb_func_reg_access = ((uint8_t)val & 0x1U);
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	b2da      	uxtb	r2, r3
 800454c:	7a3b      	ldrb	r3, [r7, #8]
 800454e:	f362 13c7 	bfi	r3, r2, #7, #1
 8004552:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8004554:	f107 0208 	add.w	r2, r7, #8
 8004558:	2301      	movs	r3, #1
 800455a:	213f      	movs	r1, #63	@ 0x3f
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7ff faf4 	bl	8003b4a <lis2duxs12_write_reg>
 8004562:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004564:	68fb      	ldr	r3, [r7, #12]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <lis2duxs12_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_fifo_mode_set(const stmdev_ctx_t *ctx, lis2duxs12_fifo_mode_t val)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b08a      	sub	sp, #40	@ 0x28
 8004572:	af00      	add	r7, sp, #0
 8004574:	60f8      	str	r0, [r7, #12]
 8004576:	1d3b      	adds	r3, r7, #4
 8004578:	e883 0006 	stmia.w	r3, {r1, r2}
  lis2duxs12_fifo_ctrl_t fifo_ctrl;
  lis2duxs12_fifo_wtm_t fifo_wtm;
  lis2duxs12_fifo_batch_dec_t fifo_batch;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 800457c:	f107 0220 	add.w	r2, r7, #32
 8004580:	2301      	movs	r3, #1
 8004582:	2113      	movs	r1, #19
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f7ff fac3 	bl	8003b10 <lis2duxs12_read_reg>
 800458a:	6278      	str	r0, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 800458c:	f107 021c 	add.w	r2, r7, #28
 8004590:	2301      	movs	r3, #1
 8004592:	2115      	movs	r1, #21
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f7ff fabb 	bl	8003b10 <lis2duxs12_read_reg>
 800459a:	4602      	mov	r2, r0
 800459c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459e:	4413      	add	r3, r2
 80045a0:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 80045a2:	f107 0214 	add.w	r2, r7, #20
 80045a6:	2301      	movs	r3, #1
 80045a8:	2147      	movs	r1, #71	@ 0x47
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f7ff fab0 	bl	8003b10 <lis2duxs12_read_reg>
 80045b0:	4602      	mov	r2, r0
 80045b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b4:	4413      	add	r3, r2
 80045b6:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 80045b8:	f107 0218 	add.w	r2, r7, #24
 80045bc:	2301      	movs	r3, #1
 80045be:	2116      	movs	r1, #22
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f7ff faa5 	bl	8003b10 <lis2duxs12_read_reg>
 80045c6:	4602      	mov	r2, r0
 80045c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ca:	4413      	add	r3, r2
 80045cc:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ret == 0)
 80045ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f040 808a 	bne.w	80046ea <lis2duxs12_fifo_mode_set+0x17c>
  {
    /* set FIFO mode */
    if (val.operation != LIS2DUXS12_FIFO_OFF)
 80045d6:	793b      	ldrb	r3, [r7, #4]
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d00e      	beq.n	80045fa <lis2duxs12_fifo_mode_set+0x8c>
    {
      ctrl4.fifo_en = 1;
 80045dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045e0:	f043 0308 	orr.w	r3, r3, #8
 80045e4:	f887 3020 	strb.w	r3, [r7, #32]
      fifo_ctrl.fifo_mode = ((uint8_t)val.operation & 0x7U);
 80045e8:	793b      	ldrb	r3, [r7, #4]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	7f3b      	ldrb	r3, [r7, #28]
 80045f2:	f362 0302 	bfi	r3, r2, #0, #3
 80045f6:	773b      	strb	r3, [r7, #28]
 80045f8:	e005      	b.n	8004606 <lis2duxs12_fifo_mode_set+0x98>
    }
    else
    {
      ctrl4.fifo_en = 0;
 80045fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045fe:	f023 0308 	bic.w	r3, r3, #8
 8004602:	f887 3020 	strb.w	r3, [r7, #32]
    }

    /* set fifo depth (1X/2X) */
    fifo_ctrl.fifo_depth = (uint8_t)val.store;
 8004606:	797b      	ldrb	r3, [r7, #5]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	b2da      	uxtb	r2, r3
 800460e:	7f3b      	ldrb	r3, [r7, #28]
 8004610:	f362 1386 	bfi	r3, r2, #6, #1
 8004614:	773b      	strb	r3, [r7, #28]

    /* Set xl_only_fifo */
    fifo_wtm.xl_only_fifo = val.xl_only;
 8004616:	79bb      	ldrb	r3, [r7, #6]
 8004618:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800461c:	b2da      	uxtb	r2, r3
 800461e:	7e3b      	ldrb	r3, [r7, #24]
 8004620:	f362 13c7 	bfi	r3, r2, #7, #1
 8004624:	763b      	strb	r3, [r7, #24]

    /* set batching info */
    if (val.batch.dec_ts != LIS2DUXS12_DEC_TS_OFF)
 8004626:	7a3b      	ldrb	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00f      	beq.n	800464c <lis2duxs12_fifo_mode_set+0xde>
    {
      fifo_batch.dec_ts_batch = (uint8_t)val.batch.dec_ts;
 800462c:	7a3b      	ldrb	r3, [r7, #8]
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	b2da      	uxtb	r2, r3
 8004634:	7d3b      	ldrb	r3, [r7, #20]
 8004636:	f362 03c4 	bfi	r3, r2, #3, #2
 800463a:	753b      	strb	r3, [r7, #20]
      fifo_batch.bdr_xl = (uint8_t)val.batch.bdr_xl;
 800463c:	7a7b      	ldrb	r3, [r7, #9]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	b2da      	uxtb	r2, r3
 8004644:	7d3b      	ldrb	r3, [r7, #20]
 8004646:	f362 0302 	bfi	r3, r2, #0, #3
 800464a:	753b      	strb	r3, [r7, #20]
    }

    fifo_ctrl.cfg_chg_en = val.cfg_change_in_fifo;
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004652:	b2da      	uxtb	r2, r3
 8004654:	7f3b      	ldrb	r3, [r7, #28]
 8004656:	f362 13c7 	bfi	r3, r2, #7, #1
 800465a:	773b      	strb	r3, [r7, #28]

    /* set watermark */
    if (val.watermark > 0U)
 800465c:	79bb      	ldrb	r3, [r7, #6]
 800465e:	f023 0301 	bic.w	r3, r3, #1
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d014      	beq.n	8004692 <lis2duxs12_fifo_mode_set+0x124>
    {
      fifo_ctrl.stop_on_fth = (val.fifo_event == LIS2DUXS12_FIFO_EV_WTM) ? 1 : 0;
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf0c      	ite	eq
 8004674:	2301      	moveq	r3, #1
 8004676:	2300      	movne	r3, #0
 8004678:	b2da      	uxtb	r2, r3
 800467a:	7f3b      	ldrb	r3, [r7, #28]
 800467c:	f362 03c3 	bfi	r3, r2, #3, #1
 8004680:	773b      	strb	r3, [r7, #28]
      fifo_wtm.fth = val.watermark;
 8004682:	79bb      	ldrb	r3, [r7, #6]
 8004684:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8004688:	b2da      	uxtb	r2, r3
 800468a:	7e3b      	ldrb	r3, [r7, #24]
 800468c:	f362 0306 	bfi	r3, r2, #0, #7
 8004690:	763b      	strb	r3, [r7, #24]
    }

    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 8004692:	f107 0214 	add.w	r2, r7, #20
 8004696:	2301      	movs	r3, #1
 8004698:	2147      	movs	r1, #71	@ 0x47
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f7ff fa55 	bl	8003b4a <lis2duxs12_write_reg>
 80046a0:	4602      	mov	r2, r0
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	4413      	add	r3, r2
 80046a6:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 80046a8:	f107 0218 	add.w	r2, r7, #24
 80046ac:	2301      	movs	r3, #1
 80046ae:	2116      	movs	r1, #22
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f7ff fa4a 	bl	8003b4a <lis2duxs12_write_reg>
 80046b6:	4602      	mov	r2, r0
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	4413      	add	r3, r2
 80046bc:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 80046be:	f107 021c 	add.w	r2, r7, #28
 80046c2:	2301      	movs	r3, #1
 80046c4:	2115      	movs	r1, #21
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f7ff fa3f 	bl	8003b4a <lis2duxs12_write_reg>
 80046cc:	4602      	mov	r2, r0
 80046ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d0:	4413      	add	r3, r2
 80046d2:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 80046d4:	f107 0220 	add.w	r2, r7, #32
 80046d8:	2301      	movs	r3, #1
 80046da:	2113      	movs	r1, #19
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f7ff fa34 	bl	8003b4a <lis2duxs12_write_reg>
 80046e2:	4602      	mov	r2, r0
 80046e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e6:	4413      	add	r3, r2
 80046e8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  return ret;
 80046ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3728      	adds	r7, #40	@ 0x28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d103      	bne.n	8004710 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8004708:	f04f 33ff 	mov.w	r3, #4294967295
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	e067      	b.n	80047e0 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	7b1a      	ldrb	r2, [r3, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	695a      	ldr	r2, [r3, #20]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	699a      	ldr	r2, [r3, #24]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a28      	ldr	r2, [pc, #160]	@ (80047ec <LIS2MDL_RegisterBusIO+0xf8>)
 800474c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a27      	ldr	r2, [pc, #156]	@ (80047f0 <LIS2MDL_RegisterBusIO+0xfc>)
 8004752:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d103      	bne.n	8004772 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 800476a:	f04f 33ff 	mov.w	r3, #4294967295
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	e036      	b.n	80047e0 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4798      	blx	r3
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 800477e:	f04f 33ff 	mov.w	r3, #4294967295
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	e02c      	b.n	80047e0 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d028      	beq.n	80047e0 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004794:	2b00      	cmp	r3, #0
 8004796:	d123      	bne.n	80047e0 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d10d      	bne.n	80047bc <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80047a0:	2334      	movs	r3, #52	@ 0x34
 80047a2:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80047a4:	7afb      	ldrb	r3, [r7, #11]
 80047a6:	461a      	mov	r2, r3
 80047a8:	2162      	movs	r1, #98	@ 0x62
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fb1b 	bl	8004de6 <LIS2MDL_Write_Reg>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d014      	beq.n	80047e0 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80047b6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ba:	e012      	b.n	80047e2 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d101      	bne.n	80047c8 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	e00c      	b.n	80047e2 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3320      	adds	r3, #32
 80047cc:	2101      	movs	r1, #1
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 ff79 	bl	80056c6 <lis2mdl_i2c_interface_set>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80047da:	f04f 33ff 	mov.w	r3, #4294967295
 80047de:	e000      	b.n	80047e2 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80047e0:	68fb      	ldr	r3, [r7, #12]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	08004e3d 	.word	0x08004e3d
 80047f0:	08004ebf 	.word	0x08004ebf

080047f4 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b03      	cmp	r3, #3
 8004802:	d144      	bne.n	800488e <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004804:	f107 0208 	add.w	r2, r7, #8
 8004808:	2301      	movs	r3, #1
 800480a:	2162      	movs	r1, #98	@ 0x62
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fb97 	bl	8004f40 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8004818:	f04f 33ff 	mov.w	r3, #4294967295
 800481c:	e06c      	b.n	80048f8 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800481e:	f107 020c 	add.w	r2, r7, #12
 8004822:	2301      	movs	r3, #1
 8004824:	2160      	movs	r1, #96	@ 0x60
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fb8a 	bl	8004f40 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8004832:	f04f 33ff 	mov.w	r3, #4294967295
 8004836:	e05f      	b.n	80048f8 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8004838:	7a3b      	ldrb	r3, [r7, #8]
 800483a:	f043 0310 	orr.w	r3, r3, #16
 800483e:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8004840:	7a3b      	ldrb	r3, [r7, #8]
 8004842:	f023 0302 	bic.w	r3, r3, #2
 8004846:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004848:	7b3b      	ldrb	r3, [r7, #12]
 800484a:	2202      	movs	r2, #2
 800484c:	f362 0301 	bfi	r3, r2, #0, #2
 8004850:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8004852:	7b3b      	ldrb	r3, [r7, #12]
 8004854:	f043 030c 	orr.w	r3, r3, #12
 8004858:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800485a:	f107 0208 	add.w	r2, r7, #8
 800485e:	2301      	movs	r3, #1
 8004860:	2162      	movs	r1, #98	@ 0x62
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fcab 	bl	80051be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 800486e:	f04f 33ff 	mov.w	r3, #4294967295
 8004872:	e041      	b.n	80048f8 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004874:	f107 020c 	add.w	r2, r7, #12
 8004878:	2301      	movs	r3, #1
 800487a:	2160      	movs	r1, #96	@ 0x60
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fc9e 	bl	80051be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d032      	beq.n	80048ee <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004888:	f04f 33ff 	mov.w	r3, #4294967295
 800488c:	e034      	b.n	80048f8 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3320      	adds	r3, #32
 8004892:	2101      	movs	r1, #1
 8004894:	4618      	mov	r0, r3
 8004896:	f000 fe71 	bl	800557c <lis2mdl_block_data_update_set>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80048a0:	f04f 33ff 	mov.w	r3, #4294967295
 80048a4:	e028      	b.n	80048f8 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3320      	adds	r3, #32
 80048aa:	2102      	movs	r1, #2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 fde0 	bl	8005472 <lis2mdl_operating_mode_set>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80048b8:	f04f 33ff 	mov.w	r3, #4294967295
 80048bc:	e01c      	b.n	80048f8 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3320      	adds	r3, #32
 80048c2:	2103      	movs	r1, #3
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fdfa 	bl	80054be <lis2mdl_data_rate_set>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80048d0:	f04f 33ff 	mov.w	r3, #4294967295
 80048d4:	e010      	b.n	80048f8 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	3320      	adds	r3, #32
 80048da:	2100      	movs	r1, #0
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fecc 	bl	800567a <lis2mdl_self_test_set>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80048e8:	f04f 33ff 	mov.w	r3, #4294967295
 80048ec:	e004      	b.n	80048f8 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f8a5 	bl	8004a58 <LIS2MDL_MAG_Disable>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8004914:	f04f 33ff 	mov.w	r3, #4294967295
 8004918:	e004      	b.n	8004924 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	2b03      	cmp	r3, #3
 800493c:	d10b      	bne.n	8004956 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 800493e:	2301      	movs	r3, #1
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	214f      	movs	r1, #79	@ 0x4f
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fafb 	bl	8004f40 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00e      	beq.n	800496e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004950:	f04f 33ff 	mov.w	r3, #4294967295
 8004954:	e00c      	b.n	8004970 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3320      	adds	r3, #32
 800495a:	6839      	ldr	r1, [r7, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	f000 fe7b 	bl	8005658 <lis2mdl_device_id_get>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004968:	f04f 33ff 	mov.w	r3, #4294967295
 800496c:	e000      	b.n	8004970 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2200      	movs	r2, #0
 8004986:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2200      	movs	r2, #0
 800498c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2201      	movs	r2, #1
 8004992:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2200      	movs	r2, #0
 8004998:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2200      	movs	r2, #0
 800499e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2200      	movs	r2, #0
 80049a4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2232      	movs	r2, #50	@ 0x32
 80049aa:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	4a04      	ldr	r2, [pc, #16]	@ (80049d0 <LIS2MDL_GetCapabilities+0x58>)
 80049c0:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	42c80000 	.word	0x42c80000

080049d4 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	e032      	b.n	8004a50 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d11d      	bne.n	8004a2e <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80049f2:	f107 020c 	add.w	r2, r7, #12
 80049f6:	2301      	movs	r3, #1
 80049f8:	2160      	movs	r1, #96	@ 0x60
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 faa0 	bl	8004f40 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8004a06:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0a:	e021      	b.n	8004a50 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8004a0c:	7b3b      	ldrb	r3, [r7, #12]
 8004a0e:	f023 0303 	bic.w	r3, r3, #3
 8004a12:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004a14:	f107 020c 	add.w	r2, r7, #12
 8004a18:	2301      	movs	r3, #1
 8004a1a:	2160      	movs	r1, #96	@ 0x60
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fbce 	bl	80051be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00e      	beq.n	8004a46 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004a28:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2c:	e010      	b.n	8004a50 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3320      	adds	r3, #32
 8004a32:	2100      	movs	r1, #0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fd1c 	bl	8005472 <lis2mdl_operating_mode_set>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004a40:	f04f 33ff 	mov.w	r3, #4294967295
 8004a44:	e004      	b.n	8004a50 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e033      	b.n	8004ad6 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d11e      	bne.n	8004ab4 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004a76:	f107 020c 	add.w	r2, r7, #12
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	2160      	movs	r1, #96	@ 0x60
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 fa5e 	bl	8004f40 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8004a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a8e:	e022      	b.n	8004ad6 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004a90:	7b3b      	ldrb	r3, [r7, #12]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f362 0301 	bfi	r3, r2, #0, #2
 8004a98:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004a9a:	f107 020c 	add.w	r2, r7, #12
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	2160      	movs	r1, #96	@ 0x60
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fb8b 	bl	80051be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00e      	beq.n	8004acc <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004aae:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab2:	e010      	b.n	8004ad6 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3320      	adds	r3, #32
 8004ab8:	2102      	movs	r1, #2
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fcd9 	bl	8005472 <lis2mdl_operating_mode_set>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aca:	e004      	b.n	8004ad6 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float_t *Sensitivity)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
 8004ae6:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8004aee:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
	...

08004b00 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float_t *Odr)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3320      	adds	r3, #32
 8004b12:	f107 020b 	add.w	r2, r7, #11
 8004b16:	4611      	mov	r1, r2
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fcf7 	bl	800550c <lis2mdl_data_rate_get>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8004b24:	f04f 33ff 	mov.w	r3, #4294967295
 8004b28:	e023      	b.n	8004b72 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8004b2a:	7afb      	ldrb	r3, [r7, #11]
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d81b      	bhi.n	8004b68 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8004b30:	a201      	add	r2, pc, #4	@ (adr r2, 8004b38 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8004b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b36:	bf00      	nop
 8004b38:	08004b49 	.word	0x08004b49
 8004b3c:	08004b51 	.word	0x08004b51
 8004b40:	08004b59 	.word	0x08004b59
 8004b44:	08004b61 	.word	0x08004b61
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8004b7c <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8004b4c:	601a      	str	r2, [r3, #0]
      break;
 8004b4e:	e00f      	b.n	8004b70 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	4a0b      	ldr	r2, [pc, #44]	@ (8004b80 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8004b54:	601a      	str	r2, [r3, #0]
      break;
 8004b56:	e00b      	b.n	8004b70 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8004b84 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8004b5c:	601a      	str	r2, [r3, #0]
      break;
 8004b5e:	e007      	b.n	8004b70 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	4a09      	ldr	r2, [pc, #36]	@ (8004b88 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8004b64:	601a      	str	r2, [r3, #0]
      break;
 8004b66:	e003      	b.n	8004b70 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 8004b68:	f04f 33ff 	mov.w	r3, #4294967295
 8004b6c:	60fb      	str	r3, [r7, #12]
      break;
 8004b6e:	bf00      	nop
  }

  return ret;
 8004b70:	68fb      	ldr	r3, [r7, #12]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	41200000 	.word	0x41200000
 8004b80:	41a00000 	.word	0x41a00000
 8004b84:	42480000 	.word	0x42480000
 8004b88:	42c80000 	.word	0x42c80000

08004b8c <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float_t Odr)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8004b98:	edd7 7a00 	vldr	s15, [r7]
 8004b9c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba8:	d801      	bhi.n	8004bae <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8004baa:	2300      	movs	r3, #0
 8004bac:	e016      	b.n	8004bdc <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004bae:	edd7 7a00 	vldr	s15, [r7]
 8004bb2:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8004bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bbe:	d801      	bhi.n	8004bc4 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e00b      	b.n	8004bdc <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004bc4:	edd7 7a00 	vldr	s15, [r7]
 8004bc8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004c50 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8004bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd4:	d801      	bhi.n	8004bda <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	e000      	b.n	8004bdc <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004bda:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8004bdc:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d121      	bne.n	8004c2a <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004be6:	f107 020c 	add.w	r2, r7, #12
 8004bea:	2301      	movs	r3, #1
 8004bec:	2160      	movs	r1, #96	@ 0x60
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f9a6 	bl	8004f40 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8004bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8004bfe:	e022      	b.n	8004c46 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	7b3b      	ldrb	r3, [r7, #12]
 8004c0a:	f362 0383 	bfi	r3, r2, #2, #2
 8004c0e:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004c10:	f107 020c 	add.w	r2, r7, #12
 8004c14:	2301      	movs	r3, #1
 8004c16:	2160      	movs	r1, #96	@ 0x60
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fad0 	bl	80051be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00f      	beq.n	8004c44 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8004c24:	f04f 33ff 	mov.w	r3, #4294967295
 8004c28:	e00d      	b.n	8004c46 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3320      	adds	r3, #32
 8004c2e:	7bfa      	ldrb	r2, [r7, #15]
 8004c30:	4611      	mov	r1, r2
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fc43 	bl	80054be <lis2mdl_data_rate_set>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8004c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c42:	e000      	b.n	8004c46 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	42480000 	.word	0x42480000

08004c54 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *FullScale = 50;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2232      	movs	r2, #50	@ 0x32
 8004c62:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
  (void)pObj;
  (void)FullScale;

  return LIS2MDL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3320      	adds	r3, #32
 8004c98:	f107 0208 	add.w	r2, r7, #8
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fc92 	bl	80055c8 <lis2mdl_magnetic_raw_get>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8004caa:	f04f 33ff 	mov.w	r3, #4294967295
 8004cae:	e00c      	b.n	8004cca <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004cb0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004cb8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004cc0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b088      	sub	sp, #32
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d134      	bne.n	8004d54 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8004cea:	f107 0218 	add.w	r2, r7, #24
 8004cee:	2306      	movs	r3, #6
 8004cf0:	2168      	movs	r1, #104	@ 0x68
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f924 	bl	8004f40 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <LIS2MDL_MAG_GetAxes+0x32>
    {
      return LIS2MDL_ERROR;
 8004cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004d02:	e06c      	b.n	8004dde <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8004d04:	7e7b      	ldrb	r3, [r7, #25]
 8004d06:	b21b      	sxth	r3, r3
 8004d08:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8004d0a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	021b      	lsls	r3, r3, #8
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	7e3a      	ldrb	r2, [r7, #24]
 8004d16:	4413      	add	r3, r2
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	b21b      	sxth	r3, r3
 8004d1c:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8004d1e:	7efb      	ldrb	r3, [r7, #27]
 8004d20:	b21b      	sxth	r3, r3
 8004d22:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8004d24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	021b      	lsls	r3, r3, #8
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	7eba      	ldrb	r2, [r7, #26]
 8004d30:	4413      	add	r3, r2
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	b21b      	sxth	r3, r3
 8004d36:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8004d38:	7f7b      	ldrb	r3, [r7, #29]
 8004d3a:	b21b      	sxth	r3, r3
 8004d3c:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8004d3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	021b      	lsls	r3, r3, #8
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	7f3a      	ldrb	r2, [r7, #28]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	b21b      	sxth	r3, r3
 8004d50:	82bb      	strh	r3, [r7, #20]
 8004d52:	e00d      	b.n	8004d70 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3320      	adds	r3, #32
 8004d58:	f107 0210 	add.w	r2, r7, #16
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fc32 	bl	80055c8 <lis2mdl_magnetic_raw_get>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 8004d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d6e:	e036      	b.n	8004dde <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8004d70:	f107 030c 	add.w	r3, r7, #12
 8004d74:	4619      	mov	r1, r3
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7ff feb1 	bl	8004ade <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8004d7c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d80:	ee07 3a90 	vmov	s15, r3
 8004d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d88:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d94:	ee17 2a90 	vmov	r2, s15
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8004d9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004da0:	ee07 3a90 	vmov	s15, r3
 8004da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004da8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004db4:	ee17 2a90 	vmov	r2, s15
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004dbc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dd4:	ee17 2a90 	vmov	r2, s15
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b082      	sub	sp, #8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	460b      	mov	r3, r1
 8004df0:	70fb      	strb	r3, [r7, #3]
 8004df2:	4613      	mov	r3, r2
 8004df4:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d10b      	bne.n	8004e16 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8004dfe:	1cba      	adds	r2, r7, #2
 8004e00:	78f9      	ldrb	r1, [r7, #3]
 8004e02:	2301      	movs	r3, #1
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f9da 	bl	80051be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d010      	beq.n	8004e32 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8004e10:	f04f 33ff 	mov.w	r3, #4294967295
 8004e14:	e00e      	b.n	8004e34 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f103 0020 	add.w	r0, r3, #32
 8004e1c:	1cba      	adds	r2, r7, #2
 8004e1e:	78f9      	ldrb	r1, [r7, #3]
 8004e20:	2301      	movs	r3, #1
 8004e22:	f000 fb08 	bl	8005436 <lis2mdl_write_reg>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8004e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e30:	e000      	b.n	8004e34 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004e3c:	b590      	push	{r4, r7, lr}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	607a      	str	r2, [r7, #4]
 8004e46:	461a      	mov	r2, r3
 8004e48:	460b      	mov	r3, r1
 8004e4a:	72fb      	strb	r3, [r7, #11]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10e      	bne.n	8004e7a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	695c      	ldr	r4, [r3, #20]
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	7b1b      	ldrb	r3, [r3, #12]
 8004e64:	4618      	mov	r0, r3
 8004e66:	7afb      	ldrb	r3, [r7, #11]
 8004e68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	4619      	mov	r1, r3
 8004e70:	893b      	ldrh	r3, [r7, #8]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	47a0      	blx	r4
 8004e76:	4603      	mov	r3, r0
 8004e78:	e01d      	b.n	8004eb6 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d10b      	bne.n	8004e9a <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	695c      	ldr	r4, [r3, #20]
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	7b1b      	ldrb	r3, [r3, #12]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	7afb      	ldrb	r3, [r7, #11]
 8004e8e:	b299      	uxth	r1, r3
 8004e90:	893b      	ldrh	r3, [r7, #8]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	47a0      	blx	r4
 8004e96:	4603      	mov	r3, r0
 8004e98:	e00d      	b.n	8004eb6 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	695c      	ldr	r4, [r3, #20]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	7b1b      	ldrb	r3, [r3, #12]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	7afb      	ldrb	r3, [r7, #11]
 8004ea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	4619      	mov	r1, r3
 8004eae:	893b      	ldrh	r3, [r7, #8]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	47a0      	blx	r4
 8004eb4:	4603      	mov	r3, r0
  }
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd90      	pop	{r4, r7, pc}

08004ebe <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ebe:	b590      	push	{r4, r7, lr}
 8004ec0:	b087      	sub	sp, #28
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	460b      	mov	r3, r1
 8004ecc:	72fb      	strb	r3, [r7, #11]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10e      	bne.n	8004efc <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	691c      	ldr	r4, [r3, #16]
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	7b1b      	ldrb	r3, [r3, #12]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	7afb      	ldrb	r3, [r7, #11]
 8004eea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	893b      	ldrh	r3, [r7, #8]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	47a0      	blx	r4
 8004ef8:	4603      	mov	r3, r0
 8004efa:	e01d      	b.n	8004f38 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d10b      	bne.n	8004f1c <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	691c      	ldr	r4, [r3, #16]
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	7b1b      	ldrb	r3, [r3, #12]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	7afb      	ldrb	r3, [r7, #11]
 8004f10:	b299      	uxth	r1, r3
 8004f12:	893b      	ldrh	r3, [r7, #8]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	47a0      	blx	r4
 8004f18:	4603      	mov	r3, r0
 8004f1a:	e00d      	b.n	8004f38 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	691c      	ldr	r4, [r3, #16]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	7b1b      	ldrb	r3, [r3, #12]
 8004f24:	4618      	mov	r0, r3
 8004f26:	7afb      	ldrb	r3, [r7, #11]
 8004f28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	4619      	mov	r1, r3
 8004f30:	893b      	ldrh	r3, [r7, #8]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	47a0      	blx	r4
 8004f36:	4603      	mov	r3, r0
  }
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	371c      	adds	r7, #28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd90      	pop	{r4, r7, pc}

08004f40 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08c      	sub	sp, #48	@ 0x30
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	607a      	str	r2, [r7, #4]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	72fb      	strb	r3, [r7, #11]
 8004f50:	4613      	mov	r3, r2
 8004f52:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004f54:	2301      	movs	r3, #1
 8004f56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004f5a:	2340      	movs	r3, #64	@ 0x40
 8004f5c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8004f66:	233d      	movs	r3, #61	@ 0x3d
 8004f68:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004f6a:	2315      	movs	r3, #21
 8004f6c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004f70:	2316      	movs	r3, #22
 8004f72:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8004f76:	2317      	movs	r3, #23
 8004f78:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 8004f7c:	2314      	movs	r3, #20
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004f82:	2344      	movs	r3, #68	@ 0x44
 8004f84:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8004f86:	2302      	movs	r3, #2
 8004f88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8004f8c:	2339      	movs	r3, #57	@ 0x39
 8004f8e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004f98:	2329      	movs	r3, #41	@ 0x29
 8004f9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004f9e:	231e      	movs	r3, #30
 8004fa0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 8004faa:	893b      	ldrh	r3, [r7, #8]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004fbc:	2340      	movs	r3, #64	@ 0x40
 8004fbe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f103 0020 	add.w	r0, r3, #32
 8004fc8:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8004fcc:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f000 fa30 	bl	8005436 <lis2mdl_write_reg>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8004fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe0:	e0e9      	b.n	80051b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f103 0020 	add.w	r0, r3, #32
 8004fe8:	f107 021f 	add.w	r2, r7, #31
 8004fec:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	f000 fa20 	bl	8005436 <lis2mdl_write_reg>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8004ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8005000:	e0d9      	b.n	80051b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f103 0020 	add.w	r0, r3, #32
 8005008:	f107 020b 	add.w	r2, r7, #11
 800500c:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8005010:	2301      	movs	r3, #1
 8005012:	f000 fa10 	bl	8005436 <lis2mdl_write_reg>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 800501c:	f04f 33ff 	mov.w	r3, #4294967295
 8005020:	e0c9      	b.n	80051b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f103 0020 	add.w	r0, r3, #32
 8005028:	f107 021d 	add.w	r2, r7, #29
 800502c:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8005030:	2301      	movs	r3, #1
 8005032:	f000 fa00 	bl	8005436 <lis2mdl_write_reg>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 800503c:	f04f 33ff 	mov.w	r3, #4294967295
 8005040:	e0b9      	b.n	80051b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f103 0020 	add.w	r0, r3, #32
 8005048:	f107 021e 	add.w	r2, r7, #30
 800504c:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8005050:	2301      	movs	r3, #1
 8005052:	f000 f9f0 	bl	8005436 <lis2mdl_write_reg>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 800505c:	f04f 33ff 	mov.w	r3, #4294967295
 8005060:	e0a9      	b.n	80051b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f103 0020 	add.w	r0, r3, #32
 8005068:	f107 0220 	add.w	r2, r7, #32
 800506c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005070:	2301      	movs	r3, #1
 8005072:	f000 f9e0 	bl	8005436 <lis2mdl_write_reg>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 800507c:	f04f 33ff 	mov.w	r3, #4294967295
 8005080:	e099      	b.n	80051b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f103 0020 	add.w	r0, r3, #32
 8005088:	f107 021c 	add.w	r2, r7, #28
 800508c:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8005090:	2301      	movs	r3, #1
 8005092:	f000 f9b2 	bl	80053fa <lis2mdl_read_reg>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d002      	beq.n	80050a2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 800509c:	f04f 33ff 	mov.w	r3, #4294967295
 80050a0:	e089      	b.n	80051b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80050a2:	7f3b      	ldrb	r3, [r7, #28]
 80050a4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d102      	bne.n	80050b2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80050ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80050b0:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f103 0020 	add.w	r0, r3, #32
 80050b8:	f107 021c 	add.w	r2, r7, #28
 80050bc:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80050c0:	2301      	movs	r3, #1
 80050c2:	f000 f9b8 	bl	8005436 <lis2mdl_write_reg>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 80050cc:	f04f 33ff 	mov.w	r3, #4294967295
 80050d0:	e071      	b.n	80051b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f103 0020 	add.w	r0, r3, #32
 80050d8:	f107 0214 	add.w	r2, r7, #20
 80050dc:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80050e0:	2306      	movs	r3, #6
 80050e2:	f000 f98a 	bl	80053fa <lis2mdl_read_reg>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 80050ec:	f04f 33ff 	mov.w	r3, #4294967295
 80050f0:	e061      	b.n	80051b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f103 0020 	add.w	r0, r3, #32
 80050f8:	f107 021b 	add.w	r2, r7, #27
 80050fc:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8005100:	2301      	movs	r3, #1
 8005102:	f000 f97a 	bl	80053fa <lis2mdl_read_reg>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 800510c:	f04f 33ff 	mov.w	r3, #4294967295
 8005110:	e051      	b.n	80051b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8005112:	7efa      	ldrb	r2, [r7, #27]
 8005114:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005118:	4013      	ands	r3, r2
 800511a:	b2db      	uxtb	r3, r3
 800511c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8005120:	429a      	cmp	r2, r3
 8005122:	d1e6      	bne.n	80050f2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f103 0020 	add.w	r0, r3, #32
 800512a:	f107 021b 	add.w	r2, r7, #27
 800512e:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8005132:	2301      	movs	r3, #1
 8005134:	f000 f961 	bl	80053fa <lis2mdl_read_reg>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 800513e:	f04f 33ff 	mov.w	r3, #4294967295
 8005142:	e038      	b.n	80051b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8005144:	7efa      	ldrb	r2, [r7, #27]
 8005146:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800514a:	4013      	ands	r3, r2
 800514c:	b2db      	uxtb	r3, r3
 800514e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005152:	429a      	cmp	r2, r3
 8005154:	d1e6      	bne.n	8005124 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f103 0020 	add.w	r0, r3, #32
 800515c:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005160:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005164:	2301      	movs	r3, #1
 8005166:	f000 f966 	bl	8005436 <lis2mdl_write_reg>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8005170:	f04f 33ff 	mov.w	r3, #4294967295
 8005174:	e01f      	b.n	80051b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f103 0020 	add.w	r0, r3, #32
 800517c:	893b      	ldrh	r3, [r7, #8]
 800517e:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	f000 f939 	bl	80053fa <lis2mdl_read_reg>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 800518e:	f04f 33ff 	mov.w	r3, #4294967295
 8005192:	e010      	b.n	80051b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f103 0020 	add.w	r0, r3, #32
 800519a:	f107 0220 	add.w	r2, r7, #32
 800519e:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80051a2:	2301      	movs	r3, #1
 80051a4:	f000 f947 	bl	8005436 <lis2mdl_write_reg>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 80051ae:	f04f 33ff 	mov.w	r3, #4294967295
 80051b2:	e000      	b.n	80051b6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3730      	adds	r7, #48	@ 0x30
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b08c      	sub	sp, #48	@ 0x30
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	461a      	mov	r2, r3
 80051ca:	460b      	mov	r3, r1
 80051cc:	72fb      	strb	r3, [r7, #11]
 80051ce:	4613      	mov	r3, r2
 80051d0:	813b      	strh	r3, [r7, #8]
  (void)Length;
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80051d8:	2340      	movs	r3, #64	@ 0x40
 80051da:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80051de:	2300      	movs	r3, #0
 80051e0:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 80051e4:	233c      	movs	r3, #60	@ 0x3c
 80051e6:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80051e8:	2315      	movs	r3, #21
 80051ea:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 80051ee:	2316      	movs	r3, #22
 80051f0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 80051f4:	2317      	movs	r3, #23
 80051f6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 80051fe:	2314      	movs	r3, #20
 8005200:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005204:	2344      	movs	r3, #68	@ 0x44
 8005206:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8005208:	2339      	movs	r3, #57	@ 0x39
 800520a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 800520e:	2380      	movs	r3, #128	@ 0x80
 8005210:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8005214:	2329      	movs	r3, #41	@ 0x29
 8005216:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 800521a:	231e      	movs	r3, #30
 800521c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 8005220:	2301      	movs	r3, #1
 8005222:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005226:	2310      	movs	r3, #16
 8005228:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 800522c:	2300      	movs	r3, #0
 800522e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8005232:	2340      	movs	r3, #64	@ 0x40
 8005234:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8005238:	230e      	movs	r3, #14
 800523a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f103 0020 	add.w	r0, r3, #32
 8005244:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005248:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800524c:	2301      	movs	r3, #1
 800524e:	f000 f8f2 	bl	8005436 <lis2mdl_write_reg>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8005258:	f04f 33ff 	mov.w	r3, #4294967295
 800525c:	e0c9      	b.n	80053f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f103 0020 	add.w	r0, r3, #32
 8005264:	f107 021f 	add.w	r2, r7, #31
 8005268:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800526c:	2301      	movs	r3, #1
 800526e:	f000 f8e2 	bl	8005436 <lis2mdl_write_reg>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8005278:	f04f 33ff 	mov.w	r3, #4294967295
 800527c:	e0b9      	b.n	80053f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f103 0020 	add.w	r0, r3, #32
 8005284:	f107 020b 	add.w	r2, r7, #11
 8005288:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800528c:	2301      	movs	r3, #1
 800528e:	f000 f8d2 	bl	8005436 <lis2mdl_write_reg>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8005298:	f04f 33ff 	mov.w	r3, #4294967295
 800529c:	e0a9      	b.n	80053f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f103 0020 	add.w	r0, r3, #32
 80052a4:	f107 021e 	add.w	r2, r7, #30
 80052a8:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80052ac:	2301      	movs	r3, #1
 80052ae:	f000 f8c2 	bl	8005436 <lis2mdl_write_reg>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 80052b8:	f04f 33ff 	mov.w	r3, #4294967295
 80052bc:	e099      	b.n	80053f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f103 0020 	add.w	r0, r3, #32
 80052c4:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 80052c8:	2301      	movs	r3, #1
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	f000 f8b3 	bl	8005436 <lis2mdl_write_reg>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 80052d6:	f04f 33ff 	mov.w	r3, #4294967295
 80052da:	e08a      	b.n	80053f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f103 0020 	add.w	r0, r3, #32
 80052e2:	f107 021d 	add.w	r2, r7, #29
 80052e6:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 80052ea:	2301      	movs	r3, #1
 80052ec:	f000 f8a3 	bl	8005436 <lis2mdl_write_reg>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 80052f6:	f04f 33ff 	mov.w	r3, #4294967295
 80052fa:	e07a      	b.n	80053f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f103 0020 	add.w	r0, r3, #32
 8005302:	f107 0220 	add.w	r2, r7, #32
 8005306:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800530a:	2301      	movs	r3, #1
 800530c:	f000 f893 	bl	8005436 <lis2mdl_write_reg>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8005316:	f04f 33ff 	mov.w	r3, #4294967295
 800531a:	e06a      	b.n	80053f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f103 0020 	add.w	r0, r3, #32
 8005322:	f107 021c 	add.w	r2, r7, #28
 8005326:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 800532a:	2301      	movs	r3, #1
 800532c:	f000 f865 	bl	80053fa <lis2mdl_read_reg>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d002      	beq.n	800533c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8005336:	f04f 33ff 	mov.w	r3, #4294967295
 800533a:	e05a      	b.n	80053f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 800533c:	7f3b      	ldrb	r3, [r7, #28]
 800533e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005342:	429a      	cmp	r2, r3
 8005344:	d102      	bne.n	800534c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005346:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800534a:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f103 0020 	add.w	r0, r3, #32
 8005352:	f107 021c 	add.w	r2, r7, #28
 8005356:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 800535a:	2301      	movs	r3, #1
 800535c:	f000 f86b 	bl	8005436 <lis2mdl_write_reg>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8005366:	f04f 33ff 	mov.w	r3, #4294967295
 800536a:	e042      	b.n	80053f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f103 0020 	add.w	r0, r3, #32
 8005372:	f107 0214 	add.w	r2, r7, #20
 8005376:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 800537a:	2306      	movs	r3, #6
 800537c:	f000 f83d 	bl	80053fa <lis2mdl_read_reg>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8005386:	f04f 33ff 	mov.w	r3, #4294967295
 800538a:	e032      	b.n	80053f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f103 0020 	add.w	r0, r3, #32
 8005392:	f107 021b 	add.w	r2, r7, #27
 8005396:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800539a:	2301      	movs	r3, #1
 800539c:	f000 f82d 	bl	80053fa <lis2mdl_read_reg>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 80053a6:	f04f 33ff 	mov.w	r3, #4294967295
 80053aa:	e022      	b.n	80053f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 80053ac:	7efa      	ldrb	r2, [r7, #27]
 80053ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80053b2:	4013      	ands	r3, r2
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d1e6      	bne.n	800538c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f103 0020 	add.w	r0, r3, #32
 80053c4:	f107 021b 	add.w	r2, r7, #27
 80053c8:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 80053cc:	2301      	movs	r3, #1
 80053ce:	f000 f814 	bl	80053fa <lis2mdl_read_reg>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 80053d8:	f04f 33ff 	mov.w	r3, #4294967295
 80053dc:	e009      	b.n	80053f2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 80053de:	7efa      	ldrb	r2, [r7, #27]
 80053e0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80053e4:	4013      	ands	r3, r2
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d1e6      	bne.n	80053be <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3730      	adds	r7, #48	@ 0x30
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <lis2mdl_read_reg>:
  *
  */
int32_t __weak lis2mdl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80053fa:	b590      	push	{r4, r7, lr}
 80053fc:	b087      	sub	sp, #28
 80053fe:	af00      	add	r7, sp, #0
 8005400:	60f8      	str	r0, [r7, #12]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	461a      	mov	r2, r3
 8005406:	460b      	mov	r3, r1
 8005408:	72fb      	strb	r3, [r7, #11]
 800540a:	4613      	mov	r3, r2
 800540c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d102      	bne.n	800541a <lis2mdl_read_reg+0x20>
  {
    return -1;
 8005414:	f04f 33ff 	mov.w	r3, #4294967295
 8005418:	e009      	b.n	800542e <lis2mdl_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	685c      	ldr	r4, [r3, #4]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	68d8      	ldr	r0, [r3, #12]
 8005422:	893b      	ldrh	r3, [r7, #8]
 8005424:	7af9      	ldrb	r1, [r7, #11]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	47a0      	blx	r4
 800542a:	6178      	str	r0, [r7, #20]

  return ret;
 800542c:	697b      	ldr	r3, [r7, #20]
}
 800542e:	4618      	mov	r0, r3
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	bd90      	pop	{r4, r7, pc}

08005436 <lis2mdl_write_reg>:
  *
  */
int32_t __weak lis2mdl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8005436:	b590      	push	{r4, r7, lr}
 8005438:	b087      	sub	sp, #28
 800543a:	af00      	add	r7, sp, #0
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	461a      	mov	r2, r3
 8005442:	460b      	mov	r3, r1
 8005444:	72fb      	strb	r3, [r7, #11]
 8005446:	4613      	mov	r3, r2
 8005448:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d102      	bne.n	8005456 <lis2mdl_write_reg+0x20>
  {
    return -1;
 8005450:	f04f 33ff 	mov.w	r3, #4294967295
 8005454:	e009      	b.n	800546a <lis2mdl_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681c      	ldr	r4, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	68d8      	ldr	r0, [r3, #12]
 800545e:	893b      	ldrh	r3, [r7, #8]
 8005460:	7af9      	ldrb	r1, [r7, #11]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	47a0      	blx	r4
 8005466:	6178      	str	r0, [r7, #20]

  return ret;
 8005468:	697b      	ldr	r3, [r7, #20]
}
 800546a:	4618      	mov	r0, r3
 800546c:	371c      	adds	r7, #28
 800546e:	46bd      	mov	sp, r7
 8005470:	bd90      	pop	{r4, r7, pc}

08005472 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(const stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b084      	sub	sp, #16
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	460b      	mov	r3, r1
 800547c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800547e:	f107 0208 	add.w	r2, r7, #8
 8005482:	2301      	movs	r3, #1
 8005484:	2160      	movs	r1, #96	@ 0x60
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7ff ffb7 	bl	80053fa <lis2mdl_read_reg>
 800548c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10f      	bne.n	80054b4 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	b2da      	uxtb	r2, r3
 800549c:	7a3b      	ldrb	r3, [r7, #8]
 800549e:	f362 0301 	bfi	r3, r2, #0, #2
 80054a2:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80054a4:	f107 0208 	add.w	r2, r7, #8
 80054a8:	2301      	movs	r3, #1
 80054aa:	2160      	movs	r1, #96	@ 0x60
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff ffc2 	bl	8005436 <lis2mdl_write_reg>
 80054b2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80054b4:	68fb      	ldr	r3, [r7, #12]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(const stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	460b      	mov	r3, r1
 80054c8:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80054ca:	f107 0208 	add.w	r2, r7, #8
 80054ce:	2301      	movs	r3, #1
 80054d0:	2160      	movs	r1, #96	@ 0x60
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff ff91 	bl	80053fa <lis2mdl_read_reg>
 80054d8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10f      	bne.n	8005500 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80054e0:	78fb      	ldrb	r3, [r7, #3]
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	7a3b      	ldrb	r3, [r7, #8]
 80054ea:	f362 0383 	bfi	r3, r2, #2, #2
 80054ee:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80054f0:	f107 0208 	add.w	r2, r7, #8
 80054f4:	2301      	movs	r3, #1
 80054f6:	2160      	movs	r1, #96	@ 0x60
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff ff9c 	bl	8005436 <lis2mdl_write_reg>
 80054fe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005500:	68fb      	ldr	r3, [r7, #12]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(const stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005516:	f107 0208 	add.w	r2, r7, #8
 800551a:	2301      	movs	r3, #1
 800551c:	2160      	movs	r1, #96	@ 0x60
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff ff6b 	bl	80053fa <lis2mdl_read_reg>
 8005524:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8005526:	7a3b      	ldrb	r3, [r7, #8]
 8005528:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b03      	cmp	r3, #3
 8005530:	d81a      	bhi.n	8005568 <lis2mdl_data_rate_get+0x5c>
 8005532:	a201      	add	r2, pc, #4	@ (adr r2, 8005538 <lis2mdl_data_rate_get+0x2c>)
 8005534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005538:	08005549 	.word	0x08005549
 800553c:	08005551 	.word	0x08005551
 8005540:	08005559 	.word	0x08005559
 8005544:	08005561 	.word	0x08005561
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2200      	movs	r2, #0
 800554c:	701a      	strb	r2, [r3, #0]
      break;
 800554e:	e00f      	b.n	8005570 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2201      	movs	r2, #1
 8005554:	701a      	strb	r2, [r3, #0]
      break;
 8005556:	e00b      	b.n	8005570 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	2202      	movs	r2, #2
 800555c:	701a      	strb	r2, [r3, #0]
      break;
 800555e:	e007      	b.n	8005570 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	2203      	movs	r2, #3
 8005564:	701a      	strb	r2, [r3, #0]
      break;
 8005566:	e003      	b.n	8005570 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]
      break;
 800556e:	bf00      	nop
  }

  return ret;
 8005570:	68fb      	ldr	r3, [r7, #12]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop

0800557c <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005588:	f107 0208 	add.w	r2, r7, #8
 800558c:	2301      	movs	r3, #1
 800558e:	2162      	movs	r1, #98	@ 0x62
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f7ff ff32 	bl	80053fa <lis2mdl_read_reg>
 8005596:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10f      	bne.n	80055be <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800559e:	78fb      	ldrb	r3, [r7, #3]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	7a3b      	ldrb	r3, [r7, #8]
 80055a8:	f362 1304 	bfi	r3, r2, #4, #1
 80055ac:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80055ae:	f107 0208 	add.w	r2, r7, #8
 80055b2:	2301      	movs	r3, #1
 80055b4:	2162      	movs	r1, #98	@ 0x62
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7ff ff3d 	bl	8005436 <lis2mdl_write_reg>
 80055bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055be:	68fb      	ldr	r3, [r7, #12]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80055d2:	f107 020c 	add.w	r2, r7, #12
 80055d6:	2306      	movs	r3, #6
 80055d8:	2168      	movs	r1, #104	@ 0x68
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff ff0d 	bl	80053fa <lis2mdl_read_reg>
 80055e0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80055e2:	7b7b      	ldrb	r3, [r7, #13]
 80055e4:	b21a      	sxth	r2, r3
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	7b3a      	ldrb	r2, [r7, #12]
 80055f8:	4413      	add	r3, r2
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	b21a      	sxth	r2, r3
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005602:	7bfa      	ldrb	r2, [r7, #15]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	3302      	adds	r3, #2
 8005608:	b212      	sxth	r2, r2
 800560a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	3302      	adds	r3, #2
 8005610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005614:	b29b      	uxth	r3, r3
 8005616:	021b      	lsls	r3, r3, #8
 8005618:	b29b      	uxth	r3, r3
 800561a:	7bba      	ldrb	r2, [r7, #14]
 800561c:	4413      	add	r3, r2
 800561e:	b29a      	uxth	r2, r3
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	3302      	adds	r3, #2
 8005624:	b212      	sxth	r2, r2
 8005626:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005628:	7c7a      	ldrb	r2, [r7, #17]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	3304      	adds	r3, #4
 800562e:	b212      	sxth	r2, r2
 8005630:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	3304      	adds	r3, #4
 8005636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800563a:	b29b      	uxth	r3, r3
 800563c:	021b      	lsls	r3, r3, #8
 800563e:	b29b      	uxth	r3, r3
 8005640:	7c3a      	ldrb	r2, [r7, #16]
 8005642:	4413      	add	r3, r2
 8005644:	b29a      	uxth	r2, r3
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	3304      	adds	r3, #4
 800564a:	b212      	sxth	r2, r2
 800564c:	801a      	strh	r2, [r3, #0]

  return ret;
 800564e:	697b      	ldr	r3, [r7, #20]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005662:	2301      	movs	r3, #1
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	214f      	movs	r1, #79	@ 0x4f
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff fec6 	bl	80053fa <lis2mdl_read_reg>
 800566e:	60f8      	str	r0, [r7, #12]

  return ret;
 8005670:	68fb      	ldr	r3, [r7, #12]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b084      	sub	sp, #16
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	460b      	mov	r3, r1
 8005684:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005686:	f107 0208 	add.w	r2, r7, #8
 800568a:	2301      	movs	r3, #1
 800568c:	2162      	movs	r1, #98	@ 0x62
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7ff feb3 	bl	80053fa <lis2mdl_read_reg>
 8005694:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10f      	bne.n	80056bc <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	7a3b      	ldrb	r3, [r7, #8]
 80056a6:	f362 0341 	bfi	r3, r2, #1, #1
 80056aa:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80056ac:	f107 0208 	add.w	r2, r7, #8
 80056b0:	2301      	movs	r3, #1
 80056b2:	2162      	movs	r1, #98	@ 0x62
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff febe 	bl	8005436 <lis2mdl_write_reg>
 80056ba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80056bc:	68fb      	ldr	r3, [r7, #12]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(const stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	460b      	mov	r3, r1
 80056d0:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80056d2:	f107 0208 	add.w	r2, r7, #8
 80056d6:	2301      	movs	r3, #1
 80056d8:	2162      	movs	r1, #98	@ 0x62
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7ff fe8d 	bl	80053fa <lis2mdl_read_reg>
 80056e0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10f      	bne.n	8005708 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	7a3b      	ldrb	r3, [r7, #8]
 80056f2:	f362 1345 	bfi	r3, r2, #5, #1
 80056f6:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80056f8:	f107 0208 	add.w	r2, r7, #8
 80056fc:	2301      	movs	r3, #1
 80056fe:	2162      	movs	r1, #98	@ 0x62
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff fe98 	bl	8005436 <lis2mdl_write_reg>
 8005706:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005708:	68fb      	ldr	r3, [r7, #12]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
	...

08005714 <LPS22DF_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_RegisterBusIO(LPS22DF_Object_t *pObj, LPS22DF_IO_t *pIO)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d103      	bne.n	8005730 <LPS22DF_RegisterBusIO+0x1c>
  {
    ret = LPS22DF_ERROR;
 8005728:	f04f 33ff 	mov.w	r3, #4294967295
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	e051      	b.n	80057d4 <LPS22DF_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	7b1a      	ldrb	r2, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	699a      	ldr	r2, [r3, #24]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a1d      	ldr	r2, [pc, #116]	@ (80057e0 <LPS22DF_RegisterBusIO+0xcc>)
 800576c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a1c      	ldr	r2, [pc, #112]	@ (80057e4 <LPS22DF_RegisterBusIO+0xd0>)
 8005772:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d103      	bne.n	8005792 <LPS22DF_RegisterBusIO+0x7e>
    {
      ret = LPS22DF_ERROR;
 800578a:	f04f 33ff 	mov.w	r3, #4294967295
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	e020      	b.n	80057d4 <LPS22DF_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22DF_OK)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4798      	blx	r3
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <LPS22DF_RegisterBusIO+0x92>
    {
      ret = LPS22DF_ERROR;
 800579e:	f04f 33ff 	mov.w	r3, #4294967295
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	e016      	b.n	80057d4 <LPS22DF_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d112      	bne.n	80057d4 <LPS22DF_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10d      	bne.n	80057d4 <LPS22DF_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x20;
 80057b8:	2320      	movs	r3, #32
 80057ba:	72fb      	strb	r3, [r7, #11]

          if (LPS22DF_Write_Reg(pObj, LPS22DF_IF_CTRL, data) != LPS22DF_OK)
 80057bc:	7afb      	ldrb	r3, [r7, #11]
 80057be:	461a      	mov	r2, r3
 80057c0:	210e      	movs	r1, #14
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f9f3 	bl	8005bae <LPS22DF_Write_Reg>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <LPS22DF_RegisterBusIO+0xc0>
          {
            ret = LPS22DF_ERROR;
 80057ce:	f04f 33ff 	mov.w	r3, #4294967295
 80057d2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80057d4:	68fb      	ldr	r3, [r7, #12]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	08005f51 	.word	0x08005f51
 80057e4:	08005f87 	.word	0x08005f87

080057e8 <LPS22DF_Init>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Init(LPS22DF_Object_t *pObj)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d108      	bne.n	800580c <LPS22DF_Init+0x24>
  {
    if (LPS22DF_Initialize(pObj) != LPS22DF_OK)
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fb4c 	bl	8005e98 <LPS22DF_Initialize>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d002      	beq.n	800580c <LPS22DF_Init+0x24>
    {
      return LPS22DF_ERROR;
 8005806:	f04f 33ff 	mov.w	r3, #4294967295
 800580a:	e004      	b.n	8005816 <LPS22DF_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <LPS22DF_DeInit>:
  * @brief  Deinitialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_DeInit(LPS22DF_Object_t *pObj)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b082      	sub	sp, #8
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800582c:	2b01      	cmp	r3, #1
 800582e:	d111      	bne.n	8005854 <LPS22DF_DeInit+0x36>
  {
    if (LPS22DF_PRESS_Disable(pObj) != LPS22DF_OK)
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f882 	bl	800593a <LPS22DF_PRESS_Disable>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <LPS22DF_DeInit+0x24>
    {
      return LPS22DF_ERROR;
 800583c:	f04f 33ff 	mov.w	r3, #4294967295
 8005840:	e00d      	b.n	800585e <LPS22DF_DeInit+0x40>
    }

    if (LPS22DF_TEMP_Disable(pObj) != LPS22DF_OK)
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f927 	bl	8005a96 <LPS22DF_TEMP_Disable>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <LPS22DF_DeInit+0x36>
    {
      return LPS22DF_ERROR;
 800584e:	f04f 33ff 	mov.w	r3, #4294967295
 8005852:	e004      	b.n	800585e <LPS22DF_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <LPS22DF_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_ReadID(LPS22DF_Object_t *pObj, uint8_t *Id)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	6039      	str	r1, [r7, #0]
  lps22df_id_t val;
  if (lps22df_id_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3320      	adds	r3, #32
 8005874:	f107 020c 	add.w	r2, r7, #12
 8005878:	4611      	mov	r1, r2
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fc22 	bl	80060c4 <lps22df_id_get>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <LPS22DF_ReadID+0x26>
  {
    return LPS22DF_ERROR;
 8005886:	f04f 33ff 	mov.w	r3, #4294967295
 800588a:	e003      	b.n	8005894 <LPS22DF_ReadID+0x2e>
  }

  *Id = val.whoami;
 800588c:	7b3a      	ldrb	r2, [r7, #12]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	701a      	strb	r2, [r3, #0]

  return LPS22DF_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <LPS22DF_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22DF sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_GetCapabilities(LPS22DF_Object_t *pObj, LPS22DF_Capabilities_t *Capabilities)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2200      	movs	r2, #0
 80058aa:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2201      	movs	r2, #1
 80058b0:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2201      	movs	r2, #1
 80058b6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2200      	movs	r2, #0
 80058bc:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2200      	movs	r2, #0
 80058c2:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	f04f 0200 	mov.w	r2, #0
 80058ca:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	4a08      	ldr	r2, [pc, #32]	@ (80058f0 <LPS22DF_GetCapabilities+0x54>)
 80058d0:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	4a06      	ldr	r2, [pc, #24]	@ (80058f0 <LPS22DF_GetCapabilities+0x54>)
 80058d6:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	f04f 0200 	mov.w	r2, #0
 80058de:	615a      	str	r2, [r3, #20]
  return LPS22DF_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	43480000 	.word	0x43480000

080058f4 <LPS22DF_PRESS_Enable>:
  * @brief  Enable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Enable(LPS22DF_Object_t *pObj)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005902:	2b01      	cmp	r3, #1
 8005904:	d101      	bne.n	800590a <LPS22DF_PRESS_Enable+0x16>
  {
    return LPS22DF_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	e013      	b.n	8005932 <LPS22DF_PRESS_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f103 0220 	add.w	r2, r3, #32
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3333      	adds	r3, #51	@ 0x33
 8005914:	4619      	mov	r1, r3
 8005916:	4610      	mov	r0, r2
 8005918:	f000 fdb2 	bl	8006480 <lps22df_mode_set>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <LPS22DF_PRESS_Enable+0x34>
  {
    return LPS22DF_ERROR;
 8005922:	f04f 33ff 	mov.w	r3, #4294967295
 8005926:	e004      	b.n	8005932 <LPS22DF_PRESS_Enable+0x3e>
  }

  pObj->press_is_enabled = 1;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <LPS22DF_PRESS_Disable>:
  * @brief  Disable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Disable(LPS22DF_Object_t *pObj)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <LPS22DF_PRESS_Disable+0x16>
  {
    return LPS22DF_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	e030      	b.n	80059b2 <LPS22DF_PRESS_Disable+0x78>
  }

  /* Check if the LPS22DF temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005956:	2b00      	cmp	r3, #0
 8005958:	d126      	bne.n	80059a8 <LPS22DF_PRESS_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3320      	adds	r3, #32
 800595e:	f107 020c 	add.w	r2, r7, #12
 8005962:	4611      	mov	r1, r2
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fde9 	bl	800653c <lps22df_mode_get>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d002      	beq.n	8005976 <LPS22DF_PRESS_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 8005970:	f04f 33ff 	mov.w	r3, #4294967295
 8005974:	e01d      	b.n	80059b2 <LPS22DF_PRESS_Disable+0x78>
    }

    (void)memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3333      	adds	r3, #51	@ 0x33
 800597a:	461a      	mov	r2, r3
 800597c:	f107 030c 	add.w	r3, r7, #12
 8005980:	8819      	ldrh	r1, [r3, #0]
 8005982:	789b      	ldrb	r3, [r3, #2]
 8005984:	8011      	strh	r1, [r2, #0]
 8005986:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 8005988:	2300      	movs	r3, #0
 800598a:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3320      	adds	r3, #32
 8005990:	f107 020c 	add.w	r2, r7, #12
 8005994:	4611      	mov	r1, r2
 8005996:	4618      	mov	r0, r3
 8005998:	f000 fd72 	bl	8006480 <lps22df_mode_set>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <LPS22DF_PRESS_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 80059a2:	f04f 33ff 	mov.w	r3, #4294967295
 80059a6:	e004      	b.n	80059b2 <LPS22DF_PRESS_Disable+0x78>
    }
  }

  pObj->press_is_enabled = 0;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <LPS22DF_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b082      	sub	sp, #8
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 80059c4:	6839      	ldr	r1, [r7, #0]
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f90c 	bl	8005be4 <LPS22DF_GetOutputDataRate>
 80059cc:	4603      	mov	r3, r0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <LPS22DF_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_SetOutputDataRate(LPS22DF_Object_t *pObj, float_t Odr)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b082      	sub	sp, #8
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d106      	bne.n	80059fa <LPS22DF_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 80059ec:	ed97 0a00 	vldr	s0, [r7]
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f961 	bl	8005cb8 <LPS22DF_SetOutputDataRate_When_Enabled>
 80059f6:	4603      	mov	r3, r0
 80059f8:	e005      	b.n	8005a06 <LPS22DF_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 80059fa:	ed97 0a00 	vldr	s0, [r7]
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f9e6 	bl	8005dd0 <LPS22DF_SetOutputDataRate_When_Disabled>
 8005a04:	4603      	mov	r3, r0
  }
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <LPS22DF_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetPressure(LPS22DF_Object_t *pObj, float_t *Value)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6039      	str	r1, [r7, #0]
  uint32_t pressure_raw;

  if (lps22df_pressure_raw_get(&(pObj->Ctx), &pressure_raw) != LPS22DF_OK)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3320      	adds	r3, #32
 8005a1c:	f107 020c 	add.w	r2, r7, #12
 8005a20:	4611      	mov	r1, r2
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 fe56 	bl	80066d4 <lps22df_pressure_raw_get>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <LPS22DF_PRESS_GetPressure+0x26>
  {
    return LPS22DF_ERROR;
 8005a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a32:	e009      	b.n	8005a48 <LPS22DF_PRESS_GetPressure+0x3a>
  }

  *Value = lps22df_from_lsb_to_hPa((int32_t)pressure_raw);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fb12 	bl	8006060 <lps22df_from_lsb_to_hPa>
 8005a3c:	eef0 7a40 	vmov.f32	s15, s0
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	edc3 7a00 	vstr	s15, [r3]

  return LPS22DF_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <LPS22DF_TEMP_Enable>:
  * @brief  Enable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Enable(LPS22DF_Object_t *pObj)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <LPS22DF_TEMP_Enable+0x16>
  {
    return LPS22DF_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	e013      	b.n	8005a8e <LPS22DF_TEMP_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f103 0220 	add.w	r2, r3, #32
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3333      	adds	r3, #51	@ 0x33
 8005a70:	4619      	mov	r1, r3
 8005a72:	4610      	mov	r0, r2
 8005a74:	f000 fd04 	bl	8006480 <lps22df_mode_set>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <LPS22DF_TEMP_Enable+0x34>
  {
    return LPS22DF_ERROR;
 8005a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a82:	e004      	b.n	8005a8e <LPS22DF_TEMP_Enable+0x3e>
  }

  pObj->temp_is_enabled = 1;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <LPS22DF_TEMP_Disable>:
  * @brief  Disable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Disable(LPS22DF_Object_t *pObj)
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b084      	sub	sp, #16
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <LPS22DF_TEMP_Disable+0x16>
  {
    return LPS22DF_OK;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	e030      	b.n	8005b0e <LPS22DF_TEMP_Disable+0x78>
  }

  /* Check if the LPS22DF pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d126      	bne.n	8005b04 <LPS22DF_TEMP_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3320      	adds	r3, #32
 8005aba:	f107 020c 	add.w	r2, r7, #12
 8005abe:	4611      	mov	r1, r2
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 fd3b 	bl	800653c <lps22df_mode_get>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <LPS22DF_TEMP_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 8005acc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad0:	e01d      	b.n	8005b0e <LPS22DF_TEMP_Disable+0x78>
    }

    (void)memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3333      	adds	r3, #51	@ 0x33
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f107 030c 	add.w	r3, r7, #12
 8005adc:	8819      	ldrh	r1, [r3, #0]
 8005ade:	789b      	ldrb	r3, [r3, #2]
 8005ae0:	8011      	strh	r1, [r2, #0]
 8005ae2:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3320      	adds	r3, #32
 8005aec:	f107 020c 	add.w	r2, r7, #12
 8005af0:	4611      	mov	r1, r2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fcc4 	bl	8006480 <lps22df_mode_set>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <LPS22DF_TEMP_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 8005afe:	f04f 33ff 	mov.w	r3, #4294967295
 8005b02:	e004      	b.n	8005b0e <LPS22DF_TEMP_Disable+0x78>
    }
  }

  pObj->temp_is_enabled = 0;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <LPS22DF_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b082      	sub	sp, #8
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f85e 	bl	8005be4 <LPS22DF_GetOutputDataRate>
 8005b28:	4603      	mov	r3, r0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <LPS22DF_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_SetOutputDataRate(LPS22DF_Object_t *pObj, float_t Odr)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b082      	sub	sp, #8
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d106      	bne.n	8005b56 <LPS22DF_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005b48:	ed97 0a00 	vldr	s0, [r7]
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f8b3 	bl	8005cb8 <LPS22DF_SetOutputDataRate_When_Enabled>
 8005b52:	4603      	mov	r3, r0
 8005b54:	e005      	b.n	8005b62 <LPS22DF_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005b56:	ed97 0a00 	vldr	s0, [r7]
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f938 	bl	8005dd0 <LPS22DF_SetOutputDataRate_When_Disabled>
 8005b60:	4603      	mov	r3, r0
  }
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <LPS22DF_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetTemperature(LPS22DF_Object_t *pObj, float_t *Value)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	6039      	str	r1, [r7, #0]
  int16_t temperature_raw;

  if (lps22df_temperature_raw_get(&(pObj->Ctx), &temperature_raw) != LPS22DF_OK)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3320      	adds	r3, #32
 8005b78:	f107 020e 	add.w	r2, r7, #14
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fdd1 	bl	8006726 <lps22df_temperature_raw_get>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <LPS22DF_TEMP_GetTemperature+0x26>
  {
    return LPS22DF_ERROR;
 8005b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b8e:	e00a      	b.n	8005ba6 <LPS22DF_TEMP_GetTemperature+0x3c>
  }

  *Value = lps22df_from_lsb_to_celsius(temperature_raw);
 8005b90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 fa7b 	bl	8006090 <lps22df_from_lsb_to_celsius>
 8005b9a:	eef0 7a40 	vmov.f32	s15, s0
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	edc3 7a00 	vstr	s15, [r3]

  return LPS22DF_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <LPS22DF_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Write_Reg(LPS22DF_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	70fb      	strb	r3, [r7, #3]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	70bb      	strb	r3, [r7, #2]
  if (lps22df_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22DF_OK)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f103 0020 	add.w	r0, r3, #32
 8005bc4:	1cba      	adds	r2, r7, #2
 8005bc6:	78f9      	ldrb	r1, [r7, #3]
 8005bc8:	2301      	movs	r3, #1
 8005bca:	f000 fa15 	bl	8005ff8 <lps22df_write_reg>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <LPS22DF_Write_Reg+0x2c>
  {
    return LPS22DF_ERROR;
 8005bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd8:	e000      	b.n	8005bdc <LPS22DF_Write_Reg+0x2e>
  }

  return LPS22DF_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <LPS22DF_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
  lps22df_md_t val;

  if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3320      	adds	r3, #32
 8005bf6:	f107 0208 	add.w	r2, r7, #8
 8005bfa:	4611      	mov	r1, r2
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f000 fc9d 	bl	800653c <lps22df_mode_get>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <LPS22DF_GetOutputDataRate+0x2a>
  {
    return LPS22DF_ERROR;
 8005c08:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0c:	e044      	b.n	8005c98 <LPS22DF_GetOutputDataRate+0xb4>
  }

  switch (val.odr)
 8005c0e:	7a3b      	ldrb	r3, [r7, #8]
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d83c      	bhi.n	8005c8e <LPS22DF_GetOutputDataRate+0xaa>
 8005c14:	a201      	add	r2, pc, #4	@ (adr r2, 8005c1c <LPS22DF_GetOutputDataRate+0x38>)
 8005c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1a:	bf00      	nop
 8005c1c:	08005c41 	.word	0x08005c41
 8005c20:	08005c4b 	.word	0x08005c4b
 8005c24:	08005c55 	.word	0x08005c55
 8005c28:	08005c5f 	.word	0x08005c5f
 8005c2c:	08005c67 	.word	0x08005c67
 8005c30:	08005c6f 	.word	0x08005c6f
 8005c34:	08005c77 	.word	0x08005c77
 8005c38:	08005c7f 	.word	0x08005c7f
 8005c3c:	08005c87 	.word	0x08005c87
  {
    case LPS22DF_ONE_SHOT:
      *Odr = 0.0f;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]
      break;
 8005c48:	e025      	b.n	8005c96 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_1Hz:
      *Odr = 1.0f;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005c50:	601a      	str	r2, [r3, #0]
      break;
 8005c52:	e020      	b.n	8005c96 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_4Hz:
      *Odr = 4.0f;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8005c5a:	601a      	str	r2, [r3, #0]
      break;
 8005c5c:	e01b      	b.n	8005c96 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_10Hz:
      *Odr = 10.0f;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	4a0f      	ldr	r2, [pc, #60]	@ (8005ca0 <LPS22DF_GetOutputDataRate+0xbc>)
 8005c62:	601a      	str	r2, [r3, #0]
      break;
 8005c64:	e017      	b.n	8005c96 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_25Hz:
      *Odr = 25.0f;
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	4a0e      	ldr	r2, [pc, #56]	@ (8005ca4 <LPS22DF_GetOutputDataRate+0xc0>)
 8005c6a:	601a      	str	r2, [r3, #0]
      break;
 8005c6c:	e013      	b.n	8005c96 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_50Hz:
      *Odr = 50.0f;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	4a0d      	ldr	r2, [pc, #52]	@ (8005ca8 <LPS22DF_GetOutputDataRate+0xc4>)
 8005c72:	601a      	str	r2, [r3, #0]
      break;
 8005c74:	e00f      	b.n	8005c96 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_75Hz:
      *Odr = 75.0f;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	4a0c      	ldr	r2, [pc, #48]	@ (8005cac <LPS22DF_GetOutputDataRate+0xc8>)
 8005c7a:	601a      	str	r2, [r3, #0]
      break;
 8005c7c:	e00b      	b.n	8005c96 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_100Hz:
      *Odr = 100.0f;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	4a0b      	ldr	r2, [pc, #44]	@ (8005cb0 <LPS22DF_GetOutputDataRate+0xcc>)
 8005c82:	601a      	str	r2, [r3, #0]
      break;
 8005c84:	e007      	b.n	8005c96 <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_200Hz:
      *Odr = 200.0f;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	4a0a      	ldr	r2, [pc, #40]	@ (8005cb4 <LPS22DF_GetOutputDataRate+0xd0>)
 8005c8a:	601a      	str	r2, [r3, #0]
      break;
 8005c8c:	e003      	b.n	8005c96 <LPS22DF_GetOutputDataRate+0xb2>

    default:
      ret = LPS22DF_ERROR;
 8005c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c92:	60fb      	str	r3, [r7, #12]
      break;
 8005c94:	bf00      	nop
  }

  return ret;
 8005c96:	68fb      	ldr	r3, [r7, #12]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	41200000 	.word	0x41200000
 8005ca4:	41c80000 	.word	0x41c80000
 8005ca8:	42480000 	.word	0x42480000
 8005cac:	42960000 	.word	0x42960000
 8005cb0:	42c80000 	.word	0x42c80000
 8005cb4:	43480000 	.word	0x43480000

08005cb8 <LPS22DF_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Enabled(LPS22DF_Object_t *pObj, float_t Odr)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	ed87 0a00 	vstr	s0, [r7]
  lps22df_md_t new_val;

  if (lps22df_mode_get(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3320      	adds	r3, #32
 8005cc8:	f107 020c 	add.w	r2, r7, #12
 8005ccc:	4611      	mov	r1, r2
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 fc34 	bl	800653c <lps22df_mode_get>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <LPS22DF_SetOutputDataRate_When_Enabled+0x28>
  {
    return LPS22DF_ERROR;
 8005cda:	f04f 33ff 	mov.w	r3, #4294967295
 8005cde:	e06c      	b.n	8005dba <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                : (Odr <=   4.0f) ? LPS22DF_4Hz
 8005ce0:	edd7 7a00 	vldr	s15, [r7]
 8005ce4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf0:	d801      	bhi.n	8005cf6 <LPS22DF_SetOutputDataRate_When_Enabled+0x3e>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e042      	b.n	8005d7c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005cf6:	edd7 7a00 	vldr	s15, [r7]
 8005cfa:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005cfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d06:	d801      	bhi.n	8005d0c <LPS22DF_SetOutputDataRate_When_Enabled+0x54>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	e037      	b.n	8005d7c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005d0c:	edd7 7a00 	vldr	s15, [r7]
 8005d10:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005d14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d1c:	d801      	bhi.n	8005d22 <LPS22DF_SetOutputDataRate_When_Enabled+0x6a>
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e02c      	b.n	8005d7c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005d22:	edd7 7a00 	vldr	s15, [r7]
 8005d26:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8005d2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d32:	d801      	bhi.n	8005d38 <LPS22DF_SetOutputDataRate_When_Enabled+0x80>
 8005d34:	2304      	movs	r3, #4
 8005d36:	e021      	b.n	8005d7c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005d38:	edd7 7a00 	vldr	s15, [r7]
 8005d3c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005dc4 <LPS22DF_SetOutputDataRate_When_Enabled+0x10c>
 8005d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d48:	d801      	bhi.n	8005d4e <LPS22DF_SetOutputDataRate_When_Enabled+0x96>
 8005d4a:	2305      	movs	r3, #5
 8005d4c:	e016      	b.n	8005d7c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005d4e:	edd7 7a00 	vldr	s15, [r7]
 8005d52:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005dc8 <LPS22DF_SetOutputDataRate_When_Enabled+0x110>
 8005d56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d5e:	d801      	bhi.n	8005d64 <LPS22DF_SetOutputDataRate_When_Enabled+0xac>
 8005d60:	2306      	movs	r3, #6
 8005d62:	e00b      	b.n	8005d7c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005d64:	edd7 7a00 	vldr	s15, [r7]
 8005d68:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8005dcc <LPS22DF_SetOutputDataRate_When_Enabled+0x114>
 8005d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d74:	d801      	bhi.n	8005d7a <LPS22DF_SetOutputDataRate_When_Enabled+0xc2>
 8005d76:	2307      	movs	r3, #7
 8005d78:	e000      	b.n	8005d7c <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005d7a:	2308      	movs	r3, #8
  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8005d7c:	733b      	strb	r3, [r7, #12]
                : (Odr <=  50.0f) ? LPS22DF_50Hz
                : (Odr <=  75.0f) ? LPS22DF_75Hz
                : (Odr <= 100.0f) ? LPS22DF_100Hz
                :                   LPS22DF_200Hz;

  if (lps22df_mode_set(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3320      	adds	r3, #32
 8005d82:	f107 020c 	add.w	r2, r7, #12
 8005d86:	4611      	mov	r1, r2
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f000 fb79 	bl	8006480 <lps22df_mode_set>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <LPS22DF_SetOutputDataRate_When_Enabled+0xe2>
  {
    return LPS22DF_ERROR;
 8005d94:	f04f 33ff 	mov.w	r3, #4294967295
 8005d98:	e00f      	b.n	8005dba <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f103 0220 	add.w	r2, r3, #32
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3333      	adds	r3, #51	@ 0x33
 8005da4:	4619      	mov	r1, r3
 8005da6:	4610      	mov	r0, r2
 8005da8:	f000 fbc8 	bl	800653c <lps22df_mode_get>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <LPS22DF_SetOutputDataRate_When_Enabled+0x100>
  {
    return LPS22DF_ERROR;
 8005db2:	f04f 33ff 	mov.w	r3, #4294967295
 8005db6:	e000      	b.n	8005dba <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  return LPS22DF_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	42480000 	.word	0x42480000
 8005dc8:	42960000 	.word	0x42960000
 8005dcc:	42c80000 	.word	0x42c80000

08005dd0 <LPS22DF_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Disabled(LPS22DF_Object_t *pObj, float_t Odr)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                       : (Odr <=   4.0f) ? LPS22DF_4Hz
 8005ddc:	edd7 7a00 	vldr	s15, [r7]
 8005de0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dec:	d801      	bhi.n	8005df2 <LPS22DF_SetOutputDataRate_When_Disabled+0x22>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e042      	b.n	8005e78 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005df2:	edd7 7a00 	vldr	s15, [r7]
 8005df6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e02:	d801      	bhi.n	8005e08 <LPS22DF_SetOutputDataRate_When_Disabled+0x38>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e037      	b.n	8005e78 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005e08:	edd7 7a00 	vldr	s15, [r7]
 8005e0c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005e10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e18:	d801      	bhi.n	8005e1e <LPS22DF_SetOutputDataRate_When_Disabled+0x4e>
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e02c      	b.n	8005e78 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005e1e:	edd7 7a00 	vldr	s15, [r7]
 8005e22:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8005e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e2e:	d801      	bhi.n	8005e34 <LPS22DF_SetOutputDataRate_When_Disabled+0x64>
 8005e30:	2304      	movs	r3, #4
 8005e32:	e021      	b.n	8005e78 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005e34:	edd7 7a00 	vldr	s15, [r7]
 8005e38:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005e8c <LPS22DF_SetOutputDataRate_When_Disabled+0xbc>
 8005e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e44:	d801      	bhi.n	8005e4a <LPS22DF_SetOutputDataRate_When_Disabled+0x7a>
 8005e46:	2305      	movs	r3, #5
 8005e48:	e016      	b.n	8005e78 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005e4a:	edd7 7a00 	vldr	s15, [r7]
 8005e4e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8005e90 <LPS22DF_SetOutputDataRate_When_Disabled+0xc0>
 8005e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e5a:	d801      	bhi.n	8005e60 <LPS22DF_SetOutputDataRate_When_Disabled+0x90>
 8005e5c:	2306      	movs	r3, #6
 8005e5e:	e00b      	b.n	8005e78 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005e60:	edd7 7a00 	vldr	s15, [r7]
 8005e64:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8005e94 <LPS22DF_SetOutputDataRate_When_Disabled+0xc4>
 8005e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e70:	d801      	bhi.n	8005e76 <LPS22DF_SetOutputDataRate_When_Disabled+0xa6>
 8005e72:	2307      	movs	r3, #7
 8005e74:	e000      	b.n	8005e78 <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005e76:	2308      	movs	r3, #8
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                       : (Odr <=  50.0f) ? LPS22DF_50Hz
                       : (Odr <=  75.0f) ? LPS22DF_75Hz
                       : (Odr <= 100.0f) ? LPS22DF_100Hz
                       :                   LPS22DF_200Hz;

  return LPS22DF_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	42480000 	.word	0x42480000
 8005e90:	42960000 	.word	0x42960000
 8005e94:	42c80000 	.word	0x42c80000

08005e98 <LPS22DF_Initialize>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_Initialize(LPS22DF_Object_t *pObj)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  lps22df_md_t md;
  lps22df_bus_mode_t bus_mode;

  /* Set bdu and if_inc recommended for driver usage */
  if (lps22df_init_set(&(pObj->Ctx), LPS22DF_DRV_RDY) != LPS22DF_OK)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3320      	adds	r3, #32
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 f983 	bl	80061b2 <lps22df_init_set>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <LPS22DF_Initialize+0x20>
  {
    return LPS22DF_ERROR;
 8005eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb6:	e047      	b.n	8005f48 <LPS22DF_Initialize+0xb0>
  }

  /* Select bus interface */
  if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d102      	bne.n	8005ec6 <LPS22DF_Initialize+0x2e>
  {
    bus_mode.interface = LPS22DF_SPI_3W;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	723b      	strb	r3, [r7, #8]
 8005ec4:	e008      	b.n	8005ed8 <LPS22DF_Initialize+0x40>
  }
  else if (pObj->IO.BusType == LPS22DF_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d102      	bne.n	8005ed4 <LPS22DF_Initialize+0x3c>
  {
    bus_mode.interface = LPS22DF_SPI_4W;
 8005ece:	2302      	movs	r3, #2
 8005ed0:	723b      	strb	r3, [r7, #8]
 8005ed2:	e001      	b.n	8005ed8 <LPS22DF_Initialize+0x40>
  }
  else
  {
    bus_mode.interface = LPS22DF_SEL_BY_HW;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	723b      	strb	r3, [r7, #8]
  }

  bus_mode.filter = LPS22DF_FILTER_AUTO;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	727b      	strb	r3, [r7, #9]
  if (lps22df_bus_mode_set(&(pObj->Ctx), &bus_mode) != LPS22DF_OK)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3320      	adds	r3, #32
 8005ee0:	f107 0208 	add.w	r2, r7, #8
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 f901 	bl	80060ee <lps22df_bus_mode_set>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <LPS22DF_Initialize+0x60>
  {
    return LPS22DF_ERROR;
 8005ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef6:	e027      	b.n	8005f48 <LPS22DF_Initialize+0xb0>
  }

  /* Set Output Data Rate in Power Down */
  md.odr = LPS22DF_ONE_SHOT;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	733b      	strb	r3, [r7, #12]
  md.avg = LPS22DF_4_AVG;
 8005efc:	2300      	movs	r3, #0
 8005efe:	737b      	strb	r3, [r7, #13]
  md.lpf = LPS22DF_LPF_ODR_DIV_4;
 8005f00:	2301      	movs	r3, #1
 8005f02:	73bb      	strb	r3, [r7, #14]

  /* Power down the device */
  if (lps22df_mode_set(&(pObj->Ctx), &md) != LPS22DF_OK)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	3320      	adds	r3, #32
 8005f08:	f107 020c 	add.w	r2, r7, #12
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fab6 	bl	8006480 <lps22df_mode_set>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <LPS22DF_Initialize+0x88>
  {
    return LPS22DF_ERROR;
 8005f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f1e:	e013      	b.n	8005f48 <LPS22DF_Initialize+0xb0>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f103 0220 	add.w	r2, r3, #32
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3333      	adds	r3, #51	@ 0x33
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	f000 fb05 	bl	800653c <lps22df_mode_get>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <LPS22DF_Initialize+0xa6>
  {
    return LPS22DF_ERROR;
 8005f38:	f04f 33ff 	mov.w	r3, #4294967295
 8005f3c:	e004      	b.n	8005f48 <LPS22DF_Initialize+0xb0>
  }

  pObj->last_odr.odr = LPS22DF_25Hz;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2204      	movs	r2, #4
 8005f42:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22DF_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005f50:	b590      	push	{r4, r7, lr}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	607a      	str	r2, [r7, #4]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	72fb      	strb	r3, [r7, #11]
 8005f60:	4613      	mov	r3, r2
 8005f62:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	695c      	ldr	r4, [r3, #20]
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	7b1b      	ldrb	r3, [r3, #12]
 8005f70:	4618      	mov	r0, r3
 8005f72:	7afb      	ldrb	r3, [r7, #11]
 8005f74:	b299      	uxth	r1, r3
 8005f76:	893b      	ldrh	r3, [r7, #8]
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	47a0      	blx	r4
 8005f7c:	4603      	mov	r3, r0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd90      	pop	{r4, r7, pc}

08005f86 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005f86:	b590      	push	{r4, r7, lr}
 8005f88:	b087      	sub	sp, #28
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	461a      	mov	r2, r3
 8005f92:	460b      	mov	r3, r1
 8005f94:	72fb      	strb	r3, [r7, #11]
 8005f96:	4613      	mov	r3, r2
 8005f98:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	691c      	ldr	r4, [r3, #16]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	7b1b      	ldrb	r3, [r3, #12]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	7afb      	ldrb	r3, [r7, #11]
 8005faa:	b299      	uxth	r1, r3
 8005fac:	893b      	ldrh	r3, [r7, #8]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	47a0      	blx	r4
 8005fb2:	4603      	mov	r3, r0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	371c      	adds	r7, #28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd90      	pop	{r4, r7, pc}

08005fbc <lps22df_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lps22df_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                uint16_t len)
{
 8005fbc:	b590      	push	{r4, r7, lr}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	607a      	str	r2, [r7, #4]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	460b      	mov	r3, r1
 8005fca:	72fb      	strb	r3, [r7, #11]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d102      	bne.n	8005fdc <lps22df_read_reg+0x20>
  {
    return -1;
 8005fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fda:	e009      	b.n	8005ff0 <lps22df_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	685c      	ldr	r4, [r3, #4]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	68d8      	ldr	r0, [r3, #12]
 8005fe4:	893b      	ldrh	r3, [r7, #8]
 8005fe6:	7af9      	ldrb	r1, [r7, #11]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	47a0      	blx	r4
 8005fec:	6178      	str	r0, [r7, #20]

  return ret;
 8005fee:	697b      	ldr	r3, [r7, #20]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	371c      	adds	r7, #28
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd90      	pop	{r4, r7, pc}

08005ff8 <lps22df_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lps22df_write_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                 uint16_t len)
{
 8005ff8:	b590      	push	{r4, r7, lr}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	607a      	str	r2, [r7, #4]
 8006002:	461a      	mov	r2, r3
 8006004:	460b      	mov	r3, r1
 8006006:	72fb      	strb	r3, [r7, #11]
 8006008:	4613      	mov	r3, r2
 800600a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d102      	bne.n	8006018 <lps22df_write_reg+0x20>
  {
    return -1;
 8006012:	f04f 33ff 	mov.w	r3, #4294967295
 8006016:	e009      	b.n	800602c <lps22df_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681c      	ldr	r4, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	68d8      	ldr	r0, [r3, #12]
 8006020:	893b      	ldrh	r3, [r7, #8]
 8006022:	7af9      	ldrb	r1, [r7, #11]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	47a0      	blx	r4
 8006028:	6178      	str	r0, [r7, #20]

  return ret;
 800602a:	697b      	ldr	r3, [r7, #20]
}
 800602c:	4618      	mov	r0, r3
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	bd90      	pop	{r4, r7, pc}

08006034 <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d006      	beq.n	8006052 <bytecpy+0x1e>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <bytecpy+0x1e>
  {
    *target = *source;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	781a      	ldrb	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	701a      	strb	r2, [r3, #0]
  }
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
	...

08006060 <lps22df_from_lsb_to_hPa>:
  * @{
  *
  */

float_t lps22df_from_lsb_to_hPa(int32_t lsb)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);   /* 4096.0f * 256 */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	ee07 3a90 	vmov	s15, r3
 800606e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006072:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800608c <lps22df_from_lsb_to_hPa+0x2c>
 8006076:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800607a:	eef0 7a66 	vmov.f32	s15, s13
}
 800607e:	eeb0 0a67 	vmov.f32	s0, s15
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	49800000 	.word	0x49800000

08006090 <lps22df_from_lsb_to_celsius>:

float_t lps22df_from_lsb_to_celsius(int16_t lsb)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	4603      	mov	r3, r0
 8006098:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 800609a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060a6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80060c0 <lps22df_from_lsb_to_celsius+0x30>
 80060aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80060ae:	eef0 7a66 	vmov.f32	s15, s13
}
 80060b2:	eeb0 0a67 	vmov.f32	s0, s15
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	42c80000 	.word	0x42c80000

080060c4 <lps22df_id_get>:
  * @param  val   ID values.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_id_get(const stmdev_ctx_t *ctx, lps22df_id_t *val)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint8_t reg;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_WHO_AM_I, &reg, 1);
 80060ce:	f107 020b 	add.w	r2, r7, #11
 80060d2:	2301      	movs	r3, #1
 80060d4:	210f      	movs	r1, #15
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff ff70 	bl	8005fbc <lps22df_read_reg>
 80060dc:	60f8      	str	r0, [r7, #12]
  val->whoami = reg;
 80060de:	7afa      	ldrb	r2, [r7, #11]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	701a      	strb	r2, [r3, #0]

  return ret;
 80060e4:	68fb      	ldr	r3, [r7, #12]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <lps22df_bus_mode_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_bus_mode_set(const stmdev_ctx_t *ctx, lps22df_bus_mode_t *val)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b086      	sub	sp, #24
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	6039      	str	r1, [r7, #0]
  lps22df_i3c_if_ctrl_t i3c_if_ctrl;
  lps22df_if_ctrl_t if_ctrl;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 80060f8:	f107 020c 	add.w	r2, r7, #12
 80060fc:	2301      	movs	r3, #1
 80060fe:	210e      	movs	r1, #14
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff ff5b 	bl	8005fbc <lps22df_read_reg>
 8006106:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d124      	bne.n	8006158 <lps22df_bus_mode_set+0x6a>
  {
    if_ctrl.i2c_i3c_dis = ((uint8_t)val->interface & 0x02U) >> 1;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	085b      	lsrs	r3, r3, #1
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	b2da      	uxtb	r2, r3
 800611a:	7b3b      	ldrb	r3, [r7, #12]
 800611c:	f362 1386 	bfi	r3, r2, #6, #1
 8006120:	733b      	strb	r3, [r7, #12]
    if_ctrl.int_en_i3c = ((uint8_t)val->interface & 0x04U) >> 2;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	089b      	lsrs	r3, r3, #2
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	b2da      	uxtb	r2, r3
 800612e:	7b3b      	ldrb	r3, [r7, #12]
 8006130:	f362 13c7 	bfi	r3, r2, #7, #1
 8006134:	733b      	strb	r3, [r7, #12]
    if_ctrl.sim = ((uint8_t)val->interface & 0x01U);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	b2da      	uxtb	r2, r3
 8006140:	7b3b      	ldrb	r3, [r7, #12]
 8006142:	f362 1345 	bfi	r3, r2, #5, #1
 8006146:	733b      	strb	r3, [r7, #12]
    ret = lps22df_write_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8006148:	f107 020c 	add.w	r2, r7, #12
 800614c:	2301      	movs	r3, #1
 800614e:	210e      	movs	r1, #14
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff ff51 	bl	8005ff8 <lps22df_write_reg>
 8006156:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d107      	bne.n	800616e <lps22df_bus_mode_set+0x80>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_I3C_IF_CTRL,
 800615e:	f107 0210 	add.w	r2, r7, #16
 8006162:	2301      	movs	r3, #1
 8006164:	2119      	movs	r1, #25
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7ff ff28 	bl	8005fbc <lps22df_read_reg>
 800616c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_if_ctrl, 1);
  }
  if (ret == 0)
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d119      	bne.n	80061a8 <lps22df_bus_mode_set+0xba>
  {
    i3c_if_ctrl.asf_on = (uint8_t)val->filter & 0x01U;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	785b      	ldrb	r3, [r3, #1]
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	b2da      	uxtb	r2, r3
 800617e:	7c3b      	ldrb	r3, [r7, #16]
 8006180:	f362 1345 	bfi	r3, r2, #5, #1
 8006184:	743b      	strb	r3, [r7, #16]
    i3c_if_ctrl.i3c_bus_avb_sel = (uint8_t)val->i3c_ibi_time & 0x03U;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	789b      	ldrb	r3, [r3, #2]
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	b2da      	uxtb	r2, r3
 8006190:	7c3b      	ldrb	r3, [r7, #16]
 8006192:	f362 0301 	bfi	r3, r2, #0, #2
 8006196:	743b      	strb	r3, [r7, #16]
    ret = lps22df_write_reg(ctx, LPS22DF_I3C_IF_CTRL,
 8006198:	f107 0210 	add.w	r2, r7, #16
 800619c:	2301      	movs	r3, #1
 800619e:	2119      	movs	r1, #25
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7ff ff29 	bl	8005ff8 <lps22df_write_reg>
 80061a6:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_if_ctrl, 1);
  }
  return ret;
 80061a8:	697b      	ldr	r3, [r7, #20]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <lps22df_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_init_set(const stmdev_ctx_t *ctx, lps22df_init_t val)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b08a      	sub	sp, #40	@ 0x28
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	460b      	mov	r3, r1
 80061bc:	70fb      	strb	r3, [r7, #3]
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_ctrl_reg3_t ctrl_reg3;
  lps22df_int_source_t int_src;
  lps22df_stat_t status;
  uint8_t reg[2], cnt = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 80061c4:	f107 020c 	add.w	r2, r7, #12
 80061c8:	2302      	movs	r3, #2
 80061ca:	2111      	movs	r1, #17
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7ff fef5 	bl	8005fbc <lps22df_read_reg>
 80061d2:	6238      	str	r0, [r7, #32]
  if (ret == 0)
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f040 80c8 	bne.w	800636c <lps22df_init_set+0x1ba>
  {
    bytecpy((uint8_t *)&ctrl_reg2, &reg[0]);
 80061dc:	f107 020c 	add.w	r2, r7, #12
 80061e0:	f107 031c 	add.w	r3, r7, #28
 80061e4:	4611      	mov	r1, r2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7ff ff24 	bl	8006034 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg3, &reg[1]);
 80061ec:	f107 030c 	add.w	r3, r7, #12
 80061f0:	1c5a      	adds	r2, r3, #1
 80061f2:	f107 0318 	add.w	r3, r7, #24
 80061f6:	4611      	mov	r1, r2
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff ff1b 	bl	8006034 <bytecpy>

    switch (val)
 80061fe:	78fb      	ldrb	r3, [r7, #3]
 8006200:	2b02      	cmp	r3, #2
 8006202:	d043      	beq.n	800628c <lps22df_init_set+0xda>
 8006204:	2b02      	cmp	r3, #2
 8006206:	f300 809d 	bgt.w	8006344 <lps22df_init_set+0x192>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d078      	beq.n	8006300 <lps22df_init_set+0x14e>
 800620e:	2b01      	cmp	r3, #1
 8006210:	f040 8098 	bne.w	8006344 <lps22df_init_set+0x192>
    {
      case LPS22DF_BOOT:
        ctrl_reg2.boot = PROPERTY_ENABLE;
 8006214:	7f3b      	ldrb	r3, [r7, #28]
 8006216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800621a:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 800621c:	f107 021c 	add.w	r2, r7, #28
 8006220:	2301      	movs	r3, #1
 8006222:	2111      	movs	r1, #17
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff fee7 	bl	8005ff8 <lps22df_write_reg>
 800622a:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        if (ret != 0)
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	2b00      	cmp	r3, #0
 8006230:	f040 8095 	bne.w	800635e <lps22df_init_set+0x1ac>
          break;
        }

        do
        {
          ret = lps22df_read_reg(ctx, LPS22DF_INT_SOURCE, (uint8_t *)&int_src, 1);
 8006234:	f107 0214 	add.w	r2, r7, #20
 8006238:	2301      	movs	r3, #1
 800623a:	2124      	movs	r1, #36	@ 0x24
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7ff febd 	bl	8005fbc <lps22df_read_reg>
 8006242:	6238      	str	r0, [r7, #32]
          if (ret != 0)
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d115      	bne.n	8006276 <lps22df_init_set+0xc4>
          {
            break;
          }

          /* boot procedue ended correctly */
          if (int_src.boot_on == 0U)
 800624a:	7d3b      	ldrb	r3, [r7, #20]
 800624c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d011      	beq.n	800627a <lps22df_init_set+0xc8>
          {
            break;
          }

          if (ctx->mdelay != NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d003      	beq.n	8006266 <lps22df_init_set+0xb4>
          {
            ctx->mdelay(10); /* 10ms of boot time */
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	200a      	movs	r0, #10
 8006264:	4798      	blx	r3
          }
        } while (cnt++ < 5U);
 8006266:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800626a:	1c5a      	adds	r2, r3, #1
 800626c:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8006270:	2b04      	cmp	r3, #4
 8006272:	d9df      	bls.n	8006234 <lps22df_init_set+0x82>
 8006274:	e002      	b.n	800627c <lps22df_init_set+0xca>
            break;
 8006276:	bf00      	nop
 8006278:	e000      	b.n	800627c <lps22df_init_set+0xca>
            break;
 800627a:	bf00      	nop

        if (cnt >= 5U)
 800627c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006280:	2b04      	cmp	r3, #4
 8006282:	d96e      	bls.n	8006362 <lps22df_init_set+0x1b0>
        {
          ret = -1;  /* boot procedure failed */
 8006284:	f04f 33ff 	mov.w	r3, #4294967295
 8006288:	623b      	str	r3, [r7, #32]
        }

        break;
 800628a:	e06a      	b.n	8006362 <lps22df_init_set+0x1b0>
      case LPS22DF_RESET:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 800628c:	7f3b      	ldrb	r3, [r7, #28]
 800628e:	f043 0304 	orr.w	r3, r3, #4
 8006292:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8006294:	f107 021c 	add.w	r2, r7, #28
 8006298:	2301      	movs	r3, #1
 800629a:	2111      	movs	r1, #17
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7ff feab 	bl	8005ff8 <lps22df_write_reg>
 80062a2:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        if (ret != 0)
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d15d      	bne.n	8006366 <lps22df_init_set+0x1b4>
          break;
        }

        do
        {
          ret = lps22df_status_get(ctx, &status);
 80062aa:	f107 0310 	add.w	r3, r7, #16
 80062ae:	4619      	mov	r1, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f860 	bl	8006376 <lps22df_status_get>
 80062b6:	6238      	str	r0, [r7, #32]
          if (ret != 0)
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d115      	bne.n	80062ea <lps22df_init_set+0x138>
          {
            break;
          }

          /* sw-reset procedue ended correctly */
          if (status.sw_reset == 0U)
 80062be:	7c3b      	ldrb	r3, [r7, #16]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d011      	beq.n	80062ee <lps22df_init_set+0x13c>
          {
            break;
          }

          if (ctx->mdelay != NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <lps22df_init_set+0x128>
          {
            ctx->mdelay(1); /* should be 50 us */
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	2001      	movs	r0, #1
 80062d8:	4798      	blx	r3
          }
        } while (cnt++ < 5U);
 80062da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062de:	1c5a      	adds	r2, r3, #1
 80062e0:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d9e0      	bls.n	80062aa <lps22df_init_set+0xf8>
 80062e8:	e002      	b.n	80062f0 <lps22df_init_set+0x13e>
            break;
 80062ea:	bf00      	nop
 80062ec:	e000      	b.n	80062f0 <lps22df_init_set+0x13e>
            break;
 80062ee:	bf00      	nop

        if (cnt >= 5U)
 80062f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d938      	bls.n	800636a <lps22df_init_set+0x1b8>
        {
          ret = -1;  /* sw-reset procedure failed */
 80062f8:	f04f 33ff 	mov.w	r3, #4294967295
 80062fc:	623b      	str	r3, [r7, #32]
        }

        break;
 80062fe:	e034      	b.n	800636a <lps22df_init_set+0x1b8>
      case LPS22DF_DRV_RDY:
        ctrl_reg2.bdu = PROPERTY_ENABLE;
 8006300:	7f3b      	ldrb	r3, [r7, #28]
 8006302:	f043 0308 	orr.w	r3, r3, #8
 8006306:	773b      	strb	r3, [r7, #28]
        ctrl_reg3.if_add_inc = PROPERTY_ENABLE;
 8006308:	7e3b      	ldrb	r3, [r7, #24]
 800630a:	f043 0301 	orr.w	r3, r3, #1
 800630e:	763b      	strb	r3, [r7, #24]
        bytecpy(&reg[0], (uint8_t *)&ctrl_reg2);
 8006310:	f107 021c 	add.w	r2, r7, #28
 8006314:	f107 030c 	add.w	r3, r7, #12
 8006318:	4611      	mov	r1, r2
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff fe8a 	bl	8006034 <bytecpy>
        bytecpy(&reg[1], (uint8_t *)&ctrl_reg3);
 8006320:	f107 0218 	add.w	r2, r7, #24
 8006324:	f107 030c 	add.w	r3, r7, #12
 8006328:	3301      	adds	r3, #1
 800632a:	4611      	mov	r1, r2
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff fe81 	bl	8006034 <bytecpy>
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8006332:	f107 020c 	add.w	r2, r7, #12
 8006336:	2302      	movs	r3, #2
 8006338:	2111      	movs	r1, #17
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff fe5c 	bl	8005ff8 <lps22df_write_reg>
 8006340:	6238      	str	r0, [r7, #32]
        break;
 8006342:	e013      	b.n	800636c <lps22df_init_set+0x1ba>
      default:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8006344:	7f3b      	ldrb	r3, [r7, #28]
 8006346:	f043 0304 	orr.w	r3, r3, #4
 800634a:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 800634c:	f107 021c 	add.w	r2, r7, #28
 8006350:	2301      	movs	r3, #1
 8006352:	2111      	movs	r1, #17
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7ff fe4f 	bl	8005ff8 <lps22df_write_reg>
 800635a:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 800635c:	e006      	b.n	800636c <lps22df_init_set+0x1ba>
          break;
 800635e:	bf00      	nop
 8006360:	e004      	b.n	800636c <lps22df_init_set+0x1ba>
        break;
 8006362:	bf00      	nop
 8006364:	e002      	b.n	800636c <lps22df_init_set+0x1ba>
          break;
 8006366:	bf00      	nop
 8006368:	e000      	b.n	800636c <lps22df_init_set+0x1ba>
        break;
 800636a:	bf00      	nop
    }
  }

  return ret;
 800636c:	6a3b      	ldr	r3, [r7, #32]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3728      	adds	r7, #40	@ 0x28
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <lps22df_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_status_get(const stmdev_ctx_t *ctx, lps22df_stat_t *val)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b088      	sub	sp, #32
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	6039      	str	r1, [r7, #0]
  lps22df_int_source_t int_source;
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_status_t status;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2,
 8006380:	f107 0210 	add.w	r2, r7, #16
 8006384:	2301      	movs	r3, #1
 8006386:	2111      	movs	r1, #17
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff fe17 	bl	8005fbc <lps22df_read_reg>
 800638e:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg2, 1);
  if (ret == 0)
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d107      	bne.n	80063a6 <lps22df_status_get+0x30>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_INT_SOURCE, (uint8_t *)&int_source, 1);
 8006396:	f107 0214 	add.w	r2, r7, #20
 800639a:	2301      	movs	r3, #1
 800639c:	2124      	movs	r1, #36	@ 0x24
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff fe0c 	bl	8005fbc <lps22df_read_reg>
 80063a4:	61f8      	str	r0, [r7, #28]
  }
  if (ret == 0)
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d107      	bne.n	80063bc <lps22df_status_get+0x46>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_STATUS, (uint8_t *)&status, 1);
 80063ac:	f107 020c 	add.w	r2, r7, #12
 80063b0:	2301      	movs	r3, #1
 80063b2:	2127      	movs	r1, #39	@ 0x27
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7ff fe01 	bl	8005fbc <lps22df_read_reg>
 80063ba:	61f8      	str	r0, [r7, #28]
  }
  if (ret == 0)
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d107      	bne.n	80063d2 <lps22df_status_get+0x5c>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_INTERRUPT_CFG,
 80063c2:	f107 0218 	add.w	r2, r7, #24
 80063c6:	2301      	movs	r3, #1
 80063c8:	210b      	movs	r1, #11
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7ff fdf6 	bl	8005fbc <lps22df_read_reg>
 80063d0:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&interrupt_cfg, 1);
  }
  val->sw_reset  = ctrl_reg2.swreset;
 80063d2:	7c3b      	ldrb	r3, [r7, #16]
 80063d4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80063d8:	b2d9      	uxtb	r1, r3
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	7813      	ldrb	r3, [r2, #0]
 80063de:	f361 0300 	bfi	r3, r1, #0, #1
 80063e2:	7013      	strb	r3, [r2, #0]
  val->boot      = int_source.boot_on;
 80063e4:	7d3b      	ldrb	r3, [r7, #20]
 80063e6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80063ea:	b2d9      	uxtb	r1, r3
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	7813      	ldrb	r3, [r2, #0]
 80063f0:	f361 0341 	bfi	r3, r1, #1, #1
 80063f4:	7013      	strb	r3, [r2, #0]
  val->drdy_pres = status.p_da;
 80063f6:	7b3b      	ldrb	r3, [r7, #12]
 80063f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80063fc:	b2d9      	uxtb	r1, r3
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	7813      	ldrb	r3, [r2, #0]
 8006402:	f361 0382 	bfi	r3, r1, #2, #1
 8006406:	7013      	strb	r3, [r2, #0]
  val->drdy_temp = status.t_da;
 8006408:	7b3b      	ldrb	r3, [r7, #12]
 800640a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800640e:	b2d9      	uxtb	r1, r3
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	7813      	ldrb	r3, [r2, #0]
 8006414:	f361 03c3 	bfi	r3, r1, #3, #1
 8006418:	7013      	strb	r3, [r2, #0]
  val->ovr_pres  = status.p_or;
 800641a:	7b3b      	ldrb	r3, [r7, #12]
 800641c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006420:	b2d9      	uxtb	r1, r3
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	7813      	ldrb	r3, [r2, #0]
 8006426:	f361 1304 	bfi	r3, r1, #4, #1
 800642a:	7013      	strb	r3, [r2, #0]
  val->ovr_temp  = status.t_or;
 800642c:	7b3b      	ldrb	r3, [r7, #12]
 800642e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006432:	b2d9      	uxtb	r1, r3
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	7813      	ldrb	r3, [r2, #0]
 8006438:	f361 1345 	bfi	r3, r1, #5, #1
 800643c:	7013      	strb	r3, [r2, #0]
  val->end_meas  = ~ctrl_reg2.oneshot;
 800643e:	7c3b      	ldrb	r3, [r7, #16]
 8006440:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006444:	b2db      	uxtb	r3, r3
 8006446:	43db      	mvns	r3, r3
 8006448:	b2db      	uxtb	r3, r3
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	b2d9      	uxtb	r1, r3
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	7813      	ldrb	r3, [r2, #0]
 8006454:	f361 1386 	bfi	r3, r1, #6, #1
 8006458:	7013      	strb	r3, [r2, #0]
  val->ref_done = ~interrupt_cfg.autozero;
 800645a:	7e3b      	ldrb	r3, [r7, #24]
 800645c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006460:	b2db      	uxtb	r3, r3
 8006462:	43db      	mvns	r3, r3
 8006464:	b2db      	uxtb	r3, r3
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	b2d9      	uxtb	r1, r3
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	7813      	ldrb	r3, [r2, #0]
 8006470:	f361 13c7 	bfi	r3, r1, #7, #1
 8006474:	7013      	strb	r3, [r2, #0]

  return ret;
 8006476:	69fb      	ldr	r3, [r7, #28]
}
 8006478:	4618      	mov	r0, r3
 800647a:	3720      	adds	r7, #32
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <lps22df_mode_set>:
  * @param  val   set the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_set(const stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 800648a:	f107 0208 	add.w	r2, r7, #8
 800648e:	2302      	movs	r3, #2
 8006490:	2110      	movs	r1, #16
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff fd92 	bl	8005fbc <lps22df_read_reg>
 8006498:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d148      	bne.n	8006532 <lps22df_mode_set+0xb2>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 80064a0:	f107 0208 	add.w	r2, r7, #8
 80064a4:	f107 0310 	add.w	r3, r7, #16
 80064a8:	4611      	mov	r1, r2
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff fdc2 	bl	8006034 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 80064b0:	f107 0308 	add.w	r3, r7, #8
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	f107 030c 	add.w	r3, r7, #12
 80064ba:	4611      	mov	r1, r2
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff fdb9 	bl	8006034 <bytecpy>

    ctrl_reg1.odr = (uint8_t)val->odr;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	7c3b      	ldrb	r3, [r7, #16]
 80064ce:	f362 03c6 	bfi	r3, r2, #3, #4
 80064d2:	743b      	strb	r3, [r7, #16]
    ctrl_reg1.avg = (uint8_t)val->avg;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	785b      	ldrb	r3, [r3, #1]
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	7c3b      	ldrb	r3, [r7, #16]
 80064e0:	f362 0302 	bfi	r3, r2, #0, #3
 80064e4:	743b      	strb	r3, [r7, #16]
    ctrl_reg2.en_lpfp = (uint8_t)val->lpf & 0x01U;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	789b      	ldrb	r3, [r3, #2]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	7b3b      	ldrb	r3, [r7, #12]
 80064f2:	f362 1304 	bfi	r3, r2, #4, #1
 80064f6:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.lfpf_cfg = ((uint8_t)val->lpf & 0x02U) >> 2;
 80064f8:	7b3b      	ldrb	r3, [r7, #12]
 80064fa:	f023 0320 	bic.w	r3, r3, #32
 80064fe:	733b      	strb	r3, [r7, #12]

    bytecpy(&reg[0], (uint8_t *)&ctrl_reg1);
 8006500:	f107 0210 	add.w	r2, r7, #16
 8006504:	f107 0308 	add.w	r3, r7, #8
 8006508:	4611      	mov	r1, r2
 800650a:	4618      	mov	r0, r3
 800650c:	f7ff fd92 	bl	8006034 <bytecpy>
    bytecpy(&reg[1], (uint8_t *)&ctrl_reg2);
 8006510:	f107 020c 	add.w	r2, r7, #12
 8006514:	f107 0308 	add.w	r3, r7, #8
 8006518:	3301      	adds	r3, #1
 800651a:	4611      	mov	r1, r2
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff fd89 	bl	8006034 <bytecpy>
    ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8006522:	f107 0208 	add.w	r2, r7, #8
 8006526:	2302      	movs	r3, #2
 8006528:	2110      	movs	r1, #16
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff fd64 	bl	8005ff8 <lps22df_write_reg>
 8006530:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006532:	697b      	ldr	r3, [r7, #20]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <lps22df_mode_get>:
  * @param  val   get the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_get(const stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8006546:	f107 0208 	add.w	r2, r7, #8
 800654a:	2302      	movs	r3, #2
 800654c:	2110      	movs	r1, #16
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7ff fd34 	bl	8005fbc <lps22df_read_reg>
 8006554:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2b00      	cmp	r3, #0
 800655a:	f040 80b6 	bne.w	80066ca <lps22df_mode_get+0x18e>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 800655e:	f107 0208 	add.w	r2, r7, #8
 8006562:	f107 0310 	add.w	r3, r7, #16
 8006566:	4611      	mov	r1, r2
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff fd63 	bl	8006034 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 800656e:	f107 0308 	add.w	r3, r7, #8
 8006572:	1c5a      	adds	r2, r3, #1
 8006574:	f107 030c 	add.w	r3, r7, #12
 8006578:	4611      	mov	r1, r2
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff fd5a 	bl	8006034 <bytecpy>

    switch (ctrl_reg1.odr)
 8006580:	7c3b      	ldrb	r3, [r7, #16]
 8006582:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b08      	cmp	r3, #8
 800658a:	d839      	bhi.n	8006600 <lps22df_mode_get+0xc4>
 800658c:	a201      	add	r2, pc, #4	@ (adr r2, 8006594 <lps22df_mode_get+0x58>)
 800658e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006592:	bf00      	nop
 8006594:	080065b9 	.word	0x080065b9
 8006598:	080065c1 	.word	0x080065c1
 800659c:	080065c9 	.word	0x080065c9
 80065a0:	080065d1 	.word	0x080065d1
 80065a4:	080065d9 	.word	0x080065d9
 80065a8:	080065e1 	.word	0x080065e1
 80065ac:	080065e9 	.word	0x080065e9
 80065b0:	080065f1 	.word	0x080065f1
 80065b4:	080065f9 	.word	0x080065f9
    {
      case LPS22DF_ONE_SHOT:
        val->odr = LPS22DF_ONE_SHOT;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	2200      	movs	r2, #0
 80065bc:	701a      	strb	r2, [r3, #0]
        break;
 80065be:	e023      	b.n	8006608 <lps22df_mode_get+0xcc>
      case LPS22DF_1Hz:
        val->odr = LPS22DF_1Hz;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2201      	movs	r2, #1
 80065c4:	701a      	strb	r2, [r3, #0]
        break;
 80065c6:	e01f      	b.n	8006608 <lps22df_mode_get+0xcc>
      case LPS22DF_4Hz:
        val->odr = LPS22DF_4Hz;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2202      	movs	r2, #2
 80065cc:	701a      	strb	r2, [r3, #0]
        break;
 80065ce:	e01b      	b.n	8006608 <lps22df_mode_get+0xcc>
      case LPS22DF_10Hz:
        val->odr = LPS22DF_10Hz;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2203      	movs	r2, #3
 80065d4:	701a      	strb	r2, [r3, #0]
        break;
 80065d6:	e017      	b.n	8006608 <lps22df_mode_get+0xcc>
      case LPS22DF_25Hz:
        val->odr = LPS22DF_25Hz;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2204      	movs	r2, #4
 80065dc:	701a      	strb	r2, [r3, #0]
        break;
 80065de:	e013      	b.n	8006608 <lps22df_mode_get+0xcc>
      case LPS22DF_50Hz:
        val->odr = LPS22DF_50Hz;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2205      	movs	r2, #5
 80065e4:	701a      	strb	r2, [r3, #0]
        break;
 80065e6:	e00f      	b.n	8006608 <lps22df_mode_get+0xcc>
      case LPS22DF_75Hz:
        val->odr = LPS22DF_75Hz;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2206      	movs	r2, #6
 80065ec:	701a      	strb	r2, [r3, #0]
        break;
 80065ee:	e00b      	b.n	8006608 <lps22df_mode_get+0xcc>
      case LPS22DF_100Hz:
        val->odr = LPS22DF_100Hz;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2207      	movs	r2, #7
 80065f4:	701a      	strb	r2, [r3, #0]
        break;
 80065f6:	e007      	b.n	8006608 <lps22df_mode_get+0xcc>
      case LPS22DF_200Hz:
        val->odr = LPS22DF_200Hz;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	2208      	movs	r2, #8
 80065fc:	701a      	strb	r2, [r3, #0]
        break;
 80065fe:	e003      	b.n	8006608 <lps22df_mode_get+0xcc>
      default:
        val->odr = LPS22DF_ONE_SHOT;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2200      	movs	r2, #0
 8006604:	701a      	strb	r2, [r3, #0]
        break;
 8006606:	bf00      	nop
    }

    switch (ctrl_reg1.avg)
 8006608:	7c3b      	ldrb	r3, [r7, #16]
 800660a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b07      	cmp	r3, #7
 8006612:	d833      	bhi.n	800667c <lps22df_mode_get+0x140>
 8006614:	a201      	add	r2, pc, #4	@ (adr r2, 800661c <lps22df_mode_get+0xe0>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	0800663d 	.word	0x0800663d
 8006620:	08006645 	.word	0x08006645
 8006624:	0800664d 	.word	0x0800664d
 8006628:	08006655 	.word	0x08006655
 800662c:	0800665d 	.word	0x0800665d
 8006630:	08006665 	.word	0x08006665
 8006634:	0800666d 	.word	0x0800666d
 8006638:	08006675 	.word	0x08006675
    {
      case LPS22DF_4_AVG:
        val->avg = LPS22DF_4_AVG;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2200      	movs	r2, #0
 8006640:	705a      	strb	r2, [r3, #1]
        break;
 8006642:	e01f      	b.n	8006684 <lps22df_mode_get+0x148>
      case LPS22DF_8_AVG:
        val->avg = LPS22DF_8_AVG;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2201      	movs	r2, #1
 8006648:	705a      	strb	r2, [r3, #1]
        break;
 800664a:	e01b      	b.n	8006684 <lps22df_mode_get+0x148>
      case LPS22DF_16_AVG:
        val->avg = LPS22DF_16_AVG;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2202      	movs	r2, #2
 8006650:	705a      	strb	r2, [r3, #1]
        break;
 8006652:	e017      	b.n	8006684 <lps22df_mode_get+0x148>
      case LPS22DF_32_AVG:
        val->avg = LPS22DF_32_AVG;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	2203      	movs	r2, #3
 8006658:	705a      	strb	r2, [r3, #1]
        break;
 800665a:	e013      	b.n	8006684 <lps22df_mode_get+0x148>
      case LPS22DF_64_AVG:
        val->avg = LPS22DF_64_AVG;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2204      	movs	r2, #4
 8006660:	705a      	strb	r2, [r3, #1]
        break;
 8006662:	e00f      	b.n	8006684 <lps22df_mode_get+0x148>
      case LPS22DF_128_AVG:
        val->avg = LPS22DF_128_AVG;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2205      	movs	r2, #5
 8006668:	705a      	strb	r2, [r3, #1]
        break;
 800666a:	e00b      	b.n	8006684 <lps22df_mode_get+0x148>
      case LPS22DF_256_AVG:
        val->avg = LPS22DF_256_AVG;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2206      	movs	r2, #6
 8006670:	705a      	strb	r2, [r3, #1]
        break;
 8006672:	e007      	b.n	8006684 <lps22df_mode_get+0x148>
      case LPS22DF_512_AVG:
        val->avg = LPS22DF_512_AVG;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2207      	movs	r2, #7
 8006678:	705a      	strb	r2, [r3, #1]
        break;
 800667a:	e003      	b.n	8006684 <lps22df_mode_get+0x148>
      default:
        val->avg = LPS22DF_4_AVG;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2200      	movs	r2, #0
 8006680:	705a      	strb	r2, [r3, #1]
        break;
 8006682:	bf00      	nop
    }

    switch ((ctrl_reg2.lfpf_cfg << 2) | ctrl_reg2.en_lpfp)
 8006684:	7b3b      	ldrb	r3, [r7, #12]
 8006686:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800668a:	b2db      	uxtb	r3, r3
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	7b3a      	ldrb	r2, [r7, #12]
 8006690:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	4313      	orrs	r3, r2
 8006698:	2b03      	cmp	r3, #3
 800669a:	d00e      	beq.n	80066ba <lps22df_mode_get+0x17e>
 800669c:	2b03      	cmp	r3, #3
 800669e:	dc10      	bgt.n	80066c2 <lps22df_mode_get+0x186>
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <lps22df_mode_get+0x16e>
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d004      	beq.n	80066b2 <lps22df_mode_get+0x176>
 80066a8:	e00b      	b.n	80066c2 <lps22df_mode_get+0x186>
    {
      case LPS22DF_LPF_DISABLE:
        val->lpf = LPS22DF_LPF_DISABLE;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2200      	movs	r2, #0
 80066ae:	709a      	strb	r2, [r3, #2]
        break;
 80066b0:	e00b      	b.n	80066ca <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_4:
        val->lpf = LPS22DF_LPF_ODR_DIV_4;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2201      	movs	r2, #1
 80066b6:	709a      	strb	r2, [r3, #2]
        break;
 80066b8:	e007      	b.n	80066ca <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_9:
        val->lpf = LPS22DF_LPF_ODR_DIV_9;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	2203      	movs	r2, #3
 80066be:	709a      	strb	r2, [r3, #2]
        break;
 80066c0:	e003      	b.n	80066ca <lps22df_mode_get+0x18e>
      default:
        val->lpf = LPS22DF_LPF_DISABLE;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2200      	movs	r2, #0
 80066c6:	709a      	strb	r2, [r3, #2]
        break;
 80066c8:	bf00      	nop
    }
  }
  return ret;
 80066ca:	697b      	ldr	r3, [r7, #20]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <lps22df_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_pressure_raw_get(const stmdev_ctx_t *ctx, uint32_t *buff)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[3];

  ret =  lps22df_read_reg(ctx, LPS22DF_PRESS_OUT_XL, reg, 3);
 80066de:	f107 0208 	add.w	r2, r7, #8
 80066e2:	2303      	movs	r3, #3
 80066e4:	2128      	movs	r1, #40	@ 0x28
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7ff fc68 	bl	8005fbc <lps22df_read_reg>
 80066ec:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80066ee:	7abb      	ldrb	r3, [r7, #10]
 80066f0:	461a      	mov	r2, r3
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	021b      	lsls	r3, r3, #8
 80066fc:	7a7a      	ldrb	r2, [r7, #9]
 80066fe:	441a      	add	r2, r3
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	021b      	lsls	r3, r3, #8
 800670a:	7a3a      	ldrb	r2, [r7, #8]
 800670c:	441a      	add	r2, r3
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	021a      	lsls	r2, r3, #8
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	601a      	str	r2, [r3, #0]

  return ret;
 800671c:	68fb      	ldr	r3, [r7, #12]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <lps22df_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *buff)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];

  ret =  lps22df_read_reg(ctx, LPS22DF_TEMP_OUT_L, reg, 2);
 8006730:	f107 0208 	add.w	r2, r7, #8
 8006734:	2302      	movs	r3, #2
 8006736:	212b      	movs	r1, #43	@ 0x2b
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff fc3f 	bl	8005fbc <lps22df_read_reg>
 800673e:	60f8      	str	r0, [r7, #12]
  *buff = (int16_t)reg[1];
 8006740:	7a7b      	ldrb	r3, [r7, #9]
 8006742:	b21a      	sxth	r2, r3
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + (int16_t)reg[0];
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800674e:	b29b      	uxth	r3, r3
 8006750:	021b      	lsls	r3, r3, #8
 8006752:	b29b      	uxth	r3, r3
 8006754:	7a3a      	ldrb	r2, [r7, #8]
 8006756:	4413      	add	r3, r2
 8006758:	b29b      	uxth	r3, r3
 800675a:	b21a      	sxth	r2, r3
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	801a      	strh	r2, [r3, #0]

  return ret;
 8006760:	68fb      	ldr	r3, [r7, #12]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
	...

0800676c <LSM6DSO16IS_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_RegisterBusIO(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_IO_t *pIO)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d103      	bne.n	8006788 <LSM6DSO16IS_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO16IS_ERROR;
 8006780:	f04f 33ff 	mov.w	r3, #4294967295
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	e04d      	b.n	8006824 <LSM6DSO16IS_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	7b1a      	ldrb	r2, [r3, #12]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	691a      	ldr	r2, [r3, #16]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	695a      	ldr	r2, [r3, #20]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	699a      	ldr	r2, [r3, #24]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a1b      	ldr	r2, [pc, #108]	@ (8006830 <LSM6DSO16IS_RegisterBusIO+0xc4>)
 80067c4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a1a      	ldr	r2, [pc, #104]	@ (8006834 <LSM6DSO16IS_RegisterBusIO+0xc8>)
 80067ca:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d103      	bne.n	80067e2 <LSM6DSO16IS_RegisterBusIO+0x76>
    {
      ret = LSM6DSO16IS_ERROR;
 80067da:	f04f 33ff 	mov.w	r3, #4294967295
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	e020      	b.n	8006824 <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO16IS_OK)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4798      	blx	r3
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d003      	beq.n	80067f6 <LSM6DSO16IS_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO16IS_ERROR;
 80067ee:	f04f 33ff 	mov.w	r3, #4294967295
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	e016      	b.n	8006824 <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO16IS_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d112      	bne.n	8006824 <LSM6DSO16IS_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10d      	bne.n	8006824 <LSM6DSO16IS_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8006808:	230c      	movs	r3, #12
 800680a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO16IS_Write_Reg(pObj, LSM6DSO16IS_CTRL3_C, data) != LSM6DSO16IS_OK)
 800680c:	7afb      	ldrb	r3, [r7, #11]
 800680e:	461a      	mov	r2, r3
 8006810:	2112      	movs	r1, #18
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fdbe 	bl	8007394 <LSM6DSO16IS_Write_Reg>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <LSM6DSO16IS_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO16IS_ERROR;
 800681e:	f04f 33ff 	mov.w	r3, #4294967295
 8006822:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006824:	68fb      	ldr	r3, [r7, #12]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	0800785d 	.word	0x0800785d
 8006834:	08007893 	.word	0x08007893

08006838 <LSM6DSO16IS_Init>:
  * @brief  Initialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Init(LSM6DSO16IS_Object_t *pObj)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]

  /* Set main memory bank */
  if (LSM6DSO16IS_Set_Mem_Bank(pObj, (uint8_t)LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 8006844:	2100      	movs	r1, #0
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fdc1 	bl	80073ce <LSM6DSO16IS_Set_Mem_Bank>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <LSM6DSO16IS_Init+0x20>
  {
    ret = LSM6DSO16IS_ERROR;
 8006852:	f04f 33ff 	mov.w	r3, #4294967295
 8006856:	60fb      	str	r3, [r7, #12]
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso16is_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	3320      	adds	r3, #32
 800685c:	2101      	movs	r1, #1
 800685e:	4618      	mov	r0, r3
 8006860:	f001 fbdc 	bl	800801c <lsm6dso16is_auto_increment_set>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <LSM6DSO16IS_Init+0x38>
  {
    ret = LSM6DSO16IS_ERROR;
 800686a:	f04f 33ff 	mov.w	r3, #4294967295
 800686e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable BDU */
  if (lsm6dso16is_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3320      	adds	r3, #32
 8006874:	2101      	movs	r1, #1
 8006876:	4618      	mov	r0, r3
 8006878:	f001 fbf6 	bl	8008068 <lsm6dso16is_block_data_update_set>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <LSM6DSO16IS_Init+0x50>
  {
    ret = LSM6DSO16IS_ERROR;
 8006882:	f04f 33ff 	mov.w	r3, #4294967295
 8006886:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2204      	movs	r2, #4
 800688c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3320      	adds	r3, #32
 8006894:	2100      	movs	r1, #0
 8006896:	4618      	mov	r0, r3
 8006898:	f001 f910 	bl	8007abc <lsm6dso16is_xl_data_rate_set>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d002      	beq.n	80068a8 <LSM6DSO16IS_Init+0x70>
  {
    ret = LSM6DSO16IS_ERROR;
 80068a2:	f04f 33ff 	mov.w	r3, #4294967295
 80068a6:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2g) != LSM6DSO16IS_OK)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3320      	adds	r3, #32
 80068ac:	2100      	movs	r1, #0
 80068ae:	4618      	mov	r0, r3
 80068b0:	f001 f8a6 	bl	8007a00 <lsm6dso16is_xl_full_scale_set>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <LSM6DSO16IS_Init+0x88>
  {
    ret = LSM6DSO16IS_ERROR;
 80068ba:	f04f 33ff 	mov.w	r3, #4294967295
 80068be:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2204      	movs	r2, #4
 80068c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	3320      	adds	r3, #32
 80068cc:	2100      	movs	r1, #0
 80068ce:	4618      	mov	r0, r3
 80068d0:	f001 faa8 	bl	8007e24 <lsm6dso16is_gy_data_rate_set>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <LSM6DSO16IS_Init+0xa8>
  {
    ret = LSM6DSO16IS_ERROR;
 80068da:	f04f 33ff 	mov.w	r3, #4294967295
 80068de:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2000dps) != LSM6DSO16IS_OK)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3320      	adds	r3, #32
 80068e4:	2103      	movs	r1, #3
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 fa10 	bl	8007d0c <lsm6dso16is_gy_full_scale_set>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <LSM6DSO16IS_Init+0xc0>
  {
    ret = LSM6DSO16IS_ERROR;
 80068f2:	f04f 33ff 	mov.w	r3, #4294967295
 80068f6:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d103      	bne.n	8006906 <LSM6DSO16IS_Init+0xce>
  {
    pObj->is_initialized = 1;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 8006906:	68fb      	ldr	r3, [r7, #12]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <LSM6DSO16IS_DeInit>:
  * @brief  Deinitialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_DeInit(LSM6DSO16IS_Object_t *pObj)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006918:	2300      	movs	r3, #0
 800691a:	60fb      	str	r3, [r7, #12]

  /* Disable the component */
  if (LSM6DSO16IS_ACC_Disable(pObj) != LSM6DSO16IS_OK)
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f890 	bl	8006a42 <LSM6DSO16IS_ACC_Disable>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <LSM6DSO16IS_DeInit+0x1e>
  {
    ret = LSM6DSO16IS_ERROR;
 8006928:	f04f 33ff 	mov.w	r3, #4294967295
 800692c:	60fb      	str	r3, [r7, #12]
  }

  if (LSM6DSO16IS_GYRO_Disable(pObj) != LSM6DSO16IS_OK)
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fad0 	bl	8006ed4 <LSM6DSO16IS_GYRO_Disable>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d002      	beq.n	8006940 <LSM6DSO16IS_DeInit+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 800693a:	f04f 33ff 	mov.w	r3, #4294967295
 800693e:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10b      	bne.n	800695e <LSM6DSO16IS_DeInit+0x4e>
  {
    /* Reset output data rate. */
    pObj->acc_odr = LSM6DSO16IS_XL_ODR_OFF;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    pObj->gyro_odr = LSM6DSO16IS_GY_ODR_OFF;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    pObj->is_initialized = 0;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 800695e:	68fb      	ldr	r3, [r7, #12]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <LSM6DSO16IS_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ReadID(LSM6DSO16IS_Object_t *pObj, uint8_t *Id)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_device_id_get(&(pObj->Ctx), Id) != LSM6DSO16IS_OK)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	3320      	adds	r3, #32
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	4618      	mov	r0, r3
 800697e:	f001 f808 	bl	8007992 <lsm6dso16is_device_id_get>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <LSM6DSO16IS_ReadID+0x26>
  {
    ret = LSM6DSO16IS_ERROR;
 8006988:	f04f 33ff 	mov.w	r3, #4294967295
 800698c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800698e:	68fb      	ldr	r3, [r7, #12]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <LSM6DSO16IS_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO16IS sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GetCapabilities(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Capabilities_t *Capabilities)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2201      	movs	r2, #1
 80069a6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2201      	movs	r2, #1
 80069ac:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2200      	movs	r2, #0
 80069b2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	2200      	movs	r2, #0
 80069b8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80069c0:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2210      	movs	r2, #16
 80069c6:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2200      	movs	r2, #0
 80069cc:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 3333.0f;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	4a07      	ldr	r2, [pc, #28]	@ (80069f0 <LSM6DSO16IS_GetCapabilities+0x58>)
 80069d2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 3333.0f;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	4a06      	ldr	r2, [pc, #24]	@ (80069f0 <LSM6DSO16IS_GetCapabilities+0x58>)
 80069d8:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	619a      	str	r2, [r3, #24]

  return LSM6DSO16IS_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	45505000 	.word	0x45505000

080069f4 <LSM6DSO16IS_ACC_Enable>:
  * @brief  Enable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Enable(LSM6DSO16IS_Object_t *pObj)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d102      	bne.n	8006a10 <LSM6DSO16IS_ACC_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	e013      	b.n	8006a38 <LSM6DSO16IS_ACC_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO16IS_OK)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f103 0220 	add.w	r2, r3, #32
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	4610      	mov	r0, r2
 8006a20:	f001 f84c 	bl	8007abc <lsm6dso16is_xl_data_rate_set>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <LSM6DSO16IS_ACC_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 8006a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a2e:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 1;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 8006a38:	68fb      	ldr	r3, [r7, #12]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <LSM6DSO16IS_ACC_Disable>:
  * @brief  Disable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Disable(LSM6DSO16IS_Object_t *pObj)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d102      	bne.n	8006a5e <LSM6DSO16IS_ACC_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	e01e      	b.n	8006a9c <LSM6DSO16IS_ACC_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO16IS_OK)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f103 0220 	add.w	r2, r3, #32
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	3333      	adds	r3, #51	@ 0x33
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	f001 f866 	bl	8007b3c <lsm6dso16is_xl_data_rate_get>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d002      	beq.n	8006a7c <LSM6DSO16IS_ACC_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 8006a76:	f04f 33ff 	mov.w	r3, #4294967295
 8006a7a:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	3320      	adds	r3, #32
 8006a80:	2100      	movs	r1, #0
 8006a82:	4618      	mov	r0, r3
 8006a84:	f001 f81a 	bl	8007abc <lsm6dso16is_xl_data_rate_set>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <LSM6DSO16IS_ACC_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 8006a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a92:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 0;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <LSM6DSO16IS_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	3320      	adds	r3, #32
 8006aba:	f107 020b 	add.w	r2, r7, #11
 8006abe:	4611      	mov	r1, r2
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 ffc3 	bl	8007a4c <lsm6dso16is_xl_full_scale_get>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <LSM6DSO16IS_ACC_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006acc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad0:	60fb      	str	r3, [r7, #12]
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8006ad2:	7afb      	ldrb	r3, [r7, #11]
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d81b      	bhi.n	8006b10 <LSM6DSO16IS_ACC_GetSensitivity+0x68>
 8006ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae0 <LSM6DSO16IS_ACC_GetSensitivity+0x38>)
 8006ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ade:	bf00      	nop
 8006ae0:	08006af1 	.word	0x08006af1
 8006ae4:	08006b09 	.word	0x08006b09
 8006ae8:	08006af9 	.word	0x08006af9
 8006aec:	08006b01 	.word	0x08006b01
  {
    case LSM6DSO16IS_2g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_2G;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	4a0c      	ldr	r2, [pc, #48]	@ (8006b24 <LSM6DSO16IS_ACC_GetSensitivity+0x7c>)
 8006af4:	601a      	str	r2, [r3, #0]
      break;
 8006af6:	e00f      	b.n	8006b18 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_4g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_4G;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	4a0b      	ldr	r2, [pc, #44]	@ (8006b28 <LSM6DSO16IS_ACC_GetSensitivity+0x80>)
 8006afc:	601a      	str	r2, [r3, #0]
      break;
 8006afe:	e00b      	b.n	8006b18 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_8g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_8G;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	4a0a      	ldr	r2, [pc, #40]	@ (8006b2c <LSM6DSO16IS_ACC_GetSensitivity+0x84>)
 8006b04:	601a      	str	r2, [r3, #0]
      break;
 8006b06:	e007      	b.n	8006b18 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_16g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_16G;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	4a09      	ldr	r2, [pc, #36]	@ (8006b30 <LSM6DSO16IS_ACC_GetSensitivity+0x88>)
 8006b0c:	601a      	str	r2, [r3, #0]
      break;
 8006b0e:	e003      	b.n	8006b18 <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006b10:	f04f 33ff 	mov.w	r3, #4294967295
 8006b14:	60fb      	str	r3, [r7, #12]
      break;
 8006b16:	bf00      	nop
  }

  return ret;
 8006b18:	68fb      	ldr	r3, [r7, #12]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	3d79db23 	.word	0x3d79db23
 8006b28:	3df9db23 	.word	0x3df9db23
 8006b2c:	3e79db23 	.word	0x3e79db23
 8006b30:	3ef9db23 	.word	0x3ef9db23

08006b34 <LSM6DSO16IS_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	3320      	adds	r3, #32
 8006b46:	f107 020b 	add.w	r2, r7, #11
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fff5 	bl	8007b3c <lsm6dso16is_xl_data_rate_get>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <LSM6DSO16IS_ACC_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006b58:	f04f 33ff 	mov.w	r3, #4294967295
 8006b5c:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 8006b5e:	7afb      	ldrb	r3, [r7, #11]
 8006b60:	2b1b      	cmp	r3, #27
 8006b62:	d86c      	bhi.n	8006c3e <LSM6DSO16IS_ACC_GetOutputDataRate+0x10a>
 8006b64:	a201      	add	r2, pc, #4	@ (adr r2, 8006b6c <LSM6DSO16IS_ACC_GetOutputDataRate+0x38>)
 8006b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6a:	bf00      	nop
 8006b6c:	08006bdd 	.word	0x08006bdd
 8006b70:	08006bef 	.word	0x08006bef
 8006b74:	08006bf7 	.word	0x08006bf7
 8006b78:	08006bff 	.word	0x08006bff
 8006b7c:	08006c07 	.word	0x08006c07
 8006b80:	08006c0f 	.word	0x08006c0f
 8006b84:	08006c17 	.word	0x08006c17
 8006b88:	08006c1f 	.word	0x08006c1f
 8006b8c:	08006c27 	.word	0x08006c27
 8006b90:	08006c2f 	.word	0x08006c2f
 8006b94:	08006c37 	.word	0x08006c37
 8006b98:	08006c3f 	.word	0x08006c3f
 8006b9c:	08006c3f 	.word	0x08006c3f
 8006ba0:	08006c3f 	.word	0x08006c3f
 8006ba4:	08006c3f 	.word	0x08006c3f
 8006ba8:	08006c3f 	.word	0x08006c3f
 8006bac:	08006c3f 	.word	0x08006c3f
 8006bb0:	08006bef 	.word	0x08006bef
 8006bb4:	08006bf7 	.word	0x08006bf7
 8006bb8:	08006bff 	.word	0x08006bff
 8006bbc:	08006c07 	.word	0x08006c07
 8006bc0:	08006c0f 	.word	0x08006c0f
 8006bc4:	08006c17 	.word	0x08006c17
 8006bc8:	08006c1f 	.word	0x08006c1f
 8006bcc:	08006c27 	.word	0x08006c27
 8006bd0:	08006c2f 	.word	0x08006c2f
 8006bd4:	08006c37 	.word	0x08006c37
 8006bd8:	08006be7 	.word	0x08006be7
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *Odr = 0.0f;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	f04f 0200 	mov.w	r2, #0
 8006be2:	601a      	str	r2, [r3, #0]
      break;
 8006be4:	e02f      	b.n	8006c46 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *Odr = 1.6f;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	4a19      	ldr	r2, [pc, #100]	@ (8006c50 <LSM6DSO16IS_ACC_GetOutputDataRate+0x11c>)
 8006bea:	601a      	str	r2, [r3, #0]
      break;
 8006bec:	e02b      	b.n	8006c46 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	4a18      	ldr	r2, [pc, #96]	@ (8006c54 <LSM6DSO16IS_ACC_GetOutputDataRate+0x120>)
 8006bf2:	601a      	str	r2, [r3, #0]
      break;
 8006bf4:	e027      	b.n	8006c46 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *Odr = 26.0f;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	4a17      	ldr	r2, [pc, #92]	@ (8006c58 <LSM6DSO16IS_ACC_GetOutputDataRate+0x124>)
 8006bfa:	601a      	str	r2, [r3, #0]
      break;
 8006bfc:	e023      	b.n	8006c46 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	4a16      	ldr	r2, [pc, #88]	@ (8006c5c <LSM6DSO16IS_ACC_GetOutputDataRate+0x128>)
 8006c02:	601a      	str	r2, [r3, #0]
      break;
 8006c04:	e01f      	b.n	8006c46 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	4a15      	ldr	r2, [pc, #84]	@ (8006c60 <LSM6DSO16IS_ACC_GetOutputDataRate+0x12c>)
 8006c0a:	601a      	str	r2, [r3, #0]
      break;
 8006c0c:	e01b      	b.n	8006c46 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	4a14      	ldr	r2, [pc, #80]	@ (8006c64 <LSM6DSO16IS_ACC_GetOutputDataRate+0x130>)
 8006c12:	601a      	str	r2, [r3, #0]
      break;
 8006c14:	e017      	b.n	8006c46 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	4a13      	ldr	r2, [pc, #76]	@ (8006c68 <LSM6DSO16IS_ACC_GetOutputDataRate+0x134>)
 8006c1a:	601a      	str	r2, [r3, #0]
      break;
 8006c1c:	e013      	b.n	8006c46 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	4a12      	ldr	r2, [pc, #72]	@ (8006c6c <LSM6DSO16IS_ACC_GetOutputDataRate+0x138>)
 8006c22:	601a      	str	r2, [r3, #0]
      break;
 8006c24:	e00f      	b.n	8006c46 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *Odr = 1667.0f;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	4a11      	ldr	r2, [pc, #68]	@ (8006c70 <LSM6DSO16IS_ACC_GetOutputDataRate+0x13c>)
 8006c2a:	601a      	str	r2, [r3, #0]
      break;
 8006c2c:	e00b      	b.n	8006c46 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *Odr = 3333.0f;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	4a10      	ldr	r2, [pc, #64]	@ (8006c74 <LSM6DSO16IS_ACC_GetOutputDataRate+0x140>)
 8006c32:	601a      	str	r2, [r3, #0]
      break;
 8006c34:	e007      	b.n	8006c46 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *Odr = 6667.0f;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	4a0f      	ldr	r2, [pc, #60]	@ (8006c78 <LSM6DSO16IS_ACC_GetOutputDataRate+0x144>)
 8006c3a:	601a      	str	r2, [r3, #0]
      break;
 8006c3c:	e003      	b.n	8006c46 <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c42:	60fb      	str	r3, [r7, #12]
      break;
 8006c44:	bf00      	nop
  }

  return ret;
 8006c46:	68fb      	ldr	r3, [r7, #12]
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	3fcccccd 	.word	0x3fcccccd
 8006c54:	41480000 	.word	0x41480000
 8006c58:	41d00000 	.word	0x41d00000
 8006c5c:	42500000 	.word	0x42500000
 8006c60:	42d00000 	.word	0x42d00000
 8006c64:	43500000 	.word	0x43500000
 8006c68:	43d00000 	.word	0x43d00000
 8006c6c:	44504000 	.word	0x44504000
 8006c70:	44d06000 	.word	0x44d06000
 8006c74:	45505000 	.word	0x45505000
 8006c78:	45d05800 	.word	0x45d05800

08006c7c <LSM6DSO16IS_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d106      	bne.n	8006ca0 <LSM6DSO16IS_ACC_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006c92:	ed97 0a00 	vldr	s0, [r7]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fbc0 	bl	800741c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	e005      	b.n	8006cac <LSM6DSO16IS_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006ca0:	ed97 0a00 	vldr	s0, [r7]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fc47 	bl	8007538 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>
 8006caa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006cac:	68fb      	ldr	r3, [r7, #12]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <LSM6DSO16IS_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t *FullScale)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	3320      	adds	r3, #32
 8006cca:	f107 020b 	add.w	r2, r7, #11
 8006cce:	4611      	mov	r1, r2
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 febb 	bl	8007a4c <lsm6dso16is_xl_full_scale_get>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <LSM6DSO16IS_ACC_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce0:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 8006ce2:	7afb      	ldrb	r3, [r7, #11]
 8006ce4:	2b03      	cmp	r3, #3
 8006ce6:	d81b      	bhi.n	8006d20 <LSM6DSO16IS_ACC_GetFullScale+0x68>
 8006ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf0 <LSM6DSO16IS_ACC_GetFullScale+0x38>)
 8006cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cee:	bf00      	nop
 8006cf0:	08006d01 	.word	0x08006d01
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	08006d09 	.word	0x08006d09
 8006cfc:	08006d11 	.word	0x08006d11
  {
    case LSM6DSO16IS_2g:
      *FullScale =  2;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	2202      	movs	r2, #2
 8006d04:	601a      	str	r2, [r3, #0]
      break;
 8006d06:	e00f      	b.n	8006d28 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_4g:
      *FullScale =  4;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	2204      	movs	r2, #4
 8006d0c:	601a      	str	r2, [r3, #0]
      break;
 8006d0e:	e00b      	b.n	8006d28 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_8g:
      *FullScale =  8;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2208      	movs	r2, #8
 8006d14:	601a      	str	r2, [r3, #0]
      break;
 8006d16:	e007      	b.n	8006d28 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_16g:
      *FullScale = 16;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2210      	movs	r2, #16
 8006d1c:	601a      	str	r2, [r3, #0]
      break;
 8006d1e:	e003      	b.n	8006d28 <LSM6DSO16IS_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006d20:	f04f 33ff 	mov.w	r3, #4294967295
 8006d24:	60fb      	str	r3, [r7, #12]
      break;
 8006d26:	bf00      	nop
  }

  return ret;
 8006d28:	68fb      	ldr	r3, [r7, #12]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop

08006d34 <LSM6DSO16IS_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t new_fs;

  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
           : (FullScale <= 4) ? LSM6DSO16IS_4g
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	dd0b      	ble.n	8006d60 <LSM6DSO16IS_ACC_SetFullScale+0x2c>
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2b04      	cmp	r3, #4
 8006d4c:	dd06      	ble.n	8006d5c <LSM6DSO16IS_ACC_SetFullScale+0x28>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	dc01      	bgt.n	8006d58 <LSM6DSO16IS_ACC_SetFullScale+0x24>
 8006d54:	2303      	movs	r3, #3
 8006d56:	e004      	b.n	8006d62 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e002      	b.n	8006d62 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e000      	b.n	8006d62 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8006d60:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
 8006d62:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 8) ? LSM6DSO16IS_8g
           :                    LSM6DSO16IS_16g;

  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	3320      	adds	r3, #32
 8006d68:	7afa      	ldrb	r2, [r7, #11]
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 fe47 	bl	8007a00 <lsm6dso16is_xl_full_scale_set>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <LSM6DSO16IS_ACC_SetFullScale+0x4a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006d78:	f04f 33ff 	mov.w	r3, #4294967295
 8006d7c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <LSM6DSO16IS_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	3320      	adds	r3, #32
 8006d9a:	f107 020c 	add.w	r2, r7, #12
 8006d9e:	4611      	mov	r1, r2
 8006da0:	4618      	mov	r0, r3
 8006da2:	f001 f9cf 	bl	8008144 <lsm6dso16is_acceleration_raw_get>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <LSM6DSO16IS_ACC_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006dac:	f04f 33ff 	mov.w	r3, #4294967295
 8006db0:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 8006db2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 8006dba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 8006dc2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	809a      	strh	r2, [r3, #4]

  return ret;
 8006dca:	697b      	ldr	r3, [r7, #20]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3718      	adds	r7, #24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <LSM6DSO16IS_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *Acceleration)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 8006de2:	f04f 0300 	mov.w	r3, #0
 8006de6:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3320      	adds	r3, #32
 8006dec:	f107 020c 	add.w	r2, r7, #12
 8006df0:	4611      	mov	r1, r2
 8006df2:	4618      	mov	r0, r3
 8006df4:	f001 f9a6 	bl	8008144 <lsm6dso16is_acceleration_raw_get>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d002      	beq.n	8006e04 <LSM6DSO16IS_ACC_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8006dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8006e02:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 8006e04:	f107 0308 	add.w	r3, r7, #8
 8006e08:	4619      	mov	r1, r3
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7ff fe4c 	bl	8006aa8 <LSM6DSO16IS_ACC_GetSensitivity>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d002      	beq.n	8006e1c <LSM6DSO16IS_ACC_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 8006e16:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1a:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8006e1c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006e20:	ee07 3a90 	vmov	s15, r3
 8006e24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e28:	edd7 7a02 	vldr	s15, [r7, #8]
 8006e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e34:	ee17 2a90 	vmov	r2, s15
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8006e3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006e40:	ee07 3a90 	vmov	s15, r3
 8006e44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e48:	edd7 7a02 	vldr	s15, [r7, #8]
 8006e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e54:	ee17 2a90 	vmov	r2, s15
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 8006e5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006e60:	ee07 3a90 	vmov	s15, r3
 8006e64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e68:	edd7 7a02 	vldr	s15, [r7, #8]
 8006e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e74:	ee17 2a90 	vmov	r2, s15
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	609a      	str	r2, [r3, #8]

  return ret;
 8006e7c:	697b      	ldr	r3, [r7, #20]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <LSM6DSO16IS_GYRO_Enable>:
  * @brief  Enable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Enable(LSM6DSO16IS_Object_t *pObj)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b084      	sub	sp, #16
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d102      	bne.n	8006ea2 <LSM6DSO16IS_GYRO_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	e013      	b.n	8006eca <LSM6DSO16IS_GYRO_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO16IS_OK)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f103 0220 	add.w	r2, r3, #32
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	f000 ffb7 	bl	8007e24 <lsm6dso16is_gy_data_rate_set>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <LSM6DSO16IS_GYRO_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 8006ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec0:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 1;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8006eca:	68fb      	ldr	r3, [r7, #12]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <LSM6DSO16IS_GYRO_Disable>:
  * @brief  Disable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Disable(LSM6DSO16IS_Object_t *pObj)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d102      	bne.n	8006ef0 <LSM6DSO16IS_GYRO_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	e01e      	b.n	8006f2e <LSM6DSO16IS_GYRO_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO16IS_OK)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f103 0220 	add.w	r2, r3, #32
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	3334      	adds	r3, #52	@ 0x34
 8006efa:	4619      	mov	r1, r3
 8006efc:	4610      	mov	r0, r2
 8006efe:	f000 ffd1 	bl	8007ea4 <lsm6dso16is_gy_data_rate_get>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <LSM6DSO16IS_GYRO_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 8006f08:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0c:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	3320      	adds	r3, #32
 8006f12:	2100      	movs	r1, #0
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 ff85 	bl	8007e24 <lsm6dso16is_gy_data_rate_set>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d002      	beq.n	8006f26 <LSM6DSO16IS_GYRO_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 8006f20:	f04f 33ff 	mov.w	r3, #4294967295
 8006f24:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 0;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <LSM6DSO16IS_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3320      	adds	r3, #32
 8006f4a:	f107 020b 	add.w	r2, r7, #11
 8006f4e:	4611      	mov	r1, r2
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 ff0b 	bl	8007d6c <lsm6dso16is_gy_full_scale_get>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <LSM6DSO16IS_GYRO_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f60:	60fb      	str	r3, [r7, #12]
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006f62:	7afb      	ldrb	r3, [r7, #11]
 8006f64:	2b10      	cmp	r3, #16
 8006f66:	d839      	bhi.n	8006fdc <LSM6DSO16IS_GYRO_GetSensitivity+0xa4>
 8006f68:	a201      	add	r2, pc, #4	@ (adr r2, 8006f70 <LSM6DSO16IS_GYRO_GetSensitivity+0x38>)
 8006f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6e:	bf00      	nop
 8006f70:	08006fbd 	.word	0x08006fbd
 8006f74:	08006fc5 	.word	0x08006fc5
 8006f78:	08006fcd 	.word	0x08006fcd
 8006f7c:	08006fd5 	.word	0x08006fd5
 8006f80:	08006fdd 	.word	0x08006fdd
 8006f84:	08006fdd 	.word	0x08006fdd
 8006f88:	08006fdd 	.word	0x08006fdd
 8006f8c:	08006fdd 	.word	0x08006fdd
 8006f90:	08006fdd 	.word	0x08006fdd
 8006f94:	08006fdd 	.word	0x08006fdd
 8006f98:	08006fdd 	.word	0x08006fdd
 8006f9c:	08006fdd 	.word	0x08006fdd
 8006fa0:	08006fdd 	.word	0x08006fdd
 8006fa4:	08006fdd 	.word	0x08006fdd
 8006fa8:	08006fdd 	.word	0x08006fdd
 8006fac:	08006fdd 	.word	0x08006fdd
 8006fb0:	08006fb5 	.word	0x08006fb5
  {
    case LSM6DSO16IS_125dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_125DPS;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8006ff0 <LSM6DSO16IS_GYRO_GetSensitivity+0xb8>)
 8006fb8:	601a      	str	r2, [r3, #0]
      break;
 8006fba:	e013      	b.n	8006fe4 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_250dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_250DPS;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	4a0d      	ldr	r2, [pc, #52]	@ (8006ff4 <LSM6DSO16IS_GYRO_GetSensitivity+0xbc>)
 8006fc0:	601a      	str	r2, [r3, #0]
      break;
 8006fc2:	e00f      	b.n	8006fe4 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_500dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_500DPS;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8006ff8 <LSM6DSO16IS_GYRO_GetSensitivity+0xc0>)
 8006fc8:	601a      	str	r2, [r3, #0]
      break;
 8006fca:	e00b      	b.n	8006fe4 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_1000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_1000DPS;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	4a0b      	ldr	r2, [pc, #44]	@ (8006ffc <LSM6DSO16IS_GYRO_GetSensitivity+0xc4>)
 8006fd0:	601a      	str	r2, [r3, #0]
      break;
 8006fd2:	e007      	b.n	8006fe4 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_2000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_2000DPS;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8007000 <LSM6DSO16IS_GYRO_GetSensitivity+0xc8>)
 8006fd8:	601a      	str	r2, [r3, #0]
      break;
 8006fda:	e003      	b.n	8006fe4 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8006fe0:	60fb      	str	r3, [r7, #12]
      break;
 8006fe2:	bf00      	nop
  }

  return ret;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	408c0000 	.word	0x408c0000
 8006ff4:	410c0000 	.word	0x410c0000
 8006ff8:	418c0000 	.word	0x418c0000
 8006ffc:	420c0000 	.word	0x420c0000
 8007000:	428c0000 	.word	0x428c0000

08007004 <LSM6DSO16IS_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3320      	adds	r3, #32
 8007016:	f107 020b 	add.w	r2, r7, #11
 800701a:	4611      	mov	r1, r2
 800701c:	4618      	mov	r0, r3
 800701e:	f000 ff41 	bl	8007ea4 <lsm6dso16is_gy_data_rate_get>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8007028:	f04f 33ff 	mov.w	r3, #4294967295
 800702c:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 800702e:	7afb      	ldrb	r3, [r7, #11]
 8007030:	2b1a      	cmp	r3, #26
 8007032:	d866      	bhi.n	8007102 <LSM6DSO16IS_GYRO_GetOutputDataRate+0xfe>
 8007034:	a201      	add	r2, pc, #4	@ (adr r2, 800703c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x38>)
 8007036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703a:	bf00      	nop
 800703c:	080070a9 	.word	0x080070a9
 8007040:	080070b3 	.word	0x080070b3
 8007044:	080070bb 	.word	0x080070bb
 8007048:	080070c3 	.word	0x080070c3
 800704c:	080070cb 	.word	0x080070cb
 8007050:	080070d3 	.word	0x080070d3
 8007054:	080070db 	.word	0x080070db
 8007058:	080070e3 	.word	0x080070e3
 800705c:	080070eb 	.word	0x080070eb
 8007060:	080070f3 	.word	0x080070f3
 8007064:	080070fb 	.word	0x080070fb
 8007068:	08007103 	.word	0x08007103
 800706c:	08007103 	.word	0x08007103
 8007070:	08007103 	.word	0x08007103
 8007074:	08007103 	.word	0x08007103
 8007078:	08007103 	.word	0x08007103
 800707c:	08007103 	.word	0x08007103
 8007080:	080070b3 	.word	0x080070b3
 8007084:	080070bb 	.word	0x080070bb
 8007088:	080070c3 	.word	0x080070c3
 800708c:	080070cb 	.word	0x080070cb
 8007090:	080070d3 	.word	0x080070d3
 8007094:	080070db 	.word	0x080070db
 8007098:	080070e3 	.word	0x080070e3
 800709c:	080070eb 	.word	0x080070eb
 80070a0:	080070f3 	.word	0x080070f3
 80070a4:	080070fb 	.word	0x080070fb
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *Odr = 0.0f;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	f04f 0200 	mov.w	r2, #0
 80070ae:	601a      	str	r2, [r3, #0]
      break;
 80070b0:	e02b      	b.n	800710a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	4a17      	ldr	r2, [pc, #92]	@ (8007114 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x110>)
 80070b6:	601a      	str	r2, [r3, #0]
      break;
 80070b8:	e027      	b.n	800710a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *Odr = 26.0f;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	4a16      	ldr	r2, [pc, #88]	@ (8007118 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x114>)
 80070be:	601a      	str	r2, [r3, #0]
      break;
 80070c0:	e023      	b.n	800710a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	4a15      	ldr	r2, [pc, #84]	@ (800711c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x118>)
 80070c6:	601a      	str	r2, [r3, #0]
      break;
 80070c8:	e01f      	b.n	800710a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	4a14      	ldr	r2, [pc, #80]	@ (8007120 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x11c>)
 80070ce:	601a      	str	r2, [r3, #0]
      break;
 80070d0:	e01b      	b.n	800710a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	4a13      	ldr	r2, [pc, #76]	@ (8007124 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x120>)
 80070d6:	601a      	str	r2, [r3, #0]
      break;
 80070d8:	e017      	b.n	800710a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	4a12      	ldr	r2, [pc, #72]	@ (8007128 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x124>)
 80070de:	601a      	str	r2, [r3, #0]
      break;
 80070e0:	e013      	b.n	800710a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	4a11      	ldr	r2, [pc, #68]	@ (800712c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x128>)
 80070e6:	601a      	str	r2, [r3, #0]
      break;
 80070e8:	e00f      	b.n	800710a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *Odr =  1667.0f;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	4a10      	ldr	r2, [pc, #64]	@ (8007130 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x12c>)
 80070ee:	601a      	str	r2, [r3, #0]
      break;
 80070f0:	e00b      	b.n	800710a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *Odr =  3333.0f;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	4a0f      	ldr	r2, [pc, #60]	@ (8007134 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x130>)
 80070f6:	601a      	str	r2, [r3, #0]
      break;
 80070f8:	e007      	b.n	800710a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *Odr =  6667.0f;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	4a0e      	ldr	r2, [pc, #56]	@ (8007138 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x134>)
 80070fe:	601a      	str	r2, [r3, #0]
      break;
 8007100:	e003      	b.n	800710a <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    default:
      ret = LSM6DSO16IS_ERROR;
 8007102:	f04f 33ff 	mov.w	r3, #4294967295
 8007106:	60fb      	str	r3, [r7, #12]
      break;
 8007108:	bf00      	nop
  }

  return ret;
 800710a:	68fb      	ldr	r3, [r7, #12]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	41480000 	.word	0x41480000
 8007118:	41d00000 	.word	0x41d00000
 800711c:	42500000 	.word	0x42500000
 8007120:	42d00000 	.word	0x42d00000
 8007124:	43500000 	.word	0x43500000
 8007128:	43d00000 	.word	0x43d00000
 800712c:	44504000 	.word	0x44504000
 8007130:	44d06000 	.word	0x44d06000
 8007134:	45505000 	.word	0x45505000
 8007138:	45d05800 	.word	0x45d05800

0800713c <LSM6DSO16IS_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800714e:	2b01      	cmp	r3, #1
 8007150:	d106      	bne.n	8007160 <LSM6DSO16IS_GYRO_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8007152:	ed97 0a00 	vldr	s0, [r7]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fa70 	bl	800763c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>
 800715c:	60f8      	str	r0, [r7, #12]
 800715e:	e005      	b.n	800716c <LSM6DSO16IS_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8007160:	ed97 0a00 	vldr	s0, [r7]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 faf7 	bl	8007758 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>
 800716a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800716c:	68fb      	ldr	r3, [r7, #12]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
	...

08007178 <LSM6DSO16IS_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t  *FullScale)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	3320      	adds	r3, #32
 800718a:	f107 020b 	add.w	r2, r7, #11
 800718e:	4611      	mov	r1, r2
 8007190:	4618      	mov	r0, r3
 8007192:	f000 fdeb 	bl	8007d6c <lsm6dso16is_gy_full_scale_get>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <LSM6DSO16IS_GYRO_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 800719c:	f04f 33ff 	mov.w	r3, #4294967295
 80071a0:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 80071a2:	7afb      	ldrb	r3, [r7, #11]
 80071a4:	2b10      	cmp	r3, #16
 80071a6:	d83c      	bhi.n	8007222 <LSM6DSO16IS_GYRO_GetFullScale+0xaa>
 80071a8:	a201      	add	r2, pc, #4	@ (adr r2, 80071b0 <LSM6DSO16IS_GYRO_GetFullScale+0x38>)
 80071aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ae:	bf00      	nop
 80071b0:	080071fd 	.word	0x080071fd
 80071b4:	08007205 	.word	0x08007205
 80071b8:	0800720f 	.word	0x0800720f
 80071bc:	08007219 	.word	0x08007219
 80071c0:	08007223 	.word	0x08007223
 80071c4:	08007223 	.word	0x08007223
 80071c8:	08007223 	.word	0x08007223
 80071cc:	08007223 	.word	0x08007223
 80071d0:	08007223 	.word	0x08007223
 80071d4:	08007223 	.word	0x08007223
 80071d8:	08007223 	.word	0x08007223
 80071dc:	08007223 	.word	0x08007223
 80071e0:	08007223 	.word	0x08007223
 80071e4:	08007223 	.word	0x08007223
 80071e8:	08007223 	.word	0x08007223
 80071ec:	08007223 	.word	0x08007223
 80071f0:	080071f5 	.word	0x080071f5
  {
    case LSM6DSO16IS_125dps:
      *FullScale =  125;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	227d      	movs	r2, #125	@ 0x7d
 80071f8:	601a      	str	r2, [r3, #0]
      break;
 80071fa:	e016      	b.n	800722a <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_250dps:
      *FullScale =  250;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	22fa      	movs	r2, #250	@ 0xfa
 8007200:	601a      	str	r2, [r3, #0]
      break;
 8007202:	e012      	b.n	800722a <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_500dps:
      *FullScale =  500;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800720a:	601a      	str	r2, [r3, #0]
      break;
 800720c:	e00d      	b.n	800722a <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_1000dps:
      *FullScale = 1000;
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007214:	601a      	str	r2, [r3, #0]
      break;
 8007216:	e008      	b.n	800722a <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_2000dps:
      *FullScale = 2000;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800721e:	601a      	str	r2, [r3, #0]
      break;
 8007220:	e003      	b.n	800722a <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    default:
      ret = LSM6DSO16IS_ERROR;
 8007222:	f04f 33ff 	mov.w	r3, #4294967295
 8007226:	60fb      	str	r3, [r7, #12]
      break;
 8007228:	bf00      	nop
  }

  return ret;
 800722a:	68fb      	ldr	r3, [r7, #12]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <LSM6DSO16IS_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
           : (FullScale <= 250)  ? LSM6DSO16IS_250dps
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b7d      	cmp	r3, #125	@ 0x7d
 8007246:	dd12      	ble.n	800726e <LSM6DSO16IS_GYRO_SetFullScale+0x3a>
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2bfa      	cmp	r3, #250	@ 0xfa
 800724c:	dd0d      	ble.n	800726a <LSM6DSO16IS_GYRO_SetFullScale+0x36>
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007254:	dd07      	ble.n	8007266 <LSM6DSO16IS_GYRO_SetFullScale+0x32>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800725c:	dc01      	bgt.n	8007262 <LSM6DSO16IS_GYRO_SetFullScale+0x2e>
 800725e:	2302      	movs	r3, #2
 8007260:	e006      	b.n	8007270 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8007262:	2303      	movs	r3, #3
 8007264:	e004      	b.n	8007270 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8007266:	2301      	movs	r3, #1
 8007268:	e002      	b.n	8007270 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 800726a:	2300      	movs	r3, #0
 800726c:	e000      	b.n	8007270 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 800726e:	2310      	movs	r3, #16
  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
 8007270:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 500)  ? LSM6DSO16IS_500dps
           : (FullScale <= 1000) ? LSM6DSO16IS_1000dps
           :                       LSM6DSO16IS_2000dps;

  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3320      	adds	r3, #32
 8007276:	7afa      	ldrb	r2, [r7, #11]
 8007278:	4611      	mov	r1, r2
 800727a:	4618      	mov	r0, r3
 800727c:	f000 fd46 	bl	8007d0c <lsm6dso16is_gy_full_scale_set>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <LSM6DSO16IS_GYRO_SetFullScale+0x58>
  {
    ret = LSM6DSO16IS_ERROR;
 8007286:	f04f 33ff 	mov.w	r3, #4294967295
 800728a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800728c:	68fb      	ldr	r3, [r7, #12]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <LSM6DSO16IS_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b086      	sub	sp, #24
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3320      	adds	r3, #32
 80072a8:	f107 020c 	add.w	r2, r7, #12
 80072ac:	4611      	mov	r1, r2
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 ff00 	bl	80080b4 <lsm6dso16is_angular_rate_raw_get>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <LSM6DSO16IS_GYRO_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80072ba:	f04f 33ff 	mov.w	r3, #4294967295
 80072be:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 80072c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 80072c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 80072d0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	809a      	strh	r2, [r3, #4]

  return ret;
 80072d8:	697b      	ldr	r3, [r7, #20]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <LSM6DSO16IS_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *AngularRate)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b086      	sub	sp, #24
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80072ec:	2300      	movs	r3, #0
 80072ee:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 80072f0:	f04f 0300 	mov.w	r3, #0
 80072f4:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	3320      	adds	r3, #32
 80072fa:	f107 020c 	add.w	r2, r7, #12
 80072fe:	4611      	mov	r1, r2
 8007300:	4618      	mov	r0, r3
 8007302:	f000 fed7 	bl	80080b4 <lsm6dso16is_angular_rate_raw_get>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d002      	beq.n	8007312 <LSM6DSO16IS_GYRO_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 800730c:	f04f 33ff 	mov.w	r3, #4294967295
 8007310:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 8007312:	f107 0308 	add.w	r3, r7, #8
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7ff fe0d 	bl	8006f38 <LSM6DSO16IS_GYRO_GetSensitivity>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <LSM6DSO16IS_GYRO_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 8007324:	f04f 33ff 	mov.w	r3, #4294967295
 8007328:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 800732a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007336:	edd7 7a02 	vldr	s15, [r7, #8]
 800733a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800733e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007342:	ee17 2a90 	vmov	r2, s15
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 800734a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800734e:	ee07 3a90 	vmov	s15, r3
 8007352:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007356:	edd7 7a02 	vldr	s15, [r7, #8]
 800735a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800735e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007362:	ee17 2a90 	vmov	r2, s15
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 800736a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007376:	edd7 7a02 	vldr	s15, [r7, #8]
 800737a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800737e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007382:	ee17 2a90 	vmov	r2, s15
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	609a      	str	r2, [r3, #8]

  return ret;
 800738a:	697b      	ldr	r3, [r7, #20]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3718      	adds	r7, #24
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <LSM6DSO16IS_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Write_Reg(LSM6DSO16IS_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	70fb      	strb	r3, [r7, #3]
 80073a0:	4613      	mov	r3, r2
 80073a2:	70bb      	strb	r3, [r7, #2]
  int32_t ret = LSM6DSO16IS_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO16IS_OK)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f103 0020 	add.w	r0, r3, #32
 80073ae:	1cba      	adds	r2, r7, #2
 80073b0:	78f9      	ldrb	r1, [r7, #3]
 80073b2:	2301      	movs	r3, #1
 80073b4:	f000 faa6 	bl	8007904 <lsm6dso16is_write_reg>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <LSM6DSO16IS_Write_Reg+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 80073be:	f04f 33ff 	mov.w	r3, #4294967295
 80073c2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80073c4:	68fb      	ldr	r3, [r7, #12]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <LSM6DSO16IS_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSO16IS_MAIN_MEM_BANK, 2 - LSM6DSO16IS_SENSOR_HUB_MEM_BANK, 3 - LSM6DSO16IS_ISPU_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Set_Mem_Bank(LSM6DSO16IS_Object_t *pObj, uint8_t Val)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
 80073d6:	460b      	mov	r3, r1
 80073d8:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO16IS_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_mem_bank_t reg;

  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
        : (Val == 3U) ? LSM6DSO16IS_ISPU_MEM_BANK
 80073de:	78fb      	ldrb	r3, [r7, #3]
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d006      	beq.n	80073f2 <LSM6DSO16IS_Set_Mem_Bank+0x24>
 80073e4:	78fb      	ldrb	r3, [r7, #3]
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d101      	bne.n	80073ee <LSM6DSO16IS_Set_Mem_Bank+0x20>
 80073ea:	2303      	movs	r3, #3
 80073ec:	e002      	b.n	80073f4 <LSM6DSO16IS_Set_Mem_Bank+0x26>
 80073ee:	2300      	movs	r3, #0
 80073f0:	e000      	b.n	80073f4 <LSM6DSO16IS_Set_Mem_Bank+0x26>
 80073f2:	2302      	movs	r3, #2
  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
 80073f4:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSO16IS_MAIN_MEM_BANK;

  if (lsm6dso16is_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSO16IS_OK)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	3320      	adds	r3, #32
 80073fa:	7afa      	ldrb	r2, [r7, #11]
 80073fc:	4611      	mov	r1, r2
 80073fe:	4618      	mov	r0, r3
 8007400:	f000 fa9e 	bl	8007940 <lsm6dso16is_mem_bank_set>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <LSM6DSO16IS_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSO16IS_ERROR;
 800740a:	f04f 33ff 	mov.w	r3, #4294967295
 800740e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007410:	68fb      	ldr	r3, [r7, #12]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
	...

0800741c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 800742c:	edd7 7a00 	vldr	s15, [r7]
 8007430:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8007434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800743c:	d801      	bhi.n	8007442 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x26>
 800743e:	2301      	movs	r3, #1
 8007440:	e058      	b.n	80074f4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007442:	edd7 7a00 	vldr	s15, [r7]
 8007446:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800744a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800744e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007452:	d801      	bhi.n	8007458 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x3c>
 8007454:	2302      	movs	r3, #2
 8007456:	e04d      	b.n	80074f4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007458:	edd7 7a00 	vldr	s15, [r7]
 800745c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800751c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007468:	d801      	bhi.n	800746e <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x52>
 800746a:	2303      	movs	r3, #3
 800746c:	e042      	b.n	80074f4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800746e:	edd7 7a00 	vldr	s15, [r7]
 8007472:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8007520 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x104>
 8007476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800747a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747e:	d801      	bhi.n	8007484 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x68>
 8007480:	2304      	movs	r3, #4
 8007482:	e037      	b.n	80074f4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007484:	edd7 7a00 	vldr	s15, [r7]
 8007488:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007524 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x108>
 800748c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007494:	d801      	bhi.n	800749a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x7e>
 8007496:	2305      	movs	r3, #5
 8007498:	e02c      	b.n	80074f4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800749a:	edd7 7a00 	vldr	s15, [r7]
 800749e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007528 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80074a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074aa:	d801      	bhi.n	80074b0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x94>
 80074ac:	2306      	movs	r3, #6
 80074ae:	e021      	b.n	80074f4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80074b0:	edd7 7a00 	vldr	s15, [r7]
 80074b4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800752c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x110>
 80074b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074c0:	d801      	bhi.n	80074c6 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xaa>
 80074c2:	2307      	movs	r3, #7
 80074c4:	e016      	b.n	80074f4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80074c6:	edd7 7a00 	vldr	s15, [r7]
 80074ca:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007530 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x114>
 80074ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d6:	d801      	bhi.n	80074dc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80074d8:	2308      	movs	r3, #8
 80074da:	e00b      	b.n	80074f4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80074dc:	edd7 7a00 	vldr	s15, [r7]
 80074e0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007534 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x118>
 80074e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80074e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ec:	d801      	bhi.n	80074f2 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd6>
 80074ee:	2309      	movs	r3, #9
 80074f0:	e000      	b.n	80074f4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80074f2:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 80074f4:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3320      	adds	r3, #32
 80074fa:	7afa      	ldrb	r2, [r7, #11]
 80074fc:	4611      	mov	r1, r2
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 fadc 	bl	8007abc <lsm6dso16is_xl_data_rate_set>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 800750a:	f04f 33ff 	mov.w	r3, #4294967295
 800750e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007510:	68fb      	ldr	r3, [r7, #12]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	42500000 	.word	0x42500000
 8007520:	42d00000 	.word	0x42d00000
 8007524:	43500000 	.word	0x43500000
 8007528:	43d00000 	.word	0x43d00000
 800752c:	44504000 	.word	0x44504000
 8007530:	44d06000 	.word	0x44d06000
 8007534:	45505000 	.word	0x45505000

08007538 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
                  : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 8007544:	edd7 7a00 	vldr	s15, [r7]
 8007548:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800754c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007554:	d801      	bhi.n	800755a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x22>
 8007556:	2301      	movs	r3, #1
 8007558:	e058      	b.n	800760c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800755a:	edd7 7a00 	vldr	s15, [r7]
 800755e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8007562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800756a:	d801      	bhi.n	8007570 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x38>
 800756c:	2302      	movs	r3, #2
 800756e:	e04d      	b.n	800760c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007570:	edd7 7a00 	vldr	s15, [r7]
 8007574:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8007620 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8007578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800757c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007580:	d801      	bhi.n	8007586 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8007582:	2303      	movs	r3, #3
 8007584:	e042      	b.n	800760c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007586:	edd7 7a00 	vldr	s15, [r7]
 800758a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007624 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xec>
 800758e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007596:	d801      	bhi.n	800759c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x64>
 8007598:	2304      	movs	r3, #4
 800759a:	e037      	b.n	800760c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800759c:	edd7 7a00 	vldr	s15, [r7]
 80075a0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8007628 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80075a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ac:	d801      	bhi.n	80075b2 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80075ae:	2305      	movs	r3, #5
 80075b0:	e02c      	b.n	800760c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80075b2:	edd7 7a00 	vldr	s15, [r7]
 80075b6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800762c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80075ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c2:	d801      	bhi.n	80075c8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x90>
 80075c4:	2306      	movs	r3, #6
 80075c6:	e021      	b.n	800760c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80075c8:	edd7 7a00 	vldr	s15, [r7]
 80075cc:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8007630 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80075d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d8:	d801      	bhi.n	80075de <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80075da:	2307      	movs	r3, #7
 80075dc:	e016      	b.n	800760c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80075de:	edd7 7a00 	vldr	s15, [r7]
 80075e2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007634 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80075e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ee:	d801      	bhi.n	80075f4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xbc>
 80075f0:	2308      	movs	r3, #8
 80075f2:	e00b      	b.n	800760c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80075f4:	edd7 7a00 	vldr	s15, [r7]
 80075f8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007638 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x100>
 80075fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007604:	d801      	bhi.n	800760a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8007606:	2309      	movs	r3, #9
 8007608:	e000      	b.n	800760c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800760a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO16IS_XL_ODR_AT_833Hz_HP
                  : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
                  : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
                  :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr
 8007620:	42500000 	.word	0x42500000
 8007624:	42d00000 	.word	0x42d00000
 8007628:	43500000 	.word	0x43500000
 800762c:	43d00000 	.word	0x43d00000
 8007630:	44504000 	.word	0x44504000
 8007634:	44d06000 	.word	0x44d06000
 8007638:	45505000 	.word	0x45505000

0800763c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 800764c:	edd7 7a00 	vldr	s15, [r7]
 8007650:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8007654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800765c:	d801      	bhi.n	8007662 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x26>
 800765e:	2301      	movs	r3, #1
 8007660:	e058      	b.n	8007714 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007662:	edd7 7a00 	vldr	s15, [r7]
 8007666:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800766a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800766e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007672:	d801      	bhi.n	8007678 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x3c>
 8007674:	2302      	movs	r3, #2
 8007676:	e04d      	b.n	8007714 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007678:	edd7 7a00 	vldr	s15, [r7]
 800767c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800773c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8007680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007688:	d801      	bhi.n	800768e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x52>
 800768a:	2303      	movs	r3, #3
 800768c:	e042      	b.n	8007714 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800768e:	edd7 7a00 	vldr	s15, [r7]
 8007692:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8007740 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8007696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800769a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800769e:	d801      	bhi.n	80076a4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x68>
 80076a0:	2304      	movs	r3, #4
 80076a2:	e037      	b.n	8007714 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80076a4:	edd7 7a00 	vldr	s15, [r7]
 80076a8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007744 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80076ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076b4:	d801      	bhi.n	80076ba <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x7e>
 80076b6:	2305      	movs	r3, #5
 80076b8:	e02c      	b.n	8007714 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80076ba:	edd7 7a00 	vldr	s15, [r7]
 80076be:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007748 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80076c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ca:	d801      	bhi.n	80076d0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x94>
 80076cc:	2306      	movs	r3, #6
 80076ce:	e021      	b.n	8007714 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80076d0:	edd7 7a00 	vldr	s15, [r7]
 80076d4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800774c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80076d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076e0:	d801      	bhi.n	80076e6 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xaa>
 80076e2:	2307      	movs	r3, #7
 80076e4:	e016      	b.n	8007714 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80076e6:	edd7 7a00 	vldr	s15, [r7]
 80076ea:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007750 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x114>
 80076ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f6:	d801      	bhi.n	80076fc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 80076f8:	2308      	movs	r3, #8
 80076fa:	e00b      	b.n	8007714 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80076fc:	edd7 7a00 	vldr	s15, [r7]
 8007700:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007754 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x118>
 8007704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770c:	d801      	bhi.n	8007712 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd6>
 800770e:	2309      	movs	r3, #9
 8007710:	e000      	b.n	8007714 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007712:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 8007714:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	3320      	adds	r3, #32
 800771a:	7afa      	ldrb	r2, [r7, #11]
 800771c:	4611      	mov	r1, r2
 800771e:	4618      	mov	r0, r3
 8007720:	f000 fb80 	bl	8007e24 <lsm6dso16is_gy_data_rate_set>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d002      	beq.n	8007730 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 800772a:	f04f 33ff 	mov.w	r3, #4294967295
 800772e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007730:	68fb      	ldr	r3, [r7, #12]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	42500000 	.word	0x42500000
 8007740:	42d00000 	.word	0x42d00000
 8007744:	43500000 	.word	0x43500000
 8007748:	43d00000 	.word	0x43d00000
 800774c:	44504000 	.word	0x44504000
 8007750:	44d06000 	.word	0x44d06000
 8007754:	45505000 	.word	0x45505000

08007758 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
                   : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 8007764:	edd7 7a00 	vldr	s15, [r7]
 8007768:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800776c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007774:	d801      	bhi.n	800777a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8007776:	2301      	movs	r3, #1
 8007778:	e058      	b.n	800782c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800777a:	edd7 7a00 	vldr	s15, [r7]
 800777e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8007782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800778a:	d801      	bhi.n	8007790 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x38>
 800778c:	2302      	movs	r3, #2
 800778e:	e04d      	b.n	800782c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007790:	edd7 7a00 	vldr	s15, [r7]
 8007794:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8007840 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8007798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800779c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a0:	d801      	bhi.n	80077a6 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80077a2:	2303      	movs	r3, #3
 80077a4:	e042      	b.n	800782c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80077a6:	edd7 7a00 	vldr	s15, [r7]
 80077aa:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007844 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80077ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b6:	d801      	bhi.n	80077bc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80077b8:	2304      	movs	r3, #4
 80077ba:	e037      	b.n	800782c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80077bc:	edd7 7a00 	vldr	s15, [r7]
 80077c0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8007848 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80077c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077cc:	d801      	bhi.n	80077d2 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80077ce:	2305      	movs	r3, #5
 80077d0:	e02c      	b.n	800782c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80077d2:	edd7 7a00 	vldr	s15, [r7]
 80077d6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800784c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80077da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e2:	d801      	bhi.n	80077e8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80077e4:	2306      	movs	r3, #6
 80077e6:	e021      	b.n	800782c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80077e8:	edd7 7a00 	vldr	s15, [r7]
 80077ec:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8007850 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80077f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077f8:	d801      	bhi.n	80077fe <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80077fa:	2307      	movs	r3, #7
 80077fc:	e016      	b.n	800782c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80077fe:	edd7 7a00 	vldr	s15, [r7]
 8007802:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007854 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8007806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800780a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800780e:	d801      	bhi.n	8007814 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8007810:	2308      	movs	r3, #8
 8007812:	e00b      	b.n	800782c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007814:	edd7 7a00 	vldr	s15, [r7]
 8007818:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007858 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800781c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007824:	d801      	bhi.n	800782a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8007826:	2309      	movs	r3, #9
 8007828:	e000      	b.n	800782c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800782a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO16IS_GY_ODR_AT_833Hz_HP
                   : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
                   : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
                   :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	42500000 	.word	0x42500000
 8007844:	42d00000 	.word	0x42d00000
 8007848:	43500000 	.word	0x43500000
 800784c:	43d00000 	.word	0x43d00000
 8007850:	44504000 	.word	0x44504000
 8007854:	44d06000 	.word	0x44d06000
 8007858:	45505000 	.word	0x45505000

0800785c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800785c:	b590      	push	{r4, r7, lr}
 800785e:	b087      	sub	sp, #28
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	607a      	str	r2, [r7, #4]
 8007866:	461a      	mov	r2, r3
 8007868:	460b      	mov	r3, r1
 800786a:	72fb      	strb	r3, [r7, #11]
 800786c:	4613      	mov	r3, r2
 800786e:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	695c      	ldr	r4, [r3, #20]
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	7b1b      	ldrb	r3, [r3, #12]
 800787c:	4618      	mov	r0, r3
 800787e:	7afb      	ldrb	r3, [r7, #11]
 8007880:	b299      	uxth	r1, r3
 8007882:	893b      	ldrh	r3, [r7, #8]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	47a0      	blx	r4
 8007888:	4603      	mov	r3, r0
}
 800788a:	4618      	mov	r0, r3
 800788c:	371c      	adds	r7, #28
 800788e:	46bd      	mov	sp, r7
 8007890:	bd90      	pop	{r4, r7, pc}

08007892 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007892:	b590      	push	{r4, r7, lr}
 8007894:	b087      	sub	sp, #28
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	461a      	mov	r2, r3
 800789e:	460b      	mov	r3, r1
 80078a0:	72fb      	strb	r3, [r7, #11]
 80078a2:	4613      	mov	r3, r2
 80078a4:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	691c      	ldr	r4, [r3, #16]
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	7b1b      	ldrb	r3, [r3, #12]
 80078b2:	4618      	mov	r0, r3
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	b299      	uxth	r1, r3
 80078b8:	893b      	ldrh	r3, [r7, #8]
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	47a0      	blx	r4
 80078be:	4603      	mov	r3, r0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	371c      	adds	r7, #28
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd90      	pop	{r4, r7, pc}

080078c8 <lsm6dso16is_read_reg>:
  *
  */
int32_t __weak lsm6dso16is_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80078c8:	b590      	push	{r4, r7, lr}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	607a      	str	r2, [r7, #4]
 80078d2:	461a      	mov	r2, r3
 80078d4:	460b      	mov	r3, r1
 80078d6:	72fb      	strb	r3, [r7, #11]
 80078d8:	4613      	mov	r3, r2
 80078da:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d102      	bne.n	80078e8 <lsm6dso16is_read_reg+0x20>
  {
    return -1;
 80078e2:	f04f 33ff 	mov.w	r3, #4294967295
 80078e6:	e009      	b.n	80078fc <lsm6dso16is_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	685c      	ldr	r4, [r3, #4]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	68d8      	ldr	r0, [r3, #12]
 80078f0:	893b      	ldrh	r3, [r7, #8]
 80078f2:	7af9      	ldrb	r1, [r7, #11]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	47a0      	blx	r4
 80078f8:	6178      	str	r0, [r7, #20]

  return ret;
 80078fa:	697b      	ldr	r3, [r7, #20]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	371c      	adds	r7, #28
 8007900:	46bd      	mov	sp, r7
 8007902:	bd90      	pop	{r4, r7, pc}

08007904 <lsm6dso16is_write_reg>:
  *
  */
int32_t __weak lsm6dso16is_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                     uint8_t *data,
                                     uint16_t len)
{
 8007904:	b590      	push	{r4, r7, lr}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	607a      	str	r2, [r7, #4]
 800790e:	461a      	mov	r2, r3
 8007910:	460b      	mov	r3, r1
 8007912:	72fb      	strb	r3, [r7, #11]
 8007914:	4613      	mov	r3, r2
 8007916:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d102      	bne.n	8007924 <lsm6dso16is_write_reg+0x20>
  {
    return -1;
 800791e:	f04f 33ff 	mov.w	r3, #4294967295
 8007922:	e009      	b.n	8007938 <lsm6dso16is_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681c      	ldr	r4, [r3, #0]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	68d8      	ldr	r0, [r3, #12]
 800792c:	893b      	ldrh	r3, [r7, #8]
 800792e:	7af9      	ldrb	r1, [r7, #11]
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	47a0      	blx	r4
 8007934:	6178      	str	r0, [r7, #20]

  return ret;
 8007936:	697b      	ldr	r3, [r7, #20]
}
 8007938:	4618      	mov	r0, r3
 800793a:	371c      	adds	r7, #28
 800793c:	46bd      	mov	sp, r7
 800793e:	bd90      	pop	{r4, r7, pc}

08007940 <lsm6dso16is_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, ISPU_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dso16is_mem_bank_t val)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_func_cfg_access_t func_cfg_access = {0x0};
 800794c:	2300      	movs	r3, #0
 800794e:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /* no need to read it first as the only other field is a ispu reset bit */
  func_cfg_access.shub_reg_access = (val == LSM6DSO16IS_SENSOR_HUB_MEM_BANK) ? 0x1U : 0x0U;
 8007950:	78fb      	ldrb	r3, [r7, #3]
 8007952:	2b02      	cmp	r3, #2
 8007954:	d101      	bne.n	800795a <lsm6dso16is_mem_bank_set+0x1a>
 8007956:	2201      	movs	r2, #1
 8007958:	e000      	b.n	800795c <lsm6dso16is_mem_bank_set+0x1c>
 800795a:	2200      	movs	r2, #0
 800795c:	7a3b      	ldrb	r3, [r7, #8]
 800795e:	f362 1386 	bfi	r3, r2, #6, #1
 8007962:	723b      	strb	r3, [r7, #8]
  func_cfg_access.ispu_reg_access = (val == LSM6DSO16IS_ISPU_MEM_BANK) ? 0x1U : 0x0U;
 8007964:	78fb      	ldrb	r3, [r7, #3]
 8007966:	2b03      	cmp	r3, #3
 8007968:	d101      	bne.n	800796e <lsm6dso16is_mem_bank_set+0x2e>
 800796a:	2201      	movs	r2, #1
 800796c:	e000      	b.n	8007970 <lsm6dso16is_mem_bank_set+0x30>
 800796e:	2200      	movs	r2, #0
 8007970:	7a3b      	ldrb	r3, [r7, #8]
 8007972:	f362 13c7 	bfi	r3, r2, #7, #1
 8007976:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8007978:	f107 0208 	add.w	r2, r7, #8
 800797c:	2301      	movs	r3, #1
 800797e:	2101      	movs	r1, #1
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7ff ffbf 	bl	8007904 <lsm6dso16is_write_reg>
 8007986:	60f8      	str	r0, [r7, #12]

  return ret;
 8007988:	68fb      	ldr	r3, [r7, #12]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <lsm6dso16is_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_WHO_AM_I, (uint8_t *)val, 1);
 800799c:	2301      	movs	r3, #1
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	210f      	movs	r1, #15
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7ff ff90 	bl	80078c8 <lsm6dso16is_read_reg>
 80079a8:	60f8      	str	r0, [r7, #12]

  return ret;
 80079aa:	68fb      	ldr	r3, [r7, #12]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <lsm6dso16is_xl_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80079c0:	f107 0208 	add.w	r2, r7, #8
 80079c4:	2301      	movs	r3, #1
 80079c6:	2115      	movs	r1, #21
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7ff ff7d 	bl	80078c8 <lsm6dso16is_read_reg>
 80079ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10f      	bne.n	80079f6 <lsm6dso16is_xl_hm_mode_set+0x42>
  {
    ctrl6_c.xl_hm_mode = ((uint8_t)val & 0x1U);
 80079d6:	78fb      	ldrb	r3, [r7, #3]
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	7a3b      	ldrb	r3, [r7, #8]
 80079e0:	f362 1304 	bfi	r3, r2, #4, #1
 80079e4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80079e6:	f107 0208 	add.w	r2, r7, #8
 80079ea:	2301      	movs	r3, #1
 80079ec:	2115      	movs	r1, #21
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7ff ff88 	bl	8007904 <lsm6dso16is_write_reg>
 80079f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80079f6:	68fb      	ldr	r3, [r7, #12]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <lsm6dso16is_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t val)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007a0c:	f107 0208 	add.w	r2, r7, #8
 8007a10:	2301      	movs	r3, #1
 8007a12:	2110      	movs	r1, #16
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7ff ff57 	bl	80078c8 <lsm6dso16is_read_reg>
 8007a1a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10f      	bne.n	8007a42 <lsm6dso16is_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = ((uint8_t)val & 0x3U);
 8007a22:	78fb      	ldrb	r3, [r7, #3]
 8007a24:	f003 0303 	and.w	r3, r3, #3
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	7a3b      	ldrb	r3, [r7, #8]
 8007a2c:	f362 0383 	bfi	r3, r2, #2, #2
 8007a30:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007a32:	f107 0208 	add.w	r2, r7, #8
 8007a36:	2301      	movs	r3, #1
 8007a38:	2110      	movs	r1, #16
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7ff ff62 	bl	8007904 <lsm6dso16is_write_reg>
 8007a40:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007a42:	68fb      	ldr	r3, [r7, #12]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <lsm6dso16is_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t *val)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007a56:	f107 0208 	add.w	r2, r7, #8
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	2110      	movs	r1, #16
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7ff ff32 	bl	80078c8 <lsm6dso16is_read_reg>
 8007a64:	60f8      	str	r0, [r7, #12]

  switch ((ctrl1_xl.fs_xl))
 8007a66:	7a3b      	ldrb	r3, [r7, #8]
 8007a68:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d81a      	bhi.n	8007aa8 <lsm6dso16is_xl_full_scale_get+0x5c>
 8007a72:	a201      	add	r2, pc, #4	@ (adr r2, 8007a78 <lsm6dso16is_xl_full_scale_get+0x2c>)
 8007a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a78:	08007a89 	.word	0x08007a89
 8007a7c:	08007aa1 	.word	0x08007aa1
 8007a80:	08007a91 	.word	0x08007a91
 8007a84:	08007a99 	.word	0x08007a99
  {
    case LSM6DSO16IS_2g:
      *val = LSM6DSO16IS_2g;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	701a      	strb	r2, [r3, #0]
      break;
 8007a8e:	e00f      	b.n	8007ab0 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_4g:
      *val = LSM6DSO16IS_4g;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2202      	movs	r2, #2
 8007a94:	701a      	strb	r2, [r3, #0]
      break;
 8007a96:	e00b      	b.n	8007ab0 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_8g:
      *val = LSM6DSO16IS_8g;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	2203      	movs	r2, #3
 8007a9c:	701a      	strb	r2, [r3, #0]
      break;
 8007a9e:	e007      	b.n	8007ab0 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_16g:
      *val = LSM6DSO16IS_16g;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	701a      	strb	r2, [r3, #0]
      break;
 8007aa6:	e003      	b.n	8007ab0 <lsm6dso16is_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO16IS_2g;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	701a      	strb	r2, [r3, #0]
      break;
 8007aae:	bf00      	nop
  }
  return ret;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop

08007abc <lsm6dso16is_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t val)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007ac8:	f107 0208 	add.w	r2, r7, #8
 8007acc:	2301      	movs	r3, #1
 8007ace:	2110      	movs	r1, #16
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7ff fef9 	bl	80078c8 <lsm6dso16is_read_reg>
 8007ad6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d128      	bne.n	8007b30 <lsm6dso16is_xl_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 8007ade:	78fb      	ldrb	r3, [r7, #3]
 8007ae0:	f003 0310 	and.w	r3, r3, #16
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d008      	beq.n	8007afa <lsm6dso16is_xl_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 8007ae8:	2101      	movs	r1, #1
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7ff ff62 	bl	80079b4 <lsm6dso16is_xl_hm_mode_set>
 8007af0:	4602      	mov	r2, r0
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4413      	add	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	e007      	b.n	8007b0a <lsm6dso16is_xl_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 8007afa:	2100      	movs	r1, #0
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f7ff ff59 	bl	80079b4 <lsm6dso16is_xl_hm_mode_set>
 8007b02:	4602      	mov	r2, r0
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4413      	add	r3, r2
 8007b08:	60fb      	str	r3, [r7, #12]
    }

    ctrl1_xl.odr_xl = ((uint8_t)val & 0xfU);
 8007b0a:	78fb      	ldrb	r3, [r7, #3]
 8007b0c:	f003 030f 	and.w	r3, r3, #15
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	7a3b      	ldrb	r3, [r7, #8]
 8007b14:	f362 1307 	bfi	r3, r2, #4, #4
 8007b18:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007b1a:	f107 0208 	add.w	r2, r7, #8
 8007b1e:	2301      	movs	r3, #1
 8007b20:	2110      	movs	r1, #16
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7ff feee 	bl	8007904 <lsm6dso16is_write_reg>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007b30:	68fb      	ldr	r3, [r7, #12]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
	...

08007b3c <lsm6dso16is_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t *val)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007b46:	f107 0210 	add.w	r2, r7, #16
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	2110      	movs	r1, #16
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff feba 	bl	80078c8 <lsm6dso16is_read_reg>
 8007b54:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8007b56:	f107 020c 	add.w	r2, r7, #12
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	2115      	movs	r1, #21
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7ff feb2 	bl	80078c8 <lsm6dso16is_read_reg>
 8007b64:	4602      	mov	r2, r0
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	4413      	add	r3, r2
 8007b6a:	617b      	str	r3, [r7, #20]

  switch ((ctrl6_c.xl_hm_mode << 4) | (ctrl1_xl.odr_xl))
 8007b6c:	7b3b      	ldrb	r3, [r7, #12]
 8007b6e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	011b      	lsls	r3, r3, #4
 8007b76:	7c3a      	ldrb	r2, [r7, #16]
 8007b78:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007b7c:	b2d2      	uxtb	r2, r2
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	2b1b      	cmp	r3, #27
 8007b82:	f200 8093 	bhi.w	8007cac <lsm6dso16is_xl_data_rate_get+0x170>
 8007b86:	a201      	add	r2, pc, #4	@ (adr r2, 8007b8c <lsm6dso16is_xl_data_rate_get+0x50>)
 8007b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8c:	08007bfd 	.word	0x08007bfd
 8007b90:	08007c05 	.word	0x08007c05
 8007b94:	08007c0d 	.word	0x08007c0d
 8007b98:	08007c15 	.word	0x08007c15
 8007b9c:	08007c1d 	.word	0x08007c1d
 8007ba0:	08007c25 	.word	0x08007c25
 8007ba4:	08007c2d 	.word	0x08007c2d
 8007ba8:	08007c35 	.word	0x08007c35
 8007bac:	08007c3d 	.word	0x08007c3d
 8007bb0:	08007c45 	.word	0x08007c45
 8007bb4:	08007c4d 	.word	0x08007c4d
 8007bb8:	08007cad 	.word	0x08007cad
 8007bbc:	08007cad 	.word	0x08007cad
 8007bc0:	08007cad 	.word	0x08007cad
 8007bc4:	08007cad 	.word	0x08007cad
 8007bc8:	08007cad 	.word	0x08007cad
 8007bcc:	08007cad 	.word	0x08007cad
 8007bd0:	08007c55 	.word	0x08007c55
 8007bd4:	08007c5d 	.word	0x08007c5d
 8007bd8:	08007c65 	.word	0x08007c65
 8007bdc:	08007c6d 	.word	0x08007c6d
 8007be0:	08007c75 	.word	0x08007c75
 8007be4:	08007c7d 	.word	0x08007c7d
 8007be8:	08007c85 	.word	0x08007c85
 8007bec:	08007c8d 	.word	0x08007c8d
 8007bf0:	08007c95 	.word	0x08007c95
 8007bf4:	08007c9d 	.word	0x08007c9d
 8007bf8:	08007ca5 	.word	0x08007ca5
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	701a      	strb	r2, [r3, #0]
      break;
 8007c02:	e057      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_HP;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	2201      	movs	r2, #1
 8007c08:	701a      	strb	r2, [r3, #0]
      break;
 8007c0a:	e053      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_HP;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	701a      	strb	r2, [r3, #0]
      break;
 8007c12:	e04f      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_HP;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	2203      	movs	r2, #3
 8007c18:	701a      	strb	r2, [r3, #0]
      break;
 8007c1a:	e04b      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	2204      	movs	r2, #4
 8007c20:	701a      	strb	r2, [r3, #0]
      break;
 8007c22:	e047      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_HP;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2205      	movs	r2, #5
 8007c28:	701a      	strb	r2, [r3, #0]
      break;
 8007c2a:	e043      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_HP;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2206      	movs	r2, #6
 8007c30:	701a      	strb	r2, [r3, #0]
      break;
 8007c32:	e03f      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_HP;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2207      	movs	r2, #7
 8007c38:	701a      	strb	r2, [r3, #0]
      break;
 8007c3a:	e03b      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_HP;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	2208      	movs	r2, #8
 8007c40:	701a      	strb	r2, [r3, #0]
      break;
 8007c42:	e037      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_HP;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2209      	movs	r2, #9
 8007c48:	701a      	strb	r2, [r3, #0]
      break;
 8007c4a:	e033      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	220a      	movs	r2, #10
 8007c50:	701a      	strb	r2, [r3, #0]
      break;
 8007c52:	e02f      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_LP;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2211      	movs	r2, #17
 8007c58:	701a      	strb	r2, [r3, #0]
      break;
 8007c5a:	e02b      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_LP;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	2212      	movs	r2, #18
 8007c60:	701a      	strb	r2, [r3, #0]
      break;
 8007c62:	e027      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_LP;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2213      	movs	r2, #19
 8007c68:	701a      	strb	r2, [r3, #0]
      break;
 8007c6a:	e023      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_LP;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	2214      	movs	r2, #20
 8007c70:	701a      	strb	r2, [r3, #0]
      break;
 8007c72:	e01f      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_LP;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2215      	movs	r2, #21
 8007c78:	701a      	strb	r2, [r3, #0]
      break;
 8007c7a:	e01b      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_LP;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	2216      	movs	r2, #22
 8007c80:	701a      	strb	r2, [r3, #0]
      break;
 8007c82:	e017      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_LP;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2217      	movs	r2, #23
 8007c88:	701a      	strb	r2, [r3, #0]
      break;
 8007c8a:	e013      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_LP;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2218      	movs	r2, #24
 8007c90:	701a      	strb	r2, [r3, #0]
      break;
 8007c92:	e00f      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_LP;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	2219      	movs	r2, #25
 8007c98:	701a      	strb	r2, [r3, #0]
      break;
 8007c9a:	e00b      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_LP;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	221a      	movs	r2, #26
 8007ca0:	701a      	strb	r2, [r3, #0]
      break;
 8007ca2:	e007      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1Hz6_LP;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	221b      	movs	r2, #27
 8007ca8:	701a      	strb	r2, [r3, #0]
      break;
 8007caa:	e003      	b.n	8007cb4 <lsm6dso16is_xl_data_rate_get+0x178>

    default:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	701a      	strb	r2, [r3, #0]
      break;
 8007cb2:	bf00      	nop
  }

  return ret;
 8007cb4:	697b      	ldr	r3, [r7, #20]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop

08007cc0 <lsm6dso16is_gy_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8007ccc:	f107 0208 	add.w	r2, r7, #8
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	2116      	movs	r1, #22
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7ff fdf7 	bl	80078c8 <lsm6dso16is_read_reg>
 8007cda:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10f      	bne.n	8007d02 <lsm6dso16is_gy_hm_mode_set+0x42>
  {
    ctrl7_g.g_hm_mode = ((uint8_t)val & 0x1U);
 8007ce2:	78fb      	ldrb	r3, [r7, #3]
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	7a3b      	ldrb	r3, [r7, #8]
 8007cec:	f362 13c7 	bfi	r3, r2, #7, #1
 8007cf0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8007cf2:	f107 0208 	add.w	r2, r7, #8
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	2116      	movs	r1, #22
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f7ff fe02 	bl	8007904 <lsm6dso16is_write_reg>
 8007d00:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007d02:	68fb      	ldr	r3, [r7, #12]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <lsm6dso16is_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t val)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	460b      	mov	r3, r1
 8007d16:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007d18:	f107 0208 	add.w	r2, r7, #8
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	2111      	movs	r1, #17
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7ff fdd1 	bl	80078c8 <lsm6dso16is_read_reg>
 8007d26:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d119      	bne.n	8007d62 <lsm6dso16is_gy_full_scale_set+0x56>
  {
    ctrl2_g.fs_g = ((uint8_t)val & 0x3U);
 8007d2e:	78fb      	ldrb	r3, [r7, #3]
 8007d30:	f003 0303 	and.w	r3, r3, #3
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	7a3b      	ldrb	r3, [r7, #8]
 8007d38:	f362 0383 	bfi	r3, r2, #2, #2
 8007d3c:	723b      	strb	r3, [r7, #8]
    ctrl2_g.fs_125 = ((uint8_t)val >> 4);
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	091b      	lsrs	r3, r3, #4
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	7a3b      	ldrb	r3, [r7, #8]
 8007d4c:	f362 0341 	bfi	r3, r2, #1, #1
 8007d50:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007d52:	f107 0208 	add.w	r2, r7, #8
 8007d56:	2301      	movs	r3, #1
 8007d58:	2111      	movs	r1, #17
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7ff fdd2 	bl	8007904 <lsm6dso16is_write_reg>
 8007d60:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007d62:	68fb      	ldr	r3, [r7, #12]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <lsm6dso16is_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t *val)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007d76:	f107 0208 	add.w	r2, r7, #8
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	2111      	movs	r1, #17
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7ff fda2 	bl	80078c8 <lsm6dso16is_read_reg>
 8007d84:	60f8      	str	r0, [r7, #12]

  switch ((ctrl2_g.fs_125 << 4) | (ctrl2_g.fs_g))
 8007d86:	7a3b      	ldrb	r3, [r7, #8]
 8007d88:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	011b      	lsls	r3, r3, #4
 8007d90:	7a3a      	ldrb	r2, [r7, #8]
 8007d92:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	2b10      	cmp	r3, #16
 8007d9c:	d838      	bhi.n	8007e10 <lsm6dso16is_gy_full_scale_get+0xa4>
 8007d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007da4 <lsm6dso16is_gy_full_scale_get+0x38>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007df1 	.word	0x08007df1
 8007da8:	08007df9 	.word	0x08007df9
 8007dac:	08007e01 	.word	0x08007e01
 8007db0:	08007e09 	.word	0x08007e09
 8007db4:	08007e11 	.word	0x08007e11
 8007db8:	08007e11 	.word	0x08007e11
 8007dbc:	08007e11 	.word	0x08007e11
 8007dc0:	08007e11 	.word	0x08007e11
 8007dc4:	08007e11 	.word	0x08007e11
 8007dc8:	08007e11 	.word	0x08007e11
 8007dcc:	08007e11 	.word	0x08007e11
 8007dd0:	08007e11 	.word	0x08007e11
 8007dd4:	08007e11 	.word	0x08007e11
 8007dd8:	08007e11 	.word	0x08007e11
 8007ddc:	08007e11 	.word	0x08007e11
 8007de0:	08007e11 	.word	0x08007e11
 8007de4:	08007de9 	.word	0x08007de9
  {
    case LSM6DSO16IS_125dps:
      *val = LSM6DSO16IS_125dps;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	2210      	movs	r2, #16
 8007dec:	701a      	strb	r2, [r3, #0]
      break;
 8007dee:	e013      	b.n	8007e18 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_250dps:
      *val = LSM6DSO16IS_250dps;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	2200      	movs	r2, #0
 8007df4:	701a      	strb	r2, [r3, #0]
      break;
 8007df6:	e00f      	b.n	8007e18 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_500dps:
      *val = LSM6DSO16IS_500dps;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	701a      	strb	r2, [r3, #0]
      break;
 8007dfe:	e00b      	b.n	8007e18 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_1000dps:
      *val = LSM6DSO16IS_1000dps;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	2202      	movs	r2, #2
 8007e04:	701a      	strb	r2, [r3, #0]
      break;
 8007e06:	e007      	b.n	8007e18 <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_2000dps:
      *val = LSM6DSO16IS_2000dps;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	2203      	movs	r2, #3
 8007e0c:	701a      	strb	r2, [r3, #0]
      break;
 8007e0e:	e003      	b.n	8007e18 <lsm6dso16is_gy_full_scale_get+0xac>

    default:
      *val = LSM6DSO16IS_125dps;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	2210      	movs	r2, #16
 8007e14:	701a      	strb	r2, [r3, #0]
      break;
 8007e16:	bf00      	nop
  }
  return ret;
 8007e18:	68fb      	ldr	r3, [r7, #12]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop

08007e24 <lsm6dso16is_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t val)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007e30:	f107 0208 	add.w	r2, r7, #8
 8007e34:	2301      	movs	r3, #1
 8007e36:	2111      	movs	r1, #17
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f7ff fd45 	bl	80078c8 <lsm6dso16is_read_reg>
 8007e3e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d128      	bne.n	8007e98 <lsm6dso16is_gy_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 8007e46:	78fb      	ldrb	r3, [r7, #3]
 8007e48:	f003 0310 	and.w	r3, r3, #16
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d008      	beq.n	8007e62 <lsm6dso16is_gy_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 8007e50:	2101      	movs	r1, #1
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7ff ff34 	bl	8007cc0 <lsm6dso16is_gy_hm_mode_set>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	e007      	b.n	8007e72 <lsm6dso16is_gy_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 8007e62:	2100      	movs	r1, #0
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7ff ff2b 	bl	8007cc0 <lsm6dso16is_gy_hm_mode_set>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	4413      	add	r3, r2
 8007e70:	60fb      	str	r3, [r7, #12]
    }

    ctrl2_g.odr_g = ((uint8_t)val & 0xfU);
 8007e72:	78fb      	ldrb	r3, [r7, #3]
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	7a3b      	ldrb	r3, [r7, #8]
 8007e7c:	f362 1307 	bfi	r3, r2, #4, #4
 8007e80:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007e82:	f107 0208 	add.w	r2, r7, #8
 8007e86:	2301      	movs	r3, #1
 8007e88:	2111      	movs	r1, #17
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7ff fd3a 	bl	8007904 <lsm6dso16is_write_reg>
 8007e90:	4602      	mov	r2, r0
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	4413      	add	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007e98:	68fb      	ldr	r3, [r7, #12]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
	...

08007ea4 <lsm6dso16is_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t *val)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007eae:	f107 0210 	add.w	r2, r7, #16
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	2111      	movs	r1, #17
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7ff fd06 	bl	80078c8 <lsm6dso16is_read_reg>
 8007ebc:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8007ebe:	f107 020c 	add.w	r2, r7, #12
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	2116      	movs	r1, #22
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7ff fcfe 	bl	80078c8 <lsm6dso16is_read_reg>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	617b      	str	r3, [r7, #20]

  switch ((ctrl7_g.g_hm_mode << 4) | (ctrl2_g.odr_g))
 8007ed4:	7b3b      	ldrb	r3, [r7, #12]
 8007ed6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	011b      	lsls	r3, r3, #4
 8007ede:	7c3a      	ldrb	r2, [r7, #16]
 8007ee0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007ee4:	b2d2      	uxtb	r2, r2
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	2b1a      	cmp	r3, #26
 8007eea:	f200 808d 	bhi.w	8008008 <lsm6dso16is_gy_data_rate_get+0x164>
 8007eee:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef4 <lsm6dso16is_gy_data_rate_get+0x50>)
 8007ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef4:	08007f61 	.word	0x08007f61
 8007ef8:	08007f69 	.word	0x08007f69
 8007efc:	08007f71 	.word	0x08007f71
 8007f00:	08007f79 	.word	0x08007f79
 8007f04:	08007f81 	.word	0x08007f81
 8007f08:	08007f89 	.word	0x08007f89
 8007f0c:	08007f91 	.word	0x08007f91
 8007f10:	08007f99 	.word	0x08007f99
 8007f14:	08007fa1 	.word	0x08007fa1
 8007f18:	08007fa9 	.word	0x08007fa9
 8007f1c:	08007fb1 	.word	0x08007fb1
 8007f20:	08008009 	.word	0x08008009
 8007f24:	08008009 	.word	0x08008009
 8007f28:	08008009 	.word	0x08008009
 8007f2c:	08008009 	.word	0x08008009
 8007f30:	08008009 	.word	0x08008009
 8007f34:	08008009 	.word	0x08008009
 8007f38:	08007fb9 	.word	0x08007fb9
 8007f3c:	08007fc1 	.word	0x08007fc1
 8007f40:	08007fc9 	.word	0x08007fc9
 8007f44:	08007fd1 	.word	0x08007fd1
 8007f48:	08007fd9 	.word	0x08007fd9
 8007f4c:	08007fe1 	.word	0x08007fe1
 8007f50:	08007fe9 	.word	0x08007fe9
 8007f54:	08007ff1 	.word	0x08007ff1
 8007f58:	08007ff9 	.word	0x08007ff9
 8007f5c:	08008001 	.word	0x08008001
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	2200      	movs	r2, #0
 8007f64:	701a      	strb	r2, [r3, #0]
      break;
 8007f66:	e053      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_HP;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	701a      	strb	r2, [r3, #0]
      break;
 8007f6e:	e04f      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_HP;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	2202      	movs	r2, #2
 8007f74:	701a      	strb	r2, [r3, #0]
      break;
 8007f76:	e04b      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_HP;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	2203      	movs	r2, #3
 8007f7c:	701a      	strb	r2, [r3, #0]
      break;
 8007f7e:	e047      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2204      	movs	r2, #4
 8007f84:	701a      	strb	r2, [r3, #0]
      break;
 8007f86:	e043      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_HP;
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	2205      	movs	r2, #5
 8007f8c:	701a      	strb	r2, [r3, #0]
      break;
 8007f8e:	e03f      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_HP;
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2206      	movs	r2, #6
 8007f94:	701a      	strb	r2, [r3, #0]
      break;
 8007f96:	e03b      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_HP;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	2207      	movs	r2, #7
 8007f9c:	701a      	strb	r2, [r3, #0]
      break;
 8007f9e:	e037      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_HP;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	2208      	movs	r2, #8
 8007fa4:	701a      	strb	r2, [r3, #0]
      break;
 8007fa6:	e033      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_HP;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2209      	movs	r2, #9
 8007fac:	701a      	strb	r2, [r3, #0]
      break;
 8007fae:	e02f      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	220a      	movs	r2, #10
 8007fb4:	701a      	strb	r2, [r3, #0]
      break;
 8007fb6:	e02b      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_LP;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	2211      	movs	r2, #17
 8007fbc:	701a      	strb	r2, [r3, #0]
      break;
 8007fbe:	e027      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_LP;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	2212      	movs	r2, #18
 8007fc4:	701a      	strb	r2, [r3, #0]
      break;
 8007fc6:	e023      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_LP;
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2213      	movs	r2, #19
 8007fcc:	701a      	strb	r2, [r3, #0]
      break;
 8007fce:	e01f      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_LP;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2214      	movs	r2, #20
 8007fd4:	701a      	strb	r2, [r3, #0]
      break;
 8007fd6:	e01b      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_LP;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	2215      	movs	r2, #21
 8007fdc:	701a      	strb	r2, [r3, #0]
      break;
 8007fde:	e017      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_LP;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	2216      	movs	r2, #22
 8007fe4:	701a      	strb	r2, [r3, #0]
      break;
 8007fe6:	e013      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_LP;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	2217      	movs	r2, #23
 8007fec:	701a      	strb	r2, [r3, #0]
      break;
 8007fee:	e00f      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_LP;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	2218      	movs	r2, #24
 8007ff4:	701a      	strb	r2, [r3, #0]
      break;
 8007ff6:	e00b      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_LP;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	2219      	movs	r2, #25
 8007ffc:	701a      	strb	r2, [r3, #0]
      break;
 8007ffe:	e007      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_LP;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	221a      	movs	r2, #26
 8008004:	701a      	strb	r2, [r3, #0]
      break;
 8008006:	e003      	b.n	8008010 <lsm6dso16is_gy_data_rate_get+0x16c>

    default:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	2200      	movs	r2, #0
 800800c:	701a      	strb	r2, [r3, #0]
      break;
 800800e:	bf00      	nop
  }

  return ret;
 8008010:	697b      	ldr	r3, [r7, #20]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop

0800801c <lsm6dso16is_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8008028:	f107 0208 	add.w	r2, r7, #8
 800802c:	2301      	movs	r3, #1
 800802e:	2112      	movs	r1, #18
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7ff fc49 	bl	80078c8 <lsm6dso16is_read_reg>
 8008036:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d10f      	bne.n	800805e <lsm6dso16is_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 800803e:	78fb      	ldrb	r3, [r7, #3]
 8008040:	f003 0301 	and.w	r3, r3, #1
 8008044:	b2da      	uxtb	r2, r3
 8008046:	7a3b      	ldrb	r3, [r7, #8]
 8008048:	f362 0382 	bfi	r3, r2, #2, #1
 800804c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800804e:	f107 0208 	add.w	r2, r7, #8
 8008052:	2301      	movs	r3, #1
 8008054:	2112      	movs	r1, #18
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7ff fc54 	bl	8007904 <lsm6dso16is_write_reg>
 800805c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800805e:	68fb      	ldr	r3, [r7, #12]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <lsm6dso16is_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8008074:	f107 0208 	add.w	r2, r7, #8
 8008078:	2301      	movs	r3, #1
 800807a:	2112      	movs	r1, #18
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f7ff fc23 	bl	80078c8 <lsm6dso16is_read_reg>
 8008082:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10f      	bne.n	80080aa <lsm6dso16is_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800808a:	78fb      	ldrb	r3, [r7, #3]
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	b2da      	uxtb	r2, r3
 8008092:	7a3b      	ldrb	r3, [r7, #8]
 8008094:	f362 1386 	bfi	r3, r2, #6, #1
 8008098:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800809a:	f107 0208 	add.w	r2, r7, #8
 800809e:	2301      	movs	r3, #1
 80080a0:	2112      	movs	r1, #18
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7ff fc2e 	bl	8007904 <lsm6dso16is_write_reg>
 80080a8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80080aa:	68fb      	ldr	r3, [r7, #12]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <lsm6dso16is_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_G, buff, 6);
 80080be:	f107 020c 	add.w	r2, r7, #12
 80080c2:	2306      	movs	r3, #6
 80080c4:	2122      	movs	r1, #34	@ 0x22
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7ff fbfe 	bl	80078c8 <lsm6dso16is_read_reg>
 80080cc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80080ce:	7b7b      	ldrb	r3, [r7, #13]
 80080d0:	b21a      	sxth	r2, r3
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80080dc:	b29b      	uxth	r3, r3
 80080de:	021b      	lsls	r3, r3, #8
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	7b3a      	ldrb	r2, [r7, #12]
 80080e4:	4413      	add	r3, r2
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	b21a      	sxth	r2, r3
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80080ee:	7bfa      	ldrb	r2, [r7, #15]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	3302      	adds	r3, #2
 80080f4:	b212      	sxth	r2, r2
 80080f6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	3302      	adds	r3, #2
 80080fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008100:	b29b      	uxth	r3, r3
 8008102:	021b      	lsls	r3, r3, #8
 8008104:	b29b      	uxth	r3, r3
 8008106:	7bba      	ldrb	r2, [r7, #14]
 8008108:	4413      	add	r3, r2
 800810a:	b29a      	uxth	r2, r3
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	3302      	adds	r3, #2
 8008110:	b212      	sxth	r2, r2
 8008112:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008114:	7c7a      	ldrb	r2, [r7, #17]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	3304      	adds	r3, #4
 800811a:	b212      	sxth	r2, r2
 800811c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	3304      	adds	r3, #4
 8008122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008126:	b29b      	uxth	r3, r3
 8008128:	021b      	lsls	r3, r3, #8
 800812a:	b29b      	uxth	r3, r3
 800812c:	7c3a      	ldrb	r2, [r7, #16]
 800812e:	4413      	add	r3, r2
 8008130:	b29a      	uxth	r2, r3
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	3304      	adds	r3, #4
 8008136:	b212      	sxth	r2, r2
 8008138:	801a      	strh	r2, [r3, #0]

  return ret;
 800813a:	697b      	ldr	r3, [r7, #20]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3718      	adds	r7, #24
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <lsm6dso16is_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_A, buff, 6);
 800814e:	f107 020c 	add.w	r2, r7, #12
 8008152:	2306      	movs	r3, #6
 8008154:	2128      	movs	r1, #40	@ 0x28
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7ff fbb6 	bl	80078c8 <lsm6dso16is_read_reg>
 800815c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800815e:	7b7b      	ldrb	r3, [r7, #13]
 8008160:	b21a      	sxth	r2, r3
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800816c:	b29b      	uxth	r3, r3
 800816e:	021b      	lsls	r3, r3, #8
 8008170:	b29b      	uxth	r3, r3
 8008172:	7b3a      	ldrb	r2, [r7, #12]
 8008174:	4413      	add	r3, r2
 8008176:	b29b      	uxth	r3, r3
 8008178:	b21a      	sxth	r2, r3
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800817e:	7bfa      	ldrb	r2, [r7, #15]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	3302      	adds	r3, #2
 8008184:	b212      	sxth	r2, r2
 8008186:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	3302      	adds	r3, #2
 800818c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008190:	b29b      	uxth	r3, r3
 8008192:	021b      	lsls	r3, r3, #8
 8008194:	b29b      	uxth	r3, r3
 8008196:	7bba      	ldrb	r2, [r7, #14]
 8008198:	4413      	add	r3, r2
 800819a:	b29a      	uxth	r2, r3
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	3302      	adds	r3, #2
 80081a0:	b212      	sxth	r2, r2
 80081a2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80081a4:	7c7a      	ldrb	r2, [r7, #17]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	3304      	adds	r3, #4
 80081aa:	b212      	sxth	r2, r2
 80081ac:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	3304      	adds	r3, #4
 80081b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	021b      	lsls	r3, r3, #8
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	7c3a      	ldrb	r2, [r7, #16]
 80081be:	4413      	add	r3, r2
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	3304      	adds	r3, #4
 80081c6:	b212      	sxth	r2, r2
 80081c8:	801a      	strh	r2, [r3, #0]

  return ret;
 80081ca:	697b      	ldr	r3, [r7, #20]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3718      	adds	r7, #24
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <LSM6DSV16X_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_RegisterBusIO(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_IO_t *pIO)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d103      	bne.n	80081f0 <LSM6DSV16X_RegisterBusIO+0x1c>
  {
    ret = LSM6DSV16X_ERROR;
 80081e8:	f04f 33ff 	mov.w	r3, #4294967295
 80081ec:	60fb      	str	r3, [r7, #12]
 80081ee:	e05d      	b.n	80082ac <LSM6DSV16X_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init       = pIO->Init;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit     = pIO->DeInit;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType    = pIO->BusType;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	609a      	str	r2, [r3, #8]
    pObj->IO.Address    = pIO->Address;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	7b1a      	ldrb	r2, [r3, #12]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg   = pIO->WriteReg;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	691a      	ldr	r2, [r3, #16]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg    = pIO->ReadReg;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	695a      	ldr	r2, [r3, #20]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick    = pIO->GetTick;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	699a      	ldr	r2, [r3, #24]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a23      	ldr	r2, [pc, #140]	@ (80082b8 <LSM6DSV16X_RegisterBusIO+0xe4>)
 800822c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a22      	ldr	r2, [pc, #136]	@ (80082bc <LSM6DSV16X_RegisterBusIO+0xe8>)
 8008232:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	69da      	ldr	r2, [r3, #28]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d103      	bne.n	8008252 <LSM6DSV16X_RegisterBusIO+0x7e>
    {
      ret = LSM6DSV16X_ERROR;
 800824a:	f04f 33ff 	mov.w	r3, #4294967295
 800824e:	60fb      	str	r3, [r7, #12]
 8008250:	e02c      	b.n	80082ac <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LSM6DSV16X_OK)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4798      	blx	r3
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <LSM6DSV16X_RegisterBusIO+0x92>
    {
      ret = LSM6DSV16X_ERROR;
 800825e:	f04f 33ff 	mov.w	r3, #4294967295
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	e022      	b.n	80082ac <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSV16X_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	2b02      	cmp	r3, #2
 800826c:	d11e      	bne.n	80082ac <LSM6DSV16X_RegisterBusIO+0xd8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008274:	2b00      	cmp	r3, #0
 8008276:	d119      	bne.n	80082ac <LSM6DSV16X_RegisterBusIO+0xd8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x04;
 8008278:	2304      	movs	r3, #4
 800827a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_CTRL3, data) != LSM6DSV16X_OK)
 800827c:	7afb      	ldrb	r3, [r7, #11]
 800827e:	461a      	mov	r2, r3
 8008280:	2112      	movs	r1, #18
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 ff18 	bl	80090b8 <LSM6DSV16X_Write_Reg>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <LSM6DSV16X_RegisterBusIO+0xc0>
          {
            ret = LSM6DSV16X_ERROR;
 800828e:	f04f 33ff 	mov.w	r3, #4294967295
 8008292:	60fb      	str	r3, [r7, #12]
          }

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_IF_CFG, data) != LSM6DSV16X_OK)
 8008294:	7afb      	ldrb	r3, [r7, #11]
 8008296:	461a      	mov	r2, r3
 8008298:	2103      	movs	r1, #3
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 ff0c 	bl	80090b8 <LSM6DSV16X_Write_Reg>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d002      	beq.n	80082ac <LSM6DSV16X_RegisterBusIO+0xd8>
          {
            ret = LSM6DSV16X_ERROR;
 80082a6:	f04f 33ff 	mov.w	r3, #4294967295
 80082aa:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80082ac:	68fb      	ldr	r3, [r7, #12]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	080095f9 	.word	0x080095f9
 80082bc:	0800962f 	.word	0x0800962f

080082c0 <LSM6DSV16X_Init>:
  * @brief  Initialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Init(LSM6DSV16X_Object_t *pObj)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Set main memory bank */
  if (LSM6DSV16X_Set_Mem_Bank(pObj, (uint8_t)LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 80082c8:	2100      	movs	r1, #0
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 ff0f 	bl	80090ee <LSM6DSV16X_Set_Mem_Bank>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d002      	beq.n	80082dc <LSM6DSV16X_Init+0x1c>
  {
    return LSM6DSV16X_ERROR;
 80082d6:	f04f 33ff 	mov.w	r3, #4294967295
 80082da:	e070      	b.n	80083be <LSM6DSV16X_Init+0xfe>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface */
  if (lsm6dsv16x_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	3320      	adds	r3, #32
 80082e0:	2101      	movs	r1, #1
 80082e2:	4618      	mov	r0, r3
 80082e4:	f001 fcfe 	bl	8009ce4 <lsm6dsv16x_auto_increment_set>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d002      	beq.n	80082f4 <LSM6DSV16X_Init+0x34>
  {
    return LSM6DSV16X_ERROR;
 80082ee:	f04f 33ff 	mov.w	r3, #4294967295
 80082f2:	e064      	b.n	80083be <LSM6DSV16X_Init+0xfe>
  }

  /* Enable BDU */
  if (lsm6dsv16x_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	3320      	adds	r3, #32
 80082f8:	2101      	movs	r1, #1
 80082fa:	4618      	mov	r0, r3
 80082fc:	f001 fd18 	bl	8009d30 <lsm6dsv16x_block_data_update_set>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d002      	beq.n	800830c <LSM6DSV16X_Init+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8008306:	f04f 33ff 	mov.w	r3, #4294967295
 800830a:	e058      	b.n	80083be <LSM6DSV16X_Init+0xfe>
  }

  /* WAKE_UP mode selection */
  if (lsm6dsv16x_fifo_mode_set(&(pObj->Ctx), LSM6DSV16X_BYPASS_MODE) != LSM6DSV16X_OK)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	3320      	adds	r3, #32
 8008310:	2100      	movs	r1, #0
 8008312:	4618      	mov	r0, r3
 8008314:	f001 feae 	bl	800a074 <lsm6dsv16x_fifo_mode_set>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d002      	beq.n	8008324 <LSM6DSV16X_Init+0x64>
  {
    return LSM6DSV16X_ERROR;
 800831e:	f04f 33ff 	mov.w	r3, #4294967295
 8008322:	e04c      	b.n	80083be <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_AT_120Hz;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2206      	movs	r2, #6
 8008328:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	3320      	adds	r3, #32
 8008330:	2100      	movs	r1, #0
 8008332:	4618      	mov	r0, r3
 8008334:	f001 fa14 	bl	8009760 <lsm6dsv16x_xl_data_rate_set>
 8008338:	4603      	mov	r3, r0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <LSM6DSV16X_Init+0x84>
  {
    return LSM6DSV16X_ERROR;
 800833e:	f04f 33ff 	mov.w	r3, #4294967295
 8008342:	e03c      	b.n	80083be <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2g) != LSM6DSV16X_OK)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3320      	adds	r3, #32
 8008348:	2100      	movs	r1, #0
 800834a:	4618      	mov	r0, r3
 800834c:	f001 fd94 	bl	8009e78 <lsm6dsv16x_xl_full_scale_set>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d002      	beq.n	800835c <LSM6DSV16X_Init+0x9c>
  {
    return LSM6DSV16X_ERROR;
 8008356:	f04f 33ff 	mov.w	r3, #4294967295
 800835a:	e030      	b.n	80083be <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->gyro_odr = LSM6DSV16X_ODR_AT_120Hz;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2206      	movs	r2, #6
 8008360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	3320      	adds	r3, #32
 8008368:	2100      	movs	r1, #0
 800836a:	4618      	mov	r0, r3
 800836c:	f001 fb5a 	bl	8009a24 <lsm6dsv16x_gy_data_rate_set>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <LSM6DSV16X_Init+0xbc>
  {
    return LSM6DSV16X_ERROR;
 8008376:	f04f 33ff 	mov.w	r3, #4294967295
 800837a:	e020      	b.n	80083be <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2000dps) != LSM6DSV16X_OK)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	3320      	adds	r3, #32
 8008380:	2104      	movs	r1, #4
 8008382:	4618      	mov	r0, r3
 8008384:	f001 fcfa 	bl	8009d7c <lsm6dsv16x_gy_full_scale_set>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d002      	beq.n	8008394 <LSM6DSV16X_Init+0xd4>
  {
    return LSM6DSV16X_ERROR;
 800838e:	f04f 33ff 	mov.w	r3, #4294967295
 8008392:	e014      	b.n	80083be <LSM6DSV16X_Init+0xfe>
  }

  /* Enable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 1;
 8008394:	7b3b      	ldrb	r3, [r7, #12]
 8008396:	f043 0301 	orr.w	r3, r3, #1
 800839a:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3320      	adds	r3, #32
 80083a0:	7b39      	ldrb	r1, [r7, #12]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f001 fe8c 	bl	800a0c0 <lsm6dsv16x_ah_qvar_mode_set>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d002      	beq.n	80083b4 <LSM6DSV16X_Init+0xf4>
  {
    return LSM6DSV16X_ERROR;
 80083ae:	f04f 33ff 	mov.w	r3, #4294967295
 80083b2:	e004      	b.n	80083be <LSM6DSV16X_Init+0xfe>
  }

  pObj->is_initialized = 1;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <LSM6DSV16X_DeInit>:
  * @brief  Deinitialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_DeInit(LSM6DSV16X_Object_t *pObj)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSV16X_ACC_Disable(pObj) != LSM6DSV16X_OK)
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f898 	bl	8008504 <LSM6DSV16X_ACC_Disable>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <LSM6DSV16X_DeInit+0x1a>
  {
    return LSM6DSV16X_ERROR;
 80083da:	f04f 33ff 	mov.w	r3, #4294967295
 80083de:	e025      	b.n	800842c <LSM6DSV16X_DeInit+0x66>
  }

  if (LSM6DSV16X_GYRO_Disable(pObj) != LSM6DSV16X_OK)
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fb6a 	bl	8008aba <LSM6DSV16X_GYRO_Disable>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d002      	beq.n	80083f2 <LSM6DSV16X_DeInit+0x2c>
  {
    return LSM6DSV16X_ERROR;
 80083ec:	f04f 33ff 	mov.w	r3, #4294967295
 80083f0:	e01c      	b.n	800842c <LSM6DSV16X_DeInit+0x66>
  }

  /* Reset output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_OFF;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSV16X_ODR_OFF;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 0;
 8008402:	7b3b      	ldrb	r3, [r7, #12]
 8008404:	f023 0301 	bic.w	r3, r3, #1
 8008408:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	3320      	adds	r3, #32
 800840e:	7b39      	ldrb	r1, [r7, #12]
 8008410:	4618      	mov	r0, r3
 8008412:	f001 fe55 	bl	800a0c0 <lsm6dsv16x_ah_qvar_mode_set>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <LSM6DSV16X_DeInit+0x5c>
  {
    return LSM6DSV16X_ERROR;
 800841c:	f04f 33ff 	mov.w	r3, #4294967295
 8008420:	e004      	b.n	800842c <LSM6DSV16X_DeInit+0x66>
  }

  pObj->is_initialized = 0;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <LSM6DSV16X_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ReadID(LSM6DSV16X_Object_t *pObj, uint8_t *Id)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  if (lsm6dsv16x_device_id_get(&(pObj->Ctx), Id) != LSM6DSV16X_OK)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3320      	adds	r3, #32
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	4618      	mov	r0, r3
 8008446:	f001 f97a 	bl	800973e <lsm6dsv16x_device_id_get>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d002      	beq.n	8008456 <LSM6DSV16X_ReadID+0x22>
  {
    return LSM6DSV16X_ERROR;
 8008450:	f04f 33ff 	mov.w	r3, #4294967295
 8008454:	e000      	b.n	8008458 <LSM6DSV16X_ReadID+0x24>
  }

  return LSM6DSV16X_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <LSM6DSV16X_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSV16X sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GetCapabilities(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Capabilities_t *Capabilities)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2201      	movs	r2, #1
 800846e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	2201      	movs	r2, #1
 8008474:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2200      	movs	r2, #0
 800847a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 1;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	2201      	movs	r2, #1
 8008480:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8008488:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	2210      	movs	r2, #16
 800848e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	2200      	movs	r2, #0
 8008494:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 7680.0f;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	4a07      	ldr	r2, [pc, #28]	@ (80084b8 <LSM6DSV16X_GetCapabilities+0x58>)
 800849a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 7680.0f;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	4a06      	ldr	r2, [pc, #24]	@ (80084b8 <LSM6DSV16X_GetCapabilities+0x58>)
 80084a0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	f04f 0200 	mov.w	r2, #0
 80084a8:	619a      	str	r2, [r3, #24]
  return LSM6DSV16X_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	45f00000 	.word	0x45f00000

080084bc <LSM6DSV16X_ACC_Enable>:
  * @brief  Enable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Enable(LSM6DSV16X_Object_t *pObj)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d101      	bne.n	80084d2 <LSM6DSV16X_ACC_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 80084ce:	2300      	movs	r3, #0
 80084d0:	e014      	b.n	80084fc <LSM6DSV16X_ACC_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSV16X_OK)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f103 0220 	add.w	r2, r3, #32
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80084de:	4619      	mov	r1, r3
 80084e0:	4610      	mov	r0, r2
 80084e2:	f001 f93d 	bl	8009760 <lsm6dsv16x_xl_data_rate_set>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <LSM6DSV16X_ACC_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 80084ec:	f04f 33ff 	mov.w	r3, #4294967295
 80084f0:	e004      	b.n	80084fc <LSM6DSV16X_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <LSM6DSV16X_ACC_Disable>:
  * @brief  Disable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Disable(LSM6DSV16X_Object_t *pObj)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <LSM6DSV16X_ACC_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	e01f      	b.n	800855a <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSV16X_OK)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f103 0220 	add.w	r2, r3, #32
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3333      	adds	r3, #51	@ 0x33
 8008524:	4619      	mov	r1, r3
 8008526:	4610      	mov	r0, r2
 8008528:	f001 f96c 	bl	8009804 <lsm6dsv16x_xl_data_rate_get>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d002      	beq.n	8008538 <LSM6DSV16X_ACC_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 8008532:	f04f 33ff 	mov.w	r3, #4294967295
 8008536:	e010      	b.n	800855a <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3320      	adds	r3, #32
 800853c:	2100      	movs	r1, #0
 800853e:	4618      	mov	r0, r3
 8008540:	f001 f90e 	bl	8009760 <lsm6dsv16x_xl_data_rate_set>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <LSM6DSV16X_ACC_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 800854a:	f04f 33ff 	mov.w	r3, #4294967295
 800854e:	e004      	b.n	800855a <LSM6DSV16X_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
	...

08008564 <LSM6DSV16X_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800856e:	2300      	movs	r3, #0
 8008570:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	3320      	adds	r3, #32
 8008576:	f107 020b 	add.w	r2, r7, #11
 800857a:	4611      	mov	r1, r2
 800857c:	4618      	mov	r0, r3
 800857e:	f001 fca1 	bl	8009ec4 <lsm6dsv16x_xl_full_scale_get>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <LSM6DSV16X_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008588:	f04f 33ff 	mov.w	r3, #4294967295
 800858c:	e023      	b.n	80085d6 <LSM6DSV16X_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale */
  switch (full_scale)
 800858e:	7afb      	ldrb	r3, [r7, #11]
 8008590:	2b03      	cmp	r3, #3
 8008592:	d81b      	bhi.n	80085cc <LSM6DSV16X_ACC_GetSensitivity+0x68>
 8008594:	a201      	add	r2, pc, #4	@ (adr r2, 800859c <LSM6DSV16X_ACC_GetSensitivity+0x38>)
 8008596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859a:	bf00      	nop
 800859c:	080085ad 	.word	0x080085ad
 80085a0:	080085b5 	.word	0x080085b5
 80085a4:	080085bd 	.word	0x080085bd
 80085a8:	080085c5 	.word	0x080085c5
  {
    case LSM6DSV16X_2g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_2G;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	4a0c      	ldr	r2, [pc, #48]	@ (80085e0 <LSM6DSV16X_ACC_GetSensitivity+0x7c>)
 80085b0:	601a      	str	r2, [r3, #0]
      break;
 80085b2:	e00f      	b.n	80085d4 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_4g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_4G;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	4a0b      	ldr	r2, [pc, #44]	@ (80085e4 <LSM6DSV16X_ACC_GetSensitivity+0x80>)
 80085b8:	601a      	str	r2, [r3, #0]
      break;
 80085ba:	e00b      	b.n	80085d4 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_8g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_8G;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	4a0a      	ldr	r2, [pc, #40]	@ (80085e8 <LSM6DSV16X_ACC_GetSensitivity+0x84>)
 80085c0:	601a      	str	r2, [r3, #0]
      break;
 80085c2:	e007      	b.n	80085d4 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_16g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_16G;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	4a09      	ldr	r2, [pc, #36]	@ (80085ec <LSM6DSV16X_ACC_GetSensitivity+0x88>)
 80085c8:	601a      	str	r2, [r3, #0]
      break;
 80085ca:	e003      	b.n	80085d4 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 80085cc:	f04f 33ff 	mov.w	r3, #4294967295
 80085d0:	60fb      	str	r3, [r7, #12]
      break;
 80085d2:	bf00      	nop
  }

  return ret;
 80085d4:	68fb      	ldr	r3, [r7, #12]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	3d79db23 	.word	0x3d79db23
 80085e4:	3df9db23 	.word	0x3df9db23
 80085e8:	3e79db23 	.word	0x3e79db23
 80085ec:	3ef9db23 	.word	0x3ef9db23

080085f0 <LSM6DSV16X_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	3320      	adds	r3, #32
 8008602:	f107 020b 	add.w	r2, r7, #11
 8008606:	4611      	mov	r1, r2
 8008608:	4618      	mov	r0, r3
 800860a:	f001 f8fb 	bl	8009804 <lsm6dsv16x_xl_data_rate_get>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d002      	beq.n	800861a <LSM6DSV16X_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008614:	f04f 33ff 	mov.w	r3, #4294967295
 8008618:	e0ea      	b.n	80087f0 <LSM6DSV16X_ACC_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 800861a:	7afb      	ldrb	r3, [r7, #11]
 800861c:	2b2c      	cmp	r3, #44	@ 0x2c
 800861e:	f200 80e2 	bhi.w	80087e6 <LSM6DSV16X_ACC_GetOutputDataRate+0x1f6>
 8008622:	a201      	add	r2, pc, #4	@ (adr r2, 8008628 <LSM6DSV16X_ACC_GetOutputDataRate+0x38>)
 8008624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008628:	080086dd 	.word	0x080086dd
 800862c:	080086e7 	.word	0x080086e7
 8008630:	080086ef 	.word	0x080086ef
 8008634:	080086ff 	.word	0x080086ff
 8008638:	08008717 	.word	0x08008717
 800863c:	0800872f 	.word	0x0800872f
 8008640:	08008747 	.word	0x08008747
 8008644:	0800875f 	.word	0x0800875f
 8008648:	08008777 	.word	0x08008777
 800864c:	0800878f 	.word	0x0800878f
 8008650:	080087a7 	.word	0x080087a7
 8008654:	080087bf 	.word	0x080087bf
 8008658:	080087d7 	.word	0x080087d7
 800865c:	080087e7 	.word	0x080087e7
 8008660:	080087e7 	.word	0x080087e7
 8008664:	080087e7 	.word	0x080087e7
 8008668:	080087e7 	.word	0x080087e7
 800866c:	080087e7 	.word	0x080087e7
 8008670:	080087e7 	.word	0x080087e7
 8008674:	08008707 	.word	0x08008707
 8008678:	0800871f 	.word	0x0800871f
 800867c:	08008737 	.word	0x08008737
 8008680:	0800874f 	.word	0x0800874f
 8008684:	08008767 	.word	0x08008767
 8008688:	0800877f 	.word	0x0800877f
 800868c:	08008797 	.word	0x08008797
 8008690:	080087af 	.word	0x080087af
 8008694:	080087c7 	.word	0x080087c7
 8008698:	080087df 	.word	0x080087df
 800869c:	080087e7 	.word	0x080087e7
 80086a0:	080087e7 	.word	0x080087e7
 80086a4:	080087e7 	.word	0x080087e7
 80086a8:	080087e7 	.word	0x080087e7
 80086ac:	080087e7 	.word	0x080087e7
 80086b0:	080087e7 	.word	0x080087e7
 80086b4:	080086f7 	.word	0x080086f7
 80086b8:	0800870f 	.word	0x0800870f
 80086bc:	08008727 	.word	0x08008727
 80086c0:	0800873f 	.word	0x0800873f
 80086c4:	08008757 	.word	0x08008757
 80086c8:	0800876f 	.word	0x0800876f
 80086cc:	08008787 	.word	0x08008787
 80086d0:	0800879f 	.word	0x0800879f
 80086d4:	080087b7 	.word	0x080087b7
 80086d8:	080087cf 	.word	0x080087cf
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	f04f 0200 	mov.w	r2, #0
 80086e2:	601a      	str	r2, [r3, #0]
      break;
 80086e4:	e083      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	4a43      	ldr	r2, [pc, #268]	@ (80087f8 <LSM6DSV16X_ACC_GetOutputDataRate+0x208>)
 80086ea:	601a      	str	r2, [r3, #0]
      break;
 80086ec:	e07f      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	4a42      	ldr	r2, [pc, #264]	@ (80087fc <LSM6DSV16X_ACC_GetOutputDataRate+0x20c>)
 80086f2:	601a      	str	r2, [r3, #0]
      break;
 80086f4:	e07b      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	4a41      	ldr	r2, [pc, #260]	@ (8008800 <LSM6DSV16X_ACC_GetOutputDataRate+0x210>)
 80086fa:	601a      	str	r2, [r3, #0]
      break;
 80086fc:	e077      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	4a40      	ldr	r2, [pc, #256]	@ (8008804 <LSM6DSV16X_ACC_GetOutputDataRate+0x214>)
 8008702:	601a      	str	r2, [r3, #0]
      break;
 8008704:	e073      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	4a3f      	ldr	r2, [pc, #252]	@ (8008808 <LSM6DSV16X_ACC_GetOutputDataRate+0x218>)
 800870a:	601a      	str	r2, [r3, #0]
      break;
 800870c:	e06f      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	4a3e      	ldr	r2, [pc, #248]	@ (800880c <LSM6DSV16X_ACC_GetOutputDataRate+0x21c>)
 8008712:	601a      	str	r2, [r3, #0]
      break;
 8008714:	e06b      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	4a3d      	ldr	r2, [pc, #244]	@ (8008810 <LSM6DSV16X_ACC_GetOutputDataRate+0x220>)
 800871a:	601a      	str	r2, [r3, #0]
      break;
 800871c:	e067      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	4a3c      	ldr	r2, [pc, #240]	@ (8008814 <LSM6DSV16X_ACC_GetOutputDataRate+0x224>)
 8008722:	601a      	str	r2, [r3, #0]
      break;
 8008724:	e063      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	4a3b      	ldr	r2, [pc, #236]	@ (8008818 <LSM6DSV16X_ACC_GetOutputDataRate+0x228>)
 800872a:	601a      	str	r2, [r3, #0]
      break;
 800872c:	e05f      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	4a3a      	ldr	r2, [pc, #232]	@ (800881c <LSM6DSV16X_ACC_GetOutputDataRate+0x22c>)
 8008732:	601a      	str	r2, [r3, #0]
      break;
 8008734:	e05b      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	4a39      	ldr	r2, [pc, #228]	@ (8008820 <LSM6DSV16X_ACC_GetOutputDataRate+0x230>)
 800873a:	601a      	str	r2, [r3, #0]
      break;
 800873c:	e057      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	4a38      	ldr	r2, [pc, #224]	@ (8008824 <LSM6DSV16X_ACC_GetOutputDataRate+0x234>)
 8008742:	601a      	str	r2, [r3, #0]
      break;
 8008744:	e053      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	4a37      	ldr	r2, [pc, #220]	@ (8008828 <LSM6DSV16X_ACC_GetOutputDataRate+0x238>)
 800874a:	601a      	str	r2, [r3, #0]
      break;
 800874c:	e04f      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	4a36      	ldr	r2, [pc, #216]	@ (800882c <LSM6DSV16X_ACC_GetOutputDataRate+0x23c>)
 8008752:	601a      	str	r2, [r3, #0]
      break;
 8008754:	e04b      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	4a35      	ldr	r2, [pc, #212]	@ (8008830 <LSM6DSV16X_ACC_GetOutputDataRate+0x240>)
 800875a:	601a      	str	r2, [r3, #0]
      break;
 800875c:	e047      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	4a34      	ldr	r2, [pc, #208]	@ (8008834 <LSM6DSV16X_ACC_GetOutputDataRate+0x244>)
 8008762:	601a      	str	r2, [r3, #0]
      break;
 8008764:	e043      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	4a33      	ldr	r2, [pc, #204]	@ (8008838 <LSM6DSV16X_ACC_GetOutputDataRate+0x248>)
 800876a:	601a      	str	r2, [r3, #0]
      break;
 800876c:	e03f      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	4a32      	ldr	r2, [pc, #200]	@ (800883c <LSM6DSV16X_ACC_GetOutputDataRate+0x24c>)
 8008772:	601a      	str	r2, [r3, #0]
      break;
 8008774:	e03b      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	4a31      	ldr	r2, [pc, #196]	@ (8008840 <LSM6DSV16X_ACC_GetOutputDataRate+0x250>)
 800877a:	601a      	str	r2, [r3, #0]
      break;
 800877c:	e037      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	4a30      	ldr	r2, [pc, #192]	@ (8008844 <LSM6DSV16X_ACC_GetOutputDataRate+0x254>)
 8008782:	601a      	str	r2, [r3, #0]
      break;
 8008784:	e033      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	4a2f      	ldr	r2, [pc, #188]	@ (8008848 <LSM6DSV16X_ACC_GetOutputDataRate+0x258>)
 800878a:	601a      	str	r2, [r3, #0]
      break;
 800878c:	e02f      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	4a2e      	ldr	r2, [pc, #184]	@ (800884c <LSM6DSV16X_ACC_GetOutputDataRate+0x25c>)
 8008792:	601a      	str	r2, [r3, #0]
      break;
 8008794:	e02b      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	4a2d      	ldr	r2, [pc, #180]	@ (8008850 <LSM6DSV16X_ACC_GetOutputDataRate+0x260>)
 800879a:	601a      	str	r2, [r3, #0]
      break;
 800879c:	e027      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	4a2c      	ldr	r2, [pc, #176]	@ (8008854 <LSM6DSV16X_ACC_GetOutputDataRate+0x264>)
 80087a2:	601a      	str	r2, [r3, #0]
      break;
 80087a4:	e023      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	4a2b      	ldr	r2, [pc, #172]	@ (8008858 <LSM6DSV16X_ACC_GetOutputDataRate+0x268>)
 80087aa:	601a      	str	r2, [r3, #0]
      break;
 80087ac:	e01f      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	4a2a      	ldr	r2, [pc, #168]	@ (800885c <LSM6DSV16X_ACC_GetOutputDataRate+0x26c>)
 80087b2:	601a      	str	r2, [r3, #0]
      break;
 80087b4:	e01b      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	4a29      	ldr	r2, [pc, #164]	@ (8008860 <LSM6DSV16X_ACC_GetOutputDataRate+0x270>)
 80087ba:	601a      	str	r2, [r3, #0]
      break;
 80087bc:	e017      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	4a28      	ldr	r2, [pc, #160]	@ (8008864 <LSM6DSV16X_ACC_GetOutputDataRate+0x274>)
 80087c2:	601a      	str	r2, [r3, #0]
      break;
 80087c4:	e013      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	4a27      	ldr	r2, [pc, #156]	@ (8008868 <LSM6DSV16X_ACC_GetOutputDataRate+0x278>)
 80087ca:	601a      	str	r2, [r3, #0]
      break;
 80087cc:	e00f      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	4a26      	ldr	r2, [pc, #152]	@ (800886c <LSM6DSV16X_ACC_GetOutputDataRate+0x27c>)
 80087d2:	601a      	str	r2, [r3, #0]
      break;
 80087d4:	e00b      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	4a25      	ldr	r2, [pc, #148]	@ (8008870 <LSM6DSV16X_ACC_GetOutputDataRate+0x280>)
 80087da:	601a      	str	r2, [r3, #0]
      break;
 80087dc:	e007      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	4a24      	ldr	r2, [pc, #144]	@ (8008874 <LSM6DSV16X_ACC_GetOutputDataRate+0x284>)
 80087e2:	601a      	str	r2, [r3, #0]
      break;
 80087e4:	e003      	b.n	80087ee <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 80087e6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ea:	60fb      	str	r3, [r7, #12]
      break;
 80087ec:	bf00      	nop
  }

  return ret;
 80087ee:	68fb      	ldr	r3, [r7, #12]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	3ff00000 	.word	0x3ff00000
 80087fc:	40f00000 	.word	0x40f00000
 8008800:	41480000 	.word	0x41480000
 8008804:	41700000 	.word	0x41700000
 8008808:	417a0000 	.word	0x417a0000
 800880c:	41c80000 	.word	0x41c80000
 8008810:	41f00000 	.word	0x41f00000
 8008814:	41fa0000 	.word	0x41fa0000
 8008818:	42480000 	.word	0x42480000
 800881c:	42700000 	.word	0x42700000
 8008820:	427a0000 	.word	0x427a0000
 8008824:	42c80000 	.word	0x42c80000
 8008828:	42f00000 	.word	0x42f00000
 800882c:	42fa0000 	.word	0x42fa0000
 8008830:	43480000 	.word	0x43480000
 8008834:	43700000 	.word	0x43700000
 8008838:	437a0000 	.word	0x437a0000
 800883c:	43c80000 	.word	0x43c80000
 8008840:	43f00000 	.word	0x43f00000
 8008844:	43fa0000 	.word	0x43fa0000
 8008848:	44480000 	.word	0x44480000
 800884c:	44700000 	.word	0x44700000
 8008850:	447a0000 	.word	0x447a0000
 8008854:	44c80000 	.word	0x44c80000
 8008858:	44f00000 	.word	0x44f00000
 800885c:	44fa0000 	.word	0x44fa0000
 8008860:	45480000 	.word	0x45480000
 8008864:	45700000 	.word	0x45700000
 8008868:	457a0000 	.word	0x457a0000
 800886c:	45c80000 	.word	0x45c80000
 8008870:	45f00000 	.word	0x45f00000
 8008874:	45fa0000 	.word	0x45fa0000

08008878 <LSM6DSV16X_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->acc_is_enabled == 1U)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800888a:	2b01      	cmp	r3, #1
 800888c:	d106      	bne.n	800889c <LSM6DSV16X_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800888e:	ed97 0a00 	vldr	s0, [r7]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fc52 	bl	800913c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>
 8008898:	4603      	mov	r3, r0
 800889a:	e005      	b.n	80088a8 <LSM6DSV16X_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800889c:	ed97 0a00 	vldr	s0, [r7]
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fced 	bl	8009280 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>
 80088a6:	4603      	mov	r3, r0
  }
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <LSM6DSV16X_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t *FullScale)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	3320      	adds	r3, #32
 80088c2:	f107 020b 	add.w	r2, r7, #11
 80088c6:	4611      	mov	r1, r2
 80088c8:	4618      	mov	r0, r3
 80088ca:	f001 fafb 	bl	8009ec4 <lsm6dsv16x_xl_full_scale_get>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d002      	beq.n	80088da <LSM6DSV16X_ACC_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 80088d4:	f04f 33ff 	mov.w	r3, #4294967295
 80088d8:	e023      	b.n	8008922 <LSM6DSV16X_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80088da:	7afb      	ldrb	r3, [r7, #11]
 80088dc:	2b03      	cmp	r3, #3
 80088de:	d81b      	bhi.n	8008918 <LSM6DSV16X_ACC_GetFullScale+0x68>
 80088e0:	a201      	add	r2, pc, #4	@ (adr r2, 80088e8 <LSM6DSV16X_ACC_GetFullScale+0x38>)
 80088e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e6:	bf00      	nop
 80088e8:	080088f9 	.word	0x080088f9
 80088ec:	08008901 	.word	0x08008901
 80088f0:	08008909 	.word	0x08008909
 80088f4:	08008911 	.word	0x08008911
  {
    case LSM6DSV16X_2g:
      *FullScale =  2;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2202      	movs	r2, #2
 80088fc:	601a      	str	r2, [r3, #0]
      break;
 80088fe:	e00f      	b.n	8008920 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_4g:
      *FullScale =  4;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2204      	movs	r2, #4
 8008904:	601a      	str	r2, [r3, #0]
      break;
 8008906:	e00b      	b.n	8008920 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_8g:
      *FullScale =  8;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	2208      	movs	r2, #8
 800890c:	601a      	str	r2, [r3, #0]
      break;
 800890e:	e007      	b.n	8008920 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_16g:
      *FullScale = 16;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	2210      	movs	r2, #16
 8008914:	601a      	str	r2, [r3, #0]
      break;
 8008916:	e003      	b.n	8008920 <LSM6DSV16X_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 8008918:	f04f 33ff 	mov.w	r3, #4294967295
 800891c:	60fb      	str	r3, [r7, #12]
      break;
 800891e:	bf00      	nop
  }

  return ret;
 8008920:	68fb      	ldr	r3, [r7, #12]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop

0800892c <LSM6DSV16X_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_xl_full_scale_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
           : (FullScale <= 4) ? LSM6DSV16X_4g
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	2b02      	cmp	r3, #2
 800893a:	dd0b      	ble.n	8008954 <LSM6DSV16X_ACC_SetFullScale+0x28>
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	2b04      	cmp	r3, #4
 8008940:	dd06      	ble.n	8008950 <LSM6DSV16X_ACC_SetFullScale+0x24>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b08      	cmp	r3, #8
 8008946:	dc01      	bgt.n	800894c <LSM6DSV16X_ACC_SetFullScale+0x20>
 8008948:	2302      	movs	r3, #2
 800894a:	e004      	b.n	8008956 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 800894c:	2303      	movs	r3, #3
 800894e:	e002      	b.n	8008956 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8008950:	2301      	movs	r3, #1
 8008952:	e000      	b.n	8008956 <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8008954:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
 8008956:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSV16X_8g
           :                    LSM6DSV16X_16g;

  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	3320      	adds	r3, #32
 800895c:	7bfa      	ldrb	r2, [r7, #15]
 800895e:	4611      	mov	r1, r2
 8008960:	4618      	mov	r0, r3
 8008962:	f001 fa89 	bl	8009e78 <lsm6dsv16x_xl_full_scale_set>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d002      	beq.n	8008972 <LSM6DSV16X_ACC_SetFullScale+0x46>
  {
    return LSM6DSV16X_ERROR;
 800896c:	f04f 33ff 	mov.w	r3, #4294967295
 8008970:	e000      	b.n	8008974 <LSM6DSV16X_ACC_SetFullScale+0x48>
  }

  return LSM6DSV16X_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <LSM6DSV16X_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	3320      	adds	r3, #32
 800898a:	f107 0208 	add.w	r2, r7, #8
 800898e:	4611      	mov	r1, r2
 8008990:	4618      	mov	r0, r3
 8008992:	f001 fb22 	bl	8009fda <lsm6dsv16x_acceleration_raw_get>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <LSM6DSV16X_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 800899c:	f04f 33ff 	mov.w	r3, #4294967295
 80089a0:	e00c      	b.n	80089bc <LSM6DSV16X_ACC_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 80089a2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80089aa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80089b2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <LSM6DSV16X_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *Acceleration)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80089ce:	f04f 0300 	mov.w	r3, #0
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	3320      	adds	r3, #32
 80089d8:	f107 0210 	add.w	r2, r7, #16
 80089dc:	4611      	mov	r1, r2
 80089de:	4618      	mov	r0, r3
 80089e0:	f001 fafb 	bl	8009fda <lsm6dsv16x_acceleration_raw_get>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d002      	beq.n	80089f0 <LSM6DSV16X_ACC_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 80089ea:	f04f 33ff 	mov.w	r3, #4294967295
 80089ee:	e03c      	b.n	8008a6a <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 80089f0:	f107 030c 	add.w	r3, r7, #12
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7ff fdb4 	bl	8008564 <LSM6DSV16X_ACC_GetSensitivity>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d002      	beq.n	8008a08 <LSM6DSV16X_ACC_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 8008a02:	f04f 33ff 	mov.w	r3, #4294967295
 8008a06:	e030      	b.n	8008a6a <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Calculate the data */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8008a08:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008a0c:	ee07 3a90 	vmov	s15, r3
 8008a10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008a14:	edd7 7a03 	vldr	s15, [r7, #12]
 8008a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a20:	ee17 2a90 	vmov	r2, s15
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8008a28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a2c:	ee07 3a90 	vmov	s15, r3
 8008a30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008a34:	edd7 7a03 	vldr	s15, [r7, #12]
 8008a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a40:	ee17 2a90 	vmov	r2, s15
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8008a48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008a4c:	ee07 3a90 	vmov	s15, r3
 8008a50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008a54:	edd7 7a03 	vldr	s15, [r7, #12]
 8008a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a60:	ee17 2a90 	vmov	r2, s15
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <LSM6DSV16X_GYRO_Enable>:
  * @brief  Enable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Enable(LSM6DSV16X_Object_t *pObj)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b082      	sub	sp, #8
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d101      	bne.n	8008a88 <LSM6DSV16X_GYRO_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	e014      	b.n	8008ab2 <LSM6DSV16X_GYRO_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSV16X_OK)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f103 0220 	add.w	r2, r3, #32
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008a94:	4619      	mov	r1, r3
 8008a96:	4610      	mov	r0, r2
 8008a98:	f000 ffc4 	bl	8009a24 <lsm6dsv16x_gy_data_rate_set>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d002      	beq.n	8008aa8 <LSM6DSV16X_GYRO_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 8008aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa6:	e004      	b.n	8008ab2 <LSM6DSV16X_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <LSM6DSV16X_GYRO_Disable>:
  * @brief  Disable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Disable(LSM6DSV16X_Object_t *pObj)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b082      	sub	sp, #8
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d101      	bne.n	8008ad0 <LSM6DSV16X_GYRO_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	e01f      	b.n	8008b10 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSV16X_OK)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f103 0220 	add.w	r2, r3, #32
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3334      	adds	r3, #52	@ 0x34
 8008ada:	4619      	mov	r1, r3
 8008adc:	4610      	mov	r0, r2
 8008ade:	f000 fff1 	bl	8009ac4 <lsm6dsv16x_gy_data_rate_get>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d002      	beq.n	8008aee <LSM6DSV16X_GYRO_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 8008ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8008aec:	e010      	b.n	8008b10 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	3320      	adds	r3, #32
 8008af2:	2100      	movs	r1, #0
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 ff95 	bl	8009a24 <lsm6dsv16x_gy_data_rate_set>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <LSM6DSV16X_GYRO_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8008b00:	f04f 33ff 	mov.w	r3, #4294967295
 8008b04:	e004      	b.n	8008b10 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <LSM6DSV16X_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	3320      	adds	r3, #32
 8008b2a:	f107 020b 	add.w	r2, r7, #11
 8008b2e:	4611      	mov	r1, r2
 8008b30:	4618      	mov	r0, r3
 8008b32:	f001 f949 	bl	8009dc8 <lsm6dsv16x_gy_full_scale_get>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d002      	beq.n	8008b42 <LSM6DSV16X_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b40:	e03d      	b.n	8008bbe <LSM6DSV16X_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale */
  switch (full_scale)
 8008b42:	7afb      	ldrb	r3, [r7, #11]
 8008b44:	2b0c      	cmp	r3, #12
 8008b46:	d835      	bhi.n	8008bb4 <LSM6DSV16X_GYRO_GetSensitivity+0x9c>
 8008b48:	a201      	add	r2, pc, #4	@ (adr r2, 8008b50 <LSM6DSV16X_GYRO_GetSensitivity+0x38>)
 8008b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4e:	bf00      	nop
 8008b50:	08008b85 	.word	0x08008b85
 8008b54:	08008b8d 	.word	0x08008b8d
 8008b58:	08008b95 	.word	0x08008b95
 8008b5c:	08008b9d 	.word	0x08008b9d
 8008b60:	08008ba5 	.word	0x08008ba5
 8008b64:	08008bb5 	.word	0x08008bb5
 8008b68:	08008bb5 	.word	0x08008bb5
 8008b6c:	08008bb5 	.word	0x08008bb5
 8008b70:	08008bb5 	.word	0x08008bb5
 8008b74:	08008bb5 	.word	0x08008bb5
 8008b78:	08008bb5 	.word	0x08008bb5
 8008b7c:	08008bb5 	.word	0x08008bb5
 8008b80:	08008bad 	.word	0x08008bad
  {
    case LSM6DSV16X_125dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_125DPS;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	4a10      	ldr	r2, [pc, #64]	@ (8008bc8 <LSM6DSV16X_GYRO_GetSensitivity+0xb0>)
 8008b88:	601a      	str	r2, [r3, #0]
      break;
 8008b8a:	e017      	b.n	8008bbc <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_250dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_250DPS;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8008bcc <LSM6DSV16X_GYRO_GetSensitivity+0xb4>)
 8008b90:	601a      	str	r2, [r3, #0]
      break;
 8008b92:	e013      	b.n	8008bbc <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_500dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_500DPS;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	4a0e      	ldr	r2, [pc, #56]	@ (8008bd0 <LSM6DSV16X_GYRO_GetSensitivity+0xb8>)
 8008b98:	601a      	str	r2, [r3, #0]
      break;
 8008b9a:	e00f      	b.n	8008bbc <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_1000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_1000DPS;
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8008bd4 <LSM6DSV16X_GYRO_GetSensitivity+0xbc>)
 8008ba0:	601a      	str	r2, [r3, #0]
      break;
 8008ba2:	e00b      	b.n	8008bbc <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_2000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_2000DPS;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8008bd8 <LSM6DSV16X_GYRO_GetSensitivity+0xc0>)
 8008ba8:	601a      	str	r2, [r3, #0]
      break;
 8008baa:	e007      	b.n	8008bbc <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_4000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_4000DPS;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	4a0b      	ldr	r2, [pc, #44]	@ (8008bdc <LSM6DSV16X_GYRO_GetSensitivity+0xc4>)
 8008bb0:	601a      	str	r2, [r3, #0]
      break;
 8008bb2:	e003      	b.n	8008bbc <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    default:
      ret = LSM6DSV16X_ERROR;
 8008bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb8:	60fb      	str	r3, [r7, #12]
      break;
 8008bba:	bf00      	nop
  }

  return ret;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	408c0000 	.word	0x408c0000
 8008bcc:	410c0000 	.word	0x410c0000
 8008bd0:	418c0000 	.word	0x418c0000
 8008bd4:	420c0000 	.word	0x420c0000
 8008bd8:	428c0000 	.word	0x428c0000
 8008bdc:	430c0000 	.word	0x430c0000

08008be0 <LSM6DSV16X_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	3320      	adds	r3, #32
 8008bf2:	f107 020b 	add.w	r2, r7, #11
 8008bf6:	4611      	mov	r1, r2
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f000 ff63 	bl	8009ac4 <lsm6dsv16x_gy_data_rate_get>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <LSM6DSV16X_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008c04:	f04f 33ff 	mov.w	r3, #4294967295
 8008c08:	e0ea      	b.n	8008de0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 8008c0a:	7afb      	ldrb	r3, [r7, #11]
 8008c0c:	2b2c      	cmp	r3, #44	@ 0x2c
 8008c0e:	f200 80e2 	bhi.w	8008dd6 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1f6>
 8008c12:	a201      	add	r2, pc, #4	@ (adr r2, 8008c18 <LSM6DSV16X_GYRO_GetOutputDataRate+0x38>)
 8008c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c18:	08008ccd 	.word	0x08008ccd
 8008c1c:	08008cd7 	.word	0x08008cd7
 8008c20:	08008cdf 	.word	0x08008cdf
 8008c24:	08008cef 	.word	0x08008cef
 8008c28:	08008d07 	.word	0x08008d07
 8008c2c:	08008d1f 	.word	0x08008d1f
 8008c30:	08008d37 	.word	0x08008d37
 8008c34:	08008d4f 	.word	0x08008d4f
 8008c38:	08008d67 	.word	0x08008d67
 8008c3c:	08008d7f 	.word	0x08008d7f
 8008c40:	08008d97 	.word	0x08008d97
 8008c44:	08008daf 	.word	0x08008daf
 8008c48:	08008dc7 	.word	0x08008dc7
 8008c4c:	08008dd7 	.word	0x08008dd7
 8008c50:	08008dd7 	.word	0x08008dd7
 8008c54:	08008dd7 	.word	0x08008dd7
 8008c58:	08008dd7 	.word	0x08008dd7
 8008c5c:	08008dd7 	.word	0x08008dd7
 8008c60:	08008dd7 	.word	0x08008dd7
 8008c64:	08008cf7 	.word	0x08008cf7
 8008c68:	08008d0f 	.word	0x08008d0f
 8008c6c:	08008d27 	.word	0x08008d27
 8008c70:	08008d3f 	.word	0x08008d3f
 8008c74:	08008d57 	.word	0x08008d57
 8008c78:	08008d6f 	.word	0x08008d6f
 8008c7c:	08008d87 	.word	0x08008d87
 8008c80:	08008d9f 	.word	0x08008d9f
 8008c84:	08008db7 	.word	0x08008db7
 8008c88:	08008dcf 	.word	0x08008dcf
 8008c8c:	08008dd7 	.word	0x08008dd7
 8008c90:	08008dd7 	.word	0x08008dd7
 8008c94:	08008dd7 	.word	0x08008dd7
 8008c98:	08008dd7 	.word	0x08008dd7
 8008c9c:	08008dd7 	.word	0x08008dd7
 8008ca0:	08008dd7 	.word	0x08008dd7
 8008ca4:	08008ce7 	.word	0x08008ce7
 8008ca8:	08008cff 	.word	0x08008cff
 8008cac:	08008d17 	.word	0x08008d17
 8008cb0:	08008d2f 	.word	0x08008d2f
 8008cb4:	08008d47 	.word	0x08008d47
 8008cb8:	08008d5f 	.word	0x08008d5f
 8008cbc:	08008d77 	.word	0x08008d77
 8008cc0:	08008d8f 	.word	0x08008d8f
 8008cc4:	08008da7 	.word	0x08008da7
 8008cc8:	08008dbf 	.word	0x08008dbf
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	f04f 0200 	mov.w	r2, #0
 8008cd2:	601a      	str	r2, [r3, #0]
      break;
 8008cd4:	e083      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	4a43      	ldr	r2, [pc, #268]	@ (8008de8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x208>)
 8008cda:	601a      	str	r2, [r3, #0]
      break;
 8008cdc:	e07f      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	4a42      	ldr	r2, [pc, #264]	@ (8008dec <LSM6DSV16X_GYRO_GetOutputDataRate+0x20c>)
 8008ce2:	601a      	str	r2, [r3, #0]
      break;
 8008ce4:	e07b      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	4a41      	ldr	r2, [pc, #260]	@ (8008df0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x210>)
 8008cea:	601a      	str	r2, [r3, #0]
      break;
 8008cec:	e077      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	4a40      	ldr	r2, [pc, #256]	@ (8008df4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x214>)
 8008cf2:	601a      	str	r2, [r3, #0]
      break;
 8008cf4:	e073      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	4a3f      	ldr	r2, [pc, #252]	@ (8008df8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x218>)
 8008cfa:	601a      	str	r2, [r3, #0]
      break;
 8008cfc:	e06f      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	4a3e      	ldr	r2, [pc, #248]	@ (8008dfc <LSM6DSV16X_GYRO_GetOutputDataRate+0x21c>)
 8008d02:	601a      	str	r2, [r3, #0]
      break;
 8008d04:	e06b      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	4a3d      	ldr	r2, [pc, #244]	@ (8008e00 <LSM6DSV16X_GYRO_GetOutputDataRate+0x220>)
 8008d0a:	601a      	str	r2, [r3, #0]
      break;
 8008d0c:	e067      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	4a3c      	ldr	r2, [pc, #240]	@ (8008e04 <LSM6DSV16X_GYRO_GetOutputDataRate+0x224>)
 8008d12:	601a      	str	r2, [r3, #0]
      break;
 8008d14:	e063      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	4a3b      	ldr	r2, [pc, #236]	@ (8008e08 <LSM6DSV16X_GYRO_GetOutputDataRate+0x228>)
 8008d1a:	601a      	str	r2, [r3, #0]
      break;
 8008d1c:	e05f      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	4a3a      	ldr	r2, [pc, #232]	@ (8008e0c <LSM6DSV16X_GYRO_GetOutputDataRate+0x22c>)
 8008d22:	601a      	str	r2, [r3, #0]
      break;
 8008d24:	e05b      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	4a39      	ldr	r2, [pc, #228]	@ (8008e10 <LSM6DSV16X_GYRO_GetOutputDataRate+0x230>)
 8008d2a:	601a      	str	r2, [r3, #0]
      break;
 8008d2c:	e057      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	4a38      	ldr	r2, [pc, #224]	@ (8008e14 <LSM6DSV16X_GYRO_GetOutputDataRate+0x234>)
 8008d32:	601a      	str	r2, [r3, #0]
      break;
 8008d34:	e053      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	4a37      	ldr	r2, [pc, #220]	@ (8008e18 <LSM6DSV16X_GYRO_GetOutputDataRate+0x238>)
 8008d3a:	601a      	str	r2, [r3, #0]
      break;
 8008d3c:	e04f      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	4a36      	ldr	r2, [pc, #216]	@ (8008e1c <LSM6DSV16X_GYRO_GetOutputDataRate+0x23c>)
 8008d42:	601a      	str	r2, [r3, #0]
      break;
 8008d44:	e04b      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	4a35      	ldr	r2, [pc, #212]	@ (8008e20 <LSM6DSV16X_GYRO_GetOutputDataRate+0x240>)
 8008d4a:	601a      	str	r2, [r3, #0]
      break;
 8008d4c:	e047      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	4a34      	ldr	r2, [pc, #208]	@ (8008e24 <LSM6DSV16X_GYRO_GetOutputDataRate+0x244>)
 8008d52:	601a      	str	r2, [r3, #0]
      break;
 8008d54:	e043      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	4a33      	ldr	r2, [pc, #204]	@ (8008e28 <LSM6DSV16X_GYRO_GetOutputDataRate+0x248>)
 8008d5a:	601a      	str	r2, [r3, #0]
      break;
 8008d5c:	e03f      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	4a32      	ldr	r2, [pc, #200]	@ (8008e2c <LSM6DSV16X_GYRO_GetOutputDataRate+0x24c>)
 8008d62:	601a      	str	r2, [r3, #0]
      break;
 8008d64:	e03b      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	4a31      	ldr	r2, [pc, #196]	@ (8008e30 <LSM6DSV16X_GYRO_GetOutputDataRate+0x250>)
 8008d6a:	601a      	str	r2, [r3, #0]
      break;
 8008d6c:	e037      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	4a30      	ldr	r2, [pc, #192]	@ (8008e34 <LSM6DSV16X_GYRO_GetOutputDataRate+0x254>)
 8008d72:	601a      	str	r2, [r3, #0]
      break;
 8008d74:	e033      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	4a2f      	ldr	r2, [pc, #188]	@ (8008e38 <LSM6DSV16X_GYRO_GetOutputDataRate+0x258>)
 8008d7a:	601a      	str	r2, [r3, #0]
      break;
 8008d7c:	e02f      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	4a2e      	ldr	r2, [pc, #184]	@ (8008e3c <LSM6DSV16X_GYRO_GetOutputDataRate+0x25c>)
 8008d82:	601a      	str	r2, [r3, #0]
      break;
 8008d84:	e02b      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	4a2d      	ldr	r2, [pc, #180]	@ (8008e40 <LSM6DSV16X_GYRO_GetOutputDataRate+0x260>)
 8008d8a:	601a      	str	r2, [r3, #0]
      break;
 8008d8c:	e027      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	4a2c      	ldr	r2, [pc, #176]	@ (8008e44 <LSM6DSV16X_GYRO_GetOutputDataRate+0x264>)
 8008d92:	601a      	str	r2, [r3, #0]
      break;
 8008d94:	e023      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	4a2b      	ldr	r2, [pc, #172]	@ (8008e48 <LSM6DSV16X_GYRO_GetOutputDataRate+0x268>)
 8008d9a:	601a      	str	r2, [r3, #0]
      break;
 8008d9c:	e01f      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	4a2a      	ldr	r2, [pc, #168]	@ (8008e4c <LSM6DSV16X_GYRO_GetOutputDataRate+0x26c>)
 8008da2:	601a      	str	r2, [r3, #0]
      break;
 8008da4:	e01b      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	4a29      	ldr	r2, [pc, #164]	@ (8008e50 <LSM6DSV16X_GYRO_GetOutputDataRate+0x270>)
 8008daa:	601a      	str	r2, [r3, #0]
      break;
 8008dac:	e017      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	4a28      	ldr	r2, [pc, #160]	@ (8008e54 <LSM6DSV16X_GYRO_GetOutputDataRate+0x274>)
 8008db2:	601a      	str	r2, [r3, #0]
      break;
 8008db4:	e013      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	4a27      	ldr	r2, [pc, #156]	@ (8008e58 <LSM6DSV16X_GYRO_GetOutputDataRate+0x278>)
 8008dba:	601a      	str	r2, [r3, #0]
      break;
 8008dbc:	e00f      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	4a26      	ldr	r2, [pc, #152]	@ (8008e5c <LSM6DSV16X_GYRO_GetOutputDataRate+0x27c>)
 8008dc2:	601a      	str	r2, [r3, #0]
      break;
 8008dc4:	e00b      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	4a25      	ldr	r2, [pc, #148]	@ (8008e60 <LSM6DSV16X_GYRO_GetOutputDataRate+0x280>)
 8008dca:	601a      	str	r2, [r3, #0]
      break;
 8008dcc:	e007      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	4a24      	ldr	r2, [pc, #144]	@ (8008e64 <LSM6DSV16X_GYRO_GetOutputDataRate+0x284>)
 8008dd2:	601a      	str	r2, [r3, #0]
      break;
 8008dd4:	e003      	b.n	8008dde <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 8008dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8008dda:	60fb      	str	r3, [r7, #12]
      break;
 8008ddc:	bf00      	nop
  }

  return ret;
 8008dde:	68fb      	ldr	r3, [r7, #12]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	3ff00000 	.word	0x3ff00000
 8008dec:	40f00000 	.word	0x40f00000
 8008df0:	41480000 	.word	0x41480000
 8008df4:	41700000 	.word	0x41700000
 8008df8:	417a0000 	.word	0x417a0000
 8008dfc:	41c80000 	.word	0x41c80000
 8008e00:	41f00000 	.word	0x41f00000
 8008e04:	41fa0000 	.word	0x41fa0000
 8008e08:	42480000 	.word	0x42480000
 8008e0c:	42700000 	.word	0x42700000
 8008e10:	427a0000 	.word	0x427a0000
 8008e14:	42c80000 	.word	0x42c80000
 8008e18:	42f00000 	.word	0x42f00000
 8008e1c:	42fa0000 	.word	0x42fa0000
 8008e20:	43480000 	.word	0x43480000
 8008e24:	43700000 	.word	0x43700000
 8008e28:	437a0000 	.word	0x437a0000
 8008e2c:	43c80000 	.word	0x43c80000
 8008e30:	43f00000 	.word	0x43f00000
 8008e34:	43fa0000 	.word	0x43fa0000
 8008e38:	44480000 	.word	0x44480000
 8008e3c:	44700000 	.word	0x44700000
 8008e40:	447a0000 	.word	0x447a0000
 8008e44:	44c80000 	.word	0x44c80000
 8008e48:	44f00000 	.word	0x44f00000
 8008e4c:	44fa0000 	.word	0x44fa0000
 8008e50:	45480000 	.word	0x45480000
 8008e54:	45700000 	.word	0x45700000
 8008e58:	457a0000 	.word	0x457a0000
 8008e5c:	45c80000 	.word	0x45c80000
 8008e60:	45f00000 	.word	0x45f00000
 8008e64:	45fa0000 	.word	0x45fa0000

08008e68 <LSM6DSV16X_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->gyro_is_enabled == 1U)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d106      	bne.n	8008e8c <LSM6DSV16X_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8008e7e:	ed97 0a00 	vldr	s0, [r7]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fa94 	bl	80093b0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	e005      	b.n	8008e98 <LSM6DSV16X_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8008e8c:	ed97 0a00 	vldr	s0, [r7]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fb23 	bl	80094dc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>
 8008e96:	4603      	mov	r3, r0
  }
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <LSM6DSV16X_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t  *FullScale)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	3320      	adds	r3, #32
 8008eb2:	f107 020b 	add.w	r2, r7, #11
 8008eb6:	4611      	mov	r1, r2
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f000 ff85 	bl	8009dc8 <lsm6dsv16x_gy_full_scale_get>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d002      	beq.n	8008eca <LSM6DSV16X_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ec8:	e041      	b.n	8008f4e <LSM6DSV16X_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 8008eca:	7afb      	ldrb	r3, [r7, #11]
 8008ecc:	2b0c      	cmp	r3, #12
 8008ece:	d839      	bhi.n	8008f44 <LSM6DSV16X_GYRO_GetFullScale+0xa4>
 8008ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed8 <LSM6DSV16X_GYRO_GetFullScale+0x38>)
 8008ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed6:	bf00      	nop
 8008ed8:	08008f0d 	.word	0x08008f0d
 8008edc:	08008f15 	.word	0x08008f15
 8008ee0:	08008f1d 	.word	0x08008f1d
 8008ee4:	08008f27 	.word	0x08008f27
 8008ee8:	08008f31 	.word	0x08008f31
 8008eec:	08008f45 	.word	0x08008f45
 8008ef0:	08008f45 	.word	0x08008f45
 8008ef4:	08008f45 	.word	0x08008f45
 8008ef8:	08008f45 	.word	0x08008f45
 8008efc:	08008f45 	.word	0x08008f45
 8008f00:	08008f45 	.word	0x08008f45
 8008f04:	08008f45 	.word	0x08008f45
 8008f08:	08008f3b 	.word	0x08008f3b
  {
    case LSM6DSV16X_125dps:
      *FullScale =  125;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	227d      	movs	r2, #125	@ 0x7d
 8008f10:	601a      	str	r2, [r3, #0]
      break;
 8008f12:	e01b      	b.n	8008f4c <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_250dps:
      *FullScale =  250;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	22fa      	movs	r2, #250	@ 0xfa
 8008f18:	601a      	str	r2, [r3, #0]
      break;
 8008f1a:	e017      	b.n	8008f4c <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_500dps:
      *FullScale =  500;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008f22:	601a      	str	r2, [r3, #0]
      break;
 8008f24:	e012      	b.n	8008f4c <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_1000dps:
      *FullScale = 1000;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008f2c:	601a      	str	r2, [r3, #0]
      break;
 8008f2e:	e00d      	b.n	8008f4c <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_2000dps:
      *FullScale = 2000;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8008f36:	601a      	str	r2, [r3, #0]
      break;
 8008f38:	e008      	b.n	8008f4c <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_4000dps:
      *FullScale = 4000;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8008f40:	601a      	str	r2, [r3, #0]
      break;
 8008f42:	e003      	b.n	8008f4c <LSM6DSV16X_GYRO_GetFullScale+0xac>

    default:
      ret = LSM6DSV16X_ERROR;
 8008f44:	f04f 33ff 	mov.w	r3, #4294967295
 8008f48:	60fb      	str	r3, [r7, #12]
      break;
 8008f4a:	bf00      	nop
  }

  return ret;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop

08008f58 <LSM6DSV16X_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
           : (FullScale <= 250)  ? LSM6DSV16X_250dps
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	2b7d      	cmp	r3, #125	@ 0x7d
 8008f66:	dd18      	ble.n	8008f9a <LSM6DSV16X_GYRO_SetFullScale+0x42>
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	2bfa      	cmp	r3, #250	@ 0xfa
 8008f6c:	dd13      	ble.n	8008f96 <LSM6DSV16X_GYRO_SetFullScale+0x3e>
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008f74:	dd0d      	ble.n	8008f92 <LSM6DSV16X_GYRO_SetFullScale+0x3a>
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f7c:	dd07      	ble.n	8008f8e <LSM6DSV16X_GYRO_SetFullScale+0x36>
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8008f84:	dc01      	bgt.n	8008f8a <LSM6DSV16X_GYRO_SetFullScale+0x32>
 8008f86:	2304      	movs	r3, #4
 8008f88:	e008      	b.n	8008f9c <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008f8a:	230c      	movs	r3, #12
 8008f8c:	e006      	b.n	8008f9c <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e004      	b.n	8008f9c <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008f92:	2302      	movs	r3, #2
 8008f94:	e002      	b.n	8008f9c <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008f96:	2301      	movs	r3, #1
 8008f98:	e000      	b.n	8008f9c <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008f9a:	2300      	movs	r3, #0
  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
 8008f9c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSV16X_500dps
           : (FullScale <= 1000) ? LSM6DSV16X_1000dps
           : (FullScale <= 2000) ? LSM6DSV16X_2000dps
           :                       LSM6DSV16X_4000dps;

  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	3320      	adds	r3, #32
 8008fa2:	7bfa      	ldrb	r2, [r7, #15]
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 fee8 	bl	8009d7c <lsm6dsv16x_gy_full_scale_set>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d002      	beq.n	8008fb8 <LSM6DSV16X_GYRO_SetFullScale+0x60>
  {
    return LSM6DSV16X_ERROR;
 8008fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb6:	e000      	b.n	8008fba <LSM6DSV16X_GYRO_SetFullScale+0x62>
  }

  return LSM6DSV16X_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <LSM6DSV16X_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
 8008fca:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	3320      	adds	r3, #32
 8008fd0:	f107 0208 	add.w	r2, r7, #8
 8008fd4:	4611      	mov	r1, r2
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 ffb2 	bl	8009f40 <lsm6dsv16x_angular_rate_raw_get>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d002      	beq.n	8008fe8 <LSM6DSV16X_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 8008fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe6:	e00c      	b.n	8009002 <LSM6DSV16X_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 8008fe8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8008ff0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8008ff8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <LSM6DSV16X_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *AngularRate)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b086      	sub	sp, #24
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8009014:	f04f 0300 	mov.w	r3, #0
 8009018:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	3320      	adds	r3, #32
 800901e:	f107 0210 	add.w	r2, r7, #16
 8009022:	4611      	mov	r1, r2
 8009024:	4618      	mov	r0, r3
 8009026:	f000 ff8b 	bl	8009f40 <lsm6dsv16x_angular_rate_raw_get>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d002      	beq.n	8009036 <LSM6DSV16X_GYRO_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8009030:	f04f 33ff 	mov.w	r3, #4294967295
 8009034:	e03c      	b.n	80090b0 <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8009036:	f107 030c 	add.w	r3, r7, #12
 800903a:	4619      	mov	r1, r3
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f7ff fd6b 	bl	8008b18 <LSM6DSV16X_GYRO_GetSensitivity>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <LSM6DSV16X_GYRO_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 8009048:	f04f 33ff 	mov.w	r3, #4294967295
 800904c:	e030      	b.n	80090b0 <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Calculate the data */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800904e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009052:	ee07 3a90 	vmov	s15, r3
 8009056:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800905a:	edd7 7a03 	vldr	s15, [r7, #12]
 800905e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009062:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009066:	ee17 2a90 	vmov	r2, s15
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800906e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009072:	ee07 3a90 	vmov	s15, r3
 8009076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800907a:	edd7 7a03 	vldr	s15, [r7, #12]
 800907e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009082:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009086:	ee17 2a90 	vmov	r2, s15
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800908e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009092:	ee07 3a90 	vmov	s15, r3
 8009096:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800909a:	edd7 7a03 	vldr	s15, [r7, #12]
 800909e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090a6:	ee17 2a90 	vmov	r2, s15
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3718      	adds	r7, #24
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <LSM6DSV16X_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Write_Reg(LSM6DSV16X_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	70fb      	strb	r3, [r7, #3]
 80090c4:	4613      	mov	r3, r2
 80090c6:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsv16x_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSV16X_OK)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f103 0020 	add.w	r0, r3, #32
 80090ce:	1cba      	adds	r2, r7, #2
 80090d0:	78f9      	ldrb	r1, [r7, #3]
 80090d2:	2301      	movs	r3, #1
 80090d4:	f000 fae4 	bl	80096a0 <lsm6dsv16x_write_reg>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d002      	beq.n	80090e4 <LSM6DSV16X_Write_Reg+0x2c>
  {
    return LSM6DSV16X_ERROR;
 80090de:	f04f 33ff 	mov.w	r3, #4294967295
 80090e2:	e000      	b.n	80090e6 <LSM6DSV16X_Write_Reg+0x2e>
  }

  return LSM6DSV16X_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <LSM6DSV16X_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSV16X_MAIN_MEM_BANK, 1 - LSM6DSV16X_EMBED_FUNC_MEM_BANK, 2 - LSM6DSV16X_SENSOR_HUB_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Set_Mem_Bank(LSM6DSV16X_Object_t *pObj, uint8_t Val)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b084      	sub	sp, #16
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	460b      	mov	r3, r1
 80090f8:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSV16X_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_mem_bank_t reg;

  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
        : (Val == 2U) ? LSM6DSV16X_SENSOR_HUB_MEM_BANK
 80090fe:	78fb      	ldrb	r3, [r7, #3]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d006      	beq.n	8009112 <LSM6DSV16X_Set_Mem_Bank+0x24>
 8009104:	78fb      	ldrb	r3, [r7, #3]
 8009106:	2b02      	cmp	r3, #2
 8009108:	d101      	bne.n	800910e <LSM6DSV16X_Set_Mem_Bank+0x20>
 800910a:	2302      	movs	r3, #2
 800910c:	e002      	b.n	8009114 <LSM6DSV16X_Set_Mem_Bank+0x26>
 800910e:	2300      	movs	r3, #0
 8009110:	e000      	b.n	8009114 <LSM6DSV16X_Set_Mem_Bank+0x26>
 8009112:	2301      	movs	r3, #1
  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
 8009114:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSV16X_MAIN_MEM_BANK;

  if (lsm6dsv16x_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSV16X_OK)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	3320      	adds	r3, #32
 800911a:	7afa      	ldrb	r2, [r7, #11]
 800911c:	4611      	mov	r1, r2
 800911e:	4618      	mov	r0, r3
 8009120:	f000 fadc 	bl	80096dc <lsm6dsv16x_mem_bank_set>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d002      	beq.n	8009130 <LSM6DSV16X_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSV16X_ERROR;
 800912a:	f04f 33ff 	mov.w	r3, #4294967295
 800912e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009130:	68fb      	ldr	r3, [r7, #12]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
	...

0800913c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
            : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8009148:	edd7 7a00 	vldr	s15, [r7]
 800914c:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8009150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009158:	d801      	bhi.n	800915e <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x22>
 800915a:	2301      	movs	r3, #1
 800915c:	e06e      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800915e:	edd7 7a00 	vldr	s15, [r7]
 8009162:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8009166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800916a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800916e:	d801      	bhi.n	8009174 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x38>
 8009170:	2302      	movs	r3, #2
 8009172:	e063      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8009174:	edd7 7a00 	vldr	s15, [r7]
 8009178:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800917c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009184:	d801      	bhi.n	800918a <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8009186:	2303      	movs	r3, #3
 8009188:	e058      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800918a:	edd7 7a00 	vldr	s15, [r7]
 800918e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8009192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800919a:	d801      	bhi.n	80091a0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x64>
 800919c:	2304      	movs	r3, #4
 800919e:	e04d      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80091a0:	edd7 7a00 	vldr	s15, [r7]
 80091a4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8009264 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x128>
 80091a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b0:	d801      	bhi.n	80091b6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80091b2:	2305      	movs	r3, #5
 80091b4:	e042      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80091b6:	edd7 7a00 	vldr	s15, [r7]
 80091ba:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8009268 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x12c>
 80091be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091c6:	d801      	bhi.n	80091cc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x90>
 80091c8:	2306      	movs	r3, #6
 80091ca:	e037      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80091cc:	edd7 7a00 	vldr	s15, [r7]
 80091d0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800926c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x130>
 80091d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091dc:	d801      	bhi.n	80091e2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80091de:	2307      	movs	r3, #7
 80091e0:	e02c      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80091e2:	edd7 7a00 	vldr	s15, [r7]
 80091e6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8009270 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x134>
 80091ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091f2:	d801      	bhi.n	80091f8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80091f4:	2308      	movs	r3, #8
 80091f6:	e021      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 80091f8:	edd7 7a00 	vldr	s15, [r7]
 80091fc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009274 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x138>
 8009200:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009208:	d801      	bhi.n	800920e <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800920a:	2309      	movs	r3, #9
 800920c:	e016      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800920e:	edd7 7a00 	vldr	s15, [r7]
 8009212:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009278 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8009216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800921a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800921e:	d801      	bhi.n	8009224 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8009220:	230a      	movs	r3, #10
 8009222:	e00b      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8009224:	edd7 7a00 	vldr	s15, [r7]
 8009228:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800927c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x140>
 800922c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009234:	d801      	bhi.n	800923a <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xfe>
 8009236:	230b      	movs	r3, #11
 8009238:	e000      	b.n	800923c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 800923a:	230c      	movs	r3, #12
  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 800923c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	3320      	adds	r3, #32
 8009242:	7bfa      	ldrb	r2, [r7, #15]
 8009244:	4611      	mov	r1, r2
 8009246:	4618      	mov	r0, r3
 8009248:	f000 fa8a 	bl	8009760 <lsm6dsv16x_xl_data_rate_set>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d002      	beq.n	8009258 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11c>
  {
    return LSM6DSV16X_ERROR;
 8009252:	f04f 33ff 	mov.w	r3, #4294967295
 8009256:	e000      	b.n	800925a <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11e>
  }

  return LSM6DSV16X_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	42700000 	.word	0x42700000
 8009268:	42f00000 	.word	0x42f00000
 800926c:	43700000 	.word	0x43700000
 8009270:	43f00000 	.word	0x43f00000
 8009274:	44700000 	.word	0x44700000
 8009278:	44f00000 	.word	0x44f00000
 800927c:	45700000 	.word	0x45700000

08009280 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
                  : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 800928c:	edd7 7a00 	vldr	s15, [r7]
 8009290:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8009294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800929c:	d801      	bhi.n	80092a2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x22>
 800929e:	2301      	movs	r3, #1
 80092a0:	e06e      	b.n	8009380 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80092a2:	edd7 7a00 	vldr	s15, [r7]
 80092a6:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 80092aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b2:	d801      	bhi.n	80092b8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x38>
 80092b4:	2302      	movs	r3, #2
 80092b6:	e063      	b.n	8009380 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80092b8:	edd7 7a00 	vldr	s15, [r7]
 80092bc:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80092c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c8:	d801      	bhi.n	80092ce <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80092ca:	2303      	movs	r3, #3
 80092cc:	e058      	b.n	8009380 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80092ce:	edd7 7a00 	vldr	s15, [r7]
 80092d2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80092d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092de:	d801      	bhi.n	80092e4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x64>
 80092e0:	2304      	movs	r3, #4
 80092e2:	e04d      	b.n	8009380 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80092e4:	edd7 7a00 	vldr	s15, [r7]
 80092e8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8009394 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x114>
 80092ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092f4:	d801      	bhi.n	80092fa <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80092f6:	2305      	movs	r3, #5
 80092f8:	e042      	b.n	8009380 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 80092fa:	edd7 7a00 	vldr	s15, [r7]
 80092fe:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009398 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x118>
 8009302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800930a:	d801      	bhi.n	8009310 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x90>
 800930c:	2306      	movs	r3, #6
 800930e:	e037      	b.n	8009380 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8009310:	edd7 7a00 	vldr	s15, [r7]
 8009314:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800939c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8009318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800931c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009320:	d801      	bhi.n	8009326 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8009322:	2307      	movs	r3, #7
 8009324:	e02c      	b.n	8009380 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8009326:	edd7 7a00 	vldr	s15, [r7]
 800932a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80093a0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x120>
 800932e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009336:	d801      	bhi.n	800933c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8009338:	2308      	movs	r3, #8
 800933a:	e021      	b.n	8009380 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800933c:	edd7 7a00 	vldr	s15, [r7]
 8009340:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80093a4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x124>
 8009344:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800934c:	d801      	bhi.n	8009352 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800934e:	2309      	movs	r3, #9
 8009350:	e016      	b.n	8009380 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8009352:	edd7 7a00 	vldr	s15, [r7]
 8009356:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80093a8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x128>
 800935a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800935e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009362:	d801      	bhi.n	8009368 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8009364:	230a      	movs	r3, #10
 8009366:	e00b      	b.n	8009380 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8009368:	edd7 7a00 	vldr	s15, [r7]
 800936c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80093ac <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x12c>
 8009370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009378:	d801      	bhi.n	800937e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xfe>
 800937a:	230b      	movs	r3, #11
 800937c:	e000      	b.n	8009380 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 800937e:	230c      	movs	r3, #12
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                  : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                  : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                  :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr
 8009394:	42700000 	.word	0x42700000
 8009398:	42f00000 	.word	0x42f00000
 800939c:	43700000 	.word	0x43700000
 80093a0:	43f00000 	.word	0x43f00000
 80093a4:	44700000 	.word	0x44700000
 80093a8:	44f00000 	.word	0x44f00000
 80093ac:	45700000 	.word	0x45700000

080093b0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
            : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 80093bc:	edd7 7a00 	vldr	s15, [r7]
 80093c0:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 80093c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093cc:	d801      	bhi.n	80093d2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80093ce:	2302      	movs	r3, #2
 80093d0:	e063      	b.n	800949a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80093d2:	edd7 7a00 	vldr	s15, [r7]
 80093d6:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80093da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093e2:	d801      	bhi.n	80093e8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80093e4:	2303      	movs	r3, #3
 80093e6:	e058      	b.n	800949a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80093e8:	edd7 7a00 	vldr	s15, [r7]
 80093ec:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80093f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093f8:	d801      	bhi.n	80093fe <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80093fa:	2304      	movs	r3, #4
 80093fc:	e04d      	b.n	800949a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80093fe:	edd7 7a00 	vldr	s15, [r7]
 8009402:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80094c0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8009406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800940a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800940e:	d801      	bhi.n	8009414 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8009410:	2305      	movs	r3, #5
 8009412:	e042      	b.n	800949a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009414:	edd7 7a00 	vldr	s15, [r7]
 8009418:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80094c4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800941c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009424:	d801      	bhi.n	800942a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8009426:	2306      	movs	r3, #6
 8009428:	e037      	b.n	800949a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800942a:	edd7 7a00 	vldr	s15, [r7]
 800942e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80094c8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x118>
 8009432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800943a:	d801      	bhi.n	8009440 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800943c:	2307      	movs	r3, #7
 800943e:	e02c      	b.n	800949a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009440:	edd7 7a00 	vldr	s15, [r7]
 8009444:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80094cc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x11c>
 8009448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800944c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009450:	d801      	bhi.n	8009456 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8009452:	2308      	movs	r3, #8
 8009454:	e021      	b.n	800949a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009456:	edd7 7a00 	vldr	s15, [r7]
 800945a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80094d0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x120>
 800945e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009466:	d801      	bhi.n	800946c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8009468:	2309      	movs	r3, #9
 800946a:	e016      	b.n	800949a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800946c:	edd7 7a00 	vldr	s15, [r7]
 8009470:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80094d4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x124>
 8009474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800947c:	d801      	bhi.n	8009482 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800947e:	230a      	movs	r3, #10
 8009480:	e00b      	b.n	800949a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009482:	edd7 7a00 	vldr	s15, [r7]
 8009486:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80094d8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x128>
 800948a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800948e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009492:	d801      	bhi.n	8009498 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xe8>
 8009494:	230b      	movs	r3, #11
 8009496:	e000      	b.n	800949a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009498:	230c      	movs	r3, #12
  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 800949a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	3320      	adds	r3, #32
 80094a0:	7bfa      	ldrb	r2, [r7, #15]
 80094a2:	4611      	mov	r1, r2
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 fabd 	bl	8009a24 <lsm6dsv16x_gy_data_rate_set>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d002      	beq.n	80094b6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSV16X_ERROR;
 80094b0:	f04f 33ff 	mov.w	r3, #4294967295
 80094b4:	e000      	b.n	80094b8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSV16X_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	42700000 	.word	0x42700000
 80094c4:	42f00000 	.word	0x42f00000
 80094c8:	43700000 	.word	0x43700000
 80094cc:	43f00000 	.word	0x43f00000
 80094d0:	44700000 	.word	0x44700000
 80094d4:	44f00000 	.word	0x44f00000
 80094d8:	45700000 	.word	0x45700000

080094dc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
                   : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 80094e8:	edd7 7a00 	vldr	s15, [r7]
 80094ec:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 80094f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80094f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f8:	d801      	bhi.n	80094fe <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80094fa:	2302      	movs	r3, #2
 80094fc:	e063      	b.n	80095c6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80094fe:	edd7 7a00 	vldr	s15, [r7]
 8009502:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8009506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800950a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800950e:	d801      	bhi.n	8009514 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8009510:	2303      	movs	r3, #3
 8009512:	e058      	b.n	80095c6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009514:	edd7 7a00 	vldr	s15, [r7]
 8009518:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800951c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009524:	d801      	bhi.n	800952a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8009526:	2304      	movs	r3, #4
 8009528:	e04d      	b.n	80095c6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800952a:	edd7 7a00 	vldr	s15, [r7]
 800952e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80095dc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8009532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800953a:	d801      	bhi.n	8009540 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800953c:	2305      	movs	r3, #5
 800953e:	e042      	b.n	80095c6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009540:	edd7 7a00 	vldr	s15, [r7]
 8009544:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80095e0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x104>
 8009548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800954c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009550:	d801      	bhi.n	8009556 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8009552:	2306      	movs	r3, #6
 8009554:	e037      	b.n	80095c6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009556:	edd7 7a00 	vldr	s15, [r7]
 800955a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80095e4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x108>
 800955e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009566:	d801      	bhi.n	800956c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8009568:	2307      	movs	r3, #7
 800956a:	e02c      	b.n	80095c6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800956c:	edd7 7a00 	vldr	s15, [r7]
 8009570:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80095e8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x10c>
 8009574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800957c:	d801      	bhi.n	8009582 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800957e:	2308      	movs	r3, #8
 8009580:	e021      	b.n	80095c6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009582:	edd7 7a00 	vldr	s15, [r7]
 8009586:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80095ec <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x110>
 800958a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800958e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009592:	d801      	bhi.n	8009598 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8009594:	2309      	movs	r3, #9
 8009596:	e016      	b.n	80095c6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009598:	edd7 7a00 	vldr	s15, [r7]
 800959c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80095f0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x114>
 80095a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095a8:	d801      	bhi.n	80095ae <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80095aa:	230a      	movs	r3, #10
 80095ac:	e00b      	b.n	80095c6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80095ae:	edd7 7a00 	vldr	s15, [r7]
 80095b2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80095f4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x118>
 80095b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095be:	d801      	bhi.n	80095c4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80095c0:	230b      	movs	r3, #11
 80095c2:	e000      	b.n	80095c6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80095c4:	230c      	movs	r3, #12
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                   : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                   : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                   :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	42700000 	.word	0x42700000
 80095e0:	42f00000 	.word	0x42f00000
 80095e4:	43700000 	.word	0x43700000
 80095e8:	43f00000 	.word	0x43f00000
 80095ec:	44700000 	.word	0x44700000
 80095f0:	44f00000 	.word	0x44f00000
 80095f4:	45700000 	.word	0x45700000

080095f8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80095f8:	b590      	push	{r4, r7, lr}
 80095fa:	b087      	sub	sp, #28
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	607a      	str	r2, [r7, #4]
 8009602:	461a      	mov	r2, r3
 8009604:	460b      	mov	r3, r1
 8009606:	72fb      	strb	r3, [r7, #11]
 8009608:	4613      	mov	r3, r2
 800960a:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	695c      	ldr	r4, [r3, #20]
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	7b1b      	ldrb	r3, [r3, #12]
 8009618:	4618      	mov	r0, r3
 800961a:	7afb      	ldrb	r3, [r7, #11]
 800961c:	b299      	uxth	r1, r3
 800961e:	893b      	ldrh	r3, [r7, #8]
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	47a0      	blx	r4
 8009624:	4603      	mov	r3, r0
}
 8009626:	4618      	mov	r0, r3
 8009628:	371c      	adds	r7, #28
 800962a:	46bd      	mov	sp, r7
 800962c:	bd90      	pop	{r4, r7, pc}

0800962e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800962e:	b590      	push	{r4, r7, lr}
 8009630:	b087      	sub	sp, #28
 8009632:	af00      	add	r7, sp, #0
 8009634:	60f8      	str	r0, [r7, #12]
 8009636:	607a      	str	r2, [r7, #4]
 8009638:	461a      	mov	r2, r3
 800963a:	460b      	mov	r3, r1
 800963c:	72fb      	strb	r3, [r7, #11]
 800963e:	4613      	mov	r3, r2
 8009640:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	691c      	ldr	r4, [r3, #16]
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	7b1b      	ldrb	r3, [r3, #12]
 800964e:	4618      	mov	r0, r3
 8009650:	7afb      	ldrb	r3, [r7, #11]
 8009652:	b299      	uxth	r1, r3
 8009654:	893b      	ldrh	r3, [r7, #8]
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	47a0      	blx	r4
 800965a:	4603      	mov	r3, r0
}
 800965c:	4618      	mov	r0, r3
 800965e:	371c      	adds	r7, #28
 8009660:	46bd      	mov	sp, r7
 8009662:	bd90      	pop	{r4, r7, pc}

08009664 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8009664:	b590      	push	{r4, r7, lr}
 8009666:	b087      	sub	sp, #28
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	607a      	str	r2, [r7, #4]
 800966e:	461a      	mov	r2, r3
 8009670:	460b      	mov	r3, r1
 8009672:	72fb      	strb	r3, [r7, #11]
 8009674:	4613      	mov	r3, r2
 8009676:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d102      	bne.n	8009684 <lsm6dsv16x_read_reg+0x20>
  {
    return -1;
 800967e:	f04f 33ff 	mov.w	r3, #4294967295
 8009682:	e009      	b.n	8009698 <lsm6dsv16x_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	685c      	ldr	r4, [r3, #4]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	68d8      	ldr	r0, [r3, #12]
 800968c:	893b      	ldrh	r3, [r7, #8]
 800968e:	7af9      	ldrb	r1, [r7, #11]
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	47a0      	blx	r4
 8009694:	6178      	str	r0, [r7, #20]

  return ret;
 8009696:	697b      	ldr	r3, [r7, #20]
}
 8009698:	4618      	mov	r0, r3
 800969a:	371c      	adds	r7, #28
 800969c:	46bd      	mov	sp, r7
 800969e:	bd90      	pop	{r4, r7, pc}

080096a0 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80096a0:	b590      	push	{r4, r7, lr}
 80096a2:	b087      	sub	sp, #28
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	607a      	str	r2, [r7, #4]
 80096aa:	461a      	mov	r2, r3
 80096ac:	460b      	mov	r3, r1
 80096ae:	72fb      	strb	r3, [r7, #11]
 80096b0:	4613      	mov	r3, r2
 80096b2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d102      	bne.n	80096c0 <lsm6dsv16x_write_reg+0x20>
  {
    return -1;
 80096ba:	f04f 33ff 	mov.w	r3, #4294967295
 80096be:	e009      	b.n	80096d4 <lsm6dsv16x_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681c      	ldr	r4, [r3, #0]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	68d8      	ldr	r0, [r3, #12]
 80096c8:	893b      	ldrh	r3, [r7, #8]
 80096ca:	7af9      	ldrb	r1, [r7, #11]
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	47a0      	blx	r4
 80096d0:	6178      	str	r0, [r7, #20]

  return ret;
 80096d2:	697b      	ldr	r3, [r7, #20]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	371c      	adds	r7, #28
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd90      	pop	{r4, r7, pc}

080096dc <lsm6dsv16x_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dsv16x_mem_bank_t val)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80096e8:	f107 0208 	add.w	r2, r7, #8
 80096ec:	2301      	movs	r3, #1
 80096ee:	2101      	movs	r1, #1
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7ff ffb7 	bl	8009664 <lsm6dsv16x_read_reg>
 80096f6:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <lsm6dsv16x_mem_bank_set+0x26>
  {
    return ret;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	e019      	b.n	8009736 <lsm6dsv16x_mem_bank_set+0x5a>
  }

  func_cfg_access.shub_reg_access = ((uint8_t)val & 0x02U) >> 1;
 8009702:	78fb      	ldrb	r3, [r7, #3]
 8009704:	085b      	lsrs	r3, r3, #1
 8009706:	f003 0301 	and.w	r3, r3, #1
 800970a:	b2da      	uxtb	r2, r3
 800970c:	7a3b      	ldrb	r3, [r7, #8]
 800970e:	f362 1386 	bfi	r3, r2, #6, #1
 8009712:	723b      	strb	r3, [r7, #8]
  func_cfg_access.emb_func_reg_access = (uint8_t)val & 0x01U;
 8009714:	78fb      	ldrb	r3, [r7, #3]
 8009716:	f003 0301 	and.w	r3, r3, #1
 800971a:	b2da      	uxtb	r2, r3
 800971c:	7a3b      	ldrb	r3, [r7, #8]
 800971e:	f362 13c7 	bfi	r3, r2, #7, #1
 8009722:	723b      	strb	r3, [r7, #8]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8009724:	f107 0208 	add.w	r2, r7, #8
 8009728:	2301      	movs	r3, #1
 800972a:	2101      	movs	r1, #1
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7ff ffb7 	bl	80096a0 <lsm6dsv16x_write_reg>
 8009732:	60f8      	str	r0, [r7, #12]

  return ret;
 8009734:	68fb      	ldr	r3, [r7, #12]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b084      	sub	sp, #16
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 8009748:	2301      	movs	r3, #1
 800974a:	683a      	ldr	r2, [r7, #0]
 800974c:	210f      	movs	r1, #15
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f7ff ff88 	bl	8009664 <lsm6dsv16x_read_reg>
 8009754:	60f8      	str	r0, [r7, #12]

  return ret;
 8009756:	68fb      	ldr	r3, [r7, #12]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	460b      	mov	r3, r1
 800976a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800976c:	f107 0210 	add.w	r2, r7, #16
 8009770:	2301      	movs	r3, #1
 8009772:	2110      	movs	r1, #16
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7ff ff75 	bl	8009664 <lsm6dsv16x_read_reg>
 800977a:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <lsm6dsv16x_xl_data_rate_set+0x26>
  {
    return ret;
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	e039      	b.n	80097fa <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 8009786:	78fb      	ldrb	r3, [r7, #3]
 8009788:	f003 030f 	and.w	r3, r3, #15
 800978c:	b2da      	uxtb	r2, r3
 800978e:	7c3b      	ldrb	r3, [r7, #16]
 8009790:	f362 0303 	bfi	r3, r2, #0, #4
 8009794:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8009796:	f107 0210 	add.w	r2, r7, #16
 800979a:	2301      	movs	r3, #1
 800979c:	2110      	movs	r1, #16
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7ff ff7e 	bl	80096a0 <lsm6dsv16x_write_reg>
 80097a4:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d001      	beq.n	80097b0 <lsm6dsv16x_xl_data_rate_set+0x50>
  {
    return ret;
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	e024      	b.n	80097fa <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 80097b0:	78fb      	ldrb	r3, [r7, #3]
 80097b2:	091b      	lsrs	r3, r3, #4
 80097b4:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 80097b6:	7cfb      	ldrb	r3, [r7, #19]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d01d      	beq.n	80097f8 <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80097bc:	f107 020c 	add.w	r2, r7, #12
 80097c0:	2301      	movs	r3, #1
 80097c2:	2162      	movs	r1, #98	@ 0x62
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7ff ff4d 	bl	8009664 <lsm6dsv16x_read_reg>
 80097ca:	4602      	mov	r2, r0
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	4413      	add	r3, r2
 80097d0:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 80097d2:	7cfb      	ldrb	r3, [r7, #19]
 80097d4:	f003 0303 	and.w	r3, r3, #3
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	7b3b      	ldrb	r3, [r7, #12]
 80097dc:	f362 0301 	bfi	r3, r2, #0, #2
 80097e0:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80097e2:	f107 020c 	add.w	r2, r7, #12
 80097e6:	2301      	movs	r3, #1
 80097e8:	2162      	movs	r1, #98	@ 0x62
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7ff ff58 	bl	80096a0 <lsm6dsv16x_write_reg>
 80097f0:	4602      	mov	r2, r0
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	4413      	add	r3, r2
 80097f6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80097f8:	697b      	ldr	r3, [r7, #20]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3718      	adds	r7, #24
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
	...

08009804 <lsm6dsv16x_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b086      	sub	sp, #24
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 800980e:	f107 0210 	add.w	r2, r7, #16
 8009812:	2301      	movs	r3, #1
 8009814:	2110      	movs	r1, #16
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f7ff ff24 	bl	8009664 <lsm6dsv16x_read_reg>
 800981c:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 800981e:	f107 020c 	add.w	r2, r7, #12
 8009822:	2301      	movs	r3, #1
 8009824:	2162      	movs	r1, #98	@ 0x62
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7ff ff1c 	bl	8009664 <lsm6dsv16x_read_reg>
 800982c:	4602      	mov	r2, r0
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	4413      	add	r3, r2
 8009832:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d001      	beq.n	800983e <lsm6dsv16x_xl_data_rate_get+0x3a>
  {
    return ret;
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	e0ed      	b.n	8009a1a <lsm6dsv16x_xl_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 800983e:	7b3b      	ldrb	r3, [r7, #12]
 8009840:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009844:	b2db      	uxtb	r3, r3
 8009846:	74fb      	strb	r3, [r7, #19]

  switch (ctrl1.odr_xl)
 8009848:	7c3b      	ldrb	r3, [r7, #16]
 800984a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800984e:	b2db      	uxtb	r3, r3
 8009850:	2b0c      	cmp	r3, #12
 8009852:	f200 80dd 	bhi.w	8009a10 <lsm6dsv16x_xl_data_rate_get+0x20c>
 8009856:	a201      	add	r2, pc, #4	@ (adr r2, 800985c <lsm6dsv16x_xl_data_rate_get+0x58>)
 8009858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985c:	08009891 	.word	0x08009891
 8009860:	08009899 	.word	0x08009899
 8009864:	080098a1 	.word	0x080098a1
 8009868:	080098a9 	.word	0x080098a9
 800986c:	080098cd 	.word	0x080098cd
 8009870:	080098f1 	.word	0x080098f1
 8009874:	08009915 	.word	0x08009915
 8009878:	08009939 	.word	0x08009939
 800987c:	0800995d 	.word	0x0800995d
 8009880:	08009981 	.word	0x08009981
 8009884:	080099a5 	.word	0x080099a5
 8009888:	080099c9 	.word	0x080099c9
 800988c:	080099ed 	.word	0x080099ed
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	2200      	movs	r2, #0
 8009894:	701a      	strb	r2, [r3, #0]
      break;
 8009896:	e0bf      	b.n	8009a18 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	2201      	movs	r2, #1
 800989c:	701a      	strb	r2, [r3, #0]
      break;
 800989e:	e0bb      	b.n	8009a18 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	2202      	movs	r2, #2
 80098a4:	701a      	strb	r2, [r3, #0]
      break;
 80098a6:	e0b7      	b.n	8009a18 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 80098a8:	7cfb      	ldrb	r3, [r7, #19]
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d005      	beq.n	80098ba <lsm6dsv16x_xl_data_rate_get+0xb6>
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d007      	beq.n	80098c2 <lsm6dsv16x_xl_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	2203      	movs	r2, #3
 80098b6:	701a      	strb	r2, [r3, #0]
          break;
 80098b8:	e007      	b.n	80098ca <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	2213      	movs	r2, #19
 80098be:	701a      	strb	r2, [r3, #0]
          break;
 80098c0:	e003      	b.n	80098ca <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	2223      	movs	r2, #35	@ 0x23
 80098c6:	701a      	strb	r2, [r3, #0]
          break;
 80098c8:	bf00      	nop
      }
      break;
 80098ca:	e0a5      	b.n	8009a18 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 80098cc:	7cfb      	ldrb	r3, [r7, #19]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d005      	beq.n	80098de <lsm6dsv16x_xl_data_rate_get+0xda>
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d007      	beq.n	80098e6 <lsm6dsv16x_xl_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2204      	movs	r2, #4
 80098da:	701a      	strb	r2, [r3, #0]
          break;
 80098dc:	e007      	b.n	80098ee <lsm6dsv16x_xl_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	2214      	movs	r2, #20
 80098e2:	701a      	strb	r2, [r3, #0]
          break;
 80098e4:	e003      	b.n	80098ee <lsm6dsv16x_xl_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2224      	movs	r2, #36	@ 0x24
 80098ea:	701a      	strb	r2, [r3, #0]
          break;
 80098ec:	bf00      	nop
      }
      break;
 80098ee:	e093      	b.n	8009a18 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 80098f0:	7cfb      	ldrb	r3, [r7, #19]
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d005      	beq.n	8009902 <lsm6dsv16x_xl_data_rate_get+0xfe>
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d007      	beq.n	800990a <lsm6dsv16x_xl_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2205      	movs	r2, #5
 80098fe:	701a      	strb	r2, [r3, #0]
          break;
 8009900:	e007      	b.n	8009912 <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2215      	movs	r2, #21
 8009906:	701a      	strb	r2, [r3, #0]
          break;
 8009908:	e003      	b.n	8009912 <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	2225      	movs	r2, #37	@ 0x25
 800990e:	701a      	strb	r2, [r3, #0]
          break;
 8009910:	bf00      	nop
      }
      break;
 8009912:	e081      	b.n	8009a18 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 8009914:	7cfb      	ldrb	r3, [r7, #19]
 8009916:	2b01      	cmp	r3, #1
 8009918:	d005      	beq.n	8009926 <lsm6dsv16x_xl_data_rate_get+0x122>
 800991a:	2b02      	cmp	r3, #2
 800991c:	d007      	beq.n	800992e <lsm6dsv16x_xl_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	2206      	movs	r2, #6
 8009922:	701a      	strb	r2, [r3, #0]
          break;
 8009924:	e007      	b.n	8009936 <lsm6dsv16x_xl_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	2216      	movs	r2, #22
 800992a:	701a      	strb	r2, [r3, #0]
          break;
 800992c:	e003      	b.n	8009936 <lsm6dsv16x_xl_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	2226      	movs	r2, #38	@ 0x26
 8009932:	701a      	strb	r2, [r3, #0]
          break;
 8009934:	bf00      	nop
      }
      break;
 8009936:	e06f      	b.n	8009a18 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 8009938:	7cfb      	ldrb	r3, [r7, #19]
 800993a:	2b01      	cmp	r3, #1
 800993c:	d005      	beq.n	800994a <lsm6dsv16x_xl_data_rate_get+0x146>
 800993e:	2b02      	cmp	r3, #2
 8009940:	d007      	beq.n	8009952 <lsm6dsv16x_xl_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	2207      	movs	r2, #7
 8009946:	701a      	strb	r2, [r3, #0]
          break;
 8009948:	e007      	b.n	800995a <lsm6dsv16x_xl_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	2217      	movs	r2, #23
 800994e:	701a      	strb	r2, [r3, #0]
          break;
 8009950:	e003      	b.n	800995a <lsm6dsv16x_xl_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	2227      	movs	r2, #39	@ 0x27
 8009956:	701a      	strb	r2, [r3, #0]
          break;
 8009958:	bf00      	nop
      }
      break;
 800995a:	e05d      	b.n	8009a18 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 800995c:	7cfb      	ldrb	r3, [r7, #19]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d005      	beq.n	800996e <lsm6dsv16x_xl_data_rate_get+0x16a>
 8009962:	2b02      	cmp	r3, #2
 8009964:	d007      	beq.n	8009976 <lsm6dsv16x_xl_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2208      	movs	r2, #8
 800996a:	701a      	strb	r2, [r3, #0]
          break;
 800996c:	e007      	b.n	800997e <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	2218      	movs	r2, #24
 8009972:	701a      	strb	r2, [r3, #0]
          break;
 8009974:	e003      	b.n	800997e <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	2228      	movs	r2, #40	@ 0x28
 800997a:	701a      	strb	r2, [r3, #0]
          break;
 800997c:	bf00      	nop
      }
      break;
 800997e:	e04b      	b.n	8009a18 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 8009980:	7cfb      	ldrb	r3, [r7, #19]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d005      	beq.n	8009992 <lsm6dsv16x_xl_data_rate_get+0x18e>
 8009986:	2b02      	cmp	r3, #2
 8009988:	d007      	beq.n	800999a <lsm6dsv16x_xl_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2209      	movs	r2, #9
 800998e:	701a      	strb	r2, [r3, #0]
          break;
 8009990:	e007      	b.n	80099a2 <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	2219      	movs	r2, #25
 8009996:	701a      	strb	r2, [r3, #0]
          break;
 8009998:	e003      	b.n	80099a2 <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	2229      	movs	r2, #41	@ 0x29
 800999e:	701a      	strb	r2, [r3, #0]
          break;
 80099a0:	bf00      	nop
      }
      break;
 80099a2:	e039      	b.n	8009a18 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 80099a4:	7cfb      	ldrb	r3, [r7, #19]
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d005      	beq.n	80099b6 <lsm6dsv16x_xl_data_rate_get+0x1b2>
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d007      	beq.n	80099be <lsm6dsv16x_xl_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	220a      	movs	r2, #10
 80099b2:	701a      	strb	r2, [r3, #0]
          break;
 80099b4:	e007      	b.n	80099c6 <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	221a      	movs	r2, #26
 80099ba:	701a      	strb	r2, [r3, #0]
          break;
 80099bc:	e003      	b.n	80099c6 <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	222a      	movs	r2, #42	@ 0x2a
 80099c2:	701a      	strb	r2, [r3, #0]
          break;
 80099c4:	bf00      	nop
      }
      break;
 80099c6:	e027      	b.n	8009a18 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 80099c8:	7cfb      	ldrb	r3, [r7, #19]
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	d005      	beq.n	80099da <lsm6dsv16x_xl_data_rate_get+0x1d6>
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d007      	beq.n	80099e2 <lsm6dsv16x_xl_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	220b      	movs	r2, #11
 80099d6:	701a      	strb	r2, [r3, #0]
          break;
 80099d8:	e007      	b.n	80099ea <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	221b      	movs	r2, #27
 80099de:	701a      	strb	r2, [r3, #0]
          break;
 80099e0:	e003      	b.n	80099ea <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	222b      	movs	r2, #43	@ 0x2b
 80099e6:	701a      	strb	r2, [r3, #0]
          break;
 80099e8:	bf00      	nop
      }
      break;
 80099ea:	e015      	b.n	8009a18 <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 80099ec:	7cfb      	ldrb	r3, [r7, #19]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d005      	beq.n	80099fe <lsm6dsv16x_xl_data_rate_get+0x1fa>
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	d007      	beq.n	8009a06 <lsm6dsv16x_xl_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	220c      	movs	r2, #12
 80099fa:	701a      	strb	r2, [r3, #0]
          break;
 80099fc:	e007      	b.n	8009a0e <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	221c      	movs	r2, #28
 8009a02:	701a      	strb	r2, [r3, #0]
          break;
 8009a04:	e003      	b.n	8009a0e <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	222c      	movs	r2, #44	@ 0x2c
 8009a0a:	701a      	strb	r2, [r3, #0]
          break;
 8009a0c:	bf00      	nop
      }
      break;
 8009a0e:	e003      	b.n	8009a18 <lsm6dsv16x_xl_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	2200      	movs	r2, #0
 8009a14:	701a      	strb	r2, [r3, #0]
      break;
 8009a16:	bf00      	nop
  }

  return ret;
 8009a18:	697b      	ldr	r3, [r7, #20]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3718      	adds	r7, #24
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop

08009a24 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8009a30:	f107 0210 	add.w	r2, r7, #16
 8009a34:	2301      	movs	r3, #1
 8009a36:	2111      	movs	r1, #17
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7ff fe13 	bl	8009664 <lsm6dsv16x_read_reg>
 8009a3e:	6178      	str	r0, [r7, #20]

  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8009a40:	78fb      	ldrb	r3, [r7, #3]
 8009a42:	f003 030f 	and.w	r3, r3, #15
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	7c3b      	ldrb	r3, [r7, #16]
 8009a4a:	f362 0303 	bfi	r3, r2, #0, #4
 8009a4e:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8009a50:	f107 0210 	add.w	r2, r7, #16
 8009a54:	2301      	movs	r3, #1
 8009a56:	2111      	movs	r1, #17
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f7ff fe21 	bl	80096a0 <lsm6dsv16x_write_reg>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	4413      	add	r3, r2
 8009a64:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <lsm6dsv16x_gy_data_rate_set+0x4c>
  {
    return ret;
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	e024      	b.n	8009aba <lsm6dsv16x_gy_data_rate_set+0x96>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 8009a70:	78fb      	ldrb	r3, [r7, #3]
 8009a72:	091b      	lsrs	r3, r3, #4
 8009a74:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 8009a76:	7cfb      	ldrb	r3, [r7, #19]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d01d      	beq.n	8009ab8 <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8009a7c:	f107 020c 	add.w	r2, r7, #12
 8009a80:	2301      	movs	r3, #1
 8009a82:	2162      	movs	r1, #98	@ 0x62
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f7ff fded 	bl	8009664 <lsm6dsv16x_read_reg>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	4413      	add	r3, r2
 8009a90:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8009a92:	7cfb      	ldrb	r3, [r7, #19]
 8009a94:	f003 0303 	and.w	r3, r3, #3
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	7b3b      	ldrb	r3, [r7, #12]
 8009a9c:	f362 0301 	bfi	r3, r2, #0, #2
 8009aa0:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8009aa2:	f107 020c 	add.w	r2, r7, #12
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	2162      	movs	r1, #98	@ 0x62
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f7ff fdf8 	bl	80096a0 <lsm6dsv16x_write_reg>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8009ab8:	697b      	ldr	r3, [r7, #20]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3718      	adds	r7, #24
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
	...

08009ac4 <lsm6dsv16x_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b086      	sub	sp, #24
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8009ace:	f107 0210 	add.w	r2, r7, #16
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	2111      	movs	r1, #17
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7ff fdc4 	bl	8009664 <lsm6dsv16x_read_reg>
 8009adc:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8009ade:	f107 020c 	add.w	r2, r7, #12
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	2162      	movs	r1, #98	@ 0x62
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7ff fdbc 	bl	8009664 <lsm6dsv16x_read_reg>
 8009aec:	4602      	mov	r2, r0
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	4413      	add	r3, r2
 8009af2:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d001      	beq.n	8009afe <lsm6dsv16x_gy_data_rate_get+0x3a>
  {
    return ret;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	e0ed      	b.n	8009cda <lsm6dsv16x_gy_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 8009afe:	7b3b      	ldrb	r3, [r7, #12]
 8009b00:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	74fb      	strb	r3, [r7, #19]

  switch (ctrl2.odr_g)
 8009b08:	7c3b      	ldrb	r3, [r7, #16]
 8009b0a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	2b0c      	cmp	r3, #12
 8009b12:	f200 80dd 	bhi.w	8009cd0 <lsm6dsv16x_gy_data_rate_get+0x20c>
 8009b16:	a201      	add	r2, pc, #4	@ (adr r2, 8009b1c <lsm6dsv16x_gy_data_rate_get+0x58>)
 8009b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1c:	08009b51 	.word	0x08009b51
 8009b20:	08009b59 	.word	0x08009b59
 8009b24:	08009b61 	.word	0x08009b61
 8009b28:	08009b69 	.word	0x08009b69
 8009b2c:	08009b8d 	.word	0x08009b8d
 8009b30:	08009bb1 	.word	0x08009bb1
 8009b34:	08009bd5 	.word	0x08009bd5
 8009b38:	08009bf9 	.word	0x08009bf9
 8009b3c:	08009c1d 	.word	0x08009c1d
 8009b40:	08009c41 	.word	0x08009c41
 8009b44:	08009c65 	.word	0x08009c65
 8009b48:	08009c89 	.word	0x08009c89
 8009b4c:	08009cad 	.word	0x08009cad
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	2200      	movs	r2, #0
 8009b54:	701a      	strb	r2, [r3, #0]
      break;
 8009b56:	e0bf      	b.n	8009cd8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	701a      	strb	r2, [r3, #0]
      break;
 8009b5e:	e0bb      	b.n	8009cd8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	2202      	movs	r2, #2
 8009b64:	701a      	strb	r2, [r3, #0]
      break;
 8009b66:	e0b7      	b.n	8009cd8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 8009b68:	7cfb      	ldrb	r3, [r7, #19]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d005      	beq.n	8009b7a <lsm6dsv16x_gy_data_rate_get+0xb6>
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d007      	beq.n	8009b82 <lsm6dsv16x_gy_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	2203      	movs	r2, #3
 8009b76:	701a      	strb	r2, [r3, #0]
          break;
 8009b78:	e007      	b.n	8009b8a <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	2213      	movs	r2, #19
 8009b7e:	701a      	strb	r2, [r3, #0]
          break;
 8009b80:	e003      	b.n	8009b8a <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2223      	movs	r2, #35	@ 0x23
 8009b86:	701a      	strb	r2, [r3, #0]
          break;
 8009b88:	bf00      	nop
      }
      break;
 8009b8a:	e0a5      	b.n	8009cd8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 8009b8c:	7cfb      	ldrb	r3, [r7, #19]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d005      	beq.n	8009b9e <lsm6dsv16x_gy_data_rate_get+0xda>
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d007      	beq.n	8009ba6 <lsm6dsv16x_gy_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	2204      	movs	r2, #4
 8009b9a:	701a      	strb	r2, [r3, #0]
          break;
 8009b9c:	e007      	b.n	8009bae <lsm6dsv16x_gy_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	2214      	movs	r2, #20
 8009ba2:	701a      	strb	r2, [r3, #0]
          break;
 8009ba4:	e003      	b.n	8009bae <lsm6dsv16x_gy_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2224      	movs	r2, #36	@ 0x24
 8009baa:	701a      	strb	r2, [r3, #0]
          break;
 8009bac:	bf00      	nop
      }
      break;
 8009bae:	e093      	b.n	8009cd8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 8009bb0:	7cfb      	ldrb	r3, [r7, #19]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d005      	beq.n	8009bc2 <lsm6dsv16x_gy_data_rate_get+0xfe>
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	d007      	beq.n	8009bca <lsm6dsv16x_gy_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	2205      	movs	r2, #5
 8009bbe:	701a      	strb	r2, [r3, #0]
          break;
 8009bc0:	e007      	b.n	8009bd2 <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	2215      	movs	r2, #21
 8009bc6:	701a      	strb	r2, [r3, #0]
          break;
 8009bc8:	e003      	b.n	8009bd2 <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	2225      	movs	r2, #37	@ 0x25
 8009bce:	701a      	strb	r2, [r3, #0]
          break;
 8009bd0:	bf00      	nop
      }
      break;
 8009bd2:	e081      	b.n	8009cd8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 8009bd4:	7cfb      	ldrb	r3, [r7, #19]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d005      	beq.n	8009be6 <lsm6dsv16x_gy_data_rate_get+0x122>
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d007      	beq.n	8009bee <lsm6dsv16x_gy_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	2206      	movs	r2, #6
 8009be2:	701a      	strb	r2, [r3, #0]
          break;
 8009be4:	e007      	b.n	8009bf6 <lsm6dsv16x_gy_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	2216      	movs	r2, #22
 8009bea:	701a      	strb	r2, [r3, #0]
          break;
 8009bec:	e003      	b.n	8009bf6 <lsm6dsv16x_gy_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	2226      	movs	r2, #38	@ 0x26
 8009bf2:	701a      	strb	r2, [r3, #0]
          break;
 8009bf4:	bf00      	nop
      }
      break;
 8009bf6:	e06f      	b.n	8009cd8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 8009bf8:	7cfb      	ldrb	r3, [r7, #19]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d005      	beq.n	8009c0a <lsm6dsv16x_gy_data_rate_get+0x146>
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d007      	beq.n	8009c12 <lsm6dsv16x_gy_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2207      	movs	r2, #7
 8009c06:	701a      	strb	r2, [r3, #0]
          break;
 8009c08:	e007      	b.n	8009c1a <lsm6dsv16x_gy_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2217      	movs	r2, #23
 8009c0e:	701a      	strb	r2, [r3, #0]
          break;
 8009c10:	e003      	b.n	8009c1a <lsm6dsv16x_gy_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	2227      	movs	r2, #39	@ 0x27
 8009c16:	701a      	strb	r2, [r3, #0]
          break;
 8009c18:	bf00      	nop
      }
      break;
 8009c1a:	e05d      	b.n	8009cd8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 8009c1c:	7cfb      	ldrb	r3, [r7, #19]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d005      	beq.n	8009c2e <lsm6dsv16x_gy_data_rate_get+0x16a>
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d007      	beq.n	8009c36 <lsm6dsv16x_gy_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	2208      	movs	r2, #8
 8009c2a:	701a      	strb	r2, [r3, #0]
          break;
 8009c2c:	e007      	b.n	8009c3e <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	2218      	movs	r2, #24
 8009c32:	701a      	strb	r2, [r3, #0]
          break;
 8009c34:	e003      	b.n	8009c3e <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2228      	movs	r2, #40	@ 0x28
 8009c3a:	701a      	strb	r2, [r3, #0]
          break;
 8009c3c:	bf00      	nop
      }
      break;
 8009c3e:	e04b      	b.n	8009cd8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 8009c40:	7cfb      	ldrb	r3, [r7, #19]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d005      	beq.n	8009c52 <lsm6dsv16x_gy_data_rate_get+0x18e>
 8009c46:	2b02      	cmp	r3, #2
 8009c48:	d007      	beq.n	8009c5a <lsm6dsv16x_gy_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	2209      	movs	r2, #9
 8009c4e:	701a      	strb	r2, [r3, #0]
          break;
 8009c50:	e007      	b.n	8009c62 <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	2219      	movs	r2, #25
 8009c56:	701a      	strb	r2, [r3, #0]
          break;
 8009c58:	e003      	b.n	8009c62 <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	2229      	movs	r2, #41	@ 0x29
 8009c5e:	701a      	strb	r2, [r3, #0]
          break;
 8009c60:	bf00      	nop
      }
      break;
 8009c62:	e039      	b.n	8009cd8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 8009c64:	7cfb      	ldrb	r3, [r7, #19]
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d005      	beq.n	8009c76 <lsm6dsv16x_gy_data_rate_get+0x1b2>
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d007      	beq.n	8009c7e <lsm6dsv16x_gy_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	220a      	movs	r2, #10
 8009c72:	701a      	strb	r2, [r3, #0]
          break;
 8009c74:	e007      	b.n	8009c86 <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	221a      	movs	r2, #26
 8009c7a:	701a      	strb	r2, [r3, #0]
          break;
 8009c7c:	e003      	b.n	8009c86 <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	222a      	movs	r2, #42	@ 0x2a
 8009c82:	701a      	strb	r2, [r3, #0]
          break;
 8009c84:	bf00      	nop
      }
      break;
 8009c86:	e027      	b.n	8009cd8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 8009c88:	7cfb      	ldrb	r3, [r7, #19]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d005      	beq.n	8009c9a <lsm6dsv16x_gy_data_rate_get+0x1d6>
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	d007      	beq.n	8009ca2 <lsm6dsv16x_gy_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	220b      	movs	r2, #11
 8009c96:	701a      	strb	r2, [r3, #0]
          break;
 8009c98:	e007      	b.n	8009caa <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	221b      	movs	r2, #27
 8009c9e:	701a      	strb	r2, [r3, #0]
          break;
 8009ca0:	e003      	b.n	8009caa <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	222b      	movs	r2, #43	@ 0x2b
 8009ca6:	701a      	strb	r2, [r3, #0]
          break;
 8009ca8:	bf00      	nop
      }
      break;
 8009caa:	e015      	b.n	8009cd8 <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 8009cac:	7cfb      	ldrb	r3, [r7, #19]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d005      	beq.n	8009cbe <lsm6dsv16x_gy_data_rate_get+0x1fa>
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d007      	beq.n	8009cc6 <lsm6dsv16x_gy_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	220c      	movs	r2, #12
 8009cba:	701a      	strb	r2, [r3, #0]
          break;
 8009cbc:	e007      	b.n	8009cce <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	221c      	movs	r2, #28
 8009cc2:	701a      	strb	r2, [r3, #0]
          break;
 8009cc4:	e003      	b.n	8009cce <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	222c      	movs	r2, #44	@ 0x2c
 8009cca:	701a      	strb	r2, [r3, #0]
          break;
 8009ccc:	bf00      	nop
      }
      break;
 8009cce:	e003      	b.n	8009cd8 <lsm6dsv16x_gy_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	701a      	strb	r2, [r3, #0]
      break;
 8009cd6:	bf00      	nop
  }

  return ret;
 8009cd8:	697b      	ldr	r3, [r7, #20]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3718      	adds	r7, #24
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop

08009ce4 <lsm6dsv16x_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	460b      	mov	r3, r1
 8009cee:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8009cf0:	f107 0208 	add.w	r2, r7, #8
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	2112      	movs	r1, #18
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7ff fcb3 	bl	8009664 <lsm6dsv16x_read_reg>
 8009cfe:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10f      	bne.n	8009d26 <lsm6dsv16x_auto_increment_set+0x42>
  {
    ctrl3.if_inc = val;
 8009d06:	78fb      	ldrb	r3, [r7, #3]
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	b2da      	uxtb	r2, r3
 8009d0e:	7a3b      	ldrb	r3, [r7, #8]
 8009d10:	f362 0382 	bfi	r3, r2, #2, #1
 8009d14:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8009d16:	f107 0208 	add.w	r2, r7, #8
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	2112      	movs	r1, #18
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7ff fcbe 	bl	80096a0 <lsm6dsv16x_write_reg>
 8009d24:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009d26:	68fb      	ldr	r3, [r7, #12]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8009d3c:	f107 0208 	add.w	r2, r7, #8
 8009d40:	2301      	movs	r3, #1
 8009d42:	2112      	movs	r1, #18
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7ff fc8d 	bl	8009664 <lsm6dsv16x_read_reg>
 8009d4a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10f      	bne.n	8009d72 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8009d52:	78fb      	ldrb	r3, [r7, #3]
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	b2da      	uxtb	r2, r3
 8009d5a:	7a3b      	ldrb	r3, [r7, #8]
 8009d5c:	f362 1386 	bfi	r3, r2, #6, #1
 8009d60:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8009d62:	f107 0208 	add.w	r2, r7, #8
 8009d66:	2301      	movs	r3, #1
 8009d68:	2112      	movs	r1, #18
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7ff fc98 	bl	80096a0 <lsm6dsv16x_write_reg>
 8009d70:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009d72:	68fb      	ldr	r3, [r7, #12]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	460b      	mov	r3, r1
 8009d86:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8009d88:	f107 0208 	add.w	r2, r7, #8
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	2115      	movs	r1, #21
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f7ff fc67 	bl	8009664 <lsm6dsv16x_read_reg>
 8009d96:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10f      	bne.n	8009dbe <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 8009d9e:	78fb      	ldrb	r3, [r7, #3]
 8009da0:	f003 030f 	and.w	r3, r3, #15
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	7a3b      	ldrb	r3, [r7, #8]
 8009da8:	f362 0303 	bfi	r3, r2, #0, #4
 8009dac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8009dae:	f107 0208 	add.w	r2, r7, #8
 8009db2:	2301      	movs	r3, #1
 8009db4:	2115      	movs	r1, #21
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7ff fc72 	bl	80096a0 <lsm6dsv16x_write_reg>
 8009dbc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <lsm6dsv16x_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t *val)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8009dd2:	f107 0208 	add.w	r2, r7, #8
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	2115      	movs	r1, #21
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f7ff fc42 	bl	8009664 <lsm6dsv16x_read_reg>
 8009de0:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d001      	beq.n	8009dec <lsm6dsv16x_gy_full_scale_get+0x24>
  {
    return ret;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	e040      	b.n	8009e6e <lsm6dsv16x_gy_full_scale_get+0xa6>
  }

  switch (ctrl6.fs_g)
 8009dec:	7a3b      	ldrb	r3, [r7, #8]
 8009dee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	2b0c      	cmp	r3, #12
 8009df6:	d835      	bhi.n	8009e64 <lsm6dsv16x_gy_full_scale_get+0x9c>
 8009df8:	a201      	add	r2, pc, #4	@ (adr r2, 8009e00 <lsm6dsv16x_gy_full_scale_get+0x38>)
 8009dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfe:	bf00      	nop
 8009e00:	08009e35 	.word	0x08009e35
 8009e04:	08009e3d 	.word	0x08009e3d
 8009e08:	08009e45 	.word	0x08009e45
 8009e0c:	08009e4d 	.word	0x08009e4d
 8009e10:	08009e55 	.word	0x08009e55
 8009e14:	08009e65 	.word	0x08009e65
 8009e18:	08009e65 	.word	0x08009e65
 8009e1c:	08009e65 	.word	0x08009e65
 8009e20:	08009e65 	.word	0x08009e65
 8009e24:	08009e65 	.word	0x08009e65
 8009e28:	08009e65 	.word	0x08009e65
 8009e2c:	08009e65 	.word	0x08009e65
 8009e30:	08009e5d 	.word	0x08009e5d
  {
    case LSM6DSV16X_125dps:
      *val = LSM6DSV16X_125dps;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	2200      	movs	r2, #0
 8009e38:	701a      	strb	r2, [r3, #0]
      break;
 8009e3a:	e017      	b.n	8009e6c <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_250dps:
      *val = LSM6DSV16X_250dps;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	701a      	strb	r2, [r3, #0]
      break;
 8009e42:	e013      	b.n	8009e6c <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_500dps:
      *val = LSM6DSV16X_500dps;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	2202      	movs	r2, #2
 8009e48:	701a      	strb	r2, [r3, #0]
      break;
 8009e4a:	e00f      	b.n	8009e6c <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_1000dps:
      *val = LSM6DSV16X_1000dps;
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	2203      	movs	r2, #3
 8009e50:	701a      	strb	r2, [r3, #0]
      break;
 8009e52:	e00b      	b.n	8009e6c <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_2000dps:
      *val = LSM6DSV16X_2000dps;
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	2204      	movs	r2, #4
 8009e58:	701a      	strb	r2, [r3, #0]
      break;
 8009e5a:	e007      	b.n	8009e6c <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_4000dps:
      *val = LSM6DSV16X_4000dps;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	220c      	movs	r2, #12
 8009e60:	701a      	strb	r2, [r3, #0]
      break;
 8009e62:	e003      	b.n	8009e6c <lsm6dsv16x_gy_full_scale_get+0xa4>

    default:
      *val = LSM6DSV16X_125dps;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	2200      	movs	r2, #0
 8009e68:	701a      	strb	r2, [r3, #0]
      break;
 8009e6a:	bf00      	nop
  }

  return ret;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop

08009e78 <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	460b      	mov	r3, r1
 8009e82:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8009e84:	f107 0208 	add.w	r2, r7, #8
 8009e88:	2301      	movs	r3, #1
 8009e8a:	2117      	movs	r1, #23
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f7ff fbe9 	bl	8009664 <lsm6dsv16x_read_reg>
 8009e92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d10f      	bne.n	8009eba <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8009e9a:	78fb      	ldrb	r3, [r7, #3]
 8009e9c:	f003 0303 	and.w	r3, r3, #3
 8009ea0:	b2da      	uxtb	r2, r3
 8009ea2:	7a3b      	ldrb	r3, [r7, #8]
 8009ea4:	f362 0301 	bfi	r3, r2, #0, #2
 8009ea8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8009eaa:	f107 0208 	add.w	r2, r7, #8
 8009eae:	2301      	movs	r3, #1
 8009eb0:	2117      	movs	r1, #23
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7ff fbf4 	bl	80096a0 <lsm6dsv16x_write_reg>
 8009eb8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009eba:	68fb      	ldr	r3, [r7, #12]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <lsm6dsv16x_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t *val)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8009ece:	f107 0208 	add.w	r2, r7, #8
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	2117      	movs	r1, #23
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7ff fbc4 	bl	8009664 <lsm6dsv16x_read_reg>
 8009edc:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d001      	beq.n	8009ee8 <lsm6dsv16x_xl_full_scale_get+0x24>
  {
    return ret;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	e026      	b.n	8009f36 <lsm6dsv16x_xl_full_scale_get+0x72>
  }

  switch (ctrl8.fs_xl)
 8009ee8:	7a3b      	ldrb	r3, [r7, #8]
 8009eea:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	2b03      	cmp	r3, #3
 8009ef2:	d81b      	bhi.n	8009f2c <lsm6dsv16x_xl_full_scale_get+0x68>
 8009ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8009efc <lsm6dsv16x_xl_full_scale_get+0x38>)
 8009ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efa:	bf00      	nop
 8009efc:	08009f0d 	.word	0x08009f0d
 8009f00:	08009f15 	.word	0x08009f15
 8009f04:	08009f1d 	.word	0x08009f1d
 8009f08:	08009f25 	.word	0x08009f25
  {
    case LSM6DSV16X_2g:
      *val = LSM6DSV16X_2g;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	701a      	strb	r2, [r3, #0]
      break;
 8009f12:	e00f      	b.n	8009f34 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_4g:
      *val = LSM6DSV16X_4g;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	2201      	movs	r2, #1
 8009f18:	701a      	strb	r2, [r3, #0]
      break;
 8009f1a:	e00b      	b.n	8009f34 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_8g:
      *val = LSM6DSV16X_8g;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	2202      	movs	r2, #2
 8009f20:	701a      	strb	r2, [r3, #0]
      break;
 8009f22:	e007      	b.n	8009f34 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_16g:
      *val = LSM6DSV16X_16g;
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	2203      	movs	r2, #3
 8009f28:	701a      	strb	r2, [r3, #0]
      break;
 8009f2a:	e003      	b.n	8009f34 <lsm6dsv16x_xl_full_scale_get+0x70>

    default:
      *val = LSM6DSV16X_2g;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	701a      	strb	r2, [r3, #0]
      break;
 8009f32:	bf00      	nop
  }

  return ret;
 8009f34:	68fb      	ldr	r3, [r7, #12]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop

08009f40 <lsm6dsv16x_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_G, &buff[0], 6);
 8009f4a:	f107 020c 	add.w	r2, r7, #12
 8009f4e:	2306      	movs	r3, #6
 8009f50:	2122      	movs	r1, #34	@ 0x22
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f7ff fb86 	bl	8009664 <lsm6dsv16x_read_reg>
 8009f58:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d001      	beq.n	8009f64 <lsm6dsv16x_angular_rate_raw_get+0x24>
  {
    return ret;
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	e036      	b.n	8009fd2 <lsm6dsv16x_angular_rate_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 8009f64:	7b7b      	ldrb	r3, [r7, #13]
 8009f66:	b21a      	sxth	r2, r3
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	021b      	lsls	r3, r3, #8
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	7b3a      	ldrb	r2, [r7, #12]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	b21a      	sxth	r2, r3
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8009f84:	7bfa      	ldrb	r2, [r7, #15]
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	3302      	adds	r3, #2
 8009f8a:	b212      	sxth	r2, r2
 8009f8c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	3302      	adds	r3, #2
 8009f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	021b      	lsls	r3, r3, #8
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	7bba      	ldrb	r2, [r7, #14]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	b29a      	uxth	r2, r3
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	3302      	adds	r3, #2
 8009fa6:	b212      	sxth	r2, r2
 8009fa8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8009faa:	7c7a      	ldrb	r2, [r7, #17]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	3304      	adds	r3, #4
 8009fb0:	b212      	sxth	r2, r2
 8009fb2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	021b      	lsls	r3, r3, #8
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	7c3a      	ldrb	r2, [r7, #16]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	3304      	adds	r3, #4
 8009fcc:	b212      	sxth	r2, r2
 8009fce:	801a      	strh	r2, [r3, #0]

  return ret;
 8009fd0:	697b      	ldr	r3, [r7, #20]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <lsm6dsv16x_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b086      	sub	sp, #24
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_A, &buff[0], 6);
 8009fe4:	f107 020c 	add.w	r2, r7, #12
 8009fe8:	2306      	movs	r3, #6
 8009fea:	2128      	movs	r1, #40	@ 0x28
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7ff fb39 	bl	8009664 <lsm6dsv16x_read_reg>
 8009ff2:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d001      	beq.n	8009ffe <lsm6dsv16x_acceleration_raw_get+0x24>
  {
    return ret;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	e036      	b.n	800a06c <lsm6dsv16x_acceleration_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 8009ffe:	7b7b      	ldrb	r3, [r7, #13]
 800a000:	b21a      	sxth	r2, r3
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	021b      	lsls	r3, r3, #8
 800a010:	b29b      	uxth	r3, r3
 800a012:	7b3a      	ldrb	r2, [r7, #12]
 800a014:	4413      	add	r3, r2
 800a016:	b29b      	uxth	r3, r3
 800a018:	b21a      	sxth	r2, r3
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800a01e:	7bfa      	ldrb	r2, [r7, #15]
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	3302      	adds	r3, #2
 800a024:	b212      	sxth	r2, r2
 800a026:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	3302      	adds	r3, #2
 800a02c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a030:	b29b      	uxth	r3, r3
 800a032:	021b      	lsls	r3, r3, #8
 800a034:	b29b      	uxth	r3, r3
 800a036:	7bba      	ldrb	r2, [r7, #14]
 800a038:	4413      	add	r3, r2
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	3302      	adds	r3, #2
 800a040:	b212      	sxth	r2, r2
 800a042:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800a044:	7c7a      	ldrb	r2, [r7, #17]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	3304      	adds	r3, #4
 800a04a:	b212      	sxth	r2, r2
 800a04c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	3304      	adds	r3, #4
 800a052:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a056:	b29b      	uxth	r3, r3
 800a058:	021b      	lsls	r3, r3, #8
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	7c3a      	ldrb	r2, [r7, #16]
 800a05e:	4413      	add	r3, r2
 800a060:	b29a      	uxth	r2, r3
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	3304      	adds	r3, #4
 800a066:	b212      	sxth	r2, r2
 800a068:	801a      	strh	r2, [r3, #0]

  return ret;
 800a06a:	697b      	ldr	r3, [r7, #20]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3718      	adds	r7, #24
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(const stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	460b      	mov	r3, r1
 800a07e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 800a080:	f107 0208 	add.w	r2, r7, #8
 800a084:	2301      	movs	r3, #1
 800a086:	210a      	movs	r1, #10
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f7ff faeb 	bl	8009664 <lsm6dsv16x_read_reg>
 800a08e:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d10f      	bne.n	800a0b6 <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 800a096:	78fb      	ldrb	r3, [r7, #3]
 800a098:	f003 0307 	and.w	r3, r3, #7
 800a09c:	b2da      	uxtb	r2, r3
 800a09e:	7a3b      	ldrb	r3, [r7, #8]
 800a0a0:	f362 0302 	bfi	r3, r2, #0, #3
 800a0a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 800a0a6:	f107 0208 	add.w	r2, r7, #8
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	210a      	movs	r1, #10
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f7ff faf6 	bl	80096a0 <lsm6dsv16x_write_reg>
 800a0b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <lsm6dsv16x_ah_qvar_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ah_qvar_mode_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_ah_qvar_mode_t val)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	7039      	strb	r1, [r7, #0]
  lsm6dsv16x_ctrl7_t ctrl7;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 800a0ca:	f107 0208 	add.w	r2, r7, #8
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	2116      	movs	r1, #22
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7ff fac6 	bl	8009664 <lsm6dsv16x_read_reg>
 800a0d8:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10f      	bne.n	800a100 <lsm6dsv16x_ah_qvar_mode_set+0x40>
  {
    ctrl7.ah_qvar_en = val.ah_qvar_en;
 800a0e0:	783b      	ldrb	r3, [r7, #0]
 800a0e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a0e6:	b2da      	uxtb	r2, r3
 800a0e8:	7a3b      	ldrb	r3, [r7, #8]
 800a0ea:	f362 13c7 	bfi	r3, r2, #7, #1
 800a0ee:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 800a0f0:	f107 0208 	add.w	r2, r7, #8
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	2116      	movs	r1, #22
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f7ff fad1 	bl	80096a0 <lsm6dsv16x_write_reg>
 800a0fe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800a100:	68fb      	ldr	r3, [r7, #12]
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
	...

0800a10c <SHT40AD1B_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_RegisterBusIO(SHT40AD1B_Object_t *pObj, SHT40AD1B_IO_t *pIO)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d103      	bne.n	800a124 <SHT40AD1B_RegisterBusIO+0x18>
  {
    ret = SHT40AD1B_ERROR;
 800a11c:	f04f 33ff 	mov.w	r3, #4294967295
 800a120:	60fb      	str	r3, [r7, #12]
 800a122:	e034      	b.n	800a18e <SHT40AD1B_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init    = pIO->Init;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit  = pIO->DeInit;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	685a      	ldr	r2, [r3, #4]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType = pIO->BusType;
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	689a      	ldr	r2, [r3, #8]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address = pIO->Address;
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	7b1a      	ldrb	r2, [r3, #12]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	731a      	strb	r2, [r3, #12]
    pObj->IO.Write   = pIO->Write;
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	691a      	ldr	r2, [r3, #16]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	611a      	str	r2, [r3, #16]
    pObj->IO.Read    = pIO->Read;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	695a      	ldr	r2, [r3, #20]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick = pIO->GetTick;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	699a      	ldr	r2, [r3, #24]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a0e      	ldr	r2, [pc, #56]	@ (800a198 <SHT40AD1B_RegisterBusIO+0x8c>)
 800a160:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a0d      	ldr	r2, [pc, #52]	@ (800a19c <SHT40AD1B_RegisterBusIO+0x90>)
 800a166:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	69da      	ldr	r2, [r3, #28]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d004      	beq.n	800a188 <SHT40AD1B_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4798      	blx	r3
 800a184:	60f8      	str	r0, [r7, #12]
 800a186:	e002      	b.n	800a18e <SHT40AD1B_RegisterBusIO+0x82>
    }
    else
    {
      ret = SHT40AD1B_ERROR;
 800a188:	f04f 33ff 	mov.w	r3, #4294967295
 800a18c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a18e:	68fb      	ldr	r3, [r7, #12]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	0800a41d 	.word	0x0800a41d
 800a19c:	0800a45d 	.word	0x0800a45d

0800a1a0 <SHT40AD1B_Init>:
  * @brief  Initialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_Init(SHT40AD1B_Object_t *pObj)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* This device doesn't support ODR, works more like one-shot measurement */
  pObj->hum_odr  = 0.0f;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f04f 0200 	mov.w	r2, #0
 800a1ae:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->temp_odr = 0.0f;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f04f 0200 	mov.w	r2, #0
 800a1b6:	639a      	str	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 1;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	370c      	adds	r7, #12
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr

0800a1ce <SHT40AD1B_DeInit>:
  * @brief  Deinitialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_DeInit(SHT40AD1B_Object_t *pObj)
{
 800a1ce:	b480      	push	{r7}
 800a1d0:	b083      	sub	sp, #12
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
  pObj->is_initialized = 0;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <SHT40AD1B_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_ReadID(SHT40AD1B_Object_t *pObj, uint8_t *Id)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b082      	sub	sp, #8
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  return sht40ad1b_device_id_get(&(pObj->Ctx), Id);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	3320      	adds	r3, #32
 800a1fa:	6839      	ldr	r1, [r7, #0]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f000 fa23 	bl	800a648 <sht40ad1b_device_id_get>
 800a202:	4603      	mov	r3, r0
}
 800a204:	4618      	mov	r0, r3
 800a206:	3708      	adds	r7, #8
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <SHT40AD1B_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to SHT40AD1B sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_GetCapabilities(SHT40AD1B_Object_t *pObj, SHT40AD1B_Capabilities_t *Capabilities)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	2201      	movs	r2, #1
 800a21a:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	2200      	movs	r2, #0
 800a220:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	2201      	movs	r2, #1
 800a226:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	2200      	movs	r2, #0
 800a22c:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	2200      	movs	r2, #0
 800a232:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	f04f 0200 	mov.w	r2, #0
 800a23a:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 0.0f;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	f04f 0200 	mov.w	r2, #0
 800a242:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	f04f 0200 	mov.w	r2, #0
 800a24a:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	f04f 0200 	mov.w	r2, #0
 800a252:	615a      	str	r2, [r3, #20]
  return SHT40AD1B_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr

0800a262 <SHT40AD1B_HUM_Enable>:
  * @brief  Enable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Enable(SHT40AD1B_Object_t *pObj)
{
 800a262:	b480      	push	{r7}
 800a264:	b083      	sub	sp, #12
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a270:	2b01      	cmp	r3, #1
 800a272:	d101      	bne.n	800a278 <SHT40AD1B_HUM_Enable+0x16>
  {
    return SHT40AD1B_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	e004      	b.n	800a282 <SHT40AD1B_HUM_Enable+0x20>
  }

  pObj->hum_is_enabled = 1;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <SHT40AD1B_HUM_Disable>:
  * @brief  Disable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Disable(SHT40AD1B_Object_t *pObj)
{
 800a28e:	b480      	push	{r7}
 800a290:	b083      	sub	sp, #12
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d101      	bne.n	800a2a4 <SHT40AD1B_HUM_Disable+0x16>
  {
    return SHT40AD1B_OK;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	e004      	b.n	800a2ae <SHT40AD1B_HUM_Disable+0x20>
  }

  pObj->hum_is_enabled = 0;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <SHT40AD1B_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b083      	sub	sp, #12
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	6039      	str	r1, [r7, #0]
  *Odr = pObj->hum_odr;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	370c      	adds	r7, #12
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <SHT40AD1B_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b083      	sub	sp, #12
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
 800a2e2:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <SHT40AD1B_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetHumidity(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f86f 	bl	800a3e2 <GetData>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d002      	beq.n	800a310 <SHT40AD1B_HUM_GetHumidity+0x1c>
  {
    return SHT40AD1B_ERROR;
 800a30a:	f04f 33ff 	mov.w	r3, #4294967295
 800a30e:	e004      	b.n	800a31a <SHT40AD1B_HUM_GetHumidity+0x26>
  }

  *Value = pObj->hum_value;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <SHT40AD1B_TEMP_Enable>:
  * @brief  Enable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Enable(SHT40AD1B_Object_t *pObj)
{
 800a322:	b480      	push	{r7}
 800a324:	b083      	sub	sp, #12
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a330:	2b01      	cmp	r3, #1
 800a332:	d101      	bne.n	800a338 <SHT40AD1B_TEMP_Enable+0x16>
  {
    return SHT40AD1B_OK;
 800a334:	2300      	movs	r3, #0
 800a336:	e004      	b.n	800a342 <SHT40AD1B_TEMP_Enable+0x20>
  }

  pObj->temp_is_enabled = 1;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <SHT40AD1B_TEMP_Disable>:
  * @brief  Disable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Disable(SHT40AD1B_Object_t *pObj)
{
 800a34e:	b480      	push	{r7}
 800a350:	b083      	sub	sp, #12
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <SHT40AD1B_TEMP_Disable+0x16>
  {
    return SHT40AD1B_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	e004      	b.n	800a36e <SHT40AD1B_TEMP_Disable+0x20>
  }

  pObj->temp_is_enabled = 0;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	370c      	adds	r7, #12
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <SHT40AD1B_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b083      	sub	sp, #12
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	6039      	str	r1, [r7, #0]
  *Odr = pObj->temp_odr;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	370c      	adds	r7, #12
 800a392:	46bd      	mov	sp, r7
 800a394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a398:	4770      	bx	lr

0800a39a <SHT40AD1B_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 800a39a:	b480      	push	{r7}
 800a39c:	b083      	sub	sp, #12
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 800a3a6:	2300      	movs	r3, #0
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <SHT40AD1B_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetTemperature(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f80f 	bl	800a3e2 <GetData>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d002      	beq.n	800a3d0 <SHT40AD1B_TEMP_GetTemperature+0x1c>
  {
    return SHT40AD1B_ERROR;
 800a3ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ce:	e004      	b.n	800a3da <SHT40AD1B_TEMP_GetTemperature+0x26>
  }

  *Value = pObj->temp_value;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <GetData>:
  * @param  pObj the device pObj
  * @param  Status the new data status
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t GetData(SHT40AD1B_Object_t *pObj)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b084      	sub	sp, #16
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
  float_t data[2];  /* humidity, temperature */

  if (sht40ad1b_data_get(&(pObj->Ctx), data) != 0)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3320      	adds	r3, #32
 800a3ee:	f107 0208 	add.w	r2, r7, #8
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f000 f881 	bl	800a4fc <sht40ad1b_data_get>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <GetData+0x24>
  {
    return SHT40AD1B_ERROR;
 800a400:	f04f 33ff 	mov.w	r3, #4294967295
 800a404:	e006      	b.n	800a414 <GetData+0x32>
  }

  pObj->hum_value = data[0];
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	63da      	str	r2, [r3, #60]	@ 0x3c
  pObj->temp_value = data[1];
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	641a      	str	r2, [r3, #64]	@ 0x40

  return SHT40AD1B_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	607a      	str	r2, [r7, #4]
 800a426:	461a      	mov	r2, r3
 800a428:	460b      	mov	r3, r1
 800a42a:	72fb      	strb	r3, [r7, #11]
 800a42c:	4613      	mov	r3, r2
 800a42e:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d109      	bne.n	800a450 <ReadRegWrap+0x34>
  {
    return pObj->IO.Read(pObj->IO.Address, pData, Length);
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	695b      	ldr	r3, [r3, #20]
 800a440:	697a      	ldr	r2, [r7, #20]
 800a442:	7b12      	ldrb	r2, [r2, #12]
 800a444:	4610      	mov	r0, r2
 800a446:	893a      	ldrh	r2, [r7, #8]
 800a448:	6879      	ldr	r1, [r7, #4]
 800a44a:	4798      	blx	r3
 800a44c:	4603      	mov	r3, r0
 800a44e:	e001      	b.n	800a454 <ReadRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 800a450:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800a454:	4618      	mov	r0, r3
 800a456:	3718      	adds	r7, #24
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	607a      	str	r2, [r7, #4]
 800a466:	461a      	mov	r2, r3
 800a468:	460b      	mov	r3, r1
 800a46a:	72fb      	strb	r3, [r7, #11]
 800a46c:	4613      	mov	r3, r2
 800a46e:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d109      	bne.n	800a490 <WriteRegWrap+0x34>
  {
    return pObj->IO.Write(pObj->IO.Address, pData, Length);
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	7b12      	ldrb	r2, [r2, #12]
 800a484:	4610      	mov	r0, r2
 800a486:	893a      	ldrh	r2, [r7, #8]
 800a488:	6879      	ldr	r1, [r7, #4]
 800a48a:	4798      	blx	r3
 800a48c:	4603      	mov	r3, r0
 800a48e:	e001      	b.n	800a494 <WriteRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 800a490:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800a494:	4618      	mov	r0, r3
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <sht40ad1b_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data, uint16_t len)
{
 800a49c:	b590      	push	{r4, r7, lr}
 800a49e:	b087      	sub	sp, #28
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	607a      	str	r2, [r7, #4]
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	72fb      	strb	r3, [r7, #11]
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	685c      	ldr	r4, [r3, #4]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	68d8      	ldr	r0, [r3, #12]
 800a4b8:	893b      	ldrh	r3, [r7, #8]
 800a4ba:	7af9      	ldrb	r1, [r7, #11]
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	47a0      	blx	r4
 800a4c0:	6178      	str	r0, [r7, #20]

  return ret;
 800a4c2:	697b      	ldr	r3, [r7, #20]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	371c      	adds	r7, #28
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd90      	pop	{r4, r7, pc}

0800a4cc <sht40ad1b_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data, uint16_t len)
{
 800a4cc:	b590      	push	{r4, r7, lr}
 800a4ce:	b087      	sub	sp, #28
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	607a      	str	r2, [r7, #4]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	460b      	mov	r3, r1
 800a4da:	72fb      	strb	r3, [r7, #11]
 800a4dc:	4613      	mov	r3, r2
 800a4de:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681c      	ldr	r4, [r3, #0]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	68d8      	ldr	r0, [r3, #12]
 800a4e8:	893b      	ldrh	r3, [r7, #8]
 800a4ea:	7af9      	ldrb	r1, [r7, #11]
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	47a0      	blx	r4
 800a4f0:	6178      	str	r0, [r7, #20]

  return ret;
 800a4f2:	697b      	ldr	r3, [r7, #20]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	371c      	adds	r7, #28
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd90      	pop	{r4, r7, pc}

0800a4fc <sht40ad1b_data_get>:
  * @param  buffer  buffer to store humidity and temperature values pair
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_data_get(stmdev_ctx_t *ctx, float_t *buffer)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b088      	sub	sp, #32
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  uint8_t command = 0xFD;
 800a506:	23fd      	movs	r3, #253	@ 0xfd
 800a508:	73fb      	strb	r3, [r7, #15]
  uint8_t data[6] = {0};
 800a50a:	f107 0308 	add.w	r3, r7, #8
 800a50e:	2200      	movs	r2, #0
 800a510:	601a      	str	r2, [r3, #0]
 800a512:	809a      	strh	r2, [r3, #4]

  if (sht40ad1b_write_reg(ctx, 0, &command, 1) != 0)
 800a514:	f107 020f 	add.w	r2, r7, #15
 800a518:	2301      	movs	r3, #1
 800a51a:	2100      	movs	r1, #0
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f7ff ffd5 	bl	800a4cc <sht40ad1b_write_reg>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <sht40ad1b_data_get+0x30>
  {
    return 1;
 800a528:	2301      	movs	r3, #1
 800a52a:	e07d      	b.n	800a628 <sht40ad1b_data_get+0x12c>
  }

  /* Wait 10 ms */
  ctx->mdelay(10);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	200a      	movs	r0, #10
 800a532:	4798      	blx	r3

  if (sht40ad1b_read_reg(ctx, 0, data, 6) != 0)
 800a534:	f107 0208 	add.w	r2, r7, #8
 800a538:	2306      	movs	r3, #6
 800a53a:	2100      	movs	r1, #0
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f7ff ffad 	bl	800a49c <sht40ad1b_read_reg>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	d001      	beq.n	800a54c <sht40ad1b_data_get+0x50>
  {
    return 1;
 800a548:	2301      	movs	r3, #1
 800a54a:	e06d      	b.n	800a628 <sht40ad1b_data_get+0x12c>
  }

  uint16_t temp_value_raw = (data[0] * 0x100U) + data[1];
 800a54c:	7a3b      	ldrb	r3, [r7, #8]
 800a54e:	021b      	lsls	r3, r3, #8
 800a550:	b29b      	uxth	r3, r3
 800a552:	7a7a      	ldrb	r2, [r7, #9]
 800a554:	4413      	add	r3, r2
 800a556:	83fb      	strh	r3, [r7, #30]
  uint8_t temp_value_crc  = data[2];
 800a558:	7abb      	ldrb	r3, [r7, #10]
 800a55a:	777b      	strb	r3, [r7, #29]
  uint16_t hum_value_raw  = (data[3] * 0x100U) + data[4];
 800a55c:	7afb      	ldrb	r3, [r7, #11]
 800a55e:	021b      	lsls	r3, r3, #8
 800a560:	b29b      	uxth	r3, r3
 800a562:	7b3a      	ldrb	r2, [r7, #12]
 800a564:	4413      	add	r3, r2
 800a566:	837b      	strh	r3, [r7, #26]
  uint8_t hum_value_crc   = data[5];
 800a568:	7b7b      	ldrb	r3, [r7, #13]
 800a56a:	767b      	strb	r3, [r7, #25]

  /* Check CRC for temperature value */
  if (crc_check(&data[0], 2, temp_value_crc) != 0U)
 800a56c:	7f7a      	ldrb	r2, [r7, #29]
 800a56e:	f107 0308 	add.w	r3, r7, #8
 800a572:	2102      	movs	r1, #2
 800a574:	4618      	mov	r0, r3
 800a576:	f000 f8b3 	bl	800a6e0 <crc_check>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d001      	beq.n	800a584 <sht40ad1b_data_get+0x88>
  {
    return 1;
 800a580:	2301      	movs	r3, #1
 800a582:	e051      	b.n	800a628 <sht40ad1b_data_get+0x12c>
  }

  /* Check CRC for humidity value */
  if (crc_check(&data[3], 2, hum_value_crc) != 0U)
 800a584:	7e7a      	ldrb	r2, [r7, #25]
 800a586:	f107 0308 	add.w	r3, r7, #8
 800a58a:	3303      	adds	r3, #3
 800a58c:	2102      	movs	r1, #2
 800a58e:	4618      	mov	r0, r3
 800a590:	f000 f8a6 	bl	800a6e0 <crc_check>
 800a594:	4603      	mov	r3, r0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d001      	beq.n	800a59e <sht40ad1b_data_get+0xa2>
  {
    return 1;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e044      	b.n	800a628 <sht40ad1b_data_get+0x12c>
  }

  float_t temp_value = -45.0f + (175.0f * (float_t)temp_value_raw / (float_t)0xFFFF);
 800a59e:	8bfb      	ldrh	r3, [r7, #30]
 800a5a0:	ee07 3a90 	vmov	s15, r3
 800a5a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5a8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800a630 <sht40ad1b_data_get+0x134>
 800a5ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a5b0:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800a634 <sht40ad1b_data_get+0x138>
 800a5b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a5b8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800a638 <sht40ad1b_data_get+0x13c>
 800a5bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5c0:	edc7 7a05 	vstr	s15, [r7, #20]
  float_t hum_value  =  -6.0f + (125.0f * (float_t)hum_value_raw  / (float_t)0xFFFF);
 800a5c4:	8b7b      	ldrh	r3, [r7, #26]
 800a5c6:	ee07 3a90 	vmov	s15, r3
 800a5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ce:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800a63c <sht40ad1b_data_get+0x140>
 800a5d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a5d6:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800a634 <sht40ad1b_data_get+0x138>
 800a5da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a5de:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800a5e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5e6:	edc7 7a04 	vstr	s15, [r7, #16]

  hum_value = (hum_value > 100.0f) ? 100.0f
              : (hum_value <   0.0f) ?   0.0f
 800a5ea:	edd7 7a04 	vldr	s15, [r7, #16]
 800a5ee:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800a640 <sht40ad1b_data_get+0x144>
 800a5f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5fa:	dd01      	ble.n	800a600 <sht40ad1b_data_get+0x104>
 800a5fc:	4b11      	ldr	r3, [pc, #68]	@ (800a644 <sht40ad1b_data_get+0x148>)
 800a5fe:	e00a      	b.n	800a616 <sht40ad1b_data_get+0x11a>
              :                        hum_value;
 800a600:	edd7 7a04 	vldr	s15, [r7, #16]
 800a604:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a60c:	d502      	bpl.n	800a614 <sht40ad1b_data_get+0x118>
 800a60e:	f04f 0300 	mov.w	r3, #0
 800a612:	e000      	b.n	800a616 <sht40ad1b_data_get+0x11a>
 800a614:	693b      	ldr	r3, [r7, #16]
  hum_value = (hum_value > 100.0f) ? 100.0f
 800a616:	613b      	str	r3, [r7, #16]

  buffer[0] = hum_value;
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	693a      	ldr	r2, [r7, #16]
 800a61c:	601a      	str	r2, [r3, #0]
  buffer[1] = temp_value;
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	3304      	adds	r3, #4
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	601a      	str	r2, [r3, #0]
  return 0;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3720      	adds	r7, #32
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	432f0000 	.word	0x432f0000
 800a634:	477fff00 	.word	0x477fff00
 800a638:	42340000 	.word	0x42340000
 800a63c:	42fa0000 	.word	0x42fa0000
 800a640:	42c80000 	.word	0x42c80000
 800a644:	42c80000 	.word	0x42c80000

0800a648 <sht40ad1b_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
  (void)ctx;
  *buff = SHT40AD1B_ID;
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	2200      	movs	r2, #0
 800a656:	701a      	strb	r2, [r3, #0]
  return 0;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	370c      	adds	r7, #12
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr

0800a666 <crc_calculate>:
  * @param  count  number of data bytes
  * @retval        CRC check sum of data stream
  *
  */
static uint8_t crc_calculate(const uint8_t *data, uint16_t count)
{
 800a666:	b480      	push	{r7}
 800a668:	b085      	sub	sp, #20
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
 800a66e:	460b      	mov	r3, r1
 800a670:	807b      	strh	r3, [r7, #2]
  const uint8_t crc8_polynomial = 0x31;
 800a672:	2331      	movs	r3, #49	@ 0x31
 800a674:	72bb      	strb	r3, [r7, #10]
  uint8_t crc = 0xFF;
 800a676:	23ff      	movs	r3, #255	@ 0xff
 800a678:	73fb      	strb	r3, [r7, #15]

  /* Calculate 8-bit checksum for given polynomial */
  for (uint16_t index = 0; index < count; index++)
 800a67a:	2300      	movs	r3, #0
 800a67c:	81bb      	strh	r3, [r7, #12]
 800a67e:	e024      	b.n	800a6ca <crc_calculate+0x64>
  {
    crc ^= data[index];
 800a680:	89bb      	ldrh	r3, [r7, #12]
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	4413      	add	r3, r2
 800a686:	781a      	ldrb	r2, [r3, #0]
 800a688:	7bfb      	ldrb	r3, [r7, #15]
 800a68a:	4053      	eors	r3, r2
 800a68c:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 800a68e:	2308      	movs	r3, #8
 800a690:	72fb      	strb	r3, [r7, #11]
 800a692:	e014      	b.n	800a6be <crc_calculate+0x58>
    {
      crc = ((crc & 0x80U) != 0U) ? ((crc << 1) ^ crc8_polynomial) : (crc << 1);
 800a694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	da09      	bge.n	800a6b0 <crc_calculate+0x4a>
 800a69c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6a0:	005b      	lsls	r3, r3, #1
 800a6a2:	b25a      	sxtb	r2, r3
 800a6a4:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800a6a8:	4053      	eors	r3, r2
 800a6aa:	b25b      	sxtb	r3, r3
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	e002      	b.n	800a6b6 <crc_calculate+0x50>
 800a6b0:	7bfb      	ldrb	r3, [r7, #15]
 800a6b2:	005b      	lsls	r3, r3, #1
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 800a6b8:	7afb      	ldrb	r3, [r7, #11]
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	72fb      	strb	r3, [r7, #11]
 800a6be:	7afb      	ldrb	r3, [r7, #11]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1e7      	bne.n	800a694 <crc_calculate+0x2e>
  for (uint16_t index = 0; index < count; index++)
 800a6c4:	89bb      	ldrh	r3, [r7, #12]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	81bb      	strh	r3, [r7, #12]
 800a6ca:	89ba      	ldrh	r2, [r7, #12]
 800a6cc:	887b      	ldrh	r3, [r7, #2]
 800a6ce:	429a      	cmp	r2, r3
 800a6d0:	d3d6      	bcc.n	800a680 <crc_calculate+0x1a>
    }
  }

  return crc;
 800a6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3714      	adds	r7, #20
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <crc_check>:
  * @param  crc    CRC check sum of data stream
  * @retval        0 if CRC is OK else 1
  *
  */
static uint8_t crc_check(const uint8_t *data, uint16_t count, uint8_t crc)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	807b      	strh	r3, [r7, #2]
 800a6ec:	4613      	mov	r3, r2
 800a6ee:	707b      	strb	r3, [r7, #1]
  return (crc_calculate(data, count) == crc) ? 0U : 1U;
 800a6f0:	887b      	ldrh	r3, [r7, #2]
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7ff ffb6 	bl	800a666 <crc_calculate>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	787b      	ldrb	r3, [r7, #1]
 800a700:	4293      	cmp	r3, r2
 800a702:	bf14      	ite	ne
 800a704:	2301      	movne	r3, #1
 800a706:	2300      	moveq	r3, #0
 800a708:	b2db      	uxtb	r3, r3
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
	...

0800a714 <STTS22H_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_RegisterBusIO(STTS22H_Object_t *pObj, STTS22H_IO_t *pIO)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d103      	bne.n	800a72c <STTS22H_RegisterBusIO+0x18>
  {
    ret = STTS22H_ERROR;
 800a724:	f04f 33ff 	mov.w	r3, #4294967295
 800a728:	60fb      	str	r3, [r7, #12]
 800a72a:	e034      	b.n	800a796 <STTS22H_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	685a      	ldr	r2, [r3, #4]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	689a      	ldr	r2, [r3, #8]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	7b1a      	ldrb	r2, [r3, #12]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	691a      	ldr	r2, [r3, #16]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	695a      	ldr	r2, [r3, #20]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	699a      	ldr	r2, [r3, #24]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4a0e      	ldr	r2, [pc, #56]	@ (800a7a0 <STTS22H_RegisterBusIO+0x8c>)
 800a768:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4a0d      	ldr	r2, [pc, #52]	@ (800a7a4 <STTS22H_RegisterBusIO+0x90>)
 800a76e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	69da      	ldr	r2, [r3, #28]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d004      	beq.n	800a790 <STTS22H_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4798      	blx	r3
 800a78c:	60f8      	str	r0, [r7, #12]
 800a78e:	e002      	b.n	800a796 <STTS22H_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS22H_ERROR;
 800a790:	f04f 33ff 	mov.w	r3, #4294967295
 800a794:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a796:	68fb      	ldr	r3, [r7, #12]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	0800abb1 	.word	0x0800abb1
 800a7a4:	0800ac1f 	.word	0x0800ac1f

0800a7a8 <STTS22H_Init>:
  * @brief  Initialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_Init(STTS22H_Object_t *pObj)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d127      	bne.n	800a80a <STTS22H_Init+0x62>
  {
    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a7c0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable BDU */
    if (stts22h_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	3320      	adds	r3, #32
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f000 fbad 	bl	800af28 <stts22h_block_data_update_set>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d002      	beq.n	800a7da <STTS22H_Init+0x32>
    {
      return STTS22H_ERROR;
 800a7d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a7d8:	e01c      	b.n	800a814 <STTS22H_Init+0x6c>
    }

    /* Enable Automatic Address Increment */
    if (stts22h_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	3320      	adds	r3, #32
 800a7de:	2101      	movs	r1, #1
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 fbfa 	bl	800afda <stts22h_auto_increment_set>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d002      	beq.n	800a7f2 <STTS22H_Init+0x4a>
    {
      return STTS22H_ERROR;
 800a7ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f0:	e010      	b.n	800a814 <STTS22H_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	3320      	adds	r3, #32
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 fa9d 	bl	800ad38 <stts22h_temp_data_rate_set>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d002      	beq.n	800a80a <STTS22H_Init+0x62>
    {
      return STTS22H_ERROR;
 800a804:	f04f 33ff 	mov.w	r3, #4294967295
 800a808:	e004      	b.n	800a814 <STTS22H_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2201      	movs	r2, #1
 800a80e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <STTS22H_DeInit>:
  * @brief  Deinitialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_DeInit(STTS22H_Object_t *pObj)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d108      	bne.n	800a840 <STTS22H_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS22H_TEMP_Disable(pObj) != STTS22H_OK)
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 f878 	bl	800a924 <STTS22H_TEMP_Disable>
 800a834:	4603      	mov	r3, r0
 800a836:	2b00      	cmp	r3, #0
 800a838:	d002      	beq.n	800a840 <STTS22H_DeInit+0x24>
    {
      return STTS22H_ERROR;
 800a83a:	f04f 33ff 	mov.w	r3, #4294967295
 800a83e:	e004      	b.n	800a84a <STTS22H_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <STTS22H_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_ReadID(STTS22H_Object_t *pObj, uint8_t *Id)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b084      	sub	sp, #16
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	6039      	str	r1, [r7, #0]
  uint8_t buf;

  if (stts22h_dev_id_get(&(pObj->Ctx), &buf) != STTS22H_OK)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	3320      	adds	r3, #32
 800a860:	f107 020f 	add.w	r2, r7, #15
 800a864:	4611      	mov	r1, r2
 800a866:	4618      	mov	r0, r3
 800a868:	f000 fba6 	bl	800afb8 <stts22h_dev_id_get>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d002      	beq.n	800a878 <STTS22H_ReadID+0x26>
  {
    return STTS22H_ERROR;
 800a872:	f04f 33ff 	mov.w	r3, #4294967295
 800a876:	e003      	b.n	800a880 <STTS22H_ReadID+0x2e>
  }

  *Id = buf;
 800a878:	7bfa      	ldrb	r2, [r7, #15]
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	701a      	strb	r2, [r3, #0]

  return STTS22H_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <STTS22H_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS22H sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_GetCapabilities(STTS22H_Object_t *pObj, STTS22H_Capabilities_t *Capabilities)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	2200      	movs	r2, #0
 800a896:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	2200      	movs	r2, #0
 800a89c:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	f04f 0200 	mov.w	r2, #0
 800a8b6:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	4a08      	ldr	r2, [pc, #32]	@ (800a8dc <STTS22H_GetCapabilities+0x54>)
 800a8bc:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	f04f 0200 	mov.w	r2, #0
 800a8c4:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	f04f 0200 	mov.w	r2, #0
 800a8cc:	615a      	str	r2, [r3, #20]
  return STTS22H_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr
 800a8dc:	43480000 	.word	0x43480000

0800a8e0 <STTS22H_TEMP_Enable>:
  * @brief  Enable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Enable(STTS22H_Object_t *pObj)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d101      	bne.n	800a8f6 <STTS22H_TEMP_Enable+0x16>
  {
    return STTS22H_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	e012      	b.n	800a91c <STTS22H_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS22H_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS22H_OK)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800a8fc:	eeb0 0a67 	vmov.f32	s0, s15
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 f8e9 	bl	800aad8 <STTS22H_TEMP_SetOutputDataRate>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d002      	beq.n	800a912 <STTS22H_TEMP_Enable+0x32>
  {
    return STTS22H_ERROR;
 800a90c:	f04f 33ff 	mov.w	r3, #4294967295
 800a910:	e004      	b.n	800a91c <STTS22H_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3708      	adds	r7, #8
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <STTS22H_TEMP_Disable>:
  * @brief  Disable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Disable(STTS22H_Object_t *pObj)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a932:	2b00      	cmp	r3, #0
 800a934:	d101      	bne.n	800a93a <STTS22H_TEMP_Disable+0x16>
  {
    return STTS22H_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	e01c      	b.n	800a974 <STTS22H_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS22H_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS22H_OK)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	3334      	adds	r3, #52	@ 0x34
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 f81b 	bl	800a97c <STTS22H_TEMP_GetOutputDataRate>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d002      	beq.n	800a952 <STTS22H_TEMP_Disable+0x2e>
  {
    return STTS22H_ERROR;
 800a94c:	f04f 33ff 	mov.w	r3, #4294967295
 800a950:	e010      	b.n	800a974 <STTS22H_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	3320      	adds	r3, #32
 800a956:	2100      	movs	r1, #0
 800a958:	4618      	mov	r0, r3
 800a95a:	f000 f9ed 	bl	800ad38 <stts22h_temp_data_rate_set>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d002      	beq.n	800a96a <STTS22H_TEMP_Disable+0x46>
  {
    return STTS22H_ERROR;
 800a964:	f04f 33ff 	mov.w	r3, #4294967295
 800a968:	e004      	b.n	800a974 <STTS22H_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3708      	adds	r7, #8
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <STTS22H_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetOutputDataRate(STTS22H_Object_t *pObj, float *Odr)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS22H_OK;
 800a986:	2300      	movs	r3, #0
 800a988:	60fb      	str	r3, [r7, #12]
  stts22h_odr_temp_t odr_low_level;

  if (stts22h_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS22H_OK)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	3320      	adds	r3, #32
 800a98e:	f107 020b 	add.w	r2, r7, #11
 800a992:	4611      	mov	r1, r2
 800a994:	4618      	mov	r0, r3
 800a996:	f000 fa11 	bl	800adbc <stts22h_temp_data_rate_get>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d002      	beq.n	800a9a6 <STTS22H_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS22H_ERROR;
 800a9a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9a4:	e08b      	b.n	800aabe <STTS22H_TEMP_GetOutputDataRate+0x142>
  }

  switch (odr_low_level)
 800a9a6:	7afb      	ldrb	r3, [r7, #11]
 800a9a8:	2b32      	cmp	r3, #50	@ 0x32
 800a9aa:	f200 8083 	bhi.w	800aab4 <STTS22H_TEMP_GetOutputDataRate+0x138>
 800a9ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a9b4 <STTS22H_TEMP_GetOutputDataRate+0x38>)
 800a9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b4:	0800aa81 	.word	0x0800aa81
 800a9b8:	0800aa81 	.word	0x0800aa81
 800a9bc:	0800aa95 	.word	0x0800aa95
 800a9c0:	0800aab5 	.word	0x0800aab5
 800a9c4:	0800aa8b 	.word	0x0800aa8b
 800a9c8:	0800aab5 	.word	0x0800aab5
 800a9cc:	0800aab5 	.word	0x0800aab5
 800a9d0:	0800aab5 	.word	0x0800aab5
 800a9d4:	0800aab5 	.word	0x0800aab5
 800a9d8:	0800aab5 	.word	0x0800aab5
 800a9dc:	0800aab5 	.word	0x0800aab5
 800a9e0:	0800aab5 	.word	0x0800aab5
 800a9e4:	0800aab5 	.word	0x0800aab5
 800a9e8:	0800aab5 	.word	0x0800aab5
 800a9ec:	0800aab5 	.word	0x0800aab5
 800a9f0:	0800aab5 	.word	0x0800aab5
 800a9f4:	0800aab5 	.word	0x0800aab5
 800a9f8:	0800aab5 	.word	0x0800aab5
 800a9fc:	0800aa9d 	.word	0x0800aa9d
 800aa00:	0800aab5 	.word	0x0800aab5
 800aa04:	0800aab5 	.word	0x0800aab5
 800aa08:	0800aab5 	.word	0x0800aab5
 800aa0c:	0800aab5 	.word	0x0800aab5
 800aa10:	0800aab5 	.word	0x0800aab5
 800aa14:	0800aab5 	.word	0x0800aab5
 800aa18:	0800aab5 	.word	0x0800aab5
 800aa1c:	0800aab5 	.word	0x0800aab5
 800aa20:	0800aab5 	.word	0x0800aab5
 800aa24:	0800aab5 	.word	0x0800aab5
 800aa28:	0800aab5 	.word	0x0800aab5
 800aa2c:	0800aab5 	.word	0x0800aab5
 800aa30:	0800aab5 	.word	0x0800aab5
 800aa34:	0800aab5 	.word	0x0800aab5
 800aa38:	0800aab5 	.word	0x0800aab5
 800aa3c:	0800aaa5 	.word	0x0800aaa5
 800aa40:	0800aab5 	.word	0x0800aab5
 800aa44:	0800aab5 	.word	0x0800aab5
 800aa48:	0800aab5 	.word	0x0800aab5
 800aa4c:	0800aab5 	.word	0x0800aab5
 800aa50:	0800aab5 	.word	0x0800aab5
 800aa54:	0800aab5 	.word	0x0800aab5
 800aa58:	0800aab5 	.word	0x0800aab5
 800aa5c:	0800aab5 	.word	0x0800aab5
 800aa60:	0800aab5 	.word	0x0800aab5
 800aa64:	0800aab5 	.word	0x0800aab5
 800aa68:	0800aab5 	.word	0x0800aab5
 800aa6c:	0800aab5 	.word	0x0800aab5
 800aa70:	0800aab5 	.word	0x0800aab5
 800aa74:	0800aab5 	.word	0x0800aab5
 800aa78:	0800aab5 	.word	0x0800aab5
 800aa7c:	0800aaad 	.word	0x0800aaad
  {
    case STTS22H_POWER_DOWN:
    case STTS22H_ONE_SHOT:
      *Odr = 0.0f;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	f04f 0200 	mov.w	r2, #0
 800aa86:	601a      	str	r2, [r3, #0]
      break;
 800aa88:	e018      	b.n	800aabc <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_1Hz:
      *Odr = 1.0f;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800aa90:	601a      	str	r2, [r3, #0]
      break;
 800aa92:	e013      	b.n	800aabc <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_25Hz:
      *Odr = 25.0f;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	4a0c      	ldr	r2, [pc, #48]	@ (800aac8 <STTS22H_TEMP_GetOutputDataRate+0x14c>)
 800aa98:	601a      	str	r2, [r3, #0]
      break;
 800aa9a:	e00f      	b.n	800aabc <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_50Hz:
      *Odr = 50.0f;
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	4a0b      	ldr	r2, [pc, #44]	@ (800aacc <STTS22H_TEMP_GetOutputDataRate+0x150>)
 800aaa0:	601a      	str	r2, [r3, #0]
      break;
 800aaa2:	e00b      	b.n	800aabc <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_100Hz:
      *Odr = 100.0f;
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	4a0a      	ldr	r2, [pc, #40]	@ (800aad0 <STTS22H_TEMP_GetOutputDataRate+0x154>)
 800aaa8:	601a      	str	r2, [r3, #0]
      break;
 800aaaa:	e007      	b.n	800aabc <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_200Hz:
      *Odr = 200.0f;
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	4a09      	ldr	r2, [pc, #36]	@ (800aad4 <STTS22H_TEMP_GetOutputDataRate+0x158>)
 800aab0:	601a      	str	r2, [r3, #0]
      break;
 800aab2:	e003      	b.n	800aabc <STTS22H_TEMP_GetOutputDataRate+0x140>

    default:
      ret = STTS22H_ERROR;
 800aab4:	f04f 33ff 	mov.w	r3, #4294967295
 800aab8:	60fb      	str	r3, [r7, #12]
      break;
 800aaba:	bf00      	nop
  }

  return ret;
 800aabc:	68fb      	ldr	r3, [r7, #12]
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	41c80000 	.word	0x41c80000
 800aacc:	42480000 	.word	0x42480000
 800aad0:	42c80000 	.word	0x42c80000
 800aad4:	43480000 	.word	0x43480000

0800aad8 <STTS22H_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_SetOutputDataRate(STTS22H_Object_t *pObj, float Odr)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	ed87 0a00 	vstr	s0, [r7]
  stts22h_odr_temp_t new_odr;

  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
            : (Odr <= 25.0f) ? STTS22H_25Hz
 800aae4:	edd7 7a00 	vldr	s15, [r7]
 800aae8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aaec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aaf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaf4:	d801      	bhi.n	800aafa <STTS22H_TEMP_SetOutputDataRate+0x22>
 800aaf6:	2304      	movs	r3, #4
 800aaf8:	e021      	b.n	800ab3e <STTS22H_TEMP_SetOutputDataRate+0x66>
 800aafa:	edd7 7a00 	vldr	s15, [r7]
 800aafe:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800ab02:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab0a:	d801      	bhi.n	800ab10 <STTS22H_TEMP_SetOutputDataRate+0x38>
 800ab0c:	2302      	movs	r3, #2
 800ab0e:	e016      	b.n	800ab3e <STTS22H_TEMP_SetOutputDataRate+0x66>
 800ab10:	edd7 7a00 	vldr	s15, [r7]
 800ab14:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800ab64 <STTS22H_TEMP_SetOutputDataRate+0x8c>
 800ab18:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab20:	d801      	bhi.n	800ab26 <STTS22H_TEMP_SetOutputDataRate+0x4e>
 800ab22:	2312      	movs	r3, #18
 800ab24:	e00b      	b.n	800ab3e <STTS22H_TEMP_SetOutputDataRate+0x66>
 800ab26:	edd7 7a00 	vldr	s15, [r7]
 800ab2a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800ab68 <STTS22H_TEMP_SetOutputDataRate+0x90>
 800ab2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab36:	d801      	bhi.n	800ab3c <STTS22H_TEMP_SetOutputDataRate+0x64>
 800ab38:	2322      	movs	r3, #34	@ 0x22
 800ab3a:	e000      	b.n	800ab3e <STTS22H_TEMP_SetOutputDataRate+0x66>
 800ab3c:	2332      	movs	r3, #50	@ 0x32
  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
 800ab3e:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.0f) ? STTS22H_50Hz
            : (Odr <= 100.0f) ? STTS22H_100Hz
            :                    STTS22H_200Hz;

  if (stts22h_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS22H_OK)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	3320      	adds	r3, #32
 800ab44:	7bfa      	ldrb	r2, [r7, #15]
 800ab46:	4611      	mov	r1, r2
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f000 f8f5 	bl	800ad38 <stts22h_temp_data_rate_set>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d002      	beq.n	800ab5a <STTS22H_TEMP_SetOutputDataRate+0x82>
  {
    return STTS22H_ERROR;
 800ab54:	f04f 33ff 	mov.w	r3, #4294967295
 800ab58:	e000      	b.n	800ab5c <STTS22H_TEMP_SetOutputDataRate+0x84>
  }

  return STTS22H_OK;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	42480000 	.word	0x42480000
 800ab68:	42c80000 	.word	0x42c80000

0800ab6c <STTS22H_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetTemperature(STTS22H_Object_t *pObj, float *Value)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts22h_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS22H_OK)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	3320      	adds	r3, #32
 800ab7a:	f107 020e 	add.w	r2, r7, #14
 800ab7e:	4611      	mov	r1, r2
 800ab80:	4618      	mov	r0, r3
 800ab82:	f000 f9f7 	bl	800af74 <stts22h_temperature_raw_get>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d002      	beq.n	800ab92 <STTS22H_TEMP_GetTemperature+0x26>
  {
    return STTS22H_ERROR;
 800ab8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab90:	e00a      	b.n	800aba8 <STTS22H_TEMP_GetTemperature+0x3c>
  }

  *Value = stts22h_from_lsb_to_celsius(raw_value);
 800ab92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ab96:	4618      	mov	r0, r3
 800ab98:	f000 f8b4 	bl	800ad04 <stts22h_from_lsb_to_celsius>
 800ab9c:	eef0 7a40 	vmov.f32	s15, s0
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	edc3 7a00 	vstr	s15, [r3]

  return STTS22H_OK;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800abb0:	b590      	push	{r4, r7, lr}
 800abb2:	b089      	sub	sp, #36	@ 0x24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	607a      	str	r2, [r7, #4]
 800abba:	461a      	mov	r2, r3
 800abbc:	460b      	mov	r3, r1
 800abbe:	72fb      	strb	r3, [r7, #11]
 800abc0:	4613      	mov	r3, r2
 800abc2:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800abc4:	2300      	movs	r3, #0
 800abc6:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d11f      	bne.n	800ac14 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800abd4:	2300      	movs	r3, #0
 800abd6:	83fb      	strh	r3, [r7, #30]
 800abd8:	e018      	b.n	800ac0c <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	695c      	ldr	r4, [r3, #20]
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	7b1b      	ldrb	r3, [r3, #12]
 800abe2:	4618      	mov	r0, r3
 800abe4:	7afb      	ldrb	r3, [r7, #11]
 800abe6:	b29a      	uxth	r2, r3
 800abe8:	8bfb      	ldrh	r3, [r7, #30]
 800abea:	4413      	add	r3, r2
 800abec:	b299      	uxth	r1, r3
 800abee:	8bfb      	ldrh	r3, [r7, #30]
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	441a      	add	r2, r3
 800abf4:	2301      	movs	r3, #1
 800abf6:	47a0      	blx	r4
 800abf8:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d002      	beq.n	800ac06 <ReadRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800ac00:	f04f 33ff 	mov.w	r3, #4294967295
 800ac04:	e007      	b.n	800ac16 <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800ac06:	8bfb      	ldrh	r3, [r7, #30]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	83fb      	strh	r3, [r7, #30]
 800ac0c:	8bfa      	ldrh	r2, [r7, #30]
 800ac0e:	893b      	ldrh	r3, [r7, #8]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d3e2      	bcc.n	800abda <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 800ac14:	69bb      	ldr	r3, [r7, #24]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3724      	adds	r7, #36	@ 0x24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd90      	pop	{r4, r7, pc}

0800ac1e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800ac1e:	b590      	push	{r4, r7, lr}
 800ac20:	b089      	sub	sp, #36	@ 0x24
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	60f8      	str	r0, [r7, #12]
 800ac26:	607a      	str	r2, [r7, #4]
 800ac28:	461a      	mov	r2, r3
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	72fb      	strb	r3, [r7, #11]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800ac32:	2300      	movs	r3, #0
 800ac34:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d11f      	bne.n	800ac82 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800ac42:	2300      	movs	r3, #0
 800ac44:	83fb      	strh	r3, [r7, #30]
 800ac46:	e018      	b.n	800ac7a <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	691c      	ldr	r4, [r3, #16]
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	7b1b      	ldrb	r3, [r3, #12]
 800ac50:	4618      	mov	r0, r3
 800ac52:	7afb      	ldrb	r3, [r7, #11]
 800ac54:	b29a      	uxth	r2, r3
 800ac56:	8bfb      	ldrh	r3, [r7, #30]
 800ac58:	4413      	add	r3, r2
 800ac5a:	b299      	uxth	r1, r3
 800ac5c:	8bfb      	ldrh	r3, [r7, #30]
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	441a      	add	r2, r3
 800ac62:	2301      	movs	r3, #1
 800ac64:	47a0      	blx	r4
 800ac66:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d002      	beq.n	800ac74 <WriteRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800ac6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac72:	e007      	b.n	800ac84 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800ac74:	8bfb      	ldrh	r3, [r7, #30]
 800ac76:	3301      	adds	r3, #1
 800ac78:	83fb      	strh	r3, [r7, #30]
 800ac7a:	8bfa      	ldrh	r2, [r7, #30]
 800ac7c:	893b      	ldrh	r3, [r7, #8]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d3e2      	bcc.n	800ac48 <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800ac82:	69bb      	ldr	r3, [r7, #24]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3724      	adds	r7, #36	@ 0x24
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd90      	pop	{r4, r7, pc}

0800ac8c <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800ac8c:	b590      	push	{r4, r7, lr}
 800ac8e:	b087      	sub	sp, #28
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	607a      	str	r2, [r7, #4]
 800ac96:	461a      	mov	r2, r3
 800ac98:	460b      	mov	r3, r1
 800ac9a:	72fb      	strb	r3, [r7, #11]
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d102      	bne.n	800acac <stts22h_read_reg+0x20>
 800aca6:	f04f 33ff 	mov.w	r3, #4294967295
 800acaa:	e009      	b.n	800acc0 <stts22h_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	685c      	ldr	r4, [r3, #4]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	68d8      	ldr	r0, [r3, #12]
 800acb4:	893b      	ldrh	r3, [r7, #8]
 800acb6:	7af9      	ldrb	r1, [r7, #11]
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	47a0      	blx	r4
 800acbc:	6178      	str	r0, [r7, #20]

  return ret;
 800acbe:	697b      	ldr	r3, [r7, #20]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	371c      	adds	r7, #28
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd90      	pop	{r4, r7, pc}

0800acc8 <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800acc8:	b590      	push	{r4, r7, lr}
 800acca:	b087      	sub	sp, #28
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	607a      	str	r2, [r7, #4]
 800acd2:	461a      	mov	r2, r3
 800acd4:	460b      	mov	r3, r1
 800acd6:	72fb      	strb	r3, [r7, #11]
 800acd8:	4613      	mov	r3, r2
 800acda:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d102      	bne.n	800ace8 <stts22h_write_reg+0x20>
 800ace2:	f04f 33ff 	mov.w	r3, #4294967295
 800ace6:	e009      	b.n	800acfc <stts22h_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681c      	ldr	r4, [r3, #0]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	68d8      	ldr	r0, [r3, #12]
 800acf0:	893b      	ldrh	r3, [r7, #8]
 800acf2:	7af9      	ldrb	r1, [r7, #11]
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	47a0      	blx	r4
 800acf8:	6178      	str	r0, [r7, #20]

  return ret;
 800acfa:	697b      	ldr	r3, [r7, #20]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	371c      	adds	r7, #28
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd90      	pop	{r4, r7, pc}

0800ad04 <stts22h_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts22h_from_lsb_to_celsius(int16_t lsb)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 800ad0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad12:	ee07 3a90 	vmov	s15, r3
 800ad16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad1a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800ad34 <stts22h_from_lsb_to_celsius+0x30>
 800ad1e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ad22:	eef0 7a66 	vmov.f32	s15, s13
}
 800ad26:	eeb0 0a67 	vmov.f32	s0, s15
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	42c80000 	.word	0x42c80000

0800ad38 <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(const stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t val)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	460b      	mov	r3, r1
 800ad42:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800ad44:	f107 0208 	add.w	r2, r7, #8
 800ad48:	2301      	movs	r3, #1
 800ad4a:	2104      	movs	r1, #4
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7ff ff9d 	bl	800ac8c <stts22h_read_reg>
 800ad52:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d12a      	bne.n	800adb0 <stts22h_temp_data_rate_set+0x78>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 800ad5a:	78fb      	ldrb	r3, [r7, #3]
 800ad5c:	f003 0301 	and.w	r3, r3, #1
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	7a3b      	ldrb	r3, [r7, #8]
 800ad64:	f362 0300 	bfi	r3, r2, #0, #1
 800ad68:	723b      	strb	r3, [r7, #8]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 800ad6a:	78fb      	ldrb	r3, [r7, #3]
 800ad6c:	085b      	lsrs	r3, r3, #1
 800ad6e:	f003 0301 	and.w	r3, r3, #1
 800ad72:	b2da      	uxtb	r2, r3
 800ad74:	7a3b      	ldrb	r3, [r7, #8]
 800ad76:	f362 0382 	bfi	r3, r2, #2, #1
 800ad7a:	723b      	strb	r3, [r7, #8]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 800ad7c:	78fb      	ldrb	r3, [r7, #3]
 800ad7e:	089b      	lsrs	r3, r3, #2
 800ad80:	f003 0301 	and.w	r3, r3, #1
 800ad84:	b2da      	uxtb	r2, r3
 800ad86:	7a3b      	ldrb	r3, [r7, #8]
 800ad88:	f362 13c7 	bfi	r3, r2, #7, #1
 800ad8c:	723b      	strb	r3, [r7, #8]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 800ad8e:	78fb      	ldrb	r3, [r7, #3]
 800ad90:	091b      	lsrs	r3, r3, #4
 800ad92:	f003 0303 	and.w	r3, r3, #3
 800ad96:	b2da      	uxtb	r2, r3
 800ad98:	7a3b      	ldrb	r3, [r7, #8]
 800ad9a:	f362 1305 	bfi	r3, r2, #4, #2
 800ad9e:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800ada0:	f107 0208 	add.w	r2, r7, #8
 800ada4:	2301      	movs	r3, #1
 800ada6:	2104      	movs	r1, #4
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f7ff ff8d 	bl	800acc8 <stts22h_write_reg>
 800adae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800adb0:	68fb      	ldr	r3, [r7, #12]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
	...

0800adbc <stts22h_temp_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_get(const stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t *val)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL,
 800adc6:	f107 0208 	add.w	r2, r7, #8
 800adca:	2301      	movs	r3, #1
 800adcc:	2104      	movs	r1, #4
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f7ff ff5c 	bl	800ac8c <stts22h_read_reg>
 800add4:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl, 1);

  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800add6:	7a3b      	ldrb	r3, [r7, #8]
 800add8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800addc:	b2db      	uxtb	r3, r3
 800adde:	461a      	mov	r2, r3
 800ade0:	7a3b      	ldrb	r3, [r7, #8]
 800ade2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	005b      	lsls	r3, r3, #1
 800adea:	431a      	orrs	r2, r3
 800adec:	7a3b      	ldrb	r3, [r7, #8]
 800adee:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	431a      	orrs	r2, r3
                                                 2) |
          (ctrl.avg << 4))
 800adf8:	7a3b      	ldrb	r3, [r7, #8]
 800adfa:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	011b      	lsls	r3, r3, #4
                                                 2) |
 800ae02:	4313      	orrs	r3, r2
  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800ae04:	2b32      	cmp	r3, #50	@ 0x32
 800ae06:	f200 8085 	bhi.w	800af14 <stts22h_temp_data_rate_get+0x158>
 800ae0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae10 <stts22h_temp_data_rate_get+0x54>)
 800ae0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae10:	0800aedd 	.word	0x0800aedd
 800ae14:	0800aee5 	.word	0x0800aee5
 800ae18:	0800aef5 	.word	0x0800aef5
 800ae1c:	0800af15 	.word	0x0800af15
 800ae20:	0800aeed 	.word	0x0800aeed
 800ae24:	0800af15 	.word	0x0800af15
 800ae28:	0800af15 	.word	0x0800af15
 800ae2c:	0800af15 	.word	0x0800af15
 800ae30:	0800af15 	.word	0x0800af15
 800ae34:	0800af15 	.word	0x0800af15
 800ae38:	0800af15 	.word	0x0800af15
 800ae3c:	0800af15 	.word	0x0800af15
 800ae40:	0800af15 	.word	0x0800af15
 800ae44:	0800af15 	.word	0x0800af15
 800ae48:	0800af15 	.word	0x0800af15
 800ae4c:	0800af15 	.word	0x0800af15
 800ae50:	0800af15 	.word	0x0800af15
 800ae54:	0800af15 	.word	0x0800af15
 800ae58:	0800aefd 	.word	0x0800aefd
 800ae5c:	0800af15 	.word	0x0800af15
 800ae60:	0800af15 	.word	0x0800af15
 800ae64:	0800af15 	.word	0x0800af15
 800ae68:	0800af15 	.word	0x0800af15
 800ae6c:	0800af15 	.word	0x0800af15
 800ae70:	0800af15 	.word	0x0800af15
 800ae74:	0800af15 	.word	0x0800af15
 800ae78:	0800af15 	.word	0x0800af15
 800ae7c:	0800af15 	.word	0x0800af15
 800ae80:	0800af15 	.word	0x0800af15
 800ae84:	0800af15 	.word	0x0800af15
 800ae88:	0800af15 	.word	0x0800af15
 800ae8c:	0800af15 	.word	0x0800af15
 800ae90:	0800af15 	.word	0x0800af15
 800ae94:	0800af15 	.word	0x0800af15
 800ae98:	0800af05 	.word	0x0800af05
 800ae9c:	0800af15 	.word	0x0800af15
 800aea0:	0800af15 	.word	0x0800af15
 800aea4:	0800af15 	.word	0x0800af15
 800aea8:	0800af15 	.word	0x0800af15
 800aeac:	0800af15 	.word	0x0800af15
 800aeb0:	0800af15 	.word	0x0800af15
 800aeb4:	0800af15 	.word	0x0800af15
 800aeb8:	0800af15 	.word	0x0800af15
 800aebc:	0800af15 	.word	0x0800af15
 800aec0:	0800af15 	.word	0x0800af15
 800aec4:	0800af15 	.word	0x0800af15
 800aec8:	0800af15 	.word	0x0800af15
 800aecc:	0800af15 	.word	0x0800af15
 800aed0:	0800af15 	.word	0x0800af15
 800aed4:	0800af15 	.word	0x0800af15
 800aed8:	0800af0d 	.word	0x0800af0d
  {
    case STTS22H_POWER_DOWN:
      *val = STTS22H_POWER_DOWN;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	2200      	movs	r2, #0
 800aee0:	701a      	strb	r2, [r3, #0]
      break;
 800aee2:	e01b      	b.n	800af1c <stts22h_temp_data_rate_get+0x160>

    case STTS22H_ONE_SHOT:
      *val = STTS22H_ONE_SHOT;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	2201      	movs	r2, #1
 800aee8:	701a      	strb	r2, [r3, #0]
      break;
 800aeea:	e017      	b.n	800af1c <stts22h_temp_data_rate_get+0x160>

    case STTS22H_1Hz:
      *val = STTS22H_1Hz;
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2204      	movs	r2, #4
 800aef0:	701a      	strb	r2, [r3, #0]
      break;
 800aef2:	e013      	b.n	800af1c <stts22h_temp_data_rate_get+0x160>

    case STTS22H_25Hz:
      *val = STTS22H_25Hz;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2202      	movs	r2, #2
 800aef8:	701a      	strb	r2, [r3, #0]
      break;
 800aefa:	e00f      	b.n	800af1c <stts22h_temp_data_rate_get+0x160>

    case STTS22H_50Hz:
      *val = STTS22H_50Hz;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	2212      	movs	r2, #18
 800af00:	701a      	strb	r2, [r3, #0]
      break;
 800af02:	e00b      	b.n	800af1c <stts22h_temp_data_rate_get+0x160>

    case STTS22H_100Hz:
      *val = STTS22H_100Hz;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	2222      	movs	r2, #34	@ 0x22
 800af08:	701a      	strb	r2, [r3, #0]
      break;
 800af0a:	e007      	b.n	800af1c <stts22h_temp_data_rate_get+0x160>

    case STTS22H_200Hz:
      *val = STTS22H_200Hz;
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	2232      	movs	r2, #50	@ 0x32
 800af10:	701a      	strb	r2, [r3, #0]
      break;
 800af12:	e003      	b.n	800af1c <stts22h_temp_data_rate_get+0x160>

    default:
      *val = STTS22H_POWER_DOWN;
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	2200      	movs	r2, #0
 800af18:	701a      	strb	r2, [r3, #0]
      break;
 800af1a:	bf00      	nop
  }

  return ret;
 800af1c:	68fb      	ldr	r3, [r7, #12]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop

0800af28 <stts22h_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	460b      	mov	r3, r1
 800af32:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800af34:	f107 0208 	add.w	r2, r7, #8
 800af38:	2301      	movs	r3, #1
 800af3a:	2104      	movs	r1, #4
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7ff fea5 	bl	800ac8c <stts22h_read_reg>
 800af42:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10f      	bne.n	800af6a <stts22h_block_data_update_set+0x42>
  {
    ctrl.bdu = val;
 800af4a:	78fb      	ldrb	r3, [r7, #3]
 800af4c:	f003 0301 	and.w	r3, r3, #1
 800af50:	b2da      	uxtb	r2, r3
 800af52:	7a3b      	ldrb	r3, [r7, #8]
 800af54:	f362 1386 	bfi	r3, r2, #6, #1
 800af58:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800af5a:	f107 0208 	add.w	r2, r7, #8
 800af5e:	2301      	movs	r3, #1
 800af60:	2104      	movs	r1, #4
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7ff feb0 	bl	800acc8 <stts22h_write_reg>
 800af68:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800af6a:	68fb      	ldr	r3, [r7, #12]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3710      	adds	r7, #16
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_TEMP_L_OUT, buff, 2);
 800af7e:	f107 0208 	add.w	r2, r7, #8
 800af82:	2302      	movs	r3, #2
 800af84:	2106      	movs	r1, #6
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f7ff fe80 	bl	800ac8c <stts22h_read_reg>
 800af8c:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800af8e:	7a7b      	ldrb	r3, [r7, #9]
 800af90:	b21a      	sxth	r2, r3
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	021b      	lsls	r3, r3, #8
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	7a3a      	ldrb	r2, [r7, #8]
 800afa4:	4413      	add	r3, r2
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	b21a      	sxth	r2, r3
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	801a      	strh	r2, [r3, #0]

  return ret;
 800afae:	68fb      	ldr	r3, [r7, #12]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_WHOAMI, buff, 1);
 800afc2:	2301      	movs	r3, #1
 800afc4:	683a      	ldr	r2, [r7, #0]
 800afc6:	2101      	movs	r1, #1
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f7ff fe5f 	bl	800ac8c <stts22h_read_reg>
 800afce:	60f8      	str	r0, [r7, #12]

  return ret;
 800afd0:	68fb      	ldr	r3, [r7, #12]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <stts22h_auto_increment_set>:
  * @param  val    Change the values of "if_add_inc" in reg STTS22H.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b084      	sub	sp, #16
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
 800afe2:	460b      	mov	r3, r1
 800afe4:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800afe6:	f107 0208 	add.w	r2, r7, #8
 800afea:	2301      	movs	r3, #1
 800afec:	2104      	movs	r1, #4
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f7ff fe4c 	bl	800ac8c <stts22h_read_reg>
 800aff4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d10f      	bne.n	800b01c <stts22h_auto_increment_set+0x42>
  {
    ctrl.if_add_inc = (uint8_t)val;
 800affc:	78fb      	ldrb	r3, [r7, #3]
 800affe:	f003 0301 	and.w	r3, r3, #1
 800b002:	b2da      	uxtb	r2, r3
 800b004:	7a3b      	ldrb	r3, [r7, #8]
 800b006:	f362 03c3 	bfi	r3, r2, #3, #1
 800b00a:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800b00c:	f107 0208 	add.w	r2, r7, #8
 800b010:	2301      	movs	r3, #1
 800b012:	2104      	movs	r1, #4
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f7ff fe57 	bl	800acc8 <stts22h_write_reg>
 800b01a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800b01c:	68fb      	ldr	r3, [r7, #12]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
	...

0800b028 <IKS4A1_ENV_SENSOR_Init>:
  *         - ENV_PRESSURE
  *         - ENV_HUMIDITY
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b08c      	sub	sp, #48	@ 0x30
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b032:	2300      	movs	r3, #0
 800b034:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 800b036:	2301      	movs	r3, #1
 800b038:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 800b03a:	2300      	movs	r3, #0
 800b03c:	623b      	str	r3, [r7, #32]
  IKS4A1_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2b02      	cmp	r3, #2
 800b042:	d07c      	beq.n	800b13e <IKS4A1_ENV_SENSOR_Init+0x116>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b02      	cmp	r3, #2
 800b048:	f200 80b2 	bhi.w	800b1b0 <IKS4A1_ENV_SENSOR_Init+0x188>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d003      	beq.n	800b05a <IKS4A1_ENV_SENSOR_Init+0x32>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d039      	beq.n	800b0cc <IKS4A1_ENV_SENSOR_Init+0xa4>
 800b058:	e0aa      	b.n	800b1b0 <IKS4A1_ENV_SENSOR_Init+0x188>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_STTS22H_0 == 1)
    case IKS4A1_STTS22H_0:
      if (STTS22H_0_Probe(Functions) != BSP_ERROR_NONE)
 800b05a:	6838      	ldr	r0, [r7, #0]
 800b05c:	f000 f91c 	bl	800b298 <STTS22H_0_Probe>
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	d002      	beq.n	800b06c <IKS4A1_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800b066:	f04f 33ff 	mov.w	r3, #4294967295
 800b06a:	e0df      	b.n	800b22c <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b06c:	4a71      	ldr	r2, [pc, #452]	@ (800b234 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	4970      	ldr	r1, [pc, #448]	@ (800b238 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b07e:	f107 0108 	add.w	r1, r7, #8
 800b082:	4610      	mov	r0, r2
 800b084:	4798      	blx	r3
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d002      	beq.n	800b092 <IKS4A1_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b08c:	f06f 0306 	mvn.w	r3, #6
 800b090:	e0cc      	b.n	800b22c <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800b092:	7a3b      	ldrb	r3, [r7, #8]
 800b094:	2b01      	cmp	r3, #1
 800b096:	d103      	bne.n	800b0a0 <IKS4A1_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 800b098:	6a3b      	ldr	r3, [r7, #32]
 800b09a:	f043 0301 	orr.w	r3, r3, #1
 800b09e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800b0a0:	7abb      	ldrb	r3, [r7, #10]
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d103      	bne.n	800b0ae <IKS4A1_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 800b0a6:	6a3b      	ldr	r3, [r7, #32]
 800b0a8:	f043 0304 	orr.w	r3, r3, #4
 800b0ac:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800b0ae:	7a7b      	ldrb	r3, [r7, #9]
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d103      	bne.n	800b0bc <IKS4A1_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 800b0b4:	6a3b      	ldr	r3, [r7, #32]
 800b0b6:	f043 0302 	orr.w	r3, r3, #2
 800b0ba:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800b0bc:	7afb      	ldrb	r3, [r7, #11]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d17a      	bne.n	800b1b8 <IKS4A1_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800b0c2:	6a3b      	ldr	r3, [r7, #32]
 800b0c4:	f043 0308 	orr.w	r3, r3, #8
 800b0c8:	623b      	str	r3, [r7, #32]
      }
      break;
 800b0ca:	e075      	b.n	800b1b8 <IKS4A1_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_LPS22DF_0 == 1)
    case IKS4A1_LPS22DF_0:
      if (LPS22DF_0_Probe(Functions) != BSP_ERROR_NONE)
 800b0cc:	6838      	ldr	r0, [r7, #0]
 800b0ce:	f000 f999 	bl	800b404 <LPS22DF_0_Probe>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d002      	beq.n	800b0de <IKS4A1_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 800b0d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0dc:	e0a6      	b.n	800b22c <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b0de:	4a55      	ldr	r2, [pc, #340]	@ (800b234 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	4953      	ldr	r1, [pc, #332]	@ (800b238 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b0f0:	f107 0108 	add.w	r1, r7, #8
 800b0f4:	4610      	mov	r0, r2
 800b0f6:	4798      	blx	r3
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d002      	beq.n	800b104 <IKS4A1_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b0fe:	f06f 0306 	mvn.w	r3, #6
 800b102:	e093      	b.n	800b22c <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800b104:	7a3b      	ldrb	r3, [r7, #8]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d103      	bne.n	800b112 <IKS4A1_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 800b10a:	6a3b      	ldr	r3, [r7, #32]
 800b10c:	f043 0301 	orr.w	r3, r3, #1
 800b110:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800b112:	7abb      	ldrb	r3, [r7, #10]
 800b114:	2b01      	cmp	r3, #1
 800b116:	d103      	bne.n	800b120 <IKS4A1_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 800b118:	6a3b      	ldr	r3, [r7, #32]
 800b11a:	f043 0304 	orr.w	r3, r3, #4
 800b11e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800b120:	7a7b      	ldrb	r3, [r7, #9]
 800b122:	2b01      	cmp	r3, #1
 800b124:	d103      	bne.n	800b12e <IKS4A1_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 800b126:	6a3b      	ldr	r3, [r7, #32]
 800b128:	f043 0302 	orr.w	r3, r3, #2
 800b12c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800b12e:	7afb      	ldrb	r3, [r7, #11]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d143      	bne.n	800b1bc <IKS4A1_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 800b134:	6a3b      	ldr	r3, [r7, #32]
 800b136:	f043 0308 	orr.w	r3, r3, #8
 800b13a:	623b      	str	r3, [r7, #32]
      }
      break;
 800b13c:	e03e      	b.n	800b1bc <IKS4A1_ENV_SENSOR_Init+0x194>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_SHT40AD1B_0 == 1)
    case IKS4A1_SHT40AD1B_0:
      if (SHT40AD1B_0_Probe(Functions) != BSP_ERROR_NONE)
 800b13e:	6838      	ldr	r0, [r7, #0]
 800b140:	f000 fa30 	bl	800b5a4 <SHT40AD1B_0_Probe>
 800b144:	4603      	mov	r3, r0
 800b146:	2b00      	cmp	r3, #0
 800b148:	d002      	beq.n	800b150 <IKS4A1_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 800b14a:	f04f 33ff 	mov.w	r3, #4294967295
 800b14e:	e06d      	b.n	800b22c <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b150:	4a38      	ldr	r2, [pc, #224]	@ (800b234 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	4937      	ldr	r1, [pc, #220]	@ (800b238 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b162:	f107 0108 	add.w	r1, r7, #8
 800b166:	4610      	mov	r0, r2
 800b168:	4798      	blx	r3
 800b16a:	4603      	mov	r3, r0
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d002      	beq.n	800b176 <IKS4A1_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b170:	f06f 0306 	mvn.w	r3, #6
 800b174:	e05a      	b.n	800b22c <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800b176:	7a3b      	ldrb	r3, [r7, #8]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d103      	bne.n	800b184 <IKS4A1_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 800b17c:	6a3b      	ldr	r3, [r7, #32]
 800b17e:	f043 0301 	orr.w	r3, r3, #1
 800b182:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800b184:	7abb      	ldrb	r3, [r7, #10]
 800b186:	2b01      	cmp	r3, #1
 800b188:	d103      	bne.n	800b192 <IKS4A1_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 800b18a:	6a3b      	ldr	r3, [r7, #32]
 800b18c:	f043 0304 	orr.w	r3, r3, #4
 800b190:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800b192:	7a7b      	ldrb	r3, [r7, #9]
 800b194:	2b01      	cmp	r3, #1
 800b196:	d103      	bne.n	800b1a0 <IKS4A1_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 800b198:	6a3b      	ldr	r3, [r7, #32]
 800b19a:	f043 0302 	orr.w	r3, r3, #2
 800b19e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800b1a0:	7afb      	ldrb	r3, [r7, #11]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d10c      	bne.n	800b1c0 <IKS4A1_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	f043 0308 	orr.w	r3, r3, #8
 800b1ac:	623b      	str	r3, [r7, #32]
      }
      break;
 800b1ae:	e007      	b.n	800b1c0 <IKS4A1_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b1b0:	f06f 0301 	mvn.w	r3, #1
 800b1b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800b1b6:	e004      	b.n	800b1c2 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800b1b8:	bf00      	nop
 800b1ba:	e002      	b.n	800b1c2 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800b1bc:	bf00      	nop
 800b1be:	e000      	b.n	800b1c2 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800b1c0:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b1c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d001      	beq.n	800b1cc <IKS4A1_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 800b1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ca:	e02f      	b.n	800b22c <IKS4A1_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1d0:	e028      	b.n	800b224 <IKS4A1_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1d6:	4013      	ands	r3, r2
 800b1d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d11c      	bne.n	800b218 <IKS4A1_ENV_SENSOR_Init+0x1f0>
 800b1de:	6a3a      	ldr	r2, [r7, #32]
 800b1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e2:	4013      	ands	r3, r2
 800b1e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d116      	bne.n	800b218 <IKS4A1_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800b1ea:	4a14      	ldr	r2, [pc, #80]	@ (800b23c <IKS4A1_ENV_SENSOR_Init+0x214>)
 800b1ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1f2:	4913      	ldr	r1, [pc, #76]	@ (800b240 <IKS4A1_ENV_SENSOR_Init+0x218>)
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	0092      	lsls	r2, r2, #2
 800b1f8:	4413      	add	r3, r2
 800b1fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	490d      	ldr	r1, [pc, #52]	@ (800b238 <IKS4A1_ENV_SENSOR_Init+0x210>)
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b208:	4610      	mov	r0, r2
 800b20a:	4798      	blx	r3
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d002      	beq.n	800b218 <IKS4A1_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b212:	f06f 0304 	mvn.w	r3, #4
 800b216:	e009      	b.n	800b22c <IKS4A1_ENV_SENSOR_Init+0x204>
      }
    }
    function = function << 1;
 800b218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b21a:	005b      	lsls	r3, r3, #1
 800b21c:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800b21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b220:	3301      	adds	r3, #1
 800b222:	627b      	str	r3, [r7, #36]	@ 0x24
 800b224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b226:	2b03      	cmp	r3, #3
 800b228:	d9d3      	bls.n	800b1d2 <IKS4A1_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 800b22a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3730      	adds	r7, #48	@ 0x30
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	20014e4c 	.word	0x20014e4c
 800b238:	20014e10 	.word	0x20014e10
 800b23c:	200001b0 	.word	0x200001b0
 800b240:	20014e1c 	.word	0x20014e1c

0800b244 <IKS4A1_ENV_SENSOR_GetCapabilities>:
  * @param  Instance Environmental sensor instance
  * @param  Capabilities pointer to Environmental sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_ENV_SENSOR_Capabilities_t *Capabilities)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2b02      	cmp	r3, #2
 800b252:	d903      	bls.n	800b25c <IKS4A1_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b254:	f06f 0301 	mvn.w	r3, #1
 800b258:	60fb      	str	r3, [r7, #12]
 800b25a:	e014      	b.n	800b286 <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800b25c:	4a0c      	ldr	r2, [pc, #48]	@ (800b290 <IKS4A1_ENV_SENSOR_GetCapabilities+0x4c>)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b264:	68db      	ldr	r3, [r3, #12]
 800b266:	490b      	ldr	r1, [pc, #44]	@ (800b294 <IKS4A1_ENV_SENSOR_GetCapabilities+0x50>)
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b26e:	6839      	ldr	r1, [r7, #0]
 800b270:	4610      	mov	r0, r2
 800b272:	4798      	blx	r3
 800b274:	4603      	mov	r3, r0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d003      	beq.n	800b282 <IKS4A1_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b27a:	f06f 0306 	mvn.w	r3, #6
 800b27e:	60fb      	str	r3, [r7, #12]
 800b280:	e001      	b.n	800b286 <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800b282:	2300      	movs	r3, #0
 800b284:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b286:	68fb      	ldr	r3, [r7, #12]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	20014e4c 	.word	0x20014e4c
 800b294:	20014e10 	.word	0x20014e10

0800b298 <STTS22H_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS22H_0_Probe(uint32_t Functions)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b092      	sub	sp, #72	@ 0x48
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  STTS22H_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS22H_Object_t stts22h_obj_0;
  STTS22H_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = STTS22H_I2C_BUS; /* I2C */
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS22H_I2C_ADD_H;
 800b2a8:	2371      	movs	r3, #113	@ 0x71
 800b2aa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b2ae:	4b47      	ldr	r3, [pc, #284]	@ (800b3cc <STTS22H_0_Probe+0x134>)
 800b2b0:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b2b2:	4b47      	ldr	r3, [pc, #284]	@ (800b3d0 <STTS22H_0_Probe+0x138>)
 800b2b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b2b6:	4b47      	ldr	r3, [pc, #284]	@ (800b3d4 <STTS22H_0_Probe+0x13c>)
 800b2b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b2ba:	4b47      	ldr	r3, [pc, #284]	@ (800b3d8 <STTS22H_0_Probe+0x140>)
 800b2bc:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b2be:	4b47      	ldr	r3, [pc, #284]	@ (800b3dc <STTS22H_0_Probe+0x144>)
 800b2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800b2c2:	4b47      	ldr	r3, [pc, #284]	@ (800b3e0 <STTS22H_0_Probe+0x148>)
 800b2c4:	643b      	str	r3, [r7, #64]	@ 0x40

  if (STTS22H_RegisterBusIO(&stts22h_obj_0, &io_ctx) != STTS22H_OK)
 800b2c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	4845      	ldr	r0, [pc, #276]	@ (800b3e4 <STTS22H_0_Probe+0x14c>)
 800b2ce:	f7ff fa21 	bl	800a714 <STTS22H_RegisterBusIO>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d003      	beq.n	800b2e0 <STTS22H_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b2d8:	f06f 0306 	mvn.w	r3, #6
 800b2dc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2de:	e06f      	b.n	800b3c0 <STTS22H_0_Probe+0x128>
  }
  else if (STTS22H_ReadID(&stts22h_obj_0, &id) != STTS22H_OK)
 800b2e0:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	483f      	ldr	r0, [pc, #252]	@ (800b3e4 <STTS22H_0_Probe+0x14c>)
 800b2e8:	f7ff fab3 	bl	800a852 <STTS22H_ReadID>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d003      	beq.n	800b2fa <STTS22H_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b2f2:	f06f 0306 	mvn.w	r3, #6
 800b2f6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2f8:	e062      	b.n	800b3c0 <STTS22H_0_Probe+0x128>
  }
  else if (id != STTS22H_ID)
 800b2fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b2fe:	2ba0      	cmp	r3, #160	@ 0xa0
 800b300:	d003      	beq.n	800b30a <STTS22H_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b302:	f06f 0306 	mvn.w	r3, #6
 800b306:	647b      	str	r3, [r7, #68]	@ 0x44
 800b308:	e05a      	b.n	800b3c0 <STTS22H_0_Probe+0x128>
  }
  else
  {
    (void)STTS22H_GetCapabilities(&stts22h_obj_0, &cap);
 800b30a:	f107 0308 	add.w	r3, r7, #8
 800b30e:	4619      	mov	r1, r3
 800b310:	4834      	ldr	r0, [pc, #208]	@ (800b3e4 <STTS22H_0_Probe+0x14c>)
 800b312:	f7ff fab9 	bl	800a888 <STTS22H_GetCapabilities>

    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800b316:	7a3b      	ldrb	r3, [r7, #8]
 800b318:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800b31a:	7a7b      	ldrb	r3, [r7, #9]
 800b31c:	005b      	lsls	r3, r3, #1
 800b31e:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800b320:	7abb      	ldrb	r3, [r7, #10]
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800b326:	7afb      	ldrb	r3, [r7, #11]
 800b328:	00db      	lsls	r3, r3, #3
 800b32a:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800b32c:	4a2e      	ldr	r2, [pc, #184]	@ (800b3e8 <STTS22H_0_Probe+0x150>)
 800b32e:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS4A1_STTS22H_0] = &stts22h_obj_0;
 800b330:	4b2e      	ldr	r3, [pc, #184]	@ (800b3ec <STTS22H_0_Probe+0x154>)
 800b332:	4a2c      	ldr	r2, [pc, #176]	@ (800b3e4 <STTS22H_0_Probe+0x14c>)
 800b334:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_STTS22H_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS22H_COMMON_Driver;
 800b336:	4b2e      	ldr	r3, [pc, #184]	@ (800b3f0 <STTS22H_0_Probe+0x158>)
 800b338:	4a2e      	ldr	r2, [pc, #184]	@ (800b3f4 <STTS22H_0_Probe+0x15c>)
 800b33a:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b33c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d11d      	bne.n	800b37e <STTS22H_0_Probe+0xe6>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f003 0301 	and.w	r3, r3, #1
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d018      	beq.n	800b37e <STTS22H_0_Probe+0xe6>
 800b34c:	7a3b      	ldrb	r3, [r7, #8]
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d115      	bne.n	800b37e <STTS22H_0_Probe+0xe6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_STTS22H_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS22H_TEMP_Driver;
 800b352:	4b29      	ldr	r3, [pc, #164]	@ (800b3f8 <STTS22H_0_Probe+0x160>)
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	4a29      	ldr	r2, [pc, #164]	@ (800b3fc <STTS22H_0_Probe+0x164>)
 800b358:	4929      	ldr	r1, [pc, #164]	@ (800b400 <STTS22H_0_Probe+0x168>)
 800b35a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_STTS22H_0]->Init(EnvCompObj[IKS4A1_STTS22H_0]) != STTS22H_OK)
 800b35e:	4b24      	ldr	r3, [pc, #144]	@ (800b3f0 <STTS22H_0_Probe+0x158>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a21      	ldr	r2, [pc, #132]	@ (800b3ec <STTS22H_0_Probe+0x154>)
 800b366:	6812      	ldr	r2, [r2, #0]
 800b368:	4610      	mov	r0, r2
 800b36a:	4798      	blx	r3
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d003      	beq.n	800b37a <STTS22H_0_Probe+0xe2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b372:	f06f 0304 	mvn.w	r3, #4
 800b376:	647b      	str	r3, [r7, #68]	@ 0x44
 800b378:	e001      	b.n	800b37e <STTS22H_0_Probe+0xe6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b37a:	2300      	movs	r3, #0
 800b37c:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b37e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b380:	2b00      	cmp	r3, #0
 800b382:	d107      	bne.n	800b394 <STTS22H_0_Probe+0xfc>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f003 0304 	and.w	r3, r3, #4
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d002      	beq.n	800b394 <STTS22H_0_Probe+0xfc>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b38e:	f06f 0304 	mvn.w	r3, #4
 800b392:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b396:	2b00      	cmp	r3, #0
 800b398:	d107      	bne.n	800b3aa <STTS22H_0_Probe+0x112>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f003 0302 	and.w	r3, r3, #2
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d002      	beq.n	800b3aa <STTS22H_0_Probe+0x112>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3a4:	f06f 0304 	mvn.w	r3, #4
 800b3a8:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b3aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d107      	bne.n	800b3c0 <STTS22H_0_Probe+0x128>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f003 0308 	and.w	r3, r3, #8
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d002      	beq.n	800b3c0 <STTS22H_0_Probe+0x128>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b3ba:	f06f 0304 	mvn.w	r3, #4
 800b3be:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b3c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3748      	adds	r7, #72	@ 0x48
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	08002841 	.word	0x08002841
 800b3d0:	080028a5 	.word	0x080028a5
 800b3d4:	08002959 	.word	0x08002959
 800b3d8:	080028f5 	.word	0x080028f5
 800b3dc:	08002a65 	.word	0x08002a65
 800b3e0:	0800c6f5 	.word	0x0800c6f5
 800b3e4:	20014e64 	.word	0x20014e64
 800b3e8:	20014e58 	.word	0x20014e58
 800b3ec:	20014e10 	.word	0x20014e10
 800b3f0:	20014e4c 	.word	0x20014e4c
 800b3f4:	2000018c 	.word	0x2000018c
 800b3f8:	200001b0 	.word	0x200001b0
 800b3fc:	20014e1c 	.word	0x20014e1c
 800b400:	2000019c 	.word	0x2000019c

0800b404 <LPS22DF_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22DF_0_Probe(uint32_t Functions)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b092      	sub	sp, #72	@ 0x48
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  LPS22DF_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800b40c:	2300      	movs	r3, #0
 800b40e:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22DF_Object_t lps22df_obj_0;
  LPS22DF_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = LPS22DF_I2C_BUS; /* I2C */
 800b410:	2300      	movs	r3, #0
 800b412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22DF_I2C_ADD_H;
 800b414:	23bb      	movs	r3, #187	@ 0xbb
 800b416:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b41a:	4b53      	ldr	r3, [pc, #332]	@ (800b568 <LPS22DF_0_Probe+0x164>)
 800b41c:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b41e:	4b53      	ldr	r3, [pc, #332]	@ (800b56c <LPS22DF_0_Probe+0x168>)
 800b420:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b422:	4b53      	ldr	r3, [pc, #332]	@ (800b570 <LPS22DF_0_Probe+0x16c>)
 800b424:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b426:	4b53      	ldr	r3, [pc, #332]	@ (800b574 <LPS22DF_0_Probe+0x170>)
 800b428:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b42a:	4b53      	ldr	r3, [pc, #332]	@ (800b578 <LPS22DF_0_Probe+0x174>)
 800b42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800b42e:	4b53      	ldr	r3, [pc, #332]	@ (800b57c <LPS22DF_0_Probe+0x178>)
 800b430:	643b      	str	r3, [r7, #64]	@ 0x40

  if (LPS22DF_RegisterBusIO(&lps22df_obj_0, &io_ctx) != LPS22DF_OK)
 800b432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b436:	4619      	mov	r1, r3
 800b438:	4851      	ldr	r0, [pc, #324]	@ (800b580 <LPS22DF_0_Probe+0x17c>)
 800b43a:	f7fa f96b 	bl	8005714 <LPS22DF_RegisterBusIO>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d003      	beq.n	800b44c <LPS22DF_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b444:	f06f 0306 	mvn.w	r3, #6
 800b448:	647b      	str	r3, [r7, #68]	@ 0x44
 800b44a:	e087      	b.n	800b55c <LPS22DF_0_Probe+0x158>
  }
  else if (LPS22DF_ReadID(&lps22df_obj_0, &id) != LPS22DF_OK)
 800b44c:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b450:	4619      	mov	r1, r3
 800b452:	484b      	ldr	r0, [pc, #300]	@ (800b580 <LPS22DF_0_Probe+0x17c>)
 800b454:	f7fa fa07 	bl	8005866 <LPS22DF_ReadID>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d003      	beq.n	800b466 <LPS22DF_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b45e:	f06f 0306 	mvn.w	r3, #6
 800b462:	647b      	str	r3, [r7, #68]	@ 0x44
 800b464:	e07a      	b.n	800b55c <LPS22DF_0_Probe+0x158>
  }
  else if (id != LPS22DF_ID)
 800b466:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b46a:	2bb4      	cmp	r3, #180	@ 0xb4
 800b46c:	d003      	beq.n	800b476 <LPS22DF_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b46e:	f06f 0306 	mvn.w	r3, #6
 800b472:	647b      	str	r3, [r7, #68]	@ 0x44
 800b474:	e072      	b.n	800b55c <LPS22DF_0_Probe+0x158>
  }
  else
  {
    (void)LPS22DF_GetCapabilities(&lps22df_obj_0, &cap);
 800b476:	f107 0308 	add.w	r3, r7, #8
 800b47a:	4619      	mov	r1, r3
 800b47c:	4840      	ldr	r0, [pc, #256]	@ (800b580 <LPS22DF_0_Probe+0x17c>)
 800b47e:	f7fa fa0d 	bl	800589c <LPS22DF_GetCapabilities>

    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800b482:	7a3b      	ldrb	r3, [r7, #8]
 800b484:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800b486:	7a7b      	ldrb	r3, [r7, #9]
 800b488:	005b      	lsls	r3, r3, #1
 800b48a:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800b48c:	7abb      	ldrb	r3, [r7, #10]
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800b492:	7afb      	ldrb	r3, [r7, #11]
 800b494:	00db      	lsls	r3, r3, #3
 800b496:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800b498:	4a3a      	ldr	r2, [pc, #232]	@ (800b584 <LPS22DF_0_Probe+0x180>)
 800b49a:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS4A1_LPS22DF_0] = &lps22df_obj_0;
 800b49c:	4b3a      	ldr	r3, [pc, #232]	@ (800b588 <LPS22DF_0_Probe+0x184>)
 800b49e:	4a38      	ldr	r2, [pc, #224]	@ (800b580 <LPS22DF_0_Probe+0x17c>)
 800b4a0:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_LPS22DF_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22DF_COMMON_Driver;
 800b4a2:	4b3a      	ldr	r3, [pc, #232]	@ (800b58c <LPS22DF_0_Probe+0x188>)
 800b4a4:	4a3a      	ldr	r2, [pc, #232]	@ (800b590 <LPS22DF_0_Probe+0x18c>)
 800b4a6:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b4a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d11e      	bne.n	800b4ec <LPS22DF_0_Probe+0xe8>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f003 0301 	and.w	r3, r3, #1
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d019      	beq.n	800b4ec <LPS22DF_0_Probe+0xe8>
 800b4b8:	7a3b      	ldrb	r3, [r7, #8]
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d116      	bne.n	800b4ec <LPS22DF_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_TEMP_Driver;
 800b4be:	4b35      	ldr	r3, [pc, #212]	@ (800b594 <LPS22DF_0_Probe+0x190>)
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	4a35      	ldr	r2, [pc, #212]	@ (800b598 <LPS22DF_0_Probe+0x194>)
 800b4c4:	3304      	adds	r3, #4
 800b4c6:	4935      	ldr	r1, [pc, #212]	@ (800b59c <LPS22DF_0_Probe+0x198>)
 800b4c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800b4cc:	4b2f      	ldr	r3, [pc, #188]	@ (800b58c <LPS22DF_0_Probe+0x188>)
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a2d      	ldr	r2, [pc, #180]	@ (800b588 <LPS22DF_0_Probe+0x184>)
 800b4d4:	6852      	ldr	r2, [r2, #4]
 800b4d6:	4610      	mov	r0, r2
 800b4d8:	4798      	blx	r3
 800b4da:	4603      	mov	r3, r0
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d003      	beq.n	800b4e8 <LPS22DF_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b4e0:	f06f 0304 	mvn.w	r3, #4
 800b4e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4e6:	e001      	b.n	800b4ec <LPS22DF_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800b4ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d11e      	bne.n	800b530 <LPS22DF_0_Probe+0x12c>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f003 0302 	and.w	r3, r3, #2
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d019      	beq.n	800b530 <LPS22DF_0_Probe+0x12c>
 800b4fc:	7a7b      	ldrb	r3, [r7, #9]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d116      	bne.n	800b530 <LPS22DF_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_PRESS_Driver;
 800b502:	4b24      	ldr	r3, [pc, #144]	@ (800b594 <LPS22DF_0_Probe+0x190>)
 800b504:	689b      	ldr	r3, [r3, #8]
 800b506:	4a24      	ldr	r2, [pc, #144]	@ (800b598 <LPS22DF_0_Probe+0x194>)
 800b508:	3304      	adds	r3, #4
 800b50a:	4925      	ldr	r1, [pc, #148]	@ (800b5a0 <LPS22DF_0_Probe+0x19c>)
 800b50c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800b510:	4b1e      	ldr	r3, [pc, #120]	@ (800b58c <LPS22DF_0_Probe+0x188>)
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a1c      	ldr	r2, [pc, #112]	@ (800b588 <LPS22DF_0_Probe+0x184>)
 800b518:	6852      	ldr	r2, [r2, #4]
 800b51a:	4610      	mov	r0, r2
 800b51c:	4798      	blx	r3
 800b51e:	4603      	mov	r3, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	d003      	beq.n	800b52c <LPS22DF_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b524:	f06f 0304 	mvn.w	r3, #4
 800b528:	647b      	str	r3, [r7, #68]	@ 0x44
 800b52a:	e001      	b.n	800b530 <LPS22DF_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b52c:	2300      	movs	r3, #0
 800b52e:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b532:	2b00      	cmp	r3, #0
 800b534:	d107      	bne.n	800b546 <LPS22DF_0_Probe+0x142>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f003 0304 	and.w	r3, r3, #4
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d002      	beq.n	800b546 <LPS22DF_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b540:	f06f 0304 	mvn.w	r3, #4
 800b544:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d107      	bne.n	800b55c <LPS22DF_0_Probe+0x158>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f003 0308 	and.w	r3, r3, #8
 800b552:	2b00      	cmp	r3, #0
 800b554:	d002      	beq.n	800b55c <LPS22DF_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b556:	f06f 0304 	mvn.w	r3, #4
 800b55a:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b55c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3748      	adds	r7, #72	@ 0x48
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	08002841 	.word	0x08002841
 800b56c:	080028a5 	.word	0x080028a5
 800b570:	08002959 	.word	0x08002959
 800b574:	080028f5 	.word	0x080028f5
 800b578:	08002a65 	.word	0x08002a65
 800b57c:	0800c6f5 	.word	0x0800c6f5
 800b580:	20014e9c 	.word	0x20014e9c
 800b584:	20014e58 	.word	0x20014e58
 800b588:	20014e10 	.word	0x20014e10
 800b58c:	20014e4c 	.word	0x20014e4c
 800b590:	2000006c 	.word	0x2000006c
 800b594:	200001b0 	.word	0x200001b0
 800b598:	20014e1c 	.word	0x20014e1c
 800b59c:	20000090 	.word	0x20000090
 800b5a0:	2000007c 	.word	0x2000007c

0800b5a4 <SHT40AD1B_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t SHT40AD1B_0_Probe(uint32_t Functions)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b092      	sub	sp, #72	@ 0x48
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  SHT40AD1B_IO_t            io_ctx;
  uint8_t                   id;
  int32_t                   ret = BSP_ERROR_NONE;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	647b      	str	r3, [r7, #68]	@ 0x44
  static SHT40AD1B_Object_t sht40ad1b_obj_0;
  SHT40AD1B_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = SHT40AD1B_I2C_BUS; /* I2C */
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = SHT40AD1B_I2C_ADDRESS;
 800b5b4:	2389      	movs	r3, #137	@ 0x89
 800b5b6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b5ba:	4b53      	ldr	r3, [pc, #332]	@ (800b708 <SHT40AD1B_0_Probe+0x164>)
 800b5bc:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b5be:	4b53      	ldr	r3, [pc, #332]	@ (800b70c <SHT40AD1B_0_Probe+0x168>)
 800b5c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.Read        = IKS4A1_I2C_READ;
 800b5c2:	4b53      	ldr	r3, [pc, #332]	@ (800b710 <SHT40AD1B_0_Probe+0x16c>)
 800b5c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.Write       = IKS4A1_I2C_WRITE;
 800b5c6:	4b53      	ldr	r3, [pc, #332]	@ (800b714 <SHT40AD1B_0_Probe+0x170>)
 800b5c8:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b5ca:	4b53      	ldr	r3, [pc, #332]	@ (800b718 <SHT40AD1B_0_Probe+0x174>)
 800b5cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800b5ce:	4b53      	ldr	r3, [pc, #332]	@ (800b71c <SHT40AD1B_0_Probe+0x178>)
 800b5d0:	643b      	str	r3, [r7, #64]	@ 0x40

  if (SHT40AD1B_RegisterBusIO(&sht40ad1b_obj_0, &io_ctx) != SHT40AD1B_OK)
 800b5d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	4851      	ldr	r0, [pc, #324]	@ (800b720 <SHT40AD1B_0_Probe+0x17c>)
 800b5da:	f7fe fd97 	bl	800a10c <SHT40AD1B_RegisterBusIO>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d003      	beq.n	800b5ec <SHT40AD1B_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b5e4:	f06f 0306 	mvn.w	r3, #6
 800b5e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5ea:	e087      	b.n	800b6fc <SHT40AD1B_0_Probe+0x158>
  }
  else if (SHT40AD1B_ReadID(&sht40ad1b_obj_0, &id) != SHT40AD1B_OK)
 800b5ec:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	484b      	ldr	r0, [pc, #300]	@ (800b720 <SHT40AD1B_0_Probe+0x17c>)
 800b5f4:	f7fe fdfa 	bl	800a1ec <SHT40AD1B_ReadID>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d003      	beq.n	800b606 <SHT40AD1B_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b5fe:	f06f 0306 	mvn.w	r3, #6
 800b602:	647b      	str	r3, [r7, #68]	@ 0x44
 800b604:	e07a      	b.n	800b6fc <SHT40AD1B_0_Probe+0x158>
  }
  else if (id != SHT40AD1B_ID)
 800b606:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d003      	beq.n	800b616 <SHT40AD1B_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b60e:	f06f 0306 	mvn.w	r3, #6
 800b612:	647b      	str	r3, [r7, #68]	@ 0x44
 800b614:	e072      	b.n	800b6fc <SHT40AD1B_0_Probe+0x158>
  }
  else
  {
    (void)SHT40AD1B_GetCapabilities(&sht40ad1b_obj_0, &cap);
 800b616:	f107 0308 	add.w	r3, r7, #8
 800b61a:	4619      	mov	r1, r3
 800b61c:	4840      	ldr	r0, [pc, #256]	@ (800b720 <SHT40AD1B_0_Probe+0x17c>)
 800b61e:	f7fe fdf5 	bl	800a20c <SHT40AD1B_GetCapabilities>

    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800b622:	7a3b      	ldrb	r3, [r7, #8]
 800b624:	461a      	mov	r2, r3
                                         | ((uint32_t)cap.Pressure << 1)
 800b626:	7a7b      	ldrb	r3, [r7, #9]
 800b628:	005b      	lsls	r3, r3, #1
 800b62a:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Humidity << 2)
 800b62c:	7abb      	ldrb	r3, [r7, #10]
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Gas      << 3);
 800b632:	7afb      	ldrb	r3, [r7, #11]
 800b634:	00db      	lsls	r3, r3, #3
 800b636:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800b638:	4a3a      	ldr	r2, [pc, #232]	@ (800b724 <SHT40AD1B_0_Probe+0x180>)
 800b63a:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS4A1_SHT40AD1B_0] = &sht40ad1b_obj_0;
 800b63c:	4b3a      	ldr	r3, [pc, #232]	@ (800b728 <SHT40AD1B_0_Probe+0x184>)
 800b63e:	4a38      	ldr	r2, [pc, #224]	@ (800b720 <SHT40AD1B_0_Probe+0x17c>)
 800b640:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_SHT40AD1B_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&SHT40AD1B_COMMON_Driver;
 800b642:	4b3a      	ldr	r3, [pc, #232]	@ (800b72c <SHT40AD1B_0_Probe+0x188>)
 800b644:	4a3a      	ldr	r2, [pc, #232]	@ (800b730 <SHT40AD1B_0_Probe+0x18c>)
 800b646:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d11e      	bne.n	800b68c <SHT40AD1B_0_Probe+0xe8>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f003 0301 	and.w	r3, r3, #1
 800b654:	2b00      	cmp	r3, #0
 800b656:	d019      	beq.n	800b68c <SHT40AD1B_0_Probe+0xe8>
 800b658:	7a3b      	ldrb	r3, [r7, #8]
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d116      	bne.n	800b68c <SHT40AD1B_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_TEMP_Driver;
 800b65e:	4b35      	ldr	r3, [pc, #212]	@ (800b734 <SHT40AD1B_0_Probe+0x190>)
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	4a35      	ldr	r2, [pc, #212]	@ (800b738 <SHT40AD1B_0_Probe+0x194>)
 800b664:	3308      	adds	r3, #8
 800b666:	4935      	ldr	r1, [pc, #212]	@ (800b73c <SHT40AD1B_0_Probe+0x198>)
 800b668:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800b66c:	4b2f      	ldr	r3, [pc, #188]	@ (800b72c <SHT40AD1B_0_Probe+0x188>)
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4a2d      	ldr	r2, [pc, #180]	@ (800b728 <SHT40AD1B_0_Probe+0x184>)
 800b674:	6892      	ldr	r2, [r2, #8]
 800b676:	4610      	mov	r0, r2
 800b678:	4798      	blx	r3
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d003      	beq.n	800b688 <SHT40AD1B_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b680:	f06f 0304 	mvn.w	r3, #4
 800b684:	647b      	str	r3, [r7, #68]	@ 0x44
 800b686:	e001      	b.n	800b68c <SHT40AD1B_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b688:	2300      	movs	r3, #0
 800b68a:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800b68c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d11e      	bne.n	800b6d0 <SHT40AD1B_0_Probe+0x12c>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f003 0304 	and.w	r3, r3, #4
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d019      	beq.n	800b6d0 <SHT40AD1B_0_Probe+0x12c>
 800b69c:	7abb      	ldrb	r3, [r7, #10]
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d116      	bne.n	800b6d0 <SHT40AD1B_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_HUM_Driver;
 800b6a2:	4b24      	ldr	r3, [pc, #144]	@ (800b734 <SHT40AD1B_0_Probe+0x190>)
 800b6a4:	691b      	ldr	r3, [r3, #16]
 800b6a6:	4a24      	ldr	r2, [pc, #144]	@ (800b738 <SHT40AD1B_0_Probe+0x194>)
 800b6a8:	3308      	adds	r3, #8
 800b6aa:	4925      	ldr	r1, [pc, #148]	@ (800b740 <SHT40AD1B_0_Probe+0x19c>)
 800b6ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800b6b0:	4b1e      	ldr	r3, [pc, #120]	@ (800b72c <SHT40AD1B_0_Probe+0x188>)
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a1c      	ldr	r2, [pc, #112]	@ (800b728 <SHT40AD1B_0_Probe+0x184>)
 800b6b8:	6892      	ldr	r2, [r2, #8]
 800b6ba:	4610      	mov	r0, r2
 800b6bc:	4798      	blx	r3
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d003      	beq.n	800b6cc <SHT40AD1B_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b6c4:	f06f 0304 	mvn.w	r3, #4
 800b6c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6ca:	e001      	b.n	800b6d0 <SHT40AD1B_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b6d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d107      	bne.n	800b6e6 <SHT40AD1B_0_Probe+0x142>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f003 0302 	and.w	r3, r3, #2
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d002      	beq.n	800b6e6 <SHT40AD1B_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b6e0:	f06f 0304 	mvn.w	r3, #4
 800b6e4:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b6e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d107      	bne.n	800b6fc <SHT40AD1B_0_Probe+0x158>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f003 0308 	and.w	r3, r3, #8
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d002      	beq.n	800b6fc <SHT40AD1B_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b6f6:	f06f 0304 	mvn.w	r3, #4
 800b6fa:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b6fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3748      	adds	r7, #72	@ 0x48
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	08002841 	.word	0x08002841
 800b70c:	080028a5 	.word	0x080028a5
 800b710:	08002a11 	.word	0x08002a11
 800b714:	080029bd 	.word	0x080029bd
 800b718:	08002a65 	.word	0x08002a65
 800b71c:	0800c6f5 	.word	0x0800c6f5
 800b720:	20014ed4 	.word	0x20014ed4
 800b724:	20014e58 	.word	0x20014e58
 800b728:	20014e10 	.word	0x20014e10
 800b72c:	20014e4c 	.word	0x20014e4c
 800b730:	20000154 	.word	0x20000154
 800b734:	200001b0 	.word	0x200001b0
 800b738:	20014e1c 	.word	0x20014e1c
 800b73c:	20000178 	.word	0x20000178
 800b740:	20000164 	.word	0x20000164

0800b744 <IKS4A1_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b08e      	sub	sp, #56	@ 0x38
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b74e:	2300      	movs	r3, #0
 800b750:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800b752:	2301      	movs	r3, #1
 800b754:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800b756:	2300      	movs	r3, #0
 800b758:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS4A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2b03      	cmp	r3, #3
 800b75e:	f200 80d4 	bhi.w	800b90a <IKS4A1_MOTION_SENSOR_Init+0x1c6>
 800b762:	a201      	add	r2, pc, #4	@ (adr r2, 800b768 <IKS4A1_MOTION_SENSOR_Init+0x24>)
 800b764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b768:	0800b779 	.word	0x0800b779
 800b76c:	0800b7df 	.word	0x0800b7df
 800b770:	0800b843 	.word	0x0800b843
 800b774:	0800b8a7 	.word	0x0800b8a7
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS4A1_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800b778:	6838      	ldr	r0, [r7, #0]
 800b77a:	f000 fa95 	bl	800bca8 <LIS2MDL_0_Probe>
 800b77e:	4603      	mov	r3, r0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d002      	beq.n	800b78a <IKS4A1_MOTION_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 800b784:	f04f 33ff 	mov.w	r3, #4294967295
 800b788:	e101      	b.n	800b98e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b78a:	4a83      	ldr	r2, [pc, #524]	@ (800b998 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	4981      	ldr	r1, [pc, #516]	@ (800b99c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b79c:	f107 010c 	add.w	r1, r7, #12
 800b7a0:	4610      	mov	r0, r2
 800b7a2:	4798      	blx	r3
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d002      	beq.n	800b7b0 <IKS4A1_MOTION_SENSOR_Init+0x6c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b7aa:	f06f 0306 	mvn.w	r3, #6
 800b7ae:	e0ee      	b.n	800b98e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b7b0:	7b3b      	ldrb	r3, [r7, #12]
 800b7b2:	2b01      	cmp	r3, #1
 800b7b4:	d103      	bne.n	800b7be <IKS4A1_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_ACCELERO;
 800b7b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7b8:	f043 0302 	orr.w	r3, r3, #2
 800b7bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b7be:	7b7b      	ldrb	r3, [r7, #13]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d103      	bne.n	800b7cc <IKS4A1_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_GYRO;
 800b7c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7c6:	f043 0301 	orr.w	r3, r3, #1
 800b7ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b7cc:	7bbb      	ldrb	r3, [r7, #14]
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	f040 809f 	bne.w	800b912 <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      {
        component_functions |= MOTION_MAGNETO;
 800b7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d6:	f043 0304 	orr.w	r3, r3, #4
 800b7da:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b7dc:	e099      	b.n	800b912 <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case IKS4A1_LSM6DSV16X_0:
      if (LSM6DSV16X_0_Probe(Functions) != BSP_ERROR_NONE)
 800b7de:	6838      	ldr	r0, [r7, #0]
 800b7e0:	f000 fb0a 	bl	800bdf8 <LSM6DSV16X_0_Probe>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d002      	beq.n	800b7f0 <IKS4A1_MOTION_SENSOR_Init+0xac>
      {
        return BSP_ERROR_NO_INIT;
 800b7ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ee:	e0ce      	b.n	800b98e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b7f0:	4a69      	ldr	r2, [pc, #420]	@ (800b998 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	4968      	ldr	r1, [pc, #416]	@ (800b99c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b802:	f107 010c 	add.w	r1, r7, #12
 800b806:	4610      	mov	r0, r2
 800b808:	4798      	blx	r3
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d002      	beq.n	800b816 <IKS4A1_MOTION_SENSOR_Init+0xd2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b810:	f06f 0306 	mvn.w	r3, #6
 800b814:	e0bb      	b.n	800b98e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b816:	7b3b      	ldrb	r3, [r7, #12]
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d103      	bne.n	800b824 <IKS4A1_MOTION_SENSOR_Init+0xe0>
      {
        component_functions |= MOTION_ACCELERO;
 800b81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b81e:	f043 0302 	orr.w	r3, r3, #2
 800b822:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b824:	7b7b      	ldrb	r3, [r7, #13]
 800b826:	2b01      	cmp	r3, #1
 800b828:	d103      	bne.n	800b832 <IKS4A1_MOTION_SENSOR_Init+0xee>
      {
        component_functions |= MOTION_GYRO;
 800b82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b82c:	f043 0301 	orr.w	r3, r3, #1
 800b830:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b832:	7bbb      	ldrb	r3, [r7, #14]
 800b834:	2b01      	cmp	r3, #1
 800b836:	d16e      	bne.n	800b916 <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      {
        component_functions |= MOTION_MAGNETO;
 800b838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b83a:	f043 0304 	orr.w	r3, r3, #4
 800b83e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b840:	e069      	b.n	800b916 <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2DUXS12_0 == 1)
    case IKS4A1_LIS2DUXS12_0:
      if (LIS2DUXS12_0_Probe(Functions) != BSP_ERROR_NONE)
 800b842:	6838      	ldr	r0, [r7, #0]
 800b844:	f000 fba4 	bl	800bf90 <LIS2DUXS12_0_Probe>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d002      	beq.n	800b854 <IKS4A1_MOTION_SENSOR_Init+0x110>
      {
        return BSP_ERROR_NO_INIT;
 800b84e:	f04f 33ff 	mov.w	r3, #4294967295
 800b852:	e09c      	b.n	800b98e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b854:	4a50      	ldr	r2, [pc, #320]	@ (800b998 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	494f      	ldr	r1, [pc, #316]	@ (800b99c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b866:	f107 010c 	add.w	r1, r7, #12
 800b86a:	4610      	mov	r0, r2
 800b86c:	4798      	blx	r3
 800b86e:	4603      	mov	r3, r0
 800b870:	2b00      	cmp	r3, #0
 800b872:	d002      	beq.n	800b87a <IKS4A1_MOTION_SENSOR_Init+0x136>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b874:	f06f 0306 	mvn.w	r3, #6
 800b878:	e089      	b.n	800b98e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b87a:	7b3b      	ldrb	r3, [r7, #12]
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d103      	bne.n	800b888 <IKS4A1_MOTION_SENSOR_Init+0x144>
      {
        component_functions |= MOTION_ACCELERO;
 800b880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b882:	f043 0302 	orr.w	r3, r3, #2
 800b886:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b888:	7b7b      	ldrb	r3, [r7, #13]
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d103      	bne.n	800b896 <IKS4A1_MOTION_SENSOR_Init+0x152>
      {
        component_functions |= MOTION_GYRO;
 800b88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b890:	f043 0301 	orr.w	r3, r3, #1
 800b894:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b896:	7bbb      	ldrb	r3, [r7, #14]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d13e      	bne.n	800b91a <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      {
        component_functions |= MOTION_MAGNETO;
 800b89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b89e:	f043 0304 	orr.w	r3, r3, #4
 800b8a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b8a4:	e039      	b.n	800b91a <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSO16IS_0 == 1)
    case IKS4A1_LSM6DSO16IS_0:
      if (LSM6DSO16IS_0_Probe(Functions) != BSP_ERROR_NONE)
 800b8a6:	6838      	ldr	r0, [r7, #0]
 800b8a8:	f000 fc28 	bl	800c0fc <LSM6DSO16IS_0_Probe>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d002      	beq.n	800b8b8 <IKS4A1_MOTION_SENSOR_Init+0x174>
      {
        return BSP_ERROR_NO_INIT;
 800b8b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b8b6:	e06a      	b.n	800b98e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b8b8:	4a37      	ldr	r2, [pc, #220]	@ (800b998 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	4936      	ldr	r1, [pc, #216]	@ (800b99c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b8ca:	f107 010c 	add.w	r1, r7, #12
 800b8ce:	4610      	mov	r0, r2
 800b8d0:	4798      	blx	r3
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d002      	beq.n	800b8de <IKS4A1_MOTION_SENSOR_Init+0x19a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b8d8:	f06f 0306 	mvn.w	r3, #6
 800b8dc:	e057      	b.n	800b98e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b8de:	7b3b      	ldrb	r3, [r7, #12]
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d103      	bne.n	800b8ec <IKS4A1_MOTION_SENSOR_Init+0x1a8>
      {
        component_functions |= MOTION_ACCELERO;
 800b8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8e6:	f043 0302 	orr.w	r3, r3, #2
 800b8ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b8ec:	7b7b      	ldrb	r3, [r7, #13]
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d103      	bne.n	800b8fa <IKS4A1_MOTION_SENSOR_Init+0x1b6>
      {
        component_functions |= MOTION_GYRO;
 800b8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f4:	f043 0301 	orr.w	r3, r3, #1
 800b8f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b8fa:	7bbb      	ldrb	r3, [r7, #14]
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d10e      	bne.n	800b91e <IKS4A1_MOTION_SENSOR_Init+0x1da>
      {
        component_functions |= MOTION_MAGNETO;
 800b900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b902:	f043 0304 	orr.w	r3, r3, #4
 800b906:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b908:	e009      	b.n	800b91e <IKS4A1_MOTION_SENSOR_Init+0x1da>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b90a:	f06f 0301 	mvn.w	r3, #1
 800b90e:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800b910:	e006      	b.n	800b920 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b912:	bf00      	nop
 800b914:	e004      	b.n	800b920 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b916:	bf00      	nop
 800b918:	e002      	b.n	800b920 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b91a:	bf00      	nop
 800b91c:	e000      	b.n	800b920 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b91e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b922:	2b00      	cmp	r3, #0
 800b924:	d001      	beq.n	800b92a <IKS4A1_MOTION_SENSOR_Init+0x1e6>
  {
    return ret;
 800b926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b928:	e031      	b.n	800b98e <IKS4A1_MOTION_SENSOR_Init+0x24a>
  }

  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800b92a:	2300      	movs	r3, #0
 800b92c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b92e:	e02a      	b.n	800b986 <IKS4A1_MOTION_SENSOR_Init+0x242>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b930:	683a      	ldr	r2, [r7, #0]
 800b932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b934:	4013      	ands	r3, r2
 800b936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b938:	429a      	cmp	r2, r3
 800b93a:	d11e      	bne.n	800b97a <IKS4A1_MOTION_SENSOR_Init+0x236>
 800b93c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b940:	4013      	ands	r3, r2
 800b942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b944:	429a      	cmp	r2, r3
 800b946:	d118      	bne.n	800b97a <IKS4A1_MOTION_SENSOR_Init+0x236>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b948:	4a15      	ldr	r2, [pc, #84]	@ (800b9a0 <IKS4A1_MOTION_SENSOR_Init+0x25c>)
 800b94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b94c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b950:	4814      	ldr	r0, [pc, #80]	@ (800b9a4 <IKS4A1_MOTION_SENSOR_Init+0x260>)
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	4613      	mov	r3, r2
 800b956:	005b      	lsls	r3, r3, #1
 800b958:	4413      	add	r3, r2
 800b95a:	440b      	add	r3, r1
 800b95c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	490e      	ldr	r1, [pc, #56]	@ (800b99c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b96a:	4610      	mov	r0, r2
 800b96c:	4798      	blx	r3
 800b96e:	4603      	mov	r3, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	d002      	beq.n	800b97a <IKS4A1_MOTION_SENSOR_Init+0x236>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b974:	f06f 0304 	mvn.w	r3, #4
 800b978:	e009      	b.n	800b98e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
    }
    function = function << 1;
 800b97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b97c:	005b      	lsls	r3, r3, #1
 800b97e:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800b980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b982:	3301      	adds	r3, #1
 800b984:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d9d1      	bls.n	800b930 <IKS4A1_MOTION_SENSOR_Init+0x1ec>
  }

  return ret;
 800b98c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3738      	adds	r7, #56	@ 0x38
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	20014f58 	.word	0x20014f58
 800b99c:	20014f18 	.word	0x20014f18
 800b9a0:	200001f0 	.word	0x200001f0
 800b9a4:	20014f28 	.word	0x20014f28

0800b9a8 <IKS4A1_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance
  * @param  Capabilities pointer to motion sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	d903      	bls.n	800b9c0 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b9b8:	f06f 0301 	mvn.w	r3, #1
 800b9bc:	60fb      	str	r3, [r7, #12]
 800b9be:	e014      	b.n	800b9ea <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800b9c0:	4a0c      	ldr	r2, [pc, #48]	@ (800b9f4 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x4c>)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	490b      	ldr	r1, [pc, #44]	@ (800b9f8 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x50>)
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	4610      	mov	r0, r2
 800b9d6:	4798      	blx	r3
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d003      	beq.n	800b9e6 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b9de:	f06f 0306 	mvn.w	r3, #6
 800b9e2:	60fb      	str	r3, [r7, #12]
 800b9e4:	e001      	b.n	800b9ea <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	20014f58 	.word	0x20014f58
 800b9f8:	20014f18 	.word	0x20014f18

0800b9fc <IKS4A1_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS4A1_MOTION_SENSOR_Axes_t *Axes)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b086      	sub	sp, #24
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2b03      	cmp	r3, #3
 800ba0c:	d903      	bls.n	800ba16 <IKS4A1_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ba0e:	f06f 0301 	mvn.w	r3, #1
 800ba12:	617b      	str	r3, [r7, #20]
 800ba14:	e029      	b.n	800ba6a <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800ba16:	4a17      	ldr	r2, [pc, #92]	@ (800ba74 <IKS4A1_MOTION_SENSOR_GetAxes+0x78>)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	4013      	ands	r3, r2
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d11d      	bne.n	800ba64 <IKS4A1_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800ba28:	4a13      	ldr	r2, [pc, #76]	@ (800ba78 <IKS4A1_MOTION_SENSOR_GetAxes+0x7c>)
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ba30:	4812      	ldr	r0, [pc, #72]	@ (800ba7c <IKS4A1_MOTION_SENSOR_GetAxes+0x80>)
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	4613      	mov	r3, r2
 800ba36:	005b      	lsls	r3, r3, #1
 800ba38:	4413      	add	r3, r2
 800ba3a:	440b      	add	r3, r1
 800ba3c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800ba40:	69db      	ldr	r3, [r3, #28]
 800ba42:	490f      	ldr	r1, [pc, #60]	@ (800ba80 <IKS4A1_MOTION_SENSOR_GetAxes+0x84>)
 800ba44:	68fa      	ldr	r2, [r7, #12]
 800ba46:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ba4a:	6879      	ldr	r1, [r7, #4]
 800ba4c:	4610      	mov	r0, r2
 800ba4e:	4798      	blx	r3
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d003      	beq.n	800ba5e <IKS4A1_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba56:	f06f 0304 	mvn.w	r3, #4
 800ba5a:	617b      	str	r3, [r7, #20]
 800ba5c:	e005      	b.n	800ba6a <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	617b      	str	r3, [r7, #20]
 800ba62:	e002      	b.n	800ba6a <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800ba64:	f06f 0301 	mvn.w	r3, #1
 800ba68:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800ba6a:	697b      	ldr	r3, [r7, #20]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	20014f68 	.word	0x20014f68
 800ba78:	200001f0 	.word	0x200001f0
 800ba7c:	20014f28 	.word	0x20014f28
 800ba80:	20014f18 	.word	0x20014f18

0800ba84 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b086      	sub	sp, #24
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60f8      	str	r0, [r7, #12]
 800ba8c:	60b9      	str	r1, [r7, #8]
 800ba8e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	2b03      	cmp	r3, #3
 800ba94:	d903      	bls.n	800ba9e <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ba96:	f06f 0301 	mvn.w	r3, #1
 800ba9a:	617b      	str	r3, [r7, #20]
 800ba9c:	e029      	b.n	800baf2 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800ba9e:	4a17      	ldr	r2, [pc, #92]	@ (800bafc <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x78>)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	4013      	ands	r3, r2
 800baaa:	68ba      	ldr	r2, [r7, #8]
 800baac:	429a      	cmp	r2, r3
 800baae:	d11d      	bne.n	800baec <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800bab0:	4a13      	ldr	r2, [pc, #76]	@ (800bb00 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bab8:	4812      	ldr	r0, [pc, #72]	@ (800bb04 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x80>)
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	4613      	mov	r3, r2
 800babe:	005b      	lsls	r3, r3, #1
 800bac0:	4413      	add	r3, r2
 800bac2:	440b      	add	r3, r1
 800bac4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	490f      	ldr	r1, [pc, #60]	@ (800bb08 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x84>)
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bad2:	6879      	ldr	r1, [r7, #4]
 800bad4:	4610      	mov	r0, r2
 800bad6:	4798      	blx	r3
 800bad8:	4603      	mov	r3, r0
 800bada:	2b00      	cmp	r3, #0
 800badc:	d003      	beq.n	800bae6 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bade:	f06f 0304 	mvn.w	r3, #4
 800bae2:	617b      	str	r3, [r7, #20]
 800bae4:	e005      	b.n	800baf2 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bae6:	2300      	movs	r3, #0
 800bae8:	617b      	str	r3, [r7, #20]
 800baea:	e002      	b.n	800baf2 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800baec:	f06f 0301 	mvn.w	r3, #1
 800baf0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800baf2:	697b      	ldr	r3, [r7, #20]
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3718      	adds	r7, #24
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	20014f68 	.word	0x20014f68
 800bb00:	200001f0 	.word	0x200001f0
 800bb04:	20014f28 	.word	0x20014f28
 800bb08:	20014f18 	.word	0x20014f18

0800bb0c <IKS4A1_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale pointer to Fullscale read value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b086      	sub	sp, #24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2b03      	cmp	r3, #3
 800bb1c:	d903      	bls.n	800bb26 <IKS4A1_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bb1e:	f06f 0301 	mvn.w	r3, #1
 800bb22:	617b      	str	r3, [r7, #20]
 800bb24:	e029      	b.n	800bb7a <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800bb26:	4a17      	ldr	r2, [pc, #92]	@ (800bb84 <IKS4A1_MOTION_SENSOR_GetFullScale+0x78>)
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	4013      	ands	r3, r2
 800bb32:	68ba      	ldr	r2, [r7, #8]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d11d      	bne.n	800bb74 <IKS4A1_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 800bb38:	4a13      	ldr	r2, [pc, #76]	@ (800bb88 <IKS4A1_MOTION_SENSOR_GetFullScale+0x7c>)
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bb40:	4812      	ldr	r0, [pc, #72]	@ (800bb8c <IKS4A1_MOTION_SENSOR_GetFullScale+0x80>)
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	4613      	mov	r3, r2
 800bb46:	005b      	lsls	r3, r3, #1
 800bb48:	4413      	add	r3, r2
 800bb4a:	440b      	add	r3, r1
 800bb4c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800bb50:	695b      	ldr	r3, [r3, #20]
 800bb52:	490f      	ldr	r1, [pc, #60]	@ (800bb90 <IKS4A1_MOTION_SENSOR_GetFullScale+0x84>)
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bb5a:	6879      	ldr	r1, [r7, #4]
 800bb5c:	4610      	mov	r0, r2
 800bb5e:	4798      	blx	r3
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d003      	beq.n	800bb6e <IKS4A1_MOTION_SENSOR_GetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb66:	f06f 0304 	mvn.w	r3, #4
 800bb6a:	617b      	str	r3, [r7, #20]
 800bb6c:	e005      	b.n	800bb7a <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	617b      	str	r3, [r7, #20]
 800bb72:	e002      	b.n	800bb7a <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800bb74:	f06f 0301 	mvn.w	r3, #1
 800bb78:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800bb7a:	697b      	ldr	r3, [r7, #20]
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3718      	adds	r7, #24
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	20014f68 	.word	0x20014f68
 800bb88:	200001f0 	.word	0x200001f0
 800bb8c:	20014f28 	.word	0x20014f28
 800bb90:	20014f18 	.word	0x20014f18

0800bb94 <IKS4A1_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b086      	sub	sp, #24
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2b03      	cmp	r3, #3
 800bba6:	d903      	bls.n	800bbb0 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bba8:	f06f 0301 	mvn.w	r3, #1
 800bbac:	617b      	str	r3, [r7, #20]
 800bbae:	e02a      	b.n	800bc06 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800bbb0:	4a17      	ldr	r2, [pc, #92]	@ (800bc10 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	4013      	ands	r3, r2
 800bbbc:	68ba      	ldr	r2, [r7, #8]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d11e      	bne.n	800bc00 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800bbc2:	4a14      	ldr	r2, [pc, #80]	@ (800bc14 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x80>)
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bbca:	4813      	ldr	r0, [pc, #76]	@ (800bc18 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x84>)
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	4613      	mov	r3, r2
 800bbd0:	005b      	lsls	r3, r3, #1
 800bbd2:	4413      	add	r3, r2
 800bbd4:	440b      	add	r3, r1
 800bbd6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	490f      	ldr	r1, [pc, #60]	@ (800bc1c <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x88>)
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bbe4:	ed97 0a01 	vldr	s0, [r7, #4]
 800bbe8:	4610      	mov	r0, r2
 800bbea:	4798      	blx	r3
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d003      	beq.n	800bbfa <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bbf2:	f06f 0304 	mvn.w	r3, #4
 800bbf6:	617b      	str	r3, [r7, #20]
 800bbf8:	e005      	b.n	800bc06 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	617b      	str	r3, [r7, #20]
 800bbfe:	e002      	b.n	800bc06 <IKS4A1_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800bc00:	f06f 0301 	mvn.w	r3, #1
 800bc04:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800bc06:	697b      	ldr	r3, [r7, #20]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3718      	adds	r7, #24
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	20014f68 	.word	0x20014f68
 800bc14:	200001f0 	.word	0x200001f0
 800bc18:	20014f28 	.word	0x20014f28
 800bc1c:	20014f18 	.word	0x20014f18

0800bc20 <IKS4A1_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b086      	sub	sp, #24
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2b03      	cmp	r3, #3
 800bc30:	d903      	bls.n	800bc3a <IKS4A1_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bc32:	f06f 0301 	mvn.w	r3, #1
 800bc36:	617b      	str	r3, [r7, #20]
 800bc38:	e029      	b.n	800bc8e <IKS4A1_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800bc3a:	4a17      	ldr	r2, [pc, #92]	@ (800bc98 <IKS4A1_MOTION_SENSOR_SetFullScale+0x78>)
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	4013      	ands	r3, r2
 800bc46:	68ba      	ldr	r2, [r7, #8]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d11d      	bne.n	800bc88 <IKS4A1_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 800bc4c:	4a13      	ldr	r2, [pc, #76]	@ (800bc9c <IKS4A1_MOTION_SENSOR_SetFullScale+0x7c>)
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bc54:	4812      	ldr	r0, [pc, #72]	@ (800bca0 <IKS4A1_MOTION_SENSOR_SetFullScale+0x80>)
 800bc56:	68fa      	ldr	r2, [r7, #12]
 800bc58:	4613      	mov	r3, r2
 800bc5a:	005b      	lsls	r3, r3, #1
 800bc5c:	4413      	add	r3, r2
 800bc5e:	440b      	add	r3, r1
 800bc60:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800bc64:	699b      	ldr	r3, [r3, #24]
 800bc66:	490f      	ldr	r1, [pc, #60]	@ (800bca4 <IKS4A1_MOTION_SENSOR_SetFullScale+0x84>)
 800bc68:	68fa      	ldr	r2, [r7, #12]
 800bc6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800bc6e:	6879      	ldr	r1, [r7, #4]
 800bc70:	4610      	mov	r0, r2
 800bc72:	4798      	blx	r3
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d003      	beq.n	800bc82 <IKS4A1_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc7a:	f06f 0304 	mvn.w	r3, #4
 800bc7e:	617b      	str	r3, [r7, #20]
 800bc80:	e005      	b.n	800bc8e <IKS4A1_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bc82:	2300      	movs	r3, #0
 800bc84:	617b      	str	r3, [r7, #20]
 800bc86:	e002      	b.n	800bc8e <IKS4A1_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800bc88:	f06f 0301 	mvn.w	r3, #1
 800bc8c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800bc8e:	697b      	ldr	r3, [r7, #20]
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3718      	adds	r7, #24
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	20014f68 	.word	0x20014f68
 800bc9c:	200001f0 	.word	0x200001f0
 800bca0:	20014f28 	.word	0x20014f28
 800bca4:	20014f18 	.word	0x20014f18

0800bca8 <LIS2MDL_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b094      	sub	sp, #80	@ 0x50
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800bcb8:	233d      	movs	r3, #61	@ 0x3d
 800bcba:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800bcbe:	4b40      	ldr	r3, [pc, #256]	@ (800bdc0 <LIS2MDL_0_Probe+0x118>)
 800bcc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800bcc2:	4b40      	ldr	r3, [pc, #256]	@ (800bdc4 <LIS2MDL_0_Probe+0x11c>)
 800bcc4:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800bcc6:	4b40      	ldr	r3, [pc, #256]	@ (800bdc8 <LIS2MDL_0_Probe+0x120>)
 800bcc8:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800bcca:	4b40      	ldr	r3, [pc, #256]	@ (800bdcc <LIS2MDL_0_Probe+0x124>)
 800bccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800bcce:	4b40      	ldr	r3, [pc, #256]	@ (800bdd0 <LIS2MDL_0_Probe+0x128>)
 800bcd0:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800bcd2:	4b40      	ldr	r3, [pc, #256]	@ (800bdd4 <LIS2MDL_0_Probe+0x12c>)
 800bcd4:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800bcd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bcda:	4619      	mov	r1, r3
 800bcdc:	483e      	ldr	r0, [pc, #248]	@ (800bdd8 <LIS2MDL_0_Probe+0x130>)
 800bcde:	f7f8 fd09 	bl	80046f4 <LIS2MDL_RegisterBusIO>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d003      	beq.n	800bcf0 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bce8:	f06f 0306 	mvn.w	r3, #6
 800bcec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bcee:	e061      	b.n	800bdb4 <LIS2MDL_0_Probe+0x10c>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800bcf0:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	4838      	ldr	r0, [pc, #224]	@ (800bdd8 <LIS2MDL_0_Probe+0x130>)
 800bcf8:	f7f8 fe18 	bl	800492c <LIS2MDL_ReadID>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d003      	beq.n	800bd0a <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bd02:	f06f 0306 	mvn.w	r3, #6
 800bd06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd08:	e054      	b.n	800bdb4 <LIS2MDL_0_Probe+0x10c>
  }
  else if (id != LIS2MDL_ID)
 800bd0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd0e:	2b40      	cmp	r3, #64	@ 0x40
 800bd10:	d003      	beq.n	800bd1a <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bd12:	f06f 0306 	mvn.w	r3, #6
 800bd16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd18:	e04c      	b.n	800bdb4 <LIS2MDL_0_Probe+0x10c>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800bd1a:	f107 030c 	add.w	r3, r7, #12
 800bd1e:	4619      	mov	r1, r3
 800bd20:	482d      	ldr	r0, [pc, #180]	@ (800bdd8 <LIS2MDL_0_Probe+0x130>)
 800bd22:	f7f8 fe29 	bl	8004978 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS4A1_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bd26:	7b7b      	ldrb	r3, [r7, #13]
 800bd28:	461a      	mov	r2, r3
 800bd2a:	7b3b      	ldrb	r3, [r7, #12]
 800bd2c:	005b      	lsls	r3, r3, #1
 800bd2e:	431a      	orrs	r2, r3
 800bd30:	7bbb      	ldrb	r3, [r7, #14]
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	4313      	orrs	r3, r2
 800bd36:	4a29      	ldr	r2, [pc, #164]	@ (800bddc <LIS2MDL_0_Probe+0x134>)
 800bd38:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS4A1_LIS2MDL_0] = &lis2mdl_obj_0;
 800bd3a:	4b29      	ldr	r3, [pc, #164]	@ (800bde0 <LIS2MDL_0_Probe+0x138>)
 800bd3c:	4a26      	ldr	r2, [pc, #152]	@ (800bdd8 <LIS2MDL_0_Probe+0x130>)
 800bd3e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800bd40:	4b28      	ldr	r3, [pc, #160]	@ (800bde4 <LIS2MDL_0_Probe+0x13c>)
 800bd42:	4a29      	ldr	r2, [pc, #164]	@ (800bde8 <LIS2MDL_0_Probe+0x140>)
 800bd44:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800bd46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d11d      	bne.n	800bd88 <LIS2MDL_0_Probe+0xe0>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f003 0304 	and.w	r3, r3, #4
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d018      	beq.n	800bd88 <LIS2MDL_0_Probe+0xe0>
 800bd56:	7bbb      	ldrb	r3, [r7, #14]
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d115      	bne.n	800bd88 <LIS2MDL_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bd5c:	4b23      	ldr	r3, [pc, #140]	@ (800bdec <LIS2MDL_0_Probe+0x144>)
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	4a23      	ldr	r2, [pc, #140]	@ (800bdf0 <LIS2MDL_0_Probe+0x148>)
 800bd62:	4924      	ldr	r1, [pc, #144]	@ (800bdf4 <LIS2MDL_0_Probe+0x14c>)
 800bd64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS4A1_LIS2MDL_0]->Init(MotionCompObj[IKS4A1_LIS2MDL_0]) != LIS2MDL_OK)
 800bd68:	4b1e      	ldr	r3, [pc, #120]	@ (800bde4 <LIS2MDL_0_Probe+0x13c>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4a1c      	ldr	r2, [pc, #112]	@ (800bde0 <LIS2MDL_0_Probe+0x138>)
 800bd70:	6812      	ldr	r2, [r2, #0]
 800bd72:	4610      	mov	r0, r2
 800bd74:	4798      	blx	r3
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d003      	beq.n	800bd84 <LIS2MDL_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bd7c:	f06f 0304 	mvn.w	r3, #4
 800bd80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd82:	e001      	b.n	800bd88 <LIS2MDL_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bd84:	2300      	movs	r3, #0
 800bd86:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800bd88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d107      	bne.n	800bd9e <LIS2MDL_0_Probe+0xf6>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f003 0302 	and.w	r3, r3, #2
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d002      	beq.n	800bd9e <LIS2MDL_0_Probe+0xf6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bd98:	f06f 0304 	mvn.w	r3, #4
 800bd9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800bd9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d107      	bne.n	800bdb4 <LIS2MDL_0_Probe+0x10c>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f003 0301 	and.w	r3, r3, #1
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d002      	beq.n	800bdb4 <LIS2MDL_0_Probe+0x10c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bdae:	f06f 0304 	mvn.w	r3, #4
 800bdb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800bdb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3750      	adds	r7, #80	@ 0x50
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	08002841 	.word	0x08002841
 800bdc4:	080028a5 	.word	0x080028a5
 800bdc8:	08002959 	.word	0x08002959
 800bdcc:	080028f5 	.word	0x080028f5
 800bdd0:	08002a65 	.word	0x08002a65
 800bdd4:	0800c6f5 	.word	0x0800c6f5
 800bdd8:	20014f78 	.word	0x20014f78
 800bddc:	20014f68 	.word	0x20014f68
 800bde0:	20014f18 	.word	0x20014f18
 800bde4:	20014f58 	.word	0x20014f58
 800bde8:	20000038 	.word	0x20000038
 800bdec:	200001f0 	.word	0x200001f0
 800bdf0:	20014f28 	.word	0x20014f28
 800bdf4:	20000048 	.word	0x20000048

0800bdf8 <LSM6DSV16X_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSV16X_0_Probe(uint32_t Functions)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b094      	sub	sp, #80	@ 0x50
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  LSM6DSV16X_IO_t            io_ctx;
  uint8_t                    id;
  static LSM6DSV16X_Object_t lsm6dsv16x_obj_0;
  LSM6DSV16X_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800be00:	2300      	movs	r3, #0
 800be02:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSV16X_I2C_BUS; /* I2C */
 800be04:	2300      	movs	r3, #0
 800be06:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSV16X_I2C_ADD_H;
 800be08:	23d7      	movs	r3, #215	@ 0xd7
 800be0a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800be0e:	4b51      	ldr	r3, [pc, #324]	@ (800bf54 <LSM6DSV16X_0_Probe+0x15c>)
 800be10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800be12:	4b51      	ldr	r3, [pc, #324]	@ (800bf58 <LSM6DSV16X_0_Probe+0x160>)
 800be14:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800be16:	4b51      	ldr	r3, [pc, #324]	@ (800bf5c <LSM6DSV16X_0_Probe+0x164>)
 800be18:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800be1a:	4b51      	ldr	r3, [pc, #324]	@ (800bf60 <LSM6DSV16X_0_Probe+0x168>)
 800be1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800be1e:	4b51      	ldr	r3, [pc, #324]	@ (800bf64 <LSM6DSV16X_0_Probe+0x16c>)
 800be20:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800be22:	4b51      	ldr	r3, [pc, #324]	@ (800bf68 <LSM6DSV16X_0_Probe+0x170>)
 800be24:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSV16X_RegisterBusIO(&lsm6dsv16x_obj_0, &io_ctx) != LSM6DSV16X_OK)
 800be26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800be2a:	4619      	mov	r1, r3
 800be2c:	484f      	ldr	r0, [pc, #316]	@ (800bf6c <LSM6DSV16X_0_Probe+0x174>)
 800be2e:	f7fc f9d1 	bl	80081d4 <LSM6DSV16X_RegisterBusIO>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d003      	beq.n	800be40 <LSM6DSV16X_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800be38:	f06f 0306 	mvn.w	r3, #6
 800be3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be3e:	e084      	b.n	800bf4a <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_Set_Mem_Bank(&lsm6dsv16x_obj_0, LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 800be40:	2100      	movs	r1, #0
 800be42:	484a      	ldr	r0, [pc, #296]	@ (800bf6c <LSM6DSV16X_0_Probe+0x174>)
 800be44:	f7fd f953 	bl	80090ee <LSM6DSV16X_Set_Mem_Bank>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d003      	beq.n	800be56 <LSM6DSV16X_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800be4e:	f06f 0306 	mvn.w	r3, #6
 800be52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be54:	e079      	b.n	800bf4a <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_ReadID(&lsm6dsv16x_obj_0, &id) != LSM6DSV16X_OK)
 800be56:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800be5a:	4619      	mov	r1, r3
 800be5c:	4843      	ldr	r0, [pc, #268]	@ (800bf6c <LSM6DSV16X_0_Probe+0x174>)
 800be5e:	f7fc fae9 	bl	8008434 <LSM6DSV16X_ReadID>
 800be62:	4603      	mov	r3, r0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d003      	beq.n	800be70 <LSM6DSV16X_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800be68:	f06f 0306 	mvn.w	r3, #6
 800be6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be6e:	e06c      	b.n	800bf4a <LSM6DSV16X_0_Probe+0x152>
  }
  else if (id != LSM6DSV16X_ID)
 800be70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800be74:	2b70      	cmp	r3, #112	@ 0x70
 800be76:	d003      	beq.n	800be80 <LSM6DSV16X_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800be78:	f06f 0306 	mvn.w	r3, #6
 800be7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be7e:	e064      	b.n	800bf4a <LSM6DSV16X_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSV16X_GetCapabilities(&lsm6dsv16x_obj_0, &cap);
 800be80:	f107 030c 	add.w	r3, r7, #12
 800be84:	4619      	mov	r1, r3
 800be86:	4839      	ldr	r0, [pc, #228]	@ (800bf6c <LSM6DSV16X_0_Probe+0x174>)
 800be88:	f7fc faea 	bl	8008460 <LSM6DSV16X_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSV16X_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800be8c:	7b7b      	ldrb	r3, [r7, #13]
 800be8e:	461a      	mov	r2, r3
 800be90:	7b3b      	ldrb	r3, [r7, #12]
 800be92:	005b      	lsls	r3, r3, #1
 800be94:	431a      	orrs	r2, r3
 800be96:	7bbb      	ldrb	r3, [r7, #14]
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	4313      	orrs	r3, r2
 800be9c:	4a34      	ldr	r2, [pc, #208]	@ (800bf70 <LSM6DSV16X_0_Probe+0x178>)
 800be9e:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS4A1_LSM6DSV16X_0] = &lsm6dsv16x_obj_0;
 800bea0:	4b34      	ldr	r3, [pc, #208]	@ (800bf74 <LSM6DSV16X_0_Probe+0x17c>)
 800bea2:	4a32      	ldr	r2, [pc, #200]	@ (800bf6c <LSM6DSV16X_0_Probe+0x174>)
 800bea4:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSV16X_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSV16X_COMMON_Driver;
 800bea6:	4b34      	ldr	r3, [pc, #208]	@ (800bf78 <LSM6DSV16X_0_Probe+0x180>)
 800bea8:	4a34      	ldr	r2, [pc, #208]	@ (800bf7c <LSM6DSV16X_0_Probe+0x184>)
 800beaa:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800beac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d11e      	bne.n	800bef0 <LSM6DSV16X_0_Probe+0xf8>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f003 0301 	and.w	r3, r3, #1
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d019      	beq.n	800bef0 <LSM6DSV16X_0_Probe+0xf8>
 800bebc:	7b7b      	ldrb	r3, [r7, #13]
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d116      	bne.n	800bef0 <LSM6DSV16X_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bec2:	4b2f      	ldr	r3, [pc, #188]	@ (800bf80 <LSM6DSV16X_0_Probe+0x188>)
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	4a2f      	ldr	r2, [pc, #188]	@ (800bf84 <LSM6DSV16X_0_Probe+0x18c>)
 800bec8:	3303      	adds	r3, #3
 800beca:	492f      	ldr	r1, [pc, #188]	@ (800bf88 <LSM6DSV16X_0_Probe+0x190>)
 800becc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LSM6DSV16X_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800bed0:	4b29      	ldr	r3, [pc, #164]	@ (800bf78 <LSM6DSV16X_0_Probe+0x180>)
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	4a27      	ldr	r2, [pc, #156]	@ (800bf74 <LSM6DSV16X_0_Probe+0x17c>)
 800bed8:	6852      	ldr	r2, [r2, #4]
 800beda:	4610      	mov	r0, r2
 800bedc:	4798      	blx	r3
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d003      	beq.n	800beec <LSM6DSV16X_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bee4:	f06f 0304 	mvn.w	r3, #4
 800bee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800beea:	e001      	b.n	800bef0 <LSM6DSV16X_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800beec:	2300      	movs	r3, #0
 800beee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800bef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d11e      	bne.n	800bf34 <LSM6DSV16X_0_Probe+0x13c>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f003 0302 	and.w	r3, r3, #2
 800befc:	2b00      	cmp	r3, #0
 800befe:	d019      	beq.n	800bf34 <LSM6DSV16X_0_Probe+0x13c>
 800bf00:	7b3b      	ldrb	r3, [r7, #12]
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d116      	bne.n	800bf34 <LSM6DSV16X_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bf06:	4b1e      	ldr	r3, [pc, #120]	@ (800bf80 <LSM6DSV16X_0_Probe+0x188>)
 800bf08:	689b      	ldr	r3, [r3, #8]
 800bf0a:	4a1e      	ldr	r2, [pc, #120]	@ (800bf84 <LSM6DSV16X_0_Probe+0x18c>)
 800bf0c:	3303      	adds	r3, #3
 800bf0e:	491f      	ldr	r1, [pc, #124]	@ (800bf8c <LSM6DSV16X_0_Probe+0x194>)
 800bf10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LSM6DSV16X_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800bf14:	4b18      	ldr	r3, [pc, #96]	@ (800bf78 <LSM6DSV16X_0_Probe+0x180>)
 800bf16:	685b      	ldr	r3, [r3, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a16      	ldr	r2, [pc, #88]	@ (800bf74 <LSM6DSV16X_0_Probe+0x17c>)
 800bf1c:	6852      	ldr	r2, [r2, #4]
 800bf1e:	4610      	mov	r0, r2
 800bf20:	4798      	blx	r3
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d003      	beq.n	800bf30 <LSM6DSV16X_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf28:	f06f 0304 	mvn.w	r3, #4
 800bf2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf2e:	e001      	b.n	800bf34 <LSM6DSV16X_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bf30:	2300      	movs	r3, #0
 800bf32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800bf34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d107      	bne.n	800bf4a <LSM6DSV16X_0_Probe+0x152>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f003 0304 	and.w	r3, r3, #4
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d002      	beq.n	800bf4a <LSM6DSV16X_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf44:	f06f 0304 	mvn.w	r3, #4
 800bf48:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800bf4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3750      	adds	r7, #80	@ 0x50
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	08002841 	.word	0x08002841
 800bf58:	080028a5 	.word	0x080028a5
 800bf5c:	08002959 	.word	0x08002959
 800bf60:	080028f5 	.word	0x080028f5
 800bf64:	08002a65 	.word	0x08002a65
 800bf68:	0800c6f5 	.word	0x0800c6f5
 800bf6c:	20014fac 	.word	0x20014fac
 800bf70:	20014f68 	.word	0x20014f68
 800bf74:	20014f18 	.word	0x20014f18
 800bf78:	20014f58 	.word	0x20014f58
 800bf7c:	200000fc 	.word	0x200000fc
 800bf80:	200001f0 	.word	0x200001f0
 800bf84:	20014f28 	.word	0x20014f28
 800bf88:	20000130 	.word	0x20000130
 800bf8c:	2000010c 	.word	0x2000010c

0800bf90 <LIS2DUXS12_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LIS2DUXS12_0_Probe(uint32_t Functions)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b094      	sub	sp, #80	@ 0x50
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  LIS2DUXS12_IO_t            io_ctx;
  uint8_t                    id;
  static LIS2DUXS12_Object_t lis2duxs12_obj_0;
  LIS2DUXS12_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2DUXS12_I2C_BUS; /* I2C */
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DUXS12_I2C_ADD_H;
 800bfa0:	2333      	movs	r3, #51	@ 0x33
 800bfa2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800bfa6:	4b47      	ldr	r3, [pc, #284]	@ (800c0c4 <LIS2DUXS12_0_Probe+0x134>)
 800bfa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800bfaa:	4b47      	ldr	r3, [pc, #284]	@ (800c0c8 <LIS2DUXS12_0_Probe+0x138>)
 800bfac:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800bfae:	4b47      	ldr	r3, [pc, #284]	@ (800c0cc <LIS2DUXS12_0_Probe+0x13c>)
 800bfb0:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800bfb2:	4b47      	ldr	r3, [pc, #284]	@ (800c0d0 <LIS2DUXS12_0_Probe+0x140>)
 800bfb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800bfb6:	4b47      	ldr	r3, [pc, #284]	@ (800c0d4 <LIS2DUXS12_0_Probe+0x144>)
 800bfb8:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800bfba:	4b47      	ldr	r3, [pc, #284]	@ (800c0d8 <LIS2DUXS12_0_Probe+0x148>)
 800bfbc:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DUXS12_RegisterBusIO(&lis2duxs12_obj_0, &io_ctx) != LIS2DUXS12_OK)
 800bfbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	4845      	ldr	r0, [pc, #276]	@ (800c0dc <LIS2DUXS12_0_Probe+0x14c>)
 800bfc6:	f7f6 feb3 	bl	8002d30 <LIS2DUXS12_RegisterBusIO>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d003      	beq.n	800bfd8 <LIS2DUXS12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bfd0:	f06f 0306 	mvn.w	r3, #6
 800bfd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfd6:	e070      	b.n	800c0ba <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_Set_Mem_Bank(&lis2duxs12_obj_0, LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 800bfd8:	2100      	movs	r1, #0
 800bfda:	4840      	ldr	r0, [pc, #256]	@ (800c0dc <LIS2DUXS12_0_Probe+0x14c>)
 800bfdc:	f7f7 fb20 	bl	8003620 <LIS2DUXS12_Set_Mem_Bank>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d003      	beq.n	800bfee <LIS2DUXS12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bfe6:	f06f 0306 	mvn.w	r3, #6
 800bfea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfec:	e065      	b.n	800c0ba <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_ReadID(&lis2duxs12_obj_0, &id) != LIS2DUXS12_OK)
 800bfee:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800bff2:	4619      	mov	r1, r3
 800bff4:	4839      	ldr	r0, [pc, #228]	@ (800c0dc <LIS2DUXS12_0_Probe+0x14c>)
 800bff6:	f7f6 fffa 	bl	8002fee <LIS2DUXS12_ReadID>
 800bffa:	4603      	mov	r3, r0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d003      	beq.n	800c008 <LIS2DUXS12_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c000:	f06f 0306 	mvn.w	r3, #6
 800c004:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c006:	e058      	b.n	800c0ba <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (id != LIS2DUXS12_ID)
 800c008:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c00c:	2b47      	cmp	r3, #71	@ 0x47
 800c00e:	d003      	beq.n	800c018 <LIS2DUXS12_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c010:	f06f 0306 	mvn.w	r3, #6
 800c014:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c016:	e050      	b.n	800c0ba <LIS2DUXS12_0_Probe+0x12a>
  }
  else
  {
    (void)LIS2DUXS12_GetCapabilities(&lis2duxs12_obj_0, &cap);
 800c018:	f107 030c 	add.w	r3, r7, #12
 800c01c:	4619      	mov	r1, r3
 800c01e:	482f      	ldr	r0, [pc, #188]	@ (800c0dc <LIS2DUXS12_0_Probe+0x14c>)
 800c020:	f7f7 f800 	bl	8003024 <LIS2DUXS12_GetCapabilities>
    MotionCtx[IKS4A1_LIS2DUXS12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800c024:	7b7b      	ldrb	r3, [r7, #13]
 800c026:	461a      	mov	r2, r3
 800c028:	7b3b      	ldrb	r3, [r7, #12]
 800c02a:	005b      	lsls	r3, r3, #1
 800c02c:	431a      	orrs	r2, r3
 800c02e:	7bbb      	ldrb	r3, [r7, #14]
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4313      	orrs	r3, r2
 800c034:	4a2a      	ldr	r2, [pc, #168]	@ (800c0e0 <LIS2DUXS12_0_Probe+0x150>)
 800c036:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS4A1_LIS2DUXS12_0] = &lis2duxs12_obj_0;
 800c038:	4b2a      	ldr	r3, [pc, #168]	@ (800c0e4 <LIS2DUXS12_0_Probe+0x154>)
 800c03a:	4a28      	ldr	r2, [pc, #160]	@ (800c0dc <LIS2DUXS12_0_Probe+0x14c>)
 800c03c:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2DUXS12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DUXS12_COMMON_Driver;
 800c03e:	4b2a      	ldr	r3, [pc, #168]	@ (800c0e8 <LIS2DUXS12_0_Probe+0x158>)
 800c040:	4a2a      	ldr	r2, [pc, #168]	@ (800c0ec <LIS2DUXS12_0_Probe+0x15c>)
 800c042:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800c044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c046:	2b00      	cmp	r3, #0
 800c048:	d10a      	bne.n	800c060 <LIS2DUXS12_0_Probe+0xd0>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f003 0301 	and.w	r3, r3, #1
 800c050:	2b00      	cmp	r3, #0
 800c052:	d005      	beq.n	800c060 <LIS2DUXS12_0_Probe+0xd0>
 800c054:	7b7b      	ldrb	r3, [r7, #13]
 800c056:	2b01      	cmp	r3, #1
 800c058:	d102      	bne.n	800c060 <LIS2DUXS12_0_Probe+0xd0>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c05a:	f06f 0304 	mvn.w	r3, #4
 800c05e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800c060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c062:	2b00      	cmp	r3, #0
 800c064:	d11e      	bne.n	800c0a4 <LIS2DUXS12_0_Probe+0x114>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f003 0302 	and.w	r3, r3, #2
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d019      	beq.n	800c0a4 <LIS2DUXS12_0_Probe+0x114>
 800c070:	7b3b      	ldrb	r3, [r7, #12]
 800c072:	2b01      	cmp	r3, #1
 800c074:	d116      	bne.n	800c0a4 <LIS2DUXS12_0_Probe+0x114>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2DUXS12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800c076:	4b1e      	ldr	r3, [pc, #120]	@ (800c0f0 <LIS2DUXS12_0_Probe+0x160>)
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	4a1e      	ldr	r2, [pc, #120]	@ (800c0f4 <LIS2DUXS12_0_Probe+0x164>)
 800c07c:	3306      	adds	r3, #6
 800c07e:	491e      	ldr	r1, [pc, #120]	@ (800c0f8 <LIS2DUXS12_0_Probe+0x168>)
 800c080:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DUXS12_ACC_Driver;

      if (MotionDrv[IKS4A1_LIS2DUXS12_0]->Init(MotionCompObj[IKS4A1_LIS2DUXS12_0]) != LIS2DUXS12_OK)
 800c084:	4b18      	ldr	r3, [pc, #96]	@ (800c0e8 <LIS2DUXS12_0_Probe+0x158>)
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4a16      	ldr	r2, [pc, #88]	@ (800c0e4 <LIS2DUXS12_0_Probe+0x154>)
 800c08c:	6892      	ldr	r2, [r2, #8]
 800c08e:	4610      	mov	r0, r2
 800c090:	4798      	blx	r3
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d003      	beq.n	800c0a0 <LIS2DUXS12_0_Probe+0x110>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c098:	f06f 0304 	mvn.w	r3, #4
 800c09c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c09e:	e001      	b.n	800c0a4 <LIS2DUXS12_0_Probe+0x114>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800c0a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d107      	bne.n	800c0ba <LIS2DUXS12_0_Probe+0x12a>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f003 0304 	and.w	r3, r3, #4
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d002      	beq.n	800c0ba <LIS2DUXS12_0_Probe+0x12a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c0b4:	f06f 0304 	mvn.w	r3, #4
 800c0b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800c0ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3750      	adds	r7, #80	@ 0x50
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	08002841 	.word	0x08002841
 800c0c8:	080028a5 	.word	0x080028a5
 800c0cc:	08002959 	.word	0x08002959
 800c0d0:	080028f5 	.word	0x080028f5
 800c0d4:	08002a65 	.word	0x08002a65
 800c0d8:	0800c6f5 	.word	0x0800c6f5
 800c0dc:	20014fe4 	.word	0x20014fe4
 800c0e0:	20014f68 	.word	0x20014f68
 800c0e4:	20014f18 	.word	0x20014f18
 800c0e8:	20014f58 	.word	0x20014f58
 800c0ec:	20000004 	.word	0x20000004
 800c0f0:	200001f0 	.word	0x200001f0
 800c0f4:	20014f28 	.word	0x20014f28
 800c0f8:	20000014 	.word	0x20000014

0800c0fc <LSM6DSO16IS_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSO16IS_0_Probe(uint32_t Functions)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b094      	sub	sp, #80	@ 0x50
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  LSM6DSO16IS_IO_t            io_ctx;
  uint8_t                     id;
  static LSM6DSO16IS_Object_t lsm6dso16is_obj_0;
  LSM6DSO16IS_Capabilities_t  cap;
  int32_t                     ret = BSP_ERROR_NONE;
 800c104:	2300      	movs	r3, #0
 800c106:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSO16IS_I2C_BUS; /* I2C */
 800c108:	2300      	movs	r3, #0
 800c10a:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO16IS_I2C_ADD_L;
 800c10c:	23d5      	movs	r3, #213	@ 0xd5
 800c10e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800c112:	4b51      	ldr	r3, [pc, #324]	@ (800c258 <LSM6DSO16IS_0_Probe+0x15c>)
 800c114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800c116:	4b51      	ldr	r3, [pc, #324]	@ (800c25c <LSM6DSO16IS_0_Probe+0x160>)
 800c118:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800c11a:	4b51      	ldr	r3, [pc, #324]	@ (800c260 <LSM6DSO16IS_0_Probe+0x164>)
 800c11c:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800c11e:	4b51      	ldr	r3, [pc, #324]	@ (800c264 <LSM6DSO16IS_0_Probe+0x168>)
 800c120:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800c122:	4b51      	ldr	r3, [pc, #324]	@ (800c268 <LSM6DSO16IS_0_Probe+0x16c>)
 800c124:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800c126:	4b51      	ldr	r3, [pc, #324]	@ (800c26c <LSM6DSO16IS_0_Probe+0x170>)
 800c128:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO16IS_RegisterBusIO(&lsm6dso16is_obj_0, &io_ctx) != LSM6DSO16IS_OK)
 800c12a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c12e:	4619      	mov	r1, r3
 800c130:	484f      	ldr	r0, [pc, #316]	@ (800c270 <LSM6DSO16IS_0_Probe+0x174>)
 800c132:	f7fa fb1b 	bl	800676c <LSM6DSO16IS_RegisterBusIO>
 800c136:	4603      	mov	r3, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d003      	beq.n	800c144 <LSM6DSO16IS_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c13c:	f06f 0306 	mvn.w	r3, #6
 800c140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c142:	e084      	b.n	800c24e <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_Set_Mem_Bank(&lsm6dso16is_obj_0, LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 800c144:	2100      	movs	r1, #0
 800c146:	484a      	ldr	r0, [pc, #296]	@ (800c270 <LSM6DSO16IS_0_Probe+0x174>)
 800c148:	f7fb f941 	bl	80073ce <LSM6DSO16IS_Set_Mem_Bank>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d003      	beq.n	800c15a <LSM6DSO16IS_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c152:	f06f 0306 	mvn.w	r3, #6
 800c156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c158:	e079      	b.n	800c24e <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_ReadID(&lsm6dso16is_obj_0, &id) != LSM6DSO16IS_OK)
 800c15a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800c15e:	4619      	mov	r1, r3
 800c160:	4843      	ldr	r0, [pc, #268]	@ (800c270 <LSM6DSO16IS_0_Probe+0x174>)
 800c162:	f7fa fc01 	bl	8006968 <LSM6DSO16IS_ReadID>
 800c166:	4603      	mov	r3, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d003      	beq.n	800c174 <LSM6DSO16IS_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c16c:	f06f 0306 	mvn.w	r3, #6
 800c170:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c172:	e06c      	b.n	800c24e <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (id != LSM6DSO16IS_ID)
 800c174:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c178:	2b22      	cmp	r3, #34	@ 0x22
 800c17a:	d003      	beq.n	800c184 <LSM6DSO16IS_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c17c:	f06f 0306 	mvn.w	r3, #6
 800c180:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c182:	e064      	b.n	800c24e <LSM6DSO16IS_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSO16IS_GetCapabilities(&lsm6dso16is_obj_0, &cap);
 800c184:	f107 030c 	add.w	r3, r7, #12
 800c188:	4619      	mov	r1, r3
 800c18a:	4839      	ldr	r0, [pc, #228]	@ (800c270 <LSM6DSO16IS_0_Probe+0x174>)
 800c18c:	f7fa fc04 	bl	8006998 <LSM6DSO16IS_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSO16IS_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800c190:	7b7b      	ldrb	r3, [r7, #13]
 800c192:	461a      	mov	r2, r3
 800c194:	7b3b      	ldrb	r3, [r7, #12]
 800c196:	005b      	lsls	r3, r3, #1
 800c198:	431a      	orrs	r2, r3
 800c19a:	7bbb      	ldrb	r3, [r7, #14]
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	4a34      	ldr	r2, [pc, #208]	@ (800c274 <LSM6DSO16IS_0_Probe+0x178>)
 800c1a2:	60d3      	str	r3, [r2, #12]

    MotionCompObj[IKS4A1_LSM6DSO16IS_0] = &lsm6dso16is_obj_0;
 800c1a4:	4b34      	ldr	r3, [pc, #208]	@ (800c278 <LSM6DSO16IS_0_Probe+0x17c>)
 800c1a6:	4a32      	ldr	r2, [pc, #200]	@ (800c270 <LSM6DSO16IS_0_Probe+0x174>)
 800c1a8:	60da      	str	r2, [r3, #12]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSO16IS_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO16IS_COMMON_Driver;
 800c1aa:	4b34      	ldr	r3, [pc, #208]	@ (800c27c <LSM6DSO16IS_0_Probe+0x180>)
 800c1ac:	4a34      	ldr	r2, [pc, #208]	@ (800c280 <LSM6DSO16IS_0_Probe+0x184>)
 800c1ae:	60da      	str	r2, [r3, #12]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800c1b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d11e      	bne.n	800c1f4 <LSM6DSO16IS_0_Probe+0xf8>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f003 0301 	and.w	r3, r3, #1
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d019      	beq.n	800c1f4 <LSM6DSO16IS_0_Probe+0xf8>
 800c1c0:	7b7b      	ldrb	r3, [r7, #13]
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d116      	bne.n	800c1f4 <LSM6DSO16IS_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800c1c6:	4b2f      	ldr	r3, [pc, #188]	@ (800c284 <LSM6DSO16IS_0_Probe+0x188>)
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	4a2f      	ldr	r2, [pc, #188]	@ (800c288 <LSM6DSO16IS_0_Probe+0x18c>)
 800c1cc:	3309      	adds	r3, #9
 800c1ce:	492f      	ldr	r1, [pc, #188]	@ (800c28c <LSM6DSO16IS_0_Probe+0x190>)
 800c1d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                         void *)&LSM6DSO16IS_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800c1d4:	4b29      	ldr	r3, [pc, #164]	@ (800c27c <LSM6DSO16IS_0_Probe+0x180>)
 800c1d6:	68db      	ldr	r3, [r3, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a27      	ldr	r2, [pc, #156]	@ (800c278 <LSM6DSO16IS_0_Probe+0x17c>)
 800c1dc:	68d2      	ldr	r2, [r2, #12]
 800c1de:	4610      	mov	r0, r2
 800c1e0:	4798      	blx	r3
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d003      	beq.n	800c1f0 <LSM6DSO16IS_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c1e8:	f06f 0304 	mvn.w	r3, #4
 800c1ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c1ee:	e001      	b.n	800c1f4 <LSM6DSO16IS_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800c1f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d11e      	bne.n	800c238 <LSM6DSO16IS_0_Probe+0x13c>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f003 0302 	and.w	r3, r3, #2
 800c200:	2b00      	cmp	r3, #0
 800c202:	d019      	beq.n	800c238 <LSM6DSO16IS_0_Probe+0x13c>
 800c204:	7b3b      	ldrb	r3, [r7, #12]
 800c206:	2b01      	cmp	r3, #1
 800c208:	d116      	bne.n	800c238 <LSM6DSO16IS_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800c20a:	4b1e      	ldr	r3, [pc, #120]	@ (800c284 <LSM6DSO16IS_0_Probe+0x188>)
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	4a1e      	ldr	r2, [pc, #120]	@ (800c288 <LSM6DSO16IS_0_Probe+0x18c>)
 800c210:	3309      	adds	r3, #9
 800c212:	491f      	ldr	r1, [pc, #124]	@ (800c290 <LSM6DSO16IS_0_Probe+0x194>)
 800c214:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                             void *)&LSM6DSO16IS_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800c218:	4b18      	ldr	r3, [pc, #96]	@ (800c27c <LSM6DSO16IS_0_Probe+0x180>)
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a16      	ldr	r2, [pc, #88]	@ (800c278 <LSM6DSO16IS_0_Probe+0x17c>)
 800c220:	68d2      	ldr	r2, [r2, #12]
 800c222:	4610      	mov	r0, r2
 800c224:	4798      	blx	r3
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d003      	beq.n	800c234 <LSM6DSO16IS_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c22c:	f06f 0304 	mvn.w	r3, #4
 800c230:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c232:	e001      	b.n	800c238 <LSM6DSO16IS_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800c234:	2300      	movs	r3, #0
 800c236:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800c238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d107      	bne.n	800c24e <LSM6DSO16IS_0_Probe+0x152>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f003 0304 	and.w	r3, r3, #4
 800c244:	2b00      	cmp	r3, #0
 800c246:	d002      	beq.n	800c24e <LSM6DSO16IS_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c248:	f06f 0304 	mvn.w	r3, #4
 800c24c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800c24e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800c250:	4618      	mov	r0, r3
 800c252:	3750      	adds	r7, #80	@ 0x50
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	08002841 	.word	0x08002841
 800c25c:	080028a5 	.word	0x080028a5
 800c260:	08002959 	.word	0x08002959
 800c264:	080028f5 	.word	0x080028f5
 800c268:	08002a65 	.word	0x08002a65
 800c26c:	0800c6f5 	.word	0x0800c6f5
 800c270:	20015020 	.word	0x20015020
 800c274:	20014f68 	.word	0x20014f68
 800c278:	20014f18 	.word	0x20014f18
 800c27c:	20014f58 	.word	0x20014f58
 800c280:	200000a4 	.word	0x200000a4
 800c284:	200001f0 	.word	0x200001f0
 800c288:	20014f28 	.word	0x20014f28
 800c28c:	200000d8 	.word	0x200000d8
 800c290:	200000b4 	.word	0x200000b4

0800c294 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	4603      	mov	r3, r0
 800c29c:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800c29e:	79fb      	ldrb	r3, [r7, #7]
 800c2a0:	4a04      	ldr	r2, [pc, #16]	@ (800c2b4 <BSP_LED_Init+0x20>)
 800c2a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2a6:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800c2a8:	2300      	movs	r3, #0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
 800c2b2:	bf00      	nop
 800c2b4:	08017224 	.word	0x08017224

0800c2b8 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b088      	sub	sp, #32
 800c2bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c2be:	2300      	movs	r3, #0
 800c2c0:	60bb      	str	r3, [r7, #8]
 800c2c2:	4b1c      	ldr	r3, [pc, #112]	@ (800c334 <LED_USER_GPIO_Init+0x7c>)
 800c2c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2c6:	4a1b      	ldr	r2, [pc, #108]	@ (800c334 <LED_USER_GPIO_Init+0x7c>)
 800c2c8:	f043 0302 	orr.w	r3, r3, #2
 800c2cc:	6313      	str	r3, [r2, #48]	@ 0x30
 800c2ce:	4b19      	ldr	r3, [pc, #100]	@ (800c334 <LED_USER_GPIO_Init+0x7c>)
 800c2d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2d2:	f003 0302 	and.w	r3, r3, #2
 800c2d6:	60bb      	str	r3, [r7, #8]
 800c2d8:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c2da:	f107 030c 	add.w	r3, r7, #12
 800c2de:	2200      	movs	r2, #0
 800c2e0:	601a      	str	r2, [r3, #0]
 800c2e2:	605a      	str	r2, [r3, #4]
 800c2e4:	609a      	str	r2, [r3, #8]
 800c2e6:	60da      	str	r2, [r3, #12]
 800c2e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	607b      	str	r3, [r7, #4]
 800c2ee:	4b11      	ldr	r3, [pc, #68]	@ (800c334 <LED_USER_GPIO_Init+0x7c>)
 800c2f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2f2:	4a10      	ldr	r2, [pc, #64]	@ (800c334 <LED_USER_GPIO_Init+0x7c>)
 800c2f4:	f043 0302 	orr.w	r3, r3, #2
 800c2f8:	6313      	str	r3, [r2, #48]	@ 0x30
 800c2fa:	4b0e      	ldr	r3, [pc, #56]	@ (800c334 <LED_USER_GPIO_Init+0x7c>)
 800c2fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2fe:	f003 0302 	and.w	r3, r3, #2
 800c302:	607b      	str	r3, [r7, #4]
 800c304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800c306:	2200      	movs	r2, #0
 800c308:	2101      	movs	r1, #1
 800c30a:	480b      	ldr	r0, [pc, #44]	@ (800c338 <LED_USER_GPIO_Init+0x80>)
 800c30c:	f000 fdd6 	bl	800cebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800c310:	2301      	movs	r3, #1
 800c312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c314:	2301      	movs	r3, #1
 800c316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c318:	2300      	movs	r3, #0
 800c31a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c31c:	2300      	movs	r3, #0
 800c31e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800c320:	f107 030c 	add.w	r3, r7, #12
 800c324:	4619      	mov	r1, r3
 800c326:	4804      	ldr	r0, [pc, #16]	@ (800c338 <LED_USER_GPIO_Init+0x80>)
 800c328:	f000 fb48 	bl	800c9bc <HAL_GPIO_Init>

}
 800c32c:	bf00      	nop
 800c32e:	3720      	adds	r7, #32
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	40023800 	.word	0x40023800
 800c338:	40020400 	.word	0x40020400

0800c33c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	4603      	mov	r3, r0
 800c344:	460a      	mov	r2, r1
 800c346:	71fb      	strb	r3, [r7, #7]
 800c348:	4613      	mov	r3, r2
 800c34a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800c34c:	2300      	movs	r3, #0
 800c34e:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800c350:	79fb      	ldrb	r3, [r7, #7]
 800c352:	4a1f      	ldr	r2, [pc, #124]	@ (800c3d0 <BSP_PB_Init+0x94>)
 800c354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c358:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800c35a:	79bb      	ldrb	r3, [r7, #6]
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d132      	bne.n	800c3c6 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800c360:	79fb      	ldrb	r3, [r7, #7]
 800c362:	00db      	lsls	r3, r3, #3
 800c364:	4a1b      	ldr	r2, [pc, #108]	@ (800c3d4 <BSP_PB_Init+0x98>)
 800c366:	441a      	add	r2, r3
 800c368:	79fb      	ldrb	r3, [r7, #7]
 800c36a:	491b      	ldr	r1, [pc, #108]	@ (800c3d8 <BSP_PB_Init+0x9c>)
 800c36c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c370:	4619      	mov	r1, r3
 800c372:	4610      	mov	r0, r2
 800c374:	f000 fb0d 	bl	800c992 <HAL_EXTI_GetHandle>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d003      	beq.n	800c386 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c37e:	f06f 0303 	mvn.w	r3, #3
 800c382:	60fb      	str	r3, [r7, #12]
 800c384:	e01f      	b.n	800c3c6 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800c386:	79fb      	ldrb	r3, [r7, #7]
 800c388:	00db      	lsls	r3, r3, #3
 800c38a:	4a12      	ldr	r2, [pc, #72]	@ (800c3d4 <BSP_PB_Init+0x98>)
 800c38c:	1898      	adds	r0, r3, r2
 800c38e:	79fb      	ldrb	r3, [r7, #7]
 800c390:	4a12      	ldr	r2, [pc, #72]	@ (800c3dc <BSP_PB_Init+0xa0>)
 800c392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c396:	461a      	mov	r2, r3
 800c398:	2100      	movs	r1, #0
 800c39a:	f000 fae0 	bl	800c95e <HAL_EXTI_RegisterCallback>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d003      	beq.n	800c3ac <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c3a4:	f06f 0303 	mvn.w	r3, #3
 800c3a8:	60fb      	str	r3, [r7, #12]
 800c3aa:	e00c      	b.n	800c3c6 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800c3ac:	2028      	movs	r0, #40	@ 0x28
 800c3ae:	79fb      	ldrb	r3, [r7, #7]
 800c3b0:	4a0b      	ldr	r2, [pc, #44]	@ (800c3e0 <BSP_PB_Init+0xa4>)
 800c3b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	f000 fa9a 	bl	800c8f2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800c3be:	2328      	movs	r3, #40	@ 0x28
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f000 fab2 	bl	800c92a <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	08017228 	.word	0x08017228
 800c3d4:	20000214 	.word	0x20000214
 800c3d8:	0801722c 	.word	0x0801722c
 800c3dc:	08017230 	.word	0x08017230
 800c3e0:	08017234 	.word	0x08017234

0800c3e4 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800c3ee:	79fb      	ldrb	r3, [r7, #7]
 800c3f0:	4a09      	ldr	r2, [pc, #36]	@ (800c418 <BSP_PB_GetState+0x34>)
 800c3f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c3fa:	4611      	mov	r1, r2
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f000 fd45 	bl	800ce8c <HAL_GPIO_ReadPin>
 800c402:	4603      	mov	r3, r0
 800c404:	2b00      	cmp	r3, #0
 800c406:	bf0c      	ite	eq
 800c408:	2301      	moveq	r3, #1
 800c40a:	2300      	movne	r3, #0
 800c40c:	b2db      	uxtb	r3, r3
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3708      	adds	r7, #8
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	20000210 	.word	0x20000210

0800c41c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800c420:	2000      	movs	r0, #0
 800c422:	f004 fc73 	bl	8010d0c <BSP_PB_Callback>
}
 800c426:	bf00      	nop
 800c428:	bd80      	pop	{r7, pc}
	...

0800c42c <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b088      	sub	sp, #32
 800c430:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c432:	2300      	movs	r3, #0
 800c434:	60bb      	str	r3, [r7, #8]
 800c436:	4b1a      	ldr	r3, [pc, #104]	@ (800c4a0 <BUTTON_USER_GPIO_Init+0x74>)
 800c438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c43a:	4a19      	ldr	r2, [pc, #100]	@ (800c4a0 <BUTTON_USER_GPIO_Init+0x74>)
 800c43c:	f043 0304 	orr.w	r3, r3, #4
 800c440:	6313      	str	r3, [r2, #48]	@ 0x30
 800c442:	4b17      	ldr	r3, [pc, #92]	@ (800c4a0 <BUTTON_USER_GPIO_Init+0x74>)
 800c444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c446:	f003 0304 	and.w	r3, r3, #4
 800c44a:	60bb      	str	r3, [r7, #8]
 800c44c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c44e:	f107 030c 	add.w	r3, r7, #12
 800c452:	2200      	movs	r2, #0
 800c454:	601a      	str	r2, [r3, #0]
 800c456:	605a      	str	r2, [r3, #4]
 800c458:	609a      	str	r2, [r3, #8]
 800c45a:	60da      	str	r2, [r3, #12]
 800c45c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c45e:	2300      	movs	r3, #0
 800c460:	607b      	str	r3, [r7, #4]
 800c462:	4b0f      	ldr	r3, [pc, #60]	@ (800c4a0 <BUTTON_USER_GPIO_Init+0x74>)
 800c464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c466:	4a0e      	ldr	r2, [pc, #56]	@ (800c4a0 <BUTTON_USER_GPIO_Init+0x74>)
 800c468:	f043 0304 	orr.w	r3, r3, #4
 800c46c:	6313      	str	r3, [r2, #48]	@ 0x30
 800c46e:	4b0c      	ldr	r3, [pc, #48]	@ (800c4a0 <BUTTON_USER_GPIO_Init+0x74>)
 800c470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c472:	f003 0304 	and.w	r3, r3, #4
 800c476:	607b      	str	r3, [r7, #4]
 800c478:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800c47a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c47e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800c480:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800c484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c486:	2300      	movs	r3, #0
 800c488:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800c48a:	f107 030c 	add.w	r3, r7, #12
 800c48e:	4619      	mov	r1, r3
 800c490:	4804      	ldr	r0, [pc, #16]	@ (800c4a4 <BUTTON_USER_GPIO_Init+0x78>)
 800c492:	f000 fa93 	bl	800c9bc <HAL_GPIO_Init>

}
 800c496:	bf00      	nop
 800c498:	3720      	adds	r7, #32
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	40023800 	.word	0x40023800
 800c4a4:	40020800 	.word	0x40020800

0800c4a8 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800c4b6:	79fb      	ldrb	r3, [r7, #7]
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	d903      	bls.n	800c4c4 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c4bc:	f06f 0301 	mvn.w	r3, #1
 800c4c0:	60fb      	str	r3, [r7, #12]
 800c4c2:	e025      	b.n	800c510 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800c4c4:	79fb      	ldrb	r3, [r7, #7]
 800c4c6:	79fa      	ldrb	r2, [r7, #7]
 800c4c8:	4914      	ldr	r1, [pc, #80]	@ (800c51c <BSP_COM_Init+0x74>)
 800c4ca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c4ce:	4814      	ldr	r0, [pc, #80]	@ (800c520 <BSP_COM_Init+0x78>)
 800c4d0:	4613      	mov	r3, r2
 800c4d2:	00db      	lsls	r3, r3, #3
 800c4d4:	4413      	add	r3, r2
 800c4d6:	00db      	lsls	r3, r3, #3
 800c4d8:	4403      	add	r3, r0
 800c4da:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800c4dc:	79fa      	ldrb	r2, [r7, #7]
 800c4de:	4613      	mov	r3, r2
 800c4e0:	00db      	lsls	r3, r3, #3
 800c4e2:	4413      	add	r3, r2
 800c4e4:	00db      	lsls	r3, r3, #3
 800c4e6:	4a0e      	ldr	r2, [pc, #56]	@ (800c520 <BSP_COM_Init+0x78>)
 800c4e8:	4413      	add	r3, r2
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 f848 	bl	800c580 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800c4f0:	79fa      	ldrb	r2, [r7, #7]
 800c4f2:	4613      	mov	r3, r2
 800c4f4:	00db      	lsls	r3, r3, #3
 800c4f6:	4413      	add	r3, r2
 800c4f8:	00db      	lsls	r3, r3, #3
 800c4fa:	4a09      	ldr	r2, [pc, #36]	@ (800c520 <BSP_COM_Init+0x78>)
 800c4fc:	4413      	add	r3, r2
 800c4fe:	4618      	mov	r0, r3
 800c500:	f000 f810 	bl	800c524 <MX_USART2_UART_Init>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d002      	beq.n	800c510 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c50a:	f06f 0303 	mvn.w	r3, #3
 800c50e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800c510:	68fb      	ldr	r3, [r7, #12]
}
 800c512:	4618      	mov	r0, r3
 800c514:	3710      	adds	r7, #16
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	2000021c 	.word	0x2000021c
 800c520:	20015058 	.word	0x20015058

0800c524 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c52c:	2300      	movs	r3, #0
 800c52e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	4a12      	ldr	r2, [pc, #72]	@ (800c57c <MX_USART2_UART_Init+0x58>)
 800c534:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800c53c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2200      	movs	r2, #0
 800c542:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2200      	movs	r2, #0
 800c548:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2200      	movs	r2, #0
 800c54e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	220c      	movs	r2, #12
 800c554:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f003 fefe 	bl	8010364 <HAL_UART_Init>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d001      	beq.n	800c572 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800c56e:	2301      	movs	r3, #1
 800c570:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c572:	7bfb      	ldrb	r3, [r7, #15]
}
 800c574:	4618      	mov	r0, r3
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	40004400 	.word	0x40004400

0800c580 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b08a      	sub	sp, #40	@ 0x28
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c588:	2300      	movs	r3, #0
 800c58a:	613b      	str	r3, [r7, #16]
 800c58c:	4b1e      	ldr	r3, [pc, #120]	@ (800c608 <USART2_MspInit+0x88>)
 800c58e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c590:	4a1d      	ldr	r2, [pc, #116]	@ (800c608 <USART2_MspInit+0x88>)
 800c592:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c596:	6413      	str	r3, [r2, #64]	@ 0x40
 800c598:	4b1b      	ldr	r3, [pc, #108]	@ (800c608 <USART2_MspInit+0x88>)
 800c59a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c59c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5a0:	613b      	str	r3, [r7, #16]
 800c5a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	60fb      	str	r3, [r7, #12]
 800c5a8:	4b17      	ldr	r3, [pc, #92]	@ (800c608 <USART2_MspInit+0x88>)
 800c5aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5ac:	4a16      	ldr	r2, [pc, #88]	@ (800c608 <USART2_MspInit+0x88>)
 800c5ae:	f043 0301 	orr.w	r3, r3, #1
 800c5b2:	6313      	str	r3, [r2, #48]	@ 0x30
 800c5b4:	4b14      	ldr	r3, [pc, #80]	@ (800c608 <USART2_MspInit+0x88>)
 800c5b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5b8:	f003 0301 	and.w	r3, r3, #1
 800c5bc:	60fb      	str	r3, [r7, #12]
 800c5be:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800c5c0:	2304      	movs	r3, #4
 800c5c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5c4:	2302      	movs	r3, #2
 800c5c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800c5d0:	2307      	movs	r3, #7
 800c5d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800c5d4:	f107 0314 	add.w	r3, r7, #20
 800c5d8:	4619      	mov	r1, r3
 800c5da:	480c      	ldr	r0, [pc, #48]	@ (800c60c <USART2_MspInit+0x8c>)
 800c5dc:	f000 f9ee 	bl	800c9bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800c5e0:	2308      	movs	r3, #8
 800c5e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5e4:	2302      	movs	r3, #2
 800c5e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800c5f0:	2307      	movs	r3, #7
 800c5f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800c5f4:	f107 0314 	add.w	r3, r7, #20
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	4804      	ldr	r0, [pc, #16]	@ (800c60c <USART2_MspInit+0x8c>)
 800c5fc:	f000 f9de 	bl	800c9bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800c600:	bf00      	nop
 800c602:	3728      	adds	r7, #40	@ 0x28
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}
 800c608:	40023800 	.word	0x40023800
 800c60c:	40020000 	.word	0x40020000

0800c610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c614:	4b0e      	ldr	r3, [pc, #56]	@ (800c650 <HAL_Init+0x40>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4a0d      	ldr	r2, [pc, #52]	@ (800c650 <HAL_Init+0x40>)
 800c61a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c61e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800c620:	4b0b      	ldr	r3, [pc, #44]	@ (800c650 <HAL_Init+0x40>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4a0a      	ldr	r2, [pc, #40]	@ (800c650 <HAL_Init+0x40>)
 800c626:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c62a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c62c:	4b08      	ldr	r3, [pc, #32]	@ (800c650 <HAL_Init+0x40>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a07      	ldr	r2, [pc, #28]	@ (800c650 <HAL_Init+0x40>)
 800c632:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c636:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c638:	2003      	movs	r0, #3
 800c63a:	f000 f94f 	bl	800c8dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c63e:	2000      	movs	r0, #0
 800c640:	f000 f808 	bl	800c654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c644:	f7f6 f818 	bl	8002678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c648:	2300      	movs	r3, #0
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	40023c00 	.word	0x40023c00

0800c654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c65c:	4b12      	ldr	r3, [pc, #72]	@ (800c6a8 <HAL_InitTick+0x54>)
 800c65e:	681a      	ldr	r2, [r3, #0]
 800c660:	4b12      	ldr	r3, [pc, #72]	@ (800c6ac <HAL_InitTick+0x58>)
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	4619      	mov	r1, r3
 800c666:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c66a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c66e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c672:	4618      	mov	r0, r3
 800c674:	f000 f967 	bl	800c946 <HAL_SYSTICK_Config>
 800c678:	4603      	mov	r3, r0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d001      	beq.n	800c682 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	e00e      	b.n	800c6a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2b0f      	cmp	r3, #15
 800c686:	d80a      	bhi.n	800c69e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c688:	2200      	movs	r2, #0
 800c68a:	6879      	ldr	r1, [r7, #4]
 800c68c:	f04f 30ff 	mov.w	r0, #4294967295
 800c690:	f000 f92f 	bl	800c8f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c694:	4a06      	ldr	r2, [pc, #24]	@ (800c6b0 <HAL_InitTick+0x5c>)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c69a:	2300      	movs	r3, #0
 800c69c:	e000      	b.n	800c6a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c69e:	2301      	movs	r3, #1
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3708      	adds	r7, #8
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	20000000 	.word	0x20000000
 800c6ac:	20000224 	.word	0x20000224
 800c6b0:	20000220 	.word	0x20000220

0800c6b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c6b8:	4b06      	ldr	r3, [pc, #24]	@ (800c6d4 <HAL_IncTick+0x20>)
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	461a      	mov	r2, r3
 800c6be:	4b06      	ldr	r3, [pc, #24]	@ (800c6d8 <HAL_IncTick+0x24>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	4a04      	ldr	r2, [pc, #16]	@ (800c6d8 <HAL_IncTick+0x24>)
 800c6c6:	6013      	str	r3, [r2, #0]
}
 800c6c8:	bf00      	nop
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	20000224 	.word	0x20000224
 800c6d8:	200150a0 	.word	0x200150a0

0800c6dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	af00      	add	r7, sp, #0
  return uwTick;
 800c6e0:	4b03      	ldr	r3, [pc, #12]	@ (800c6f0 <HAL_GetTick+0x14>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop
 800c6f0:	200150a0 	.word	0x200150a0

0800c6f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c6fc:	f7ff ffee 	bl	800c6dc <HAL_GetTick>
 800c700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c70c:	d005      	beq.n	800c71a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c70e:	4b0a      	ldr	r3, [pc, #40]	@ (800c738 <HAL_Delay+0x44>)
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	461a      	mov	r2, r3
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	4413      	add	r3, r2
 800c718:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c71a:	bf00      	nop
 800c71c:	f7ff ffde 	bl	800c6dc <HAL_GetTick>
 800c720:	4602      	mov	r2, r0
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	1ad3      	subs	r3, r2, r3
 800c726:	68fa      	ldr	r2, [r7, #12]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d8f7      	bhi.n	800c71c <HAL_Delay+0x28>
  {
  }
}
 800c72c:	bf00      	nop
 800c72e:	bf00      	nop
 800c730:	3710      	adds	r7, #16
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	20000224 	.word	0x20000224

0800c73c <__NVIC_SetPriorityGrouping>:
{
 800c73c:	b480      	push	{r7}
 800c73e:	b085      	sub	sp, #20
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f003 0307 	and.w	r3, r3, #7
 800c74a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c74c:	4b0c      	ldr	r3, [pc, #48]	@ (800c780 <__NVIC_SetPriorityGrouping+0x44>)
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c752:	68ba      	ldr	r2, [r7, #8]
 800c754:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c758:	4013      	ands	r3, r2
 800c75a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c76c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c76e:	4a04      	ldr	r2, [pc, #16]	@ (800c780 <__NVIC_SetPriorityGrouping+0x44>)
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	60d3      	str	r3, [r2, #12]
}
 800c774:	bf00      	nop
 800c776:	3714      	adds	r7, #20
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr
 800c780:	e000ed00 	.word	0xe000ed00

0800c784 <__NVIC_GetPriorityGrouping>:
{
 800c784:	b480      	push	{r7}
 800c786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c788:	4b04      	ldr	r3, [pc, #16]	@ (800c79c <__NVIC_GetPriorityGrouping+0x18>)
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	0a1b      	lsrs	r3, r3, #8
 800c78e:	f003 0307 	and.w	r3, r3, #7
}
 800c792:	4618      	mov	r0, r3
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr
 800c79c:	e000ed00 	.word	0xe000ed00

0800c7a0 <__NVIC_EnableIRQ>:
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b083      	sub	sp, #12
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c7aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	db0b      	blt.n	800c7ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c7b2:	79fb      	ldrb	r3, [r7, #7]
 800c7b4:	f003 021f 	and.w	r2, r3, #31
 800c7b8:	4907      	ldr	r1, [pc, #28]	@ (800c7d8 <__NVIC_EnableIRQ+0x38>)
 800c7ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7be:	095b      	lsrs	r3, r3, #5
 800c7c0:	2001      	movs	r0, #1
 800c7c2:	fa00 f202 	lsl.w	r2, r0, r2
 800c7c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c7ca:	bf00      	nop
 800c7cc:	370c      	adds	r7, #12
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop
 800c7d8:	e000e100 	.word	0xe000e100

0800c7dc <__NVIC_SetPriority>:
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	6039      	str	r1, [r7, #0]
 800c7e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c7e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	db0a      	blt.n	800c806 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	b2da      	uxtb	r2, r3
 800c7f4:	490c      	ldr	r1, [pc, #48]	@ (800c828 <__NVIC_SetPriority+0x4c>)
 800c7f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7fa:	0112      	lsls	r2, r2, #4
 800c7fc:	b2d2      	uxtb	r2, r2
 800c7fe:	440b      	add	r3, r1
 800c800:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c804:	e00a      	b.n	800c81c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	b2da      	uxtb	r2, r3
 800c80a:	4908      	ldr	r1, [pc, #32]	@ (800c82c <__NVIC_SetPriority+0x50>)
 800c80c:	79fb      	ldrb	r3, [r7, #7]
 800c80e:	f003 030f 	and.w	r3, r3, #15
 800c812:	3b04      	subs	r3, #4
 800c814:	0112      	lsls	r2, r2, #4
 800c816:	b2d2      	uxtb	r2, r2
 800c818:	440b      	add	r3, r1
 800c81a:	761a      	strb	r2, [r3, #24]
}
 800c81c:	bf00      	nop
 800c81e:	370c      	adds	r7, #12
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr
 800c828:	e000e100 	.word	0xe000e100
 800c82c:	e000ed00 	.word	0xe000ed00

0800c830 <NVIC_EncodePriority>:
{
 800c830:	b480      	push	{r7}
 800c832:	b089      	sub	sp, #36	@ 0x24
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	60b9      	str	r1, [r7, #8]
 800c83a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f003 0307 	and.w	r3, r3, #7
 800c842:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	f1c3 0307 	rsb	r3, r3, #7
 800c84a:	2b04      	cmp	r3, #4
 800c84c:	bf28      	it	cs
 800c84e:	2304      	movcs	r3, #4
 800c850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c852:	69fb      	ldr	r3, [r7, #28]
 800c854:	3304      	adds	r3, #4
 800c856:	2b06      	cmp	r3, #6
 800c858:	d902      	bls.n	800c860 <NVIC_EncodePriority+0x30>
 800c85a:	69fb      	ldr	r3, [r7, #28]
 800c85c:	3b03      	subs	r3, #3
 800c85e:	e000      	b.n	800c862 <NVIC_EncodePriority+0x32>
 800c860:	2300      	movs	r3, #0
 800c862:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c864:	f04f 32ff 	mov.w	r2, #4294967295
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	fa02 f303 	lsl.w	r3, r2, r3
 800c86e:	43da      	mvns	r2, r3
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	401a      	ands	r2, r3
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c878:	f04f 31ff 	mov.w	r1, #4294967295
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	fa01 f303 	lsl.w	r3, r1, r3
 800c882:	43d9      	mvns	r1, r3
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c888:	4313      	orrs	r3, r2
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3724      	adds	r7, #36	@ 0x24
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr
	...

0800c898 <SysTick_Config>:
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b082      	sub	sp, #8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	3b01      	subs	r3, #1
 800c8a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c8a8:	d301      	bcc.n	800c8ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e00f      	b.n	800c8ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c8ae:	4a0a      	ldr	r2, [pc, #40]	@ (800c8d8 <SysTick_Config+0x40>)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	3b01      	subs	r3, #1
 800c8b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c8b6:	210f      	movs	r1, #15
 800c8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8bc:	f7ff ff8e 	bl	800c7dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c8c0:	4b05      	ldr	r3, [pc, #20]	@ (800c8d8 <SysTick_Config+0x40>)
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c8c6:	4b04      	ldr	r3, [pc, #16]	@ (800c8d8 <SysTick_Config+0x40>)
 800c8c8:	2207      	movs	r2, #7
 800c8ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800c8cc:	2300      	movs	r3, #0
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	e000e010 	.word	0xe000e010

0800c8dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f7ff ff29 	bl	800c73c <__NVIC_SetPriorityGrouping>
}
 800c8ea:	bf00      	nop
 800c8ec:	3708      	adds	r7, #8
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b086      	sub	sp, #24
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	60b9      	str	r1, [r7, #8]
 800c8fc:	607a      	str	r2, [r7, #4]
 800c8fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c900:	2300      	movs	r3, #0
 800c902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c904:	f7ff ff3e 	bl	800c784 <__NVIC_GetPriorityGrouping>
 800c908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	68b9      	ldr	r1, [r7, #8]
 800c90e:	6978      	ldr	r0, [r7, #20]
 800c910:	f7ff ff8e 	bl	800c830 <NVIC_EncodePriority>
 800c914:	4602      	mov	r2, r0
 800c916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c91a:	4611      	mov	r1, r2
 800c91c:	4618      	mov	r0, r3
 800c91e:	f7ff ff5d 	bl	800c7dc <__NVIC_SetPriority>
}
 800c922:	bf00      	nop
 800c924:	3718      	adds	r7, #24
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b082      	sub	sp, #8
 800c92e:	af00      	add	r7, sp, #0
 800c930:	4603      	mov	r3, r0
 800c932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c938:	4618      	mov	r0, r3
 800c93a:	f7ff ff31 	bl	800c7a0 <__NVIC_EnableIRQ>
}
 800c93e:	bf00      	nop
 800c940:	3708      	adds	r7, #8
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b082      	sub	sp, #8
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7ff ffa2 	bl	800c898 <SysTick_Config>
 800c954:	4603      	mov	r3, r0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800c95e:	b480      	push	{r7}
 800c960:	b087      	sub	sp, #28
 800c962:	af00      	add	r7, sp, #0
 800c964:	60f8      	str	r0, [r7, #12]
 800c966:	460b      	mov	r3, r1
 800c968:	607a      	str	r2, [r7, #4]
 800c96a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c96c:	2300      	movs	r3, #0
 800c96e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800c970:	7afb      	ldrb	r3, [r7, #11]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d103      	bne.n	800c97e <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	687a      	ldr	r2, [r7, #4]
 800c97a:	605a      	str	r2, [r3, #4]
      break;
 800c97c:	e002      	b.n	800c984 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800c97e:	2301      	movs	r3, #1
 800c980:	75fb      	strb	r3, [r7, #23]
      break;
 800c982:	bf00      	nop
  }

  return status;
 800c984:	7dfb      	ldrb	r3, [r7, #23]
}
 800c986:	4618      	mov	r0, r3
 800c988:	371c      	adds	r7, #28
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr

0800c992 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800c992:	b480      	push	{r7}
 800c994:	b083      	sub	sp, #12
 800c996:	af00      	add	r7, sp, #0
 800c998:	6078      	str	r0, [r7, #4]
 800c99a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d101      	bne.n	800c9a6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	e003      	b.n	800c9ae <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	683a      	ldr	r2, [r7, #0]
 800c9aa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c9ac:	2300      	movs	r3, #0
  }
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	370c      	adds	r7, #12
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b8:	4770      	bx	lr
	...

0800c9bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b089      	sub	sp, #36	@ 0x24
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	61fb      	str	r3, [r7, #28]
 800c9d6:	e159      	b.n	800cc8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c9d8:	2201      	movs	r2, #1
 800c9da:	69fb      	ldr	r3, [r7, #28]
 800c9dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c9e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	697a      	ldr	r2, [r7, #20]
 800c9e8:	4013      	ands	r3, r2
 800c9ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c9ec:	693a      	ldr	r2, [r7, #16]
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	f040 8148 	bne.w	800cc86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	f003 0303 	and.w	r3, r3, #3
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d005      	beq.n	800ca0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	685b      	ldr	r3, [r3, #4]
 800ca06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ca0a:	2b02      	cmp	r3, #2
 800ca0c:	d130      	bne.n	800ca70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	689b      	ldr	r3, [r3, #8]
 800ca12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	005b      	lsls	r3, r3, #1
 800ca18:	2203      	movs	r2, #3
 800ca1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca1e:	43db      	mvns	r3, r3
 800ca20:	69ba      	ldr	r2, [r7, #24]
 800ca22:	4013      	ands	r3, r2
 800ca24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	68da      	ldr	r2, [r3, #12]
 800ca2a:	69fb      	ldr	r3, [r7, #28]
 800ca2c:	005b      	lsls	r3, r3, #1
 800ca2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ca32:	69ba      	ldr	r2, [r7, #24]
 800ca34:	4313      	orrs	r3, r2
 800ca36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	69ba      	ldr	r2, [r7, #24]
 800ca3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ca44:	2201      	movs	r2, #1
 800ca46:	69fb      	ldr	r3, [r7, #28]
 800ca48:	fa02 f303 	lsl.w	r3, r2, r3
 800ca4c:	43db      	mvns	r3, r3
 800ca4e:	69ba      	ldr	r2, [r7, #24]
 800ca50:	4013      	ands	r3, r2
 800ca52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	091b      	lsrs	r3, r3, #4
 800ca5a:	f003 0201 	and.w	r2, r3, #1
 800ca5e:	69fb      	ldr	r3, [r7, #28]
 800ca60:	fa02 f303 	lsl.w	r3, r2, r3
 800ca64:	69ba      	ldr	r2, [r7, #24]
 800ca66:	4313      	orrs	r3, r2
 800ca68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	69ba      	ldr	r2, [r7, #24]
 800ca6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	f003 0303 	and.w	r3, r3, #3
 800ca78:	2b03      	cmp	r3, #3
 800ca7a:	d017      	beq.n	800caac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ca82:	69fb      	ldr	r3, [r7, #28]
 800ca84:	005b      	lsls	r3, r3, #1
 800ca86:	2203      	movs	r2, #3
 800ca88:	fa02 f303 	lsl.w	r3, r2, r3
 800ca8c:	43db      	mvns	r3, r3
 800ca8e:	69ba      	ldr	r2, [r7, #24]
 800ca90:	4013      	ands	r3, r2
 800ca92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	689a      	ldr	r2, [r3, #8]
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	005b      	lsls	r3, r3, #1
 800ca9c:	fa02 f303 	lsl.w	r3, r2, r3
 800caa0:	69ba      	ldr	r2, [r7, #24]
 800caa2:	4313      	orrs	r3, r2
 800caa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	69ba      	ldr	r2, [r7, #24]
 800caaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	f003 0303 	and.w	r3, r3, #3
 800cab4:	2b02      	cmp	r3, #2
 800cab6:	d123      	bne.n	800cb00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cab8:	69fb      	ldr	r3, [r7, #28]
 800caba:	08da      	lsrs	r2, r3, #3
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	3208      	adds	r2, #8
 800cac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	f003 0307 	and.w	r3, r3, #7
 800cacc:	009b      	lsls	r3, r3, #2
 800cace:	220f      	movs	r2, #15
 800cad0:	fa02 f303 	lsl.w	r3, r2, r3
 800cad4:	43db      	mvns	r3, r3
 800cad6:	69ba      	ldr	r2, [r7, #24]
 800cad8:	4013      	ands	r3, r2
 800cada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	691a      	ldr	r2, [r3, #16]
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	f003 0307 	and.w	r3, r3, #7
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	fa02 f303 	lsl.w	r3, r2, r3
 800caec:	69ba      	ldr	r2, [r7, #24]
 800caee:	4313      	orrs	r3, r2
 800caf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	08da      	lsrs	r2, r3, #3
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	3208      	adds	r2, #8
 800cafa:	69b9      	ldr	r1, [r7, #24]
 800cafc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	005b      	lsls	r3, r3, #1
 800cb0a:	2203      	movs	r2, #3
 800cb0c:	fa02 f303 	lsl.w	r3, r2, r3
 800cb10:	43db      	mvns	r3, r3
 800cb12:	69ba      	ldr	r2, [r7, #24]
 800cb14:	4013      	ands	r3, r2
 800cb16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	f003 0203 	and.w	r2, r3, #3
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	005b      	lsls	r3, r3, #1
 800cb24:	fa02 f303 	lsl.w	r3, r2, r3
 800cb28:	69ba      	ldr	r2, [r7, #24]
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	69ba      	ldr	r2, [r7, #24]
 800cb32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	f000 80a2 	beq.w	800cc86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cb42:	2300      	movs	r3, #0
 800cb44:	60fb      	str	r3, [r7, #12]
 800cb46:	4b57      	ldr	r3, [pc, #348]	@ (800cca4 <HAL_GPIO_Init+0x2e8>)
 800cb48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb4a:	4a56      	ldr	r2, [pc, #344]	@ (800cca4 <HAL_GPIO_Init+0x2e8>)
 800cb4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cb50:	6453      	str	r3, [r2, #68]	@ 0x44
 800cb52:	4b54      	ldr	r3, [pc, #336]	@ (800cca4 <HAL_GPIO_Init+0x2e8>)
 800cb54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb5a:	60fb      	str	r3, [r7, #12]
 800cb5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cb5e:	4a52      	ldr	r2, [pc, #328]	@ (800cca8 <HAL_GPIO_Init+0x2ec>)
 800cb60:	69fb      	ldr	r3, [r7, #28]
 800cb62:	089b      	lsrs	r3, r3, #2
 800cb64:	3302      	adds	r3, #2
 800cb66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	f003 0303 	and.w	r3, r3, #3
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	220f      	movs	r2, #15
 800cb76:	fa02 f303 	lsl.w	r3, r2, r3
 800cb7a:	43db      	mvns	r3, r3
 800cb7c:	69ba      	ldr	r2, [r7, #24]
 800cb7e:	4013      	ands	r3, r2
 800cb80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	4a49      	ldr	r2, [pc, #292]	@ (800ccac <HAL_GPIO_Init+0x2f0>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d019      	beq.n	800cbbe <HAL_GPIO_Init+0x202>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	4a48      	ldr	r2, [pc, #288]	@ (800ccb0 <HAL_GPIO_Init+0x2f4>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d013      	beq.n	800cbba <HAL_GPIO_Init+0x1fe>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	4a47      	ldr	r2, [pc, #284]	@ (800ccb4 <HAL_GPIO_Init+0x2f8>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d00d      	beq.n	800cbb6 <HAL_GPIO_Init+0x1fa>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	4a46      	ldr	r2, [pc, #280]	@ (800ccb8 <HAL_GPIO_Init+0x2fc>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d007      	beq.n	800cbb2 <HAL_GPIO_Init+0x1f6>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4a45      	ldr	r2, [pc, #276]	@ (800ccbc <HAL_GPIO_Init+0x300>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d101      	bne.n	800cbae <HAL_GPIO_Init+0x1f2>
 800cbaa:	2304      	movs	r3, #4
 800cbac:	e008      	b.n	800cbc0 <HAL_GPIO_Init+0x204>
 800cbae:	2307      	movs	r3, #7
 800cbb0:	e006      	b.n	800cbc0 <HAL_GPIO_Init+0x204>
 800cbb2:	2303      	movs	r3, #3
 800cbb4:	e004      	b.n	800cbc0 <HAL_GPIO_Init+0x204>
 800cbb6:	2302      	movs	r3, #2
 800cbb8:	e002      	b.n	800cbc0 <HAL_GPIO_Init+0x204>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e000      	b.n	800cbc0 <HAL_GPIO_Init+0x204>
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	69fa      	ldr	r2, [r7, #28]
 800cbc2:	f002 0203 	and.w	r2, r2, #3
 800cbc6:	0092      	lsls	r2, r2, #2
 800cbc8:	4093      	lsls	r3, r2
 800cbca:	69ba      	ldr	r2, [r7, #24]
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cbd0:	4935      	ldr	r1, [pc, #212]	@ (800cca8 <HAL_GPIO_Init+0x2ec>)
 800cbd2:	69fb      	ldr	r3, [r7, #28]
 800cbd4:	089b      	lsrs	r3, r3, #2
 800cbd6:	3302      	adds	r3, #2
 800cbd8:	69ba      	ldr	r2, [r7, #24]
 800cbda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cbde:	4b38      	ldr	r3, [pc, #224]	@ (800ccc0 <HAL_GPIO_Init+0x304>)
 800cbe0:	689b      	ldr	r3, [r3, #8]
 800cbe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	43db      	mvns	r3, r3
 800cbe8:	69ba      	ldr	r2, [r7, #24]
 800cbea:	4013      	ands	r3, r2
 800cbec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d003      	beq.n	800cc02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800cbfa:	69ba      	ldr	r2, [r7, #24]
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cc02:	4a2f      	ldr	r2, [pc, #188]	@ (800ccc0 <HAL_GPIO_Init+0x304>)
 800cc04:	69bb      	ldr	r3, [r7, #24]
 800cc06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cc08:	4b2d      	ldr	r3, [pc, #180]	@ (800ccc0 <HAL_GPIO_Init+0x304>)
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	43db      	mvns	r3, r3
 800cc12:	69ba      	ldr	r2, [r7, #24]
 800cc14:	4013      	ands	r3, r2
 800cc16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d003      	beq.n	800cc2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800cc24:	69ba      	ldr	r2, [r7, #24]
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cc2c:	4a24      	ldr	r2, [pc, #144]	@ (800ccc0 <HAL_GPIO_Init+0x304>)
 800cc2e:	69bb      	ldr	r3, [r7, #24]
 800cc30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800cc32:	4b23      	ldr	r3, [pc, #140]	@ (800ccc0 <HAL_GPIO_Init+0x304>)
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	43db      	mvns	r3, r3
 800cc3c:	69ba      	ldr	r2, [r7, #24]
 800cc3e:	4013      	ands	r3, r2
 800cc40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d003      	beq.n	800cc56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800cc4e:	69ba      	ldr	r2, [r7, #24]
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	4313      	orrs	r3, r2
 800cc54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800cc56:	4a1a      	ldr	r2, [pc, #104]	@ (800ccc0 <HAL_GPIO_Init+0x304>)
 800cc58:	69bb      	ldr	r3, [r7, #24]
 800cc5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cc5c:	4b18      	ldr	r3, [pc, #96]	@ (800ccc0 <HAL_GPIO_Init+0x304>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	43db      	mvns	r3, r3
 800cc66:	69ba      	ldr	r2, [r7, #24]
 800cc68:	4013      	ands	r3, r2
 800cc6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	685b      	ldr	r3, [r3, #4]
 800cc70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d003      	beq.n	800cc80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800cc78:	69ba      	ldr	r2, [r7, #24]
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800cc80:	4a0f      	ldr	r2, [pc, #60]	@ (800ccc0 <HAL_GPIO_Init+0x304>)
 800cc82:	69bb      	ldr	r3, [r7, #24]
 800cc84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	61fb      	str	r3, [r7, #28]
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	2b0f      	cmp	r3, #15
 800cc90:	f67f aea2 	bls.w	800c9d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop
 800cc98:	3724      	adds	r7, #36	@ 0x24
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop
 800cca4:	40023800 	.word	0x40023800
 800cca8:	40013800 	.word	0x40013800
 800ccac:	40020000 	.word	0x40020000
 800ccb0:	40020400 	.word	0x40020400
 800ccb4:	40020800 	.word	0x40020800
 800ccb8:	40020c00 	.word	0x40020c00
 800ccbc:	40021000 	.word	0x40021000
 800ccc0:	40013c00 	.word	0x40013c00

0800ccc4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b087      	sub	sp, #28
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ccda:	2300      	movs	r3, #0
 800ccdc:	617b      	str	r3, [r7, #20]
 800ccde:	e0bb      	b.n	800ce58 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cce0:	2201      	movs	r2, #1
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	fa02 f303 	lsl.w	r3, r2, r3
 800cce8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800ccea:	683a      	ldr	r2, [r7, #0]
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	4013      	ands	r3, r2
 800ccf0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800ccf2:	68fa      	ldr	r2, [r7, #12]
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	f040 80ab 	bne.w	800ce52 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800ccfc:	4a5c      	ldr	r2, [pc, #368]	@ (800ce70 <HAL_GPIO_DeInit+0x1ac>)
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	089b      	lsrs	r3, r3, #2
 800cd02:	3302      	adds	r3, #2
 800cd04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd08:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	f003 0303 	and.w	r3, r3, #3
 800cd10:	009b      	lsls	r3, r3, #2
 800cd12:	220f      	movs	r2, #15
 800cd14:	fa02 f303 	lsl.w	r3, r2, r3
 800cd18:	68ba      	ldr	r2, [r7, #8]
 800cd1a:	4013      	ands	r3, r2
 800cd1c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	4a54      	ldr	r2, [pc, #336]	@ (800ce74 <HAL_GPIO_DeInit+0x1b0>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d019      	beq.n	800cd5a <HAL_GPIO_DeInit+0x96>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	4a53      	ldr	r2, [pc, #332]	@ (800ce78 <HAL_GPIO_DeInit+0x1b4>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d013      	beq.n	800cd56 <HAL_GPIO_DeInit+0x92>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	4a52      	ldr	r2, [pc, #328]	@ (800ce7c <HAL_GPIO_DeInit+0x1b8>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d00d      	beq.n	800cd52 <HAL_GPIO_DeInit+0x8e>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	4a51      	ldr	r2, [pc, #324]	@ (800ce80 <HAL_GPIO_DeInit+0x1bc>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d007      	beq.n	800cd4e <HAL_GPIO_DeInit+0x8a>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	4a50      	ldr	r2, [pc, #320]	@ (800ce84 <HAL_GPIO_DeInit+0x1c0>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d101      	bne.n	800cd4a <HAL_GPIO_DeInit+0x86>
 800cd46:	2304      	movs	r3, #4
 800cd48:	e008      	b.n	800cd5c <HAL_GPIO_DeInit+0x98>
 800cd4a:	2307      	movs	r3, #7
 800cd4c:	e006      	b.n	800cd5c <HAL_GPIO_DeInit+0x98>
 800cd4e:	2303      	movs	r3, #3
 800cd50:	e004      	b.n	800cd5c <HAL_GPIO_DeInit+0x98>
 800cd52:	2302      	movs	r3, #2
 800cd54:	e002      	b.n	800cd5c <HAL_GPIO_DeInit+0x98>
 800cd56:	2301      	movs	r3, #1
 800cd58:	e000      	b.n	800cd5c <HAL_GPIO_DeInit+0x98>
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	697a      	ldr	r2, [r7, #20]
 800cd5e:	f002 0203 	and.w	r2, r2, #3
 800cd62:	0092      	lsls	r2, r2, #2
 800cd64:	4093      	lsls	r3, r2
 800cd66:	68ba      	ldr	r2, [r7, #8]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d132      	bne.n	800cdd2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800cd6c:	4b46      	ldr	r3, [pc, #280]	@ (800ce88 <HAL_GPIO_DeInit+0x1c4>)
 800cd6e:	681a      	ldr	r2, [r3, #0]
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	43db      	mvns	r3, r3
 800cd74:	4944      	ldr	r1, [pc, #272]	@ (800ce88 <HAL_GPIO_DeInit+0x1c4>)
 800cd76:	4013      	ands	r3, r2
 800cd78:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800cd7a:	4b43      	ldr	r3, [pc, #268]	@ (800ce88 <HAL_GPIO_DeInit+0x1c4>)
 800cd7c:	685a      	ldr	r2, [r3, #4]
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	43db      	mvns	r3, r3
 800cd82:	4941      	ldr	r1, [pc, #260]	@ (800ce88 <HAL_GPIO_DeInit+0x1c4>)
 800cd84:	4013      	ands	r3, r2
 800cd86:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800cd88:	4b3f      	ldr	r3, [pc, #252]	@ (800ce88 <HAL_GPIO_DeInit+0x1c4>)
 800cd8a:	68da      	ldr	r2, [r3, #12]
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	43db      	mvns	r3, r3
 800cd90:	493d      	ldr	r1, [pc, #244]	@ (800ce88 <HAL_GPIO_DeInit+0x1c4>)
 800cd92:	4013      	ands	r3, r2
 800cd94:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800cd96:	4b3c      	ldr	r3, [pc, #240]	@ (800ce88 <HAL_GPIO_DeInit+0x1c4>)
 800cd98:	689a      	ldr	r2, [r3, #8]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	43db      	mvns	r3, r3
 800cd9e:	493a      	ldr	r1, [pc, #232]	@ (800ce88 <HAL_GPIO_DeInit+0x1c4>)
 800cda0:	4013      	ands	r3, r2
 800cda2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	f003 0303 	and.w	r3, r3, #3
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	220f      	movs	r2, #15
 800cdae:	fa02 f303 	lsl.w	r3, r2, r3
 800cdb2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800cdb4:	4a2e      	ldr	r2, [pc, #184]	@ (800ce70 <HAL_GPIO_DeInit+0x1ac>)
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	089b      	lsrs	r3, r3, #2
 800cdba:	3302      	adds	r3, #2
 800cdbc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	43da      	mvns	r2, r3
 800cdc4:	482a      	ldr	r0, [pc, #168]	@ (800ce70 <HAL_GPIO_DeInit+0x1ac>)
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	089b      	lsrs	r3, r3, #2
 800cdca:	400a      	ands	r2, r1
 800cdcc:	3302      	adds	r3, #2
 800cdce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	2103      	movs	r1, #3
 800cddc:	fa01 f303 	lsl.w	r3, r1, r3
 800cde0:	43db      	mvns	r3, r3
 800cde2:	401a      	ands	r2, r3
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	08da      	lsrs	r2, r3, #3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	3208      	adds	r2, #8
 800cdf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	f003 0307 	and.w	r3, r3, #7
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	220f      	movs	r2, #15
 800cdfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ce02:	43db      	mvns	r3, r3
 800ce04:	697a      	ldr	r2, [r7, #20]
 800ce06:	08d2      	lsrs	r2, r2, #3
 800ce08:	4019      	ands	r1, r3
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	3208      	adds	r2, #8
 800ce0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	68da      	ldr	r2, [r3, #12]
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	005b      	lsls	r3, r3, #1
 800ce1a:	2103      	movs	r1, #3
 800ce1c:	fa01 f303 	lsl.w	r3, r1, r3
 800ce20:	43db      	mvns	r3, r3
 800ce22:	401a      	ands	r2, r3
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	685a      	ldr	r2, [r3, #4]
 800ce2c:	2101      	movs	r1, #1
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	fa01 f303 	lsl.w	r3, r1, r3
 800ce34:	43db      	mvns	r3, r3
 800ce36:	401a      	ands	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	689a      	ldr	r2, [r3, #8]
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	005b      	lsls	r3, r3, #1
 800ce44:	2103      	movs	r1, #3
 800ce46:	fa01 f303 	lsl.w	r3, r1, r3
 800ce4a:	43db      	mvns	r3, r3
 800ce4c:	401a      	ands	r2, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	3301      	adds	r3, #1
 800ce56:	617b      	str	r3, [r7, #20]
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	2b0f      	cmp	r3, #15
 800ce5c:	f67f af40 	bls.w	800cce0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800ce60:	bf00      	nop
 800ce62:	bf00      	nop
 800ce64:	371c      	adds	r7, #28
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop
 800ce70:	40013800 	.word	0x40013800
 800ce74:	40020000 	.word	0x40020000
 800ce78:	40020400 	.word	0x40020400
 800ce7c:	40020800 	.word	0x40020800
 800ce80:	40020c00 	.word	0x40020c00
 800ce84:	40021000 	.word	0x40021000
 800ce88:	40013c00 	.word	0x40013c00

0800ce8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b085      	sub	sp, #20
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	460b      	mov	r3, r1
 800ce96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	691a      	ldr	r2, [r3, #16]
 800ce9c:	887b      	ldrh	r3, [r7, #2]
 800ce9e:	4013      	ands	r3, r2
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d002      	beq.n	800ceaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800cea4:	2301      	movs	r3, #1
 800cea6:	73fb      	strb	r3, [r7, #15]
 800cea8:	e001      	b.n	800ceae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ceae:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3714      	adds	r7, #20
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr

0800cebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	460b      	mov	r3, r1
 800cec6:	807b      	strh	r3, [r7, #2]
 800cec8:	4613      	mov	r3, r2
 800ceca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cecc:	787b      	ldrb	r3, [r7, #1]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d003      	beq.n	800ceda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ced2:	887a      	ldrh	r2, [r7, #2]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ced8:	e003      	b.n	800cee2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ceda:	887b      	ldrh	r3, [r7, #2]
 800cedc:	041a      	lsls	r2, r3, #16
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	619a      	str	r2, [r3, #24]
}
 800cee2:	bf00      	nop
 800cee4:	370c      	adds	r7, #12
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ceee:	b480      	push	{r7}
 800cef0:	b085      	sub	sp, #20
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	460b      	mov	r3, r1
 800cef8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	695b      	ldr	r3, [r3, #20]
 800cefe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800cf00:	887a      	ldrh	r2, [r7, #2]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	4013      	ands	r3, r2
 800cf06:	041a      	lsls	r2, r3, #16
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	43d9      	mvns	r1, r3
 800cf0c:	887b      	ldrh	r3, [r7, #2]
 800cf0e:	400b      	ands	r3, r1
 800cf10:	431a      	orrs	r2, r3
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	619a      	str	r2, [r3, #24]
}
 800cf16:	bf00      	nop
 800cf18:	3714      	adds	r7, #20
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf20:	4770      	bx	lr
	...

0800cf24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d101      	bne.n	800cf36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cf32:	2301      	movs	r3, #1
 800cf34:	e12b      	b.n	800d18e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d106      	bne.n	800cf50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2200      	movs	r2, #0
 800cf46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 f95d 	bl	800d20a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2224      	movs	r2, #36	@ 0x24
 800cf54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f022 0201 	bic.w	r2, r2, #1
 800cf66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	681a      	ldr	r2, [r3, #0]
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cf76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cf86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800cf88:	f002 f93e 	bl	800f208 <HAL_RCC_GetPCLK1Freq>
 800cf8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	4a81      	ldr	r2, [pc, #516]	@ (800d198 <HAL_I2C_Init+0x274>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d807      	bhi.n	800cfa8 <HAL_I2C_Init+0x84>
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	4a80      	ldr	r2, [pc, #512]	@ (800d19c <HAL_I2C_Init+0x278>)
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	bf94      	ite	ls
 800cfa0:	2301      	movls	r3, #1
 800cfa2:	2300      	movhi	r3, #0
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	e006      	b.n	800cfb6 <HAL_I2C_Init+0x92>
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	4a7d      	ldr	r2, [pc, #500]	@ (800d1a0 <HAL_I2C_Init+0x27c>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	bf94      	ite	ls
 800cfb0:	2301      	movls	r3, #1
 800cfb2:	2300      	movhi	r3, #0
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d001      	beq.n	800cfbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e0e7      	b.n	800d18e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	4a78      	ldr	r2, [pc, #480]	@ (800d1a4 <HAL_I2C_Init+0x280>)
 800cfc2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfc6:	0c9b      	lsrs	r3, r3, #18
 800cfc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	68ba      	ldr	r2, [r7, #8]
 800cfda:	430a      	orrs	r2, r1
 800cfdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	6a1b      	ldr	r3, [r3, #32]
 800cfe4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	685b      	ldr	r3, [r3, #4]
 800cfec:	4a6a      	ldr	r2, [pc, #424]	@ (800d198 <HAL_I2C_Init+0x274>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d802      	bhi.n	800cff8 <HAL_I2C_Init+0xd4>
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	3301      	adds	r3, #1
 800cff6:	e009      	b.n	800d00c <HAL_I2C_Init+0xe8>
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800cffe:	fb02 f303 	mul.w	r3, r2, r3
 800d002:	4a69      	ldr	r2, [pc, #420]	@ (800d1a8 <HAL_I2C_Init+0x284>)
 800d004:	fba2 2303 	umull	r2, r3, r2, r3
 800d008:	099b      	lsrs	r3, r3, #6
 800d00a:	3301      	adds	r3, #1
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	6812      	ldr	r2, [r2, #0]
 800d010:	430b      	orrs	r3, r1
 800d012:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	69db      	ldr	r3, [r3, #28]
 800d01a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800d01e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	495c      	ldr	r1, [pc, #368]	@ (800d198 <HAL_I2C_Init+0x274>)
 800d028:	428b      	cmp	r3, r1
 800d02a:	d819      	bhi.n	800d060 <HAL_I2C_Init+0x13c>
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	1e59      	subs	r1, r3, #1
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	005b      	lsls	r3, r3, #1
 800d036:	fbb1 f3f3 	udiv	r3, r1, r3
 800d03a:	1c59      	adds	r1, r3, #1
 800d03c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d040:	400b      	ands	r3, r1
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00a      	beq.n	800d05c <HAL_I2C_Init+0x138>
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	1e59      	subs	r1, r3, #1
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	005b      	lsls	r3, r3, #1
 800d050:	fbb1 f3f3 	udiv	r3, r1, r3
 800d054:	3301      	adds	r3, #1
 800d056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d05a:	e051      	b.n	800d100 <HAL_I2C_Init+0x1dc>
 800d05c:	2304      	movs	r3, #4
 800d05e:	e04f      	b.n	800d100 <HAL_I2C_Init+0x1dc>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d111      	bne.n	800d08c <HAL_I2C_Init+0x168>
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	1e58      	subs	r0, r3, #1
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6859      	ldr	r1, [r3, #4]
 800d070:	460b      	mov	r3, r1
 800d072:	005b      	lsls	r3, r3, #1
 800d074:	440b      	add	r3, r1
 800d076:	fbb0 f3f3 	udiv	r3, r0, r3
 800d07a:	3301      	adds	r3, #1
 800d07c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d080:	2b00      	cmp	r3, #0
 800d082:	bf0c      	ite	eq
 800d084:	2301      	moveq	r3, #1
 800d086:	2300      	movne	r3, #0
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	e012      	b.n	800d0b2 <HAL_I2C_Init+0x18e>
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	1e58      	subs	r0, r3, #1
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6859      	ldr	r1, [r3, #4]
 800d094:	460b      	mov	r3, r1
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	440b      	add	r3, r1
 800d09a:	0099      	lsls	r1, r3, #2
 800d09c:	440b      	add	r3, r1
 800d09e:	fbb0 f3f3 	udiv	r3, r0, r3
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	bf0c      	ite	eq
 800d0ac:	2301      	moveq	r3, #1
 800d0ae:	2300      	movne	r3, #0
 800d0b0:	b2db      	uxtb	r3, r3
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d001      	beq.n	800d0ba <HAL_I2C_Init+0x196>
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	e022      	b.n	800d100 <HAL_I2C_Init+0x1dc>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	689b      	ldr	r3, [r3, #8]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d10e      	bne.n	800d0e0 <HAL_I2C_Init+0x1bc>
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	1e58      	subs	r0, r3, #1
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6859      	ldr	r1, [r3, #4]
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	005b      	lsls	r3, r3, #1
 800d0ce:	440b      	add	r3, r1
 800d0d0:	fbb0 f3f3 	udiv	r3, r0, r3
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0de:	e00f      	b.n	800d100 <HAL_I2C_Init+0x1dc>
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	1e58      	subs	r0, r3, #1
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6859      	ldr	r1, [r3, #4]
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	440b      	add	r3, r1
 800d0ee:	0099      	lsls	r1, r3, #2
 800d0f0:	440b      	add	r3, r1
 800d0f2:	fbb0 f3f3 	udiv	r3, r0, r3
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d100:	6879      	ldr	r1, [r7, #4]
 800d102:	6809      	ldr	r1, [r1, #0]
 800d104:	4313      	orrs	r3, r2
 800d106:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	69da      	ldr	r2, [r3, #28]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6a1b      	ldr	r3, [r3, #32]
 800d11a:	431a      	orrs	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	430a      	orrs	r2, r1
 800d122:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	689b      	ldr	r3, [r3, #8]
 800d12a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800d12e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	6911      	ldr	r1, [r2, #16]
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	68d2      	ldr	r2, [r2, #12]
 800d13a:	4311      	orrs	r1, r2
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	6812      	ldr	r2, [r2, #0]
 800d140:	430b      	orrs	r3, r1
 800d142:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	695a      	ldr	r2, [r3, #20]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	699b      	ldr	r3, [r3, #24]
 800d156:	431a      	orrs	r2, r3
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	430a      	orrs	r2, r1
 800d15e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f042 0201 	orr.w	r2, r2, #1
 800d16e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2220      	movs	r2, #32
 800d17a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2200      	movs	r2, #0
 800d182:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3710      	adds	r7, #16
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	000186a0 	.word	0x000186a0
 800d19c:	001e847f 	.word	0x001e847f
 800d1a0:	003d08ff 	.word	0x003d08ff
 800d1a4:	431bde83 	.word	0x431bde83
 800d1a8:	10624dd3 	.word	0x10624dd3

0800d1ac <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d101      	bne.n	800d1be <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	e021      	b.n	800d202 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2224      	movs	r2, #36	@ 0x24
 800d1c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f022 0201 	bic.w	r2, r2, #1
 800d1d4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 f821 	bl	800d21e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d200:	2300      	movs	r3, #0
}
 800d202:	4618      	mov	r0, r3
 800d204:	3708      	adds	r7, #8
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}

0800d20a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800d20a:	b480      	push	{r7}
 800d20c:	b083      	sub	sp, #12
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800d212:	bf00      	nop
 800d214:	370c      	adds	r7, #12
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr

0800d21e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800d21e:	b480      	push	{r7}
 800d220:	b083      	sub	sp, #12
 800d222:	af00      	add	r7, sp, #0
 800d224:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800d226:	bf00      	nop
 800d228:	370c      	adds	r7, #12
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr
	...

0800d234 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b088      	sub	sp, #32
 800d238:	af02      	add	r7, sp, #8
 800d23a:	60f8      	str	r0, [r7, #12]
 800d23c:	607a      	str	r2, [r7, #4]
 800d23e:	461a      	mov	r2, r3
 800d240:	460b      	mov	r3, r1
 800d242:	817b      	strh	r3, [r7, #10]
 800d244:	4613      	mov	r3, r2
 800d246:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d248:	f7ff fa48 	bl	800c6dc <HAL_GetTick>
 800d24c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d254:	b2db      	uxtb	r3, r3
 800d256:	2b20      	cmp	r3, #32
 800d258:	f040 80e0 	bne.w	800d41c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	9300      	str	r3, [sp, #0]
 800d260:	2319      	movs	r3, #25
 800d262:	2201      	movs	r2, #1
 800d264:	4970      	ldr	r1, [pc, #448]	@ (800d428 <HAL_I2C_Master_Transmit+0x1f4>)
 800d266:	68f8      	ldr	r0, [r7, #12]
 800d268:	f001 f928 	bl	800e4bc <I2C_WaitOnFlagUntilTimeout>
 800d26c:	4603      	mov	r3, r0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d001      	beq.n	800d276 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800d272:	2302      	movs	r3, #2
 800d274:	e0d3      	b.n	800d41e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d101      	bne.n	800d284 <HAL_I2C_Master_Transmit+0x50>
 800d280:	2302      	movs	r3, #2
 800d282:	e0cc      	b.n	800d41e <HAL_I2C_Master_Transmit+0x1ea>
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2201      	movs	r2, #1
 800d288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f003 0301 	and.w	r3, r3, #1
 800d296:	2b01      	cmp	r3, #1
 800d298:	d007      	beq.n	800d2aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f042 0201 	orr.w	r2, r2, #1
 800d2a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d2b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2221      	movs	r2, #33	@ 0x21
 800d2be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2210      	movs	r2, #16
 800d2c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	893a      	ldrh	r2, [r7, #8]
 800d2da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	4a50      	ldr	r2, [pc, #320]	@ (800d42c <HAL_I2C_Master_Transmit+0x1f8>)
 800d2ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d2ec:	8979      	ldrh	r1, [r7, #10]
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	6a3a      	ldr	r2, [r7, #32]
 800d2f2:	68f8      	ldr	r0, [r7, #12]
 800d2f4:	f000 fe14 	bl	800df20 <I2C_MasterRequestWrite>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d001      	beq.n	800d302 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800d2fe:	2301      	movs	r3, #1
 800d300:	e08d      	b.n	800d41e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d302:	2300      	movs	r3, #0
 800d304:	613b      	str	r3, [r7, #16]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	695b      	ldr	r3, [r3, #20]
 800d30c:	613b      	str	r3, [r7, #16]
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	699b      	ldr	r3, [r3, #24]
 800d314:	613b      	str	r3, [r7, #16]
 800d316:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800d318:	e066      	b.n	800d3e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d31a:	697a      	ldr	r2, [r7, #20]
 800d31c:	6a39      	ldr	r1, [r7, #32]
 800d31e:	68f8      	ldr	r0, [r7, #12]
 800d320:	f001 f9e6 	bl	800e6f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d00d      	beq.n	800d346 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d32e:	2b04      	cmp	r3, #4
 800d330:	d107      	bne.n	800d342 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d340:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d342:	2301      	movs	r3, #1
 800d344:	e06b      	b.n	800d41e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d34a:	781a      	ldrb	r2, [r3, #0]
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d356:	1c5a      	adds	r2, r3, #1
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d360:	b29b      	uxth	r3, r3
 800d362:	3b01      	subs	r3, #1
 800d364:	b29a      	uxth	r2, r3
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d36e:	3b01      	subs	r3, #1
 800d370:	b29a      	uxth	r2, r3
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	695b      	ldr	r3, [r3, #20]
 800d37c:	f003 0304 	and.w	r3, r3, #4
 800d380:	2b04      	cmp	r3, #4
 800d382:	d11b      	bne.n	800d3bc <HAL_I2C_Master_Transmit+0x188>
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d017      	beq.n	800d3bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d390:	781a      	ldrb	r2, [r3, #0]
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d39c:	1c5a      	adds	r2, r3, #1
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	3b01      	subs	r3, #1
 800d3aa:	b29a      	uxth	r2, r3
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d3b4:	3b01      	subs	r3, #1
 800d3b6:	b29a      	uxth	r2, r3
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d3bc:	697a      	ldr	r2, [r7, #20]
 800d3be:	6a39      	ldr	r1, [r7, #32]
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f001 f9dd 	bl	800e780 <I2C_WaitOnBTFFlagUntilTimeout>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00d      	beq.n	800d3e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3d0:	2b04      	cmp	r3, #4
 800d3d2:	d107      	bne.n	800d3e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d3e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e01a      	b.n	800d41e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d194      	bne.n	800d31a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	681a      	ldr	r2, [r3, #0]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d3fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	2220      	movs	r2, #32
 800d404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2200      	movs	r2, #0
 800d40c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2200      	movs	r2, #0
 800d414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d418:	2300      	movs	r3, #0
 800d41a:	e000      	b.n	800d41e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d41c:	2302      	movs	r3, #2
  }
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3718      	adds	r7, #24
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	00100002 	.word	0x00100002
 800d42c:	ffff0000 	.word	0xffff0000

0800d430 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b08c      	sub	sp, #48	@ 0x30
 800d434:	af02      	add	r7, sp, #8
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	607a      	str	r2, [r7, #4]
 800d43a:	461a      	mov	r2, r3
 800d43c:	460b      	mov	r3, r1
 800d43e:	817b      	strh	r3, [r7, #10]
 800d440:	4613      	mov	r3, r2
 800d442:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d444:	f7ff f94a 	bl	800c6dc <HAL_GetTick>
 800d448:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d450:	b2db      	uxtb	r3, r3
 800d452:	2b20      	cmp	r3, #32
 800d454:	f040 8217 	bne.w	800d886 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d45a:	9300      	str	r3, [sp, #0]
 800d45c:	2319      	movs	r3, #25
 800d45e:	2201      	movs	r2, #1
 800d460:	497c      	ldr	r1, [pc, #496]	@ (800d654 <HAL_I2C_Master_Receive+0x224>)
 800d462:	68f8      	ldr	r0, [r7, #12]
 800d464:	f001 f82a 	bl	800e4bc <I2C_WaitOnFlagUntilTimeout>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d001      	beq.n	800d472 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800d46e:	2302      	movs	r3, #2
 800d470:	e20a      	b.n	800d888 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d101      	bne.n	800d480 <HAL_I2C_Master_Receive+0x50>
 800d47c:	2302      	movs	r3, #2
 800d47e:	e203      	b.n	800d888 <HAL_I2C_Master_Receive+0x458>
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2201      	movs	r2, #1
 800d484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	2b01      	cmp	r3, #1
 800d494:	d007      	beq.n	800d4a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f042 0201 	orr.w	r2, r2, #1
 800d4a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d4b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2222      	movs	r2, #34	@ 0x22
 800d4ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2210      	movs	r2, #16
 800d4c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	687a      	ldr	r2, [r7, #4]
 800d4d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	893a      	ldrh	r2, [r7, #8]
 800d4d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d4dc:	b29a      	uxth	r2, r3
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	4a5c      	ldr	r2, [pc, #368]	@ (800d658 <HAL_I2C_Master_Receive+0x228>)
 800d4e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d4e8:	8979      	ldrh	r1, [r7, #10]
 800d4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4ee:	68f8      	ldr	r0, [r7, #12]
 800d4f0:	f000 fd98 	bl	800e024 <I2C_MasterRequestRead>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d001      	beq.n	800d4fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	e1c4      	b.n	800d888 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d502:	2b00      	cmp	r3, #0
 800d504:	d113      	bne.n	800d52e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d506:	2300      	movs	r3, #0
 800d508:	623b      	str	r3, [r7, #32]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	695b      	ldr	r3, [r3, #20]
 800d510:	623b      	str	r3, [r7, #32]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	699b      	ldr	r3, [r3, #24]
 800d518:	623b      	str	r3, [r7, #32]
 800d51a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d52a:	601a      	str	r2, [r3, #0]
 800d52c:	e198      	b.n	800d860 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d532:	2b01      	cmp	r3, #1
 800d534:	d11b      	bne.n	800d56e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	681a      	ldr	r2, [r3, #0]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d544:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d546:	2300      	movs	r3, #0
 800d548:	61fb      	str	r3, [r7, #28]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	695b      	ldr	r3, [r3, #20]
 800d550:	61fb      	str	r3, [r7, #28]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	699b      	ldr	r3, [r3, #24]
 800d558:	61fb      	str	r3, [r7, #28]
 800d55a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	681a      	ldr	r2, [r3, #0]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d56a:	601a      	str	r2, [r3, #0]
 800d56c:	e178      	b.n	800d860 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d572:	2b02      	cmp	r3, #2
 800d574:	d11b      	bne.n	800d5ae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d584:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	681a      	ldr	r2, [r3, #0]
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d594:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d596:	2300      	movs	r3, #0
 800d598:	61bb      	str	r3, [r7, #24]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	695b      	ldr	r3, [r3, #20]
 800d5a0:	61bb      	str	r3, [r7, #24]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	699b      	ldr	r3, [r3, #24]
 800d5a8:	61bb      	str	r3, [r7, #24]
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	e158      	b.n	800d860 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d5bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d5be:	2300      	movs	r3, #0
 800d5c0:	617b      	str	r3, [r7, #20]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	695b      	ldr	r3, [r3, #20]
 800d5c8:	617b      	str	r3, [r7, #20]
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	699b      	ldr	r3, [r3, #24]
 800d5d0:	617b      	str	r3, [r7, #20]
 800d5d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d5d4:	e144      	b.n	800d860 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5da:	2b03      	cmp	r3, #3
 800d5dc:	f200 80f1 	bhi.w	800d7c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d123      	bne.n	800d630 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d5e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d5ec:	68f8      	ldr	r0, [r7, #12]
 800d5ee:	f001 f90f 	bl	800e810 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d001      	beq.n	800d5fc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e145      	b.n	800d888 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	691a      	ldr	r2, [r3, #16]
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d606:	b2d2      	uxtb	r2, r2
 800d608:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d60e:	1c5a      	adds	r2, r3, #1
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d618:	3b01      	subs	r3, #1
 800d61a:	b29a      	uxth	r2, r3
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d624:	b29b      	uxth	r3, r3
 800d626:	3b01      	subs	r3, #1
 800d628:	b29a      	uxth	r2, r3
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d62e:	e117      	b.n	800d860 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d634:	2b02      	cmp	r3, #2
 800d636:	d14e      	bne.n	800d6d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d63a:	9300      	str	r3, [sp, #0]
 800d63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d63e:	2200      	movs	r2, #0
 800d640:	4906      	ldr	r1, [pc, #24]	@ (800d65c <HAL_I2C_Master_Receive+0x22c>)
 800d642:	68f8      	ldr	r0, [r7, #12]
 800d644:	f000 ff3a 	bl	800e4bc <I2C_WaitOnFlagUntilTimeout>
 800d648:	4603      	mov	r3, r0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d008      	beq.n	800d660 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800d64e:	2301      	movs	r3, #1
 800d650:	e11a      	b.n	800d888 <HAL_I2C_Master_Receive+0x458>
 800d652:	bf00      	nop
 800d654:	00100002 	.word	0x00100002
 800d658:	ffff0000 	.word	0xffff0000
 800d65c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	681a      	ldr	r2, [r3, #0]
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d66e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	691a      	ldr	r2, [r3, #16]
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d67a:	b2d2      	uxtb	r2, r2
 800d67c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d682:	1c5a      	adds	r2, r3, #1
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d68c:	3b01      	subs	r3, #1
 800d68e:	b29a      	uxth	r2, r3
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d698:	b29b      	uxth	r3, r3
 800d69a:	3b01      	subs	r3, #1
 800d69c:	b29a      	uxth	r2, r3
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	691a      	ldr	r2, [r3, #16]
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6ac:	b2d2      	uxtb	r2, r2
 800d6ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6b4:	1c5a      	adds	r2, r3, #1
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6be:	3b01      	subs	r3, #1
 800d6c0:	b29a      	uxth	r2, r3
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6ca:	b29b      	uxth	r3, r3
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	b29a      	uxth	r2, r3
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d6d4:	e0c4      	b.n	800d860 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d8:	9300      	str	r3, [sp, #0]
 800d6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6dc:	2200      	movs	r2, #0
 800d6de:	496c      	ldr	r1, [pc, #432]	@ (800d890 <HAL_I2C_Master_Receive+0x460>)
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f000 feeb 	bl	800e4bc <I2C_WaitOnFlagUntilTimeout>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d001      	beq.n	800d6f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	e0cb      	b.n	800d888 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d6fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	691a      	ldr	r2, [r3, #16]
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d70a:	b2d2      	uxtb	r2, r2
 800d70c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d712:	1c5a      	adds	r2, r3, #1
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d71c:	3b01      	subs	r3, #1
 800d71e:	b29a      	uxth	r2, r3
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d728:	b29b      	uxth	r3, r3
 800d72a:	3b01      	subs	r3, #1
 800d72c:	b29a      	uxth	r2, r3
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d734:	9300      	str	r3, [sp, #0]
 800d736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d738:	2200      	movs	r2, #0
 800d73a:	4955      	ldr	r1, [pc, #340]	@ (800d890 <HAL_I2C_Master_Receive+0x460>)
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	f000 febd 	bl	800e4bc <I2C_WaitOnFlagUntilTimeout>
 800d742:	4603      	mov	r3, r0
 800d744:	2b00      	cmp	r3, #0
 800d746:	d001      	beq.n	800d74c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800d748:	2301      	movs	r3, #1
 800d74a:	e09d      	b.n	800d888 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	681a      	ldr	r2, [r3, #0]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d75a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	691a      	ldr	r2, [r3, #16]
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d766:	b2d2      	uxtb	r2, r2
 800d768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d76e:	1c5a      	adds	r2, r3, #1
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d778:	3b01      	subs	r3, #1
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d784:	b29b      	uxth	r3, r3
 800d786:	3b01      	subs	r3, #1
 800d788:	b29a      	uxth	r2, r3
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	691a      	ldr	r2, [r3, #16]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d798:	b2d2      	uxtb	r2, r2
 800d79a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7a0:	1c5a      	adds	r2, r3, #1
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7aa:	3b01      	subs	r3, #1
 800d7ac:	b29a      	uxth	r2, r3
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	3b01      	subs	r3, #1
 800d7ba:	b29a      	uxth	r2, r3
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d7c0:	e04e      	b.n	800d860 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d7c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d7c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d7c6:	68f8      	ldr	r0, [r7, #12]
 800d7c8:	f001 f822 	bl	800e810 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d001      	beq.n	800d7d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	e058      	b.n	800d888 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	691a      	ldr	r2, [r3, #16]
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7e0:	b2d2      	uxtb	r2, r2
 800d7e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7e8:	1c5a      	adds	r2, r3, #1
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7f2:	3b01      	subs	r3, #1
 800d7f4:	b29a      	uxth	r2, r3
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	3b01      	subs	r3, #1
 800d802:	b29a      	uxth	r2, r3
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	695b      	ldr	r3, [r3, #20]
 800d80e:	f003 0304 	and.w	r3, r3, #4
 800d812:	2b04      	cmp	r3, #4
 800d814:	d124      	bne.n	800d860 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d81a:	2b03      	cmp	r3, #3
 800d81c:	d107      	bne.n	800d82e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d82c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	691a      	ldr	r2, [r3, #16]
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d838:	b2d2      	uxtb	r2, r2
 800d83a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d840:	1c5a      	adds	r2, r3, #1
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d84a:	3b01      	subs	r3, #1
 800d84c:	b29a      	uxth	r2, r3
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d856:	b29b      	uxth	r3, r3
 800d858:	3b01      	subs	r3, #1
 800d85a:	b29a      	uxth	r2, r3
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d864:	2b00      	cmp	r3, #0
 800d866:	f47f aeb6 	bne.w	800d5d6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2220      	movs	r2, #32
 800d86e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2200      	movs	r2, #0
 800d876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2200      	movs	r2, #0
 800d87e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d882:	2300      	movs	r3, #0
 800d884:	e000      	b.n	800d888 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800d886:	2302      	movs	r3, #2
  }
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3728      	adds	r7, #40	@ 0x28
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	00010004 	.word	0x00010004

0800d894 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b088      	sub	sp, #32
 800d898:	af02      	add	r7, sp, #8
 800d89a:	60f8      	str	r0, [r7, #12]
 800d89c:	4608      	mov	r0, r1
 800d89e:	4611      	mov	r1, r2
 800d8a0:	461a      	mov	r2, r3
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	817b      	strh	r3, [r7, #10]
 800d8a6:	460b      	mov	r3, r1
 800d8a8:	813b      	strh	r3, [r7, #8]
 800d8aa:	4613      	mov	r3, r2
 800d8ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d8ae:	f7fe ff15 	bl	800c6dc <HAL_GetTick>
 800d8b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	2b20      	cmp	r3, #32
 800d8be:	f040 80d9 	bne.w	800da74 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	9300      	str	r3, [sp, #0]
 800d8c6:	2319      	movs	r3, #25
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	496d      	ldr	r1, [pc, #436]	@ (800da80 <HAL_I2C_Mem_Write+0x1ec>)
 800d8cc:	68f8      	ldr	r0, [r7, #12]
 800d8ce:	f000 fdf5 	bl	800e4bc <I2C_WaitOnFlagUntilTimeout>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d001      	beq.n	800d8dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d8d8:	2302      	movs	r3, #2
 800d8da:	e0cc      	b.n	800da76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d8e2:	2b01      	cmp	r3, #1
 800d8e4:	d101      	bne.n	800d8ea <HAL_I2C_Mem_Write+0x56>
 800d8e6:	2302      	movs	r3, #2
 800d8e8:	e0c5      	b.n	800da76 <HAL_I2C_Mem_Write+0x1e2>
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f003 0301 	and.w	r3, r3, #1
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d007      	beq.n	800d910 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f042 0201 	orr.w	r2, r2, #1
 800d90e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d91e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2221      	movs	r2, #33	@ 0x21
 800d924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2240      	movs	r2, #64	@ 0x40
 800d92c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2200      	movs	r2, #0
 800d934:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	6a3a      	ldr	r2, [r7, #32]
 800d93a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d940:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d946:	b29a      	uxth	r2, r3
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	4a4d      	ldr	r2, [pc, #308]	@ (800da84 <HAL_I2C_Mem_Write+0x1f0>)
 800d950:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d952:	88f8      	ldrh	r0, [r7, #6]
 800d954:	893a      	ldrh	r2, [r7, #8]
 800d956:	8979      	ldrh	r1, [r7, #10]
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	9301      	str	r3, [sp, #4]
 800d95c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d95e:	9300      	str	r3, [sp, #0]
 800d960:	4603      	mov	r3, r0
 800d962:	68f8      	ldr	r0, [r7, #12]
 800d964:	f000 fc2c 	bl	800e1c0 <I2C_RequestMemoryWrite>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d052      	beq.n	800da14 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d96e:	2301      	movs	r3, #1
 800d970:	e081      	b.n	800da76 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d972:	697a      	ldr	r2, [r7, #20]
 800d974:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d976:	68f8      	ldr	r0, [r7, #12]
 800d978:	f000 feba 	bl	800e6f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d00d      	beq.n	800d99e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d986:	2b04      	cmp	r3, #4
 800d988:	d107      	bne.n	800d99a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	681a      	ldr	r2, [r3, #0]
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d998:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d99a:	2301      	movs	r3, #1
 800d99c:	e06b      	b.n	800da76 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9a2:	781a      	ldrb	r2, [r3, #0]
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9ae:	1c5a      	adds	r2, r3, #1
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d9b8:	3b01      	subs	r3, #1
 800d9ba:	b29a      	uxth	r2, r3
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	3b01      	subs	r3, #1
 800d9c8:	b29a      	uxth	r2, r3
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	695b      	ldr	r3, [r3, #20]
 800d9d4:	f003 0304 	and.w	r3, r3, #4
 800d9d8:	2b04      	cmp	r3, #4
 800d9da:	d11b      	bne.n	800da14 <HAL_I2C_Mem_Write+0x180>
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d017      	beq.n	800da14 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9e8:	781a      	ldrb	r2, [r3, #0]
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9f4:	1c5a      	adds	r2, r3, #1
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d9fe:	3b01      	subs	r3, #1
 800da00:	b29a      	uxth	r2, r3
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	3b01      	subs	r3, #1
 800da0e:	b29a      	uxth	r2, r3
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d1aa      	bne.n	800d972 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800da1c:	697a      	ldr	r2, [r7, #20]
 800da1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800da20:	68f8      	ldr	r0, [r7, #12]
 800da22:	f000 fead 	bl	800e780 <I2C_WaitOnBTFFlagUntilTimeout>
 800da26:	4603      	mov	r3, r0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d00d      	beq.n	800da48 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da30:	2b04      	cmp	r3, #4
 800da32:	d107      	bne.n	800da44 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800da42:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800da44:	2301      	movs	r3, #1
 800da46:	e016      	b.n	800da76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	681a      	ldr	r2, [r3, #0]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800da56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2220      	movs	r2, #32
 800da5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2200      	movs	r2, #0
 800da64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	2200      	movs	r2, #0
 800da6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800da70:	2300      	movs	r3, #0
 800da72:	e000      	b.n	800da76 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800da74:	2302      	movs	r3, #2
  }
}
 800da76:	4618      	mov	r0, r3
 800da78:	3718      	adds	r7, #24
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
 800da7e:	bf00      	nop
 800da80:	00100002 	.word	0x00100002
 800da84:	ffff0000 	.word	0xffff0000

0800da88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b08c      	sub	sp, #48	@ 0x30
 800da8c:	af02      	add	r7, sp, #8
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	4608      	mov	r0, r1
 800da92:	4611      	mov	r1, r2
 800da94:	461a      	mov	r2, r3
 800da96:	4603      	mov	r3, r0
 800da98:	817b      	strh	r3, [r7, #10]
 800da9a:	460b      	mov	r3, r1
 800da9c:	813b      	strh	r3, [r7, #8]
 800da9e:	4613      	mov	r3, r2
 800daa0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800daa2:	f7fe fe1b 	bl	800c6dc <HAL_GetTick>
 800daa6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800daae:	b2db      	uxtb	r3, r3
 800dab0:	2b20      	cmp	r3, #32
 800dab2:	f040 8214 	bne.w	800dede <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800dab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dab8:	9300      	str	r3, [sp, #0]
 800daba:	2319      	movs	r3, #25
 800dabc:	2201      	movs	r2, #1
 800dabe:	497b      	ldr	r1, [pc, #492]	@ (800dcac <HAL_I2C_Mem_Read+0x224>)
 800dac0:	68f8      	ldr	r0, [r7, #12]
 800dac2:	f000 fcfb 	bl	800e4bc <I2C_WaitOnFlagUntilTimeout>
 800dac6:	4603      	mov	r3, r0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d001      	beq.n	800dad0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800dacc:	2302      	movs	r3, #2
 800dace:	e207      	b.n	800dee0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	d101      	bne.n	800dade <HAL_I2C_Mem_Read+0x56>
 800dada:	2302      	movs	r3, #2
 800dadc:	e200      	b.n	800dee0 <HAL_I2C_Mem_Read+0x458>
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2201      	movs	r2, #1
 800dae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f003 0301 	and.w	r3, r3, #1
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d007      	beq.n	800db04 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	f042 0201 	orr.w	r2, r2, #1
 800db02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800db12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	2222      	movs	r2, #34	@ 0x22
 800db18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2240      	movs	r2, #64	@ 0x40
 800db20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2200      	movs	r2, #0
 800db28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800db34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db3a:	b29a      	uxth	r2, r3
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	4a5b      	ldr	r2, [pc, #364]	@ (800dcb0 <HAL_I2C_Mem_Read+0x228>)
 800db44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800db46:	88f8      	ldrh	r0, [r7, #6]
 800db48:	893a      	ldrh	r2, [r7, #8]
 800db4a:	8979      	ldrh	r1, [r7, #10]
 800db4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db4e:	9301      	str	r3, [sp, #4]
 800db50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db52:	9300      	str	r3, [sp, #0]
 800db54:	4603      	mov	r3, r0
 800db56:	68f8      	ldr	r0, [r7, #12]
 800db58:	f000 fbc8 	bl	800e2ec <I2C_RequestMemoryRead>
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d001      	beq.n	800db66 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800db62:	2301      	movs	r3, #1
 800db64:	e1bc      	b.n	800dee0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d113      	bne.n	800db96 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800db6e:	2300      	movs	r3, #0
 800db70:	623b      	str	r3, [r7, #32]
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	695b      	ldr	r3, [r3, #20]
 800db78:	623b      	str	r3, [r7, #32]
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	699b      	ldr	r3, [r3, #24]
 800db80:	623b      	str	r3, [r7, #32]
 800db82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800db92:	601a      	str	r2, [r3, #0]
 800db94:	e190      	b.n	800deb8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d11b      	bne.n	800dbd6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	681a      	ldr	r2, [r3, #0]
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dbac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dbae:	2300      	movs	r3, #0
 800dbb0:	61fb      	str	r3, [r7, #28]
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	695b      	ldr	r3, [r3, #20]
 800dbb8:	61fb      	str	r3, [r7, #28]
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	699b      	ldr	r3, [r3, #24]
 800dbc0:	61fb      	str	r3, [r7, #28]
 800dbc2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dbd2:	601a      	str	r2, [r3, #0]
 800dbd4:	e170      	b.n	800deb8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dbda:	2b02      	cmp	r3, #2
 800dbdc:	d11b      	bne.n	800dc16 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	681a      	ldr	r2, [r3, #0]
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dbec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dbfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dbfe:	2300      	movs	r3, #0
 800dc00:	61bb      	str	r3, [r7, #24]
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	695b      	ldr	r3, [r3, #20]
 800dc08:	61bb      	str	r3, [r7, #24]
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	699b      	ldr	r3, [r3, #24]
 800dc10:	61bb      	str	r3, [r7, #24]
 800dc12:	69bb      	ldr	r3, [r7, #24]
 800dc14:	e150      	b.n	800deb8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dc16:	2300      	movs	r3, #0
 800dc18:	617b      	str	r3, [r7, #20]
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	695b      	ldr	r3, [r3, #20]
 800dc20:	617b      	str	r3, [r7, #20]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	699b      	ldr	r3, [r3, #24]
 800dc28:	617b      	str	r3, [r7, #20]
 800dc2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800dc2c:	e144      	b.n	800deb8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc32:	2b03      	cmp	r3, #3
 800dc34:	f200 80f1 	bhi.w	800de1a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d123      	bne.n	800dc88 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dc40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dc44:	68f8      	ldr	r0, [r7, #12]
 800dc46:	f000 fde3 	bl	800e810 <I2C_WaitOnRXNEFlagUntilTimeout>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d001      	beq.n	800dc54 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800dc50:	2301      	movs	r3, #1
 800dc52:	e145      	b.n	800dee0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	691a      	ldr	r2, [r3, #16]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc5e:	b2d2      	uxtb	r2, r2
 800dc60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc66:	1c5a      	adds	r2, r3, #1
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc70:	3b01      	subs	r3, #1
 800dc72:	b29a      	uxth	r2, r3
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	3b01      	subs	r3, #1
 800dc80:	b29a      	uxth	r2, r3
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dc86:	e117      	b.n	800deb8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc8c:	2b02      	cmp	r3, #2
 800dc8e:	d14e      	bne.n	800dd2e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800dc90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc92:	9300      	str	r3, [sp, #0]
 800dc94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc96:	2200      	movs	r2, #0
 800dc98:	4906      	ldr	r1, [pc, #24]	@ (800dcb4 <HAL_I2C_Mem_Read+0x22c>)
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	f000 fc0e 	bl	800e4bc <I2C_WaitOnFlagUntilTimeout>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d008      	beq.n	800dcb8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800dca6:	2301      	movs	r3, #1
 800dca8:	e11a      	b.n	800dee0 <HAL_I2C_Mem_Read+0x458>
 800dcaa:	bf00      	nop
 800dcac:	00100002 	.word	0x00100002
 800dcb0:	ffff0000 	.word	0xffff0000
 800dcb4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dcc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	691a      	ldr	r2, [r3, #16]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcd2:	b2d2      	uxtb	r2, r2
 800dcd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcda:	1c5a      	adds	r2, r3, #1
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dce4:	3b01      	subs	r3, #1
 800dce6:	b29a      	uxth	r2, r3
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	3b01      	subs	r3, #1
 800dcf4:	b29a      	uxth	r2, r3
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	691a      	ldr	r2, [r3, #16]
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd04:	b2d2      	uxtb	r2, r2
 800dd06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd0c:	1c5a      	adds	r2, r3, #1
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd16:	3b01      	subs	r3, #1
 800dd18:	b29a      	uxth	r2, r3
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	3b01      	subs	r3, #1
 800dd26:	b29a      	uxth	r2, r3
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dd2c:	e0c4      	b.n	800deb8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800dd2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd30:	9300      	str	r3, [sp, #0]
 800dd32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd34:	2200      	movs	r2, #0
 800dd36:	496c      	ldr	r1, [pc, #432]	@ (800dee8 <HAL_I2C_Mem_Read+0x460>)
 800dd38:	68f8      	ldr	r0, [r7, #12]
 800dd3a:	f000 fbbf 	bl	800e4bc <I2C_WaitOnFlagUntilTimeout>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d001      	beq.n	800dd48 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800dd44:	2301      	movs	r3, #1
 800dd46:	e0cb      	b.n	800dee0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dd56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	691a      	ldr	r2, [r3, #16]
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd62:	b2d2      	uxtb	r2, r2
 800dd64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd6a:	1c5a      	adds	r2, r3, #1
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd74:	3b01      	subs	r3, #1
 800dd76:	b29a      	uxth	r2, r3
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	3b01      	subs	r3, #1
 800dd84:	b29a      	uxth	r2, r3
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800dd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd8c:	9300      	str	r3, [sp, #0]
 800dd8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd90:	2200      	movs	r2, #0
 800dd92:	4955      	ldr	r1, [pc, #340]	@ (800dee8 <HAL_I2C_Mem_Read+0x460>)
 800dd94:	68f8      	ldr	r0, [r7, #12]
 800dd96:	f000 fb91 	bl	800e4bc <I2C_WaitOnFlagUntilTimeout>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d001      	beq.n	800dda4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800dda0:	2301      	movs	r3, #1
 800dda2:	e09d      	b.n	800dee0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ddb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	691a      	ldr	r2, [r3, #16]
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddbe:	b2d2      	uxtb	r2, r2
 800ddc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddc6:	1c5a      	adds	r2, r3, #1
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ddd0:	3b01      	subs	r3, #1
 800ddd2:	b29a      	uxth	r2, r3
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	3b01      	subs	r3, #1
 800dde0:	b29a      	uxth	r2, r3
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	691a      	ldr	r2, [r3, #16]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddf0:	b2d2      	uxtb	r2, r2
 800ddf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddf8:	1c5a      	adds	r2, r3, #1
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de02:	3b01      	subs	r3, #1
 800de04:	b29a      	uxth	r2, r3
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de0e:	b29b      	uxth	r3, r3
 800de10:	3b01      	subs	r3, #1
 800de12:	b29a      	uxth	r2, r3
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800de18:	e04e      	b.n	800deb8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800de1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de1c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800de1e:	68f8      	ldr	r0, [r7, #12]
 800de20:	f000 fcf6 	bl	800e810 <I2C_WaitOnRXNEFlagUntilTimeout>
 800de24:	4603      	mov	r3, r0
 800de26:	2b00      	cmp	r3, #0
 800de28:	d001      	beq.n	800de2e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800de2a:	2301      	movs	r3, #1
 800de2c:	e058      	b.n	800dee0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	691a      	ldr	r2, [r3, #16]
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de38:	b2d2      	uxtb	r2, r2
 800de3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de40:	1c5a      	adds	r2, r3, #1
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de4a:	3b01      	subs	r3, #1
 800de4c:	b29a      	uxth	r2, r3
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de56:	b29b      	uxth	r3, r3
 800de58:	3b01      	subs	r3, #1
 800de5a:	b29a      	uxth	r2, r3
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	695b      	ldr	r3, [r3, #20]
 800de66:	f003 0304 	and.w	r3, r3, #4
 800de6a:	2b04      	cmp	r3, #4
 800de6c:	d124      	bne.n	800deb8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de72:	2b03      	cmp	r3, #3
 800de74:	d107      	bne.n	800de86 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800de84:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	691a      	ldr	r2, [r3, #16]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de90:	b2d2      	uxtb	r2, r2
 800de92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de98:	1c5a      	adds	r2, r3, #1
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dea2:	3b01      	subs	r3, #1
 800dea4:	b29a      	uxth	r2, r3
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800deae:	b29b      	uxth	r3, r3
 800deb0:	3b01      	subs	r3, #1
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800debc:	2b00      	cmp	r3, #0
 800debe:	f47f aeb6 	bne.w	800dc2e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2220      	movs	r2, #32
 800dec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2200      	movs	r2, #0
 800dece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2200      	movs	r2, #0
 800ded6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800deda:	2300      	movs	r3, #0
 800dedc:	e000      	b.n	800dee0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800dede:	2302      	movs	r3, #2
  }
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3728      	adds	r7, #40	@ 0x28
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	00010004 	.word	0x00010004

0800deec <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800deec:	b480      	push	{r7}
 800deee:	b083      	sub	sp, #12
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800defa:	b2db      	uxtb	r3, r3
}
 800defc:	4618      	mov	r0, r3
 800defe:	370c      	adds	r7, #12
 800df00:	46bd      	mov	sp, r7
 800df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df06:	4770      	bx	lr

0800df08 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800df08:	b480      	push	{r7}
 800df0a:	b083      	sub	sp, #12
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800df14:	4618      	mov	r0, r3
 800df16:	370c      	adds	r7, #12
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr

0800df20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b088      	sub	sp, #32
 800df24:	af02      	add	r7, sp, #8
 800df26:	60f8      	str	r0, [r7, #12]
 800df28:	607a      	str	r2, [r7, #4]
 800df2a:	603b      	str	r3, [r7, #0]
 800df2c:	460b      	mov	r3, r1
 800df2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	2b08      	cmp	r3, #8
 800df3a:	d006      	beq.n	800df4a <I2C_MasterRequestWrite+0x2a>
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	2b01      	cmp	r3, #1
 800df40:	d003      	beq.n	800df4a <I2C_MasterRequestWrite+0x2a>
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800df48:	d108      	bne.n	800df5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	681a      	ldr	r2, [r3, #0]
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800df58:	601a      	str	r2, [r3, #0]
 800df5a:	e00b      	b.n	800df74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df60:	2b12      	cmp	r3, #18
 800df62:	d107      	bne.n	800df74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800df72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	9300      	str	r3, [sp, #0]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2200      	movs	r2, #0
 800df7c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800df80:	68f8      	ldr	r0, [r7, #12]
 800df82:	f000 fa9b 	bl	800e4bc <I2C_WaitOnFlagUntilTimeout>
 800df86:	4603      	mov	r3, r0
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d00d      	beq.n	800dfa8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800df9a:	d103      	bne.n	800dfa4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dfa2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800dfa4:	2303      	movs	r3, #3
 800dfa6:	e035      	b.n	800e014 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	691b      	ldr	r3, [r3, #16]
 800dfac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dfb0:	d108      	bne.n	800dfc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800dfb2:	897b      	ldrh	r3, [r7, #10]
 800dfb4:	b2db      	uxtb	r3, r3
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800dfc0:	611a      	str	r2, [r3, #16]
 800dfc2:	e01b      	b.n	800dffc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800dfc4:	897b      	ldrh	r3, [r7, #10]
 800dfc6:	11db      	asrs	r3, r3, #7
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	f003 0306 	and.w	r3, r3, #6
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	f063 030f 	orn	r3, r3, #15
 800dfd4:	b2da      	uxtb	r2, r3
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	687a      	ldr	r2, [r7, #4]
 800dfe0:	490e      	ldr	r1, [pc, #56]	@ (800e01c <I2C_MasterRequestWrite+0xfc>)
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f000 fae4 	bl	800e5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d001      	beq.n	800dff2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800dfee:	2301      	movs	r3, #1
 800dff0:	e010      	b.n	800e014 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800dff2:	897b      	ldrh	r3, [r7, #10]
 800dff4:	b2da      	uxtb	r2, r3
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	4907      	ldr	r1, [pc, #28]	@ (800e020 <I2C_MasterRequestWrite+0x100>)
 800e002:	68f8      	ldr	r0, [r7, #12]
 800e004:	f000 fad4 	bl	800e5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e008:	4603      	mov	r3, r0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d001      	beq.n	800e012 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800e00e:	2301      	movs	r3, #1
 800e010:	e000      	b.n	800e014 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800e012:	2300      	movs	r3, #0
}
 800e014:	4618      	mov	r0, r3
 800e016:	3718      	adds	r7, #24
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	00010008 	.word	0x00010008
 800e020:	00010002 	.word	0x00010002

0800e024 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b088      	sub	sp, #32
 800e028:	af02      	add	r7, sp, #8
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	607a      	str	r2, [r7, #4]
 800e02e:	603b      	str	r3, [r7, #0]
 800e030:	460b      	mov	r3, r1
 800e032:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e038:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e048:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800e04a:	697b      	ldr	r3, [r7, #20]
 800e04c:	2b08      	cmp	r3, #8
 800e04e:	d006      	beq.n	800e05e <I2C_MasterRequestRead+0x3a>
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	2b01      	cmp	r3, #1
 800e054:	d003      	beq.n	800e05e <I2C_MasterRequestRead+0x3a>
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800e05c:	d108      	bne.n	800e070 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	681a      	ldr	r2, [r3, #0]
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e06c:	601a      	str	r2, [r3, #0]
 800e06e:	e00b      	b.n	800e088 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e074:	2b11      	cmp	r3, #17
 800e076:	d107      	bne.n	800e088 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	681a      	ldr	r2, [r3, #0]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e086:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	9300      	str	r3, [sp, #0]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2200      	movs	r2, #0
 800e090:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e094:	68f8      	ldr	r0, [r7, #12]
 800e096:	f000 fa11 	bl	800e4bc <I2C_WaitOnFlagUntilTimeout>
 800e09a:	4603      	mov	r3, r0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d00d      	beq.n	800e0bc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e0aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0ae:	d103      	bne.n	800e0b8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e0b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e0b8:	2303      	movs	r3, #3
 800e0ba:	e079      	b.n	800e1b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	691b      	ldr	r3, [r3, #16]
 800e0c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e0c4:	d108      	bne.n	800e0d8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e0c6:	897b      	ldrh	r3, [r7, #10]
 800e0c8:	b2db      	uxtb	r3, r3
 800e0ca:	f043 0301 	orr.w	r3, r3, #1
 800e0ce:	b2da      	uxtb	r2, r3
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	611a      	str	r2, [r3, #16]
 800e0d6:	e05f      	b.n	800e198 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800e0d8:	897b      	ldrh	r3, [r7, #10]
 800e0da:	11db      	asrs	r3, r3, #7
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	f003 0306 	and.w	r3, r3, #6
 800e0e2:	b2db      	uxtb	r3, r3
 800e0e4:	f063 030f 	orn	r3, r3, #15
 800e0e8:	b2da      	uxtb	r2, r3
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	4930      	ldr	r1, [pc, #192]	@ (800e1b8 <I2C_MasterRequestRead+0x194>)
 800e0f6:	68f8      	ldr	r0, [r7, #12]
 800e0f8:	f000 fa5a 	bl	800e5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d001      	beq.n	800e106 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800e102:	2301      	movs	r3, #1
 800e104:	e054      	b.n	800e1b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800e106:	897b      	ldrh	r3, [r7, #10]
 800e108:	b2da      	uxtb	r2, r3
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	4929      	ldr	r1, [pc, #164]	@ (800e1bc <I2C_MasterRequestRead+0x198>)
 800e116:	68f8      	ldr	r0, [r7, #12]
 800e118:	f000 fa4a 	bl	800e5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e11c:	4603      	mov	r3, r0
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d001      	beq.n	800e126 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800e122:	2301      	movs	r3, #1
 800e124:	e044      	b.n	800e1b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e126:	2300      	movs	r3, #0
 800e128:	613b      	str	r3, [r7, #16]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	695b      	ldr	r3, [r3, #20]
 800e130:	613b      	str	r3, [r7, #16]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	699b      	ldr	r3, [r3, #24]
 800e138:	613b      	str	r3, [r7, #16]
 800e13a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e14a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	9300      	str	r3, [sp, #0]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e158:	68f8      	ldr	r0, [r7, #12]
 800e15a:	f000 f9af 	bl	800e4bc <I2C_WaitOnFlagUntilTimeout>
 800e15e:	4603      	mov	r3, r0
 800e160:	2b00      	cmp	r3, #0
 800e162:	d00d      	beq.n	800e180 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e16e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e172:	d103      	bne.n	800e17c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e17a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800e17c:	2303      	movs	r3, #3
 800e17e:	e017      	b.n	800e1b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800e180:	897b      	ldrh	r3, [r7, #10]
 800e182:	11db      	asrs	r3, r3, #7
 800e184:	b2db      	uxtb	r3, r3
 800e186:	f003 0306 	and.w	r3, r3, #6
 800e18a:	b2db      	uxtb	r3, r3
 800e18c:	f063 030e 	orn	r3, r3, #14
 800e190:	b2da      	uxtb	r2, r3
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	4907      	ldr	r1, [pc, #28]	@ (800e1bc <I2C_MasterRequestRead+0x198>)
 800e19e:	68f8      	ldr	r0, [r7, #12]
 800e1a0:	f000 fa06 	bl	800e5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d001      	beq.n	800e1ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	e000      	b.n	800e1b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800e1ae:	2300      	movs	r3, #0
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3718      	adds	r7, #24
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}
 800e1b8:	00010008 	.word	0x00010008
 800e1bc:	00010002 	.word	0x00010002

0800e1c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b088      	sub	sp, #32
 800e1c4:	af02      	add	r7, sp, #8
 800e1c6:	60f8      	str	r0, [r7, #12]
 800e1c8:	4608      	mov	r0, r1
 800e1ca:	4611      	mov	r1, r2
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	817b      	strh	r3, [r7, #10]
 800e1d2:	460b      	mov	r3, r1
 800e1d4:	813b      	strh	r3, [r7, #8]
 800e1d6:	4613      	mov	r3, r2
 800e1d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e1e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ec:	9300      	str	r3, [sp, #0]
 800e1ee:	6a3b      	ldr	r3, [r7, #32]
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e1f6:	68f8      	ldr	r0, [r7, #12]
 800e1f8:	f000 f960 	bl	800e4bc <I2C_WaitOnFlagUntilTimeout>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d00d      	beq.n	800e21e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e20c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e210:	d103      	bne.n	800e21a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e218:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e21a:	2303      	movs	r3, #3
 800e21c:	e05f      	b.n	800e2de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e21e:	897b      	ldrh	r3, [r7, #10]
 800e220:	b2db      	uxtb	r3, r3
 800e222:	461a      	mov	r2, r3
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e22c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e230:	6a3a      	ldr	r2, [r7, #32]
 800e232:	492d      	ldr	r1, [pc, #180]	@ (800e2e8 <I2C_RequestMemoryWrite+0x128>)
 800e234:	68f8      	ldr	r0, [r7, #12]
 800e236:	f000 f9bb 	bl	800e5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e23a:	4603      	mov	r3, r0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d001      	beq.n	800e244 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800e240:	2301      	movs	r3, #1
 800e242:	e04c      	b.n	800e2de <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e244:	2300      	movs	r3, #0
 800e246:	617b      	str	r3, [r7, #20]
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	695b      	ldr	r3, [r3, #20]
 800e24e:	617b      	str	r3, [r7, #20]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	699b      	ldr	r3, [r3, #24]
 800e256:	617b      	str	r3, [r7, #20]
 800e258:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e25a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e25c:	6a39      	ldr	r1, [r7, #32]
 800e25e:	68f8      	ldr	r0, [r7, #12]
 800e260:	f000 fa46 	bl	800e6f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800e264:	4603      	mov	r3, r0
 800e266:	2b00      	cmp	r3, #0
 800e268:	d00d      	beq.n	800e286 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e26e:	2b04      	cmp	r3, #4
 800e270:	d107      	bne.n	800e282 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e280:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e282:	2301      	movs	r3, #1
 800e284:	e02b      	b.n	800e2de <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e286:	88fb      	ldrh	r3, [r7, #6]
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d105      	bne.n	800e298 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e28c:	893b      	ldrh	r3, [r7, #8]
 800e28e:	b2da      	uxtb	r2, r3
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	611a      	str	r2, [r3, #16]
 800e296:	e021      	b.n	800e2dc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e298:	893b      	ldrh	r3, [r7, #8]
 800e29a:	0a1b      	lsrs	r3, r3, #8
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	b2da      	uxtb	r2, r3
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e2a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2a8:	6a39      	ldr	r1, [r7, #32]
 800e2aa:	68f8      	ldr	r0, [r7, #12]
 800e2ac:	f000 fa20 	bl	800e6f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d00d      	beq.n	800e2d2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2ba:	2b04      	cmp	r3, #4
 800e2bc:	d107      	bne.n	800e2ce <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e2cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	e005      	b.n	800e2de <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e2d2:	893b      	ldrh	r3, [r7, #8]
 800e2d4:	b2da      	uxtb	r2, r3
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800e2dc:	2300      	movs	r3, #0
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3718      	adds	r7, #24
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	00010002 	.word	0x00010002

0800e2ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b088      	sub	sp, #32
 800e2f0:	af02      	add	r7, sp, #8
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	4608      	mov	r0, r1
 800e2f6:	4611      	mov	r1, r2
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	817b      	strh	r3, [r7, #10]
 800e2fe:	460b      	mov	r3, r1
 800e300:	813b      	strh	r3, [r7, #8]
 800e302:	4613      	mov	r3, r2
 800e304:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e314:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e324:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e328:	9300      	str	r3, [sp, #0]
 800e32a:	6a3b      	ldr	r3, [r7, #32]
 800e32c:	2200      	movs	r2, #0
 800e32e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e332:	68f8      	ldr	r0, [r7, #12]
 800e334:	f000 f8c2 	bl	800e4bc <I2C_WaitOnFlagUntilTimeout>
 800e338:	4603      	mov	r3, r0
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d00d      	beq.n	800e35a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e34c:	d103      	bne.n	800e356 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e354:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e356:	2303      	movs	r3, #3
 800e358:	e0aa      	b.n	800e4b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e35a:	897b      	ldrh	r3, [r7, #10]
 800e35c:	b2db      	uxtb	r3, r3
 800e35e:	461a      	mov	r2, r3
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e368:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e36c:	6a3a      	ldr	r2, [r7, #32]
 800e36e:	4952      	ldr	r1, [pc, #328]	@ (800e4b8 <I2C_RequestMemoryRead+0x1cc>)
 800e370:	68f8      	ldr	r0, [r7, #12]
 800e372:	f000 f91d 	bl	800e5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e376:	4603      	mov	r3, r0
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d001      	beq.n	800e380 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800e37c:	2301      	movs	r3, #1
 800e37e:	e097      	b.n	800e4b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e380:	2300      	movs	r3, #0
 800e382:	617b      	str	r3, [r7, #20]
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	695b      	ldr	r3, [r3, #20]
 800e38a:	617b      	str	r3, [r7, #20]
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	699b      	ldr	r3, [r3, #24]
 800e392:	617b      	str	r3, [r7, #20]
 800e394:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e398:	6a39      	ldr	r1, [r7, #32]
 800e39a:	68f8      	ldr	r0, [r7, #12]
 800e39c:	f000 f9a8 	bl	800e6f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d00d      	beq.n	800e3c2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3aa:	2b04      	cmp	r3, #4
 800e3ac:	d107      	bne.n	800e3be <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	681a      	ldr	r2, [r3, #0]
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e3bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e3be:	2301      	movs	r3, #1
 800e3c0:	e076      	b.n	800e4b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e3c2:	88fb      	ldrh	r3, [r7, #6]
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d105      	bne.n	800e3d4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e3c8:	893b      	ldrh	r3, [r7, #8]
 800e3ca:	b2da      	uxtb	r2, r3
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	611a      	str	r2, [r3, #16]
 800e3d2:	e021      	b.n	800e418 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e3d4:	893b      	ldrh	r3, [r7, #8]
 800e3d6:	0a1b      	lsrs	r3, r3, #8
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	b2da      	uxtb	r2, r3
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e3e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e3e4:	6a39      	ldr	r1, [r7, #32]
 800e3e6:	68f8      	ldr	r0, [r7, #12]
 800e3e8:	f000 f982 	bl	800e6f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d00d      	beq.n	800e40e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3f6:	2b04      	cmp	r3, #4
 800e3f8:	d107      	bne.n	800e40a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	681a      	ldr	r2, [r3, #0]
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e408:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e40a:	2301      	movs	r3, #1
 800e40c:	e050      	b.n	800e4b0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e40e:	893b      	ldrh	r3, [r7, #8]
 800e410:	b2da      	uxtb	r2, r3
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e41a:	6a39      	ldr	r1, [r7, #32]
 800e41c:	68f8      	ldr	r0, [r7, #12]
 800e41e:	f000 f967 	bl	800e6f0 <I2C_WaitOnTXEFlagUntilTimeout>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d00d      	beq.n	800e444 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e42c:	2b04      	cmp	r3, #4
 800e42e:	d107      	bne.n	800e440 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	681a      	ldr	r2, [r3, #0]
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e43e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e440:	2301      	movs	r3, #1
 800e442:	e035      	b.n	800e4b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e452:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e456:	9300      	str	r3, [sp, #0]
 800e458:	6a3b      	ldr	r3, [r7, #32]
 800e45a:	2200      	movs	r2, #0
 800e45c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e460:	68f8      	ldr	r0, [r7, #12]
 800e462:	f000 f82b 	bl	800e4bc <I2C_WaitOnFlagUntilTimeout>
 800e466:	4603      	mov	r3, r0
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d00d      	beq.n	800e488 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e47a:	d103      	bne.n	800e484 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e482:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e484:	2303      	movs	r3, #3
 800e486:	e013      	b.n	800e4b0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e488:	897b      	ldrh	r3, [r7, #10]
 800e48a:	b2db      	uxtb	r3, r3
 800e48c:	f043 0301 	orr.w	r3, r3, #1
 800e490:	b2da      	uxtb	r2, r3
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e49a:	6a3a      	ldr	r2, [r7, #32]
 800e49c:	4906      	ldr	r1, [pc, #24]	@ (800e4b8 <I2C_RequestMemoryRead+0x1cc>)
 800e49e:	68f8      	ldr	r0, [r7, #12]
 800e4a0:	f000 f886 	bl	800e5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d001      	beq.n	800e4ae <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	e000      	b.n	800e4b0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800e4ae:	2300      	movs	r3, #0
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3718      	adds	r7, #24
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	00010002 	.word	0x00010002

0800e4bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	603b      	str	r3, [r7, #0]
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e4cc:	e048      	b.n	800e560 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4d4:	d044      	beq.n	800e560 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e4d6:	f7fe f901 	bl	800c6dc <HAL_GetTick>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	69bb      	ldr	r3, [r7, #24]
 800e4de:	1ad3      	subs	r3, r2, r3
 800e4e0:	683a      	ldr	r2, [r7, #0]
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d302      	bcc.n	800e4ec <I2C_WaitOnFlagUntilTimeout+0x30>
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d139      	bne.n	800e560 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	0c1b      	lsrs	r3, r3, #16
 800e4f0:	b2db      	uxtb	r3, r3
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d10d      	bne.n	800e512 <I2C_WaitOnFlagUntilTimeout+0x56>
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	695b      	ldr	r3, [r3, #20]
 800e4fc:	43da      	mvns	r2, r3
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	4013      	ands	r3, r2
 800e502:	b29b      	uxth	r3, r3
 800e504:	2b00      	cmp	r3, #0
 800e506:	bf0c      	ite	eq
 800e508:	2301      	moveq	r3, #1
 800e50a:	2300      	movne	r3, #0
 800e50c:	b2db      	uxtb	r3, r3
 800e50e:	461a      	mov	r2, r3
 800e510:	e00c      	b.n	800e52c <I2C_WaitOnFlagUntilTimeout+0x70>
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	699b      	ldr	r3, [r3, #24]
 800e518:	43da      	mvns	r2, r3
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	4013      	ands	r3, r2
 800e51e:	b29b      	uxth	r3, r3
 800e520:	2b00      	cmp	r3, #0
 800e522:	bf0c      	ite	eq
 800e524:	2301      	moveq	r3, #1
 800e526:	2300      	movne	r3, #0
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	461a      	mov	r2, r3
 800e52c:	79fb      	ldrb	r3, [r7, #7]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d116      	bne.n	800e560 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2200      	movs	r2, #0
 800e536:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	2220      	movs	r2, #32
 800e53c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2200      	movs	r2, #0
 800e544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e54c:	f043 0220 	orr.w	r2, r3, #32
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2200      	movs	r2, #0
 800e558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e55c:	2301      	movs	r3, #1
 800e55e:	e023      	b.n	800e5a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	0c1b      	lsrs	r3, r3, #16
 800e564:	b2db      	uxtb	r3, r3
 800e566:	2b01      	cmp	r3, #1
 800e568:	d10d      	bne.n	800e586 <I2C_WaitOnFlagUntilTimeout+0xca>
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	695b      	ldr	r3, [r3, #20]
 800e570:	43da      	mvns	r2, r3
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	4013      	ands	r3, r2
 800e576:	b29b      	uxth	r3, r3
 800e578:	2b00      	cmp	r3, #0
 800e57a:	bf0c      	ite	eq
 800e57c:	2301      	moveq	r3, #1
 800e57e:	2300      	movne	r3, #0
 800e580:	b2db      	uxtb	r3, r3
 800e582:	461a      	mov	r2, r3
 800e584:	e00c      	b.n	800e5a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	699b      	ldr	r3, [r3, #24]
 800e58c:	43da      	mvns	r2, r3
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	4013      	ands	r3, r2
 800e592:	b29b      	uxth	r3, r3
 800e594:	2b00      	cmp	r3, #0
 800e596:	bf0c      	ite	eq
 800e598:	2301      	moveq	r3, #1
 800e59a:	2300      	movne	r3, #0
 800e59c:	b2db      	uxtb	r3, r3
 800e59e:	461a      	mov	r2, r3
 800e5a0:	79fb      	ldrb	r3, [r7, #7]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d093      	beq.n	800e4ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e5a6:	2300      	movs	r3, #0
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3710      	adds	r7, #16
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}

0800e5b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b084      	sub	sp, #16
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	60b9      	str	r1, [r7, #8]
 800e5ba:	607a      	str	r2, [r7, #4]
 800e5bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e5be:	e071      	b.n	800e6a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	695b      	ldr	r3, [r3, #20]
 800e5c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e5ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e5ce:	d123      	bne.n	800e618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	681a      	ldr	r2, [r3, #0]
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e5de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e5e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2220      	movs	r2, #32
 800e5f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e604:	f043 0204 	orr.w	r2, r3, #4
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	2200      	movs	r2, #0
 800e610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e614:	2301      	movs	r3, #1
 800e616:	e067      	b.n	800e6e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e61e:	d041      	beq.n	800e6a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e620:	f7fe f85c 	bl	800c6dc <HAL_GetTick>
 800e624:	4602      	mov	r2, r0
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	1ad3      	subs	r3, r2, r3
 800e62a:	687a      	ldr	r2, [r7, #4]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d302      	bcc.n	800e636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d136      	bne.n	800e6a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	0c1b      	lsrs	r3, r3, #16
 800e63a:	b2db      	uxtb	r3, r3
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d10c      	bne.n	800e65a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	695b      	ldr	r3, [r3, #20]
 800e646:	43da      	mvns	r2, r3
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	4013      	ands	r3, r2
 800e64c:	b29b      	uxth	r3, r3
 800e64e:	2b00      	cmp	r3, #0
 800e650:	bf14      	ite	ne
 800e652:	2301      	movne	r3, #1
 800e654:	2300      	moveq	r3, #0
 800e656:	b2db      	uxtb	r3, r3
 800e658:	e00b      	b.n	800e672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	699b      	ldr	r3, [r3, #24]
 800e660:	43da      	mvns	r2, r3
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	4013      	ands	r3, r2
 800e666:	b29b      	uxth	r3, r3
 800e668:	2b00      	cmp	r3, #0
 800e66a:	bf14      	ite	ne
 800e66c:	2301      	movne	r3, #1
 800e66e:	2300      	moveq	r3, #0
 800e670:	b2db      	uxtb	r3, r3
 800e672:	2b00      	cmp	r3, #0
 800e674:	d016      	beq.n	800e6a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	2200      	movs	r2, #0
 800e67a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2220      	movs	r2, #32
 800e680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2200      	movs	r2, #0
 800e688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e690:	f043 0220 	orr.w	r2, r3, #32
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	2200      	movs	r2, #0
 800e69c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	e021      	b.n	800e6e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	0c1b      	lsrs	r3, r3, #16
 800e6a8:	b2db      	uxtb	r3, r3
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	d10c      	bne.n	800e6c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	695b      	ldr	r3, [r3, #20]
 800e6b4:	43da      	mvns	r2, r3
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	4013      	ands	r3, r2
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	bf14      	ite	ne
 800e6c0:	2301      	movne	r3, #1
 800e6c2:	2300      	moveq	r3, #0
 800e6c4:	b2db      	uxtb	r3, r3
 800e6c6:	e00b      	b.n	800e6e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	699b      	ldr	r3, [r3, #24]
 800e6ce:	43da      	mvns	r2, r3
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	4013      	ands	r3, r2
 800e6d4:	b29b      	uxth	r3, r3
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	bf14      	ite	ne
 800e6da:	2301      	movne	r3, #1
 800e6dc:	2300      	moveq	r3, #0
 800e6de:	b2db      	uxtb	r3, r3
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	f47f af6d 	bne.w	800e5c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800e6e6:	2300      	movs	r3, #0
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3710      	adds	r7, #16
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	60b9      	str	r1, [r7, #8]
 800e6fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e6fc:	e034      	b.n	800e768 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e6fe:	68f8      	ldr	r0, [r7, #12]
 800e700:	f000 f8e3 	bl	800e8ca <I2C_IsAcknowledgeFailed>
 800e704:	4603      	mov	r3, r0
 800e706:	2b00      	cmp	r3, #0
 800e708:	d001      	beq.n	800e70e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e70a:	2301      	movs	r3, #1
 800e70c:	e034      	b.n	800e778 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e714:	d028      	beq.n	800e768 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e716:	f7fd ffe1 	bl	800c6dc <HAL_GetTick>
 800e71a:	4602      	mov	r2, r0
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	1ad3      	subs	r3, r2, r3
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	429a      	cmp	r2, r3
 800e724:	d302      	bcc.n	800e72c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e726:	68bb      	ldr	r3, [r7, #8]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d11d      	bne.n	800e768 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	695b      	ldr	r3, [r3, #20]
 800e732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e736:	2b80      	cmp	r3, #128	@ 0x80
 800e738:	d016      	beq.n	800e768 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2200      	movs	r2, #0
 800e73e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2220      	movs	r2, #32
 800e744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2200      	movs	r2, #0
 800e74c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e754:	f043 0220 	orr.w	r2, r3, #32
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2200      	movs	r2, #0
 800e760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e764:	2301      	movs	r3, #1
 800e766:	e007      	b.n	800e778 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	695b      	ldr	r3, [r3, #20]
 800e76e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e772:	2b80      	cmp	r3, #128	@ 0x80
 800e774:	d1c3      	bne.n	800e6fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e776:	2300      	movs	r3, #0
}
 800e778:	4618      	mov	r0, r3
 800e77a:	3710      	adds	r7, #16
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	60f8      	str	r0, [r7, #12]
 800e788:	60b9      	str	r1, [r7, #8]
 800e78a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e78c:	e034      	b.n	800e7f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e78e:	68f8      	ldr	r0, [r7, #12]
 800e790:	f000 f89b 	bl	800e8ca <I2C_IsAcknowledgeFailed>
 800e794:	4603      	mov	r3, r0
 800e796:	2b00      	cmp	r3, #0
 800e798:	d001      	beq.n	800e79e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e79a:	2301      	movs	r3, #1
 800e79c:	e034      	b.n	800e808 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7a4:	d028      	beq.n	800e7f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7a6:	f7fd ff99 	bl	800c6dc <HAL_GetTick>
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	1ad3      	subs	r3, r2, r3
 800e7b0:	68ba      	ldr	r2, [r7, #8]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d302      	bcc.n	800e7bc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d11d      	bne.n	800e7f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	695b      	ldr	r3, [r3, #20]
 800e7c2:	f003 0304 	and.w	r3, r3, #4
 800e7c6:	2b04      	cmp	r3, #4
 800e7c8:	d016      	beq.n	800e7f8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2220      	movs	r2, #32
 800e7d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7e4:	f043 0220 	orr.w	r2, r3, #32
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	e007      	b.n	800e808 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	695b      	ldr	r3, [r3, #20]
 800e7fe:	f003 0304 	and.w	r3, r3, #4
 800e802:	2b04      	cmp	r3, #4
 800e804:	d1c3      	bne.n	800e78e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e806:	2300      	movs	r3, #0
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3710      	adds	r7, #16
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b084      	sub	sp, #16
 800e814:	af00      	add	r7, sp, #0
 800e816:	60f8      	str	r0, [r7, #12]
 800e818:	60b9      	str	r1, [r7, #8]
 800e81a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e81c:	e049      	b.n	800e8b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	695b      	ldr	r3, [r3, #20]
 800e824:	f003 0310 	and.w	r3, r3, #16
 800e828:	2b10      	cmp	r3, #16
 800e82a:	d119      	bne.n	800e860 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f06f 0210 	mvn.w	r2, #16
 800e834:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	2200      	movs	r2, #0
 800e83a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2220      	movs	r2, #32
 800e840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	2200      	movs	r2, #0
 800e848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	2200      	movs	r2, #0
 800e858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e85c:	2301      	movs	r3, #1
 800e85e:	e030      	b.n	800e8c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e860:	f7fd ff3c 	bl	800c6dc <HAL_GetTick>
 800e864:	4602      	mov	r2, r0
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	1ad3      	subs	r3, r2, r3
 800e86a:	68ba      	ldr	r2, [r7, #8]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d302      	bcc.n	800e876 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d11d      	bne.n	800e8b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	695b      	ldr	r3, [r3, #20]
 800e87c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e880:	2b40      	cmp	r3, #64	@ 0x40
 800e882:	d016      	beq.n	800e8b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	2200      	movs	r2, #0
 800e888:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	2220      	movs	r2, #32
 800e88e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2200      	movs	r2, #0
 800e896:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e89e:	f043 0220 	orr.w	r2, r3, #32
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	e007      	b.n	800e8c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	695b      	ldr	r3, [r3, #20]
 800e8b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8bc:	2b40      	cmp	r3, #64	@ 0x40
 800e8be:	d1ae      	bne.n	800e81e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e8c0:	2300      	movs	r3, #0
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3710      	adds	r7, #16
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}

0800e8ca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e8ca:	b480      	push	{r7}
 800e8cc:	b083      	sub	sp, #12
 800e8ce:	af00      	add	r7, sp, #0
 800e8d0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	695b      	ldr	r3, [r3, #20]
 800e8d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e8dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e8e0:	d11b      	bne.n	800e91a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e8ea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2220      	movs	r2, #32
 800e8f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e906:	f043 0204 	orr.w	r2, r3, #4
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2200      	movs	r2, #0
 800e912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800e916:	2301      	movs	r3, #1
 800e918:	e000      	b.n	800e91c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e91a:	2300      	movs	r3, #0
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	370c      	adds	r7, #12
 800e920:	46bd      	mov	sp, r7
 800e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e926:	4770      	bx	lr

0800e928 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b086      	sub	sp, #24
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d101      	bne.n	800e93a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e936:	2301      	movs	r3, #1
 800e938:	e267      	b.n	800ee0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f003 0301 	and.w	r3, r3, #1
 800e942:	2b00      	cmp	r3, #0
 800e944:	d075      	beq.n	800ea32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e946:	4b88      	ldr	r3, [pc, #544]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800e948:	689b      	ldr	r3, [r3, #8]
 800e94a:	f003 030c 	and.w	r3, r3, #12
 800e94e:	2b04      	cmp	r3, #4
 800e950:	d00c      	beq.n	800e96c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e952:	4b85      	ldr	r3, [pc, #532]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800e954:	689b      	ldr	r3, [r3, #8]
 800e956:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e95a:	2b08      	cmp	r3, #8
 800e95c:	d112      	bne.n	800e984 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e95e:	4b82      	ldr	r3, [pc, #520]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800e960:	685b      	ldr	r3, [r3, #4]
 800e962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e966:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e96a:	d10b      	bne.n	800e984 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e96c:	4b7e      	ldr	r3, [pc, #504]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e974:	2b00      	cmp	r3, #0
 800e976:	d05b      	beq.n	800ea30 <HAL_RCC_OscConfig+0x108>
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d157      	bne.n	800ea30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e980:	2301      	movs	r3, #1
 800e982:	e242      	b.n	800ee0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e98c:	d106      	bne.n	800e99c <HAL_RCC_OscConfig+0x74>
 800e98e:	4b76      	ldr	r3, [pc, #472]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	4a75      	ldr	r2, [pc, #468]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800e994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e998:	6013      	str	r3, [r2, #0]
 800e99a:	e01d      	b.n	800e9d8 <HAL_RCC_OscConfig+0xb0>
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	685b      	ldr	r3, [r3, #4]
 800e9a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e9a4:	d10c      	bne.n	800e9c0 <HAL_RCC_OscConfig+0x98>
 800e9a6:	4b70      	ldr	r3, [pc, #448]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	4a6f      	ldr	r2, [pc, #444]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800e9ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e9b0:	6013      	str	r3, [r2, #0]
 800e9b2:	4b6d      	ldr	r3, [pc, #436]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	4a6c      	ldr	r2, [pc, #432]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800e9b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e9bc:	6013      	str	r3, [r2, #0]
 800e9be:	e00b      	b.n	800e9d8 <HAL_RCC_OscConfig+0xb0>
 800e9c0:	4b69      	ldr	r3, [pc, #420]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	4a68      	ldr	r2, [pc, #416]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800e9c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e9ca:	6013      	str	r3, [r2, #0]
 800e9cc:	4b66      	ldr	r3, [pc, #408]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a65      	ldr	r2, [pc, #404]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800e9d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e9d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d013      	beq.n	800ea08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e9e0:	f7fd fe7c 	bl	800c6dc <HAL_GetTick>
 800e9e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e9e6:	e008      	b.n	800e9fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e9e8:	f7fd fe78 	bl	800c6dc <HAL_GetTick>
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	1ad3      	subs	r3, r2, r3
 800e9f2:	2b64      	cmp	r3, #100	@ 0x64
 800e9f4:	d901      	bls.n	800e9fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e9f6:	2303      	movs	r3, #3
 800e9f8:	e207      	b.n	800ee0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e9fa:	4b5b      	ldr	r3, [pc, #364]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d0f0      	beq.n	800e9e8 <HAL_RCC_OscConfig+0xc0>
 800ea06:	e014      	b.n	800ea32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea08:	f7fd fe68 	bl	800c6dc <HAL_GetTick>
 800ea0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ea0e:	e008      	b.n	800ea22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ea10:	f7fd fe64 	bl	800c6dc <HAL_GetTick>
 800ea14:	4602      	mov	r2, r0
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	1ad3      	subs	r3, r2, r3
 800ea1a:	2b64      	cmp	r3, #100	@ 0x64
 800ea1c:	d901      	bls.n	800ea22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ea1e:	2303      	movs	r3, #3
 800ea20:	e1f3      	b.n	800ee0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ea22:	4b51      	ldr	r3, [pc, #324]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d1f0      	bne.n	800ea10 <HAL_RCC_OscConfig+0xe8>
 800ea2e:	e000      	b.n	800ea32 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ea30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	f003 0302 	and.w	r3, r3, #2
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d063      	beq.n	800eb06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ea3e:	4b4a      	ldr	r3, [pc, #296]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800ea40:	689b      	ldr	r3, [r3, #8]
 800ea42:	f003 030c 	and.w	r3, r3, #12
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d00b      	beq.n	800ea62 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ea4a:	4b47      	ldr	r3, [pc, #284]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800ea4c:	689b      	ldr	r3, [r3, #8]
 800ea4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ea52:	2b08      	cmp	r3, #8
 800ea54:	d11c      	bne.n	800ea90 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ea56:	4b44      	ldr	r3, [pc, #272]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d116      	bne.n	800ea90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ea62:	4b41      	ldr	r3, [pc, #260]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f003 0302 	and.w	r3, r3, #2
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d005      	beq.n	800ea7a <HAL_RCC_OscConfig+0x152>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	68db      	ldr	r3, [r3, #12]
 800ea72:	2b01      	cmp	r3, #1
 800ea74:	d001      	beq.n	800ea7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ea76:	2301      	movs	r3, #1
 800ea78:	e1c7      	b.n	800ee0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea7a:	4b3b      	ldr	r3, [pc, #236]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	691b      	ldr	r3, [r3, #16]
 800ea86:	00db      	lsls	r3, r3, #3
 800ea88:	4937      	ldr	r1, [pc, #220]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800ea8a:	4313      	orrs	r3, r2
 800ea8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ea8e:	e03a      	b.n	800eb06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d020      	beq.n	800eada <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ea98:	4b34      	ldr	r3, [pc, #208]	@ (800eb6c <HAL_RCC_OscConfig+0x244>)
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea9e:	f7fd fe1d 	bl	800c6dc <HAL_GetTick>
 800eaa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eaa4:	e008      	b.n	800eab8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eaa6:	f7fd fe19 	bl	800c6dc <HAL_GetTick>
 800eaaa:	4602      	mov	r2, r0
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	1ad3      	subs	r3, r2, r3
 800eab0:	2b02      	cmp	r3, #2
 800eab2:	d901      	bls.n	800eab8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800eab4:	2303      	movs	r3, #3
 800eab6:	e1a8      	b.n	800ee0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eab8:	4b2b      	ldr	r3, [pc, #172]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f003 0302 	and.w	r3, r3, #2
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d0f0      	beq.n	800eaa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eac4:	4b28      	ldr	r3, [pc, #160]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	691b      	ldr	r3, [r3, #16]
 800ead0:	00db      	lsls	r3, r3, #3
 800ead2:	4925      	ldr	r1, [pc, #148]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800ead4:	4313      	orrs	r3, r2
 800ead6:	600b      	str	r3, [r1, #0]
 800ead8:	e015      	b.n	800eb06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800eada:	4b24      	ldr	r3, [pc, #144]	@ (800eb6c <HAL_RCC_OscConfig+0x244>)
 800eadc:	2200      	movs	r2, #0
 800eade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eae0:	f7fd fdfc 	bl	800c6dc <HAL_GetTick>
 800eae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eae6:	e008      	b.n	800eafa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eae8:	f7fd fdf8 	bl	800c6dc <HAL_GetTick>
 800eaec:	4602      	mov	r2, r0
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	1ad3      	subs	r3, r2, r3
 800eaf2:	2b02      	cmp	r3, #2
 800eaf4:	d901      	bls.n	800eafa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800eaf6:	2303      	movs	r3, #3
 800eaf8:	e187      	b.n	800ee0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800eafa:	4b1b      	ldr	r3, [pc, #108]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f003 0302 	and.w	r3, r3, #2
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d1f0      	bne.n	800eae8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	f003 0308 	and.w	r3, r3, #8
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d036      	beq.n	800eb80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	695b      	ldr	r3, [r3, #20]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d016      	beq.n	800eb48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800eb1a:	4b15      	ldr	r3, [pc, #84]	@ (800eb70 <HAL_RCC_OscConfig+0x248>)
 800eb1c:	2201      	movs	r2, #1
 800eb1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eb20:	f7fd fddc 	bl	800c6dc <HAL_GetTick>
 800eb24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eb26:	e008      	b.n	800eb3a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eb28:	f7fd fdd8 	bl	800c6dc <HAL_GetTick>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	1ad3      	subs	r3, r2, r3
 800eb32:	2b02      	cmp	r3, #2
 800eb34:	d901      	bls.n	800eb3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800eb36:	2303      	movs	r3, #3
 800eb38:	e167      	b.n	800ee0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800eb3a:	4b0b      	ldr	r3, [pc, #44]	@ (800eb68 <HAL_RCC_OscConfig+0x240>)
 800eb3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb3e:	f003 0302 	and.w	r3, r3, #2
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d0f0      	beq.n	800eb28 <HAL_RCC_OscConfig+0x200>
 800eb46:	e01b      	b.n	800eb80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800eb48:	4b09      	ldr	r3, [pc, #36]	@ (800eb70 <HAL_RCC_OscConfig+0x248>)
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eb4e:	f7fd fdc5 	bl	800c6dc <HAL_GetTick>
 800eb52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eb54:	e00e      	b.n	800eb74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eb56:	f7fd fdc1 	bl	800c6dc <HAL_GetTick>
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	1ad3      	subs	r3, r2, r3
 800eb60:	2b02      	cmp	r3, #2
 800eb62:	d907      	bls.n	800eb74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800eb64:	2303      	movs	r3, #3
 800eb66:	e150      	b.n	800ee0a <HAL_RCC_OscConfig+0x4e2>
 800eb68:	40023800 	.word	0x40023800
 800eb6c:	42470000 	.word	0x42470000
 800eb70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800eb74:	4b88      	ldr	r3, [pc, #544]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800eb76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb78:	f003 0302 	and.w	r3, r3, #2
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d1ea      	bne.n	800eb56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	f003 0304 	and.w	r3, r3, #4
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	f000 8097 	beq.w	800ecbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800eb92:	4b81      	ldr	r3, [pc, #516]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800eb94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d10f      	bne.n	800ebbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800eb9e:	2300      	movs	r3, #0
 800eba0:	60bb      	str	r3, [r7, #8]
 800eba2:	4b7d      	ldr	r3, [pc, #500]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800eba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eba6:	4a7c      	ldr	r2, [pc, #496]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800eba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ebac:	6413      	str	r3, [r2, #64]	@ 0x40
 800ebae:	4b7a      	ldr	r3, [pc, #488]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800ebb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ebb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ebb6:	60bb      	str	r3, [r7, #8]
 800ebb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ebba:	2301      	movs	r3, #1
 800ebbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ebbe:	4b77      	ldr	r3, [pc, #476]	@ (800ed9c <HAL_RCC_OscConfig+0x474>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d118      	bne.n	800ebfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ebca:	4b74      	ldr	r3, [pc, #464]	@ (800ed9c <HAL_RCC_OscConfig+0x474>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	4a73      	ldr	r2, [pc, #460]	@ (800ed9c <HAL_RCC_OscConfig+0x474>)
 800ebd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ebd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ebd6:	f7fd fd81 	bl	800c6dc <HAL_GetTick>
 800ebda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ebdc:	e008      	b.n	800ebf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ebde:	f7fd fd7d 	bl	800c6dc <HAL_GetTick>
 800ebe2:	4602      	mov	r2, r0
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	1ad3      	subs	r3, r2, r3
 800ebe8:	2b02      	cmp	r3, #2
 800ebea:	d901      	bls.n	800ebf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ebec:	2303      	movs	r3, #3
 800ebee:	e10c      	b.n	800ee0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ebf0:	4b6a      	ldr	r3, [pc, #424]	@ (800ed9c <HAL_RCC_OscConfig+0x474>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d0f0      	beq.n	800ebde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	689b      	ldr	r3, [r3, #8]
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	d106      	bne.n	800ec12 <HAL_RCC_OscConfig+0x2ea>
 800ec04:	4b64      	ldr	r3, [pc, #400]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800ec06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec08:	4a63      	ldr	r2, [pc, #396]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800ec0a:	f043 0301 	orr.w	r3, r3, #1
 800ec0e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ec10:	e01c      	b.n	800ec4c <HAL_RCC_OscConfig+0x324>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	689b      	ldr	r3, [r3, #8]
 800ec16:	2b05      	cmp	r3, #5
 800ec18:	d10c      	bne.n	800ec34 <HAL_RCC_OscConfig+0x30c>
 800ec1a:	4b5f      	ldr	r3, [pc, #380]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800ec1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec1e:	4a5e      	ldr	r2, [pc, #376]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800ec20:	f043 0304 	orr.w	r3, r3, #4
 800ec24:	6713      	str	r3, [r2, #112]	@ 0x70
 800ec26:	4b5c      	ldr	r3, [pc, #368]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800ec28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec2a:	4a5b      	ldr	r2, [pc, #364]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800ec2c:	f043 0301 	orr.w	r3, r3, #1
 800ec30:	6713      	str	r3, [r2, #112]	@ 0x70
 800ec32:	e00b      	b.n	800ec4c <HAL_RCC_OscConfig+0x324>
 800ec34:	4b58      	ldr	r3, [pc, #352]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800ec36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec38:	4a57      	ldr	r2, [pc, #348]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800ec3a:	f023 0301 	bic.w	r3, r3, #1
 800ec3e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ec40:	4b55      	ldr	r3, [pc, #340]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800ec42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec44:	4a54      	ldr	r2, [pc, #336]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800ec46:	f023 0304 	bic.w	r3, r3, #4
 800ec4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	689b      	ldr	r3, [r3, #8]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d015      	beq.n	800ec80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ec54:	f7fd fd42 	bl	800c6dc <HAL_GetTick>
 800ec58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ec5a:	e00a      	b.n	800ec72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ec5c:	f7fd fd3e 	bl	800c6dc <HAL_GetTick>
 800ec60:	4602      	mov	r2, r0
 800ec62:	693b      	ldr	r3, [r7, #16]
 800ec64:	1ad3      	subs	r3, r2, r3
 800ec66:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d901      	bls.n	800ec72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ec6e:	2303      	movs	r3, #3
 800ec70:	e0cb      	b.n	800ee0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ec72:	4b49      	ldr	r3, [pc, #292]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800ec74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec76:	f003 0302 	and.w	r3, r3, #2
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d0ee      	beq.n	800ec5c <HAL_RCC_OscConfig+0x334>
 800ec7e:	e014      	b.n	800ecaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ec80:	f7fd fd2c 	bl	800c6dc <HAL_GetTick>
 800ec84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ec86:	e00a      	b.n	800ec9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ec88:	f7fd fd28 	bl	800c6dc <HAL_GetTick>
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	1ad3      	subs	r3, r2, r3
 800ec92:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d901      	bls.n	800ec9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ec9a:	2303      	movs	r3, #3
 800ec9c:	e0b5      	b.n	800ee0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ec9e:	4b3e      	ldr	r3, [pc, #248]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800eca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eca2:	f003 0302 	and.w	r3, r3, #2
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d1ee      	bne.n	800ec88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ecaa:	7dfb      	ldrb	r3, [r7, #23]
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d105      	bne.n	800ecbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ecb0:	4b39      	ldr	r3, [pc, #228]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800ecb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecb4:	4a38      	ldr	r2, [pc, #224]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800ecb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ecba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	699b      	ldr	r3, [r3, #24]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	f000 80a1 	beq.w	800ee08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ecc6:	4b34      	ldr	r3, [pc, #208]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800ecc8:	689b      	ldr	r3, [r3, #8]
 800ecca:	f003 030c 	and.w	r3, r3, #12
 800ecce:	2b08      	cmp	r3, #8
 800ecd0:	d05c      	beq.n	800ed8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	699b      	ldr	r3, [r3, #24]
 800ecd6:	2b02      	cmp	r3, #2
 800ecd8:	d141      	bne.n	800ed5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ecda:	4b31      	ldr	r3, [pc, #196]	@ (800eda0 <HAL_RCC_OscConfig+0x478>)
 800ecdc:	2200      	movs	r2, #0
 800ecde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ece0:	f7fd fcfc 	bl	800c6dc <HAL_GetTick>
 800ece4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ece6:	e008      	b.n	800ecfa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ece8:	f7fd fcf8 	bl	800c6dc <HAL_GetTick>
 800ecec:	4602      	mov	r2, r0
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	1ad3      	subs	r3, r2, r3
 800ecf2:	2b02      	cmp	r3, #2
 800ecf4:	d901      	bls.n	800ecfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ecf6:	2303      	movs	r3, #3
 800ecf8:	e087      	b.n	800ee0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ecfa:	4b27      	ldr	r3, [pc, #156]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d1f0      	bne.n	800ece8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	69da      	ldr	r2, [r3, #28]
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6a1b      	ldr	r3, [r3, #32]
 800ed0e:	431a      	orrs	r2, r3
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed14:	019b      	lsls	r3, r3, #6
 800ed16:	431a      	orrs	r2, r3
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed1c:	085b      	lsrs	r3, r3, #1
 800ed1e:	3b01      	subs	r3, #1
 800ed20:	041b      	lsls	r3, r3, #16
 800ed22:	431a      	orrs	r2, r3
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed28:	061b      	lsls	r3, r3, #24
 800ed2a:	491b      	ldr	r1, [pc, #108]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800ed2c:	4313      	orrs	r3, r2
 800ed2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ed30:	4b1b      	ldr	r3, [pc, #108]	@ (800eda0 <HAL_RCC_OscConfig+0x478>)
 800ed32:	2201      	movs	r2, #1
 800ed34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed36:	f7fd fcd1 	bl	800c6dc <HAL_GetTick>
 800ed3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ed3c:	e008      	b.n	800ed50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ed3e:	f7fd fccd 	bl	800c6dc <HAL_GetTick>
 800ed42:	4602      	mov	r2, r0
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	1ad3      	subs	r3, r2, r3
 800ed48:	2b02      	cmp	r3, #2
 800ed4a:	d901      	bls.n	800ed50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ed4c:	2303      	movs	r3, #3
 800ed4e:	e05c      	b.n	800ee0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ed50:	4b11      	ldr	r3, [pc, #68]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d0f0      	beq.n	800ed3e <HAL_RCC_OscConfig+0x416>
 800ed5c:	e054      	b.n	800ee08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ed5e:	4b10      	ldr	r3, [pc, #64]	@ (800eda0 <HAL_RCC_OscConfig+0x478>)
 800ed60:	2200      	movs	r2, #0
 800ed62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed64:	f7fd fcba 	bl	800c6dc <HAL_GetTick>
 800ed68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ed6a:	e008      	b.n	800ed7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ed6c:	f7fd fcb6 	bl	800c6dc <HAL_GetTick>
 800ed70:	4602      	mov	r2, r0
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	1ad3      	subs	r3, r2, r3
 800ed76:	2b02      	cmp	r3, #2
 800ed78:	d901      	bls.n	800ed7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ed7a:	2303      	movs	r3, #3
 800ed7c:	e045      	b.n	800ee0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ed7e:	4b06      	ldr	r3, [pc, #24]	@ (800ed98 <HAL_RCC_OscConfig+0x470>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d1f0      	bne.n	800ed6c <HAL_RCC_OscConfig+0x444>
 800ed8a:	e03d      	b.n	800ee08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	699b      	ldr	r3, [r3, #24]
 800ed90:	2b01      	cmp	r3, #1
 800ed92:	d107      	bne.n	800eda4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ed94:	2301      	movs	r3, #1
 800ed96:	e038      	b.n	800ee0a <HAL_RCC_OscConfig+0x4e2>
 800ed98:	40023800 	.word	0x40023800
 800ed9c:	40007000 	.word	0x40007000
 800eda0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800eda4:	4b1b      	ldr	r3, [pc, #108]	@ (800ee14 <HAL_RCC_OscConfig+0x4ec>)
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	699b      	ldr	r3, [r3, #24]
 800edae:	2b01      	cmp	r3, #1
 800edb0:	d028      	beq.n	800ee04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d121      	bne.n	800ee04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800edca:	429a      	cmp	r2, r3
 800edcc:	d11a      	bne.n	800ee04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800edce:	68fa      	ldr	r2, [r7, #12]
 800edd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800edd4:	4013      	ands	r3, r2
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800edda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800eddc:	4293      	cmp	r3, r2
 800edde:	d111      	bne.n	800ee04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edea:	085b      	lsrs	r3, r3, #1
 800edec:	3b01      	subs	r3, #1
 800edee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d107      	bne.n	800ee04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d001      	beq.n	800ee08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800ee04:	2301      	movs	r3, #1
 800ee06:	e000      	b.n	800ee0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ee08:	2300      	movs	r3, #0
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3718      	adds	r7, #24
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
 800ee12:	bf00      	nop
 800ee14:	40023800 	.word	0x40023800

0800ee18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b084      	sub	sp, #16
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d101      	bne.n	800ee2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ee28:	2301      	movs	r3, #1
 800ee2a:	e0cc      	b.n	800efc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ee2c:	4b68      	ldr	r3, [pc, #416]	@ (800efd0 <HAL_RCC_ClockConfig+0x1b8>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	f003 0307 	and.w	r3, r3, #7
 800ee34:	683a      	ldr	r2, [r7, #0]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d90c      	bls.n	800ee54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ee3a:	4b65      	ldr	r3, [pc, #404]	@ (800efd0 <HAL_RCC_ClockConfig+0x1b8>)
 800ee3c:	683a      	ldr	r2, [r7, #0]
 800ee3e:	b2d2      	uxtb	r2, r2
 800ee40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ee42:	4b63      	ldr	r3, [pc, #396]	@ (800efd0 <HAL_RCC_ClockConfig+0x1b8>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	f003 0307 	and.w	r3, r3, #7
 800ee4a:	683a      	ldr	r2, [r7, #0]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d001      	beq.n	800ee54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ee50:	2301      	movs	r3, #1
 800ee52:	e0b8      	b.n	800efc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f003 0302 	and.w	r3, r3, #2
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d020      	beq.n	800eea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	f003 0304 	and.w	r3, r3, #4
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d005      	beq.n	800ee78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ee6c:	4b59      	ldr	r3, [pc, #356]	@ (800efd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ee6e:	689b      	ldr	r3, [r3, #8]
 800ee70:	4a58      	ldr	r2, [pc, #352]	@ (800efd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ee72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ee76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	f003 0308 	and.w	r3, r3, #8
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d005      	beq.n	800ee90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ee84:	4b53      	ldr	r3, [pc, #332]	@ (800efd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ee86:	689b      	ldr	r3, [r3, #8]
 800ee88:	4a52      	ldr	r2, [pc, #328]	@ (800efd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ee8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ee8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ee90:	4b50      	ldr	r3, [pc, #320]	@ (800efd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ee92:	689b      	ldr	r3, [r3, #8]
 800ee94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	689b      	ldr	r3, [r3, #8]
 800ee9c:	494d      	ldr	r1, [pc, #308]	@ (800efd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ee9e:	4313      	orrs	r3, r2
 800eea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	f003 0301 	and.w	r3, r3, #1
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d044      	beq.n	800ef38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	685b      	ldr	r3, [r3, #4]
 800eeb2:	2b01      	cmp	r3, #1
 800eeb4:	d107      	bne.n	800eec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eeb6:	4b47      	ldr	r3, [pc, #284]	@ (800efd4 <HAL_RCC_ClockConfig+0x1bc>)
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d119      	bne.n	800eef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800eec2:	2301      	movs	r3, #1
 800eec4:	e07f      	b.n	800efc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	685b      	ldr	r3, [r3, #4]
 800eeca:	2b02      	cmp	r3, #2
 800eecc:	d003      	beq.n	800eed6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800eed2:	2b03      	cmp	r3, #3
 800eed4:	d107      	bne.n	800eee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eed6:	4b3f      	ldr	r3, [pc, #252]	@ (800efd4 <HAL_RCC_ClockConfig+0x1bc>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d109      	bne.n	800eef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800eee2:	2301      	movs	r3, #1
 800eee4:	e06f      	b.n	800efc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800eee6:	4b3b      	ldr	r3, [pc, #236]	@ (800efd4 <HAL_RCC_ClockConfig+0x1bc>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f003 0302 	and.w	r3, r3, #2
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d101      	bne.n	800eef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800eef2:	2301      	movs	r3, #1
 800eef4:	e067      	b.n	800efc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800eef6:	4b37      	ldr	r3, [pc, #220]	@ (800efd4 <HAL_RCC_ClockConfig+0x1bc>)
 800eef8:	689b      	ldr	r3, [r3, #8]
 800eefa:	f023 0203 	bic.w	r2, r3, #3
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	4934      	ldr	r1, [pc, #208]	@ (800efd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ef04:	4313      	orrs	r3, r2
 800ef06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ef08:	f7fd fbe8 	bl	800c6dc <HAL_GetTick>
 800ef0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ef0e:	e00a      	b.n	800ef26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ef10:	f7fd fbe4 	bl	800c6dc <HAL_GetTick>
 800ef14:	4602      	mov	r2, r0
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	1ad3      	subs	r3, r2, r3
 800ef1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d901      	bls.n	800ef26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ef22:	2303      	movs	r3, #3
 800ef24:	e04f      	b.n	800efc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ef26:	4b2b      	ldr	r3, [pc, #172]	@ (800efd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ef28:	689b      	ldr	r3, [r3, #8]
 800ef2a:	f003 020c 	and.w	r2, r3, #12
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	685b      	ldr	r3, [r3, #4]
 800ef32:	009b      	lsls	r3, r3, #2
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d1eb      	bne.n	800ef10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ef38:	4b25      	ldr	r3, [pc, #148]	@ (800efd0 <HAL_RCC_ClockConfig+0x1b8>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	f003 0307 	and.w	r3, r3, #7
 800ef40:	683a      	ldr	r2, [r7, #0]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	d20c      	bcs.n	800ef60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ef46:	4b22      	ldr	r3, [pc, #136]	@ (800efd0 <HAL_RCC_ClockConfig+0x1b8>)
 800ef48:	683a      	ldr	r2, [r7, #0]
 800ef4a:	b2d2      	uxtb	r2, r2
 800ef4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef4e:	4b20      	ldr	r3, [pc, #128]	@ (800efd0 <HAL_RCC_ClockConfig+0x1b8>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f003 0307 	and.w	r3, r3, #7
 800ef56:	683a      	ldr	r2, [r7, #0]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d001      	beq.n	800ef60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	e032      	b.n	800efc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f003 0304 	and.w	r3, r3, #4
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d008      	beq.n	800ef7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ef6c:	4b19      	ldr	r3, [pc, #100]	@ (800efd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ef6e:	689b      	ldr	r3, [r3, #8]
 800ef70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	68db      	ldr	r3, [r3, #12]
 800ef78:	4916      	ldr	r1, [pc, #88]	@ (800efd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ef7a:	4313      	orrs	r3, r2
 800ef7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f003 0308 	and.w	r3, r3, #8
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d009      	beq.n	800ef9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ef8a:	4b12      	ldr	r3, [pc, #72]	@ (800efd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ef8c:	689b      	ldr	r3, [r3, #8]
 800ef8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	691b      	ldr	r3, [r3, #16]
 800ef96:	00db      	lsls	r3, r3, #3
 800ef98:	490e      	ldr	r1, [pc, #56]	@ (800efd4 <HAL_RCC_ClockConfig+0x1bc>)
 800ef9a:	4313      	orrs	r3, r2
 800ef9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ef9e:	f000 f821 	bl	800efe4 <HAL_RCC_GetSysClockFreq>
 800efa2:	4602      	mov	r2, r0
 800efa4:	4b0b      	ldr	r3, [pc, #44]	@ (800efd4 <HAL_RCC_ClockConfig+0x1bc>)
 800efa6:	689b      	ldr	r3, [r3, #8]
 800efa8:	091b      	lsrs	r3, r3, #4
 800efaa:	f003 030f 	and.w	r3, r3, #15
 800efae:	490a      	ldr	r1, [pc, #40]	@ (800efd8 <HAL_RCC_ClockConfig+0x1c0>)
 800efb0:	5ccb      	ldrb	r3, [r1, r3]
 800efb2:	fa22 f303 	lsr.w	r3, r2, r3
 800efb6:	4a09      	ldr	r2, [pc, #36]	@ (800efdc <HAL_RCC_ClockConfig+0x1c4>)
 800efb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800efba:	4b09      	ldr	r3, [pc, #36]	@ (800efe0 <HAL_RCC_ClockConfig+0x1c8>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7fd fb48 	bl	800c654 <HAL_InitTick>

  return HAL_OK;
 800efc4:	2300      	movs	r3, #0
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3710      	adds	r7, #16
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
 800efce:	bf00      	nop
 800efd0:	40023c00 	.word	0x40023c00
 800efd4:	40023800 	.word	0x40023800
 800efd8:	0801720c 	.word	0x0801720c
 800efdc:	20000000 	.word	0x20000000
 800efe0:	20000220 	.word	0x20000220

0800efe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800efe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800efe8:	b094      	sub	sp, #80	@ 0x50
 800efea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800efec:	2300      	movs	r3, #0
 800efee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800eff0:	2300      	movs	r3, #0
 800eff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800eff4:	2300      	movs	r3, #0
 800eff6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800eff8:	2300      	movs	r3, #0
 800effa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800effc:	4b79      	ldr	r3, [pc, #484]	@ (800f1e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800effe:	689b      	ldr	r3, [r3, #8]
 800f000:	f003 030c 	and.w	r3, r3, #12
 800f004:	2b08      	cmp	r3, #8
 800f006:	d00d      	beq.n	800f024 <HAL_RCC_GetSysClockFreq+0x40>
 800f008:	2b08      	cmp	r3, #8
 800f00a:	f200 80e1 	bhi.w	800f1d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d002      	beq.n	800f018 <HAL_RCC_GetSysClockFreq+0x34>
 800f012:	2b04      	cmp	r3, #4
 800f014:	d003      	beq.n	800f01e <HAL_RCC_GetSysClockFreq+0x3a>
 800f016:	e0db      	b.n	800f1d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f018:	4b73      	ldr	r3, [pc, #460]	@ (800f1e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800f01a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f01c:	e0db      	b.n	800f1d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f01e:	4b73      	ldr	r3, [pc, #460]	@ (800f1ec <HAL_RCC_GetSysClockFreq+0x208>)
 800f020:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f022:	e0d8      	b.n	800f1d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f024:	4b6f      	ldr	r3, [pc, #444]	@ (800f1e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800f026:	685b      	ldr	r3, [r3, #4]
 800f028:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f02c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f02e:	4b6d      	ldr	r3, [pc, #436]	@ (800f1e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800f030:	685b      	ldr	r3, [r3, #4]
 800f032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f036:	2b00      	cmp	r3, #0
 800f038:	d063      	beq.n	800f102 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f03a:	4b6a      	ldr	r3, [pc, #424]	@ (800f1e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	099b      	lsrs	r3, r3, #6
 800f040:	2200      	movs	r2, #0
 800f042:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f044:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800f046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f04c:	633b      	str	r3, [r7, #48]	@ 0x30
 800f04e:	2300      	movs	r3, #0
 800f050:	637b      	str	r3, [r7, #52]	@ 0x34
 800f052:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800f056:	4622      	mov	r2, r4
 800f058:	462b      	mov	r3, r5
 800f05a:	f04f 0000 	mov.w	r0, #0
 800f05e:	f04f 0100 	mov.w	r1, #0
 800f062:	0159      	lsls	r1, r3, #5
 800f064:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f068:	0150      	lsls	r0, r2, #5
 800f06a:	4602      	mov	r2, r0
 800f06c:	460b      	mov	r3, r1
 800f06e:	4621      	mov	r1, r4
 800f070:	1a51      	subs	r1, r2, r1
 800f072:	6139      	str	r1, [r7, #16]
 800f074:	4629      	mov	r1, r5
 800f076:	eb63 0301 	sbc.w	r3, r3, r1
 800f07a:	617b      	str	r3, [r7, #20]
 800f07c:	f04f 0200 	mov.w	r2, #0
 800f080:	f04f 0300 	mov.w	r3, #0
 800f084:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f088:	4659      	mov	r1, fp
 800f08a:	018b      	lsls	r3, r1, #6
 800f08c:	4651      	mov	r1, sl
 800f08e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800f092:	4651      	mov	r1, sl
 800f094:	018a      	lsls	r2, r1, #6
 800f096:	4651      	mov	r1, sl
 800f098:	ebb2 0801 	subs.w	r8, r2, r1
 800f09c:	4659      	mov	r1, fp
 800f09e:	eb63 0901 	sbc.w	r9, r3, r1
 800f0a2:	f04f 0200 	mov.w	r2, #0
 800f0a6:	f04f 0300 	mov.w	r3, #0
 800f0aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f0ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f0b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f0b6:	4690      	mov	r8, r2
 800f0b8:	4699      	mov	r9, r3
 800f0ba:	4623      	mov	r3, r4
 800f0bc:	eb18 0303 	adds.w	r3, r8, r3
 800f0c0:	60bb      	str	r3, [r7, #8]
 800f0c2:	462b      	mov	r3, r5
 800f0c4:	eb49 0303 	adc.w	r3, r9, r3
 800f0c8:	60fb      	str	r3, [r7, #12]
 800f0ca:	f04f 0200 	mov.w	r2, #0
 800f0ce:	f04f 0300 	mov.w	r3, #0
 800f0d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800f0d6:	4629      	mov	r1, r5
 800f0d8:	024b      	lsls	r3, r1, #9
 800f0da:	4621      	mov	r1, r4
 800f0dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800f0e0:	4621      	mov	r1, r4
 800f0e2:	024a      	lsls	r2, r1, #9
 800f0e4:	4610      	mov	r0, r2
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f0ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f0f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800f0f4:	f7f1 fdc0 	bl	8000c78 <__aeabi_uldivmod>
 800f0f8:	4602      	mov	r2, r0
 800f0fa:	460b      	mov	r3, r1
 800f0fc:	4613      	mov	r3, r2
 800f0fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f100:	e058      	b.n	800f1b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f102:	4b38      	ldr	r3, [pc, #224]	@ (800f1e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	099b      	lsrs	r3, r3, #6
 800f108:	2200      	movs	r2, #0
 800f10a:	4618      	mov	r0, r3
 800f10c:	4611      	mov	r1, r2
 800f10e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800f112:	623b      	str	r3, [r7, #32]
 800f114:	2300      	movs	r3, #0
 800f116:	627b      	str	r3, [r7, #36]	@ 0x24
 800f118:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800f11c:	4642      	mov	r2, r8
 800f11e:	464b      	mov	r3, r9
 800f120:	f04f 0000 	mov.w	r0, #0
 800f124:	f04f 0100 	mov.w	r1, #0
 800f128:	0159      	lsls	r1, r3, #5
 800f12a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f12e:	0150      	lsls	r0, r2, #5
 800f130:	4602      	mov	r2, r0
 800f132:	460b      	mov	r3, r1
 800f134:	4641      	mov	r1, r8
 800f136:	ebb2 0a01 	subs.w	sl, r2, r1
 800f13a:	4649      	mov	r1, r9
 800f13c:	eb63 0b01 	sbc.w	fp, r3, r1
 800f140:	f04f 0200 	mov.w	r2, #0
 800f144:	f04f 0300 	mov.w	r3, #0
 800f148:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800f14c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800f150:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800f154:	ebb2 040a 	subs.w	r4, r2, sl
 800f158:	eb63 050b 	sbc.w	r5, r3, fp
 800f15c:	f04f 0200 	mov.w	r2, #0
 800f160:	f04f 0300 	mov.w	r3, #0
 800f164:	00eb      	lsls	r3, r5, #3
 800f166:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f16a:	00e2      	lsls	r2, r4, #3
 800f16c:	4614      	mov	r4, r2
 800f16e:	461d      	mov	r5, r3
 800f170:	4643      	mov	r3, r8
 800f172:	18e3      	adds	r3, r4, r3
 800f174:	603b      	str	r3, [r7, #0]
 800f176:	464b      	mov	r3, r9
 800f178:	eb45 0303 	adc.w	r3, r5, r3
 800f17c:	607b      	str	r3, [r7, #4]
 800f17e:	f04f 0200 	mov.w	r2, #0
 800f182:	f04f 0300 	mov.w	r3, #0
 800f186:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f18a:	4629      	mov	r1, r5
 800f18c:	028b      	lsls	r3, r1, #10
 800f18e:	4621      	mov	r1, r4
 800f190:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f194:	4621      	mov	r1, r4
 800f196:	028a      	lsls	r2, r1, #10
 800f198:	4610      	mov	r0, r2
 800f19a:	4619      	mov	r1, r3
 800f19c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f19e:	2200      	movs	r2, #0
 800f1a0:	61bb      	str	r3, [r7, #24]
 800f1a2:	61fa      	str	r2, [r7, #28]
 800f1a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f1a8:	f7f1 fd66 	bl	8000c78 <__aeabi_uldivmod>
 800f1ac:	4602      	mov	r2, r0
 800f1ae:	460b      	mov	r3, r1
 800f1b0:	4613      	mov	r3, r2
 800f1b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800f1b4:	4b0b      	ldr	r3, [pc, #44]	@ (800f1e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800f1b6:	685b      	ldr	r3, [r3, #4]
 800f1b8:	0c1b      	lsrs	r3, r3, #16
 800f1ba:	f003 0303 	and.w	r3, r3, #3
 800f1be:	3301      	adds	r3, #1
 800f1c0:	005b      	lsls	r3, r3, #1
 800f1c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800f1c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f1c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f1ce:	e002      	b.n	800f1d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f1d0:	4b05      	ldr	r3, [pc, #20]	@ (800f1e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800f1d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f1d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f1d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3750      	adds	r7, #80	@ 0x50
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f1e2:	bf00      	nop
 800f1e4:	40023800 	.word	0x40023800
 800f1e8:	00f42400 	.word	0x00f42400
 800f1ec:	007a1200 	.word	0x007a1200

0800f1f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f1f0:	b480      	push	{r7}
 800f1f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f1f4:	4b03      	ldr	r3, [pc, #12]	@ (800f204 <HAL_RCC_GetHCLKFreq+0x14>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f200:	4770      	bx	lr
 800f202:	bf00      	nop
 800f204:	20000000 	.word	0x20000000

0800f208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f20c:	f7ff fff0 	bl	800f1f0 <HAL_RCC_GetHCLKFreq>
 800f210:	4602      	mov	r2, r0
 800f212:	4b05      	ldr	r3, [pc, #20]	@ (800f228 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f214:	689b      	ldr	r3, [r3, #8]
 800f216:	0a9b      	lsrs	r3, r3, #10
 800f218:	f003 0307 	and.w	r3, r3, #7
 800f21c:	4903      	ldr	r1, [pc, #12]	@ (800f22c <HAL_RCC_GetPCLK1Freq+0x24>)
 800f21e:	5ccb      	ldrb	r3, [r1, r3]
 800f220:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f224:	4618      	mov	r0, r3
 800f226:	bd80      	pop	{r7, pc}
 800f228:	40023800 	.word	0x40023800
 800f22c:	0801721c 	.word	0x0801721c

0800f230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f234:	f7ff ffdc 	bl	800f1f0 <HAL_RCC_GetHCLKFreq>
 800f238:	4602      	mov	r2, r0
 800f23a:	4b05      	ldr	r3, [pc, #20]	@ (800f250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f23c:	689b      	ldr	r3, [r3, #8]
 800f23e:	0b5b      	lsrs	r3, r3, #13
 800f240:	f003 0307 	and.w	r3, r3, #7
 800f244:	4903      	ldr	r1, [pc, #12]	@ (800f254 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f246:	5ccb      	ldrb	r3, [r1, r3]
 800f248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	bd80      	pop	{r7, pc}
 800f250:	40023800 	.word	0x40023800
 800f254:	0801721c 	.word	0x0801721c

0800f258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d101      	bne.n	800f26a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f266:	2301      	movs	r3, #1
 800f268:	e07b      	b.n	800f362 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d108      	bne.n	800f284 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	685b      	ldr	r3, [r3, #4]
 800f276:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f27a:	d009      	beq.n	800f290 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2200      	movs	r2, #0
 800f280:	61da      	str	r2, [r3, #28]
 800f282:	e005      	b.n	800f290 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2200      	movs	r2, #0
 800f288:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2200      	movs	r2, #0
 800f28e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2200      	movs	r2, #0
 800f294:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f29c:	b2db      	uxtb	r3, r3
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d106      	bne.n	800f2b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f7f3 fa0c 	bl	80026c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2202      	movs	r2, #2
 800f2b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	681a      	ldr	r2, [r3, #0]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f2c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	689b      	ldr	r3, [r3, #8]
 800f2d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800f2d8:	431a      	orrs	r2, r3
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	68db      	ldr	r3, [r3, #12]
 800f2de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f2e2:	431a      	orrs	r2, r3
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	691b      	ldr	r3, [r3, #16]
 800f2e8:	f003 0302 	and.w	r3, r3, #2
 800f2ec:	431a      	orrs	r2, r3
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	695b      	ldr	r3, [r3, #20]
 800f2f2:	f003 0301 	and.w	r3, r3, #1
 800f2f6:	431a      	orrs	r2, r3
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	699b      	ldr	r3, [r3, #24]
 800f2fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f300:	431a      	orrs	r2, r3
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	69db      	ldr	r3, [r3, #28]
 800f306:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f30a:	431a      	orrs	r2, r3
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6a1b      	ldr	r3, [r3, #32]
 800f310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f314:	ea42 0103 	orr.w	r1, r2, r3
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f31c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	430a      	orrs	r2, r1
 800f326:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	699b      	ldr	r3, [r3, #24]
 800f32c:	0c1b      	lsrs	r3, r3, #16
 800f32e:	f003 0104 	and.w	r1, r3, #4
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f336:	f003 0210 	and.w	r2, r3, #16
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	430a      	orrs	r2, r1
 800f340:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	69da      	ldr	r2, [r3, #28]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f350:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2200      	movs	r2, #0
 800f356:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2201      	movs	r2, #1
 800f35c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800f360:	2300      	movs	r3, #0
}
 800f362:	4618      	mov	r0, r3
 800f364:	3708      	adds	r7, #8
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}

0800f36a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f36a:	b580      	push	{r7, lr}
 800f36c:	b088      	sub	sp, #32
 800f36e:	af00      	add	r7, sp, #0
 800f370:	60f8      	str	r0, [r7, #12]
 800f372:	60b9      	str	r1, [r7, #8]
 800f374:	603b      	str	r3, [r7, #0]
 800f376:	4613      	mov	r3, r2
 800f378:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f37a:	f7fd f9af 	bl	800c6dc <HAL_GetTick>
 800f37e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800f380:	88fb      	ldrh	r3, [r7, #6]
 800f382:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f38a:	b2db      	uxtb	r3, r3
 800f38c:	2b01      	cmp	r3, #1
 800f38e:	d001      	beq.n	800f394 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800f390:	2302      	movs	r3, #2
 800f392:	e12a      	b.n	800f5ea <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d002      	beq.n	800f3a0 <HAL_SPI_Transmit+0x36>
 800f39a:	88fb      	ldrh	r3, [r7, #6]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d101      	bne.n	800f3a4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	e122      	b.n	800f5ea <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f3aa:	2b01      	cmp	r3, #1
 800f3ac:	d101      	bne.n	800f3b2 <HAL_SPI_Transmit+0x48>
 800f3ae:	2302      	movs	r3, #2
 800f3b0:	e11b      	b.n	800f5ea <HAL_SPI_Transmit+0x280>
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	2203      	movs	r2, #3
 800f3be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	68ba      	ldr	r2, [r7, #8]
 800f3cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	88fa      	ldrh	r2, [r7, #6]
 800f3d2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	88fa      	ldrh	r2, [r7, #6]
 800f3d8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	689b      	ldr	r3, [r3, #8]
 800f3fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f400:	d10f      	bne.n	800f422 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	681a      	ldr	r2, [r3, #0]
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f410:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	681a      	ldr	r2, [r3, #0]
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f420:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f42c:	2b40      	cmp	r3, #64	@ 0x40
 800f42e:	d007      	beq.n	800f440 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	681a      	ldr	r2, [r3, #0]
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f43e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	68db      	ldr	r3, [r3, #12]
 800f444:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f448:	d152      	bne.n	800f4f0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d002      	beq.n	800f458 <HAL_SPI_Transmit+0xee>
 800f452:	8b7b      	ldrh	r3, [r7, #26]
 800f454:	2b01      	cmp	r3, #1
 800f456:	d145      	bne.n	800f4e4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f45c:	881a      	ldrh	r2, [r3, #0]
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f468:	1c9a      	adds	r2, r3, #2
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f472:	b29b      	uxth	r3, r3
 800f474:	3b01      	subs	r3, #1
 800f476:	b29a      	uxth	r2, r3
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f47c:	e032      	b.n	800f4e4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	689b      	ldr	r3, [r3, #8]
 800f484:	f003 0302 	and.w	r3, r3, #2
 800f488:	2b02      	cmp	r3, #2
 800f48a:	d112      	bne.n	800f4b2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f490:	881a      	ldrh	r2, [r3, #0]
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f49c:	1c9a      	adds	r2, r3, #2
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	b29a      	uxth	r2, r3
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f4b0:	e018      	b.n	800f4e4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f4b2:	f7fd f913 	bl	800c6dc <HAL_GetTick>
 800f4b6:	4602      	mov	r2, r0
 800f4b8:	69fb      	ldr	r3, [r7, #28]
 800f4ba:	1ad3      	subs	r3, r2, r3
 800f4bc:	683a      	ldr	r2, [r7, #0]
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	d803      	bhi.n	800f4ca <HAL_SPI_Transmit+0x160>
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4c8:	d102      	bne.n	800f4d0 <HAL_SPI_Transmit+0x166>
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d109      	bne.n	800f4e4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800f4e0:	2303      	movs	r3, #3
 800f4e2:	e082      	b.n	800f5ea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d1c7      	bne.n	800f47e <HAL_SPI_Transmit+0x114>
 800f4ee:	e053      	b.n	800f598 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d002      	beq.n	800f4fe <HAL_SPI_Transmit+0x194>
 800f4f8:	8b7b      	ldrh	r3, [r7, #26]
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d147      	bne.n	800f58e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	330c      	adds	r3, #12
 800f508:	7812      	ldrb	r2, [r2, #0]
 800f50a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f510:	1c5a      	adds	r2, r3, #1
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f51a:	b29b      	uxth	r3, r3
 800f51c:	3b01      	subs	r3, #1
 800f51e:	b29a      	uxth	r2, r3
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f524:	e033      	b.n	800f58e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	f003 0302 	and.w	r3, r3, #2
 800f530:	2b02      	cmp	r3, #2
 800f532:	d113      	bne.n	800f55c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	330c      	adds	r3, #12
 800f53e:	7812      	ldrb	r2, [r2, #0]
 800f540:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f546:	1c5a      	adds	r2, r3, #1
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f550:	b29b      	uxth	r3, r3
 800f552:	3b01      	subs	r3, #1
 800f554:	b29a      	uxth	r2, r3
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f55a:	e018      	b.n	800f58e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f55c:	f7fd f8be 	bl	800c6dc <HAL_GetTick>
 800f560:	4602      	mov	r2, r0
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	1ad3      	subs	r3, r2, r3
 800f566:	683a      	ldr	r2, [r7, #0]
 800f568:	429a      	cmp	r2, r3
 800f56a:	d803      	bhi.n	800f574 <HAL_SPI_Transmit+0x20a>
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f572:	d102      	bne.n	800f57a <HAL_SPI_Transmit+0x210>
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d109      	bne.n	800f58e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	2201      	movs	r2, #1
 800f57e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	2200      	movs	r2, #0
 800f586:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800f58a:	2303      	movs	r3, #3
 800f58c:	e02d      	b.n	800f5ea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f592:	b29b      	uxth	r3, r3
 800f594:	2b00      	cmp	r3, #0
 800f596:	d1c6      	bne.n	800f526 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f598:	69fa      	ldr	r2, [r7, #28]
 800f59a:	6839      	ldr	r1, [r7, #0]
 800f59c:	68f8      	ldr	r0, [r7, #12]
 800f59e:	f000 fa59 	bl	800fa54 <SPI_EndRxTxTransaction>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d002      	beq.n	800f5ae <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	2220      	movs	r2, #32
 800f5ac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	689b      	ldr	r3, [r3, #8]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d10a      	bne.n	800f5cc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	617b      	str	r3, [r7, #20]
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	68db      	ldr	r3, [r3, #12]
 800f5c0:	617b      	str	r3, [r7, #20]
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	689b      	ldr	r3, [r3, #8]
 800f5c8:	617b      	str	r3, [r7, #20]
 800f5ca:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	2201      	movs	r2, #1
 800f5d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d001      	beq.n	800f5e8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	e000      	b.n	800f5ea <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800f5e8:	2300      	movs	r3, #0
  }
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3720      	adds	r7, #32
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}

0800f5f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f5f2:	b580      	push	{r7, lr}
 800f5f4:	b08a      	sub	sp, #40	@ 0x28
 800f5f6:	af00      	add	r7, sp, #0
 800f5f8:	60f8      	str	r0, [r7, #12]
 800f5fa:	60b9      	str	r1, [r7, #8]
 800f5fc:	607a      	str	r2, [r7, #4]
 800f5fe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f600:	2301      	movs	r3, #1
 800f602:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f604:	f7fd f86a 	bl	800c6dc <HAL_GetTick>
 800f608:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f610:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	685b      	ldr	r3, [r3, #4]
 800f616:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800f618:	887b      	ldrh	r3, [r7, #2]
 800f61a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f61c:	7ffb      	ldrb	r3, [r7, #31]
 800f61e:	2b01      	cmp	r3, #1
 800f620:	d00c      	beq.n	800f63c <HAL_SPI_TransmitReceive+0x4a>
 800f622:	69bb      	ldr	r3, [r7, #24]
 800f624:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f628:	d106      	bne.n	800f638 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	689b      	ldr	r3, [r3, #8]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d102      	bne.n	800f638 <HAL_SPI_TransmitReceive+0x46>
 800f632:	7ffb      	ldrb	r3, [r7, #31]
 800f634:	2b04      	cmp	r3, #4
 800f636:	d001      	beq.n	800f63c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800f638:	2302      	movs	r3, #2
 800f63a:	e17f      	b.n	800f93c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d005      	beq.n	800f64e <HAL_SPI_TransmitReceive+0x5c>
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d002      	beq.n	800f64e <HAL_SPI_TransmitReceive+0x5c>
 800f648:	887b      	ldrh	r3, [r7, #2]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d101      	bne.n	800f652 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800f64e:	2301      	movs	r3, #1
 800f650:	e174      	b.n	800f93c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f658:	2b01      	cmp	r3, #1
 800f65a:	d101      	bne.n	800f660 <HAL_SPI_TransmitReceive+0x6e>
 800f65c:	2302      	movs	r3, #2
 800f65e:	e16d      	b.n	800f93c <HAL_SPI_TransmitReceive+0x34a>
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	2201      	movs	r2, #1
 800f664:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f66e:	b2db      	uxtb	r3, r3
 800f670:	2b04      	cmp	r3, #4
 800f672:	d003      	beq.n	800f67c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	2205      	movs	r2, #5
 800f678:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2200      	movs	r2, #0
 800f680:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	687a      	ldr	r2, [r7, #4]
 800f686:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	887a      	ldrh	r2, [r7, #2]
 800f68c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	887a      	ldrh	r2, [r7, #2]
 800f692:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	68ba      	ldr	r2, [r7, #8]
 800f698:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	887a      	ldrh	r2, [r7, #2]
 800f69e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	887a      	ldrh	r2, [r7, #2]
 800f6a4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f6bc:	2b40      	cmp	r3, #64	@ 0x40
 800f6be:	d007      	beq.n	800f6d0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	681a      	ldr	r2, [r3, #0]
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f6ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	68db      	ldr	r3, [r3, #12]
 800f6d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f6d8:	d17e      	bne.n	800f7d8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d002      	beq.n	800f6e8 <HAL_SPI_TransmitReceive+0xf6>
 800f6e2:	8afb      	ldrh	r3, [r7, #22]
 800f6e4:	2b01      	cmp	r3, #1
 800f6e6:	d16c      	bne.n	800f7c2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6ec:	881a      	ldrh	r2, [r3, #0]
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6f8:	1c9a      	adds	r2, r3, #2
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f702:	b29b      	uxth	r3, r3
 800f704:	3b01      	subs	r3, #1
 800f706:	b29a      	uxth	r2, r3
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f70c:	e059      	b.n	800f7c2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	689b      	ldr	r3, [r3, #8]
 800f714:	f003 0302 	and.w	r3, r3, #2
 800f718:	2b02      	cmp	r3, #2
 800f71a:	d11b      	bne.n	800f754 <HAL_SPI_TransmitReceive+0x162>
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f720:	b29b      	uxth	r3, r3
 800f722:	2b00      	cmp	r3, #0
 800f724:	d016      	beq.n	800f754 <HAL_SPI_TransmitReceive+0x162>
 800f726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f728:	2b01      	cmp	r3, #1
 800f72a:	d113      	bne.n	800f754 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f730:	881a      	ldrh	r2, [r3, #0]
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f73c:	1c9a      	adds	r2, r3, #2
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f746:	b29b      	uxth	r3, r3
 800f748:	3b01      	subs	r3, #1
 800f74a:	b29a      	uxth	r2, r3
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f750:	2300      	movs	r3, #0
 800f752:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	689b      	ldr	r3, [r3, #8]
 800f75a:	f003 0301 	and.w	r3, r3, #1
 800f75e:	2b01      	cmp	r3, #1
 800f760:	d119      	bne.n	800f796 <HAL_SPI_TransmitReceive+0x1a4>
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f766:	b29b      	uxth	r3, r3
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d014      	beq.n	800f796 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	68da      	ldr	r2, [r3, #12]
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f776:	b292      	uxth	r2, r2
 800f778:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f77e:	1c9a      	adds	r2, r3, #2
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f788:	b29b      	uxth	r3, r3
 800f78a:	3b01      	subs	r3, #1
 800f78c:	b29a      	uxth	r2, r3
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f792:	2301      	movs	r3, #1
 800f794:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f796:	f7fc ffa1 	bl	800c6dc <HAL_GetTick>
 800f79a:	4602      	mov	r2, r0
 800f79c:	6a3b      	ldr	r3, [r7, #32]
 800f79e:	1ad3      	subs	r3, r2, r3
 800f7a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d80d      	bhi.n	800f7c2 <HAL_SPI_TransmitReceive+0x1d0>
 800f7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ac:	d009      	beq.n	800f7c2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	2201      	movs	r2, #1
 800f7b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800f7be:	2303      	movs	r3, #3
 800f7c0:	e0bc      	b.n	800f93c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d1a0      	bne.n	800f70e <HAL_SPI_TransmitReceive+0x11c>
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f7d0:	b29b      	uxth	r3, r3
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d19b      	bne.n	800f70e <HAL_SPI_TransmitReceive+0x11c>
 800f7d6:	e082      	b.n	800f8de <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	685b      	ldr	r3, [r3, #4]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d002      	beq.n	800f7e6 <HAL_SPI_TransmitReceive+0x1f4>
 800f7e0:	8afb      	ldrh	r3, [r7, #22]
 800f7e2:	2b01      	cmp	r3, #1
 800f7e4:	d171      	bne.n	800f8ca <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	330c      	adds	r3, #12
 800f7f0:	7812      	ldrb	r2, [r2, #0]
 800f7f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7f8:	1c5a      	adds	r2, r3, #1
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f802:	b29b      	uxth	r3, r3
 800f804:	3b01      	subs	r3, #1
 800f806:	b29a      	uxth	r2, r3
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f80c:	e05d      	b.n	800f8ca <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	689b      	ldr	r3, [r3, #8]
 800f814:	f003 0302 	and.w	r3, r3, #2
 800f818:	2b02      	cmp	r3, #2
 800f81a:	d11c      	bne.n	800f856 <HAL_SPI_TransmitReceive+0x264>
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f820:	b29b      	uxth	r3, r3
 800f822:	2b00      	cmp	r3, #0
 800f824:	d017      	beq.n	800f856 <HAL_SPI_TransmitReceive+0x264>
 800f826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f828:	2b01      	cmp	r3, #1
 800f82a:	d114      	bne.n	800f856 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	330c      	adds	r3, #12
 800f836:	7812      	ldrb	r2, [r2, #0]
 800f838:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f83e:	1c5a      	adds	r2, r3, #1
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f848:	b29b      	uxth	r3, r3
 800f84a:	3b01      	subs	r3, #1
 800f84c:	b29a      	uxth	r2, r3
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f852:	2300      	movs	r3, #0
 800f854:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	689b      	ldr	r3, [r3, #8]
 800f85c:	f003 0301 	and.w	r3, r3, #1
 800f860:	2b01      	cmp	r3, #1
 800f862:	d119      	bne.n	800f898 <HAL_SPI_TransmitReceive+0x2a6>
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f868:	b29b      	uxth	r3, r3
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d014      	beq.n	800f898 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	68da      	ldr	r2, [r3, #12]
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f878:	b2d2      	uxtb	r2, r2
 800f87a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f880:	1c5a      	adds	r2, r3, #1
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f88a:	b29b      	uxth	r3, r3
 800f88c:	3b01      	subs	r3, #1
 800f88e:	b29a      	uxth	r2, r3
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f894:	2301      	movs	r3, #1
 800f896:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f898:	f7fc ff20 	bl	800c6dc <HAL_GetTick>
 800f89c:	4602      	mov	r2, r0
 800f89e:	6a3b      	ldr	r3, [r7, #32]
 800f8a0:	1ad3      	subs	r3, r2, r3
 800f8a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d803      	bhi.n	800f8b0 <HAL_SPI_TransmitReceive+0x2be>
 800f8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8ae:	d102      	bne.n	800f8b6 <HAL_SPI_TransmitReceive+0x2c4>
 800f8b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d109      	bne.n	800f8ca <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	2201      	movs	r2, #1
 800f8ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800f8c6:	2303      	movs	r3, #3
 800f8c8:	e038      	b.n	800f93c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d19c      	bne.n	800f80e <HAL_SPI_TransmitReceive+0x21c>
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d197      	bne.n	800f80e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f8de:	6a3a      	ldr	r2, [r7, #32]
 800f8e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f8e2:	68f8      	ldr	r0, [r7, #12]
 800f8e4:	f000 f8b6 	bl	800fa54 <SPI_EndRxTxTransaction>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d008      	beq.n	800f900 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	2220      	movs	r2, #32
 800f8f2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	e01d      	b.n	800f93c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	689b      	ldr	r3, [r3, #8]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d10a      	bne.n	800f91e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f908:	2300      	movs	r3, #0
 800f90a:	613b      	str	r3, [r7, #16]
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	68db      	ldr	r3, [r3, #12]
 800f912:	613b      	str	r3, [r7, #16]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	689b      	ldr	r3, [r3, #8]
 800f91a:	613b      	str	r3, [r7, #16]
 800f91c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2201      	movs	r2, #1
 800f922:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	2200      	movs	r2, #0
 800f92a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f932:	2b00      	cmp	r3, #0
 800f934:	d001      	beq.n	800f93a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800f936:	2301      	movs	r3, #1
 800f938:	e000      	b.n	800f93c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800f93a:	2300      	movs	r3, #0
  }
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3728      	adds	r7, #40	@ 0x28
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b088      	sub	sp, #32
 800f948:	af00      	add	r7, sp, #0
 800f94a:	60f8      	str	r0, [r7, #12]
 800f94c:	60b9      	str	r1, [r7, #8]
 800f94e:	603b      	str	r3, [r7, #0]
 800f950:	4613      	mov	r3, r2
 800f952:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f954:	f7fc fec2 	bl	800c6dc <HAL_GetTick>
 800f958:	4602      	mov	r2, r0
 800f95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f95c:	1a9b      	subs	r3, r3, r2
 800f95e:	683a      	ldr	r2, [r7, #0]
 800f960:	4413      	add	r3, r2
 800f962:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f964:	f7fc feba 	bl	800c6dc <HAL_GetTick>
 800f968:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f96a:	4b39      	ldr	r3, [pc, #228]	@ (800fa50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	015b      	lsls	r3, r3, #5
 800f970:	0d1b      	lsrs	r3, r3, #20
 800f972:	69fa      	ldr	r2, [r7, #28]
 800f974:	fb02 f303 	mul.w	r3, r2, r3
 800f978:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f97a:	e055      	b.n	800fa28 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f982:	d051      	beq.n	800fa28 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f984:	f7fc feaa 	bl	800c6dc <HAL_GetTick>
 800f988:	4602      	mov	r2, r0
 800f98a:	69bb      	ldr	r3, [r7, #24]
 800f98c:	1ad3      	subs	r3, r2, r3
 800f98e:	69fa      	ldr	r2, [r7, #28]
 800f990:	429a      	cmp	r2, r3
 800f992:	d902      	bls.n	800f99a <SPI_WaitFlagStateUntilTimeout+0x56>
 800f994:	69fb      	ldr	r3, [r7, #28]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d13d      	bne.n	800fa16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	685a      	ldr	r2, [r3, #4]
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f9a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f9b2:	d111      	bne.n	800f9d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	689b      	ldr	r3, [r3, #8]
 800f9b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f9bc:	d004      	beq.n	800f9c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	689b      	ldr	r3, [r3, #8]
 800f9c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f9c6:	d107      	bne.n	800f9d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	681a      	ldr	r2, [r3, #0]
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f9d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f9e0:	d10f      	bne.n	800fa02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	681a      	ldr	r2, [r3, #0]
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f9f0:	601a      	str	r2, [r3, #0]
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	681a      	ldr	r2, [r3, #0]
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800fa00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	2201      	movs	r2, #1
 800fa06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800fa12:	2303      	movs	r3, #3
 800fa14:	e018      	b.n	800fa48 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d102      	bne.n	800fa22 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	61fb      	str	r3, [r7, #28]
 800fa20:	e002      	b.n	800fa28 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800fa22:	697b      	ldr	r3, [r7, #20]
 800fa24:	3b01      	subs	r3, #1
 800fa26:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	689a      	ldr	r2, [r3, #8]
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	4013      	ands	r3, r2
 800fa32:	68ba      	ldr	r2, [r7, #8]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	bf0c      	ite	eq
 800fa38:	2301      	moveq	r3, #1
 800fa3a:	2300      	movne	r3, #0
 800fa3c:	b2db      	uxtb	r3, r3
 800fa3e:	461a      	mov	r2, r3
 800fa40:	79fb      	ldrb	r3, [r7, #7]
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d19a      	bne.n	800f97c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800fa46:	2300      	movs	r3, #0
}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3720      	adds	r7, #32
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	20000000 	.word	0x20000000

0800fa54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b088      	sub	sp, #32
 800fa58:	af02      	add	r7, sp, #8
 800fa5a:	60f8      	str	r0, [r7, #12]
 800fa5c:	60b9      	str	r1, [r7, #8]
 800fa5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	9300      	str	r3, [sp, #0]
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	2201      	movs	r2, #1
 800fa68:	2102      	movs	r1, #2
 800fa6a:	68f8      	ldr	r0, [r7, #12]
 800fa6c:	f7ff ff6a 	bl	800f944 <SPI_WaitFlagStateUntilTimeout>
 800fa70:	4603      	mov	r3, r0
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d007      	beq.n	800fa86 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa7a:	f043 0220 	orr.w	r2, r3, #32
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800fa82:	2303      	movs	r3, #3
 800fa84:	e032      	b.n	800faec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800fa86:	4b1b      	ldr	r3, [pc, #108]	@ (800faf4 <SPI_EndRxTxTransaction+0xa0>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	4a1b      	ldr	r2, [pc, #108]	@ (800faf8 <SPI_EndRxTxTransaction+0xa4>)
 800fa8c:	fba2 2303 	umull	r2, r3, r2, r3
 800fa90:	0d5b      	lsrs	r3, r3, #21
 800fa92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fa96:	fb02 f303 	mul.w	r3, r2, r3
 800fa9a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	685b      	ldr	r3, [r3, #4]
 800faa0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800faa4:	d112      	bne.n	800facc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	9300      	str	r3, [sp, #0]
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	2200      	movs	r2, #0
 800faae:	2180      	movs	r1, #128	@ 0x80
 800fab0:	68f8      	ldr	r0, [r7, #12]
 800fab2:	f7ff ff47 	bl	800f944 <SPI_WaitFlagStateUntilTimeout>
 800fab6:	4603      	mov	r3, r0
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d016      	beq.n	800faea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fac0:	f043 0220 	orr.w	r2, r3, #32
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800fac8:	2303      	movs	r3, #3
 800faca:	e00f      	b.n	800faec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d00a      	beq.n	800fae8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	3b01      	subs	r3, #1
 800fad6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	689b      	ldr	r3, [r3, #8]
 800fade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fae2:	2b80      	cmp	r3, #128	@ 0x80
 800fae4:	d0f2      	beq.n	800facc <SPI_EndRxTxTransaction+0x78>
 800fae6:	e000      	b.n	800faea <SPI_EndRxTxTransaction+0x96>
        break;
 800fae8:	bf00      	nop
  }

  return HAL_OK;
 800faea:	2300      	movs	r3, #0
}
 800faec:	4618      	mov	r0, r3
 800faee:	3718      	adds	r7, #24
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}
 800faf4:	20000000 	.word	0x20000000
 800faf8:	165e9f81 	.word	0x165e9f81

0800fafc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b082      	sub	sp, #8
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d101      	bne.n	800fb0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	e041      	b.n	800fb92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fb14:	b2db      	uxtb	r3, r3
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d106      	bne.n	800fb28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f7f2 fe18 	bl	8002758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2202      	movs	r2, #2
 800fb2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	3304      	adds	r3, #4
 800fb38:	4619      	mov	r1, r3
 800fb3a:	4610      	mov	r0, r2
 800fb3c:	f000 fa70 	bl	8010020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2201      	movs	r2, #1
 800fb44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2201      	movs	r2, #1
 800fb54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2201      	movs	r2, #1
 800fb5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2201      	movs	r2, #1
 800fb64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2201      	movs	r2, #1
 800fb74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2201      	movs	r2, #1
 800fb84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fb90:	2300      	movs	r3, #0
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3708      	adds	r7, #8
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}
	...

0800fb9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b085      	sub	sp, #20
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fbaa:	b2db      	uxtb	r3, r3
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d001      	beq.n	800fbb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fbb0:	2301      	movs	r3, #1
 800fbb2:	e044      	b.n	800fc3e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2202      	movs	r2, #2
 800fbb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	68da      	ldr	r2, [r3, #12]
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	f042 0201 	orr.w	r2, r2, #1
 800fbca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4a1e      	ldr	r2, [pc, #120]	@ (800fc4c <HAL_TIM_Base_Start_IT+0xb0>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d018      	beq.n	800fc08 <HAL_TIM_Base_Start_IT+0x6c>
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fbde:	d013      	beq.n	800fc08 <HAL_TIM_Base_Start_IT+0x6c>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	4a1a      	ldr	r2, [pc, #104]	@ (800fc50 <HAL_TIM_Base_Start_IT+0xb4>)
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d00e      	beq.n	800fc08 <HAL_TIM_Base_Start_IT+0x6c>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	4a19      	ldr	r2, [pc, #100]	@ (800fc54 <HAL_TIM_Base_Start_IT+0xb8>)
 800fbf0:	4293      	cmp	r3, r2
 800fbf2:	d009      	beq.n	800fc08 <HAL_TIM_Base_Start_IT+0x6c>
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	4a17      	ldr	r2, [pc, #92]	@ (800fc58 <HAL_TIM_Base_Start_IT+0xbc>)
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	d004      	beq.n	800fc08 <HAL_TIM_Base_Start_IT+0x6c>
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	4a16      	ldr	r2, [pc, #88]	@ (800fc5c <HAL_TIM_Base_Start_IT+0xc0>)
 800fc04:	4293      	cmp	r3, r2
 800fc06:	d111      	bne.n	800fc2c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	689b      	ldr	r3, [r3, #8]
 800fc0e:	f003 0307 	and.w	r3, r3, #7
 800fc12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	2b06      	cmp	r3, #6
 800fc18:	d010      	beq.n	800fc3c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	681a      	ldr	r2, [r3, #0]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f042 0201 	orr.w	r2, r2, #1
 800fc28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc2a:	e007      	b.n	800fc3c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	681a      	ldr	r2, [r3, #0]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	f042 0201 	orr.w	r2, r2, #1
 800fc3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800fc3c:	2300      	movs	r3, #0
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3714      	adds	r7, #20
 800fc42:	46bd      	mov	sp, r7
 800fc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc48:	4770      	bx	lr
 800fc4a:	bf00      	nop
 800fc4c:	40010000 	.word	0x40010000
 800fc50:	40000400 	.word	0x40000400
 800fc54:	40000800 	.word	0x40000800
 800fc58:	40000c00 	.word	0x40000c00
 800fc5c:	40014000 	.word	0x40014000

0800fc60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b084      	sub	sp, #16
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	68db      	ldr	r3, [r3, #12]
 800fc6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	691b      	ldr	r3, [r3, #16]
 800fc76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	f003 0302 	and.w	r3, r3, #2
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d020      	beq.n	800fcc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	f003 0302 	and.w	r3, r3, #2
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d01b      	beq.n	800fcc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	f06f 0202 	mvn.w	r2, #2
 800fc94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2201      	movs	r2, #1
 800fc9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	699b      	ldr	r3, [r3, #24]
 800fca2:	f003 0303 	and.w	r3, r3, #3
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d003      	beq.n	800fcb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f000 f999 	bl	800ffe2 <HAL_TIM_IC_CaptureCallback>
 800fcb0:	e005      	b.n	800fcbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcb2:	6878      	ldr	r0, [r7, #4]
 800fcb4:	f000 f98b 	bl	800ffce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	f000 f99c 	bl	800fff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	f003 0304 	and.w	r3, r3, #4
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d020      	beq.n	800fd10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	f003 0304 	and.w	r3, r3, #4
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d01b      	beq.n	800fd10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	f06f 0204 	mvn.w	r2, #4
 800fce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2202      	movs	r2, #2
 800fce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	699b      	ldr	r3, [r3, #24]
 800fcee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d003      	beq.n	800fcfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f000 f973 	bl	800ffe2 <HAL_TIM_IC_CaptureCallback>
 800fcfc:	e005      	b.n	800fd0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f000 f965 	bl	800ffce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f000 f976 	bl	800fff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	f003 0308 	and.w	r3, r3, #8
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d020      	beq.n	800fd5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	f003 0308 	and.w	r3, r3, #8
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d01b      	beq.n	800fd5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	f06f 0208 	mvn.w	r2, #8
 800fd2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2204      	movs	r2, #4
 800fd32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	69db      	ldr	r3, [r3, #28]
 800fd3a:	f003 0303 	and.w	r3, r3, #3
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d003      	beq.n	800fd4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f000 f94d 	bl	800ffe2 <HAL_TIM_IC_CaptureCallback>
 800fd48:	e005      	b.n	800fd56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f000 f93f 	bl	800ffce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f000 f950 	bl	800fff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800fd5c:	68bb      	ldr	r3, [r7, #8]
 800fd5e:	f003 0310 	and.w	r3, r3, #16
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d020      	beq.n	800fda8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	f003 0310 	and.w	r3, r3, #16
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d01b      	beq.n	800fda8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f06f 0210 	mvn.w	r2, #16
 800fd78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2208      	movs	r2, #8
 800fd7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	69db      	ldr	r3, [r3, #28]
 800fd86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d003      	beq.n	800fd96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f000 f927 	bl	800ffe2 <HAL_TIM_IC_CaptureCallback>
 800fd94:	e005      	b.n	800fda2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f000 f919 	bl	800ffce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f000 f92a 	bl	800fff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2200      	movs	r2, #0
 800fda6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	f003 0301 	and.w	r3, r3, #1
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d00c      	beq.n	800fdcc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	f003 0301 	and.w	r3, r3, #1
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d007      	beq.n	800fdcc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	f06f 0201 	mvn.w	r2, #1
 800fdc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f7f1 fc5e 	bl	8001688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d00c      	beq.n	800fdf0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d007      	beq.n	800fdf0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800fde8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f000 fab0 	bl	8010350 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d00c      	beq.n	800fe14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d007      	beq.n	800fe14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fe0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f000 f8fb 	bl	801000a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	f003 0320 	and.w	r3, r3, #32
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d00c      	beq.n	800fe38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	f003 0320 	and.w	r3, r3, #32
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d007      	beq.n	800fe38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	f06f 0220 	mvn.w	r2, #32
 800fe30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f000 fa82 	bl	801033c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fe38:	bf00      	nop
 800fe3a:	3710      	adds	r7, #16
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}

0800fe40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b084      	sub	sp, #16
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fe54:	2b01      	cmp	r3, #1
 800fe56:	d101      	bne.n	800fe5c <HAL_TIM_ConfigClockSource+0x1c>
 800fe58:	2302      	movs	r3, #2
 800fe5a:	e0b4      	b.n	800ffc6 <HAL_TIM_ConfigClockSource+0x186>
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2201      	movs	r2, #1
 800fe60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2202      	movs	r2, #2
 800fe68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	689b      	ldr	r3, [r3, #8]
 800fe72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800fe7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fe82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	68ba      	ldr	r2, [r7, #8]
 800fe8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fe94:	d03e      	beq.n	800ff14 <HAL_TIM_ConfigClockSource+0xd4>
 800fe96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fe9a:	f200 8087 	bhi.w	800ffac <HAL_TIM_ConfigClockSource+0x16c>
 800fe9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fea2:	f000 8086 	beq.w	800ffb2 <HAL_TIM_ConfigClockSource+0x172>
 800fea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800feaa:	d87f      	bhi.n	800ffac <HAL_TIM_ConfigClockSource+0x16c>
 800feac:	2b70      	cmp	r3, #112	@ 0x70
 800feae:	d01a      	beq.n	800fee6 <HAL_TIM_ConfigClockSource+0xa6>
 800feb0:	2b70      	cmp	r3, #112	@ 0x70
 800feb2:	d87b      	bhi.n	800ffac <HAL_TIM_ConfigClockSource+0x16c>
 800feb4:	2b60      	cmp	r3, #96	@ 0x60
 800feb6:	d050      	beq.n	800ff5a <HAL_TIM_ConfigClockSource+0x11a>
 800feb8:	2b60      	cmp	r3, #96	@ 0x60
 800feba:	d877      	bhi.n	800ffac <HAL_TIM_ConfigClockSource+0x16c>
 800febc:	2b50      	cmp	r3, #80	@ 0x50
 800febe:	d03c      	beq.n	800ff3a <HAL_TIM_ConfigClockSource+0xfa>
 800fec0:	2b50      	cmp	r3, #80	@ 0x50
 800fec2:	d873      	bhi.n	800ffac <HAL_TIM_ConfigClockSource+0x16c>
 800fec4:	2b40      	cmp	r3, #64	@ 0x40
 800fec6:	d058      	beq.n	800ff7a <HAL_TIM_ConfigClockSource+0x13a>
 800fec8:	2b40      	cmp	r3, #64	@ 0x40
 800feca:	d86f      	bhi.n	800ffac <HAL_TIM_ConfigClockSource+0x16c>
 800fecc:	2b30      	cmp	r3, #48	@ 0x30
 800fece:	d064      	beq.n	800ff9a <HAL_TIM_ConfigClockSource+0x15a>
 800fed0:	2b30      	cmp	r3, #48	@ 0x30
 800fed2:	d86b      	bhi.n	800ffac <HAL_TIM_ConfigClockSource+0x16c>
 800fed4:	2b20      	cmp	r3, #32
 800fed6:	d060      	beq.n	800ff9a <HAL_TIM_ConfigClockSource+0x15a>
 800fed8:	2b20      	cmp	r3, #32
 800feda:	d867      	bhi.n	800ffac <HAL_TIM_ConfigClockSource+0x16c>
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d05c      	beq.n	800ff9a <HAL_TIM_ConfigClockSource+0x15a>
 800fee0:	2b10      	cmp	r3, #16
 800fee2:	d05a      	beq.n	800ff9a <HAL_TIM_ConfigClockSource+0x15a>
 800fee4:	e062      	b.n	800ffac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fef6:	f000 f993 	bl	8010220 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	689b      	ldr	r3, [r3, #8]
 800ff00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ff08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	68ba      	ldr	r2, [r7, #8]
 800ff10:	609a      	str	r2, [r3, #8]
      break;
 800ff12:	e04f      	b.n	800ffb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ff24:	f000 f97c 	bl	8010220 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	689a      	ldr	r2, [r3, #8]
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ff36:	609a      	str	r2, [r3, #8]
      break;
 800ff38:	e03c      	b.n	800ffb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff46:	461a      	mov	r2, r3
 800ff48:	f000 f8f0 	bl	801012c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	2150      	movs	r1, #80	@ 0x50
 800ff52:	4618      	mov	r0, r3
 800ff54:	f000 f949 	bl	80101ea <TIM_ITRx_SetConfig>
      break;
 800ff58:	e02c      	b.n	800ffb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ff66:	461a      	mov	r2, r3
 800ff68:	f000 f90f 	bl	801018a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	2160      	movs	r1, #96	@ 0x60
 800ff72:	4618      	mov	r0, r3
 800ff74:	f000 f939 	bl	80101ea <TIM_ITRx_SetConfig>
      break;
 800ff78:	e01c      	b.n	800ffb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ff86:	461a      	mov	r2, r3
 800ff88:	f000 f8d0 	bl	801012c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	2140      	movs	r1, #64	@ 0x40
 800ff92:	4618      	mov	r0, r3
 800ff94:	f000 f929 	bl	80101ea <TIM_ITRx_SetConfig>
      break;
 800ff98:	e00c      	b.n	800ffb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681a      	ldr	r2, [r3, #0]
 800ff9e:	683b      	ldr	r3, [r7, #0]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	4610      	mov	r0, r2
 800ffa6:	f000 f920 	bl	80101ea <TIM_ITRx_SetConfig>
      break;
 800ffaa:	e003      	b.n	800ffb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ffac:	2301      	movs	r3, #1
 800ffae:	73fb      	strb	r3, [r7, #15]
      break;
 800ffb0:	e000      	b.n	800ffb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ffb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2201      	movs	r2, #1
 800ffb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2200      	movs	r2, #0
 800ffc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ffc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3710      	adds	r7, #16
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}

0800ffce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ffce:	b480      	push	{r7}
 800ffd0:	b083      	sub	sp, #12
 800ffd2:	af00      	add	r7, sp, #0
 800ffd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ffd6:	bf00      	nop
 800ffd8:	370c      	adds	r7, #12
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe0:	4770      	bx	lr

0800ffe2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ffe2:	b480      	push	{r7}
 800ffe4:	b083      	sub	sp, #12
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ffea:	bf00      	nop
 800ffec:	370c      	adds	r7, #12
 800ffee:	46bd      	mov	sp, r7
 800fff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff4:	4770      	bx	lr

0800fff6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fff6:	b480      	push	{r7}
 800fff8:	b083      	sub	sp, #12
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fffe:	bf00      	nop
 8010000:	370c      	adds	r7, #12
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr

0801000a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801000a:	b480      	push	{r7}
 801000c:	b083      	sub	sp, #12
 801000e:	af00      	add	r7, sp, #0
 8010010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010012:	bf00      	nop
 8010014:	370c      	adds	r7, #12
 8010016:	46bd      	mov	sp, r7
 8010018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001c:	4770      	bx	lr
	...

08010020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010020:	b480      	push	{r7}
 8010022:	b085      	sub	sp, #20
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	4a37      	ldr	r2, [pc, #220]	@ (8010110 <TIM_Base_SetConfig+0xf0>)
 8010034:	4293      	cmp	r3, r2
 8010036:	d00f      	beq.n	8010058 <TIM_Base_SetConfig+0x38>
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801003e:	d00b      	beq.n	8010058 <TIM_Base_SetConfig+0x38>
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	4a34      	ldr	r2, [pc, #208]	@ (8010114 <TIM_Base_SetConfig+0xf4>)
 8010044:	4293      	cmp	r3, r2
 8010046:	d007      	beq.n	8010058 <TIM_Base_SetConfig+0x38>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	4a33      	ldr	r2, [pc, #204]	@ (8010118 <TIM_Base_SetConfig+0xf8>)
 801004c:	4293      	cmp	r3, r2
 801004e:	d003      	beq.n	8010058 <TIM_Base_SetConfig+0x38>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	4a32      	ldr	r2, [pc, #200]	@ (801011c <TIM_Base_SetConfig+0xfc>)
 8010054:	4293      	cmp	r3, r2
 8010056:	d108      	bne.n	801006a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801005e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	685b      	ldr	r3, [r3, #4]
 8010064:	68fa      	ldr	r2, [r7, #12]
 8010066:	4313      	orrs	r3, r2
 8010068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	4a28      	ldr	r2, [pc, #160]	@ (8010110 <TIM_Base_SetConfig+0xf0>)
 801006e:	4293      	cmp	r3, r2
 8010070:	d01b      	beq.n	80100aa <TIM_Base_SetConfig+0x8a>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010078:	d017      	beq.n	80100aa <TIM_Base_SetConfig+0x8a>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	4a25      	ldr	r2, [pc, #148]	@ (8010114 <TIM_Base_SetConfig+0xf4>)
 801007e:	4293      	cmp	r3, r2
 8010080:	d013      	beq.n	80100aa <TIM_Base_SetConfig+0x8a>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	4a24      	ldr	r2, [pc, #144]	@ (8010118 <TIM_Base_SetConfig+0xf8>)
 8010086:	4293      	cmp	r3, r2
 8010088:	d00f      	beq.n	80100aa <TIM_Base_SetConfig+0x8a>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	4a23      	ldr	r2, [pc, #140]	@ (801011c <TIM_Base_SetConfig+0xfc>)
 801008e:	4293      	cmp	r3, r2
 8010090:	d00b      	beq.n	80100aa <TIM_Base_SetConfig+0x8a>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	4a22      	ldr	r2, [pc, #136]	@ (8010120 <TIM_Base_SetConfig+0x100>)
 8010096:	4293      	cmp	r3, r2
 8010098:	d007      	beq.n	80100aa <TIM_Base_SetConfig+0x8a>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	4a21      	ldr	r2, [pc, #132]	@ (8010124 <TIM_Base_SetConfig+0x104>)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d003      	beq.n	80100aa <TIM_Base_SetConfig+0x8a>
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	4a20      	ldr	r2, [pc, #128]	@ (8010128 <TIM_Base_SetConfig+0x108>)
 80100a6:	4293      	cmp	r3, r2
 80100a8:	d108      	bne.n	80100bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80100b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	68db      	ldr	r3, [r3, #12]
 80100b6:	68fa      	ldr	r2, [r7, #12]
 80100b8:	4313      	orrs	r3, r2
 80100ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	695b      	ldr	r3, [r3, #20]
 80100c6:	4313      	orrs	r3, r2
 80100c8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	689a      	ldr	r2, [r3, #8]
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	681a      	ldr	r2, [r3, #0]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	4a0c      	ldr	r2, [pc, #48]	@ (8010110 <TIM_Base_SetConfig+0xf0>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	d103      	bne.n	80100ea <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	691a      	ldr	r2, [r3, #16]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	f043 0204 	orr.w	r2, r3, #4
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	2201      	movs	r2, #1
 80100fa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	68fa      	ldr	r2, [r7, #12]
 8010100:	601a      	str	r2, [r3, #0]
}
 8010102:	bf00      	nop
 8010104:	3714      	adds	r7, #20
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr
 801010e:	bf00      	nop
 8010110:	40010000 	.word	0x40010000
 8010114:	40000400 	.word	0x40000400
 8010118:	40000800 	.word	0x40000800
 801011c:	40000c00 	.word	0x40000c00
 8010120:	40014000 	.word	0x40014000
 8010124:	40014400 	.word	0x40014400
 8010128:	40014800 	.word	0x40014800

0801012c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801012c:	b480      	push	{r7}
 801012e:	b087      	sub	sp, #28
 8010130:	af00      	add	r7, sp, #0
 8010132:	60f8      	str	r0, [r7, #12]
 8010134:	60b9      	str	r1, [r7, #8]
 8010136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	6a1b      	ldr	r3, [r3, #32]
 801013c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	6a1b      	ldr	r3, [r3, #32]
 8010142:	f023 0201 	bic.w	r2, r3, #1
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	699b      	ldr	r3, [r3, #24]
 801014e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8010156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	011b      	lsls	r3, r3, #4
 801015c:	693a      	ldr	r2, [r7, #16]
 801015e:	4313      	orrs	r3, r2
 8010160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	f023 030a 	bic.w	r3, r3, #10
 8010168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801016a:	697a      	ldr	r2, [r7, #20]
 801016c:	68bb      	ldr	r3, [r7, #8]
 801016e:	4313      	orrs	r3, r2
 8010170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	693a      	ldr	r2, [r7, #16]
 8010176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	697a      	ldr	r2, [r7, #20]
 801017c:	621a      	str	r2, [r3, #32]
}
 801017e:	bf00      	nop
 8010180:	371c      	adds	r7, #28
 8010182:	46bd      	mov	sp, r7
 8010184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010188:	4770      	bx	lr

0801018a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801018a:	b480      	push	{r7}
 801018c:	b087      	sub	sp, #28
 801018e:	af00      	add	r7, sp, #0
 8010190:	60f8      	str	r0, [r7, #12]
 8010192:	60b9      	str	r1, [r7, #8]
 8010194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	6a1b      	ldr	r3, [r3, #32]
 801019a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	6a1b      	ldr	r3, [r3, #32]
 80101a0:	f023 0210 	bic.w	r2, r3, #16
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	699b      	ldr	r3, [r3, #24]
 80101ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80101b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	031b      	lsls	r3, r3, #12
 80101ba:	693a      	ldr	r2, [r7, #16]
 80101bc:	4313      	orrs	r3, r2
 80101be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80101c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	011b      	lsls	r3, r3, #4
 80101cc:	697a      	ldr	r2, [r7, #20]
 80101ce:	4313      	orrs	r3, r2
 80101d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	693a      	ldr	r2, [r7, #16]
 80101d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	697a      	ldr	r2, [r7, #20]
 80101dc:	621a      	str	r2, [r3, #32]
}
 80101de:	bf00      	nop
 80101e0:	371c      	adds	r7, #28
 80101e2:	46bd      	mov	sp, r7
 80101e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e8:	4770      	bx	lr

080101ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80101ea:	b480      	push	{r7}
 80101ec:	b085      	sub	sp, #20
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	6078      	str	r0, [r7, #4]
 80101f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	689b      	ldr	r3, [r3, #8]
 80101f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010202:	683a      	ldr	r2, [r7, #0]
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	4313      	orrs	r3, r2
 8010208:	f043 0307 	orr.w	r3, r3, #7
 801020c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	68fa      	ldr	r2, [r7, #12]
 8010212:	609a      	str	r2, [r3, #8]
}
 8010214:	bf00      	nop
 8010216:	3714      	adds	r7, #20
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr

08010220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010220:	b480      	push	{r7}
 8010222:	b087      	sub	sp, #28
 8010224:	af00      	add	r7, sp, #0
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	60b9      	str	r1, [r7, #8]
 801022a:	607a      	str	r2, [r7, #4]
 801022c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	689b      	ldr	r3, [r3, #8]
 8010232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801023a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	021a      	lsls	r2, r3, #8
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	431a      	orrs	r2, r3
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	4313      	orrs	r3, r2
 8010248:	697a      	ldr	r2, [r7, #20]
 801024a:	4313      	orrs	r3, r2
 801024c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	697a      	ldr	r2, [r7, #20]
 8010252:	609a      	str	r2, [r3, #8]
}
 8010254:	bf00      	nop
 8010256:	371c      	adds	r7, #28
 8010258:	46bd      	mov	sp, r7
 801025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025e:	4770      	bx	lr

08010260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010260:	b480      	push	{r7}
 8010262:	b085      	sub	sp, #20
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010270:	2b01      	cmp	r3, #1
 8010272:	d101      	bne.n	8010278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010274:	2302      	movs	r3, #2
 8010276:	e050      	b.n	801031a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2201      	movs	r2, #1
 801027c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2202      	movs	r2, #2
 8010284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	685b      	ldr	r3, [r3, #4]
 801028e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	689b      	ldr	r3, [r3, #8]
 8010296:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801029e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	68fa      	ldr	r2, [r7, #12]
 80102a6:	4313      	orrs	r3, r2
 80102a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	68fa      	ldr	r2, [r7, #12]
 80102b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	4a1c      	ldr	r2, [pc, #112]	@ (8010328 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80102b8:	4293      	cmp	r3, r2
 80102ba:	d018      	beq.n	80102ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80102c4:	d013      	beq.n	80102ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	4a18      	ldr	r2, [pc, #96]	@ (801032c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80102cc:	4293      	cmp	r3, r2
 80102ce:	d00e      	beq.n	80102ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	4a16      	ldr	r2, [pc, #88]	@ (8010330 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80102d6:	4293      	cmp	r3, r2
 80102d8:	d009      	beq.n	80102ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	4a15      	ldr	r2, [pc, #84]	@ (8010334 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80102e0:	4293      	cmp	r3, r2
 80102e2:	d004      	beq.n	80102ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	4a13      	ldr	r2, [pc, #76]	@ (8010338 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80102ea:	4293      	cmp	r3, r2
 80102ec:	d10c      	bne.n	8010308 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80102f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	685b      	ldr	r3, [r3, #4]
 80102fa:	68ba      	ldr	r2, [r7, #8]
 80102fc:	4313      	orrs	r3, r2
 80102fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	68ba      	ldr	r2, [r7, #8]
 8010306:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2201      	movs	r2, #1
 801030c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2200      	movs	r2, #0
 8010314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010318:	2300      	movs	r3, #0
}
 801031a:	4618      	mov	r0, r3
 801031c:	3714      	adds	r7, #20
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr
 8010326:	bf00      	nop
 8010328:	40010000 	.word	0x40010000
 801032c:	40000400 	.word	0x40000400
 8010330:	40000800 	.word	0x40000800
 8010334:	40000c00 	.word	0x40000c00
 8010338:	40014000 	.word	0x40014000

0801033c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801033c:	b480      	push	{r7}
 801033e:	b083      	sub	sp, #12
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010344:	bf00      	nop
 8010346:	370c      	adds	r7, #12
 8010348:	46bd      	mov	sp, r7
 801034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034e:	4770      	bx	lr

08010350 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010350:	b480      	push	{r7}
 8010352:	b083      	sub	sp, #12
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010358:	bf00      	nop
 801035a:	370c      	adds	r7, #12
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr

08010364 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b082      	sub	sp, #8
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d101      	bne.n	8010376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010372:	2301      	movs	r3, #1
 8010374:	e042      	b.n	80103fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801037c:	b2db      	uxtb	r3, r3
 801037e:	2b00      	cmp	r3, #0
 8010380:	d106      	bne.n	8010390 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2200      	movs	r2, #0
 8010386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	f000 f83a 	bl	8010404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2224      	movs	r2, #36	@ 0x24
 8010394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	68da      	ldr	r2, [r3, #12]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80103a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f000 f835 	bl	8010418 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	691a      	ldr	r2, [r3, #16]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80103bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	695a      	ldr	r2, [r3, #20]
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80103cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	68da      	ldr	r2, [r3, #12]
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80103dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2200      	movs	r2, #0
 80103e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2220      	movs	r2, #32
 80103e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2220      	movs	r2, #32
 80103f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	2200      	movs	r2, #0
 80103f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80103fa:	2300      	movs	r3, #0
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3708      	adds	r7, #8
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8010404:	b480      	push	{r7}
 8010406:	b083      	sub	sp, #12
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 801040c:	bf00      	nop
 801040e:	370c      	adds	r7, #12
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr

08010418 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801041c:	b0c0      	sub	sp, #256	@ 0x100
 801041e:	af00      	add	r7, sp, #0
 8010420:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	691b      	ldr	r3, [r3, #16]
 801042c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8010430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010434:	68d9      	ldr	r1, [r3, #12]
 8010436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801043a:	681a      	ldr	r2, [r3, #0]
 801043c:	ea40 0301 	orr.w	r3, r0, r1
 8010440:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010446:	689a      	ldr	r2, [r3, #8]
 8010448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801044c:	691b      	ldr	r3, [r3, #16]
 801044e:	431a      	orrs	r2, r3
 8010450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010454:	695b      	ldr	r3, [r3, #20]
 8010456:	431a      	orrs	r2, r3
 8010458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801045c:	69db      	ldr	r3, [r3, #28]
 801045e:	4313      	orrs	r3, r2
 8010460:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8010464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	68db      	ldr	r3, [r3, #12]
 801046c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8010470:	f021 010c 	bic.w	r1, r1, #12
 8010474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010478:	681a      	ldr	r2, [r3, #0]
 801047a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801047e:	430b      	orrs	r3, r1
 8010480:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	695b      	ldr	r3, [r3, #20]
 801048a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 801048e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010492:	6999      	ldr	r1, [r3, #24]
 8010494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010498:	681a      	ldr	r2, [r3, #0]
 801049a:	ea40 0301 	orr.w	r3, r0, r1
 801049e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80104a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80104a4:	681a      	ldr	r2, [r3, #0]
 80104a6:	4b8f      	ldr	r3, [pc, #572]	@ (80106e4 <UART_SetConfig+0x2cc>)
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d005      	beq.n	80104b8 <UART_SetConfig+0xa0>
 80104ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80104b0:	681a      	ldr	r2, [r3, #0]
 80104b2:	4b8d      	ldr	r3, [pc, #564]	@ (80106e8 <UART_SetConfig+0x2d0>)
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d104      	bne.n	80104c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80104b8:	f7fe feba 	bl	800f230 <HAL_RCC_GetPCLK2Freq>
 80104bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80104c0:	e003      	b.n	80104ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80104c2:	f7fe fea1 	bl	800f208 <HAL_RCC_GetPCLK1Freq>
 80104c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80104ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80104ce:	69db      	ldr	r3, [r3, #28]
 80104d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80104d4:	f040 810c 	bne.w	80106f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80104d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80104dc:	2200      	movs	r2, #0
 80104de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80104e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80104e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80104ea:	4622      	mov	r2, r4
 80104ec:	462b      	mov	r3, r5
 80104ee:	1891      	adds	r1, r2, r2
 80104f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80104f2:	415b      	adcs	r3, r3
 80104f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80104f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80104fa:	4621      	mov	r1, r4
 80104fc:	eb12 0801 	adds.w	r8, r2, r1
 8010500:	4629      	mov	r1, r5
 8010502:	eb43 0901 	adc.w	r9, r3, r1
 8010506:	f04f 0200 	mov.w	r2, #0
 801050a:	f04f 0300 	mov.w	r3, #0
 801050e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010512:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010516:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801051a:	4690      	mov	r8, r2
 801051c:	4699      	mov	r9, r3
 801051e:	4623      	mov	r3, r4
 8010520:	eb18 0303 	adds.w	r3, r8, r3
 8010524:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8010528:	462b      	mov	r3, r5
 801052a:	eb49 0303 	adc.w	r3, r9, r3
 801052e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010536:	685b      	ldr	r3, [r3, #4]
 8010538:	2200      	movs	r2, #0
 801053a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801053e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8010542:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8010546:	460b      	mov	r3, r1
 8010548:	18db      	adds	r3, r3, r3
 801054a:	653b      	str	r3, [r7, #80]	@ 0x50
 801054c:	4613      	mov	r3, r2
 801054e:	eb42 0303 	adc.w	r3, r2, r3
 8010552:	657b      	str	r3, [r7, #84]	@ 0x54
 8010554:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8010558:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 801055c:	f7f0 fb8c 	bl	8000c78 <__aeabi_uldivmod>
 8010560:	4602      	mov	r2, r0
 8010562:	460b      	mov	r3, r1
 8010564:	4b61      	ldr	r3, [pc, #388]	@ (80106ec <UART_SetConfig+0x2d4>)
 8010566:	fba3 2302 	umull	r2, r3, r3, r2
 801056a:	095b      	lsrs	r3, r3, #5
 801056c:	011c      	lsls	r4, r3, #4
 801056e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010572:	2200      	movs	r2, #0
 8010574:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010578:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 801057c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8010580:	4642      	mov	r2, r8
 8010582:	464b      	mov	r3, r9
 8010584:	1891      	adds	r1, r2, r2
 8010586:	64b9      	str	r1, [r7, #72]	@ 0x48
 8010588:	415b      	adcs	r3, r3
 801058a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801058c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8010590:	4641      	mov	r1, r8
 8010592:	eb12 0a01 	adds.w	sl, r2, r1
 8010596:	4649      	mov	r1, r9
 8010598:	eb43 0b01 	adc.w	fp, r3, r1
 801059c:	f04f 0200 	mov.w	r2, #0
 80105a0:	f04f 0300 	mov.w	r3, #0
 80105a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80105a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80105ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80105b0:	4692      	mov	sl, r2
 80105b2:	469b      	mov	fp, r3
 80105b4:	4643      	mov	r3, r8
 80105b6:	eb1a 0303 	adds.w	r3, sl, r3
 80105ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80105be:	464b      	mov	r3, r9
 80105c0:	eb4b 0303 	adc.w	r3, fp, r3
 80105c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80105c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	2200      	movs	r2, #0
 80105d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80105d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80105d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80105dc:	460b      	mov	r3, r1
 80105de:	18db      	adds	r3, r3, r3
 80105e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80105e2:	4613      	mov	r3, r2
 80105e4:	eb42 0303 	adc.w	r3, r2, r3
 80105e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80105ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80105ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80105f2:	f7f0 fb41 	bl	8000c78 <__aeabi_uldivmod>
 80105f6:	4602      	mov	r2, r0
 80105f8:	460b      	mov	r3, r1
 80105fa:	4611      	mov	r1, r2
 80105fc:	4b3b      	ldr	r3, [pc, #236]	@ (80106ec <UART_SetConfig+0x2d4>)
 80105fe:	fba3 2301 	umull	r2, r3, r3, r1
 8010602:	095b      	lsrs	r3, r3, #5
 8010604:	2264      	movs	r2, #100	@ 0x64
 8010606:	fb02 f303 	mul.w	r3, r2, r3
 801060a:	1acb      	subs	r3, r1, r3
 801060c:	00db      	lsls	r3, r3, #3
 801060e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8010612:	4b36      	ldr	r3, [pc, #216]	@ (80106ec <UART_SetConfig+0x2d4>)
 8010614:	fba3 2302 	umull	r2, r3, r3, r2
 8010618:	095b      	lsrs	r3, r3, #5
 801061a:	005b      	lsls	r3, r3, #1
 801061c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8010620:	441c      	add	r4, r3
 8010622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010626:	2200      	movs	r2, #0
 8010628:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801062c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8010630:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8010634:	4642      	mov	r2, r8
 8010636:	464b      	mov	r3, r9
 8010638:	1891      	adds	r1, r2, r2
 801063a:	63b9      	str	r1, [r7, #56]	@ 0x38
 801063c:	415b      	adcs	r3, r3
 801063e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010640:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8010644:	4641      	mov	r1, r8
 8010646:	1851      	adds	r1, r2, r1
 8010648:	6339      	str	r1, [r7, #48]	@ 0x30
 801064a:	4649      	mov	r1, r9
 801064c:	414b      	adcs	r3, r1
 801064e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010650:	f04f 0200 	mov.w	r2, #0
 8010654:	f04f 0300 	mov.w	r3, #0
 8010658:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 801065c:	4659      	mov	r1, fp
 801065e:	00cb      	lsls	r3, r1, #3
 8010660:	4651      	mov	r1, sl
 8010662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010666:	4651      	mov	r1, sl
 8010668:	00ca      	lsls	r2, r1, #3
 801066a:	4610      	mov	r0, r2
 801066c:	4619      	mov	r1, r3
 801066e:	4603      	mov	r3, r0
 8010670:	4642      	mov	r2, r8
 8010672:	189b      	adds	r3, r3, r2
 8010674:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010678:	464b      	mov	r3, r9
 801067a:	460a      	mov	r2, r1
 801067c:	eb42 0303 	adc.w	r3, r2, r3
 8010680:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010688:	685b      	ldr	r3, [r3, #4]
 801068a:	2200      	movs	r2, #0
 801068c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010690:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8010694:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8010698:	460b      	mov	r3, r1
 801069a:	18db      	adds	r3, r3, r3
 801069c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801069e:	4613      	mov	r3, r2
 80106a0:	eb42 0303 	adc.w	r3, r2, r3
 80106a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80106a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80106aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80106ae:	f7f0 fae3 	bl	8000c78 <__aeabi_uldivmod>
 80106b2:	4602      	mov	r2, r0
 80106b4:	460b      	mov	r3, r1
 80106b6:	4b0d      	ldr	r3, [pc, #52]	@ (80106ec <UART_SetConfig+0x2d4>)
 80106b8:	fba3 1302 	umull	r1, r3, r3, r2
 80106bc:	095b      	lsrs	r3, r3, #5
 80106be:	2164      	movs	r1, #100	@ 0x64
 80106c0:	fb01 f303 	mul.w	r3, r1, r3
 80106c4:	1ad3      	subs	r3, r2, r3
 80106c6:	00db      	lsls	r3, r3, #3
 80106c8:	3332      	adds	r3, #50	@ 0x32
 80106ca:	4a08      	ldr	r2, [pc, #32]	@ (80106ec <UART_SetConfig+0x2d4>)
 80106cc:	fba2 2303 	umull	r2, r3, r2, r3
 80106d0:	095b      	lsrs	r3, r3, #5
 80106d2:	f003 0207 	and.w	r2, r3, #7
 80106d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	4422      	add	r2, r4
 80106de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80106e0:	e106      	b.n	80108f0 <UART_SetConfig+0x4d8>
 80106e2:	bf00      	nop
 80106e4:	40011000 	.word	0x40011000
 80106e8:	40011400 	.word	0x40011400
 80106ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80106f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80106f4:	2200      	movs	r2, #0
 80106f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80106fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80106fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8010702:	4642      	mov	r2, r8
 8010704:	464b      	mov	r3, r9
 8010706:	1891      	adds	r1, r2, r2
 8010708:	6239      	str	r1, [r7, #32]
 801070a:	415b      	adcs	r3, r3
 801070c:	627b      	str	r3, [r7, #36]	@ 0x24
 801070e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010712:	4641      	mov	r1, r8
 8010714:	1854      	adds	r4, r2, r1
 8010716:	4649      	mov	r1, r9
 8010718:	eb43 0501 	adc.w	r5, r3, r1
 801071c:	f04f 0200 	mov.w	r2, #0
 8010720:	f04f 0300 	mov.w	r3, #0
 8010724:	00eb      	lsls	r3, r5, #3
 8010726:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801072a:	00e2      	lsls	r2, r4, #3
 801072c:	4614      	mov	r4, r2
 801072e:	461d      	mov	r5, r3
 8010730:	4643      	mov	r3, r8
 8010732:	18e3      	adds	r3, r4, r3
 8010734:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010738:	464b      	mov	r3, r9
 801073a:	eb45 0303 	adc.w	r3, r5, r3
 801073e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010746:	685b      	ldr	r3, [r3, #4]
 8010748:	2200      	movs	r2, #0
 801074a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801074e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010752:	f04f 0200 	mov.w	r2, #0
 8010756:	f04f 0300 	mov.w	r3, #0
 801075a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801075e:	4629      	mov	r1, r5
 8010760:	008b      	lsls	r3, r1, #2
 8010762:	4621      	mov	r1, r4
 8010764:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010768:	4621      	mov	r1, r4
 801076a:	008a      	lsls	r2, r1, #2
 801076c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8010770:	f7f0 fa82 	bl	8000c78 <__aeabi_uldivmod>
 8010774:	4602      	mov	r2, r0
 8010776:	460b      	mov	r3, r1
 8010778:	4b60      	ldr	r3, [pc, #384]	@ (80108fc <UART_SetConfig+0x4e4>)
 801077a:	fba3 2302 	umull	r2, r3, r3, r2
 801077e:	095b      	lsrs	r3, r3, #5
 8010780:	011c      	lsls	r4, r3, #4
 8010782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010786:	2200      	movs	r2, #0
 8010788:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801078c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010790:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8010794:	4642      	mov	r2, r8
 8010796:	464b      	mov	r3, r9
 8010798:	1891      	adds	r1, r2, r2
 801079a:	61b9      	str	r1, [r7, #24]
 801079c:	415b      	adcs	r3, r3
 801079e:	61fb      	str	r3, [r7, #28]
 80107a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80107a4:	4641      	mov	r1, r8
 80107a6:	1851      	adds	r1, r2, r1
 80107a8:	6139      	str	r1, [r7, #16]
 80107aa:	4649      	mov	r1, r9
 80107ac:	414b      	adcs	r3, r1
 80107ae:	617b      	str	r3, [r7, #20]
 80107b0:	f04f 0200 	mov.w	r2, #0
 80107b4:	f04f 0300 	mov.w	r3, #0
 80107b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80107bc:	4659      	mov	r1, fp
 80107be:	00cb      	lsls	r3, r1, #3
 80107c0:	4651      	mov	r1, sl
 80107c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80107c6:	4651      	mov	r1, sl
 80107c8:	00ca      	lsls	r2, r1, #3
 80107ca:	4610      	mov	r0, r2
 80107cc:	4619      	mov	r1, r3
 80107ce:	4603      	mov	r3, r0
 80107d0:	4642      	mov	r2, r8
 80107d2:	189b      	adds	r3, r3, r2
 80107d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80107d8:	464b      	mov	r3, r9
 80107da:	460a      	mov	r2, r1
 80107dc:	eb42 0303 	adc.w	r3, r2, r3
 80107e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80107e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80107e8:	685b      	ldr	r3, [r3, #4]
 80107ea:	2200      	movs	r2, #0
 80107ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80107ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80107f0:	f04f 0200 	mov.w	r2, #0
 80107f4:	f04f 0300 	mov.w	r3, #0
 80107f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80107fc:	4649      	mov	r1, r9
 80107fe:	008b      	lsls	r3, r1, #2
 8010800:	4641      	mov	r1, r8
 8010802:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010806:	4641      	mov	r1, r8
 8010808:	008a      	lsls	r2, r1, #2
 801080a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801080e:	f7f0 fa33 	bl	8000c78 <__aeabi_uldivmod>
 8010812:	4602      	mov	r2, r0
 8010814:	460b      	mov	r3, r1
 8010816:	4611      	mov	r1, r2
 8010818:	4b38      	ldr	r3, [pc, #224]	@ (80108fc <UART_SetConfig+0x4e4>)
 801081a:	fba3 2301 	umull	r2, r3, r3, r1
 801081e:	095b      	lsrs	r3, r3, #5
 8010820:	2264      	movs	r2, #100	@ 0x64
 8010822:	fb02 f303 	mul.w	r3, r2, r3
 8010826:	1acb      	subs	r3, r1, r3
 8010828:	011b      	lsls	r3, r3, #4
 801082a:	3332      	adds	r3, #50	@ 0x32
 801082c:	4a33      	ldr	r2, [pc, #204]	@ (80108fc <UART_SetConfig+0x4e4>)
 801082e:	fba2 2303 	umull	r2, r3, r2, r3
 8010832:	095b      	lsrs	r3, r3, #5
 8010834:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010838:	441c      	add	r4, r3
 801083a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801083e:	2200      	movs	r2, #0
 8010840:	673b      	str	r3, [r7, #112]	@ 0x70
 8010842:	677a      	str	r2, [r7, #116]	@ 0x74
 8010844:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8010848:	4642      	mov	r2, r8
 801084a:	464b      	mov	r3, r9
 801084c:	1891      	adds	r1, r2, r2
 801084e:	60b9      	str	r1, [r7, #8]
 8010850:	415b      	adcs	r3, r3
 8010852:	60fb      	str	r3, [r7, #12]
 8010854:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010858:	4641      	mov	r1, r8
 801085a:	1851      	adds	r1, r2, r1
 801085c:	6039      	str	r1, [r7, #0]
 801085e:	4649      	mov	r1, r9
 8010860:	414b      	adcs	r3, r1
 8010862:	607b      	str	r3, [r7, #4]
 8010864:	f04f 0200 	mov.w	r2, #0
 8010868:	f04f 0300 	mov.w	r3, #0
 801086c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010870:	4659      	mov	r1, fp
 8010872:	00cb      	lsls	r3, r1, #3
 8010874:	4651      	mov	r1, sl
 8010876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801087a:	4651      	mov	r1, sl
 801087c:	00ca      	lsls	r2, r1, #3
 801087e:	4610      	mov	r0, r2
 8010880:	4619      	mov	r1, r3
 8010882:	4603      	mov	r3, r0
 8010884:	4642      	mov	r2, r8
 8010886:	189b      	adds	r3, r3, r2
 8010888:	66bb      	str	r3, [r7, #104]	@ 0x68
 801088a:	464b      	mov	r3, r9
 801088c:	460a      	mov	r2, r1
 801088e:	eb42 0303 	adc.w	r3, r2, r3
 8010892:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010898:	685b      	ldr	r3, [r3, #4]
 801089a:	2200      	movs	r2, #0
 801089c:	663b      	str	r3, [r7, #96]	@ 0x60
 801089e:	667a      	str	r2, [r7, #100]	@ 0x64
 80108a0:	f04f 0200 	mov.w	r2, #0
 80108a4:	f04f 0300 	mov.w	r3, #0
 80108a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80108ac:	4649      	mov	r1, r9
 80108ae:	008b      	lsls	r3, r1, #2
 80108b0:	4641      	mov	r1, r8
 80108b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80108b6:	4641      	mov	r1, r8
 80108b8:	008a      	lsls	r2, r1, #2
 80108ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80108be:	f7f0 f9db 	bl	8000c78 <__aeabi_uldivmod>
 80108c2:	4602      	mov	r2, r0
 80108c4:	460b      	mov	r3, r1
 80108c6:	4b0d      	ldr	r3, [pc, #52]	@ (80108fc <UART_SetConfig+0x4e4>)
 80108c8:	fba3 1302 	umull	r1, r3, r3, r2
 80108cc:	095b      	lsrs	r3, r3, #5
 80108ce:	2164      	movs	r1, #100	@ 0x64
 80108d0:	fb01 f303 	mul.w	r3, r1, r3
 80108d4:	1ad3      	subs	r3, r2, r3
 80108d6:	011b      	lsls	r3, r3, #4
 80108d8:	3332      	adds	r3, #50	@ 0x32
 80108da:	4a08      	ldr	r2, [pc, #32]	@ (80108fc <UART_SetConfig+0x4e4>)
 80108dc:	fba2 2303 	umull	r2, r3, r2, r3
 80108e0:	095b      	lsrs	r3, r3, #5
 80108e2:	f003 020f 	and.w	r2, r3, #15
 80108e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	4422      	add	r2, r4
 80108ee:	609a      	str	r2, [r3, #8]
}
 80108f0:	bf00      	nop
 80108f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80108f6:	46bd      	mov	sp, r7
 80108f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80108fc:	51eb851f 	.word	0x51eb851f

08010900 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010900:	b480      	push	{r7}
 8010902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010904:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010906:	4618      	mov	r0, r3
 8010908:	46bd      	mov	sp, r7
 801090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090e:	4770      	bx	lr

08010910 <MX_MEMS_Init>:
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS4A1_DataLogTerminal_Init(void);
static void MX_IKS4A1_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_IKS4A1_DataLogTerminal_Init();
 8010914:	f000 f802 	bl	801091c <MX_IKS4A1_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8010918:	bf00      	nop
 801091a:	bd80      	pop	{r7, pc}

0801091c <MX_IKS4A1_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS4A1_DataLogTerminal_Init(void)
{
 801091c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801091e:	b089      	sub	sp, #36	@ 0x24
 8010920:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int16_t i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 8010922:	2000      	movs	r0, #0
 8010924:	f7fb fcb6 	bl	800c294 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8010928:	2101      	movs	r1, #1
 801092a:	2000      	movs	r0, #0
 801092c:	f7fb fd06 	bl	800c33c <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 8010930:	2000      	movs	r0, #0
 8010932:	f7fb fd57 	bl	800c3e4 <BSP_PB_GetState>
 8010936:	4603      	mov	r3, r0
 8010938:	2b00      	cmp	r3, #0
 801093a:	bf0c      	ite	eq
 801093c:	2301      	moveq	r3, #1
 801093e:	2300      	movne	r3, #0
 8010940:	b2db      	uxtb	r3, r3
 8010942:	461a      	mov	r2, r3
 8010944:	4b84      	ldr	r3, [pc, #528]	@ (8010b58 <MX_IKS4A1_DataLogTerminal_Init+0x23c>)
 8010946:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8010948:	2000      	movs	r0, #0
 801094a:	f7fb fdad 	bl	800c4a8 <BSP_COM_Init>

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 801094e:	4a83      	ldr	r2, [pc, #524]	@ (8010b5c <MX_IKS4A1_DataLogTerminal_Init+0x240>)
 8010950:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010954:	4882      	ldr	r0, [pc, #520]	@ (8010b60 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010956:	f004 f87b 	bl	8014a50 <sniprintf>
  printf("%s", dataOut);
 801095a:	4981      	ldr	r1, [pc, #516]	@ (8010b60 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 801095c:	4881      	ldr	r0, [pc, #516]	@ (8010b64 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 801095e:	f004 f807 	bl	8014970 <iprintf>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO | MOTION_GYRO);
 8010962:	2103      	movs	r1, #3
 8010964:	2001      	movs	r0, #1
 8010966:	f7fa feed 	bl	800b744 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSO16IS_0, MOTION_ACCELERO | MOTION_GYRO);
 801096a:	2103      	movs	r1, #3
 801096c:	2003      	movs	r0, #3
 801096e:	f7fa fee9 	bl	800b744 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2DUXS12_0, MOTION_ACCELERO);
 8010972:	2102      	movs	r1, #2
 8010974:	2002      	movs	r0, #2
 8010976:	f7fa fee5 	bl	800b744 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2MDL_0, MOTION_MAGNETO);
 801097a:	2104      	movs	r1, #4
 801097c:	2000      	movs	r0, #0
 801097e:	f7fa fee1 	bl	800b744 <IKS4A1_MOTION_SENSOR_Init>

  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 8010982:	2300      	movs	r3, #0
 8010984:	81fb      	strh	r3, [r7, #14]
 8010986:	e0d4      	b.n	8010b32 <MX_IKS4A1_DataLogTerminal_Init+0x216>
  {
    IKS4A1_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 8010988:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 801098c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010990:	4613      	mov	r3, r2
 8010992:	00db      	lsls	r3, r3, #3
 8010994:	1a9b      	subs	r3, r3, r2
 8010996:	009b      	lsls	r3, r3, #2
 8010998:	4a73      	ldr	r2, [pc, #460]	@ (8010b68 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 801099a:	4413      	add	r3, r2
 801099c:	4619      	mov	r1, r3
 801099e:	f7fb f803 	bl	800b9a8 <IKS4A1_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 80109a2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80109a6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80109aa:	486f      	ldr	r0, [pc, #444]	@ (8010b68 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80109ac:	4613      	mov	r3, r2
 80109ae:	00db      	lsls	r3, r3, #3
 80109b0:	1a9b      	subs	r3, r3, r2
 80109b2:	009b      	lsls	r3, r3, #2
 80109b4:	4403      	add	r3, r0
 80109b6:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80109b8:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80109ba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80109be:	486a      	ldr	r0, [pc, #424]	@ (8010b68 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80109c0:	4613      	mov	r3, r2
 80109c2:	00db      	lsls	r3, r3, #3
 80109c4:	1a9b      	subs	r3, r3, r2
 80109c6:	009b      	lsls	r3, r3, #2
 80109c8:	4403      	add	r3, r0
 80109ca:	3301      	adds	r3, #1
 80109cc:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80109ce:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80109d0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80109d4:	4864      	ldr	r0, [pc, #400]	@ (8010b68 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80109d6:	4613      	mov	r3, r2
 80109d8:	00db      	lsls	r3, r3, #3
 80109da:	1a9b      	subs	r3, r3, r2
 80109dc:	009b      	lsls	r3, r3, #2
 80109de:	4403      	add	r3, r0
 80109e0:	3302      	adds	r3, #2
 80109e2:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80109e4:	461e      	mov	r6, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80109e6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80109ea:	485f      	ldr	r0, [pc, #380]	@ (8010b68 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80109ec:	4613      	mov	r3, r2
 80109ee:	00db      	lsls	r3, r3, #3
 80109f0:	1a9b      	subs	r3, r3, r2
 80109f2:	009b      	lsls	r3, r3, #2
 80109f4:	4403      	add	r3, r0
 80109f6:	3303      	adds	r3, #3
 80109f8:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80109fa:	9303      	str	r3, [sp, #12]
 80109fc:	9602      	str	r6, [sp, #8]
 80109fe:	9501      	str	r5, [sp, #4]
 8010a00:	9400      	str	r4, [sp, #0]
 8010a02:	460b      	mov	r3, r1
 8010a04:	4a59      	ldr	r2, [pc, #356]	@ (8010b6c <MX_IKS4A1_DataLogTerminal_Init+0x250>)
 8010a06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010a0a:	4855      	ldr	r0, [pc, #340]	@ (8010b60 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010a0c:	f004 f820 	bl	8014a50 <sniprintf>
    printf("%s", dataOut);
 8010a10:	4953      	ldr	r1, [pc, #332]	@ (8010b60 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010a12:	4854      	ldr	r0, [pc, #336]	@ (8010b64 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8010a14:	f003 ffac 	bl	8014970 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 8010a18:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010a1c:	4952      	ldr	r1, [pc, #328]	@ (8010b68 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010a1e:	4613      	mov	r3, r2
 8010a20:	00db      	lsls	r3, r3, #3
 8010a22:	1a9b      	subs	r3, r3, r2
 8010a24:	009b      	lsls	r3, r3, #2
 8010a26:	440b      	add	r3, r1
 8010a28:	3314      	adds	r3, #20
 8010a2a:	edd3 7a00 	vldr	s15, [r3]
 8010a2e:	463b      	mov	r3, r7
 8010a30:	2103      	movs	r1, #3
 8010a32:	4618      	mov	r0, r3
 8010a34:	eeb0 0a67 	vmov.f32	s0, s15
 8010a38:	f000 f97a 	bl	8010d30 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 8010a40:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8010a42:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 8010a44:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010a48:	4947      	ldr	r1, [pc, #284]	@ (8010b68 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010a4a:	4613      	mov	r3, r2
 8010a4c:	00db      	lsls	r3, r3, #3
 8010a4e:	1a9b      	subs	r3, r3, r2
 8010a50:	009b      	lsls	r3, r3, #2
 8010a52:	440b      	add	r3, r1
 8010a54:	3308      	adds	r3, #8
 8010a56:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8010a58:	9301      	str	r3, [sp, #4]
 8010a5a:	9000      	str	r0, [sp, #0]
 8010a5c:	4623      	mov	r3, r4
 8010a5e:	4a44      	ldr	r2, [pc, #272]	@ (8010b70 <MX_IKS4A1_DataLogTerminal_Init+0x254>)
 8010a60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010a64:	483e      	ldr	r0, [pc, #248]	@ (8010b60 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010a66:	f003 fff3 	bl	8014a50 <sniprintf>
    printf("%s", dataOut);
 8010a6a:	493d      	ldr	r1, [pc, #244]	@ (8010b60 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010a6c:	483d      	ldr	r0, [pc, #244]	@ (8010b64 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8010a6e:	f003 ff7f 	bl	8014970 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 8010a72:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010a76:	493c      	ldr	r1, [pc, #240]	@ (8010b68 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010a78:	4613      	mov	r3, r2
 8010a7a:	00db      	lsls	r3, r3, #3
 8010a7c:	1a9b      	subs	r3, r3, r2
 8010a7e:	009b      	lsls	r3, r3, #2
 8010a80:	440b      	add	r3, r1
 8010a82:	3310      	adds	r3, #16
 8010a84:	edd3 7a00 	vldr	s15, [r3]
 8010a88:	463b      	mov	r3, r7
 8010a8a:	2103      	movs	r1, #3
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8010a92:	f000 f94d 	bl	8010d30 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8010a9a:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8010a9c:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8010a9e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010aa2:	4931      	ldr	r1, [pc, #196]	@ (8010b68 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010aa4:	4613      	mov	r3, r2
 8010aa6:	00db      	lsls	r3, r3, #3
 8010aa8:	1a9b      	subs	r3, r3, r2
 8010aaa:	009b      	lsls	r3, r3, #2
 8010aac:	440b      	add	r3, r1
 8010aae:	3304      	adds	r3, #4
 8010ab0:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8010ab2:	9301      	str	r3, [sp, #4]
 8010ab4:	9000      	str	r0, [sp, #0]
 8010ab6:	4623      	mov	r3, r4
 8010ab8:	4a2e      	ldr	r2, [pc, #184]	@ (8010b74 <MX_IKS4A1_DataLogTerminal_Init+0x258>)
 8010aba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010abe:	4828      	ldr	r0, [pc, #160]	@ (8010b60 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010ac0:	f003 ffc6 	bl	8014a50 <sniprintf>
    printf("%s", dataOut);
 8010ac4:	4926      	ldr	r1, [pc, #152]	@ (8010b60 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010ac6:	4827      	ldr	r0, [pc, #156]	@ (8010b64 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8010ac8:	f003 ff52 	bl	8014970 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 8010acc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010ad0:	4925      	ldr	r1, [pc, #148]	@ (8010b68 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010ad2:	4613      	mov	r3, r2
 8010ad4:	00db      	lsls	r3, r3, #3
 8010ad6:	1a9b      	subs	r3, r3, r2
 8010ad8:	009b      	lsls	r3, r3, #2
 8010ada:	440b      	add	r3, r1
 8010adc:	3318      	adds	r3, #24
 8010ade:	edd3 7a00 	vldr	s15, [r3]
 8010ae2:	463b      	mov	r3, r7
 8010ae4:	2103      	movs	r1, #3
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	eeb0 0a67 	vmov.f32	s0, s15
 8010aec:	f000 f920 	bl	8010d30 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 8010af4:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8010af6:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 8010af8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010afc:	491a      	ldr	r1, [pc, #104]	@ (8010b68 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010afe:	4613      	mov	r3, r2
 8010b00:	00db      	lsls	r3, r3, #3
 8010b02:	1a9b      	subs	r3, r3, r2
 8010b04:	009b      	lsls	r3, r3, #2
 8010b06:	440b      	add	r3, r1
 8010b08:	330c      	adds	r3, #12
 8010b0a:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8010b0c:	9301      	str	r3, [sp, #4]
 8010b0e:	9000      	str	r0, [sp, #0]
 8010b10:	4623      	mov	r3, r4
 8010b12:	4a19      	ldr	r2, [pc, #100]	@ (8010b78 <MX_IKS4A1_DataLogTerminal_Init+0x25c>)
 8010b14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010b18:	4811      	ldr	r0, [pc, #68]	@ (8010b60 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010b1a:	f003 ff99 	bl	8014a50 <sniprintf>
    printf("%s", dataOut);
 8010b1e:	4910      	ldr	r1, [pc, #64]	@ (8010b60 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010b20:	4810      	ldr	r0, [pc, #64]	@ (8010b64 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8010b22:	f003 ff25 	bl	8014970 <iprintf>
  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 8010b26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010b2a:	b29b      	uxth	r3, r3
 8010b2c:	3301      	adds	r3, #1
 8010b2e:	b29b      	uxth	r3, r3
 8010b30:	81fb      	strh	r3, [r7, #14]
 8010b32:	89fb      	ldrh	r3, [r7, #14]
 8010b34:	2b03      	cmp	r3, #3
 8010b36:	f67f af27 	bls.w	8010988 <MX_IKS4A1_DataLogTerminal_Init+0x6c>
  }

  IKS4A1_ENV_SENSOR_Init(IKS4A1_SHT40AD1B_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 8010b3a:	2105      	movs	r1, #5
 8010b3c:	2002      	movs	r0, #2
 8010b3e:	f7fa fa73 	bl	800b028 <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_LPS22DF_0, ENV_TEMPERATURE | ENV_PRESSURE);
 8010b42:	2103      	movs	r1, #3
 8010b44:	2001      	movs	r0, #1
 8010b46:	f7fa fa6f 	bl	800b028 <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_STTS22H_0, ENV_TEMPERATURE);
 8010b4a:	2101      	movs	r1, #1
 8010b4c:	2000      	movs	r0, #0
 8010b4e:	f7fa fa6b 	bl	800b028 <IKS4A1_ENV_SENSOR_Init>

  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 8010b52:	2300      	movs	r3, #0
 8010b54:	81fb      	strh	r3, [r7, #14]
 8010b56:	e0c2      	b.n	8010cde <MX_IKS4A1_DataLogTerminal_Init+0x3c2>
 8010b58:	20015260 	.word	0x20015260
 8010b5c:	08016d40 	.word	0x08016d40
 8010b60:	20015160 	.word	0x20015160
 8010b64:	08016d90 	.word	0x08016d90
 8010b68:	200150a8 	.word	0x200150a8
 8010b6c:	08016d94 	.word	0x08016d94
 8010b70:	08016e08 	.word	0x08016e08
 8010b74:	08016e34 	.word	0x08016e34
 8010b78:	08016e64 	.word	0x08016e64
  {
    IKS4A1_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 8010b7c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8010b80:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010b84:	4613      	mov	r3, r2
 8010b86:	005b      	lsls	r3, r3, #1
 8010b88:	4413      	add	r3, r2
 8010b8a:	00db      	lsls	r3, r3, #3
 8010b8c:	4a58      	ldr	r2, [pc, #352]	@ (8010cf0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010b8e:	4413      	add	r3, r2
 8010b90:	4619      	mov	r1, r3
 8010b92:	f7fa fb57 	bl	800b244 <IKS4A1_ENV_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 8010b96:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8010b9a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010b9e:	4854      	ldr	r0, [pc, #336]	@ (8010cf0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010ba0:	4613      	mov	r3, r2
 8010ba2:	005b      	lsls	r3, r3, #1
 8010ba4:	4413      	add	r3, r2
 8010ba6:	00db      	lsls	r3, r3, #3
 8010ba8:	4403      	add	r3, r0
 8010baa:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010bac:	461c      	mov	r4, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8010bae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010bb2:	484f      	ldr	r0, [pc, #316]	@ (8010cf0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010bb4:	4613      	mov	r3, r2
 8010bb6:	005b      	lsls	r3, r3, #1
 8010bb8:	4413      	add	r3, r2
 8010bba:	00db      	lsls	r3, r3, #3
 8010bbc:	4403      	add	r3, r0
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010bc2:	461d      	mov	r5, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8010bc4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010bc8:	4849      	ldr	r0, [pc, #292]	@ (8010cf0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010bca:	4613      	mov	r3, r2
 8010bcc:	005b      	lsls	r3, r3, #1
 8010bce:	4413      	add	r3, r2
 8010bd0:	00db      	lsls	r3, r3, #3
 8010bd2:	4403      	add	r3, r0
 8010bd4:	3302      	adds	r3, #2
 8010bd6:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010bd8:	461e      	mov	r6, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8010bda:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010bde:	4844      	ldr	r0, [pc, #272]	@ (8010cf0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010be0:	4613      	mov	r3, r2
 8010be2:	005b      	lsls	r3, r3, #1
 8010be4:	4413      	add	r3, r2
 8010be6:	00db      	lsls	r3, r3, #3
 8010be8:	4403      	add	r3, r0
 8010bea:	3304      	adds	r3, #4
 8010bec:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 8010bee:	9303      	str	r3, [sp, #12]
 8010bf0:	9602      	str	r6, [sp, #8]
 8010bf2:	9501      	str	r5, [sp, #4]
 8010bf4:	9400      	str	r4, [sp, #0]
 8010bf6:	460b      	mov	r3, r1
 8010bf8:	4a3e      	ldr	r2, [pc, #248]	@ (8010cf4 <MX_IKS4A1_DataLogTerminal_Init+0x3d8>)
 8010bfa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010bfe:	483e      	ldr	r0, [pc, #248]	@ (8010cf8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010c00:	f003 ff26 	bl	8014a50 <sniprintf>
    printf("%s", dataOut);
 8010c04:	493c      	ldr	r1, [pc, #240]	@ (8010cf8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010c06:	483d      	ldr	r0, [pc, #244]	@ (8010cfc <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8010c08:	f003 feb2 	bl	8014970 <iprintf>
    floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 8010c0c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010c10:	4937      	ldr	r1, [pc, #220]	@ (8010cf0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010c12:	4613      	mov	r3, r2
 8010c14:	005b      	lsls	r3, r3, #1
 8010c16:	4413      	add	r3, r2
 8010c18:	00db      	lsls	r3, r3, #3
 8010c1a:	440b      	add	r3, r1
 8010c1c:	330c      	adds	r3, #12
 8010c1e:	edd3 7a00 	vldr	s15, [r3]
 8010c22:	463b      	mov	r3, r7
 8010c24:	2103      	movs	r1, #3
 8010c26:	4618      	mov	r0, r3
 8010c28:	eeb0 0a67 	vmov.f32	s0, s15
 8010c2c:	f000 f880 	bl	8010d30 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 8010c34:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010c36:	9300      	str	r3, [sp, #0]
 8010c38:	4613      	mov	r3, r2
 8010c3a:	4a31      	ldr	r2, [pc, #196]	@ (8010d00 <MX_IKS4A1_DataLogTerminal_Init+0x3e4>)
 8010c3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010c40:	482d      	ldr	r0, [pc, #180]	@ (8010cf8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010c42:	f003 ff05 	bl	8014a50 <sniprintf>
    printf("%s", dataOut);
 8010c46:	492c      	ldr	r1, [pc, #176]	@ (8010cf8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010c48:	482c      	ldr	r0, [pc, #176]	@ (8010cfc <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8010c4a:	f003 fe91 	bl	8014970 <iprintf>
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 8010c4e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010c52:	4927      	ldr	r1, [pc, #156]	@ (8010cf0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010c54:	4613      	mov	r3, r2
 8010c56:	005b      	lsls	r3, r3, #1
 8010c58:	4413      	add	r3, r2
 8010c5a:	00db      	lsls	r3, r3, #3
 8010c5c:	440b      	add	r3, r1
 8010c5e:	3310      	adds	r3, #16
 8010c60:	edd3 7a00 	vldr	s15, [r3]
 8010c64:	463b      	mov	r3, r7
 8010c66:	2103      	movs	r1, #3
 8010c68:	4618      	mov	r0, r3
 8010c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8010c6e:	f000 f85f 	bl	8010d30 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 8010c76:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010c78:	9300      	str	r3, [sp, #0]
 8010c7a:	4613      	mov	r3, r2
 8010c7c:	4a21      	ldr	r2, [pc, #132]	@ (8010d04 <MX_IKS4A1_DataLogTerminal_Init+0x3e8>)
 8010c7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010c82:	481d      	ldr	r0, [pc, #116]	@ (8010cf8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010c84:	f003 fee4 	bl	8014a50 <sniprintf>
    printf("%s", dataOut);
 8010c88:	491b      	ldr	r1, [pc, #108]	@ (8010cf8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010c8a:	481c      	ldr	r0, [pc, #112]	@ (8010cfc <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8010c8c:	f003 fe70 	bl	8014970 <iprintf>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 8010c90:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010c94:	4916      	ldr	r1, [pc, #88]	@ (8010cf0 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010c96:	4613      	mov	r3, r2
 8010c98:	005b      	lsls	r3, r3, #1
 8010c9a:	4413      	add	r3, r2
 8010c9c:	00db      	lsls	r3, r3, #3
 8010c9e:	440b      	add	r3, r1
 8010ca0:	3308      	adds	r3, #8
 8010ca2:	edd3 7a00 	vldr	s15, [r3]
 8010ca6:	463b      	mov	r3, r7
 8010ca8:	2103      	movs	r1, #3
 8010caa:	4618      	mov	r0, r3
 8010cac:	eeb0 0a67 	vmov.f32	s0, s15
 8010cb0:	f000 f83e 	bl	8010d30 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	461a      	mov	r2, r3
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	9300      	str	r3, [sp, #0]
 8010cbc:	4613      	mov	r3, r2
 8010cbe:	4a12      	ldr	r2, [pc, #72]	@ (8010d08 <MX_IKS4A1_DataLogTerminal_Init+0x3ec>)
 8010cc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010cc4:	480c      	ldr	r0, [pc, #48]	@ (8010cf8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010cc6:	f003 fec3 	bl	8014a50 <sniprintf>
    printf("%s", dataOut);
 8010cca:	490b      	ldr	r1, [pc, #44]	@ (8010cf8 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010ccc:	480b      	ldr	r0, [pc, #44]	@ (8010cfc <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8010cce:	f003 fe4f 	bl	8014970 <iprintf>
  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 8010cd2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	3301      	adds	r3, #1
 8010cda:	b29b      	uxth	r3, r3
 8010cdc:	81fb      	strh	r3, [r7, #14]
 8010cde:	89fb      	ldrh	r3, [r7, #14]
 8010ce0:	2b02      	cmp	r3, #2
 8010ce2:	f67f af4b 	bls.w	8010b7c <MX_IKS4A1_DataLogTerminal_Init+0x260>
  }
}
 8010ce6:	bf00      	nop
 8010ce8:	bf00      	nop
 8010cea:	3714      	adds	r7, #20
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cf0:	20015118 	.word	0x20015118
 8010cf4:	08016e90 	.word	0x08016e90
 8010cf8:	20015160 	.word	0x20015160
 8010cfc:	08016d90 	.word	0x08016d90
 8010d00:	08016f04 	.word	0x08016f04
 8010d04:	08016f20 	.word	0x08016f20
 8010d08:	08016f40 	.word	0x08016f40

08010d0c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b083      	sub	sp, #12
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	4603      	mov	r3, r0
 8010d14:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 8010d16:	4b04      	ldr	r3, [pc, #16]	@ (8010d28 <BSP_PB_Callback+0x1c>)
 8010d18:	2201      	movs	r2, #1
 8010d1a:	701a      	strb	r2, [r3, #0]
}
 8010d1c:	bf00      	nop
 8010d1e:	370c      	adds	r7, #12
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr
 8010d28:	200150a4 	.word	0x200150a4
 8010d2c:	00000000 	.word	0x00000000

08010d30 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 8010d30:	b5b0      	push	{r4, r5, r7, lr}
 8010d32:	b084      	sub	sp, #16
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	ed87 0a03 	vstr	s0, [r7, #12]
 8010d3a:	60b8      	str	r0, [r7, #8]
 8010d3c:	6079      	str	r1, [r7, #4]
  if (in >= 0.0f)
 8010d3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8010d42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d4a:	db03      	blt.n	8010d54 <floatToInt+0x24>
  {
    out_value->sign = 0;
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	701a      	strb	r2, [r3, #0]
 8010d52:	e008      	b.n	8010d66 <floatToInt+0x36>
  }
  else
  {
    out_value->sign = 1;
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	2201      	movs	r2, #1
 8010d58:	701a      	strb	r2, [r3, #0]
    in = -in;
 8010d5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8010d5e:	eef1 7a67 	vneg.f32	s15, s15
 8010d62:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / (float)pow(10, (double)dec_prec));
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f7ef fbf4 	bl	8000554 <__aeabi_i2d>
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	460b      	mov	r3, r1
 8010d70:	ec43 2b11 	vmov	d1, r2, r3
 8010d74:	ed9f 0b2c 	vldr	d0, [pc, #176]	@ 8010e28 <floatToInt+0xf8>
 8010d78:	f004 fe02 	bl	8015980 <pow>
 8010d7c:	ec53 2b10 	vmov	r2, r3, d0
 8010d80:	4610      	mov	r0, r2
 8010d82:	4619      	mov	r1, r3
 8010d84:	f7ef ff28 	bl	8000bd8 <__aeabi_d2f>
 8010d88:	ee06 0a90 	vmov	s13, r0
 8010d8c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010d90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010d94:	ed97 7a03 	vldr	s14, [r7, #12]
 8010d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d9c:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_int = (int32_t)in;
 8010da0:	edd7 7a03 	vldr	s15, [r7, #12]
 8010da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010da8:	ee17 2a90 	vmov	r2, s15
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	ee07 3a90 	vmov	s15, r3
 8010db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010dbc:	ed97 7a03 	vldr	s14, [r7, #12]
 8010dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010dc4:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc((double)in * pow(10, (double)dec_prec));
 8010dc8:	68f8      	ldr	r0, [r7, #12]
 8010dca:	f7ef fbd5 	bl	8000578 <__aeabi_f2d>
 8010dce:	4604      	mov	r4, r0
 8010dd0:	460d      	mov	r5, r1
 8010dd2:	6878      	ldr	r0, [r7, #4]
 8010dd4:	f7ef fbbe 	bl	8000554 <__aeabi_i2d>
 8010dd8:	4602      	mov	r2, r0
 8010dda:	460b      	mov	r3, r1
 8010ddc:	ec43 2b11 	vmov	d1, r2, r3
 8010de0:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 8010e28 <floatToInt+0xf8>
 8010de4:	f004 fdcc 	bl	8015980 <pow>
 8010de8:	ec53 2b10 	vmov	r2, r3, d0
 8010dec:	4620      	mov	r0, r4
 8010dee:	4629      	mov	r1, r5
 8010df0:	f7ef fc1a 	bl	8000628 <__aeabi_dmul>
 8010df4:	4602      	mov	r2, r0
 8010df6:	460b      	mov	r3, r1
 8010df8:	ec43 2b17 	vmov	d7, r2, r3
 8010dfc:	eeb0 0a47 	vmov.f32	s0, s14
 8010e00:	eef0 0a67 	vmov.f32	s1, s15
 8010e04:	f004 fe38 	bl	8015a78 <trunc>
 8010e08:	ec53 2b10 	vmov	r2, r3, d0
 8010e0c:	4610      	mov	r0, r2
 8010e0e:	4619      	mov	r1, r3
 8010e10:	f7ef feba 	bl	8000b88 <__aeabi_d2iz>
 8010e14:	4603      	mov	r3, r0
 8010e16:	461a      	mov	r2, r3
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	609a      	str	r2, [r3, #8]
}
 8010e1c:	bf00      	nop
 8010e1e:	3710      	adds	r7, #16
 8010e20:	46bd      	mov	sp, r7
 8010e22:	bdb0      	pop	{r4, r5, r7, pc}
 8010e24:	f3af 8000 	nop.w
 8010e28:	00000000 	.word	0x00000000
 8010e2c:	40240000 	.word	0x40240000

08010e30 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b084      	sub	sp, #16
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	4603      	mov	r3, r0
 8010e38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010e3a:	79fb      	ldrb	r3, [r7, #7]
 8010e3c:	4a08      	ldr	r2, [pc, #32]	@ (8010e60 <disk_status+0x30>)
 8010e3e:	009b      	lsls	r3, r3, #2
 8010e40:	4413      	add	r3, r2
 8010e42:	685b      	ldr	r3, [r3, #4]
 8010e44:	685b      	ldr	r3, [r3, #4]
 8010e46:	79fa      	ldrb	r2, [r7, #7]
 8010e48:	4905      	ldr	r1, [pc, #20]	@ (8010e60 <disk_status+0x30>)
 8010e4a:	440a      	add	r2, r1
 8010e4c:	7a12      	ldrb	r2, [r2, #8]
 8010e4e:	4610      	mov	r0, r2
 8010e50:	4798      	blx	r3
 8010e52:	4603      	mov	r3, r0
 8010e54:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e58:	4618      	mov	r0, r3
 8010e5a:	3710      	adds	r7, #16
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}
 8010e60:	2001528c 	.word	0x2001528c

08010e64 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b084      	sub	sp, #16
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010e72:	79fb      	ldrb	r3, [r7, #7]
 8010e74:	4a0e      	ldr	r2, [pc, #56]	@ (8010eb0 <disk_initialize+0x4c>)
 8010e76:	5cd3      	ldrb	r3, [r2, r3]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d114      	bne.n	8010ea6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010e7c:	79fb      	ldrb	r3, [r7, #7]
 8010e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8010eb0 <disk_initialize+0x4c>)
 8010e80:	009b      	lsls	r3, r3, #2
 8010e82:	4413      	add	r3, r2
 8010e84:	685b      	ldr	r3, [r3, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	79fa      	ldrb	r2, [r7, #7]
 8010e8a:	4909      	ldr	r1, [pc, #36]	@ (8010eb0 <disk_initialize+0x4c>)
 8010e8c:	440a      	add	r2, r1
 8010e8e:	7a12      	ldrb	r2, [r2, #8]
 8010e90:	4610      	mov	r0, r2
 8010e92:	4798      	blx	r3
 8010e94:	4603      	mov	r3, r0
 8010e96:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8010e98:	7bfb      	ldrb	r3, [r7, #15]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d103      	bne.n	8010ea6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8010e9e:	79fb      	ldrb	r3, [r7, #7]
 8010ea0:	4a03      	ldr	r2, [pc, #12]	@ (8010eb0 <disk_initialize+0x4c>)
 8010ea2:	2101      	movs	r1, #1
 8010ea4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8010ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	3710      	adds	r7, #16
 8010eac:	46bd      	mov	sp, r7
 8010eae:	bd80      	pop	{r7, pc}
 8010eb0:	2001528c 	.word	0x2001528c

08010eb4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010eb4:	b590      	push	{r4, r7, lr}
 8010eb6:	b087      	sub	sp, #28
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	60b9      	str	r1, [r7, #8]
 8010ebc:	607a      	str	r2, [r7, #4]
 8010ebe:	603b      	str	r3, [r7, #0]
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010ec4:	7bfb      	ldrb	r3, [r7, #15]
 8010ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8010ef0 <disk_read+0x3c>)
 8010ec8:	009b      	lsls	r3, r3, #2
 8010eca:	4413      	add	r3, r2
 8010ecc:	685b      	ldr	r3, [r3, #4]
 8010ece:	689c      	ldr	r4, [r3, #8]
 8010ed0:	7bfb      	ldrb	r3, [r7, #15]
 8010ed2:	4a07      	ldr	r2, [pc, #28]	@ (8010ef0 <disk_read+0x3c>)
 8010ed4:	4413      	add	r3, r2
 8010ed6:	7a18      	ldrb	r0, [r3, #8]
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	687a      	ldr	r2, [r7, #4]
 8010edc:	68b9      	ldr	r1, [r7, #8]
 8010ede:	47a0      	blx	r4
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	75fb      	strb	r3, [r7, #23]
  return res;
 8010ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	371c      	adds	r7, #28
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bd90      	pop	{r4, r7, pc}
 8010eee:	bf00      	nop
 8010ef0:	2001528c 	.word	0x2001528c

08010ef4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010ef4:	b590      	push	{r4, r7, lr}
 8010ef6:	b087      	sub	sp, #28
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	60b9      	str	r1, [r7, #8]
 8010efc:	607a      	str	r2, [r7, #4]
 8010efe:	603b      	str	r3, [r7, #0]
 8010f00:	4603      	mov	r3, r0
 8010f02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010f04:	7bfb      	ldrb	r3, [r7, #15]
 8010f06:	4a0a      	ldr	r2, [pc, #40]	@ (8010f30 <disk_write+0x3c>)
 8010f08:	009b      	lsls	r3, r3, #2
 8010f0a:	4413      	add	r3, r2
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	68dc      	ldr	r4, [r3, #12]
 8010f10:	7bfb      	ldrb	r3, [r7, #15]
 8010f12:	4a07      	ldr	r2, [pc, #28]	@ (8010f30 <disk_write+0x3c>)
 8010f14:	4413      	add	r3, r2
 8010f16:	7a18      	ldrb	r0, [r3, #8]
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	687a      	ldr	r2, [r7, #4]
 8010f1c:	68b9      	ldr	r1, [r7, #8]
 8010f1e:	47a0      	blx	r4
 8010f20:	4603      	mov	r3, r0
 8010f22:	75fb      	strb	r3, [r7, #23]
  return res;
 8010f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f26:	4618      	mov	r0, r3
 8010f28:	371c      	adds	r7, #28
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd90      	pop	{r4, r7, pc}
 8010f2e:	bf00      	nop
 8010f30:	2001528c 	.word	0x2001528c

08010f34 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b084      	sub	sp, #16
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	603a      	str	r2, [r7, #0]
 8010f3e:	71fb      	strb	r3, [r7, #7]
 8010f40:	460b      	mov	r3, r1
 8010f42:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010f44:	79fb      	ldrb	r3, [r7, #7]
 8010f46:	4a09      	ldr	r2, [pc, #36]	@ (8010f6c <disk_ioctl+0x38>)
 8010f48:	009b      	lsls	r3, r3, #2
 8010f4a:	4413      	add	r3, r2
 8010f4c:	685b      	ldr	r3, [r3, #4]
 8010f4e:	691b      	ldr	r3, [r3, #16]
 8010f50:	79fa      	ldrb	r2, [r7, #7]
 8010f52:	4906      	ldr	r1, [pc, #24]	@ (8010f6c <disk_ioctl+0x38>)
 8010f54:	440a      	add	r2, r1
 8010f56:	7a10      	ldrb	r0, [r2, #8]
 8010f58:	79b9      	ldrb	r1, [r7, #6]
 8010f5a:	683a      	ldr	r2, [r7, #0]
 8010f5c:	4798      	blx	r3
 8010f5e:	4603      	mov	r3, r0
 8010f60:	73fb      	strb	r3, [r7, #15]
  return res;
 8010f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f64:	4618      	mov	r0, r3
 8010f66:	3710      	adds	r7, #16
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	bd80      	pop	{r7, pc}
 8010f6c:	2001528c 	.word	0x2001528c

08010f70 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010f70:	b480      	push	{r7}
 8010f72:	b085      	sub	sp, #20
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	3301      	adds	r3, #1
 8010f7c:	781b      	ldrb	r3, [r3, #0]
 8010f7e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010f80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010f84:	021b      	lsls	r3, r3, #8
 8010f86:	b21a      	sxth	r2, r3
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	781b      	ldrb	r3, [r3, #0]
 8010f8c:	b21b      	sxth	r3, r3
 8010f8e:	4313      	orrs	r3, r2
 8010f90:	b21b      	sxth	r3, r3
 8010f92:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010f94:	89fb      	ldrh	r3, [r7, #14]
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	3714      	adds	r7, #20
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa0:	4770      	bx	lr

08010fa2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010fa2:	b480      	push	{r7}
 8010fa4:	b085      	sub	sp, #20
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	3303      	adds	r3, #3
 8010fae:	781b      	ldrb	r3, [r3, #0]
 8010fb0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	021b      	lsls	r3, r3, #8
 8010fb6:	687a      	ldr	r2, [r7, #4]
 8010fb8:	3202      	adds	r2, #2
 8010fba:	7812      	ldrb	r2, [r2, #0]
 8010fbc:	4313      	orrs	r3, r2
 8010fbe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	021b      	lsls	r3, r3, #8
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	3201      	adds	r2, #1
 8010fc8:	7812      	ldrb	r2, [r2, #0]
 8010fca:	4313      	orrs	r3, r2
 8010fcc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	021b      	lsls	r3, r3, #8
 8010fd2:	687a      	ldr	r2, [r7, #4]
 8010fd4:	7812      	ldrb	r2, [r2, #0]
 8010fd6:	4313      	orrs	r3, r2
 8010fd8:	60fb      	str	r3, [r7, #12]
	return rv;
 8010fda:	68fb      	ldr	r3, [r7, #12]
}
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3714      	adds	r7, #20
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe6:	4770      	bx	lr

08010fe8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010fe8:	b480      	push	{r7}
 8010fea:	b083      	sub	sp, #12
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	1c5a      	adds	r2, r3, #1
 8010ff8:	607a      	str	r2, [r7, #4]
 8010ffa:	887a      	ldrh	r2, [r7, #2]
 8010ffc:	b2d2      	uxtb	r2, r2
 8010ffe:	701a      	strb	r2, [r3, #0]
 8011000:	887b      	ldrh	r3, [r7, #2]
 8011002:	0a1b      	lsrs	r3, r3, #8
 8011004:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	1c5a      	adds	r2, r3, #1
 801100a:	607a      	str	r2, [r7, #4]
 801100c:	887a      	ldrh	r2, [r7, #2]
 801100e:	b2d2      	uxtb	r2, r2
 8011010:	701a      	strb	r2, [r3, #0]
}
 8011012:	bf00      	nop
 8011014:	370c      	adds	r7, #12
 8011016:	46bd      	mov	sp, r7
 8011018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101c:	4770      	bx	lr

0801101e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801101e:	b480      	push	{r7}
 8011020:	b083      	sub	sp, #12
 8011022:	af00      	add	r7, sp, #0
 8011024:	6078      	str	r0, [r7, #4]
 8011026:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	1c5a      	adds	r2, r3, #1
 801102c:	607a      	str	r2, [r7, #4]
 801102e:	683a      	ldr	r2, [r7, #0]
 8011030:	b2d2      	uxtb	r2, r2
 8011032:	701a      	strb	r2, [r3, #0]
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	0a1b      	lsrs	r3, r3, #8
 8011038:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	1c5a      	adds	r2, r3, #1
 801103e:	607a      	str	r2, [r7, #4]
 8011040:	683a      	ldr	r2, [r7, #0]
 8011042:	b2d2      	uxtb	r2, r2
 8011044:	701a      	strb	r2, [r3, #0]
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	0a1b      	lsrs	r3, r3, #8
 801104a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	1c5a      	adds	r2, r3, #1
 8011050:	607a      	str	r2, [r7, #4]
 8011052:	683a      	ldr	r2, [r7, #0]
 8011054:	b2d2      	uxtb	r2, r2
 8011056:	701a      	strb	r2, [r3, #0]
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	0a1b      	lsrs	r3, r3, #8
 801105c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	1c5a      	adds	r2, r3, #1
 8011062:	607a      	str	r2, [r7, #4]
 8011064:	683a      	ldr	r2, [r7, #0]
 8011066:	b2d2      	uxtb	r2, r2
 8011068:	701a      	strb	r2, [r3, #0]
}
 801106a:	bf00      	nop
 801106c:	370c      	adds	r7, #12
 801106e:	46bd      	mov	sp, r7
 8011070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011074:	4770      	bx	lr

08011076 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011076:	b480      	push	{r7}
 8011078:	b087      	sub	sp, #28
 801107a:	af00      	add	r7, sp, #0
 801107c:	60f8      	str	r0, [r7, #12]
 801107e:	60b9      	str	r1, [r7, #8]
 8011080:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d00d      	beq.n	80110ac <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011090:	693a      	ldr	r2, [r7, #16]
 8011092:	1c53      	adds	r3, r2, #1
 8011094:	613b      	str	r3, [r7, #16]
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	1c59      	adds	r1, r3, #1
 801109a:	6179      	str	r1, [r7, #20]
 801109c:	7812      	ldrb	r2, [r2, #0]
 801109e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	3b01      	subs	r3, #1
 80110a4:	607b      	str	r3, [r7, #4]
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d1f1      	bne.n	8011090 <mem_cpy+0x1a>
	}
}
 80110ac:	bf00      	nop
 80110ae:	371c      	adds	r7, #28
 80110b0:	46bd      	mov	sp, r7
 80110b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b6:	4770      	bx	lr

080110b8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80110b8:	b480      	push	{r7}
 80110ba:	b087      	sub	sp, #28
 80110bc:	af00      	add	r7, sp, #0
 80110be:	60f8      	str	r0, [r7, #12]
 80110c0:	60b9      	str	r1, [r7, #8]
 80110c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80110c8:	697b      	ldr	r3, [r7, #20]
 80110ca:	1c5a      	adds	r2, r3, #1
 80110cc:	617a      	str	r2, [r7, #20]
 80110ce:	68ba      	ldr	r2, [r7, #8]
 80110d0:	b2d2      	uxtb	r2, r2
 80110d2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	3b01      	subs	r3, #1
 80110d8:	607b      	str	r3, [r7, #4]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d1f3      	bne.n	80110c8 <mem_set+0x10>
}
 80110e0:	bf00      	nop
 80110e2:	bf00      	nop
 80110e4:	371c      	adds	r7, #28
 80110e6:	46bd      	mov	sp, r7
 80110e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ec:	4770      	bx	lr

080110ee <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80110ee:	b480      	push	{r7}
 80110f0:	b089      	sub	sp, #36	@ 0x24
 80110f2:	af00      	add	r7, sp, #0
 80110f4:	60f8      	str	r0, [r7, #12]
 80110f6:	60b9      	str	r1, [r7, #8]
 80110f8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	61fb      	str	r3, [r7, #28]
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011102:	2300      	movs	r3, #0
 8011104:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011106:	69fb      	ldr	r3, [r7, #28]
 8011108:	1c5a      	adds	r2, r3, #1
 801110a:	61fa      	str	r2, [r7, #28]
 801110c:	781b      	ldrb	r3, [r3, #0]
 801110e:	4619      	mov	r1, r3
 8011110:	69bb      	ldr	r3, [r7, #24]
 8011112:	1c5a      	adds	r2, r3, #1
 8011114:	61ba      	str	r2, [r7, #24]
 8011116:	781b      	ldrb	r3, [r3, #0]
 8011118:	1acb      	subs	r3, r1, r3
 801111a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	3b01      	subs	r3, #1
 8011120:	607b      	str	r3, [r7, #4]
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d002      	beq.n	801112e <mem_cmp+0x40>
 8011128:	697b      	ldr	r3, [r7, #20]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d0eb      	beq.n	8011106 <mem_cmp+0x18>

	return r;
 801112e:	697b      	ldr	r3, [r7, #20]
}
 8011130:	4618      	mov	r0, r3
 8011132:	3724      	adds	r7, #36	@ 0x24
 8011134:	46bd      	mov	sp, r7
 8011136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113a:	4770      	bx	lr

0801113c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801113c:	b480      	push	{r7}
 801113e:	b083      	sub	sp, #12
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011146:	e002      	b.n	801114e <chk_chr+0x12>
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	3301      	adds	r3, #1
 801114c:	607b      	str	r3, [r7, #4]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	781b      	ldrb	r3, [r3, #0]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d005      	beq.n	8011162 <chk_chr+0x26>
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	781b      	ldrb	r3, [r3, #0]
 801115a:	461a      	mov	r2, r3
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	4293      	cmp	r3, r2
 8011160:	d1f2      	bne.n	8011148 <chk_chr+0xc>
	return *str;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	781b      	ldrb	r3, [r3, #0]
}
 8011166:	4618      	mov	r0, r3
 8011168:	370c      	adds	r7, #12
 801116a:	46bd      	mov	sp, r7
 801116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011170:	4770      	bx	lr
	...

08011174 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011174:	b480      	push	{r7}
 8011176:	b085      	sub	sp, #20
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801117e:	2300      	movs	r3, #0
 8011180:	60bb      	str	r3, [r7, #8]
 8011182:	68bb      	ldr	r3, [r7, #8]
 8011184:	60fb      	str	r3, [r7, #12]
 8011186:	e029      	b.n	80111dc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011188:	4a27      	ldr	r2, [pc, #156]	@ (8011228 <chk_lock+0xb4>)
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	011b      	lsls	r3, r3, #4
 801118e:	4413      	add	r3, r2
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d01d      	beq.n	80111d2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011196:	4a24      	ldr	r2, [pc, #144]	@ (8011228 <chk_lock+0xb4>)
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	011b      	lsls	r3, r3, #4
 801119c:	4413      	add	r3, r2
 801119e:	681a      	ldr	r2, [r3, #0]
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	429a      	cmp	r2, r3
 80111a6:	d116      	bne.n	80111d6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80111a8:	4a1f      	ldr	r2, [pc, #124]	@ (8011228 <chk_lock+0xb4>)
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	011b      	lsls	r3, r3, #4
 80111ae:	4413      	add	r3, r2
 80111b0:	3304      	adds	r3, #4
 80111b2:	681a      	ldr	r2, [r3, #0]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80111b8:	429a      	cmp	r2, r3
 80111ba:	d10c      	bne.n	80111d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80111bc:	4a1a      	ldr	r2, [pc, #104]	@ (8011228 <chk_lock+0xb4>)
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	011b      	lsls	r3, r3, #4
 80111c2:	4413      	add	r3, r2
 80111c4:	3308      	adds	r3, #8
 80111c6:	681a      	ldr	r2, [r3, #0]
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d102      	bne.n	80111d6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80111d0:	e007      	b.n	80111e2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80111d2:	2301      	movs	r3, #1
 80111d4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	3301      	adds	r3, #1
 80111da:	60fb      	str	r3, [r7, #12]
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	2b01      	cmp	r3, #1
 80111e0:	d9d2      	bls.n	8011188 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	2b02      	cmp	r3, #2
 80111e6:	d109      	bne.n	80111fc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d102      	bne.n	80111f4 <chk_lock+0x80>
 80111ee:	683b      	ldr	r3, [r7, #0]
 80111f0:	2b02      	cmp	r3, #2
 80111f2:	d101      	bne.n	80111f8 <chk_lock+0x84>
 80111f4:	2300      	movs	r3, #0
 80111f6:	e010      	b.n	801121a <chk_lock+0xa6>
 80111f8:	2312      	movs	r3, #18
 80111fa:	e00e      	b.n	801121a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d108      	bne.n	8011214 <chk_lock+0xa0>
 8011202:	4a09      	ldr	r2, [pc, #36]	@ (8011228 <chk_lock+0xb4>)
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	011b      	lsls	r3, r3, #4
 8011208:	4413      	add	r3, r2
 801120a:	330c      	adds	r3, #12
 801120c:	881b      	ldrh	r3, [r3, #0]
 801120e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011212:	d101      	bne.n	8011218 <chk_lock+0xa4>
 8011214:	2310      	movs	r3, #16
 8011216:	e000      	b.n	801121a <chk_lock+0xa6>
 8011218:	2300      	movs	r3, #0
}
 801121a:	4618      	mov	r0, r3
 801121c:	3714      	adds	r7, #20
 801121e:	46bd      	mov	sp, r7
 8011220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011224:	4770      	bx	lr
 8011226:	bf00      	nop
 8011228:	2001526c 	.word	0x2001526c

0801122c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801122c:	b480      	push	{r7}
 801122e:	b083      	sub	sp, #12
 8011230:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011232:	2300      	movs	r3, #0
 8011234:	607b      	str	r3, [r7, #4]
 8011236:	e002      	b.n	801123e <enq_lock+0x12>
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	3301      	adds	r3, #1
 801123c:	607b      	str	r3, [r7, #4]
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	2b01      	cmp	r3, #1
 8011242:	d806      	bhi.n	8011252 <enq_lock+0x26>
 8011244:	4a09      	ldr	r2, [pc, #36]	@ (801126c <enq_lock+0x40>)
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	011b      	lsls	r3, r3, #4
 801124a:	4413      	add	r3, r2
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d1f2      	bne.n	8011238 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	2b02      	cmp	r3, #2
 8011256:	bf14      	ite	ne
 8011258:	2301      	movne	r3, #1
 801125a:	2300      	moveq	r3, #0
 801125c:	b2db      	uxtb	r3, r3
}
 801125e:	4618      	mov	r0, r3
 8011260:	370c      	adds	r7, #12
 8011262:	46bd      	mov	sp, r7
 8011264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011268:	4770      	bx	lr
 801126a:	bf00      	nop
 801126c:	2001526c 	.word	0x2001526c

08011270 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011270:	b480      	push	{r7}
 8011272:	b085      	sub	sp, #20
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]
 8011278:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801127a:	2300      	movs	r3, #0
 801127c:	60fb      	str	r3, [r7, #12]
 801127e:	e01f      	b.n	80112c0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011280:	4a41      	ldr	r2, [pc, #260]	@ (8011388 <inc_lock+0x118>)
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	011b      	lsls	r3, r3, #4
 8011286:	4413      	add	r3, r2
 8011288:	681a      	ldr	r2, [r3, #0]
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	429a      	cmp	r2, r3
 8011290:	d113      	bne.n	80112ba <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011292:	4a3d      	ldr	r2, [pc, #244]	@ (8011388 <inc_lock+0x118>)
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	011b      	lsls	r3, r3, #4
 8011298:	4413      	add	r3, r2
 801129a:	3304      	adds	r3, #4
 801129c:	681a      	ldr	r2, [r3, #0]
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80112a2:	429a      	cmp	r2, r3
 80112a4:	d109      	bne.n	80112ba <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80112a6:	4a38      	ldr	r2, [pc, #224]	@ (8011388 <inc_lock+0x118>)
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	011b      	lsls	r3, r3, #4
 80112ac:	4413      	add	r3, r2
 80112ae:	3308      	adds	r3, #8
 80112b0:	681a      	ldr	r2, [r3, #0]
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d006      	beq.n	80112c8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	3301      	adds	r3, #1
 80112be:	60fb      	str	r3, [r7, #12]
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	2b01      	cmp	r3, #1
 80112c4:	d9dc      	bls.n	8011280 <inc_lock+0x10>
 80112c6:	e000      	b.n	80112ca <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80112c8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	2b02      	cmp	r3, #2
 80112ce:	d132      	bne.n	8011336 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80112d0:	2300      	movs	r3, #0
 80112d2:	60fb      	str	r3, [r7, #12]
 80112d4:	e002      	b.n	80112dc <inc_lock+0x6c>
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	3301      	adds	r3, #1
 80112da:	60fb      	str	r3, [r7, #12]
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	2b01      	cmp	r3, #1
 80112e0:	d806      	bhi.n	80112f0 <inc_lock+0x80>
 80112e2:	4a29      	ldr	r2, [pc, #164]	@ (8011388 <inc_lock+0x118>)
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	011b      	lsls	r3, r3, #4
 80112e8:	4413      	add	r3, r2
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d1f2      	bne.n	80112d6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	2b02      	cmp	r3, #2
 80112f4:	d101      	bne.n	80112fa <inc_lock+0x8a>
 80112f6:	2300      	movs	r3, #0
 80112f8:	e040      	b.n	801137c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681a      	ldr	r2, [r3, #0]
 80112fe:	4922      	ldr	r1, [pc, #136]	@ (8011388 <inc_lock+0x118>)
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	011b      	lsls	r3, r3, #4
 8011304:	440b      	add	r3, r1
 8011306:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	689a      	ldr	r2, [r3, #8]
 801130c:	491e      	ldr	r1, [pc, #120]	@ (8011388 <inc_lock+0x118>)
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	011b      	lsls	r3, r3, #4
 8011312:	440b      	add	r3, r1
 8011314:	3304      	adds	r3, #4
 8011316:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	695a      	ldr	r2, [r3, #20]
 801131c:	491a      	ldr	r1, [pc, #104]	@ (8011388 <inc_lock+0x118>)
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	011b      	lsls	r3, r3, #4
 8011322:	440b      	add	r3, r1
 8011324:	3308      	adds	r3, #8
 8011326:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011328:	4a17      	ldr	r2, [pc, #92]	@ (8011388 <inc_lock+0x118>)
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	011b      	lsls	r3, r3, #4
 801132e:	4413      	add	r3, r2
 8011330:	330c      	adds	r3, #12
 8011332:	2200      	movs	r2, #0
 8011334:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011336:	683b      	ldr	r3, [r7, #0]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d009      	beq.n	8011350 <inc_lock+0xe0>
 801133c:	4a12      	ldr	r2, [pc, #72]	@ (8011388 <inc_lock+0x118>)
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	011b      	lsls	r3, r3, #4
 8011342:	4413      	add	r3, r2
 8011344:	330c      	adds	r3, #12
 8011346:	881b      	ldrh	r3, [r3, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d001      	beq.n	8011350 <inc_lock+0xe0>
 801134c:	2300      	movs	r3, #0
 801134e:	e015      	b.n	801137c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011350:	683b      	ldr	r3, [r7, #0]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d108      	bne.n	8011368 <inc_lock+0xf8>
 8011356:	4a0c      	ldr	r2, [pc, #48]	@ (8011388 <inc_lock+0x118>)
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	011b      	lsls	r3, r3, #4
 801135c:	4413      	add	r3, r2
 801135e:	330c      	adds	r3, #12
 8011360:	881b      	ldrh	r3, [r3, #0]
 8011362:	3301      	adds	r3, #1
 8011364:	b29a      	uxth	r2, r3
 8011366:	e001      	b.n	801136c <inc_lock+0xfc>
 8011368:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801136c:	4906      	ldr	r1, [pc, #24]	@ (8011388 <inc_lock+0x118>)
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	011b      	lsls	r3, r3, #4
 8011372:	440b      	add	r3, r1
 8011374:	330c      	adds	r3, #12
 8011376:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	3301      	adds	r3, #1
}
 801137c:	4618      	mov	r0, r3
 801137e:	3714      	adds	r7, #20
 8011380:	46bd      	mov	sp, r7
 8011382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011386:	4770      	bx	lr
 8011388:	2001526c 	.word	0x2001526c

0801138c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801138c:	b480      	push	{r7}
 801138e:	b085      	sub	sp, #20
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	3b01      	subs	r3, #1
 8011398:	607b      	str	r3, [r7, #4]
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	2b01      	cmp	r3, #1
 801139e:	d825      	bhi.n	80113ec <dec_lock+0x60>
		n = Files[i].ctr;
 80113a0:	4a17      	ldr	r2, [pc, #92]	@ (8011400 <dec_lock+0x74>)
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	011b      	lsls	r3, r3, #4
 80113a6:	4413      	add	r3, r2
 80113a8:	330c      	adds	r3, #12
 80113aa:	881b      	ldrh	r3, [r3, #0]
 80113ac:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80113ae:	89fb      	ldrh	r3, [r7, #14]
 80113b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80113b4:	d101      	bne.n	80113ba <dec_lock+0x2e>
 80113b6:	2300      	movs	r3, #0
 80113b8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80113ba:	89fb      	ldrh	r3, [r7, #14]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d002      	beq.n	80113c6 <dec_lock+0x3a>
 80113c0:	89fb      	ldrh	r3, [r7, #14]
 80113c2:	3b01      	subs	r3, #1
 80113c4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80113c6:	4a0e      	ldr	r2, [pc, #56]	@ (8011400 <dec_lock+0x74>)
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	011b      	lsls	r3, r3, #4
 80113cc:	4413      	add	r3, r2
 80113ce:	330c      	adds	r3, #12
 80113d0:	89fa      	ldrh	r2, [r7, #14]
 80113d2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80113d4:	89fb      	ldrh	r3, [r7, #14]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d105      	bne.n	80113e6 <dec_lock+0x5a>
 80113da:	4a09      	ldr	r2, [pc, #36]	@ (8011400 <dec_lock+0x74>)
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	011b      	lsls	r3, r3, #4
 80113e0:	4413      	add	r3, r2
 80113e2:	2200      	movs	r2, #0
 80113e4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80113e6:	2300      	movs	r3, #0
 80113e8:	737b      	strb	r3, [r7, #13]
 80113ea:	e001      	b.n	80113f0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80113ec:	2302      	movs	r3, #2
 80113ee:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80113f0:	7b7b      	ldrb	r3, [r7, #13]
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	3714      	adds	r7, #20
 80113f6:	46bd      	mov	sp, r7
 80113f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fc:	4770      	bx	lr
 80113fe:	bf00      	nop
 8011400:	2001526c 	.word	0x2001526c

08011404 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011404:	b480      	push	{r7}
 8011406:	b085      	sub	sp, #20
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801140c:	2300      	movs	r3, #0
 801140e:	60fb      	str	r3, [r7, #12]
 8011410:	e010      	b.n	8011434 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011412:	4a0d      	ldr	r2, [pc, #52]	@ (8011448 <clear_lock+0x44>)
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	011b      	lsls	r3, r3, #4
 8011418:	4413      	add	r3, r2
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	687a      	ldr	r2, [r7, #4]
 801141e:	429a      	cmp	r2, r3
 8011420:	d105      	bne.n	801142e <clear_lock+0x2a>
 8011422:	4a09      	ldr	r2, [pc, #36]	@ (8011448 <clear_lock+0x44>)
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	011b      	lsls	r3, r3, #4
 8011428:	4413      	add	r3, r2
 801142a:	2200      	movs	r2, #0
 801142c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	3301      	adds	r3, #1
 8011432:	60fb      	str	r3, [r7, #12]
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	2b01      	cmp	r3, #1
 8011438:	d9eb      	bls.n	8011412 <clear_lock+0xe>
	}
}
 801143a:	bf00      	nop
 801143c:	bf00      	nop
 801143e:	3714      	adds	r7, #20
 8011440:	46bd      	mov	sp, r7
 8011442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011446:	4770      	bx	lr
 8011448:	2001526c 	.word	0x2001526c

0801144c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b086      	sub	sp, #24
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011454:	2300      	movs	r3, #0
 8011456:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	78db      	ldrb	r3, [r3, #3]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d034      	beq.n	80114ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011464:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	7858      	ldrb	r0, [r3, #1]
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8011470:	2301      	movs	r3, #1
 8011472:	697a      	ldr	r2, [r7, #20]
 8011474:	f7ff fd3e 	bl	8010ef4 <disk_write>
 8011478:	4603      	mov	r3, r0
 801147a:	2b00      	cmp	r3, #0
 801147c:	d002      	beq.n	8011484 <sync_window+0x38>
			res = FR_DISK_ERR;
 801147e:	2301      	movs	r3, #1
 8011480:	73fb      	strb	r3, [r7, #15]
 8011482:	e022      	b.n	80114ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	2200      	movs	r2, #0
 8011488:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801148e:	697a      	ldr	r2, [r7, #20]
 8011490:	1ad2      	subs	r2, r2, r3
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	69db      	ldr	r3, [r3, #28]
 8011496:	429a      	cmp	r2, r3
 8011498:	d217      	bcs.n	80114ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	789b      	ldrb	r3, [r3, #2]
 801149e:	613b      	str	r3, [r7, #16]
 80114a0:	e010      	b.n	80114c4 <sync_window+0x78>
					wsect += fs->fsize;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	69db      	ldr	r3, [r3, #28]
 80114a6:	697a      	ldr	r2, [r7, #20]
 80114a8:	4413      	add	r3, r2
 80114aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	7858      	ldrb	r0, [r3, #1]
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80114b6:	2301      	movs	r3, #1
 80114b8:	697a      	ldr	r2, [r7, #20]
 80114ba:	f7ff fd1b 	bl	8010ef4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	3b01      	subs	r3, #1
 80114c2:	613b      	str	r3, [r7, #16]
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	2b01      	cmp	r3, #1
 80114c8:	d8eb      	bhi.n	80114a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80114ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80114cc:	4618      	mov	r0, r3
 80114ce:	3718      	adds	r7, #24
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}

080114d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b084      	sub	sp, #16
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
 80114dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80114de:	2300      	movs	r3, #0
 80114e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114e6:	683a      	ldr	r2, [r7, #0]
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d01b      	beq.n	8011524 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f7ff ffad 	bl	801144c <sync_window>
 80114f2:	4603      	mov	r3, r0
 80114f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80114f6:	7bfb      	ldrb	r3, [r7, #15]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d113      	bne.n	8011524 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	7858      	ldrb	r0, [r3, #1]
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8011506:	2301      	movs	r3, #1
 8011508:	683a      	ldr	r2, [r7, #0]
 801150a:	f7ff fcd3 	bl	8010eb4 <disk_read>
 801150e:	4603      	mov	r3, r0
 8011510:	2b00      	cmp	r3, #0
 8011512:	d004      	beq.n	801151e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011514:	f04f 33ff 	mov.w	r3, #4294967295
 8011518:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801151a:	2301      	movs	r3, #1
 801151c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	683a      	ldr	r2, [r7, #0]
 8011522:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8011524:	7bfb      	ldrb	r3, [r7, #15]
}
 8011526:	4618      	mov	r0, r3
 8011528:	3710      	adds	r7, #16
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}
	...

08011530 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b084      	sub	sp, #16
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011538:	6878      	ldr	r0, [r7, #4]
 801153a:	f7ff ff87 	bl	801144c <sync_window>
 801153e:	4603      	mov	r3, r0
 8011540:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011542:	7bfb      	ldrb	r3, [r7, #15]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d158      	bne.n	80115fa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	781b      	ldrb	r3, [r3, #0]
 801154c:	2b03      	cmp	r3, #3
 801154e:	d148      	bne.n	80115e2 <sync_fs+0xb2>
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	791b      	ldrb	r3, [r3, #4]
 8011554:	2b01      	cmp	r3, #1
 8011556:	d144      	bne.n	80115e2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	3334      	adds	r3, #52	@ 0x34
 801155c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011560:	2100      	movs	r1, #0
 8011562:	4618      	mov	r0, r3
 8011564:	f7ff fda8 	bl	80110b8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	3334      	adds	r3, #52	@ 0x34
 801156c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011570:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8011574:	4618      	mov	r0, r3
 8011576:	f7ff fd37 	bl	8010fe8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	3334      	adds	r3, #52	@ 0x34
 801157e:	4921      	ldr	r1, [pc, #132]	@ (8011604 <sync_fs+0xd4>)
 8011580:	4618      	mov	r0, r3
 8011582:	f7ff fd4c 	bl	801101e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	3334      	adds	r3, #52	@ 0x34
 801158a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801158e:	491e      	ldr	r1, [pc, #120]	@ (8011608 <sync_fs+0xd8>)
 8011590:	4618      	mov	r0, r3
 8011592:	f7ff fd44 	bl	801101e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	3334      	adds	r3, #52	@ 0x34
 801159a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	695b      	ldr	r3, [r3, #20]
 80115a2:	4619      	mov	r1, r3
 80115a4:	4610      	mov	r0, r2
 80115a6:	f7ff fd3a 	bl	801101e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	3334      	adds	r3, #52	@ 0x34
 80115ae:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	691b      	ldr	r3, [r3, #16]
 80115b6:	4619      	mov	r1, r3
 80115b8:	4610      	mov	r0, r2
 80115ba:	f7ff fd30 	bl	801101e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	6a1b      	ldr	r3, [r3, #32]
 80115c2:	1c5a      	adds	r2, r3, #1
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	7858      	ldrb	r0, [r3, #1]
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80115d6:	2301      	movs	r3, #1
 80115d8:	f7ff fc8c 	bl	8010ef4 <disk_write>
			fs->fsi_flag = 0;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2200      	movs	r2, #0
 80115e0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	785b      	ldrb	r3, [r3, #1]
 80115e6:	2200      	movs	r2, #0
 80115e8:	2100      	movs	r1, #0
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7ff fca2 	bl	8010f34 <disk_ioctl>
 80115f0:	4603      	mov	r3, r0
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d001      	beq.n	80115fa <sync_fs+0xca>
 80115f6:	2301      	movs	r3, #1
 80115f8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80115fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3710      	adds	r7, #16
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}
 8011604:	41615252 	.word	0x41615252
 8011608:	61417272 	.word	0x61417272

0801160c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801160c:	b480      	push	{r7}
 801160e:	b083      	sub	sp, #12
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
 8011614:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	3b02      	subs	r3, #2
 801161a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	699b      	ldr	r3, [r3, #24]
 8011620:	3b02      	subs	r3, #2
 8011622:	683a      	ldr	r2, [r7, #0]
 8011624:	429a      	cmp	r2, r3
 8011626:	d301      	bcc.n	801162c <clust2sect+0x20>
 8011628:	2300      	movs	r3, #0
 801162a:	e008      	b.n	801163e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	895b      	ldrh	r3, [r3, #10]
 8011630:	461a      	mov	r2, r3
 8011632:	683b      	ldr	r3, [r7, #0]
 8011634:	fb03 f202 	mul.w	r2, r3, r2
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801163c:	4413      	add	r3, r2
}
 801163e:	4618      	mov	r0, r3
 8011640:	370c      	adds	r7, #12
 8011642:	46bd      	mov	sp, r7
 8011644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011648:	4770      	bx	lr

0801164a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801164a:	b580      	push	{r7, lr}
 801164c:	b086      	sub	sp, #24
 801164e:	af00      	add	r7, sp, #0
 8011650:	6078      	str	r0, [r7, #4]
 8011652:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801165a:	683b      	ldr	r3, [r7, #0]
 801165c:	2b01      	cmp	r3, #1
 801165e:	d904      	bls.n	801166a <get_fat+0x20>
 8011660:	693b      	ldr	r3, [r7, #16]
 8011662:	699b      	ldr	r3, [r3, #24]
 8011664:	683a      	ldr	r2, [r7, #0]
 8011666:	429a      	cmp	r2, r3
 8011668:	d302      	bcc.n	8011670 <get_fat+0x26>
		val = 1;	/* Internal error */
 801166a:	2301      	movs	r3, #1
 801166c:	617b      	str	r3, [r7, #20]
 801166e:	e08e      	b.n	801178e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011670:	f04f 33ff 	mov.w	r3, #4294967295
 8011674:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011676:	693b      	ldr	r3, [r7, #16]
 8011678:	781b      	ldrb	r3, [r3, #0]
 801167a:	2b03      	cmp	r3, #3
 801167c:	d061      	beq.n	8011742 <get_fat+0xf8>
 801167e:	2b03      	cmp	r3, #3
 8011680:	dc7b      	bgt.n	801177a <get_fat+0x130>
 8011682:	2b01      	cmp	r3, #1
 8011684:	d002      	beq.n	801168c <get_fat+0x42>
 8011686:	2b02      	cmp	r3, #2
 8011688:	d041      	beq.n	801170e <get_fat+0xc4>
 801168a:	e076      	b.n	801177a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	60fb      	str	r3, [r7, #12]
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	085b      	lsrs	r3, r3, #1
 8011694:	68fa      	ldr	r2, [r7, #12]
 8011696:	4413      	add	r3, r2
 8011698:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801169a:	693b      	ldr	r3, [r7, #16]
 801169c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	0a5b      	lsrs	r3, r3, #9
 80116a2:	4413      	add	r3, r2
 80116a4:	4619      	mov	r1, r3
 80116a6:	6938      	ldr	r0, [r7, #16]
 80116a8:	f7ff ff14 	bl	80114d4 <move_window>
 80116ac:	4603      	mov	r3, r0
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d166      	bne.n	8011780 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	1c5a      	adds	r2, r3, #1
 80116b6:	60fa      	str	r2, [r7, #12]
 80116b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116bc:	693a      	ldr	r2, [r7, #16]
 80116be:	4413      	add	r3, r2
 80116c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80116c4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80116c6:	693b      	ldr	r3, [r7, #16]
 80116c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	0a5b      	lsrs	r3, r3, #9
 80116ce:	4413      	add	r3, r2
 80116d0:	4619      	mov	r1, r3
 80116d2:	6938      	ldr	r0, [r7, #16]
 80116d4:	f7ff fefe 	bl	80114d4 <move_window>
 80116d8:	4603      	mov	r3, r0
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d152      	bne.n	8011784 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116e4:	693a      	ldr	r2, [r7, #16]
 80116e6:	4413      	add	r3, r2
 80116e8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80116ec:	021b      	lsls	r3, r3, #8
 80116ee:	68ba      	ldr	r2, [r7, #8]
 80116f0:	4313      	orrs	r3, r2
 80116f2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	f003 0301 	and.w	r3, r3, #1
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d002      	beq.n	8011704 <get_fat+0xba>
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	091b      	lsrs	r3, r3, #4
 8011702:	e002      	b.n	801170a <get_fat+0xc0>
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801170a:	617b      	str	r3, [r7, #20]
			break;
 801170c:	e03f      	b.n	801178e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801170e:	693b      	ldr	r3, [r7, #16]
 8011710:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	0a1b      	lsrs	r3, r3, #8
 8011716:	4413      	add	r3, r2
 8011718:	4619      	mov	r1, r3
 801171a:	6938      	ldr	r0, [r7, #16]
 801171c:	f7ff feda 	bl	80114d4 <move_window>
 8011720:	4603      	mov	r3, r0
 8011722:	2b00      	cmp	r3, #0
 8011724:	d130      	bne.n	8011788 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	005b      	lsls	r3, r3, #1
 8011730:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011734:	4413      	add	r3, r2
 8011736:	4618      	mov	r0, r3
 8011738:	f7ff fc1a 	bl	8010f70 <ld_word>
 801173c:	4603      	mov	r3, r0
 801173e:	617b      	str	r3, [r7, #20]
			break;
 8011740:	e025      	b.n	801178e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	09db      	lsrs	r3, r3, #7
 801174a:	4413      	add	r3, r2
 801174c:	4619      	mov	r1, r3
 801174e:	6938      	ldr	r0, [r7, #16]
 8011750:	f7ff fec0 	bl	80114d4 <move_window>
 8011754:	4603      	mov	r3, r0
 8011756:	2b00      	cmp	r3, #0
 8011758:	d118      	bne.n	801178c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801175a:	693b      	ldr	r3, [r7, #16]
 801175c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	009b      	lsls	r3, r3, #2
 8011764:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011768:	4413      	add	r3, r2
 801176a:	4618      	mov	r0, r3
 801176c:	f7ff fc19 	bl	8010fa2 <ld_dword>
 8011770:	4603      	mov	r3, r0
 8011772:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011776:	617b      	str	r3, [r7, #20]
			break;
 8011778:	e009      	b.n	801178e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801177a:	2301      	movs	r3, #1
 801177c:	617b      	str	r3, [r7, #20]
 801177e:	e006      	b.n	801178e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011780:	bf00      	nop
 8011782:	e004      	b.n	801178e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011784:	bf00      	nop
 8011786:	e002      	b.n	801178e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011788:	bf00      	nop
 801178a:	e000      	b.n	801178e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801178c:	bf00      	nop
		}
	}

	return val;
 801178e:	697b      	ldr	r3, [r7, #20]
}
 8011790:	4618      	mov	r0, r3
 8011792:	3718      	adds	r7, #24
 8011794:	46bd      	mov	sp, r7
 8011796:	bd80      	pop	{r7, pc}

08011798 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011798:	b590      	push	{r4, r7, lr}
 801179a:	b089      	sub	sp, #36	@ 0x24
 801179c:	af00      	add	r7, sp, #0
 801179e:	60f8      	str	r0, [r7, #12]
 80117a0:	60b9      	str	r1, [r7, #8]
 80117a2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80117a4:	2302      	movs	r3, #2
 80117a6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	2b01      	cmp	r3, #1
 80117ac:	f240 80d9 	bls.w	8011962 <put_fat+0x1ca>
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	699b      	ldr	r3, [r3, #24]
 80117b4:	68ba      	ldr	r2, [r7, #8]
 80117b6:	429a      	cmp	r2, r3
 80117b8:	f080 80d3 	bcs.w	8011962 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	2b03      	cmp	r3, #3
 80117c2:	f000 8096 	beq.w	80118f2 <put_fat+0x15a>
 80117c6:	2b03      	cmp	r3, #3
 80117c8:	f300 80cb 	bgt.w	8011962 <put_fat+0x1ca>
 80117cc:	2b01      	cmp	r3, #1
 80117ce:	d002      	beq.n	80117d6 <put_fat+0x3e>
 80117d0:	2b02      	cmp	r3, #2
 80117d2:	d06e      	beq.n	80118b2 <put_fat+0x11a>
 80117d4:	e0c5      	b.n	8011962 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	61bb      	str	r3, [r7, #24]
 80117da:	69bb      	ldr	r3, [r7, #24]
 80117dc:	085b      	lsrs	r3, r3, #1
 80117de:	69ba      	ldr	r2, [r7, #24]
 80117e0:	4413      	add	r3, r2
 80117e2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80117e8:	69bb      	ldr	r3, [r7, #24]
 80117ea:	0a5b      	lsrs	r3, r3, #9
 80117ec:	4413      	add	r3, r2
 80117ee:	4619      	mov	r1, r3
 80117f0:	68f8      	ldr	r0, [r7, #12]
 80117f2:	f7ff fe6f 	bl	80114d4 <move_window>
 80117f6:	4603      	mov	r3, r0
 80117f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80117fa:	7ffb      	ldrb	r3, [r7, #31]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	f040 80a9 	bne.w	8011954 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011808:	69bb      	ldr	r3, [r7, #24]
 801180a:	1c59      	adds	r1, r3, #1
 801180c:	61b9      	str	r1, [r7, #24]
 801180e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011812:	4413      	add	r3, r2
 8011814:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011816:	68bb      	ldr	r3, [r7, #8]
 8011818:	f003 0301 	and.w	r3, r3, #1
 801181c:	2b00      	cmp	r3, #0
 801181e:	d00d      	beq.n	801183c <put_fat+0xa4>
 8011820:	697b      	ldr	r3, [r7, #20]
 8011822:	781b      	ldrb	r3, [r3, #0]
 8011824:	b25b      	sxtb	r3, r3
 8011826:	f003 030f 	and.w	r3, r3, #15
 801182a:	b25a      	sxtb	r2, r3
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	b25b      	sxtb	r3, r3
 8011830:	011b      	lsls	r3, r3, #4
 8011832:	b25b      	sxtb	r3, r3
 8011834:	4313      	orrs	r3, r2
 8011836:	b25b      	sxtb	r3, r3
 8011838:	b2db      	uxtb	r3, r3
 801183a:	e001      	b.n	8011840 <put_fat+0xa8>
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	b2db      	uxtb	r3, r3
 8011840:	697a      	ldr	r2, [r7, #20]
 8011842:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	2201      	movs	r2, #1
 8011848:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801184e:	69bb      	ldr	r3, [r7, #24]
 8011850:	0a5b      	lsrs	r3, r3, #9
 8011852:	4413      	add	r3, r2
 8011854:	4619      	mov	r1, r3
 8011856:	68f8      	ldr	r0, [r7, #12]
 8011858:	f7ff fe3c 	bl	80114d4 <move_window>
 801185c:	4603      	mov	r3, r0
 801185e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011860:	7ffb      	ldrb	r3, [r7, #31]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d178      	bne.n	8011958 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801186c:	69bb      	ldr	r3, [r7, #24]
 801186e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011872:	4413      	add	r3, r2
 8011874:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	f003 0301 	and.w	r3, r3, #1
 801187c:	2b00      	cmp	r3, #0
 801187e:	d003      	beq.n	8011888 <put_fat+0xf0>
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	091b      	lsrs	r3, r3, #4
 8011884:	b2db      	uxtb	r3, r3
 8011886:	e00e      	b.n	80118a6 <put_fat+0x10e>
 8011888:	697b      	ldr	r3, [r7, #20]
 801188a:	781b      	ldrb	r3, [r3, #0]
 801188c:	b25b      	sxtb	r3, r3
 801188e:	f023 030f 	bic.w	r3, r3, #15
 8011892:	b25a      	sxtb	r2, r3
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	0a1b      	lsrs	r3, r3, #8
 8011898:	b25b      	sxtb	r3, r3
 801189a:	f003 030f 	and.w	r3, r3, #15
 801189e:	b25b      	sxtb	r3, r3
 80118a0:	4313      	orrs	r3, r2
 80118a2:	b25b      	sxtb	r3, r3
 80118a4:	b2db      	uxtb	r3, r3
 80118a6:	697a      	ldr	r2, [r7, #20]
 80118a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	2201      	movs	r2, #1
 80118ae:	70da      	strb	r2, [r3, #3]
			break;
 80118b0:	e057      	b.n	8011962 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	0a1b      	lsrs	r3, r3, #8
 80118ba:	4413      	add	r3, r2
 80118bc:	4619      	mov	r1, r3
 80118be:	68f8      	ldr	r0, [r7, #12]
 80118c0:	f7ff fe08 	bl	80114d4 <move_window>
 80118c4:	4603      	mov	r3, r0
 80118c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80118c8:	7ffb      	ldrb	r3, [r7, #31]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d146      	bne.n	801195c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	005b      	lsls	r3, r3, #1
 80118d8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80118dc:	4413      	add	r3, r2
 80118de:	687a      	ldr	r2, [r7, #4]
 80118e0:	b292      	uxth	r2, r2
 80118e2:	4611      	mov	r1, r2
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7ff fb7f 	bl	8010fe8 <st_word>
			fs->wflag = 1;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	2201      	movs	r2, #1
 80118ee:	70da      	strb	r2, [r3, #3]
			break;
 80118f0:	e037      	b.n	8011962 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	09db      	lsrs	r3, r3, #7
 80118fa:	4413      	add	r3, r2
 80118fc:	4619      	mov	r1, r3
 80118fe:	68f8      	ldr	r0, [r7, #12]
 8011900:	f7ff fde8 	bl	80114d4 <move_window>
 8011904:	4603      	mov	r3, r0
 8011906:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011908:	7ffb      	ldrb	r3, [r7, #31]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d128      	bne.n	8011960 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801191a:	68bb      	ldr	r3, [r7, #8]
 801191c:	009b      	lsls	r3, r3, #2
 801191e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011922:	4413      	add	r3, r2
 8011924:	4618      	mov	r0, r3
 8011926:	f7ff fb3c 	bl	8010fa2 <ld_dword>
 801192a:	4603      	mov	r3, r0
 801192c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8011930:	4323      	orrs	r3, r4
 8011932:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	009b      	lsls	r3, r3, #2
 801193e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011942:	4413      	add	r3, r2
 8011944:	6879      	ldr	r1, [r7, #4]
 8011946:	4618      	mov	r0, r3
 8011948:	f7ff fb69 	bl	801101e <st_dword>
			fs->wflag = 1;
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	2201      	movs	r2, #1
 8011950:	70da      	strb	r2, [r3, #3]
			break;
 8011952:	e006      	b.n	8011962 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011954:	bf00      	nop
 8011956:	e004      	b.n	8011962 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011958:	bf00      	nop
 801195a:	e002      	b.n	8011962 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801195c:	bf00      	nop
 801195e:	e000      	b.n	8011962 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011960:	bf00      	nop
		}
	}
	return res;
 8011962:	7ffb      	ldrb	r3, [r7, #31]
}
 8011964:	4618      	mov	r0, r3
 8011966:	3724      	adds	r7, #36	@ 0x24
 8011968:	46bd      	mov	sp, r7
 801196a:	bd90      	pop	{r4, r7, pc}

0801196c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b088      	sub	sp, #32
 8011970:	af00      	add	r7, sp, #0
 8011972:	60f8      	str	r0, [r7, #12]
 8011974:	60b9      	str	r1, [r7, #8]
 8011976:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011978:	2300      	movs	r3, #0
 801197a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	2b01      	cmp	r3, #1
 8011986:	d904      	bls.n	8011992 <remove_chain+0x26>
 8011988:	69bb      	ldr	r3, [r7, #24]
 801198a:	699b      	ldr	r3, [r3, #24]
 801198c:	68ba      	ldr	r2, [r7, #8]
 801198e:	429a      	cmp	r2, r3
 8011990:	d301      	bcc.n	8011996 <remove_chain+0x2a>
 8011992:	2302      	movs	r3, #2
 8011994:	e04b      	b.n	8011a2e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d00c      	beq.n	80119b6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801199c:	f04f 32ff 	mov.w	r2, #4294967295
 80119a0:	6879      	ldr	r1, [r7, #4]
 80119a2:	69b8      	ldr	r0, [r7, #24]
 80119a4:	f7ff fef8 	bl	8011798 <put_fat>
 80119a8:	4603      	mov	r3, r0
 80119aa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80119ac:	7ffb      	ldrb	r3, [r7, #31]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d001      	beq.n	80119b6 <remove_chain+0x4a>
 80119b2:	7ffb      	ldrb	r3, [r7, #31]
 80119b4:	e03b      	b.n	8011a2e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80119b6:	68b9      	ldr	r1, [r7, #8]
 80119b8:	68f8      	ldr	r0, [r7, #12]
 80119ba:	f7ff fe46 	bl	801164a <get_fat>
 80119be:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d031      	beq.n	8011a2a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	2b01      	cmp	r3, #1
 80119ca:	d101      	bne.n	80119d0 <remove_chain+0x64>
 80119cc:	2302      	movs	r3, #2
 80119ce:	e02e      	b.n	8011a2e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80119d0:	697b      	ldr	r3, [r7, #20]
 80119d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119d6:	d101      	bne.n	80119dc <remove_chain+0x70>
 80119d8:	2301      	movs	r3, #1
 80119da:	e028      	b.n	8011a2e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80119dc:	2200      	movs	r2, #0
 80119de:	68b9      	ldr	r1, [r7, #8]
 80119e0:	69b8      	ldr	r0, [r7, #24]
 80119e2:	f7ff fed9 	bl	8011798 <put_fat>
 80119e6:	4603      	mov	r3, r0
 80119e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80119ea:	7ffb      	ldrb	r3, [r7, #31]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d001      	beq.n	80119f4 <remove_chain+0x88>
 80119f0:	7ffb      	ldrb	r3, [r7, #31]
 80119f2:	e01c      	b.n	8011a2e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80119f4:	69bb      	ldr	r3, [r7, #24]
 80119f6:	695a      	ldr	r2, [r3, #20]
 80119f8:	69bb      	ldr	r3, [r7, #24]
 80119fa:	699b      	ldr	r3, [r3, #24]
 80119fc:	3b02      	subs	r3, #2
 80119fe:	429a      	cmp	r2, r3
 8011a00:	d20b      	bcs.n	8011a1a <remove_chain+0xae>
			fs->free_clst++;
 8011a02:	69bb      	ldr	r3, [r7, #24]
 8011a04:	695b      	ldr	r3, [r3, #20]
 8011a06:	1c5a      	adds	r2, r3, #1
 8011a08:	69bb      	ldr	r3, [r7, #24]
 8011a0a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011a0c:	69bb      	ldr	r3, [r7, #24]
 8011a0e:	791b      	ldrb	r3, [r3, #4]
 8011a10:	f043 0301 	orr.w	r3, r3, #1
 8011a14:	b2da      	uxtb	r2, r3
 8011a16:	69bb      	ldr	r3, [r7, #24]
 8011a18:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011a1a:	697b      	ldr	r3, [r7, #20]
 8011a1c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011a1e:	69bb      	ldr	r3, [r7, #24]
 8011a20:	699b      	ldr	r3, [r3, #24]
 8011a22:	68ba      	ldr	r2, [r7, #8]
 8011a24:	429a      	cmp	r2, r3
 8011a26:	d3c6      	bcc.n	80119b6 <remove_chain+0x4a>
 8011a28:	e000      	b.n	8011a2c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011a2a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011a2c:	2300      	movs	r3, #0
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3720      	adds	r7, #32
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}

08011a36 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011a36:	b580      	push	{r7, lr}
 8011a38:	b088      	sub	sp, #32
 8011a3a:	af00      	add	r7, sp, #0
 8011a3c:	6078      	str	r0, [r7, #4]
 8011a3e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d10d      	bne.n	8011a68 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	691b      	ldr	r3, [r3, #16]
 8011a50:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011a52:	69bb      	ldr	r3, [r7, #24]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d004      	beq.n	8011a62 <create_chain+0x2c>
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	699b      	ldr	r3, [r3, #24]
 8011a5c:	69ba      	ldr	r2, [r7, #24]
 8011a5e:	429a      	cmp	r2, r3
 8011a60:	d31b      	bcc.n	8011a9a <create_chain+0x64>
 8011a62:	2301      	movs	r3, #1
 8011a64:	61bb      	str	r3, [r7, #24]
 8011a66:	e018      	b.n	8011a9a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011a68:	6839      	ldr	r1, [r7, #0]
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	f7ff fded 	bl	801164a <get_fat>
 8011a70:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	2b01      	cmp	r3, #1
 8011a76:	d801      	bhi.n	8011a7c <create_chain+0x46>
 8011a78:	2301      	movs	r3, #1
 8011a7a:	e070      	b.n	8011b5e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a82:	d101      	bne.n	8011a88 <create_chain+0x52>
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	e06a      	b.n	8011b5e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011a88:	693b      	ldr	r3, [r7, #16]
 8011a8a:	699b      	ldr	r3, [r3, #24]
 8011a8c:	68fa      	ldr	r2, [r7, #12]
 8011a8e:	429a      	cmp	r2, r3
 8011a90:	d201      	bcs.n	8011a96 <create_chain+0x60>
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	e063      	b.n	8011b5e <create_chain+0x128>
		scl = clst;
 8011a96:	683b      	ldr	r3, [r7, #0]
 8011a98:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011a9a:	69bb      	ldr	r3, [r7, #24]
 8011a9c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011a9e:	69fb      	ldr	r3, [r7, #28]
 8011aa0:	3301      	adds	r3, #1
 8011aa2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	699b      	ldr	r3, [r3, #24]
 8011aa8:	69fa      	ldr	r2, [r7, #28]
 8011aaa:	429a      	cmp	r2, r3
 8011aac:	d307      	bcc.n	8011abe <create_chain+0x88>
				ncl = 2;
 8011aae:	2302      	movs	r3, #2
 8011ab0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011ab2:	69fa      	ldr	r2, [r7, #28]
 8011ab4:	69bb      	ldr	r3, [r7, #24]
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d901      	bls.n	8011abe <create_chain+0x88>
 8011aba:	2300      	movs	r3, #0
 8011abc:	e04f      	b.n	8011b5e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011abe:	69f9      	ldr	r1, [r7, #28]
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f7ff fdc2 	bl	801164a <get_fat>
 8011ac6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d00e      	beq.n	8011aec <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	2b01      	cmp	r3, #1
 8011ad2:	d003      	beq.n	8011adc <create_chain+0xa6>
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ada:	d101      	bne.n	8011ae0 <create_chain+0xaa>
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	e03e      	b.n	8011b5e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011ae0:	69fa      	ldr	r2, [r7, #28]
 8011ae2:	69bb      	ldr	r3, [r7, #24]
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	d1da      	bne.n	8011a9e <create_chain+0x68>
 8011ae8:	2300      	movs	r3, #0
 8011aea:	e038      	b.n	8011b5e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011aec:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011aee:	f04f 32ff 	mov.w	r2, #4294967295
 8011af2:	69f9      	ldr	r1, [r7, #28]
 8011af4:	6938      	ldr	r0, [r7, #16]
 8011af6:	f7ff fe4f 	bl	8011798 <put_fat>
 8011afa:	4603      	mov	r3, r0
 8011afc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011afe:	7dfb      	ldrb	r3, [r7, #23]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d109      	bne.n	8011b18 <create_chain+0xe2>
 8011b04:	683b      	ldr	r3, [r7, #0]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d006      	beq.n	8011b18 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011b0a:	69fa      	ldr	r2, [r7, #28]
 8011b0c:	6839      	ldr	r1, [r7, #0]
 8011b0e:	6938      	ldr	r0, [r7, #16]
 8011b10:	f7ff fe42 	bl	8011798 <put_fat>
 8011b14:	4603      	mov	r3, r0
 8011b16:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011b18:	7dfb      	ldrb	r3, [r7, #23]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d116      	bne.n	8011b4c <create_chain+0x116>
		fs->last_clst = ncl;
 8011b1e:	693b      	ldr	r3, [r7, #16]
 8011b20:	69fa      	ldr	r2, [r7, #28]
 8011b22:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011b24:	693b      	ldr	r3, [r7, #16]
 8011b26:	695a      	ldr	r2, [r3, #20]
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	699b      	ldr	r3, [r3, #24]
 8011b2c:	3b02      	subs	r3, #2
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d804      	bhi.n	8011b3c <create_chain+0x106>
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	695b      	ldr	r3, [r3, #20]
 8011b36:	1e5a      	subs	r2, r3, #1
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011b3c:	693b      	ldr	r3, [r7, #16]
 8011b3e:	791b      	ldrb	r3, [r3, #4]
 8011b40:	f043 0301 	orr.w	r3, r3, #1
 8011b44:	b2da      	uxtb	r2, r3
 8011b46:	693b      	ldr	r3, [r7, #16]
 8011b48:	711a      	strb	r2, [r3, #4]
 8011b4a:	e007      	b.n	8011b5c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011b4c:	7dfb      	ldrb	r3, [r7, #23]
 8011b4e:	2b01      	cmp	r3, #1
 8011b50:	d102      	bne.n	8011b58 <create_chain+0x122>
 8011b52:	f04f 33ff 	mov.w	r3, #4294967295
 8011b56:	e000      	b.n	8011b5a <create_chain+0x124>
 8011b58:	2301      	movs	r3, #1
 8011b5a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011b5c:	69fb      	ldr	r3, [r7, #28]
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3720      	adds	r7, #32
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}

08011b66 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011b66:	b480      	push	{r7}
 8011b68:	b087      	sub	sp, #28
 8011b6a:	af00      	add	r7, sp, #0
 8011b6c:	6078      	str	r0, [r7, #4]
 8011b6e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b7a:	3304      	adds	r3, #4
 8011b7c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	0a5b      	lsrs	r3, r3, #9
 8011b82:	68fa      	ldr	r2, [r7, #12]
 8011b84:	8952      	ldrh	r2, [r2, #10]
 8011b86:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b8a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011b8c:	693b      	ldr	r3, [r7, #16]
 8011b8e:	1d1a      	adds	r2, r3, #4
 8011b90:	613a      	str	r2, [r7, #16]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d101      	bne.n	8011ba0 <clmt_clust+0x3a>
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	e010      	b.n	8011bc2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011ba0:	697a      	ldr	r2, [r7, #20]
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	d307      	bcc.n	8011bb8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8011ba8:	697a      	ldr	r2, [r7, #20]
 8011baa:	68bb      	ldr	r3, [r7, #8]
 8011bac:	1ad3      	subs	r3, r2, r3
 8011bae:	617b      	str	r3, [r7, #20]
 8011bb0:	693b      	ldr	r3, [r7, #16]
 8011bb2:	3304      	adds	r3, #4
 8011bb4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011bb6:	e7e9      	b.n	8011b8c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8011bb8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	681a      	ldr	r2, [r3, #0]
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	4413      	add	r3, r2
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	371c      	adds	r7, #28
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bcc:	4770      	bx	lr

08011bce <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011bce:	b580      	push	{r7, lr}
 8011bd0:	b086      	sub	sp, #24
 8011bd2:	af00      	add	r7, sp, #0
 8011bd4:	6078      	str	r0, [r7, #4]
 8011bd6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011be4:	d204      	bcs.n	8011bf0 <dir_sdi+0x22>
 8011be6:	683b      	ldr	r3, [r7, #0]
 8011be8:	f003 031f 	and.w	r3, r3, #31
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d001      	beq.n	8011bf4 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011bf0:	2302      	movs	r3, #2
 8011bf2:	e063      	b.n	8011cbc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	683a      	ldr	r2, [r7, #0]
 8011bf8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	689b      	ldr	r3, [r3, #8]
 8011bfe:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d106      	bne.n	8011c14 <dir_sdi+0x46>
 8011c06:	693b      	ldr	r3, [r7, #16]
 8011c08:	781b      	ldrb	r3, [r3, #0]
 8011c0a:	2b02      	cmp	r3, #2
 8011c0c:	d902      	bls.n	8011c14 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011c0e:	693b      	ldr	r3, [r7, #16]
 8011c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c12:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011c14:	697b      	ldr	r3, [r7, #20]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d10c      	bne.n	8011c34 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	095b      	lsrs	r3, r3, #5
 8011c1e:	693a      	ldr	r2, [r7, #16]
 8011c20:	8912      	ldrh	r2, [r2, #8]
 8011c22:	4293      	cmp	r3, r2
 8011c24:	d301      	bcc.n	8011c2a <dir_sdi+0x5c>
 8011c26:	2302      	movs	r3, #2
 8011c28:	e048      	b.n	8011cbc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	61da      	str	r2, [r3, #28]
 8011c32:	e029      	b.n	8011c88 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011c34:	693b      	ldr	r3, [r7, #16]
 8011c36:	895b      	ldrh	r3, [r3, #10]
 8011c38:	025b      	lsls	r3, r3, #9
 8011c3a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011c3c:	e019      	b.n	8011c72 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	6979      	ldr	r1, [r7, #20]
 8011c42:	4618      	mov	r0, r3
 8011c44:	f7ff fd01 	bl	801164a <get_fat>
 8011c48:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011c4a:	697b      	ldr	r3, [r7, #20]
 8011c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c50:	d101      	bne.n	8011c56 <dir_sdi+0x88>
 8011c52:	2301      	movs	r3, #1
 8011c54:	e032      	b.n	8011cbc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	2b01      	cmp	r3, #1
 8011c5a:	d904      	bls.n	8011c66 <dir_sdi+0x98>
 8011c5c:	693b      	ldr	r3, [r7, #16]
 8011c5e:	699b      	ldr	r3, [r3, #24]
 8011c60:	697a      	ldr	r2, [r7, #20]
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d301      	bcc.n	8011c6a <dir_sdi+0x9c>
 8011c66:	2302      	movs	r3, #2
 8011c68:	e028      	b.n	8011cbc <dir_sdi+0xee>
			ofs -= csz;
 8011c6a:	683a      	ldr	r2, [r7, #0]
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	1ad3      	subs	r3, r2, r3
 8011c70:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011c72:	683a      	ldr	r2, [r7, #0]
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d2e1      	bcs.n	8011c3e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011c7a:	6979      	ldr	r1, [r7, #20]
 8011c7c:	6938      	ldr	r0, [r7, #16]
 8011c7e:	f7ff fcc5 	bl	801160c <clust2sect>
 8011c82:	4602      	mov	r2, r0
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	697a      	ldr	r2, [r7, #20]
 8011c8c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	69db      	ldr	r3, [r3, #28]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d101      	bne.n	8011c9a <dir_sdi+0xcc>
 8011c96:	2302      	movs	r3, #2
 8011c98:	e010      	b.n	8011cbc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	69da      	ldr	r2, [r3, #28]
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	0a5b      	lsrs	r3, r3, #9
 8011ca2:	441a      	add	r2, r3
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011ca8:	693b      	ldr	r3, [r7, #16]
 8011caa:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011cb4:	441a      	add	r2, r3
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011cba:	2300      	movs	r3, #0
}
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	3718      	adds	r7, #24
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}

08011cc4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b086      	sub	sp, #24
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
 8011ccc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	695b      	ldr	r3, [r3, #20]
 8011cd8:	3320      	adds	r3, #32
 8011cda:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	69db      	ldr	r3, [r3, #28]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d003      	beq.n	8011cec <dir_next+0x28>
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011cea:	d301      	bcc.n	8011cf0 <dir_next+0x2c>
 8011cec:	2304      	movs	r3, #4
 8011cee:	e0aa      	b.n	8011e46 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	f040 8098 	bne.w	8011e2c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	69db      	ldr	r3, [r3, #28]
 8011d00:	1c5a      	adds	r2, r3, #1
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	699b      	ldr	r3, [r3, #24]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d10b      	bne.n	8011d26 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	095b      	lsrs	r3, r3, #5
 8011d12:	68fa      	ldr	r2, [r7, #12]
 8011d14:	8912      	ldrh	r2, [r2, #8]
 8011d16:	4293      	cmp	r3, r2
 8011d18:	f0c0 8088 	bcc.w	8011e2c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2200      	movs	r2, #0
 8011d20:	61da      	str	r2, [r3, #28]
 8011d22:	2304      	movs	r3, #4
 8011d24:	e08f      	b.n	8011e46 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011d26:	68bb      	ldr	r3, [r7, #8]
 8011d28:	0a5b      	lsrs	r3, r3, #9
 8011d2a:	68fa      	ldr	r2, [r7, #12]
 8011d2c:	8952      	ldrh	r2, [r2, #10]
 8011d2e:	3a01      	subs	r2, #1
 8011d30:	4013      	ands	r3, r2
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d17a      	bne.n	8011e2c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011d36:	687a      	ldr	r2, [r7, #4]
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	699b      	ldr	r3, [r3, #24]
 8011d3c:	4619      	mov	r1, r3
 8011d3e:	4610      	mov	r0, r2
 8011d40:	f7ff fc83 	bl	801164a <get_fat>
 8011d44:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	2b01      	cmp	r3, #1
 8011d4a:	d801      	bhi.n	8011d50 <dir_next+0x8c>
 8011d4c:	2302      	movs	r3, #2
 8011d4e:	e07a      	b.n	8011e46 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d56:	d101      	bne.n	8011d5c <dir_next+0x98>
 8011d58:	2301      	movs	r3, #1
 8011d5a:	e074      	b.n	8011e46 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	699b      	ldr	r3, [r3, #24]
 8011d60:	697a      	ldr	r2, [r7, #20]
 8011d62:	429a      	cmp	r2, r3
 8011d64:	d358      	bcc.n	8011e18 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d104      	bne.n	8011d76 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	2200      	movs	r2, #0
 8011d70:	61da      	str	r2, [r3, #28]
 8011d72:	2304      	movs	r3, #4
 8011d74:	e067      	b.n	8011e46 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011d76:	687a      	ldr	r2, [r7, #4]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	699b      	ldr	r3, [r3, #24]
 8011d7c:	4619      	mov	r1, r3
 8011d7e:	4610      	mov	r0, r2
 8011d80:	f7ff fe59 	bl	8011a36 <create_chain>
 8011d84:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d101      	bne.n	8011d90 <dir_next+0xcc>
 8011d8c:	2307      	movs	r3, #7
 8011d8e:	e05a      	b.n	8011e46 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011d90:	697b      	ldr	r3, [r7, #20]
 8011d92:	2b01      	cmp	r3, #1
 8011d94:	d101      	bne.n	8011d9a <dir_next+0xd6>
 8011d96:	2302      	movs	r3, #2
 8011d98:	e055      	b.n	8011e46 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011d9a:	697b      	ldr	r3, [r7, #20]
 8011d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011da0:	d101      	bne.n	8011da6 <dir_next+0xe2>
 8011da2:	2301      	movs	r3, #1
 8011da4:	e04f      	b.n	8011e46 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011da6:	68f8      	ldr	r0, [r7, #12]
 8011da8:	f7ff fb50 	bl	801144c <sync_window>
 8011dac:	4603      	mov	r3, r0
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d001      	beq.n	8011db6 <dir_next+0xf2>
 8011db2:	2301      	movs	r3, #1
 8011db4:	e047      	b.n	8011e46 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	3334      	adds	r3, #52	@ 0x34
 8011dba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011dbe:	2100      	movs	r1, #0
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7ff f979 	bl	80110b8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	613b      	str	r3, [r7, #16]
 8011dca:	6979      	ldr	r1, [r7, #20]
 8011dcc:	68f8      	ldr	r0, [r7, #12]
 8011dce:	f7ff fc1d 	bl	801160c <clust2sect>
 8011dd2:	4602      	mov	r2, r0
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8011dd8:	e012      	b.n	8011e00 <dir_next+0x13c>
						fs->wflag = 1;
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	2201      	movs	r2, #1
 8011dde:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011de0:	68f8      	ldr	r0, [r7, #12]
 8011de2:	f7ff fb33 	bl	801144c <sync_window>
 8011de6:	4603      	mov	r3, r0
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d001      	beq.n	8011df0 <dir_next+0x12c>
 8011dec:	2301      	movs	r3, #1
 8011dee:	e02a      	b.n	8011e46 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011df0:	693b      	ldr	r3, [r7, #16]
 8011df2:	3301      	adds	r3, #1
 8011df4:	613b      	str	r3, [r7, #16]
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011dfa:	1c5a      	adds	r2, r3, #1
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	631a      	str	r2, [r3, #48]	@ 0x30
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	895b      	ldrh	r3, [r3, #10]
 8011e04:	461a      	mov	r2, r3
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	4293      	cmp	r3, r2
 8011e0a:	d3e6      	bcc.n	8011dda <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011e10:	693b      	ldr	r3, [r7, #16]
 8011e12:	1ad2      	subs	r2, r2, r3
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	697a      	ldr	r2, [r7, #20]
 8011e1c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011e1e:	6979      	ldr	r1, [r7, #20]
 8011e20:	68f8      	ldr	r0, [r7, #12]
 8011e22:	f7ff fbf3 	bl	801160c <clust2sect>
 8011e26:	4602      	mov	r2, r0
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	68ba      	ldr	r2, [r7, #8]
 8011e30:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e3e:	441a      	add	r2, r3
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011e44:	2300      	movs	r3, #0
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	3718      	adds	r7, #24
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}

08011e4e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011e4e:	b580      	push	{r7, lr}
 8011e50:	b086      	sub	sp, #24
 8011e52:	af00      	add	r7, sp, #0
 8011e54:	6078      	str	r0, [r7, #4]
 8011e56:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011e5e:	2100      	movs	r1, #0
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f7ff feb4 	bl	8011bce <dir_sdi>
 8011e66:	4603      	mov	r3, r0
 8011e68:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011e6a:	7dfb      	ldrb	r3, [r7, #23]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d12b      	bne.n	8011ec8 <dir_alloc+0x7a>
		n = 0;
 8011e70:	2300      	movs	r3, #0
 8011e72:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	69db      	ldr	r3, [r3, #28]
 8011e78:	4619      	mov	r1, r3
 8011e7a:	68f8      	ldr	r0, [r7, #12]
 8011e7c:	f7ff fb2a 	bl	80114d4 <move_window>
 8011e80:	4603      	mov	r3, r0
 8011e82:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011e84:	7dfb      	ldrb	r3, [r7, #23]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d11d      	bne.n	8011ec6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6a1b      	ldr	r3, [r3, #32]
 8011e8e:	781b      	ldrb	r3, [r3, #0]
 8011e90:	2be5      	cmp	r3, #229	@ 0xe5
 8011e92:	d004      	beq.n	8011e9e <dir_alloc+0x50>
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	6a1b      	ldr	r3, [r3, #32]
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d107      	bne.n	8011eae <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011e9e:	693b      	ldr	r3, [r7, #16]
 8011ea0:	3301      	adds	r3, #1
 8011ea2:	613b      	str	r3, [r7, #16]
 8011ea4:	693a      	ldr	r2, [r7, #16]
 8011ea6:	683b      	ldr	r3, [r7, #0]
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	d102      	bne.n	8011eb2 <dir_alloc+0x64>
 8011eac:	e00c      	b.n	8011ec8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011eae:	2300      	movs	r3, #0
 8011eb0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011eb2:	2101      	movs	r1, #1
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f7ff ff05 	bl	8011cc4 <dir_next>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011ebe:	7dfb      	ldrb	r3, [r7, #23]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d0d7      	beq.n	8011e74 <dir_alloc+0x26>
 8011ec4:	e000      	b.n	8011ec8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011ec6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011ec8:	7dfb      	ldrb	r3, [r7, #23]
 8011eca:	2b04      	cmp	r3, #4
 8011ecc:	d101      	bne.n	8011ed2 <dir_alloc+0x84>
 8011ece:	2307      	movs	r3, #7
 8011ed0:	75fb      	strb	r3, [r7, #23]
	return res;
 8011ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3718      	adds	r7, #24
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}

08011edc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b084      	sub	sp, #16
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
 8011ee4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011ee6:	683b      	ldr	r3, [r7, #0]
 8011ee8:	331a      	adds	r3, #26
 8011eea:	4618      	mov	r0, r3
 8011eec:	f7ff f840 	bl	8010f70 <ld_word>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	781b      	ldrb	r3, [r3, #0]
 8011ef8:	2b03      	cmp	r3, #3
 8011efa:	d109      	bne.n	8011f10 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	3314      	adds	r3, #20
 8011f00:	4618      	mov	r0, r3
 8011f02:	f7ff f835 	bl	8010f70 <ld_word>
 8011f06:	4603      	mov	r3, r0
 8011f08:	041b      	lsls	r3, r3, #16
 8011f0a:	68fa      	ldr	r2, [r7, #12]
 8011f0c:	4313      	orrs	r3, r2
 8011f0e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011f10:	68fb      	ldr	r3, [r7, #12]
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	3710      	adds	r7, #16
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}

08011f1a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011f1a:	b580      	push	{r7, lr}
 8011f1c:	b084      	sub	sp, #16
 8011f1e:	af00      	add	r7, sp, #0
 8011f20:	60f8      	str	r0, [r7, #12]
 8011f22:	60b9      	str	r1, [r7, #8]
 8011f24:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	331a      	adds	r3, #26
 8011f2a:	687a      	ldr	r2, [r7, #4]
 8011f2c:	b292      	uxth	r2, r2
 8011f2e:	4611      	mov	r1, r2
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7ff f859 	bl	8010fe8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	781b      	ldrb	r3, [r3, #0]
 8011f3a:	2b03      	cmp	r3, #3
 8011f3c:	d109      	bne.n	8011f52 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011f3e:	68bb      	ldr	r3, [r7, #8]
 8011f40:	f103 0214 	add.w	r2, r3, #20
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	0c1b      	lsrs	r3, r3, #16
 8011f48:	b29b      	uxth	r3, r3
 8011f4a:	4619      	mov	r1, r3
 8011f4c:	4610      	mov	r0, r2
 8011f4e:	f7ff f84b 	bl	8010fe8 <st_word>
	}
}
 8011f52:	bf00      	nop
 8011f54:	3710      	adds	r7, #16
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd80      	pop	{r7, pc}
	...

08011f5c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8011f5c:	b590      	push	{r4, r7, lr}
 8011f5e:	b087      	sub	sp, #28
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
 8011f64:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	331a      	adds	r3, #26
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f7ff f800 	bl	8010f70 <ld_word>
 8011f70:	4603      	mov	r3, r0
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d001      	beq.n	8011f7a <cmp_lfn+0x1e>
 8011f76:	2300      	movs	r3, #0
 8011f78:	e059      	b.n	801202e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	781b      	ldrb	r3, [r3, #0]
 8011f7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011f82:	1e5a      	subs	r2, r3, #1
 8011f84:	4613      	mov	r3, r2
 8011f86:	005b      	lsls	r3, r3, #1
 8011f88:	4413      	add	r3, r2
 8011f8a:	009b      	lsls	r3, r3, #2
 8011f8c:	4413      	add	r3, r2
 8011f8e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011f90:	2301      	movs	r3, #1
 8011f92:	81fb      	strh	r3, [r7, #14]
 8011f94:	2300      	movs	r3, #0
 8011f96:	613b      	str	r3, [r7, #16]
 8011f98:	e033      	b.n	8012002 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011f9a:	4a27      	ldr	r2, [pc, #156]	@ (8012038 <cmp_lfn+0xdc>)
 8011f9c:	693b      	ldr	r3, [r7, #16]
 8011f9e:	4413      	add	r3, r2
 8011fa0:	781b      	ldrb	r3, [r3, #0]
 8011fa2:	461a      	mov	r2, r3
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	4413      	add	r3, r2
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7fe ffe1 	bl	8010f70 <ld_word>
 8011fae:	4603      	mov	r3, r0
 8011fb0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8011fb2:	89fb      	ldrh	r3, [r7, #14]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d01a      	beq.n	8011fee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	2bfe      	cmp	r3, #254	@ 0xfe
 8011fbc:	d812      	bhi.n	8011fe4 <cmp_lfn+0x88>
 8011fbe:	89bb      	ldrh	r3, [r7, #12]
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f002 fab3 	bl	801452c <ff_wtoupper>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	461c      	mov	r4, r3
 8011fca:	697b      	ldr	r3, [r7, #20]
 8011fcc:	1c5a      	adds	r2, r3, #1
 8011fce:	617a      	str	r2, [r7, #20]
 8011fd0:	005b      	lsls	r3, r3, #1
 8011fd2:	687a      	ldr	r2, [r7, #4]
 8011fd4:	4413      	add	r3, r2
 8011fd6:	881b      	ldrh	r3, [r3, #0]
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f002 faa7 	bl	801452c <ff_wtoupper>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	429c      	cmp	r4, r3
 8011fe2:	d001      	beq.n	8011fe8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	e022      	b.n	801202e <cmp_lfn+0xd2>
			}
			wc = uc;
 8011fe8:	89bb      	ldrh	r3, [r7, #12]
 8011fea:	81fb      	strh	r3, [r7, #14]
 8011fec:	e006      	b.n	8011ffc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011fee:	89bb      	ldrh	r3, [r7, #12]
 8011ff0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011ff4:	4293      	cmp	r3, r2
 8011ff6:	d001      	beq.n	8011ffc <cmp_lfn+0xa0>
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	e018      	b.n	801202e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011ffc:	693b      	ldr	r3, [r7, #16]
 8011ffe:	3301      	adds	r3, #1
 8012000:	613b      	str	r3, [r7, #16]
 8012002:	693b      	ldr	r3, [r7, #16]
 8012004:	2b0c      	cmp	r3, #12
 8012006:	d9c8      	bls.n	8011f9a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	781b      	ldrb	r3, [r3, #0]
 801200c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012010:	2b00      	cmp	r3, #0
 8012012:	d00b      	beq.n	801202c <cmp_lfn+0xd0>
 8012014:	89fb      	ldrh	r3, [r7, #14]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d008      	beq.n	801202c <cmp_lfn+0xd0>
 801201a:	697b      	ldr	r3, [r7, #20]
 801201c:	005b      	lsls	r3, r3, #1
 801201e:	687a      	ldr	r2, [r7, #4]
 8012020:	4413      	add	r3, r2
 8012022:	881b      	ldrh	r3, [r3, #0]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d001      	beq.n	801202c <cmp_lfn+0xd0>
 8012028:	2300      	movs	r3, #0
 801202a:	e000      	b.n	801202e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801202c:	2301      	movs	r3, #1
}
 801202e:	4618      	mov	r0, r3
 8012030:	371c      	adds	r7, #28
 8012032:	46bd      	mov	sp, r7
 8012034:	bd90      	pop	{r4, r7, pc}
 8012036:	bf00      	nop
 8012038:	080172b8 	.word	0x080172b8

0801203c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b086      	sub	sp, #24
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
 8012044:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	331a      	adds	r3, #26
 801204a:	4618      	mov	r0, r3
 801204c:	f7fe ff90 	bl	8010f70 <ld_word>
 8012050:	4603      	mov	r3, r0
 8012052:	2b00      	cmp	r3, #0
 8012054:	d001      	beq.n	801205a <pick_lfn+0x1e>
 8012056:	2300      	movs	r3, #0
 8012058:	e04d      	b.n	80120f6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	781b      	ldrb	r3, [r3, #0]
 801205e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012062:	1e5a      	subs	r2, r3, #1
 8012064:	4613      	mov	r3, r2
 8012066:	005b      	lsls	r3, r3, #1
 8012068:	4413      	add	r3, r2
 801206a:	009b      	lsls	r3, r3, #2
 801206c:	4413      	add	r3, r2
 801206e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012070:	2301      	movs	r3, #1
 8012072:	81fb      	strh	r3, [r7, #14]
 8012074:	2300      	movs	r3, #0
 8012076:	613b      	str	r3, [r7, #16]
 8012078:	e028      	b.n	80120cc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801207a:	4a21      	ldr	r2, [pc, #132]	@ (8012100 <pick_lfn+0xc4>)
 801207c:	693b      	ldr	r3, [r7, #16]
 801207e:	4413      	add	r3, r2
 8012080:	781b      	ldrb	r3, [r3, #0]
 8012082:	461a      	mov	r2, r3
 8012084:	683b      	ldr	r3, [r7, #0]
 8012086:	4413      	add	r3, r2
 8012088:	4618      	mov	r0, r3
 801208a:	f7fe ff71 	bl	8010f70 <ld_word>
 801208e:	4603      	mov	r3, r0
 8012090:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012092:	89fb      	ldrh	r3, [r7, #14]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d00f      	beq.n	80120b8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012098:	697b      	ldr	r3, [r7, #20]
 801209a:	2bfe      	cmp	r3, #254	@ 0xfe
 801209c:	d901      	bls.n	80120a2 <pick_lfn+0x66>
 801209e:	2300      	movs	r3, #0
 80120a0:	e029      	b.n	80120f6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80120a2:	89bb      	ldrh	r3, [r7, #12]
 80120a4:	81fb      	strh	r3, [r7, #14]
 80120a6:	697b      	ldr	r3, [r7, #20]
 80120a8:	1c5a      	adds	r2, r3, #1
 80120aa:	617a      	str	r2, [r7, #20]
 80120ac:	005b      	lsls	r3, r3, #1
 80120ae:	687a      	ldr	r2, [r7, #4]
 80120b0:	4413      	add	r3, r2
 80120b2:	89fa      	ldrh	r2, [r7, #14]
 80120b4:	801a      	strh	r2, [r3, #0]
 80120b6:	e006      	b.n	80120c6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80120b8:	89bb      	ldrh	r3, [r7, #12]
 80120ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80120be:	4293      	cmp	r3, r2
 80120c0:	d001      	beq.n	80120c6 <pick_lfn+0x8a>
 80120c2:	2300      	movs	r3, #0
 80120c4:	e017      	b.n	80120f6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80120c6:	693b      	ldr	r3, [r7, #16]
 80120c8:	3301      	adds	r3, #1
 80120ca:	613b      	str	r3, [r7, #16]
 80120cc:	693b      	ldr	r3, [r7, #16]
 80120ce:	2b0c      	cmp	r3, #12
 80120d0:	d9d3      	bls.n	801207a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	781b      	ldrb	r3, [r3, #0]
 80120d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d00a      	beq.n	80120f4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80120de:	697b      	ldr	r3, [r7, #20]
 80120e0:	2bfe      	cmp	r3, #254	@ 0xfe
 80120e2:	d901      	bls.n	80120e8 <pick_lfn+0xac>
 80120e4:	2300      	movs	r3, #0
 80120e6:	e006      	b.n	80120f6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80120e8:	697b      	ldr	r3, [r7, #20]
 80120ea:	005b      	lsls	r3, r3, #1
 80120ec:	687a      	ldr	r2, [r7, #4]
 80120ee:	4413      	add	r3, r2
 80120f0:	2200      	movs	r2, #0
 80120f2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80120f4:	2301      	movs	r3, #1
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	3718      	adds	r7, #24
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
 80120fe:	bf00      	nop
 8012100:	080172b8 	.word	0x080172b8

08012104 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b088      	sub	sp, #32
 8012108:	af00      	add	r7, sp, #0
 801210a:	60f8      	str	r0, [r7, #12]
 801210c:	60b9      	str	r1, [r7, #8]
 801210e:	4611      	mov	r1, r2
 8012110:	461a      	mov	r2, r3
 8012112:	460b      	mov	r3, r1
 8012114:	71fb      	strb	r3, [r7, #7]
 8012116:	4613      	mov	r3, r2
 8012118:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801211a:	68bb      	ldr	r3, [r7, #8]
 801211c:	330d      	adds	r3, #13
 801211e:	79ba      	ldrb	r2, [r7, #6]
 8012120:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	330b      	adds	r3, #11
 8012126:	220f      	movs	r2, #15
 8012128:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801212a:	68bb      	ldr	r3, [r7, #8]
 801212c:	330c      	adds	r3, #12
 801212e:	2200      	movs	r2, #0
 8012130:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	331a      	adds	r3, #26
 8012136:	2100      	movs	r1, #0
 8012138:	4618      	mov	r0, r3
 801213a:	f7fe ff55 	bl	8010fe8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801213e:	79fb      	ldrb	r3, [r7, #7]
 8012140:	1e5a      	subs	r2, r3, #1
 8012142:	4613      	mov	r3, r2
 8012144:	005b      	lsls	r3, r3, #1
 8012146:	4413      	add	r3, r2
 8012148:	009b      	lsls	r3, r3, #2
 801214a:	4413      	add	r3, r2
 801214c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801214e:	2300      	movs	r3, #0
 8012150:	82fb      	strh	r3, [r7, #22]
 8012152:	2300      	movs	r3, #0
 8012154:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012156:	8afb      	ldrh	r3, [r7, #22]
 8012158:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801215c:	4293      	cmp	r3, r2
 801215e:	d007      	beq.n	8012170 <put_lfn+0x6c>
 8012160:	69fb      	ldr	r3, [r7, #28]
 8012162:	1c5a      	adds	r2, r3, #1
 8012164:	61fa      	str	r2, [r7, #28]
 8012166:	005b      	lsls	r3, r3, #1
 8012168:	68fa      	ldr	r2, [r7, #12]
 801216a:	4413      	add	r3, r2
 801216c:	881b      	ldrh	r3, [r3, #0]
 801216e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012170:	4a17      	ldr	r2, [pc, #92]	@ (80121d0 <put_lfn+0xcc>)
 8012172:	69bb      	ldr	r3, [r7, #24]
 8012174:	4413      	add	r3, r2
 8012176:	781b      	ldrb	r3, [r3, #0]
 8012178:	461a      	mov	r2, r3
 801217a:	68bb      	ldr	r3, [r7, #8]
 801217c:	4413      	add	r3, r2
 801217e:	8afa      	ldrh	r2, [r7, #22]
 8012180:	4611      	mov	r1, r2
 8012182:	4618      	mov	r0, r3
 8012184:	f7fe ff30 	bl	8010fe8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012188:	8afb      	ldrh	r3, [r7, #22]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d102      	bne.n	8012194 <put_lfn+0x90>
 801218e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012192:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8012194:	69bb      	ldr	r3, [r7, #24]
 8012196:	3301      	adds	r3, #1
 8012198:	61bb      	str	r3, [r7, #24]
 801219a:	69bb      	ldr	r3, [r7, #24]
 801219c:	2b0c      	cmp	r3, #12
 801219e:	d9da      	bls.n	8012156 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80121a0:	8afb      	ldrh	r3, [r7, #22]
 80121a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80121a6:	4293      	cmp	r3, r2
 80121a8:	d006      	beq.n	80121b8 <put_lfn+0xb4>
 80121aa:	69fb      	ldr	r3, [r7, #28]
 80121ac:	005b      	lsls	r3, r3, #1
 80121ae:	68fa      	ldr	r2, [r7, #12]
 80121b0:	4413      	add	r3, r2
 80121b2:	881b      	ldrh	r3, [r3, #0]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d103      	bne.n	80121c0 <put_lfn+0xbc>
 80121b8:	79fb      	ldrb	r3, [r7, #7]
 80121ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80121be:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	79fa      	ldrb	r2, [r7, #7]
 80121c4:	701a      	strb	r2, [r3, #0]
}
 80121c6:	bf00      	nop
 80121c8:	3720      	adds	r7, #32
 80121ca:	46bd      	mov	sp, r7
 80121cc:	bd80      	pop	{r7, pc}
 80121ce:	bf00      	nop
 80121d0:	080172b8 	.word	0x080172b8

080121d4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b08c      	sub	sp, #48	@ 0x30
 80121d8:	af00      	add	r7, sp, #0
 80121da:	60f8      	str	r0, [r7, #12]
 80121dc:	60b9      	str	r1, [r7, #8]
 80121de:	607a      	str	r2, [r7, #4]
 80121e0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80121e2:	220b      	movs	r2, #11
 80121e4:	68b9      	ldr	r1, [r7, #8]
 80121e6:	68f8      	ldr	r0, [r7, #12]
 80121e8:	f7fe ff45 	bl	8011076 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	2b05      	cmp	r3, #5
 80121f0:	d92b      	bls.n	801224a <gen_numname+0x76>
		sr = seq;
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80121f6:	e022      	b.n	801223e <gen_numname+0x6a>
			wc = *lfn++;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	1c9a      	adds	r2, r3, #2
 80121fc:	607a      	str	r2, [r7, #4]
 80121fe:	881b      	ldrh	r3, [r3, #0]
 8012200:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8012202:	2300      	movs	r3, #0
 8012204:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012206:	e017      	b.n	8012238 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8012208:	69fb      	ldr	r3, [r7, #28]
 801220a:	005a      	lsls	r2, r3, #1
 801220c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801220e:	f003 0301 	and.w	r3, r3, #1
 8012212:	4413      	add	r3, r2
 8012214:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8012216:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012218:	085b      	lsrs	r3, r3, #1
 801221a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801221c:	69fb      	ldr	r3, [r7, #28]
 801221e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012222:	2b00      	cmp	r3, #0
 8012224:	d005      	beq.n	8012232 <gen_numname+0x5e>
 8012226:	69fb      	ldr	r3, [r7, #28]
 8012228:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 801222c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8012230:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8012232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012234:	3301      	adds	r3, #1
 8012236:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801223a:	2b0f      	cmp	r3, #15
 801223c:	d9e4      	bls.n	8012208 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	881b      	ldrh	r3, [r3, #0]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d1d8      	bne.n	80121f8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8012246:	69fb      	ldr	r3, [r7, #28]
 8012248:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801224a:	2307      	movs	r3, #7
 801224c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	b2db      	uxtb	r3, r3
 8012252:	f003 030f 	and.w	r3, r3, #15
 8012256:	b2db      	uxtb	r3, r3
 8012258:	3330      	adds	r3, #48	@ 0x30
 801225a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 801225e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012262:	2b39      	cmp	r3, #57	@ 0x39
 8012264:	d904      	bls.n	8012270 <gen_numname+0x9c>
 8012266:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801226a:	3307      	adds	r3, #7
 801226c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8012270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012272:	1e5a      	subs	r2, r3, #1
 8012274:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012276:	3330      	adds	r3, #48	@ 0x30
 8012278:	443b      	add	r3, r7
 801227a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 801227e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	091b      	lsrs	r3, r3, #4
 8012286:	603b      	str	r3, [r7, #0]
	} while (seq);
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d1df      	bne.n	801224e <gen_numname+0x7a>
	ns[i] = '~';
 801228e:	f107 0214 	add.w	r2, r7, #20
 8012292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012294:	4413      	add	r3, r2
 8012296:	227e      	movs	r2, #126	@ 0x7e
 8012298:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801229a:	2300      	movs	r3, #0
 801229c:	627b      	str	r3, [r7, #36]	@ 0x24
 801229e:	e002      	b.n	80122a6 <gen_numname+0xd2>
 80122a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122a2:	3301      	adds	r3, #1
 80122a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80122a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122aa:	429a      	cmp	r2, r3
 80122ac:	d205      	bcs.n	80122ba <gen_numname+0xe6>
 80122ae:	68fa      	ldr	r2, [r7, #12]
 80122b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122b2:	4413      	add	r3, r2
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	2b20      	cmp	r3, #32
 80122b8:	d1f2      	bne.n	80122a0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80122ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122bc:	2b07      	cmp	r3, #7
 80122be:	d807      	bhi.n	80122d0 <gen_numname+0xfc>
 80122c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122c2:	1c5a      	adds	r2, r3, #1
 80122c4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80122c6:	3330      	adds	r3, #48	@ 0x30
 80122c8:	443b      	add	r3, r7
 80122ca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80122ce:	e000      	b.n	80122d2 <gen_numname+0xfe>
 80122d0:	2120      	movs	r1, #32
 80122d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122d4:	1c5a      	adds	r2, r3, #1
 80122d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80122d8:	68fa      	ldr	r2, [r7, #12]
 80122da:	4413      	add	r3, r2
 80122dc:	460a      	mov	r2, r1
 80122de:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80122e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122e2:	2b07      	cmp	r3, #7
 80122e4:	d9e9      	bls.n	80122ba <gen_numname+0xe6>
}
 80122e6:	bf00      	nop
 80122e8:	bf00      	nop
 80122ea:	3730      	adds	r7, #48	@ 0x30
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd80      	pop	{r7, pc}

080122f0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80122f0:	b480      	push	{r7}
 80122f2:	b085      	sub	sp, #20
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80122f8:	2300      	movs	r3, #0
 80122fa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80122fc:	230b      	movs	r3, #11
 80122fe:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8012300:	7bfb      	ldrb	r3, [r7, #15]
 8012302:	b2da      	uxtb	r2, r3
 8012304:	0852      	lsrs	r2, r2, #1
 8012306:	01db      	lsls	r3, r3, #7
 8012308:	4313      	orrs	r3, r2
 801230a:	b2da      	uxtb	r2, r3
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	1c59      	adds	r1, r3, #1
 8012310:	6079      	str	r1, [r7, #4]
 8012312:	781b      	ldrb	r3, [r3, #0]
 8012314:	4413      	add	r3, r2
 8012316:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8012318:	68bb      	ldr	r3, [r7, #8]
 801231a:	3b01      	subs	r3, #1
 801231c:	60bb      	str	r3, [r7, #8]
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d1ed      	bne.n	8012300 <sum_sfn+0x10>
	return sum;
 8012324:	7bfb      	ldrb	r3, [r7, #15]
}
 8012326:	4618      	mov	r0, r3
 8012328:	3714      	adds	r7, #20
 801232a:	46bd      	mov	sp, r7
 801232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012330:	4770      	bx	lr

08012332 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012332:	b580      	push	{r7, lr}
 8012334:	b086      	sub	sp, #24
 8012336:	af00      	add	r7, sp, #0
 8012338:	6078      	str	r0, [r7, #4]
 801233a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801233c:	2304      	movs	r3, #4
 801233e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8012346:	23ff      	movs	r3, #255	@ 0xff
 8012348:	757b      	strb	r3, [r7, #21]
 801234a:	23ff      	movs	r3, #255	@ 0xff
 801234c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801234e:	e081      	b.n	8012454 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	69db      	ldr	r3, [r3, #28]
 8012354:	4619      	mov	r1, r3
 8012356:	6938      	ldr	r0, [r7, #16]
 8012358:	f7ff f8bc 	bl	80114d4 <move_window>
 801235c:	4603      	mov	r3, r0
 801235e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012360:	7dfb      	ldrb	r3, [r7, #23]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d17c      	bne.n	8012460 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6a1b      	ldr	r3, [r3, #32]
 801236a:	781b      	ldrb	r3, [r3, #0]
 801236c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801236e:	7dbb      	ldrb	r3, [r7, #22]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d102      	bne.n	801237a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012374:	2304      	movs	r3, #4
 8012376:	75fb      	strb	r3, [r7, #23]
 8012378:	e077      	b.n	801246a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	6a1b      	ldr	r3, [r3, #32]
 801237e:	330b      	adds	r3, #11
 8012380:	781b      	ldrb	r3, [r3, #0]
 8012382:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012386:	73fb      	strb	r3, [r7, #15]
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	7bfa      	ldrb	r2, [r7, #15]
 801238c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801238e:	7dbb      	ldrb	r3, [r7, #22]
 8012390:	2be5      	cmp	r3, #229	@ 0xe5
 8012392:	d00e      	beq.n	80123b2 <dir_read+0x80>
 8012394:	7dbb      	ldrb	r3, [r7, #22]
 8012396:	2b2e      	cmp	r3, #46	@ 0x2e
 8012398:	d00b      	beq.n	80123b2 <dir_read+0x80>
 801239a:	7bfb      	ldrb	r3, [r7, #15]
 801239c:	f023 0320 	bic.w	r3, r3, #32
 80123a0:	2b08      	cmp	r3, #8
 80123a2:	bf0c      	ite	eq
 80123a4:	2301      	moveq	r3, #1
 80123a6:	2300      	movne	r3, #0
 80123a8:	b2db      	uxtb	r3, r3
 80123aa:	461a      	mov	r2, r3
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	4293      	cmp	r3, r2
 80123b0:	d002      	beq.n	80123b8 <dir_read+0x86>
				ord = 0xFF;
 80123b2:	23ff      	movs	r3, #255	@ 0xff
 80123b4:	757b      	strb	r3, [r7, #21]
 80123b6:	e044      	b.n	8012442 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80123b8:	7bfb      	ldrb	r3, [r7, #15]
 80123ba:	2b0f      	cmp	r3, #15
 80123bc:	d12f      	bne.n	801241e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80123be:	7dbb      	ldrb	r3, [r7, #22]
 80123c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d00d      	beq.n	80123e4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	6a1b      	ldr	r3, [r3, #32]
 80123cc:	7b5b      	ldrb	r3, [r3, #13]
 80123ce:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80123d0:	7dbb      	ldrb	r3, [r7, #22]
 80123d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80123d6:	75bb      	strb	r3, [r7, #22]
 80123d8:	7dbb      	ldrb	r3, [r7, #22]
 80123da:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	695a      	ldr	r2, [r3, #20]
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80123e4:	7dba      	ldrb	r2, [r7, #22]
 80123e6:	7d7b      	ldrb	r3, [r7, #21]
 80123e8:	429a      	cmp	r2, r3
 80123ea:	d115      	bne.n	8012418 <dir_read+0xe6>
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	6a1b      	ldr	r3, [r3, #32]
 80123f0:	330d      	adds	r3, #13
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	7d3a      	ldrb	r2, [r7, #20]
 80123f6:	429a      	cmp	r2, r3
 80123f8:	d10e      	bne.n	8012418 <dir_read+0xe6>
 80123fa:	693b      	ldr	r3, [r7, #16]
 80123fc:	68da      	ldr	r2, [r3, #12]
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	6a1b      	ldr	r3, [r3, #32]
 8012402:	4619      	mov	r1, r3
 8012404:	4610      	mov	r0, r2
 8012406:	f7ff fe19 	bl	801203c <pick_lfn>
 801240a:	4603      	mov	r3, r0
 801240c:	2b00      	cmp	r3, #0
 801240e:	d003      	beq.n	8012418 <dir_read+0xe6>
 8012410:	7d7b      	ldrb	r3, [r7, #21]
 8012412:	3b01      	subs	r3, #1
 8012414:	b2db      	uxtb	r3, r3
 8012416:	e000      	b.n	801241a <dir_read+0xe8>
 8012418:	23ff      	movs	r3, #255	@ 0xff
 801241a:	757b      	strb	r3, [r7, #21]
 801241c:	e011      	b.n	8012442 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 801241e:	7d7b      	ldrb	r3, [r7, #21]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d109      	bne.n	8012438 <dir_read+0x106>
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	6a1b      	ldr	r3, [r3, #32]
 8012428:	4618      	mov	r0, r3
 801242a:	f7ff ff61 	bl	80122f0 <sum_sfn>
 801242e:	4603      	mov	r3, r0
 8012430:	461a      	mov	r2, r3
 8012432:	7d3b      	ldrb	r3, [r7, #20]
 8012434:	4293      	cmp	r3, r2
 8012436:	d015      	beq.n	8012464 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f04f 32ff 	mov.w	r2, #4294967295
 801243e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8012440:	e010      	b.n	8012464 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012442:	2100      	movs	r1, #0
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f7ff fc3d 	bl	8011cc4 <dir_next>
 801244a:	4603      	mov	r3, r0
 801244c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801244e:	7dfb      	ldrb	r3, [r7, #23]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d109      	bne.n	8012468 <dir_read+0x136>
	while (dp->sect) {
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	69db      	ldr	r3, [r3, #28]
 8012458:	2b00      	cmp	r3, #0
 801245a:	f47f af79 	bne.w	8012350 <dir_read+0x1e>
 801245e:	e004      	b.n	801246a <dir_read+0x138>
		if (res != FR_OK) break;
 8012460:	bf00      	nop
 8012462:	e002      	b.n	801246a <dir_read+0x138>
					break;
 8012464:	bf00      	nop
 8012466:	e000      	b.n	801246a <dir_read+0x138>
		if (res != FR_OK) break;
 8012468:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801246a:	7dfb      	ldrb	r3, [r7, #23]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d002      	beq.n	8012476 <dir_read+0x144>
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2200      	movs	r2, #0
 8012474:	61da      	str	r2, [r3, #28]
	return res;
 8012476:	7dfb      	ldrb	r3, [r7, #23]
}
 8012478:	4618      	mov	r0, r3
 801247a:	3718      	adds	r7, #24
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}

08012480 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b086      	sub	sp, #24
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801248e:	2100      	movs	r1, #0
 8012490:	6878      	ldr	r0, [r7, #4]
 8012492:	f7ff fb9c 	bl	8011bce <dir_sdi>
 8012496:	4603      	mov	r3, r0
 8012498:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801249a:	7dfb      	ldrb	r3, [r7, #23]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d001      	beq.n	80124a4 <dir_find+0x24>
 80124a0:	7dfb      	ldrb	r3, [r7, #23]
 80124a2:	e0a9      	b.n	80125f8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80124a4:	23ff      	movs	r3, #255	@ 0xff
 80124a6:	753b      	strb	r3, [r7, #20]
 80124a8:	7d3b      	ldrb	r3, [r7, #20]
 80124aa:	757b      	strb	r3, [r7, #21]
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f04f 32ff 	mov.w	r2, #4294967295
 80124b2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	69db      	ldr	r3, [r3, #28]
 80124b8:	4619      	mov	r1, r3
 80124ba:	6938      	ldr	r0, [r7, #16]
 80124bc:	f7ff f80a 	bl	80114d4 <move_window>
 80124c0:	4603      	mov	r3, r0
 80124c2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80124c4:	7dfb      	ldrb	r3, [r7, #23]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	f040 8090 	bne.w	80125ec <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	6a1b      	ldr	r3, [r3, #32]
 80124d0:	781b      	ldrb	r3, [r3, #0]
 80124d2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80124d4:	7dbb      	ldrb	r3, [r7, #22]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d102      	bne.n	80124e0 <dir_find+0x60>
 80124da:	2304      	movs	r3, #4
 80124dc:	75fb      	strb	r3, [r7, #23]
 80124de:	e08a      	b.n	80125f6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6a1b      	ldr	r3, [r3, #32]
 80124e4:	330b      	adds	r3, #11
 80124e6:	781b      	ldrb	r3, [r3, #0]
 80124e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80124ec:	73fb      	strb	r3, [r7, #15]
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	7bfa      	ldrb	r2, [r7, #15]
 80124f2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80124f4:	7dbb      	ldrb	r3, [r7, #22]
 80124f6:	2be5      	cmp	r3, #229	@ 0xe5
 80124f8:	d007      	beq.n	801250a <dir_find+0x8a>
 80124fa:	7bfb      	ldrb	r3, [r7, #15]
 80124fc:	f003 0308 	and.w	r3, r3, #8
 8012500:	2b00      	cmp	r3, #0
 8012502:	d009      	beq.n	8012518 <dir_find+0x98>
 8012504:	7bfb      	ldrb	r3, [r7, #15]
 8012506:	2b0f      	cmp	r3, #15
 8012508:	d006      	beq.n	8012518 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801250a:	23ff      	movs	r3, #255	@ 0xff
 801250c:	757b      	strb	r3, [r7, #21]
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	f04f 32ff 	mov.w	r2, #4294967295
 8012514:	631a      	str	r2, [r3, #48]	@ 0x30
 8012516:	e05e      	b.n	80125d6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012518:	7bfb      	ldrb	r3, [r7, #15]
 801251a:	2b0f      	cmp	r3, #15
 801251c:	d136      	bne.n	801258c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012528:	2b00      	cmp	r3, #0
 801252a:	d154      	bne.n	80125d6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801252c:	7dbb      	ldrb	r3, [r7, #22]
 801252e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012532:	2b00      	cmp	r3, #0
 8012534:	d00d      	beq.n	8012552 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6a1b      	ldr	r3, [r3, #32]
 801253a:	7b5b      	ldrb	r3, [r3, #13]
 801253c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801253e:	7dbb      	ldrb	r3, [r7, #22]
 8012540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012544:	75bb      	strb	r3, [r7, #22]
 8012546:	7dbb      	ldrb	r3, [r7, #22]
 8012548:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	695a      	ldr	r2, [r3, #20]
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012552:	7dba      	ldrb	r2, [r7, #22]
 8012554:	7d7b      	ldrb	r3, [r7, #21]
 8012556:	429a      	cmp	r2, r3
 8012558:	d115      	bne.n	8012586 <dir_find+0x106>
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	6a1b      	ldr	r3, [r3, #32]
 801255e:	330d      	adds	r3, #13
 8012560:	781b      	ldrb	r3, [r3, #0]
 8012562:	7d3a      	ldrb	r2, [r7, #20]
 8012564:	429a      	cmp	r2, r3
 8012566:	d10e      	bne.n	8012586 <dir_find+0x106>
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	68da      	ldr	r2, [r3, #12]
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6a1b      	ldr	r3, [r3, #32]
 8012570:	4619      	mov	r1, r3
 8012572:	4610      	mov	r0, r2
 8012574:	f7ff fcf2 	bl	8011f5c <cmp_lfn>
 8012578:	4603      	mov	r3, r0
 801257a:	2b00      	cmp	r3, #0
 801257c:	d003      	beq.n	8012586 <dir_find+0x106>
 801257e:	7d7b      	ldrb	r3, [r7, #21]
 8012580:	3b01      	subs	r3, #1
 8012582:	b2db      	uxtb	r3, r3
 8012584:	e000      	b.n	8012588 <dir_find+0x108>
 8012586:	23ff      	movs	r3, #255	@ 0xff
 8012588:	757b      	strb	r3, [r7, #21]
 801258a:	e024      	b.n	80125d6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801258c:	7d7b      	ldrb	r3, [r7, #21]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d109      	bne.n	80125a6 <dir_find+0x126>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	6a1b      	ldr	r3, [r3, #32]
 8012596:	4618      	mov	r0, r3
 8012598:	f7ff feaa 	bl	80122f0 <sum_sfn>
 801259c:	4603      	mov	r3, r0
 801259e:	461a      	mov	r2, r3
 80125a0:	7d3b      	ldrb	r3, [r7, #20]
 80125a2:	4293      	cmp	r3, r2
 80125a4:	d024      	beq.n	80125f0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80125ac:	f003 0301 	and.w	r3, r3, #1
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d10a      	bne.n	80125ca <dir_find+0x14a>
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	6a18      	ldr	r0, [r3, #32]
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	3324      	adds	r3, #36	@ 0x24
 80125bc:	220b      	movs	r2, #11
 80125be:	4619      	mov	r1, r3
 80125c0:	f7fe fd95 	bl	80110ee <mem_cmp>
 80125c4:	4603      	mov	r3, r0
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d014      	beq.n	80125f4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80125ca:	23ff      	movs	r3, #255	@ 0xff
 80125cc:	757b      	strb	r3, [r7, #21]
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f04f 32ff 	mov.w	r2, #4294967295
 80125d4:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80125d6:	2100      	movs	r1, #0
 80125d8:	6878      	ldr	r0, [r7, #4]
 80125da:	f7ff fb73 	bl	8011cc4 <dir_next>
 80125de:	4603      	mov	r3, r0
 80125e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80125e2:	7dfb      	ldrb	r3, [r7, #23]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	f43f af65 	beq.w	80124b4 <dir_find+0x34>
 80125ea:	e004      	b.n	80125f6 <dir_find+0x176>
		if (res != FR_OK) break;
 80125ec:	bf00      	nop
 80125ee:	e002      	b.n	80125f6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80125f0:	bf00      	nop
 80125f2:	e000      	b.n	80125f6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80125f4:	bf00      	nop

	return res;
 80125f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80125f8:	4618      	mov	r0, r3
 80125fa:	3718      	adds	r7, #24
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}

08012600 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b08c      	sub	sp, #48	@ 0x30
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012614:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8012618:	2b00      	cmp	r3, #0
 801261a:	d001      	beq.n	8012620 <dir_register+0x20>
 801261c:	2306      	movs	r3, #6
 801261e:	e0e0      	b.n	80127e2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8012620:	2300      	movs	r3, #0
 8012622:	627b      	str	r3, [r7, #36]	@ 0x24
 8012624:	e002      	b.n	801262c <dir_register+0x2c>
 8012626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012628:	3301      	adds	r3, #1
 801262a:	627b      	str	r3, [r7, #36]	@ 0x24
 801262c:	69fb      	ldr	r3, [r7, #28]
 801262e:	68da      	ldr	r2, [r3, #12]
 8012630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012632:	005b      	lsls	r3, r3, #1
 8012634:	4413      	add	r3, r2
 8012636:	881b      	ldrh	r3, [r3, #0]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d1f4      	bne.n	8012626 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8012642:	f107 030c 	add.w	r3, r7, #12
 8012646:	220c      	movs	r2, #12
 8012648:	4618      	mov	r0, r3
 801264a:	f7fe fd14 	bl	8011076 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801264e:	7dfb      	ldrb	r3, [r7, #23]
 8012650:	f003 0301 	and.w	r3, r3, #1
 8012654:	2b00      	cmp	r3, #0
 8012656:	d032      	beq.n	80126be <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2240      	movs	r2, #64	@ 0x40
 801265c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8012660:	2301      	movs	r3, #1
 8012662:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012664:	e016      	b.n	8012694 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801266c:	69fb      	ldr	r3, [r7, #28]
 801266e:	68da      	ldr	r2, [r3, #12]
 8012670:	f107 010c 	add.w	r1, r7, #12
 8012674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012676:	f7ff fdad 	bl	80121d4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f7ff ff00 	bl	8012480 <dir_find>
 8012680:	4603      	mov	r3, r0
 8012682:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8012686:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801268a:	2b00      	cmp	r3, #0
 801268c:	d106      	bne.n	801269c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801268e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012690:	3301      	adds	r3, #1
 8012692:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012696:	2b63      	cmp	r3, #99	@ 0x63
 8012698:	d9e5      	bls.n	8012666 <dir_register+0x66>
 801269a:	e000      	b.n	801269e <dir_register+0x9e>
			if (res != FR_OK) break;
 801269c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801269e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126a0:	2b64      	cmp	r3, #100	@ 0x64
 80126a2:	d101      	bne.n	80126a8 <dir_register+0xa8>
 80126a4:	2307      	movs	r3, #7
 80126a6:	e09c      	b.n	80127e2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80126a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80126ac:	2b04      	cmp	r3, #4
 80126ae:	d002      	beq.n	80126b6 <dir_register+0xb6>
 80126b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80126b4:	e095      	b.n	80127e2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80126b6:	7dfa      	ldrb	r2, [r7, #23]
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80126be:	7dfb      	ldrb	r3, [r7, #23]
 80126c0:	f003 0302 	and.w	r3, r3, #2
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d007      	beq.n	80126d8 <dir_register+0xd8>
 80126c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126ca:	330c      	adds	r3, #12
 80126cc:	4a47      	ldr	r2, [pc, #284]	@ (80127ec <dir_register+0x1ec>)
 80126ce:	fba2 2303 	umull	r2, r3, r2, r3
 80126d2:	089b      	lsrs	r3, r3, #2
 80126d4:	3301      	adds	r3, #1
 80126d6:	e000      	b.n	80126da <dir_register+0xda>
 80126d8:	2301      	movs	r3, #1
 80126da:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80126dc:	6a39      	ldr	r1, [r7, #32]
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f7ff fbb5 	bl	8011e4e <dir_alloc>
 80126e4:	4603      	mov	r3, r0
 80126e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80126ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d148      	bne.n	8012784 <dir_register+0x184>
 80126f2:	6a3b      	ldr	r3, [r7, #32]
 80126f4:	3b01      	subs	r3, #1
 80126f6:	623b      	str	r3, [r7, #32]
 80126f8:	6a3b      	ldr	r3, [r7, #32]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d042      	beq.n	8012784 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	695a      	ldr	r2, [r3, #20]
 8012702:	6a3b      	ldr	r3, [r7, #32]
 8012704:	015b      	lsls	r3, r3, #5
 8012706:	1ad3      	subs	r3, r2, r3
 8012708:	4619      	mov	r1, r3
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f7ff fa5f 	bl	8011bce <dir_sdi>
 8012710:	4603      	mov	r3, r0
 8012712:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8012716:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801271a:	2b00      	cmp	r3, #0
 801271c:	d132      	bne.n	8012784 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	3324      	adds	r3, #36	@ 0x24
 8012722:	4618      	mov	r0, r3
 8012724:	f7ff fde4 	bl	80122f0 <sum_sfn>
 8012728:	4603      	mov	r3, r0
 801272a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	69db      	ldr	r3, [r3, #28]
 8012730:	4619      	mov	r1, r3
 8012732:	69f8      	ldr	r0, [r7, #28]
 8012734:	f7fe fece 	bl	80114d4 <move_window>
 8012738:	4603      	mov	r3, r0
 801273a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801273e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012742:	2b00      	cmp	r3, #0
 8012744:	d11d      	bne.n	8012782 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8012746:	69fb      	ldr	r3, [r7, #28]
 8012748:	68d8      	ldr	r0, [r3, #12]
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	6a19      	ldr	r1, [r3, #32]
 801274e:	6a3b      	ldr	r3, [r7, #32]
 8012750:	b2da      	uxtb	r2, r3
 8012752:	7efb      	ldrb	r3, [r7, #27]
 8012754:	f7ff fcd6 	bl	8012104 <put_lfn>
				fs->wflag = 1;
 8012758:	69fb      	ldr	r3, [r7, #28]
 801275a:	2201      	movs	r2, #1
 801275c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801275e:	2100      	movs	r1, #0
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f7ff faaf 	bl	8011cc4 <dir_next>
 8012766:	4603      	mov	r3, r0
 8012768:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801276c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012770:	2b00      	cmp	r3, #0
 8012772:	d107      	bne.n	8012784 <dir_register+0x184>
 8012774:	6a3b      	ldr	r3, [r7, #32]
 8012776:	3b01      	subs	r3, #1
 8012778:	623b      	str	r3, [r7, #32]
 801277a:	6a3b      	ldr	r3, [r7, #32]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d1d5      	bne.n	801272c <dir_register+0x12c>
 8012780:	e000      	b.n	8012784 <dir_register+0x184>
				if (res != FR_OK) break;
 8012782:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012784:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012788:	2b00      	cmp	r3, #0
 801278a:	d128      	bne.n	80127de <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	69db      	ldr	r3, [r3, #28]
 8012790:	4619      	mov	r1, r3
 8012792:	69f8      	ldr	r0, [r7, #28]
 8012794:	f7fe fe9e 	bl	80114d4 <move_window>
 8012798:	4603      	mov	r3, r0
 801279a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801279e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d11b      	bne.n	80127de <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6a1b      	ldr	r3, [r3, #32]
 80127aa:	2220      	movs	r2, #32
 80127ac:	2100      	movs	r1, #0
 80127ae:	4618      	mov	r0, r3
 80127b0:	f7fe fc82 	bl	80110b8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	6a18      	ldr	r0, [r3, #32]
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	3324      	adds	r3, #36	@ 0x24
 80127bc:	220b      	movs	r2, #11
 80127be:	4619      	mov	r1, r3
 80127c0:	f7fe fc59 	bl	8011076 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	6a1b      	ldr	r3, [r3, #32]
 80127ce:	330c      	adds	r3, #12
 80127d0:	f002 0218 	and.w	r2, r2, #24
 80127d4:	b2d2      	uxtb	r2, r2
 80127d6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80127d8:	69fb      	ldr	r3, [r7, #28]
 80127da:	2201      	movs	r2, #1
 80127dc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80127de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3730      	adds	r7, #48	@ 0x30
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}
 80127ea:	bf00      	nop
 80127ec:	4ec4ec4f 	.word	0x4ec4ec4f

080127f0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b088      	sub	sp, #32
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012800:	683b      	ldr	r3, [r7, #0]
 8012802:	2200      	movs	r2, #0
 8012804:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	69db      	ldr	r3, [r3, #28]
 801280a:	2b00      	cmp	r3, #0
 801280c:	f000 80ca 	beq.w	80129a4 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012818:	d032      	beq.n	8012880 <get_fileinfo+0x90>
			i = j = 0;
 801281a:	2300      	movs	r3, #0
 801281c:	61bb      	str	r3, [r7, #24]
 801281e:	69bb      	ldr	r3, [r7, #24]
 8012820:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8012822:	e01b      	b.n	801285c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8012824:	89fb      	ldrh	r3, [r7, #14]
 8012826:	2100      	movs	r1, #0
 8012828:	4618      	mov	r0, r3
 801282a:	f001 fe43 	bl	80144b4 <ff_convert>
 801282e:	4603      	mov	r3, r0
 8012830:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8012832:	89fb      	ldrh	r3, [r7, #14]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d102      	bne.n	801283e <get_fileinfo+0x4e>
 8012838:	2300      	movs	r3, #0
 801283a:	61fb      	str	r3, [r7, #28]
 801283c:	e01a      	b.n	8012874 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801283e:	69fb      	ldr	r3, [r7, #28]
 8012840:	2bfe      	cmp	r3, #254	@ 0xfe
 8012842:	d902      	bls.n	801284a <get_fileinfo+0x5a>
 8012844:	2300      	movs	r3, #0
 8012846:	61fb      	str	r3, [r7, #28]
 8012848:	e014      	b.n	8012874 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801284a:	69fb      	ldr	r3, [r7, #28]
 801284c:	1c5a      	adds	r2, r3, #1
 801284e:	61fa      	str	r2, [r7, #28]
 8012850:	89fa      	ldrh	r2, [r7, #14]
 8012852:	b2d1      	uxtb	r1, r2
 8012854:	683a      	ldr	r2, [r7, #0]
 8012856:	4413      	add	r3, r2
 8012858:	460a      	mov	r2, r1
 801285a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801285c:	693b      	ldr	r3, [r7, #16]
 801285e:	68da      	ldr	r2, [r3, #12]
 8012860:	69bb      	ldr	r3, [r7, #24]
 8012862:	1c59      	adds	r1, r3, #1
 8012864:	61b9      	str	r1, [r7, #24]
 8012866:	005b      	lsls	r3, r3, #1
 8012868:	4413      	add	r3, r2
 801286a:	881b      	ldrh	r3, [r3, #0]
 801286c:	81fb      	strh	r3, [r7, #14]
 801286e:	89fb      	ldrh	r3, [r7, #14]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d1d7      	bne.n	8012824 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8012874:	683a      	ldr	r2, [r7, #0]
 8012876:	69fb      	ldr	r3, [r7, #28]
 8012878:	4413      	add	r3, r2
 801287a:	3316      	adds	r3, #22
 801287c:	2200      	movs	r2, #0
 801287e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8012880:	2300      	movs	r3, #0
 8012882:	61bb      	str	r3, [r7, #24]
 8012884:	69bb      	ldr	r3, [r7, #24]
 8012886:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8012888:	683a      	ldr	r2, [r7, #0]
 801288a:	69fb      	ldr	r3, [r7, #28]
 801288c:	4413      	add	r3, r2
 801288e:	3316      	adds	r3, #22
 8012890:	781b      	ldrb	r3, [r3, #0]
 8012892:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8012894:	e04d      	b.n	8012932 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	6a1a      	ldr	r2, [r3, #32]
 801289a:	69fb      	ldr	r3, [r7, #28]
 801289c:	1c59      	adds	r1, r3, #1
 801289e:	61f9      	str	r1, [r7, #28]
 80128a0:	4413      	add	r3, r2
 80128a2:	781b      	ldrb	r3, [r3, #0]
 80128a4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80128a6:	7dfb      	ldrb	r3, [r7, #23]
 80128a8:	2b20      	cmp	r3, #32
 80128aa:	d041      	beq.n	8012930 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80128ac:	7dfb      	ldrb	r3, [r7, #23]
 80128ae:	2b05      	cmp	r3, #5
 80128b0:	d101      	bne.n	80128b6 <get_fileinfo+0xc6>
 80128b2:	23e5      	movs	r3, #229	@ 0xe5
 80128b4:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80128b6:	69fb      	ldr	r3, [r7, #28]
 80128b8:	2b09      	cmp	r3, #9
 80128ba:	d10f      	bne.n	80128dc <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 80128bc:	89bb      	ldrh	r3, [r7, #12]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d105      	bne.n	80128ce <get_fileinfo+0xde>
 80128c2:	683a      	ldr	r2, [r7, #0]
 80128c4:	69bb      	ldr	r3, [r7, #24]
 80128c6:	4413      	add	r3, r2
 80128c8:	3316      	adds	r3, #22
 80128ca:	222e      	movs	r2, #46	@ 0x2e
 80128cc:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80128ce:	69bb      	ldr	r3, [r7, #24]
 80128d0:	1c5a      	adds	r2, r3, #1
 80128d2:	61ba      	str	r2, [r7, #24]
 80128d4:	683a      	ldr	r2, [r7, #0]
 80128d6:	4413      	add	r3, r2
 80128d8:	222e      	movs	r2, #46	@ 0x2e
 80128da:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80128dc:	683a      	ldr	r2, [r7, #0]
 80128de:	69bb      	ldr	r3, [r7, #24]
 80128e0:	4413      	add	r3, r2
 80128e2:	3309      	adds	r3, #9
 80128e4:	7dfa      	ldrb	r2, [r7, #23]
 80128e6:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80128e8:	89bb      	ldrh	r3, [r7, #12]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d11c      	bne.n	8012928 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80128ee:	7dfb      	ldrb	r3, [r7, #23]
 80128f0:	2b40      	cmp	r3, #64	@ 0x40
 80128f2:	d913      	bls.n	801291c <get_fileinfo+0x12c>
 80128f4:	7dfb      	ldrb	r3, [r7, #23]
 80128f6:	2b5a      	cmp	r3, #90	@ 0x5a
 80128f8:	d810      	bhi.n	801291c <get_fileinfo+0x12c>
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	6a1b      	ldr	r3, [r3, #32]
 80128fe:	330c      	adds	r3, #12
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	461a      	mov	r2, r3
 8012904:	69fb      	ldr	r3, [r7, #28]
 8012906:	2b08      	cmp	r3, #8
 8012908:	d901      	bls.n	801290e <get_fileinfo+0x11e>
 801290a:	2310      	movs	r3, #16
 801290c:	e000      	b.n	8012910 <get_fileinfo+0x120>
 801290e:	2308      	movs	r3, #8
 8012910:	4013      	ands	r3, r2
 8012912:	2b00      	cmp	r3, #0
 8012914:	d002      	beq.n	801291c <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 8012916:	7dfb      	ldrb	r3, [r7, #23]
 8012918:	3320      	adds	r3, #32
 801291a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801291c:	683a      	ldr	r2, [r7, #0]
 801291e:	69bb      	ldr	r3, [r7, #24]
 8012920:	4413      	add	r3, r2
 8012922:	3316      	adds	r3, #22
 8012924:	7dfa      	ldrb	r2, [r7, #23]
 8012926:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8012928:	69bb      	ldr	r3, [r7, #24]
 801292a:	3301      	adds	r3, #1
 801292c:	61bb      	str	r3, [r7, #24]
 801292e:	e000      	b.n	8012932 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8012930:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8012932:	69fb      	ldr	r3, [r7, #28]
 8012934:	2b0a      	cmp	r3, #10
 8012936:	d9ae      	bls.n	8012896 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8012938:	89bb      	ldrh	r3, [r7, #12]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d10d      	bne.n	801295a <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 801293e:	683a      	ldr	r2, [r7, #0]
 8012940:	69bb      	ldr	r3, [r7, #24]
 8012942:	4413      	add	r3, r2
 8012944:	3316      	adds	r3, #22
 8012946:	2200      	movs	r2, #0
 8012948:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	6a1b      	ldr	r3, [r3, #32]
 801294e:	330c      	adds	r3, #12
 8012950:	781b      	ldrb	r3, [r3, #0]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d101      	bne.n	801295a <get_fileinfo+0x16a>
 8012956:	2300      	movs	r3, #0
 8012958:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801295a:	683a      	ldr	r2, [r7, #0]
 801295c:	69bb      	ldr	r3, [r7, #24]
 801295e:	4413      	add	r3, r2
 8012960:	3309      	adds	r3, #9
 8012962:	2200      	movs	r2, #0
 8012964:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	6a1b      	ldr	r3, [r3, #32]
 801296a:	7ada      	ldrb	r2, [r3, #11]
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	6a1b      	ldr	r3, [r3, #32]
 8012974:	331c      	adds	r3, #28
 8012976:	4618      	mov	r0, r3
 8012978:	f7fe fb13 	bl	8010fa2 <ld_dword>
 801297c:	4602      	mov	r2, r0
 801297e:	683b      	ldr	r3, [r7, #0]
 8012980:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	6a1b      	ldr	r3, [r3, #32]
 8012986:	3316      	adds	r3, #22
 8012988:	4618      	mov	r0, r3
 801298a:	f7fe fb0a 	bl	8010fa2 <ld_dword>
 801298e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8012990:	68bb      	ldr	r3, [r7, #8]
 8012992:	b29a      	uxth	r2, r3
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	80da      	strh	r2, [r3, #6]
 8012998:	68bb      	ldr	r3, [r7, #8]
 801299a:	0c1b      	lsrs	r3, r3, #16
 801299c:	b29a      	uxth	r2, r3
 801299e:	683b      	ldr	r3, [r7, #0]
 80129a0:	809a      	strh	r2, [r3, #4]
 80129a2:	e000      	b.n	80129a6 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80129a4:	bf00      	nop
}
 80129a6:	3720      	adds	r7, #32
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd80      	pop	{r7, pc}

080129ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b08a      	sub	sp, #40	@ 0x28
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
 80129b4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	613b      	str	r3, [r7, #16]
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	68db      	ldr	r3, [r3, #12]
 80129c2:	60fb      	str	r3, [r7, #12]
 80129c4:	2300      	movs	r3, #0
 80129c6:	617b      	str	r3, [r7, #20]
 80129c8:	697b      	ldr	r3, [r7, #20]
 80129ca:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80129cc:	69bb      	ldr	r3, [r7, #24]
 80129ce:	1c5a      	adds	r2, r3, #1
 80129d0:	61ba      	str	r2, [r7, #24]
 80129d2:	693a      	ldr	r2, [r7, #16]
 80129d4:	4413      	add	r3, r2
 80129d6:	781b      	ldrb	r3, [r3, #0]
 80129d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80129da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80129dc:	2b1f      	cmp	r3, #31
 80129de:	d940      	bls.n	8012a62 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80129e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80129e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80129e4:	d006      	beq.n	80129f4 <create_name+0x48>
 80129e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80129e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80129ea:	d110      	bne.n	8012a0e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80129ec:	e002      	b.n	80129f4 <create_name+0x48>
 80129ee:	69bb      	ldr	r3, [r7, #24]
 80129f0:	3301      	adds	r3, #1
 80129f2:	61bb      	str	r3, [r7, #24]
 80129f4:	693a      	ldr	r2, [r7, #16]
 80129f6:	69bb      	ldr	r3, [r7, #24]
 80129f8:	4413      	add	r3, r2
 80129fa:	781b      	ldrb	r3, [r3, #0]
 80129fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80129fe:	d0f6      	beq.n	80129ee <create_name+0x42>
 8012a00:	693a      	ldr	r2, [r7, #16]
 8012a02:	69bb      	ldr	r3, [r7, #24]
 8012a04:	4413      	add	r3, r2
 8012a06:	781b      	ldrb	r3, [r3, #0]
 8012a08:	2b5c      	cmp	r3, #92	@ 0x5c
 8012a0a:	d0f0      	beq.n	80129ee <create_name+0x42>
			break;
 8012a0c:	e02a      	b.n	8012a64 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8012a0e:	697b      	ldr	r3, [r7, #20]
 8012a10:	2bfe      	cmp	r3, #254	@ 0xfe
 8012a12:	d901      	bls.n	8012a18 <create_name+0x6c>
 8012a14:	2306      	movs	r3, #6
 8012a16:	e17d      	b.n	8012d14 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8012a18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a1a:	b2db      	uxtb	r3, r3
 8012a1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8012a1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a20:	2101      	movs	r1, #1
 8012a22:	4618      	mov	r0, r3
 8012a24:	f001 fd46 	bl	80144b4 <ff_convert>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012a2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d101      	bne.n	8012a36 <create_name+0x8a>
 8012a32:	2306      	movs	r3, #6
 8012a34:	e16e      	b.n	8012d14 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8012a36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a38:	2b7f      	cmp	r3, #127	@ 0x7f
 8012a3a:	d809      	bhi.n	8012a50 <create_name+0xa4>
 8012a3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a3e:	4619      	mov	r1, r3
 8012a40:	488d      	ldr	r0, [pc, #564]	@ (8012c78 <create_name+0x2cc>)
 8012a42:	f7fe fb7b 	bl	801113c <chk_chr>
 8012a46:	4603      	mov	r3, r0
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d001      	beq.n	8012a50 <create_name+0xa4>
 8012a4c:	2306      	movs	r3, #6
 8012a4e:	e161      	b.n	8012d14 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	1c5a      	adds	r2, r3, #1
 8012a54:	617a      	str	r2, [r7, #20]
 8012a56:	005b      	lsls	r3, r3, #1
 8012a58:	68fa      	ldr	r2, [r7, #12]
 8012a5a:	4413      	add	r3, r2
 8012a5c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012a5e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8012a60:	e7b4      	b.n	80129cc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8012a62:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8012a64:	693a      	ldr	r2, [r7, #16]
 8012a66:	69bb      	ldr	r3, [r7, #24]
 8012a68:	441a      	add	r2, r3
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012a6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a70:	2b1f      	cmp	r3, #31
 8012a72:	d801      	bhi.n	8012a78 <create_name+0xcc>
 8012a74:	2304      	movs	r3, #4
 8012a76:	e000      	b.n	8012a7a <create_name+0xce>
 8012a78:	2300      	movs	r3, #0
 8012a7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012a7e:	e011      	b.n	8012aa4 <create_name+0xf8>
		w = lfn[di - 1];
 8012a80:	697b      	ldr	r3, [r7, #20]
 8012a82:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8012a86:	3b01      	subs	r3, #1
 8012a88:	005b      	lsls	r3, r3, #1
 8012a8a:	68fa      	ldr	r2, [r7, #12]
 8012a8c:	4413      	add	r3, r2
 8012a8e:	881b      	ldrh	r3, [r3, #0]
 8012a90:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8012a92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a94:	2b20      	cmp	r3, #32
 8012a96:	d002      	beq.n	8012a9e <create_name+0xf2>
 8012a98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012a9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8012a9c:	d106      	bne.n	8012aac <create_name+0x100>
		di--;
 8012a9e:	697b      	ldr	r3, [r7, #20]
 8012aa0:	3b01      	subs	r3, #1
 8012aa2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d1ea      	bne.n	8012a80 <create_name+0xd4>
 8012aaa:	e000      	b.n	8012aae <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8012aac:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	005b      	lsls	r3, r3, #1
 8012ab2:	68fa      	ldr	r2, [r7, #12]
 8012ab4:	4413      	add	r3, r2
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d101      	bne.n	8012ac4 <create_name+0x118>
 8012ac0:	2306      	movs	r3, #6
 8012ac2:	e127      	b.n	8012d14 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	3324      	adds	r3, #36	@ 0x24
 8012ac8:	220b      	movs	r2, #11
 8012aca:	2120      	movs	r1, #32
 8012acc:	4618      	mov	r0, r3
 8012ace:	f7fe faf3 	bl	80110b8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	61bb      	str	r3, [r7, #24]
 8012ad6:	e002      	b.n	8012ade <create_name+0x132>
 8012ad8:	69bb      	ldr	r3, [r7, #24]
 8012ada:	3301      	adds	r3, #1
 8012adc:	61bb      	str	r3, [r7, #24]
 8012ade:	69bb      	ldr	r3, [r7, #24]
 8012ae0:	005b      	lsls	r3, r3, #1
 8012ae2:	68fa      	ldr	r2, [r7, #12]
 8012ae4:	4413      	add	r3, r2
 8012ae6:	881b      	ldrh	r3, [r3, #0]
 8012ae8:	2b20      	cmp	r3, #32
 8012aea:	d0f5      	beq.n	8012ad8 <create_name+0x12c>
 8012aec:	69bb      	ldr	r3, [r7, #24]
 8012aee:	005b      	lsls	r3, r3, #1
 8012af0:	68fa      	ldr	r2, [r7, #12]
 8012af2:	4413      	add	r3, r2
 8012af4:	881b      	ldrh	r3, [r3, #0]
 8012af6:	2b2e      	cmp	r3, #46	@ 0x2e
 8012af8:	d0ee      	beq.n	8012ad8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8012afa:	69bb      	ldr	r3, [r7, #24]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d009      	beq.n	8012b14 <create_name+0x168>
 8012b00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b04:	f043 0303 	orr.w	r3, r3, #3
 8012b08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8012b0c:	e002      	b.n	8012b14 <create_name+0x168>
 8012b0e:	697b      	ldr	r3, [r7, #20]
 8012b10:	3b01      	subs	r3, #1
 8012b12:	617b      	str	r3, [r7, #20]
 8012b14:	697b      	ldr	r3, [r7, #20]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d009      	beq.n	8012b2e <create_name+0x182>
 8012b1a:	697b      	ldr	r3, [r7, #20]
 8012b1c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8012b20:	3b01      	subs	r3, #1
 8012b22:	005b      	lsls	r3, r3, #1
 8012b24:	68fa      	ldr	r2, [r7, #12]
 8012b26:	4413      	add	r3, r2
 8012b28:	881b      	ldrh	r3, [r3, #0]
 8012b2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8012b2c:	d1ef      	bne.n	8012b0e <create_name+0x162>

	i = b = 0; ni = 8;
 8012b2e:	2300      	movs	r3, #0
 8012b30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012b34:	2300      	movs	r3, #0
 8012b36:	623b      	str	r3, [r7, #32]
 8012b38:	2308      	movs	r3, #8
 8012b3a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8012b3c:	69bb      	ldr	r3, [r7, #24]
 8012b3e:	1c5a      	adds	r2, r3, #1
 8012b40:	61ba      	str	r2, [r7, #24]
 8012b42:	005b      	lsls	r3, r3, #1
 8012b44:	68fa      	ldr	r2, [r7, #12]
 8012b46:	4413      	add	r3, r2
 8012b48:	881b      	ldrh	r3, [r3, #0]
 8012b4a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8012b4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	f000 8090 	beq.w	8012c74 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8012b54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012b56:	2b20      	cmp	r3, #32
 8012b58:	d006      	beq.n	8012b68 <create_name+0x1bc>
 8012b5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012b5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8012b5e:	d10a      	bne.n	8012b76 <create_name+0x1ca>
 8012b60:	69ba      	ldr	r2, [r7, #24]
 8012b62:	697b      	ldr	r3, [r7, #20]
 8012b64:	429a      	cmp	r2, r3
 8012b66:	d006      	beq.n	8012b76 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8012b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b6c:	f043 0303 	orr.w	r3, r3, #3
 8012b70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012b74:	e07d      	b.n	8012c72 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8012b76:	6a3a      	ldr	r2, [r7, #32]
 8012b78:	69fb      	ldr	r3, [r7, #28]
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	d203      	bcs.n	8012b86 <create_name+0x1da>
 8012b7e:	69ba      	ldr	r2, [r7, #24]
 8012b80:	697b      	ldr	r3, [r7, #20]
 8012b82:	429a      	cmp	r2, r3
 8012b84:	d123      	bne.n	8012bce <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8012b86:	69fb      	ldr	r3, [r7, #28]
 8012b88:	2b0b      	cmp	r3, #11
 8012b8a:	d106      	bne.n	8012b9a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8012b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b90:	f043 0303 	orr.w	r3, r3, #3
 8012b94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012b98:	e075      	b.n	8012c86 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8012b9a:	69ba      	ldr	r2, [r7, #24]
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	429a      	cmp	r2, r3
 8012ba0:	d005      	beq.n	8012bae <create_name+0x202>
 8012ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012ba6:	f043 0303 	orr.w	r3, r3, #3
 8012baa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8012bae:	69ba      	ldr	r2, [r7, #24]
 8012bb0:	697b      	ldr	r3, [r7, #20]
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	d866      	bhi.n	8012c84 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8012bb6:	697b      	ldr	r3, [r7, #20]
 8012bb8:	61bb      	str	r3, [r7, #24]
 8012bba:	2308      	movs	r3, #8
 8012bbc:	623b      	str	r3, [r7, #32]
 8012bbe:	230b      	movs	r3, #11
 8012bc0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8012bc2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012bc6:	009b      	lsls	r3, r3, #2
 8012bc8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012bcc:	e051      	b.n	8012c72 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8012bce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012bd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8012bd2:	d914      	bls.n	8012bfe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8012bd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012bd6:	2100      	movs	r1, #0
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f001 fc6b 	bl	80144b4 <ff_convert>
 8012bde:	4603      	mov	r3, r0
 8012be0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012be2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d004      	beq.n	8012bf2 <create_name+0x246>
 8012be8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012bea:	3b80      	subs	r3, #128	@ 0x80
 8012bec:	4a23      	ldr	r2, [pc, #140]	@ (8012c7c <create_name+0x2d0>)
 8012bee:	5cd3      	ldrb	r3, [r2, r3]
 8012bf0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8012bf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012bf6:	f043 0302 	orr.w	r3, r3, #2
 8012bfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8012bfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d007      	beq.n	8012c14 <create_name+0x268>
 8012c04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c06:	4619      	mov	r1, r3
 8012c08:	481d      	ldr	r0, [pc, #116]	@ (8012c80 <create_name+0x2d4>)
 8012c0a:	f7fe fa97 	bl	801113c <chk_chr>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d008      	beq.n	8012c26 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8012c14:	235f      	movs	r3, #95	@ 0x5f
 8012c16:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8012c18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c1c:	f043 0303 	orr.w	r3, r3, #3
 8012c20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012c24:	e01b      	b.n	8012c5e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8012c26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c28:	2b40      	cmp	r3, #64	@ 0x40
 8012c2a:	d909      	bls.n	8012c40 <create_name+0x294>
 8012c2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c2e:	2b5a      	cmp	r3, #90	@ 0x5a
 8012c30:	d806      	bhi.n	8012c40 <create_name+0x294>
					b |= 2;
 8012c32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012c36:	f043 0302 	orr.w	r3, r3, #2
 8012c3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012c3e:	e00e      	b.n	8012c5e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8012c40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c42:	2b60      	cmp	r3, #96	@ 0x60
 8012c44:	d90b      	bls.n	8012c5e <create_name+0x2b2>
 8012c46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c48:	2b7a      	cmp	r3, #122	@ 0x7a
 8012c4a:	d808      	bhi.n	8012c5e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8012c4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012c50:	f043 0301 	orr.w	r3, r3, #1
 8012c54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012c58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012c5a:	3b20      	subs	r3, #32
 8012c5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8012c5e:	6a3b      	ldr	r3, [r7, #32]
 8012c60:	1c5a      	adds	r2, r3, #1
 8012c62:	623a      	str	r2, [r7, #32]
 8012c64:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012c66:	b2d1      	uxtb	r1, r2
 8012c68:	687a      	ldr	r2, [r7, #4]
 8012c6a:	4413      	add	r3, r2
 8012c6c:	460a      	mov	r2, r1
 8012c6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8012c72:	e763      	b.n	8012b3c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8012c74:	bf00      	nop
 8012c76:	e006      	b.n	8012c86 <create_name+0x2da>
 8012c78:	080171b0 	.word	0x080171b0
 8012c7c:	08017238 	.word	0x08017238
 8012c80:	080171bc 	.word	0x080171bc
			if (si > di) break;			/* No extension */
 8012c84:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8012c8c:	2be5      	cmp	r3, #229	@ 0xe5
 8012c8e:	d103      	bne.n	8012c98 <create_name+0x2ec>
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	2205      	movs	r2, #5
 8012c94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8012c98:	69fb      	ldr	r3, [r7, #28]
 8012c9a:	2b08      	cmp	r3, #8
 8012c9c:	d104      	bne.n	8012ca8 <create_name+0x2fc>
 8012c9e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012ca2:	009b      	lsls	r3, r3, #2
 8012ca4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012ca8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012cac:	f003 030c 	and.w	r3, r3, #12
 8012cb0:	2b0c      	cmp	r3, #12
 8012cb2:	d005      	beq.n	8012cc0 <create_name+0x314>
 8012cb4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012cb8:	f003 0303 	and.w	r3, r3, #3
 8012cbc:	2b03      	cmp	r3, #3
 8012cbe:	d105      	bne.n	8012ccc <create_name+0x320>
 8012cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012cc4:	f043 0302 	orr.w	r3, r3, #2
 8012cc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8012ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012cd0:	f003 0302 	and.w	r3, r3, #2
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d117      	bne.n	8012d08 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8012cd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012cdc:	f003 0303 	and.w	r3, r3, #3
 8012ce0:	2b01      	cmp	r3, #1
 8012ce2:	d105      	bne.n	8012cf0 <create_name+0x344>
 8012ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012ce8:	f043 0310 	orr.w	r3, r3, #16
 8012cec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8012cf0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012cf4:	f003 030c 	and.w	r3, r3, #12
 8012cf8:	2b04      	cmp	r3, #4
 8012cfa:	d105      	bne.n	8012d08 <create_name+0x35c>
 8012cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d00:	f043 0308 	orr.w	r3, r3, #8
 8012d04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8012d0e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8012d12:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	3728      	adds	r7, #40	@ 0x28
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}

08012d1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b086      	sub	sp, #24
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012d2a:	693b      	ldr	r3, [r7, #16]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012d30:	e002      	b.n	8012d38 <follow_path+0x1c>
 8012d32:	683b      	ldr	r3, [r7, #0]
 8012d34:	3301      	adds	r3, #1
 8012d36:	603b      	str	r3, [r7, #0]
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	781b      	ldrb	r3, [r3, #0]
 8012d3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8012d3e:	d0f8      	beq.n	8012d32 <follow_path+0x16>
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	2b5c      	cmp	r3, #92	@ 0x5c
 8012d46:	d0f4      	beq.n	8012d32 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012d48:	693b      	ldr	r3, [r7, #16]
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	781b      	ldrb	r3, [r3, #0]
 8012d52:	2b1f      	cmp	r3, #31
 8012d54:	d80a      	bhi.n	8012d6c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2280      	movs	r2, #128	@ 0x80
 8012d5a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8012d5e:	2100      	movs	r1, #0
 8012d60:	6878      	ldr	r0, [r7, #4]
 8012d62:	f7fe ff34 	bl	8011bce <dir_sdi>
 8012d66:	4603      	mov	r3, r0
 8012d68:	75fb      	strb	r3, [r7, #23]
 8012d6a:	e043      	b.n	8012df4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012d6c:	463b      	mov	r3, r7
 8012d6e:	4619      	mov	r1, r3
 8012d70:	6878      	ldr	r0, [r7, #4]
 8012d72:	f7ff fe1b 	bl	80129ac <create_name>
 8012d76:	4603      	mov	r3, r0
 8012d78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012d7a:	7dfb      	ldrb	r3, [r7, #23]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d134      	bne.n	8012dea <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f7ff fb7d 	bl	8012480 <dir_find>
 8012d86:	4603      	mov	r3, r0
 8012d88:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012d90:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012d92:	7dfb      	ldrb	r3, [r7, #23]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d00a      	beq.n	8012dae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012d98:	7dfb      	ldrb	r3, [r7, #23]
 8012d9a:	2b04      	cmp	r3, #4
 8012d9c:	d127      	bne.n	8012dee <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012d9e:	7afb      	ldrb	r3, [r7, #11]
 8012da0:	f003 0304 	and.w	r3, r3, #4
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d122      	bne.n	8012dee <follow_path+0xd2>
 8012da8:	2305      	movs	r3, #5
 8012daa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012dac:	e01f      	b.n	8012dee <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012dae:	7afb      	ldrb	r3, [r7, #11]
 8012db0:	f003 0304 	and.w	r3, r3, #4
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d11c      	bne.n	8012df2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012db8:	693b      	ldr	r3, [r7, #16]
 8012dba:	799b      	ldrb	r3, [r3, #6]
 8012dbc:	f003 0310 	and.w	r3, r3, #16
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d102      	bne.n	8012dca <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012dc4:	2305      	movs	r3, #5
 8012dc6:	75fb      	strb	r3, [r7, #23]
 8012dc8:	e014      	b.n	8012df4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	695b      	ldr	r3, [r3, #20]
 8012dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012dd8:	4413      	add	r3, r2
 8012dda:	4619      	mov	r1, r3
 8012ddc:	68f8      	ldr	r0, [r7, #12]
 8012dde:	f7ff f87d 	bl	8011edc <ld_clust>
 8012de2:	4602      	mov	r2, r0
 8012de4:	693b      	ldr	r3, [r7, #16]
 8012de6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012de8:	e7c0      	b.n	8012d6c <follow_path+0x50>
			if (res != FR_OK) break;
 8012dea:	bf00      	nop
 8012dec:	e002      	b.n	8012df4 <follow_path+0xd8>
				break;
 8012dee:	bf00      	nop
 8012df0:	e000      	b.n	8012df4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012df2:	bf00      	nop
			}
		}
	}

	return res;
 8012df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	3718      	adds	r7, #24
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}

08012dfe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012dfe:	b480      	push	{r7}
 8012e00:	b087      	sub	sp, #28
 8012e02:	af00      	add	r7, sp, #0
 8012e04:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012e06:	f04f 33ff 	mov.w	r3, #4294967295
 8012e0a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d031      	beq.n	8012e78 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	617b      	str	r3, [r7, #20]
 8012e1a:	e002      	b.n	8012e22 <get_ldnumber+0x24>
 8012e1c:	697b      	ldr	r3, [r7, #20]
 8012e1e:	3301      	adds	r3, #1
 8012e20:	617b      	str	r3, [r7, #20]
 8012e22:	697b      	ldr	r3, [r7, #20]
 8012e24:	781b      	ldrb	r3, [r3, #0]
 8012e26:	2b1f      	cmp	r3, #31
 8012e28:	d903      	bls.n	8012e32 <get_ldnumber+0x34>
 8012e2a:	697b      	ldr	r3, [r7, #20]
 8012e2c:	781b      	ldrb	r3, [r3, #0]
 8012e2e:	2b3a      	cmp	r3, #58	@ 0x3a
 8012e30:	d1f4      	bne.n	8012e1c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012e32:	697b      	ldr	r3, [r7, #20]
 8012e34:	781b      	ldrb	r3, [r3, #0]
 8012e36:	2b3a      	cmp	r3, #58	@ 0x3a
 8012e38:	d11c      	bne.n	8012e74 <get_ldnumber+0x76>
			tp = *path;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	1c5a      	adds	r2, r3, #1
 8012e44:	60fa      	str	r2, [r7, #12]
 8012e46:	781b      	ldrb	r3, [r3, #0]
 8012e48:	3b30      	subs	r3, #48	@ 0x30
 8012e4a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012e4c:	68bb      	ldr	r3, [r7, #8]
 8012e4e:	2b09      	cmp	r3, #9
 8012e50:	d80e      	bhi.n	8012e70 <get_ldnumber+0x72>
 8012e52:	68fa      	ldr	r2, [r7, #12]
 8012e54:	697b      	ldr	r3, [r7, #20]
 8012e56:	429a      	cmp	r2, r3
 8012e58:	d10a      	bne.n	8012e70 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012e5a:	68bb      	ldr	r3, [r7, #8]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d107      	bne.n	8012e70 <get_ldnumber+0x72>
					vol = (int)i;
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012e64:	697b      	ldr	r3, [r7, #20]
 8012e66:	3301      	adds	r3, #1
 8012e68:	617b      	str	r3, [r7, #20]
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	697a      	ldr	r2, [r7, #20]
 8012e6e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012e70:	693b      	ldr	r3, [r7, #16]
 8012e72:	e002      	b.n	8012e7a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012e74:	2300      	movs	r3, #0
 8012e76:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012e78:	693b      	ldr	r3, [r7, #16]
}
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	371c      	adds	r7, #28
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e84:	4770      	bx	lr
	...

08012e88 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	2200      	movs	r2, #0
 8012e96:	70da      	strb	r2, [r3, #3]
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8012e9e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012ea0:	6839      	ldr	r1, [r7, #0]
 8012ea2:	6878      	ldr	r0, [r7, #4]
 8012ea4:	f7fe fb16 	bl	80114d4 <move_window>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d001      	beq.n	8012eb2 <check_fs+0x2a>
 8012eae:	2304      	movs	r3, #4
 8012eb0:	e038      	b.n	8012f24 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	3334      	adds	r3, #52	@ 0x34
 8012eb6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f7fe f858 	bl	8010f70 <ld_word>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	461a      	mov	r2, r3
 8012ec4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012ec8:	429a      	cmp	r2, r3
 8012eca:	d001      	beq.n	8012ed0 <check_fs+0x48>
 8012ecc:	2303      	movs	r3, #3
 8012ece:	e029      	b.n	8012f24 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012ed6:	2be9      	cmp	r3, #233	@ 0xe9
 8012ed8:	d009      	beq.n	8012eee <check_fs+0x66>
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012ee0:	2beb      	cmp	r3, #235	@ 0xeb
 8012ee2:	d11e      	bne.n	8012f22 <check_fs+0x9a>
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8012eea:	2b90      	cmp	r3, #144	@ 0x90
 8012eec:	d119      	bne.n	8012f22 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	3334      	adds	r3, #52	@ 0x34
 8012ef2:	3336      	adds	r3, #54	@ 0x36
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7fe f854 	bl	8010fa2 <ld_dword>
 8012efa:	4603      	mov	r3, r0
 8012efc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012f00:	4a0a      	ldr	r2, [pc, #40]	@ (8012f2c <check_fs+0xa4>)
 8012f02:	4293      	cmp	r3, r2
 8012f04:	d101      	bne.n	8012f0a <check_fs+0x82>
 8012f06:	2300      	movs	r3, #0
 8012f08:	e00c      	b.n	8012f24 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	3334      	adds	r3, #52	@ 0x34
 8012f0e:	3352      	adds	r3, #82	@ 0x52
 8012f10:	4618      	mov	r0, r3
 8012f12:	f7fe f846 	bl	8010fa2 <ld_dword>
 8012f16:	4603      	mov	r3, r0
 8012f18:	4a05      	ldr	r2, [pc, #20]	@ (8012f30 <check_fs+0xa8>)
 8012f1a:	4293      	cmp	r3, r2
 8012f1c:	d101      	bne.n	8012f22 <check_fs+0x9a>
 8012f1e:	2300      	movs	r3, #0
 8012f20:	e000      	b.n	8012f24 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012f22:	2302      	movs	r3, #2
}
 8012f24:	4618      	mov	r0, r3
 8012f26:	3708      	adds	r7, #8
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	bd80      	pop	{r7, pc}
 8012f2c:	00544146 	.word	0x00544146
 8012f30:	33544146 	.word	0x33544146

08012f34 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b096      	sub	sp, #88	@ 0x58
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	60f8      	str	r0, [r7, #12]
 8012f3c:	60b9      	str	r1, [r7, #8]
 8012f3e:	4613      	mov	r3, r2
 8012f40:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	2200      	movs	r2, #0
 8012f46:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012f48:	68f8      	ldr	r0, [r7, #12]
 8012f4a:	f7ff ff58 	bl	8012dfe <get_ldnumber>
 8012f4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	da01      	bge.n	8012f5a <find_volume+0x26>
 8012f56:	230b      	movs	r3, #11
 8012f58:	e22d      	b.n	80133b6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012f5a:	4aa1      	ldr	r2, [pc, #644]	@ (80131e0 <find_volume+0x2ac>)
 8012f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012f62:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d101      	bne.n	8012f6e <find_volume+0x3a>
 8012f6a:	230c      	movs	r3, #12
 8012f6c:	e223      	b.n	80133b6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012f6e:	68bb      	ldr	r3, [r7, #8]
 8012f70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012f72:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012f74:	79fb      	ldrb	r3, [r7, #7]
 8012f76:	f023 0301 	bic.w	r3, r3, #1
 8012f7a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f7e:	781b      	ldrb	r3, [r3, #0]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d01a      	beq.n	8012fba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f86:	785b      	ldrb	r3, [r3, #1]
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7fd ff51 	bl	8010e30 <disk_status>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012f94:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012f98:	f003 0301 	and.w	r3, r3, #1
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d10c      	bne.n	8012fba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012fa0:	79fb      	ldrb	r3, [r7, #7]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d007      	beq.n	8012fb6 <find_volume+0x82>
 8012fa6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012faa:	f003 0304 	and.w	r3, r3, #4
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d001      	beq.n	8012fb6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012fb2:	230a      	movs	r3, #10
 8012fb4:	e1ff      	b.n	80133b6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	e1fd      	b.n	80133b6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012fc2:	b2da      	uxtb	r2, r3
 8012fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fc6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fca:	785b      	ldrb	r3, [r3, #1]
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7fd ff49 	bl	8010e64 <disk_initialize>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012fd8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012fdc:	f003 0301 	and.w	r3, r3, #1
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d001      	beq.n	8012fe8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012fe4:	2303      	movs	r3, #3
 8012fe6:	e1e6      	b.n	80133b6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012fe8:	79fb      	ldrb	r3, [r7, #7]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d007      	beq.n	8012ffe <find_volume+0xca>
 8012fee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012ff2:	f003 0304 	and.w	r3, r3, #4
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d001      	beq.n	8012ffe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012ffa:	230a      	movs	r3, #10
 8012ffc:	e1db      	b.n	80133b6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012ffe:	2300      	movs	r3, #0
 8013000:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013002:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013004:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013006:	f7ff ff3f 	bl	8012e88 <check_fs>
 801300a:	4603      	mov	r3, r0
 801300c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013010:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013014:	2b02      	cmp	r3, #2
 8013016:	d149      	bne.n	80130ac <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013018:	2300      	movs	r3, #0
 801301a:	643b      	str	r3, [r7, #64]	@ 0x40
 801301c:	e01e      	b.n	801305c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801301e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013020:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8013024:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013026:	011b      	lsls	r3, r3, #4
 8013028:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801302c:	4413      	add	r3, r2
 801302e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013032:	3304      	adds	r3, #4
 8013034:	781b      	ldrb	r3, [r3, #0]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d006      	beq.n	8013048 <find_volume+0x114>
 801303a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801303c:	3308      	adds	r3, #8
 801303e:	4618      	mov	r0, r3
 8013040:	f7fd ffaf 	bl	8010fa2 <ld_dword>
 8013044:	4602      	mov	r2, r0
 8013046:	e000      	b.n	801304a <find_volume+0x116>
 8013048:	2200      	movs	r2, #0
 801304a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801304c:	009b      	lsls	r3, r3, #2
 801304e:	3358      	adds	r3, #88	@ 0x58
 8013050:	443b      	add	r3, r7
 8013052:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013058:	3301      	adds	r3, #1
 801305a:	643b      	str	r3, [r7, #64]	@ 0x40
 801305c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801305e:	2b03      	cmp	r3, #3
 8013060:	d9dd      	bls.n	801301e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013062:	2300      	movs	r3, #0
 8013064:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8013066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013068:	2b00      	cmp	r3, #0
 801306a:	d002      	beq.n	8013072 <find_volume+0x13e>
 801306c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801306e:	3b01      	subs	r3, #1
 8013070:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013072:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013074:	009b      	lsls	r3, r3, #2
 8013076:	3358      	adds	r3, #88	@ 0x58
 8013078:	443b      	add	r3, r7
 801307a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801307e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013082:	2b00      	cmp	r3, #0
 8013084:	d005      	beq.n	8013092 <find_volume+0x15e>
 8013086:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013088:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801308a:	f7ff fefd 	bl	8012e88 <check_fs>
 801308e:	4603      	mov	r3, r0
 8013090:	e000      	b.n	8013094 <find_volume+0x160>
 8013092:	2303      	movs	r3, #3
 8013094:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013098:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801309c:	2b01      	cmp	r3, #1
 801309e:	d905      	bls.n	80130ac <find_volume+0x178>
 80130a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80130a2:	3301      	adds	r3, #1
 80130a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80130a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80130a8:	2b03      	cmp	r3, #3
 80130aa:	d9e2      	bls.n	8013072 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80130ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80130b0:	2b04      	cmp	r3, #4
 80130b2:	d101      	bne.n	80130b8 <find_volume+0x184>
 80130b4:	2301      	movs	r3, #1
 80130b6:	e17e      	b.n	80133b6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80130b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80130bc:	2b01      	cmp	r3, #1
 80130be:	d901      	bls.n	80130c4 <find_volume+0x190>
 80130c0:	230d      	movs	r3, #13
 80130c2:	e178      	b.n	80133b6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80130c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130c6:	3334      	adds	r3, #52	@ 0x34
 80130c8:	330b      	adds	r3, #11
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7fd ff50 	bl	8010f70 <ld_word>
 80130d0:	4603      	mov	r3, r0
 80130d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80130d6:	d001      	beq.n	80130dc <find_volume+0x1a8>
 80130d8:	230d      	movs	r3, #13
 80130da:	e16c      	b.n	80133b6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80130dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130de:	3334      	adds	r3, #52	@ 0x34
 80130e0:	3316      	adds	r3, #22
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7fd ff44 	bl	8010f70 <ld_word>
 80130e8:	4603      	mov	r3, r0
 80130ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80130ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d106      	bne.n	8013100 <find_volume+0x1cc>
 80130f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130f4:	3334      	adds	r3, #52	@ 0x34
 80130f6:	3324      	adds	r3, #36	@ 0x24
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7fd ff52 	bl	8010fa2 <ld_dword>
 80130fe:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8013100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013102:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013104:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013108:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801310c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801310e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013112:	789b      	ldrb	r3, [r3, #2]
 8013114:	2b01      	cmp	r3, #1
 8013116:	d005      	beq.n	8013124 <find_volume+0x1f0>
 8013118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801311a:	789b      	ldrb	r3, [r3, #2]
 801311c:	2b02      	cmp	r3, #2
 801311e:	d001      	beq.n	8013124 <find_volume+0x1f0>
 8013120:	230d      	movs	r3, #13
 8013122:	e148      	b.n	80133b6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013126:	789b      	ldrb	r3, [r3, #2]
 8013128:	461a      	mov	r2, r3
 801312a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801312c:	fb02 f303 	mul.w	r3, r2, r3
 8013130:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013138:	461a      	mov	r2, r3
 801313a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801313c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801313e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013140:	895b      	ldrh	r3, [r3, #10]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d008      	beq.n	8013158 <find_volume+0x224>
 8013146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013148:	895b      	ldrh	r3, [r3, #10]
 801314a:	461a      	mov	r2, r3
 801314c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801314e:	895b      	ldrh	r3, [r3, #10]
 8013150:	3b01      	subs	r3, #1
 8013152:	4013      	ands	r3, r2
 8013154:	2b00      	cmp	r3, #0
 8013156:	d001      	beq.n	801315c <find_volume+0x228>
 8013158:	230d      	movs	r3, #13
 801315a:	e12c      	b.n	80133b6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801315c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801315e:	3334      	adds	r3, #52	@ 0x34
 8013160:	3311      	adds	r3, #17
 8013162:	4618      	mov	r0, r3
 8013164:	f7fd ff04 	bl	8010f70 <ld_word>
 8013168:	4603      	mov	r3, r0
 801316a:	461a      	mov	r2, r3
 801316c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801316e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013172:	891b      	ldrh	r3, [r3, #8]
 8013174:	f003 030f 	and.w	r3, r3, #15
 8013178:	b29b      	uxth	r3, r3
 801317a:	2b00      	cmp	r3, #0
 801317c:	d001      	beq.n	8013182 <find_volume+0x24e>
 801317e:	230d      	movs	r3, #13
 8013180:	e119      	b.n	80133b6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013184:	3334      	adds	r3, #52	@ 0x34
 8013186:	3313      	adds	r3, #19
 8013188:	4618      	mov	r0, r3
 801318a:	f7fd fef1 	bl	8010f70 <ld_word>
 801318e:	4603      	mov	r3, r0
 8013190:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013194:	2b00      	cmp	r3, #0
 8013196:	d106      	bne.n	80131a6 <find_volume+0x272>
 8013198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801319a:	3334      	adds	r3, #52	@ 0x34
 801319c:	3320      	adds	r3, #32
 801319e:	4618      	mov	r0, r3
 80131a0:	f7fd feff 	bl	8010fa2 <ld_dword>
 80131a4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80131a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131a8:	3334      	adds	r3, #52	@ 0x34
 80131aa:	330e      	adds	r3, #14
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7fd fedf 	bl	8010f70 <ld_word>
 80131b2:	4603      	mov	r3, r0
 80131b4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80131b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d101      	bne.n	80131c0 <find_volume+0x28c>
 80131bc:	230d      	movs	r3, #13
 80131be:	e0fa      	b.n	80133b6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80131c0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80131c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80131c4:	4413      	add	r3, r2
 80131c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80131c8:	8912      	ldrh	r2, [r2, #8]
 80131ca:	0912      	lsrs	r2, r2, #4
 80131cc:	b292      	uxth	r2, r2
 80131ce:	4413      	add	r3, r2
 80131d0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80131d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80131d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131d6:	429a      	cmp	r2, r3
 80131d8:	d204      	bcs.n	80131e4 <find_volume+0x2b0>
 80131da:	230d      	movs	r3, #13
 80131dc:	e0eb      	b.n	80133b6 <find_volume+0x482>
 80131de:	bf00      	nop
 80131e0:	20015264 	.word	0x20015264
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80131e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80131e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131e8:	1ad3      	subs	r3, r2, r3
 80131ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80131ec:	8952      	ldrh	r2, [r2, #10]
 80131ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80131f2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80131f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d101      	bne.n	80131fe <find_volume+0x2ca>
 80131fa:	230d      	movs	r3, #13
 80131fc:	e0db      	b.n	80133b6 <find_volume+0x482>
		fmt = FS_FAT32;
 80131fe:	2303      	movs	r3, #3
 8013200:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013206:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801320a:	4293      	cmp	r3, r2
 801320c:	d802      	bhi.n	8013214 <find_volume+0x2e0>
 801320e:	2302      	movs	r3, #2
 8013210:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013216:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801321a:	4293      	cmp	r3, r2
 801321c:	d802      	bhi.n	8013224 <find_volume+0x2f0>
 801321e:	2301      	movs	r3, #1
 8013220:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013226:	1c9a      	adds	r2, r3, #2
 8013228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801322a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801322c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801322e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013230:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013232:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013234:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013236:	441a      	add	r2, r3
 8013238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801323a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801323c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801323e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013240:	441a      	add	r2, r3
 8013242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013244:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8013246:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801324a:	2b03      	cmp	r3, #3
 801324c:	d11e      	bne.n	801328c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801324e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013250:	3334      	adds	r3, #52	@ 0x34
 8013252:	332a      	adds	r3, #42	@ 0x2a
 8013254:	4618      	mov	r0, r3
 8013256:	f7fd fe8b 	bl	8010f70 <ld_word>
 801325a:	4603      	mov	r3, r0
 801325c:	2b00      	cmp	r3, #0
 801325e:	d001      	beq.n	8013264 <find_volume+0x330>
 8013260:	230d      	movs	r3, #13
 8013262:	e0a8      	b.n	80133b6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013266:	891b      	ldrh	r3, [r3, #8]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d001      	beq.n	8013270 <find_volume+0x33c>
 801326c:	230d      	movs	r3, #13
 801326e:	e0a2      	b.n	80133b6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013272:	3334      	adds	r3, #52	@ 0x34
 8013274:	332c      	adds	r3, #44	@ 0x2c
 8013276:	4618      	mov	r0, r3
 8013278:	f7fd fe93 	bl	8010fa2 <ld_dword>
 801327c:	4602      	mov	r2, r0
 801327e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013280:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013284:	699b      	ldr	r3, [r3, #24]
 8013286:	009b      	lsls	r3, r3, #2
 8013288:	647b      	str	r3, [r7, #68]	@ 0x44
 801328a:	e01f      	b.n	80132cc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801328c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801328e:	891b      	ldrh	r3, [r3, #8]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d101      	bne.n	8013298 <find_volume+0x364>
 8013294:	230d      	movs	r3, #13
 8013296:	e08e      	b.n	80133b6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801329a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801329c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801329e:	441a      	add	r2, r3
 80132a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132a2:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80132a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80132a8:	2b02      	cmp	r3, #2
 80132aa:	d103      	bne.n	80132b4 <find_volume+0x380>
 80132ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132ae:	699b      	ldr	r3, [r3, #24]
 80132b0:	005b      	lsls	r3, r3, #1
 80132b2:	e00a      	b.n	80132ca <find_volume+0x396>
 80132b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132b6:	699a      	ldr	r2, [r3, #24]
 80132b8:	4613      	mov	r3, r2
 80132ba:	005b      	lsls	r3, r3, #1
 80132bc:	4413      	add	r3, r2
 80132be:	085a      	lsrs	r2, r3, #1
 80132c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132c2:	699b      	ldr	r3, [r3, #24]
 80132c4:	f003 0301 	and.w	r3, r3, #1
 80132c8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80132ca:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80132cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132ce:	69da      	ldr	r2, [r3, #28]
 80132d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80132d2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80132d6:	0a5b      	lsrs	r3, r3, #9
 80132d8:	429a      	cmp	r2, r3
 80132da:	d201      	bcs.n	80132e0 <find_volume+0x3ac>
 80132dc:	230d      	movs	r3, #13
 80132de:	e06a      	b.n	80133b6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80132e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132e2:	f04f 32ff 	mov.w	r2, #4294967295
 80132e6:	615a      	str	r2, [r3, #20]
 80132e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132ea:	695a      	ldr	r2, [r3, #20]
 80132ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132ee:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80132f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132f2:	2280      	movs	r2, #128	@ 0x80
 80132f4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80132f6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80132fa:	2b03      	cmp	r3, #3
 80132fc:	d149      	bne.n	8013392 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80132fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013300:	3334      	adds	r3, #52	@ 0x34
 8013302:	3330      	adds	r3, #48	@ 0x30
 8013304:	4618      	mov	r0, r3
 8013306:	f7fd fe33 	bl	8010f70 <ld_word>
 801330a:	4603      	mov	r3, r0
 801330c:	2b01      	cmp	r3, #1
 801330e:	d140      	bne.n	8013392 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013312:	3301      	adds	r3, #1
 8013314:	4619      	mov	r1, r3
 8013316:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013318:	f7fe f8dc 	bl	80114d4 <move_window>
 801331c:	4603      	mov	r3, r0
 801331e:	2b00      	cmp	r3, #0
 8013320:	d137      	bne.n	8013392 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8013322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013324:	2200      	movs	r2, #0
 8013326:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801332a:	3334      	adds	r3, #52	@ 0x34
 801332c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013330:	4618      	mov	r0, r3
 8013332:	f7fd fe1d 	bl	8010f70 <ld_word>
 8013336:	4603      	mov	r3, r0
 8013338:	461a      	mov	r2, r3
 801333a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801333e:	429a      	cmp	r2, r3
 8013340:	d127      	bne.n	8013392 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013344:	3334      	adds	r3, #52	@ 0x34
 8013346:	4618      	mov	r0, r3
 8013348:	f7fd fe2b 	bl	8010fa2 <ld_dword>
 801334c:	4603      	mov	r3, r0
 801334e:	4a1c      	ldr	r2, [pc, #112]	@ (80133c0 <find_volume+0x48c>)
 8013350:	4293      	cmp	r3, r2
 8013352:	d11e      	bne.n	8013392 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013356:	3334      	adds	r3, #52	@ 0x34
 8013358:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801335c:	4618      	mov	r0, r3
 801335e:	f7fd fe20 	bl	8010fa2 <ld_dword>
 8013362:	4603      	mov	r3, r0
 8013364:	4a17      	ldr	r2, [pc, #92]	@ (80133c4 <find_volume+0x490>)
 8013366:	4293      	cmp	r3, r2
 8013368:	d113      	bne.n	8013392 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801336a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801336c:	3334      	adds	r3, #52	@ 0x34
 801336e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013372:	4618      	mov	r0, r3
 8013374:	f7fd fe15 	bl	8010fa2 <ld_dword>
 8013378:	4602      	mov	r2, r0
 801337a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801337c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801337e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013380:	3334      	adds	r3, #52	@ 0x34
 8013382:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013386:	4618      	mov	r0, r3
 8013388:	f7fd fe0b 	bl	8010fa2 <ld_dword>
 801338c:	4602      	mov	r2, r0
 801338e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013390:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013394:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8013398:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801339a:	4b0b      	ldr	r3, [pc, #44]	@ (80133c8 <find_volume+0x494>)
 801339c:	881b      	ldrh	r3, [r3, #0]
 801339e:	3301      	adds	r3, #1
 80133a0:	b29a      	uxth	r2, r3
 80133a2:	4b09      	ldr	r3, [pc, #36]	@ (80133c8 <find_volume+0x494>)
 80133a4:	801a      	strh	r2, [r3, #0]
 80133a6:	4b08      	ldr	r3, [pc, #32]	@ (80133c8 <find_volume+0x494>)
 80133a8:	881a      	ldrh	r2, [r3, #0]
 80133aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133ac:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80133ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80133b0:	f7fe f828 	bl	8011404 <clear_lock>
#endif
	return FR_OK;
 80133b4:	2300      	movs	r3, #0
}
 80133b6:	4618      	mov	r0, r3
 80133b8:	3758      	adds	r7, #88	@ 0x58
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}
 80133be:	bf00      	nop
 80133c0:	41615252 	.word	0x41615252
 80133c4:	61417272 	.word	0x61417272
 80133c8:	20015268 	.word	0x20015268

080133cc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b084      	sub	sp, #16
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	6078      	str	r0, [r7, #4]
 80133d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80133d6:	2309      	movs	r3, #9
 80133d8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d01c      	beq.n	801341a <validate+0x4e>
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d018      	beq.n	801341a <validate+0x4e>
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	781b      	ldrb	r3, [r3, #0]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d013      	beq.n	801341a <validate+0x4e>
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	889a      	ldrh	r2, [r3, #4]
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	88db      	ldrh	r3, [r3, #6]
 80133fc:	429a      	cmp	r2, r3
 80133fe:	d10c      	bne.n	801341a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	785b      	ldrb	r3, [r3, #1]
 8013406:	4618      	mov	r0, r3
 8013408:	f7fd fd12 	bl	8010e30 <disk_status>
 801340c:	4603      	mov	r3, r0
 801340e:	f003 0301 	and.w	r3, r3, #1
 8013412:	2b00      	cmp	r3, #0
 8013414:	d101      	bne.n	801341a <validate+0x4e>
			res = FR_OK;
 8013416:	2300      	movs	r3, #0
 8013418:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801341a:	7bfb      	ldrb	r3, [r7, #15]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d102      	bne.n	8013426 <validate+0x5a>
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	e000      	b.n	8013428 <validate+0x5c>
 8013426:	2300      	movs	r3, #0
 8013428:	683a      	ldr	r2, [r7, #0]
 801342a:	6013      	str	r3, [r2, #0]
	return res;
 801342c:	7bfb      	ldrb	r3, [r7, #15]
}
 801342e:	4618      	mov	r0, r3
 8013430:	3710      	adds	r7, #16
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
	...

08013438 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b088      	sub	sp, #32
 801343c:	af00      	add	r7, sp, #0
 801343e:	60f8      	str	r0, [r7, #12]
 8013440:	60b9      	str	r1, [r7, #8]
 8013442:	4613      	mov	r3, r2
 8013444:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801344a:	f107 0310 	add.w	r3, r7, #16
 801344e:	4618      	mov	r0, r3
 8013450:	f7ff fcd5 	bl	8012dfe <get_ldnumber>
 8013454:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013456:	69fb      	ldr	r3, [r7, #28]
 8013458:	2b00      	cmp	r3, #0
 801345a:	da01      	bge.n	8013460 <f_mount+0x28>
 801345c:	230b      	movs	r3, #11
 801345e:	e02b      	b.n	80134b8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013460:	4a17      	ldr	r2, [pc, #92]	@ (80134c0 <f_mount+0x88>)
 8013462:	69fb      	ldr	r3, [r7, #28]
 8013464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013468:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801346a:	69bb      	ldr	r3, [r7, #24]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d005      	beq.n	801347c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013470:	69b8      	ldr	r0, [r7, #24]
 8013472:	f7fd ffc7 	bl	8011404 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013476:	69bb      	ldr	r3, [r7, #24]
 8013478:	2200      	movs	r2, #0
 801347a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d002      	beq.n	8013488 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	2200      	movs	r2, #0
 8013486:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013488:	68fa      	ldr	r2, [r7, #12]
 801348a:	490d      	ldr	r1, [pc, #52]	@ (80134c0 <f_mount+0x88>)
 801348c:	69fb      	ldr	r3, [r7, #28]
 801348e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d002      	beq.n	801349e <f_mount+0x66>
 8013498:	79fb      	ldrb	r3, [r7, #7]
 801349a:	2b01      	cmp	r3, #1
 801349c:	d001      	beq.n	80134a2 <f_mount+0x6a>
 801349e:	2300      	movs	r3, #0
 80134a0:	e00a      	b.n	80134b8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80134a2:	f107 010c 	add.w	r1, r7, #12
 80134a6:	f107 0308 	add.w	r3, r7, #8
 80134aa:	2200      	movs	r2, #0
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7ff fd41 	bl	8012f34 <find_volume>
 80134b2:	4603      	mov	r3, r0
 80134b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80134b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80134b8:	4618      	mov	r0, r3
 80134ba:	3720      	adds	r7, #32
 80134bc:	46bd      	mov	sp, r7
 80134be:	bd80      	pop	{r7, pc}
 80134c0:	20015264 	.word	0x20015264

080134c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b09a      	sub	sp, #104	@ 0x68
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	60f8      	str	r0, [r7, #12]
 80134cc:	60b9      	str	r1, [r7, #8]
 80134ce:	4613      	mov	r3, r2
 80134d0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d101      	bne.n	80134dc <f_open+0x18>
 80134d8:	2309      	movs	r3, #9
 80134da:	e1b9      	b.n	8013850 <f_open+0x38c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80134dc:	79fb      	ldrb	r3, [r7, #7]
 80134de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80134e2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80134e4:	79fa      	ldrb	r2, [r7, #7]
 80134e6:	f107 0110 	add.w	r1, r7, #16
 80134ea:	f107 0308 	add.w	r3, r7, #8
 80134ee:	4618      	mov	r0, r3
 80134f0:	f7ff fd20 	bl	8012f34 <find_volume>
 80134f4:	4603      	mov	r3, r0
 80134f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80134fa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80134fe:	2b00      	cmp	r3, #0
 8013500:	f040 819d 	bne.w	801383e <f_open+0x37a>
		dj.obj.fs = fs;
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8013508:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801350c:	f001 f898 	bl	8014640 <ff_memalloc>
 8013510:	65b8      	str	r0, [r7, #88]	@ 0x58
 8013512:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013514:	2b00      	cmp	r3, #0
 8013516:	d101      	bne.n	801351c <f_open+0x58>
 8013518:	2311      	movs	r3, #17
 801351a:	e199      	b.n	8013850 <f_open+0x38c>
 801351c:	693b      	ldr	r3, [r7, #16]
 801351e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013520:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8013522:	68ba      	ldr	r2, [r7, #8]
 8013524:	f107 0314 	add.w	r3, r7, #20
 8013528:	4611      	mov	r1, r2
 801352a:	4618      	mov	r0, r3
 801352c:	f7ff fbf6 	bl	8012d1c <follow_path>
 8013530:	4603      	mov	r3, r0
 8013532:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013536:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801353a:	2b00      	cmp	r3, #0
 801353c:	d118      	bne.n	8013570 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801353e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013542:	b25b      	sxtb	r3, r3
 8013544:	2b00      	cmp	r3, #0
 8013546:	da03      	bge.n	8013550 <f_open+0x8c>
				res = FR_INVALID_NAME;
 8013548:	2306      	movs	r3, #6
 801354a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801354e:	e00f      	b.n	8013570 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013550:	79fb      	ldrb	r3, [r7, #7]
 8013552:	2b01      	cmp	r3, #1
 8013554:	bf8c      	ite	hi
 8013556:	2301      	movhi	r3, #1
 8013558:	2300      	movls	r3, #0
 801355a:	b2db      	uxtb	r3, r3
 801355c:	461a      	mov	r2, r3
 801355e:	f107 0314 	add.w	r3, r7, #20
 8013562:	4611      	mov	r1, r2
 8013564:	4618      	mov	r0, r3
 8013566:	f7fd fe05 	bl	8011174 <chk_lock>
 801356a:	4603      	mov	r3, r0
 801356c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013570:	79fb      	ldrb	r3, [r7, #7]
 8013572:	f003 031c 	and.w	r3, r3, #28
 8013576:	2b00      	cmp	r3, #0
 8013578:	d07f      	beq.n	801367a <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 801357a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801357e:	2b00      	cmp	r3, #0
 8013580:	d017      	beq.n	80135b2 <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013582:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013586:	2b04      	cmp	r3, #4
 8013588:	d10e      	bne.n	80135a8 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801358a:	f7fd fe4f 	bl	801122c <enq_lock>
 801358e:	4603      	mov	r3, r0
 8013590:	2b00      	cmp	r3, #0
 8013592:	d006      	beq.n	80135a2 <f_open+0xde>
 8013594:	f107 0314 	add.w	r3, r7, #20
 8013598:	4618      	mov	r0, r3
 801359a:	f7ff f831 	bl	8012600 <dir_register>
 801359e:	4603      	mov	r3, r0
 80135a0:	e000      	b.n	80135a4 <f_open+0xe0>
 80135a2:	2312      	movs	r3, #18
 80135a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80135a8:	79fb      	ldrb	r3, [r7, #7]
 80135aa:	f043 0308 	orr.w	r3, r3, #8
 80135ae:	71fb      	strb	r3, [r7, #7]
 80135b0:	e010      	b.n	80135d4 <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80135b2:	7ebb      	ldrb	r3, [r7, #26]
 80135b4:	f003 0311 	and.w	r3, r3, #17
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d003      	beq.n	80135c4 <f_open+0x100>
					res = FR_DENIED;
 80135bc:	2307      	movs	r3, #7
 80135be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80135c2:	e007      	b.n	80135d4 <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80135c4:	79fb      	ldrb	r3, [r7, #7]
 80135c6:	f003 0304 	and.w	r3, r3, #4
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d002      	beq.n	80135d4 <f_open+0x110>
 80135ce:	2308      	movs	r3, #8
 80135d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80135d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d168      	bne.n	80136ae <f_open+0x1ea>
 80135dc:	79fb      	ldrb	r3, [r7, #7]
 80135de:	f003 0308 	and.w	r3, r3, #8
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d063      	beq.n	80136ae <f_open+0x1ea>
				dw = GET_FATTIME();
 80135e6:	f7fd f98b 	bl	8010900 <get_fattime>
 80135ea:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80135ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135ee:	330e      	adds	r3, #14
 80135f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80135f2:	4618      	mov	r0, r3
 80135f4:	f7fd fd13 	bl	801101e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80135f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135fa:	3316      	adds	r3, #22
 80135fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80135fe:	4618      	mov	r0, r3
 8013600:	f7fd fd0d 	bl	801101e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013606:	330b      	adds	r3, #11
 8013608:	2220      	movs	r2, #32
 801360a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801360c:	693b      	ldr	r3, [r7, #16]
 801360e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013610:	4611      	mov	r1, r2
 8013612:	4618      	mov	r0, r3
 8013614:	f7fe fc62 	bl	8011edc <ld_clust>
 8013618:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801361a:	693b      	ldr	r3, [r7, #16]
 801361c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801361e:	2200      	movs	r2, #0
 8013620:	4618      	mov	r0, r3
 8013622:	f7fe fc7a 	bl	8011f1a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013628:	331c      	adds	r3, #28
 801362a:	2100      	movs	r1, #0
 801362c:	4618      	mov	r0, r3
 801362e:	f7fd fcf6 	bl	801101e <st_dword>
					fs->wflag = 1;
 8013632:	693b      	ldr	r3, [r7, #16]
 8013634:	2201      	movs	r2, #1
 8013636:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801363a:	2b00      	cmp	r3, #0
 801363c:	d037      	beq.n	80136ae <f_open+0x1ea>
						dw = fs->winsect;
 801363e:	693b      	ldr	r3, [r7, #16]
 8013640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013642:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8013644:	f107 0314 	add.w	r3, r7, #20
 8013648:	2200      	movs	r2, #0
 801364a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801364c:	4618      	mov	r0, r3
 801364e:	f7fe f98d 	bl	801196c <remove_chain>
 8013652:	4603      	mov	r3, r0
 8013654:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8013658:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801365c:	2b00      	cmp	r3, #0
 801365e:	d126      	bne.n	80136ae <f_open+0x1ea>
							res = move_window(fs, dw);
 8013660:	693b      	ldr	r3, [r7, #16]
 8013662:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013664:	4618      	mov	r0, r3
 8013666:	f7fd ff35 	bl	80114d4 <move_window>
 801366a:	4603      	mov	r3, r0
 801366c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013670:	693b      	ldr	r3, [r7, #16]
 8013672:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013674:	3a01      	subs	r2, #1
 8013676:	611a      	str	r2, [r3, #16]
 8013678:	e019      	b.n	80136ae <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801367a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801367e:	2b00      	cmp	r3, #0
 8013680:	d115      	bne.n	80136ae <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013682:	7ebb      	ldrb	r3, [r7, #26]
 8013684:	f003 0310 	and.w	r3, r3, #16
 8013688:	2b00      	cmp	r3, #0
 801368a:	d003      	beq.n	8013694 <f_open+0x1d0>
					res = FR_NO_FILE;
 801368c:	2304      	movs	r3, #4
 801368e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013692:	e00c      	b.n	80136ae <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013694:	79fb      	ldrb	r3, [r7, #7]
 8013696:	f003 0302 	and.w	r3, r3, #2
 801369a:	2b00      	cmp	r3, #0
 801369c:	d007      	beq.n	80136ae <f_open+0x1ea>
 801369e:	7ebb      	ldrb	r3, [r7, #26]
 80136a0:	f003 0301 	and.w	r3, r3, #1
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d002      	beq.n	80136ae <f_open+0x1ea>
						res = FR_DENIED;
 80136a8:	2307      	movs	r3, #7
 80136aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80136ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d126      	bne.n	8013704 <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80136b6:	79fb      	ldrb	r3, [r7, #7]
 80136b8:	f003 0308 	and.w	r3, r3, #8
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d003      	beq.n	80136c8 <f_open+0x204>
				mode |= FA_MODIFIED;
 80136c0:	79fb      	ldrb	r3, [r7, #7]
 80136c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80136c6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80136c8:	693b      	ldr	r3, [r7, #16]
 80136ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80136d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80136d6:	79fb      	ldrb	r3, [r7, #7]
 80136d8:	2b01      	cmp	r3, #1
 80136da:	bf8c      	ite	hi
 80136dc:	2301      	movhi	r3, #1
 80136de:	2300      	movls	r3, #0
 80136e0:	b2db      	uxtb	r3, r3
 80136e2:	461a      	mov	r2, r3
 80136e4:	f107 0314 	add.w	r3, r7, #20
 80136e8:	4611      	mov	r1, r2
 80136ea:	4618      	mov	r0, r3
 80136ec:	f7fd fdc0 	bl	8011270 <inc_lock>
 80136f0:	4602      	mov	r2, r0
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	691b      	ldr	r3, [r3, #16]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d102      	bne.n	8013704 <f_open+0x240>
 80136fe:	2302      	movs	r3, #2
 8013700:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013704:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013708:	2b00      	cmp	r3, #0
 801370a:	f040 8095 	bne.w	8013838 <f_open+0x374>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801370e:	693b      	ldr	r3, [r7, #16]
 8013710:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013712:	4611      	mov	r1, r2
 8013714:	4618      	mov	r0, r3
 8013716:	f7fe fbe1 	bl	8011edc <ld_clust>
 801371a:	4602      	mov	r2, r0
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013722:	331c      	adds	r3, #28
 8013724:	4618      	mov	r0, r3
 8013726:	f7fd fc3c 	bl	8010fa2 <ld_dword>
 801372a:	4602      	mov	r2, r0
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	2200      	movs	r2, #0
 8013734:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013736:	693a      	ldr	r2, [r7, #16]
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	88da      	ldrh	r2, [r3, #6]
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	79fa      	ldrb	r2, [r7, #7]
 8013748:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	2200      	movs	r2, #0
 801374e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	2200      	movs	r2, #0
 8013754:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	2200      	movs	r2, #0
 801375a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	3330      	adds	r3, #48	@ 0x30
 8013760:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013764:	2100      	movs	r1, #0
 8013766:	4618      	mov	r0, r3
 8013768:	f7fd fca6 	bl	80110b8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801376c:	79fb      	ldrb	r3, [r7, #7]
 801376e:	f003 0320 	and.w	r3, r3, #32
 8013772:	2b00      	cmp	r3, #0
 8013774:	d060      	beq.n	8013838 <f_open+0x374>
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	68db      	ldr	r3, [r3, #12]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d05c      	beq.n	8013838 <f_open+0x374>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	68da      	ldr	r2, [r3, #12]
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013786:	693b      	ldr	r3, [r7, #16]
 8013788:	895b      	ldrh	r3, [r3, #10]
 801378a:	025b      	lsls	r3, r3, #9
 801378c:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	689b      	ldr	r3, [r3, #8]
 8013792:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	68db      	ldr	r3, [r3, #12]
 8013798:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801379a:	e016      	b.n	80137ca <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80137a0:	4618      	mov	r0, r3
 80137a2:	f7fd ff52 	bl	801164a <get_fat>
 80137a6:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80137a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80137aa:	2b01      	cmp	r3, #1
 80137ac:	d802      	bhi.n	80137b4 <f_open+0x2f0>
 80137ae:	2302      	movs	r3, #2
 80137b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80137b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80137b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137ba:	d102      	bne.n	80137c2 <f_open+0x2fe>
 80137bc:	2301      	movs	r3, #1
 80137be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80137c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80137c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137c6:	1ad3      	subs	r3, r2, r3
 80137c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80137ca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d103      	bne.n	80137da <f_open+0x316>
 80137d2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80137d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137d6:	429a      	cmp	r2, r3
 80137d8:	d8e0      	bhi.n	801379c <f_open+0x2d8>
				}
				fp->clust = clst;
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80137de:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80137e0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d127      	bne.n	8013838 <f_open+0x374>
 80137e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80137ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d022      	beq.n	8013838 <f_open+0x374>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80137f2:	693b      	ldr	r3, [r7, #16]
 80137f4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80137f6:	4618      	mov	r0, r3
 80137f8:	f7fd ff08 	bl	801160c <clust2sect>
 80137fc:	64b8      	str	r0, [r7, #72]	@ 0x48
 80137fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013800:	2b00      	cmp	r3, #0
 8013802:	d103      	bne.n	801380c <f_open+0x348>
						res = FR_INT_ERR;
 8013804:	2302      	movs	r3, #2
 8013806:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801380a:	e015      	b.n	8013838 <f_open+0x374>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801380c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801380e:	0a5a      	lsrs	r2, r3, #9
 8013810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013812:	441a      	add	r2, r3
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013818:	693b      	ldr	r3, [r7, #16]
 801381a:	7858      	ldrb	r0, [r3, #1]
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	6a1a      	ldr	r2, [r3, #32]
 8013826:	2301      	movs	r3, #1
 8013828:	f7fd fb44 	bl	8010eb4 <disk_read>
 801382c:	4603      	mov	r3, r0
 801382e:	2b00      	cmp	r3, #0
 8013830:	d002      	beq.n	8013838 <f_open+0x374>
 8013832:	2301      	movs	r3, #1
 8013834:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8013838:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801383a:	f000 ff0d 	bl	8014658 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801383e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013842:	2b00      	cmp	r3, #0
 8013844:	d002      	beq.n	801384c <f_open+0x388>
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	2200      	movs	r2, #0
 801384a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801384c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8013850:	4618      	mov	r0, r3
 8013852:	3768      	adds	r7, #104	@ 0x68
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}

08013858 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b08c      	sub	sp, #48	@ 0x30
 801385c:	af00      	add	r7, sp, #0
 801385e:	60f8      	str	r0, [r7, #12]
 8013860:	60b9      	str	r1, [r7, #8]
 8013862:	607a      	str	r2, [r7, #4]
 8013864:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013866:	68bb      	ldr	r3, [r7, #8]
 8013868:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	2200      	movs	r2, #0
 801386e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	f107 0210 	add.w	r2, r7, #16
 8013876:	4611      	mov	r1, r2
 8013878:	4618      	mov	r0, r3
 801387a:	f7ff fda7 	bl	80133cc <validate>
 801387e:	4603      	mov	r3, r0
 8013880:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013884:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013888:	2b00      	cmp	r3, #0
 801388a:	d107      	bne.n	801389c <f_write+0x44>
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	7d5b      	ldrb	r3, [r3, #21]
 8013890:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013894:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013898:	2b00      	cmp	r3, #0
 801389a:	d002      	beq.n	80138a2 <f_write+0x4a>
 801389c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80138a0:	e14b      	b.n	8013b3a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	7d1b      	ldrb	r3, [r3, #20]
 80138a6:	f003 0302 	and.w	r3, r3, #2
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d101      	bne.n	80138b2 <f_write+0x5a>
 80138ae:	2307      	movs	r3, #7
 80138b0:	e143      	b.n	8013b3a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	699a      	ldr	r2, [r3, #24]
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	441a      	add	r2, r3
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	699b      	ldr	r3, [r3, #24]
 80138be:	429a      	cmp	r2, r3
 80138c0:	f080 812d 	bcs.w	8013b1e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	699b      	ldr	r3, [r3, #24]
 80138c8:	43db      	mvns	r3, r3
 80138ca:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80138cc:	e127      	b.n	8013b1e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	699b      	ldr	r3, [r3, #24]
 80138d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	f040 80e3 	bne.w	8013aa2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	699b      	ldr	r3, [r3, #24]
 80138e0:	0a5b      	lsrs	r3, r3, #9
 80138e2:	693a      	ldr	r2, [r7, #16]
 80138e4:	8952      	ldrh	r2, [r2, #10]
 80138e6:	3a01      	subs	r2, #1
 80138e8:	4013      	ands	r3, r2
 80138ea:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80138ec:	69bb      	ldr	r3, [r7, #24]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d143      	bne.n	801397a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	699b      	ldr	r3, [r3, #24]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d10c      	bne.n	8013914 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	689b      	ldr	r3, [r3, #8]
 80138fe:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013902:	2b00      	cmp	r3, #0
 8013904:	d11a      	bne.n	801393c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	2100      	movs	r1, #0
 801390a:	4618      	mov	r0, r3
 801390c:	f7fe f893 	bl	8011a36 <create_chain>
 8013910:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013912:	e013      	b.n	801393c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013918:	2b00      	cmp	r3, #0
 801391a:	d007      	beq.n	801392c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	699b      	ldr	r3, [r3, #24]
 8013920:	4619      	mov	r1, r3
 8013922:	68f8      	ldr	r0, [r7, #12]
 8013924:	f7fe f91f 	bl	8011b66 <clmt_clust>
 8013928:	62b8      	str	r0, [r7, #40]	@ 0x28
 801392a:	e007      	b.n	801393c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801392c:	68fa      	ldr	r2, [r7, #12]
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	69db      	ldr	r3, [r3, #28]
 8013932:	4619      	mov	r1, r3
 8013934:	4610      	mov	r0, r2
 8013936:	f7fe f87e 	bl	8011a36 <create_chain>
 801393a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801393c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801393e:	2b00      	cmp	r3, #0
 8013940:	f000 80f2 	beq.w	8013b28 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013946:	2b01      	cmp	r3, #1
 8013948:	d104      	bne.n	8013954 <f_write+0xfc>
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	2202      	movs	r2, #2
 801394e:	755a      	strb	r2, [r3, #21]
 8013950:	2302      	movs	r3, #2
 8013952:	e0f2      	b.n	8013b3a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013956:	f1b3 3fff 	cmp.w	r3, #4294967295
 801395a:	d104      	bne.n	8013966 <f_write+0x10e>
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	2201      	movs	r2, #1
 8013960:	755a      	strb	r2, [r3, #21]
 8013962:	2301      	movs	r3, #1
 8013964:	e0e9      	b.n	8013b3a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801396a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	689b      	ldr	r3, [r3, #8]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d102      	bne.n	801397a <f_write+0x122>
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013978:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	7d1b      	ldrb	r3, [r3, #20]
 801397e:	b25b      	sxtb	r3, r3
 8013980:	2b00      	cmp	r3, #0
 8013982:	da18      	bge.n	80139b6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013984:	693b      	ldr	r3, [r7, #16]
 8013986:	7858      	ldrb	r0, [r3, #1]
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	6a1a      	ldr	r2, [r3, #32]
 8013992:	2301      	movs	r3, #1
 8013994:	f7fd faae 	bl	8010ef4 <disk_write>
 8013998:	4603      	mov	r3, r0
 801399a:	2b00      	cmp	r3, #0
 801399c:	d004      	beq.n	80139a8 <f_write+0x150>
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	2201      	movs	r2, #1
 80139a2:	755a      	strb	r2, [r3, #21]
 80139a4:	2301      	movs	r3, #1
 80139a6:	e0c8      	b.n	8013b3a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	7d1b      	ldrb	r3, [r3, #20]
 80139ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80139b0:	b2da      	uxtb	r2, r3
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80139b6:	693a      	ldr	r2, [r7, #16]
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	69db      	ldr	r3, [r3, #28]
 80139bc:	4619      	mov	r1, r3
 80139be:	4610      	mov	r0, r2
 80139c0:	f7fd fe24 	bl	801160c <clust2sect>
 80139c4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d104      	bne.n	80139d6 <f_write+0x17e>
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	2202      	movs	r2, #2
 80139d0:	755a      	strb	r2, [r3, #21]
 80139d2:	2302      	movs	r3, #2
 80139d4:	e0b1      	b.n	8013b3a <f_write+0x2e2>
			sect += csect;
 80139d6:	697a      	ldr	r2, [r7, #20]
 80139d8:	69bb      	ldr	r3, [r7, #24]
 80139da:	4413      	add	r3, r2
 80139dc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	0a5b      	lsrs	r3, r3, #9
 80139e2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80139e4:	6a3b      	ldr	r3, [r7, #32]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d03c      	beq.n	8013a64 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80139ea:	69ba      	ldr	r2, [r7, #24]
 80139ec:	6a3b      	ldr	r3, [r7, #32]
 80139ee:	4413      	add	r3, r2
 80139f0:	693a      	ldr	r2, [r7, #16]
 80139f2:	8952      	ldrh	r2, [r2, #10]
 80139f4:	4293      	cmp	r3, r2
 80139f6:	d905      	bls.n	8013a04 <f_write+0x1ac>
					cc = fs->csize - csect;
 80139f8:	693b      	ldr	r3, [r7, #16]
 80139fa:	895b      	ldrh	r3, [r3, #10]
 80139fc:	461a      	mov	r2, r3
 80139fe:	69bb      	ldr	r3, [r7, #24]
 8013a00:	1ad3      	subs	r3, r2, r3
 8013a02:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a04:	693b      	ldr	r3, [r7, #16]
 8013a06:	7858      	ldrb	r0, [r3, #1]
 8013a08:	6a3b      	ldr	r3, [r7, #32]
 8013a0a:	697a      	ldr	r2, [r7, #20]
 8013a0c:	69f9      	ldr	r1, [r7, #28]
 8013a0e:	f7fd fa71 	bl	8010ef4 <disk_write>
 8013a12:	4603      	mov	r3, r0
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d004      	beq.n	8013a22 <f_write+0x1ca>
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	2201      	movs	r2, #1
 8013a1c:	755a      	strb	r2, [r3, #21]
 8013a1e:	2301      	movs	r3, #1
 8013a20:	e08b      	b.n	8013b3a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	6a1a      	ldr	r2, [r3, #32]
 8013a26:	697b      	ldr	r3, [r7, #20]
 8013a28:	1ad3      	subs	r3, r2, r3
 8013a2a:	6a3a      	ldr	r2, [r7, #32]
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	d915      	bls.n	8013a5c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	6a1a      	ldr	r2, [r3, #32]
 8013a3a:	697b      	ldr	r3, [r7, #20]
 8013a3c:	1ad3      	subs	r3, r2, r3
 8013a3e:	025b      	lsls	r3, r3, #9
 8013a40:	69fa      	ldr	r2, [r7, #28]
 8013a42:	4413      	add	r3, r2
 8013a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a48:	4619      	mov	r1, r3
 8013a4a:	f7fd fb14 	bl	8011076 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	7d1b      	ldrb	r3, [r3, #20]
 8013a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013a56:	b2da      	uxtb	r2, r3
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013a5c:	6a3b      	ldr	r3, [r7, #32]
 8013a5e:	025b      	lsls	r3, r3, #9
 8013a60:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8013a62:	e03f      	b.n	8013ae4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	6a1b      	ldr	r3, [r3, #32]
 8013a68:	697a      	ldr	r2, [r7, #20]
 8013a6a:	429a      	cmp	r2, r3
 8013a6c:	d016      	beq.n	8013a9c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	699a      	ldr	r2, [r3, #24]
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013a76:	429a      	cmp	r2, r3
 8013a78:	d210      	bcs.n	8013a9c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013a7a:	693b      	ldr	r3, [r7, #16]
 8013a7c:	7858      	ldrb	r0, [r3, #1]
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013a84:	2301      	movs	r3, #1
 8013a86:	697a      	ldr	r2, [r7, #20]
 8013a88:	f7fd fa14 	bl	8010eb4 <disk_read>
 8013a8c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d004      	beq.n	8013a9c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	2201      	movs	r2, #1
 8013a96:	755a      	strb	r2, [r3, #21]
 8013a98:	2301      	movs	r3, #1
 8013a9a:	e04e      	b.n	8013b3a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	697a      	ldr	r2, [r7, #20]
 8013aa0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	699b      	ldr	r3, [r3, #24]
 8013aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013aaa:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8013aae:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	429a      	cmp	r2, r3
 8013ab6:	d901      	bls.n	8013abc <f_write+0x264>
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	699b      	ldr	r3, [r3, #24]
 8013ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013aca:	4413      	add	r3, r2
 8013acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013ace:	69f9      	ldr	r1, [r7, #28]
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f7fd fad0 	bl	8011076 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	7d1b      	ldrb	r3, [r3, #20]
 8013ada:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013ade:	b2da      	uxtb	r2, r3
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013ae4:	69fa      	ldr	r2, [r7, #28]
 8013ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ae8:	4413      	add	r3, r2
 8013aea:	61fb      	str	r3, [r7, #28]
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	699a      	ldr	r2, [r3, #24]
 8013af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013af2:	441a      	add	r2, r3
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	619a      	str	r2, [r3, #24]
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	68da      	ldr	r2, [r3, #12]
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	699b      	ldr	r3, [r3, #24]
 8013b00:	429a      	cmp	r2, r3
 8013b02:	bf38      	it	cc
 8013b04:	461a      	movcc	r2, r3
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	60da      	str	r2, [r3, #12]
 8013b0a:	683b      	ldr	r3, [r7, #0]
 8013b0c:	681a      	ldr	r2, [r3, #0]
 8013b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b10:	441a      	add	r2, r3
 8013b12:	683b      	ldr	r3, [r7, #0]
 8013b14:	601a      	str	r2, [r3, #0]
 8013b16:	687a      	ldr	r2, [r7, #4]
 8013b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b1a:	1ad3      	subs	r3, r2, r3
 8013b1c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	f47f aed4 	bne.w	80138ce <f_write+0x76>
 8013b26:	e000      	b.n	8013b2a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013b28:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	7d1b      	ldrb	r3, [r3, #20]
 8013b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b32:	b2da      	uxtb	r2, r3
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013b38:	2300      	movs	r3, #0
}
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	3730      	adds	r7, #48	@ 0x30
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	bd80      	pop	{r7, pc}

08013b42 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013b42:	b580      	push	{r7, lr}
 8013b44:	b086      	sub	sp, #24
 8013b46:	af00      	add	r7, sp, #0
 8013b48:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	f107 0208 	add.w	r2, r7, #8
 8013b50:	4611      	mov	r1, r2
 8013b52:	4618      	mov	r0, r3
 8013b54:	f7ff fc3a 	bl	80133cc <validate>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013b5c:	7dfb      	ldrb	r3, [r7, #23]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d168      	bne.n	8013c34 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	7d1b      	ldrb	r3, [r3, #20]
 8013b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d062      	beq.n	8013c34 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	7d1b      	ldrb	r3, [r3, #20]
 8013b72:	b25b      	sxtb	r3, r3
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	da15      	bge.n	8013ba4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013b78:	68bb      	ldr	r3, [r7, #8]
 8013b7a:	7858      	ldrb	r0, [r3, #1]
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	6a1a      	ldr	r2, [r3, #32]
 8013b86:	2301      	movs	r3, #1
 8013b88:	f7fd f9b4 	bl	8010ef4 <disk_write>
 8013b8c:	4603      	mov	r3, r0
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d001      	beq.n	8013b96 <f_sync+0x54>
 8013b92:	2301      	movs	r3, #1
 8013b94:	e04f      	b.n	8013c36 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	7d1b      	ldrb	r3, [r3, #20]
 8013b9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013b9e:	b2da      	uxtb	r2, r3
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013ba4:	f7fc feac 	bl	8010900 <get_fattime>
 8013ba8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013baa:	68ba      	ldr	r2, [r7, #8]
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bb0:	4619      	mov	r1, r3
 8013bb2:	4610      	mov	r0, r2
 8013bb4:	f7fd fc8e 	bl	80114d4 <move_window>
 8013bb8:	4603      	mov	r3, r0
 8013bba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013bbc:	7dfb      	ldrb	r3, [r7, #23]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d138      	bne.n	8013c34 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013bc6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	330b      	adds	r3, #11
 8013bcc:	781a      	ldrb	r2, [r3, #0]
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	330b      	adds	r3, #11
 8013bd2:	f042 0220 	orr.w	r2, r2, #32
 8013bd6:	b2d2      	uxtb	r2, r2
 8013bd8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	6818      	ldr	r0, [r3, #0]
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	689b      	ldr	r3, [r3, #8]
 8013be2:	461a      	mov	r2, r3
 8013be4:	68f9      	ldr	r1, [r7, #12]
 8013be6:	f7fe f998 	bl	8011f1a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	f103 021c 	add.w	r2, r3, #28
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	68db      	ldr	r3, [r3, #12]
 8013bf4:	4619      	mov	r1, r3
 8013bf6:	4610      	mov	r0, r2
 8013bf8:	f7fd fa11 	bl	801101e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	3316      	adds	r3, #22
 8013c00:	6939      	ldr	r1, [r7, #16]
 8013c02:	4618      	mov	r0, r3
 8013c04:	f7fd fa0b 	bl	801101e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	3312      	adds	r3, #18
 8013c0c:	2100      	movs	r1, #0
 8013c0e:	4618      	mov	r0, r3
 8013c10:	f7fd f9ea 	bl	8010fe8 <st_word>
					fs->wflag = 1;
 8013c14:	68bb      	ldr	r3, [r7, #8]
 8013c16:	2201      	movs	r2, #1
 8013c18:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013c1a:	68bb      	ldr	r3, [r7, #8]
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f7fd fc87 	bl	8011530 <sync_fs>
 8013c22:	4603      	mov	r3, r0
 8013c24:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	7d1b      	ldrb	r3, [r3, #20]
 8013c2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013c2e:	b2da      	uxtb	r2, r3
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c36:	4618      	mov	r0, r3
 8013c38:	3718      	adds	r7, #24
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	bd80      	pop	{r7, pc}

08013c3e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013c3e:	b580      	push	{r7, lr}
 8013c40:	b084      	sub	sp, #16
 8013c42:	af00      	add	r7, sp, #0
 8013c44:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013c46:	6878      	ldr	r0, [r7, #4]
 8013c48:	f7ff ff7b 	bl	8013b42 <f_sync>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013c50:	7bfb      	ldrb	r3, [r7, #15]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d118      	bne.n	8013c88 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	f107 0208 	add.w	r2, r7, #8
 8013c5c:	4611      	mov	r1, r2
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f7ff fbb4 	bl	80133cc <validate>
 8013c64:	4603      	mov	r3, r0
 8013c66:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013c68:	7bfb      	ldrb	r3, [r7, #15]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d10c      	bne.n	8013c88 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	691b      	ldr	r3, [r3, #16]
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7fd fb8a 	bl	801138c <dec_lock>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013c7c:	7bfb      	ldrb	r3, [r7, #15]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d102      	bne.n	8013c88 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	2200      	movs	r2, #0
 8013c86:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3710      	adds	r7, #16
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}

08013c92 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013c92:	b580      	push	{r7, lr}
 8013c94:	b090      	sub	sp, #64	@ 0x40
 8013c96:	af00      	add	r7, sp, #0
 8013c98:	6078      	str	r0, [r7, #4]
 8013c9a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	f107 0208 	add.w	r2, r7, #8
 8013ca2:	4611      	mov	r1, r2
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f7ff fb91 	bl	80133cc <validate>
 8013caa:	4603      	mov	r3, r0
 8013cac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013cb0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d103      	bne.n	8013cc0 <f_lseek+0x2e>
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	7d5b      	ldrb	r3, [r3, #21]
 8013cbc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013cc0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d002      	beq.n	8013cce <f_lseek+0x3c>
 8013cc8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013ccc:	e1e6      	b.n	801409c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	f000 80d1 	beq.w	8013e7a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013cd8:	683b      	ldr	r3, [r7, #0]
 8013cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cde:	d15a      	bne.n	8013d96 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ce4:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ce8:	1d1a      	adds	r2, r3, #4
 8013cea:	627a      	str	r2, [r7, #36]	@ 0x24
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	617b      	str	r3, [r7, #20]
 8013cf0:	2302      	movs	r3, #2
 8013cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	689b      	ldr	r3, [r3, #8]
 8013cf8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8013cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d03a      	beq.n	8013d76 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d02:	613b      	str	r3, [r7, #16]
 8013d04:	2300      	movs	r3, #0
 8013d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d0a:	3302      	adds	r3, #2
 8013d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8013d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d10:	60fb      	str	r3, [r7, #12]
 8013d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d14:	3301      	adds	r3, #1
 8013d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7fd fc94 	bl	801164a <get_fat>
 8013d22:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d26:	2b01      	cmp	r3, #1
 8013d28:	d804      	bhi.n	8013d34 <f_lseek+0xa2>
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	2202      	movs	r2, #2
 8013d2e:	755a      	strb	r2, [r3, #21]
 8013d30:	2302      	movs	r3, #2
 8013d32:	e1b3      	b.n	801409c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d3a:	d104      	bne.n	8013d46 <f_lseek+0xb4>
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	2201      	movs	r2, #1
 8013d40:	755a      	strb	r2, [r3, #21]
 8013d42:	2301      	movs	r3, #1
 8013d44:	e1aa      	b.n	801409c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	3301      	adds	r3, #1
 8013d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013d4c:	429a      	cmp	r2, r3
 8013d4e:	d0de      	beq.n	8013d0e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013d50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013d52:	697b      	ldr	r3, [r7, #20]
 8013d54:	429a      	cmp	r2, r3
 8013d56:	d809      	bhi.n	8013d6c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d5a:	1d1a      	adds	r2, r3, #4
 8013d5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8013d5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013d60:	601a      	str	r2, [r3, #0]
 8013d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d64:	1d1a      	adds	r2, r3, #4
 8013d66:	627a      	str	r2, [r7, #36]	@ 0x24
 8013d68:	693a      	ldr	r2, [r7, #16]
 8013d6a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	699b      	ldr	r3, [r3, #24]
 8013d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d3c4      	bcc.n	8013d00 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013d7c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013d7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013d80:	697b      	ldr	r3, [r7, #20]
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d803      	bhi.n	8013d8e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d88:	2200      	movs	r2, #0
 8013d8a:	601a      	str	r2, [r3, #0]
 8013d8c:	e184      	b.n	8014098 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013d8e:	2311      	movs	r3, #17
 8013d90:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8013d94:	e180      	b.n	8014098 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	68db      	ldr	r3, [r3, #12]
 8013d9a:	683a      	ldr	r2, [r7, #0]
 8013d9c:	429a      	cmp	r2, r3
 8013d9e:	d902      	bls.n	8013da6 <f_lseek+0x114>
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	68db      	ldr	r3, [r3, #12]
 8013da4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	683a      	ldr	r2, [r7, #0]
 8013daa:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	f000 8172 	beq.w	8014098 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013db4:	683b      	ldr	r3, [r7, #0]
 8013db6:	3b01      	subs	r3, #1
 8013db8:	4619      	mov	r1, r3
 8013dba:	6878      	ldr	r0, [r7, #4]
 8013dbc:	f7fd fed3 	bl	8011b66 <clmt_clust>
 8013dc0:	4602      	mov	r2, r0
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013dc6:	68ba      	ldr	r2, [r7, #8]
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	69db      	ldr	r3, [r3, #28]
 8013dcc:	4619      	mov	r1, r3
 8013dce:	4610      	mov	r0, r2
 8013dd0:	f7fd fc1c 	bl	801160c <clust2sect>
 8013dd4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013dd6:	69bb      	ldr	r3, [r7, #24]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d104      	bne.n	8013de6 <f_lseek+0x154>
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	2202      	movs	r2, #2
 8013de0:	755a      	strb	r2, [r3, #21]
 8013de2:	2302      	movs	r3, #2
 8013de4:	e15a      	b.n	801409c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013de6:	683b      	ldr	r3, [r7, #0]
 8013de8:	3b01      	subs	r3, #1
 8013dea:	0a5b      	lsrs	r3, r3, #9
 8013dec:	68ba      	ldr	r2, [r7, #8]
 8013dee:	8952      	ldrh	r2, [r2, #10]
 8013df0:	3a01      	subs	r2, #1
 8013df2:	4013      	ands	r3, r2
 8013df4:	69ba      	ldr	r2, [r7, #24]
 8013df6:	4413      	add	r3, r2
 8013df8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	699b      	ldr	r3, [r3, #24]
 8013dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	f000 8148 	beq.w	8014098 <f_lseek+0x406>
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	6a1b      	ldr	r3, [r3, #32]
 8013e0c:	69ba      	ldr	r2, [r7, #24]
 8013e0e:	429a      	cmp	r2, r3
 8013e10:	f000 8142 	beq.w	8014098 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	7d1b      	ldrb	r3, [r3, #20]
 8013e18:	b25b      	sxtb	r3, r3
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	da18      	bge.n	8013e50 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013e1e:	68bb      	ldr	r3, [r7, #8]
 8013e20:	7858      	ldrb	r0, [r3, #1]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	6a1a      	ldr	r2, [r3, #32]
 8013e2c:	2301      	movs	r3, #1
 8013e2e:	f7fd f861 	bl	8010ef4 <disk_write>
 8013e32:	4603      	mov	r3, r0
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d004      	beq.n	8013e42 <f_lseek+0x1b0>
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	2201      	movs	r2, #1
 8013e3c:	755a      	strb	r2, [r3, #21]
 8013e3e:	2301      	movs	r3, #1
 8013e40:	e12c      	b.n	801409c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	7d1b      	ldrb	r3, [r3, #20]
 8013e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013e4a:	b2da      	uxtb	r2, r3
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013e50:	68bb      	ldr	r3, [r7, #8]
 8013e52:	7858      	ldrb	r0, [r3, #1]
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013e5a:	2301      	movs	r3, #1
 8013e5c:	69ba      	ldr	r2, [r7, #24]
 8013e5e:	f7fd f829 	bl	8010eb4 <disk_read>
 8013e62:	4603      	mov	r3, r0
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d004      	beq.n	8013e72 <f_lseek+0x1e0>
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	2201      	movs	r2, #1
 8013e6c:	755a      	strb	r2, [r3, #21]
 8013e6e:	2301      	movs	r3, #1
 8013e70:	e114      	b.n	801409c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	69ba      	ldr	r2, [r7, #24]
 8013e76:	621a      	str	r2, [r3, #32]
 8013e78:	e10e      	b.n	8014098 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	68db      	ldr	r3, [r3, #12]
 8013e7e:	683a      	ldr	r2, [r7, #0]
 8013e80:	429a      	cmp	r2, r3
 8013e82:	d908      	bls.n	8013e96 <f_lseek+0x204>
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	7d1b      	ldrb	r3, [r3, #20]
 8013e88:	f003 0302 	and.w	r3, r3, #2
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d102      	bne.n	8013e96 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	68db      	ldr	r3, [r3, #12]
 8013e94:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	699b      	ldr	r3, [r3, #24]
 8013e9a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013e9c:	2300      	movs	r3, #0
 8013e9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013ea4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013ea6:	683b      	ldr	r3, [r7, #0]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	f000 80a7 	beq.w	8013ffc <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013eae:	68bb      	ldr	r3, [r7, #8]
 8013eb0:	895b      	ldrh	r3, [r3, #10]
 8013eb2:	025b      	lsls	r3, r3, #9
 8013eb4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013eb6:	6a3b      	ldr	r3, [r7, #32]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d01b      	beq.n	8013ef4 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	1e5a      	subs	r2, r3, #1
 8013ec0:	69fb      	ldr	r3, [r7, #28]
 8013ec2:	fbb2 f2f3 	udiv	r2, r2, r3
 8013ec6:	6a3b      	ldr	r3, [r7, #32]
 8013ec8:	1e59      	subs	r1, r3, #1
 8013eca:	69fb      	ldr	r3, [r7, #28]
 8013ecc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d30f      	bcc.n	8013ef4 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013ed4:	6a3b      	ldr	r3, [r7, #32]
 8013ed6:	1e5a      	subs	r2, r3, #1
 8013ed8:	69fb      	ldr	r3, [r7, #28]
 8013eda:	425b      	negs	r3, r3
 8013edc:	401a      	ands	r2, r3
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	699b      	ldr	r3, [r3, #24]
 8013ee6:	683a      	ldr	r2, [r7, #0]
 8013ee8:	1ad3      	subs	r3, r2, r3
 8013eea:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	69db      	ldr	r3, [r3, #28]
 8013ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013ef2:	e022      	b.n	8013f3a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	689b      	ldr	r3, [r3, #8]
 8013ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d119      	bne.n	8013f34 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	2100      	movs	r1, #0
 8013f04:	4618      	mov	r0, r3
 8013f06:	f7fd fd96 	bl	8011a36 <create_chain>
 8013f0a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f0e:	2b01      	cmp	r3, #1
 8013f10:	d104      	bne.n	8013f1c <f_lseek+0x28a>
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	2202      	movs	r2, #2
 8013f16:	755a      	strb	r2, [r3, #21]
 8013f18:	2302      	movs	r3, #2
 8013f1a:	e0bf      	b.n	801409c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f22:	d104      	bne.n	8013f2e <f_lseek+0x29c>
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	2201      	movs	r2, #1
 8013f28:	755a      	strb	r2, [r3, #21]
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	e0b6      	b.n	801409c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013f32:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013f38:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d05d      	beq.n	8013ffc <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8013f40:	e03a      	b.n	8013fb8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8013f42:	683a      	ldr	r2, [r7, #0]
 8013f44:	69fb      	ldr	r3, [r7, #28]
 8013f46:	1ad3      	subs	r3, r2, r3
 8013f48:	603b      	str	r3, [r7, #0]
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	699a      	ldr	r2, [r3, #24]
 8013f4e:	69fb      	ldr	r3, [r7, #28]
 8013f50:	441a      	add	r2, r3
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	7d1b      	ldrb	r3, [r3, #20]
 8013f5a:	f003 0302 	and.w	r3, r3, #2
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d00b      	beq.n	8013f7a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013f66:	4618      	mov	r0, r3
 8013f68:	f7fd fd65 	bl	8011a36 <create_chain>
 8013f6c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d108      	bne.n	8013f86 <f_lseek+0x2f4>
							ofs = 0; break;
 8013f74:	2300      	movs	r3, #0
 8013f76:	603b      	str	r3, [r7, #0]
 8013f78:	e022      	b.n	8013fc0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013f7e:	4618      	mov	r0, r3
 8013f80:	f7fd fb63 	bl	801164a <get_fat>
 8013f84:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f8c:	d104      	bne.n	8013f98 <f_lseek+0x306>
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2201      	movs	r2, #1
 8013f92:	755a      	strb	r2, [r3, #21]
 8013f94:	2301      	movs	r3, #1
 8013f96:	e081      	b.n	801409c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f9a:	2b01      	cmp	r3, #1
 8013f9c:	d904      	bls.n	8013fa8 <f_lseek+0x316>
 8013f9e:	68bb      	ldr	r3, [r7, #8]
 8013fa0:	699b      	ldr	r3, [r3, #24]
 8013fa2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013fa4:	429a      	cmp	r2, r3
 8013fa6:	d304      	bcc.n	8013fb2 <f_lseek+0x320>
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	2202      	movs	r2, #2
 8013fac:	755a      	strb	r2, [r3, #21]
 8013fae:	2302      	movs	r3, #2
 8013fb0:	e074      	b.n	801409c <f_lseek+0x40a>
					fp->clust = clst;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013fb6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013fb8:	683a      	ldr	r2, [r7, #0]
 8013fba:	69fb      	ldr	r3, [r7, #28]
 8013fbc:	429a      	cmp	r2, r3
 8013fbe:	d8c0      	bhi.n	8013f42 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	699a      	ldr	r2, [r3, #24]
 8013fc4:	683b      	ldr	r3, [r7, #0]
 8013fc6:	441a      	add	r2, r3
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d012      	beq.n	8013ffc <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013fd6:	68bb      	ldr	r3, [r7, #8]
 8013fd8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f7fd fb16 	bl	801160c <clust2sect>
 8013fe0:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d104      	bne.n	8013ff2 <f_lseek+0x360>
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	2202      	movs	r2, #2
 8013fec:	755a      	strb	r2, [r3, #21]
 8013fee:	2302      	movs	r3, #2
 8013ff0:	e054      	b.n	801409c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8013ff2:	683b      	ldr	r3, [r7, #0]
 8013ff4:	0a5b      	lsrs	r3, r3, #9
 8013ff6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013ff8:	4413      	add	r3, r2
 8013ffa:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	699a      	ldr	r2, [r3, #24]
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	68db      	ldr	r3, [r3, #12]
 8014004:	429a      	cmp	r2, r3
 8014006:	d90a      	bls.n	801401e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	699a      	ldr	r2, [r3, #24]
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	7d1b      	ldrb	r3, [r3, #20]
 8014014:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014018:	b2da      	uxtb	r2, r3
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	699b      	ldr	r3, [r3, #24]
 8014022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014026:	2b00      	cmp	r3, #0
 8014028:	d036      	beq.n	8014098 <f_lseek+0x406>
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	6a1b      	ldr	r3, [r3, #32]
 801402e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014030:	429a      	cmp	r2, r3
 8014032:	d031      	beq.n	8014098 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	7d1b      	ldrb	r3, [r3, #20]
 8014038:	b25b      	sxtb	r3, r3
 801403a:	2b00      	cmp	r3, #0
 801403c:	da18      	bge.n	8014070 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801403e:	68bb      	ldr	r3, [r7, #8]
 8014040:	7858      	ldrb	r0, [r3, #1]
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	6a1a      	ldr	r2, [r3, #32]
 801404c:	2301      	movs	r3, #1
 801404e:	f7fc ff51 	bl	8010ef4 <disk_write>
 8014052:	4603      	mov	r3, r0
 8014054:	2b00      	cmp	r3, #0
 8014056:	d004      	beq.n	8014062 <f_lseek+0x3d0>
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2201      	movs	r2, #1
 801405c:	755a      	strb	r2, [r3, #21]
 801405e:	2301      	movs	r3, #1
 8014060:	e01c      	b.n	801409c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	7d1b      	ldrb	r3, [r3, #20]
 8014066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801406a:	b2da      	uxtb	r2, r3
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	7858      	ldrb	r0, [r3, #1]
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801407a:	2301      	movs	r3, #1
 801407c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801407e:	f7fc ff19 	bl	8010eb4 <disk_read>
 8014082:	4603      	mov	r3, r0
 8014084:	2b00      	cmp	r3, #0
 8014086:	d004      	beq.n	8014092 <f_lseek+0x400>
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	2201      	movs	r2, #1
 801408c:	755a      	strb	r2, [r3, #21]
 801408e:	2301      	movs	r3, #1
 8014090:	e004      	b.n	801409c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014096:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014098:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801409c:	4618      	mov	r0, r3
 801409e:	3740      	adds	r7, #64	@ 0x40
 80140a0:	46bd      	mov	sp, r7
 80140a2:	bd80      	pop	{r7, pc}

080140a4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b086      	sub	sp, #24
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d101      	bne.n	80140b8 <f_opendir+0x14>
 80140b4:	2309      	movs	r3, #9
 80140b6:	e074      	b.n	80141a2 <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80140bc:	f107 0108 	add.w	r1, r7, #8
 80140c0:	463b      	mov	r3, r7
 80140c2:	2200      	movs	r2, #0
 80140c4:	4618      	mov	r0, r3
 80140c6:	f7fe ff35 	bl	8012f34 <find_volume>
 80140ca:	4603      	mov	r3, r0
 80140cc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80140ce:	7dfb      	ldrb	r3, [r7, #23]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d15f      	bne.n	8014194 <f_opendir+0xf0>
		obj->fs = fs;
 80140d4:	68ba      	ldr	r2, [r7, #8]
 80140d6:	693b      	ldr	r3, [r7, #16]
 80140d8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 80140da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80140de:	f000 faaf 	bl	8014640 <ff_memalloc>
 80140e2:	60f8      	str	r0, [r7, #12]
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d101      	bne.n	80140ee <f_opendir+0x4a>
 80140ea:	2311      	movs	r3, #17
 80140ec:	e059      	b.n	80141a2 <f_opendir+0xfe>
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	68fa      	ldr	r2, [r7, #12]
 80140f2:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80140f4:	683b      	ldr	r3, [r7, #0]
 80140f6:	4619      	mov	r1, r3
 80140f8:	6878      	ldr	r0, [r7, #4]
 80140fa:	f7fe fe0f 	bl	8012d1c <follow_path>
 80140fe:	4603      	mov	r3, r0
 8014100:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8014102:	7dfb      	ldrb	r3, [r7, #23]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d13d      	bne.n	8014184 <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801410e:	b25b      	sxtb	r3, r3
 8014110:	2b00      	cmp	r3, #0
 8014112:	db12      	blt.n	801413a <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8014114:	693b      	ldr	r3, [r7, #16]
 8014116:	799b      	ldrb	r3, [r3, #6]
 8014118:	f003 0310 	and.w	r3, r3, #16
 801411c:	2b00      	cmp	r3, #0
 801411e:	d00a      	beq.n	8014136 <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8014120:	68ba      	ldr	r2, [r7, #8]
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	6a1b      	ldr	r3, [r3, #32]
 8014126:	4619      	mov	r1, r3
 8014128:	4610      	mov	r0, r2
 801412a:	f7fd fed7 	bl	8011edc <ld_clust>
 801412e:	4602      	mov	r2, r0
 8014130:	693b      	ldr	r3, [r7, #16]
 8014132:	609a      	str	r2, [r3, #8]
 8014134:	e001      	b.n	801413a <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8014136:	2305      	movs	r3, #5
 8014138:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801413a:	7dfb      	ldrb	r3, [r7, #23]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d121      	bne.n	8014184 <f_opendir+0xe0>
				obj->id = fs->id;
 8014140:	68bb      	ldr	r3, [r7, #8]
 8014142:	88da      	ldrh	r2, [r3, #6]
 8014144:	693b      	ldr	r3, [r7, #16]
 8014146:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8014148:	2100      	movs	r1, #0
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f7fd fd3f 	bl	8011bce <dir_sdi>
 8014150:	4603      	mov	r3, r0
 8014152:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8014154:	7dfb      	ldrb	r3, [r7, #23]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d114      	bne.n	8014184 <f_opendir+0xe0>
					if (obj->sclust) {
 801415a:	693b      	ldr	r3, [r7, #16]
 801415c:	689b      	ldr	r3, [r3, #8]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d00d      	beq.n	801417e <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8014162:	2100      	movs	r1, #0
 8014164:	6878      	ldr	r0, [r7, #4]
 8014166:	f7fd f883 	bl	8011270 <inc_lock>
 801416a:	4602      	mov	r2, r0
 801416c:	693b      	ldr	r3, [r7, #16]
 801416e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8014170:	693b      	ldr	r3, [r7, #16]
 8014172:	691b      	ldr	r3, [r3, #16]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d105      	bne.n	8014184 <f_opendir+0xe0>
 8014178:	2312      	movs	r3, #18
 801417a:	75fb      	strb	r3, [r7, #23]
 801417c:	e002      	b.n	8014184 <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801417e:	693b      	ldr	r3, [r7, #16]
 8014180:	2200      	movs	r2, #0
 8014182:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 8014184:	68f8      	ldr	r0, [r7, #12]
 8014186:	f000 fa67 	bl	8014658 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801418a:	7dfb      	ldrb	r3, [r7, #23]
 801418c:	2b04      	cmp	r3, #4
 801418e:	d101      	bne.n	8014194 <f_opendir+0xf0>
 8014190:	2305      	movs	r3, #5
 8014192:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8014194:	7dfb      	ldrb	r3, [r7, #23]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d002      	beq.n	80141a0 <f_opendir+0xfc>
 801419a:	693b      	ldr	r3, [r7, #16]
 801419c:	2200      	movs	r2, #0
 801419e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80141a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80141a2:	4618      	mov	r0, r3
 80141a4:	3718      	adds	r7, #24
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}

080141aa <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80141aa:	b580      	push	{r7, lr}
 80141ac:	b084      	sub	sp, #16
 80141ae:	af00      	add	r7, sp, #0
 80141b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	f107 0208 	add.w	r2, r7, #8
 80141b8:	4611      	mov	r1, r2
 80141ba:	4618      	mov	r0, r3
 80141bc:	f7ff f906 	bl	80133cc <validate>
 80141c0:	4603      	mov	r3, r0
 80141c2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80141c4:	7bfb      	ldrb	r3, [r7, #15]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d110      	bne.n	80141ec <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	691b      	ldr	r3, [r3, #16]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d006      	beq.n	80141e0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	691b      	ldr	r3, [r3, #16]
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7fd f8d8 	bl	801138c <dec_lock>
 80141dc:	4603      	mov	r3, r0
 80141de:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80141e0:	7bfb      	ldrb	r3, [r7, #15]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d102      	bne.n	80141ec <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	2200      	movs	r2, #0
 80141ea:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80141ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80141ee:	4618      	mov	r0, r3
 80141f0:	3710      	adds	r7, #16
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd80      	pop	{r7, pc}

080141f6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80141f6:	b580      	push	{r7, lr}
 80141f8:	b086      	sub	sp, #24
 80141fa:	af00      	add	r7, sp, #0
 80141fc:	6078      	str	r0, [r7, #4]
 80141fe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	f107 020c 	add.w	r2, r7, #12
 8014206:	4611      	mov	r1, r2
 8014208:	4618      	mov	r0, r3
 801420a:	f7ff f8df 	bl	80133cc <validate>
 801420e:	4603      	mov	r3, r0
 8014210:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014212:	7dfb      	ldrb	r3, [r7, #23]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d136      	bne.n	8014286 <f_readdir+0x90>
		if (!fno) {
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	2b00      	cmp	r3, #0
 801421c:	d106      	bne.n	801422c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801421e:	2100      	movs	r1, #0
 8014220:	6878      	ldr	r0, [r7, #4]
 8014222:	f7fd fcd4 	bl	8011bce <dir_sdi>
 8014226:	4603      	mov	r3, r0
 8014228:	75fb      	strb	r3, [r7, #23]
 801422a:	e02c      	b.n	8014286 <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 801422c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8014230:	f000 fa06 	bl	8014640 <ff_memalloc>
 8014234:	6138      	str	r0, [r7, #16]
 8014236:	693b      	ldr	r3, [r7, #16]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d101      	bne.n	8014240 <f_readdir+0x4a>
 801423c:	2311      	movs	r3, #17
 801423e:	e023      	b.n	8014288 <f_readdir+0x92>
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	693a      	ldr	r2, [r7, #16]
 8014244:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8014246:	2100      	movs	r1, #0
 8014248:	6878      	ldr	r0, [r7, #4]
 801424a:	f7fe f872 	bl	8012332 <dir_read>
 801424e:	4603      	mov	r3, r0
 8014250:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8014252:	7dfb      	ldrb	r3, [r7, #23]
 8014254:	2b04      	cmp	r3, #4
 8014256:	d101      	bne.n	801425c <f_readdir+0x66>
 8014258:	2300      	movs	r3, #0
 801425a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 801425c:	7dfb      	ldrb	r3, [r7, #23]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d10e      	bne.n	8014280 <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 8014262:	6839      	ldr	r1, [r7, #0]
 8014264:	6878      	ldr	r0, [r7, #4]
 8014266:	f7fe fac3 	bl	80127f0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801426a:	2100      	movs	r1, #0
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	f7fd fd29 	bl	8011cc4 <dir_next>
 8014272:	4603      	mov	r3, r0
 8014274:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8014276:	7dfb      	ldrb	r3, [r7, #23]
 8014278:	2b04      	cmp	r3, #4
 801427a:	d101      	bne.n	8014280 <f_readdir+0x8a>
 801427c:	2300      	movs	r3, #0
 801427e:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 8014280:	6938      	ldr	r0, [r7, #16]
 8014282:	f000 f9e9 	bl	8014658 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 8014286:	7dfb      	ldrb	r3, [r7, #23]
}
 8014288:	4618      	mov	r0, r3
 801428a:	3718      	adds	r7, #24
 801428c:	46bd      	mov	sp, r7
 801428e:	bd80      	pop	{r7, pc}

08014290 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b092      	sub	sp, #72	@ 0x48
 8014294:	af00      	add	r7, sp, #0
 8014296:	60f8      	str	r0, [r7, #12]
 8014298:	60b9      	str	r1, [r7, #8]
 801429a:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801429c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80142a0:	f107 030c 	add.w	r3, r7, #12
 80142a4:	2200      	movs	r2, #0
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7fe fe44 	bl	8012f34 <find_volume>
 80142ac:	4603      	mov	r3, r0
 80142ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80142b2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	f040 8099 	bne.w	80143ee <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80142bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80142c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142c4:	695a      	ldr	r2, [r3, #20]
 80142c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142c8:	699b      	ldr	r3, [r3, #24]
 80142ca:	3b02      	subs	r3, #2
 80142cc:	429a      	cmp	r2, r3
 80142ce:	d804      	bhi.n	80142da <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80142d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142d2:	695a      	ldr	r2, [r3, #20]
 80142d4:	68bb      	ldr	r3, [r7, #8]
 80142d6:	601a      	str	r2, [r3, #0]
 80142d8:	e089      	b.n	80143ee <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80142da:	2300      	movs	r3, #0
 80142dc:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80142de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142e0:	781b      	ldrb	r3, [r3, #0]
 80142e2:	2b01      	cmp	r3, #1
 80142e4:	d128      	bne.n	8014338 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80142e6:	2302      	movs	r3, #2
 80142e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80142ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142ec:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80142ee:	f107 0314 	add.w	r3, r7, #20
 80142f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80142f4:	4618      	mov	r0, r3
 80142f6:	f7fd f9a8 	bl	801164a <get_fat>
 80142fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80142fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014302:	d103      	bne.n	801430c <f_getfree+0x7c>
 8014304:	2301      	movs	r3, #1
 8014306:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801430a:	e063      	b.n	80143d4 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801430c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801430e:	2b01      	cmp	r3, #1
 8014310:	d103      	bne.n	801431a <f_getfree+0x8a>
 8014312:	2302      	movs	r3, #2
 8014314:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8014318:	e05c      	b.n	80143d4 <f_getfree+0x144>
					if (stat == 0) nfree++;
 801431a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801431c:	2b00      	cmp	r3, #0
 801431e:	d102      	bne.n	8014326 <f_getfree+0x96>
 8014320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014322:	3301      	adds	r3, #1
 8014324:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8014326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014328:	3301      	adds	r3, #1
 801432a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801432c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801432e:	699b      	ldr	r3, [r3, #24]
 8014330:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014332:	429a      	cmp	r2, r3
 8014334:	d3db      	bcc.n	80142ee <f_getfree+0x5e>
 8014336:	e04d      	b.n	80143d4 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8014338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801433a:	699b      	ldr	r3, [r3, #24]
 801433c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801433e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014342:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8014344:	2300      	movs	r3, #0
 8014346:	637b      	str	r3, [r7, #52]	@ 0x34
 8014348:	2300      	movs	r3, #0
 801434a:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 801434c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801434e:	2b00      	cmp	r3, #0
 8014350:	d113      	bne.n	801437a <f_getfree+0xea>
							res = move_window(fs, sect++);
 8014352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014356:	1c5a      	adds	r2, r3, #1
 8014358:	63ba      	str	r2, [r7, #56]	@ 0x38
 801435a:	4619      	mov	r1, r3
 801435c:	f7fd f8ba 	bl	80114d4 <move_window>
 8014360:	4603      	mov	r3, r0
 8014362:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8014366:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801436a:	2b00      	cmp	r3, #0
 801436c:	d131      	bne.n	80143d2 <f_getfree+0x142>
							p = fs->win;
 801436e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014370:	3334      	adds	r3, #52	@ 0x34
 8014372:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8014374:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014378:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 801437a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801437c:	781b      	ldrb	r3, [r3, #0]
 801437e:	2b02      	cmp	r3, #2
 8014380:	d10f      	bne.n	80143a2 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8014382:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014384:	f7fc fdf4 	bl	8010f70 <ld_word>
 8014388:	4603      	mov	r3, r0
 801438a:	2b00      	cmp	r3, #0
 801438c:	d102      	bne.n	8014394 <f_getfree+0x104>
 801438e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014390:	3301      	adds	r3, #1
 8014392:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8014394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014396:	3302      	adds	r3, #2
 8014398:	633b      	str	r3, [r7, #48]	@ 0x30
 801439a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801439c:	3b02      	subs	r3, #2
 801439e:	637b      	str	r3, [r7, #52]	@ 0x34
 80143a0:	e010      	b.n	80143c4 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80143a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80143a4:	f7fc fdfd 	bl	8010fa2 <ld_dword>
 80143a8:	4603      	mov	r3, r0
 80143aa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d102      	bne.n	80143b8 <f_getfree+0x128>
 80143b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80143b4:	3301      	adds	r3, #1
 80143b6:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 80143b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143ba:	3304      	adds	r3, #4
 80143bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80143be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80143c0:	3b04      	subs	r3, #4
 80143c2:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80143c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143c6:	3b01      	subs	r3, #1
 80143c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80143ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d1bd      	bne.n	801434c <f_getfree+0xbc>
 80143d0:	e000      	b.n	80143d4 <f_getfree+0x144>
							if (res != FR_OK) break;
 80143d2:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80143d8:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80143da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80143de:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80143e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143e2:	791a      	ldrb	r2, [r3, #4]
 80143e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143e6:	f042 0201 	orr.w	r2, r2, #1
 80143ea:	b2d2      	uxtb	r2, r2
 80143ec:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80143ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	3748      	adds	r7, #72	@ 0x48
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}
	...

080143fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80143fc:	b480      	push	{r7}
 80143fe:	b087      	sub	sp, #28
 8014400:	af00      	add	r7, sp, #0
 8014402:	60f8      	str	r0, [r7, #12]
 8014404:	60b9      	str	r1, [r7, #8]
 8014406:	4613      	mov	r3, r2
 8014408:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801440a:	2301      	movs	r3, #1
 801440c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801440e:	2300      	movs	r3, #0
 8014410:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014412:	4b1f      	ldr	r3, [pc, #124]	@ (8014490 <FATFS_LinkDriverEx+0x94>)
 8014414:	7a5b      	ldrb	r3, [r3, #9]
 8014416:	b2db      	uxtb	r3, r3
 8014418:	2b00      	cmp	r3, #0
 801441a:	d131      	bne.n	8014480 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801441c:	4b1c      	ldr	r3, [pc, #112]	@ (8014490 <FATFS_LinkDriverEx+0x94>)
 801441e:	7a5b      	ldrb	r3, [r3, #9]
 8014420:	b2db      	uxtb	r3, r3
 8014422:	461a      	mov	r2, r3
 8014424:	4b1a      	ldr	r3, [pc, #104]	@ (8014490 <FATFS_LinkDriverEx+0x94>)
 8014426:	2100      	movs	r1, #0
 8014428:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801442a:	4b19      	ldr	r3, [pc, #100]	@ (8014490 <FATFS_LinkDriverEx+0x94>)
 801442c:	7a5b      	ldrb	r3, [r3, #9]
 801442e:	b2db      	uxtb	r3, r3
 8014430:	4a17      	ldr	r2, [pc, #92]	@ (8014490 <FATFS_LinkDriverEx+0x94>)
 8014432:	009b      	lsls	r3, r3, #2
 8014434:	4413      	add	r3, r2
 8014436:	68fa      	ldr	r2, [r7, #12]
 8014438:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801443a:	4b15      	ldr	r3, [pc, #84]	@ (8014490 <FATFS_LinkDriverEx+0x94>)
 801443c:	7a5b      	ldrb	r3, [r3, #9]
 801443e:	b2db      	uxtb	r3, r3
 8014440:	461a      	mov	r2, r3
 8014442:	4b13      	ldr	r3, [pc, #76]	@ (8014490 <FATFS_LinkDriverEx+0x94>)
 8014444:	4413      	add	r3, r2
 8014446:	79fa      	ldrb	r2, [r7, #7]
 8014448:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801444a:	4b11      	ldr	r3, [pc, #68]	@ (8014490 <FATFS_LinkDriverEx+0x94>)
 801444c:	7a5b      	ldrb	r3, [r3, #9]
 801444e:	b2db      	uxtb	r3, r3
 8014450:	1c5a      	adds	r2, r3, #1
 8014452:	b2d1      	uxtb	r1, r2
 8014454:	4a0e      	ldr	r2, [pc, #56]	@ (8014490 <FATFS_LinkDriverEx+0x94>)
 8014456:	7251      	strb	r1, [r2, #9]
 8014458:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801445a:	7dbb      	ldrb	r3, [r7, #22]
 801445c:	3330      	adds	r3, #48	@ 0x30
 801445e:	b2da      	uxtb	r2, r3
 8014460:	68bb      	ldr	r3, [r7, #8]
 8014462:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	3301      	adds	r3, #1
 8014468:	223a      	movs	r2, #58	@ 0x3a
 801446a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801446c:	68bb      	ldr	r3, [r7, #8]
 801446e:	3302      	adds	r3, #2
 8014470:	222f      	movs	r2, #47	@ 0x2f
 8014472:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	3303      	adds	r3, #3
 8014478:	2200      	movs	r2, #0
 801447a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801447c:	2300      	movs	r3, #0
 801447e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014480:	7dfb      	ldrb	r3, [r7, #23]
}
 8014482:	4618      	mov	r0, r3
 8014484:	371c      	adds	r7, #28
 8014486:	46bd      	mov	sp, r7
 8014488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801448c:	4770      	bx	lr
 801448e:	bf00      	nop
 8014490:	2001528c 	.word	0x2001528c

08014494 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b082      	sub	sp, #8
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
 801449c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801449e:	2200      	movs	r2, #0
 80144a0:	6839      	ldr	r1, [r7, #0]
 80144a2:	6878      	ldr	r0, [r7, #4]
 80144a4:	f7ff ffaa 	bl	80143fc <FATFS_LinkDriverEx>
 80144a8:	4603      	mov	r3, r0
}
 80144aa:	4618      	mov	r0, r3
 80144ac:	3708      	adds	r7, #8
 80144ae:	46bd      	mov	sp, r7
 80144b0:	bd80      	pop	{r7, pc}
	...

080144b4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80144b4:	b480      	push	{r7}
 80144b6:	b085      	sub	sp, #20
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	4603      	mov	r3, r0
 80144bc:	6039      	str	r1, [r7, #0]
 80144be:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80144c0:	88fb      	ldrh	r3, [r7, #6]
 80144c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80144c4:	d802      	bhi.n	80144cc <ff_convert+0x18>
		c = chr;
 80144c6:	88fb      	ldrh	r3, [r7, #6]
 80144c8:	81fb      	strh	r3, [r7, #14]
 80144ca:	e025      	b.n	8014518 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80144cc:	683b      	ldr	r3, [r7, #0]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d00b      	beq.n	80144ea <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80144d2:	88fb      	ldrh	r3, [r7, #6]
 80144d4:	2bff      	cmp	r3, #255	@ 0xff
 80144d6:	d805      	bhi.n	80144e4 <ff_convert+0x30>
 80144d8:	88fb      	ldrh	r3, [r7, #6]
 80144da:	3b80      	subs	r3, #128	@ 0x80
 80144dc:	4a12      	ldr	r2, [pc, #72]	@ (8014528 <ff_convert+0x74>)
 80144de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80144e2:	e000      	b.n	80144e6 <ff_convert+0x32>
 80144e4:	2300      	movs	r3, #0
 80144e6:	81fb      	strh	r3, [r7, #14]
 80144e8:	e016      	b.n	8014518 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80144ea:	2300      	movs	r3, #0
 80144ec:	81fb      	strh	r3, [r7, #14]
 80144ee:	e009      	b.n	8014504 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80144f0:	89fb      	ldrh	r3, [r7, #14]
 80144f2:	4a0d      	ldr	r2, [pc, #52]	@ (8014528 <ff_convert+0x74>)
 80144f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80144f8:	88fa      	ldrh	r2, [r7, #6]
 80144fa:	429a      	cmp	r2, r3
 80144fc:	d006      	beq.n	801450c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80144fe:	89fb      	ldrh	r3, [r7, #14]
 8014500:	3301      	adds	r3, #1
 8014502:	81fb      	strh	r3, [r7, #14]
 8014504:	89fb      	ldrh	r3, [r7, #14]
 8014506:	2b7f      	cmp	r3, #127	@ 0x7f
 8014508:	d9f2      	bls.n	80144f0 <ff_convert+0x3c>
 801450a:	e000      	b.n	801450e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801450c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801450e:	89fb      	ldrh	r3, [r7, #14]
 8014510:	3380      	adds	r3, #128	@ 0x80
 8014512:	b29b      	uxth	r3, r3
 8014514:	b2db      	uxtb	r3, r3
 8014516:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8014518:	89fb      	ldrh	r3, [r7, #14]
}
 801451a:	4618      	mov	r0, r3
 801451c:	3714      	adds	r7, #20
 801451e:	46bd      	mov	sp, r7
 8014520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014524:	4770      	bx	lr
 8014526:	bf00      	nop
 8014528:	080172c8 	.word	0x080172c8

0801452c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801452c:	b480      	push	{r7}
 801452e:	b087      	sub	sp, #28
 8014530:	af00      	add	r7, sp, #0
 8014532:	4603      	mov	r3, r0
 8014534:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8014536:	88fb      	ldrh	r3, [r7, #6]
 8014538:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801453c:	d201      	bcs.n	8014542 <ff_wtoupper+0x16>
 801453e:	4b3e      	ldr	r3, [pc, #248]	@ (8014638 <ff_wtoupper+0x10c>)
 8014540:	e000      	b.n	8014544 <ff_wtoupper+0x18>
 8014542:	4b3e      	ldr	r3, [pc, #248]	@ (801463c <ff_wtoupper+0x110>)
 8014544:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	1c9a      	adds	r2, r3, #2
 801454a:	617a      	str	r2, [r7, #20]
 801454c:	881b      	ldrh	r3, [r3, #0]
 801454e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8014550:	8a7b      	ldrh	r3, [r7, #18]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d068      	beq.n	8014628 <ff_wtoupper+0xfc>
 8014556:	88fa      	ldrh	r2, [r7, #6]
 8014558:	8a7b      	ldrh	r3, [r7, #18]
 801455a:	429a      	cmp	r2, r3
 801455c:	d364      	bcc.n	8014628 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801455e:	697b      	ldr	r3, [r7, #20]
 8014560:	1c9a      	adds	r2, r3, #2
 8014562:	617a      	str	r2, [r7, #20]
 8014564:	881b      	ldrh	r3, [r3, #0]
 8014566:	823b      	strh	r3, [r7, #16]
 8014568:	8a3b      	ldrh	r3, [r7, #16]
 801456a:	0a1b      	lsrs	r3, r3, #8
 801456c:	81fb      	strh	r3, [r7, #14]
 801456e:	8a3b      	ldrh	r3, [r7, #16]
 8014570:	b2db      	uxtb	r3, r3
 8014572:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8014574:	88fa      	ldrh	r2, [r7, #6]
 8014576:	8a79      	ldrh	r1, [r7, #18]
 8014578:	8a3b      	ldrh	r3, [r7, #16]
 801457a:	440b      	add	r3, r1
 801457c:	429a      	cmp	r2, r3
 801457e:	da49      	bge.n	8014614 <ff_wtoupper+0xe8>
			switch (cmd) {
 8014580:	89fb      	ldrh	r3, [r7, #14]
 8014582:	2b08      	cmp	r3, #8
 8014584:	d84f      	bhi.n	8014626 <ff_wtoupper+0xfa>
 8014586:	a201      	add	r2, pc, #4	@ (adr r2, 801458c <ff_wtoupper+0x60>)
 8014588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801458c:	080145b1 	.word	0x080145b1
 8014590:	080145c3 	.word	0x080145c3
 8014594:	080145d9 	.word	0x080145d9
 8014598:	080145e1 	.word	0x080145e1
 801459c:	080145e9 	.word	0x080145e9
 80145a0:	080145f1 	.word	0x080145f1
 80145a4:	080145f9 	.word	0x080145f9
 80145a8:	08014601 	.word	0x08014601
 80145ac:	08014609 	.word	0x08014609
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80145b0:	88fa      	ldrh	r2, [r7, #6]
 80145b2:	8a7b      	ldrh	r3, [r7, #18]
 80145b4:	1ad3      	subs	r3, r2, r3
 80145b6:	005b      	lsls	r3, r3, #1
 80145b8:	697a      	ldr	r2, [r7, #20]
 80145ba:	4413      	add	r3, r2
 80145bc:	881b      	ldrh	r3, [r3, #0]
 80145be:	80fb      	strh	r3, [r7, #6]
 80145c0:	e027      	b.n	8014612 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80145c2:	88fa      	ldrh	r2, [r7, #6]
 80145c4:	8a7b      	ldrh	r3, [r7, #18]
 80145c6:	1ad3      	subs	r3, r2, r3
 80145c8:	b29b      	uxth	r3, r3
 80145ca:	f003 0301 	and.w	r3, r3, #1
 80145ce:	b29b      	uxth	r3, r3
 80145d0:	88fa      	ldrh	r2, [r7, #6]
 80145d2:	1ad3      	subs	r3, r2, r3
 80145d4:	80fb      	strh	r3, [r7, #6]
 80145d6:	e01c      	b.n	8014612 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80145d8:	88fb      	ldrh	r3, [r7, #6]
 80145da:	3b10      	subs	r3, #16
 80145dc:	80fb      	strh	r3, [r7, #6]
 80145de:	e018      	b.n	8014612 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80145e0:	88fb      	ldrh	r3, [r7, #6]
 80145e2:	3b20      	subs	r3, #32
 80145e4:	80fb      	strh	r3, [r7, #6]
 80145e6:	e014      	b.n	8014612 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80145e8:	88fb      	ldrh	r3, [r7, #6]
 80145ea:	3b30      	subs	r3, #48	@ 0x30
 80145ec:	80fb      	strh	r3, [r7, #6]
 80145ee:	e010      	b.n	8014612 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80145f0:	88fb      	ldrh	r3, [r7, #6]
 80145f2:	3b1a      	subs	r3, #26
 80145f4:	80fb      	strh	r3, [r7, #6]
 80145f6:	e00c      	b.n	8014612 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80145f8:	88fb      	ldrh	r3, [r7, #6]
 80145fa:	3308      	adds	r3, #8
 80145fc:	80fb      	strh	r3, [r7, #6]
 80145fe:	e008      	b.n	8014612 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8014600:	88fb      	ldrh	r3, [r7, #6]
 8014602:	3b50      	subs	r3, #80	@ 0x50
 8014604:	80fb      	strh	r3, [r7, #6]
 8014606:	e004      	b.n	8014612 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8014608:	88fb      	ldrh	r3, [r7, #6]
 801460a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801460e:	80fb      	strh	r3, [r7, #6]
 8014610:	bf00      	nop
			}
			break;
 8014612:	e008      	b.n	8014626 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8014614:	89fb      	ldrh	r3, [r7, #14]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d195      	bne.n	8014546 <ff_wtoupper+0x1a>
 801461a:	8a3b      	ldrh	r3, [r7, #16]
 801461c:	005b      	lsls	r3, r3, #1
 801461e:	697a      	ldr	r2, [r7, #20]
 8014620:	4413      	add	r3, r2
 8014622:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8014624:	e78f      	b.n	8014546 <ff_wtoupper+0x1a>
			break;
 8014626:	bf00      	nop
	}

	return chr;
 8014628:	88fb      	ldrh	r3, [r7, #6]
}
 801462a:	4618      	mov	r0, r3
 801462c:	371c      	adds	r7, #28
 801462e:	46bd      	mov	sp, r7
 8014630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014634:	4770      	bx	lr
 8014636:	bf00      	nop
 8014638:	080173c8 	.word	0x080173c8
 801463c:	080175bc 	.word	0x080175bc

08014640 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b082      	sub	sp, #8
 8014644:	af00      	add	r7, sp, #0
 8014646:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f000 f811 	bl	8014670 <malloc>
 801464e:	4603      	mov	r3, r0
}
 8014650:	4618      	mov	r0, r3
 8014652:	3708      	adds	r7, #8
 8014654:	46bd      	mov	sp, r7
 8014656:	bd80      	pop	{r7, pc}

08014658 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b082      	sub	sp, #8
 801465c:	af00      	add	r7, sp, #0
 801465e:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8014660:	6878      	ldr	r0, [r7, #4]
 8014662:	f000 f80d 	bl	8014680 <free>
}
 8014666:	bf00      	nop
 8014668:	3708      	adds	r7, #8
 801466a:	46bd      	mov	sp, r7
 801466c:	bd80      	pop	{r7, pc}
	...

08014670 <malloc>:
 8014670:	4b02      	ldr	r3, [pc, #8]	@ (801467c <malloc+0xc>)
 8014672:	4601      	mov	r1, r0
 8014674:	6818      	ldr	r0, [r3, #0]
 8014676:	f000 b82d 	b.w	80146d4 <_malloc_r>
 801467a:	bf00      	nop
 801467c:	20000234 	.word	0x20000234

08014680 <free>:
 8014680:	4b02      	ldr	r3, [pc, #8]	@ (801468c <free+0xc>)
 8014682:	4601      	mov	r1, r0
 8014684:	6818      	ldr	r0, [r3, #0]
 8014686:	f000 bb8b 	b.w	8014da0 <_free_r>
 801468a:	bf00      	nop
 801468c:	20000234 	.word	0x20000234

08014690 <sbrk_aligned>:
 8014690:	b570      	push	{r4, r5, r6, lr}
 8014692:	4e0f      	ldr	r6, [pc, #60]	@ (80146d0 <sbrk_aligned+0x40>)
 8014694:	460c      	mov	r4, r1
 8014696:	6831      	ldr	r1, [r6, #0]
 8014698:	4605      	mov	r5, r0
 801469a:	b911      	cbnz	r1, 80146a2 <sbrk_aligned+0x12>
 801469c:	f000 fb22 	bl	8014ce4 <_sbrk_r>
 80146a0:	6030      	str	r0, [r6, #0]
 80146a2:	4621      	mov	r1, r4
 80146a4:	4628      	mov	r0, r5
 80146a6:	f000 fb1d 	bl	8014ce4 <_sbrk_r>
 80146aa:	1c43      	adds	r3, r0, #1
 80146ac:	d103      	bne.n	80146b6 <sbrk_aligned+0x26>
 80146ae:	f04f 34ff 	mov.w	r4, #4294967295
 80146b2:	4620      	mov	r0, r4
 80146b4:	bd70      	pop	{r4, r5, r6, pc}
 80146b6:	1cc4      	adds	r4, r0, #3
 80146b8:	f024 0403 	bic.w	r4, r4, #3
 80146bc:	42a0      	cmp	r0, r4
 80146be:	d0f8      	beq.n	80146b2 <sbrk_aligned+0x22>
 80146c0:	1a21      	subs	r1, r4, r0
 80146c2:	4628      	mov	r0, r5
 80146c4:	f000 fb0e 	bl	8014ce4 <_sbrk_r>
 80146c8:	3001      	adds	r0, #1
 80146ca:	d1f2      	bne.n	80146b2 <sbrk_aligned+0x22>
 80146cc:	e7ef      	b.n	80146ae <sbrk_aligned+0x1e>
 80146ce:	bf00      	nop
 80146d0:	20015298 	.word	0x20015298

080146d4 <_malloc_r>:
 80146d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146d8:	1ccd      	adds	r5, r1, #3
 80146da:	f025 0503 	bic.w	r5, r5, #3
 80146de:	3508      	adds	r5, #8
 80146e0:	2d0c      	cmp	r5, #12
 80146e2:	bf38      	it	cc
 80146e4:	250c      	movcc	r5, #12
 80146e6:	2d00      	cmp	r5, #0
 80146e8:	4606      	mov	r6, r0
 80146ea:	db01      	blt.n	80146f0 <_malloc_r+0x1c>
 80146ec:	42a9      	cmp	r1, r5
 80146ee:	d904      	bls.n	80146fa <_malloc_r+0x26>
 80146f0:	230c      	movs	r3, #12
 80146f2:	6033      	str	r3, [r6, #0]
 80146f4:	2000      	movs	r0, #0
 80146f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80147d0 <_malloc_r+0xfc>
 80146fe:	f000 f869 	bl	80147d4 <__malloc_lock>
 8014702:	f8d8 3000 	ldr.w	r3, [r8]
 8014706:	461c      	mov	r4, r3
 8014708:	bb44      	cbnz	r4, 801475c <_malloc_r+0x88>
 801470a:	4629      	mov	r1, r5
 801470c:	4630      	mov	r0, r6
 801470e:	f7ff ffbf 	bl	8014690 <sbrk_aligned>
 8014712:	1c43      	adds	r3, r0, #1
 8014714:	4604      	mov	r4, r0
 8014716:	d158      	bne.n	80147ca <_malloc_r+0xf6>
 8014718:	f8d8 4000 	ldr.w	r4, [r8]
 801471c:	4627      	mov	r7, r4
 801471e:	2f00      	cmp	r7, #0
 8014720:	d143      	bne.n	80147aa <_malloc_r+0xd6>
 8014722:	2c00      	cmp	r4, #0
 8014724:	d04b      	beq.n	80147be <_malloc_r+0xea>
 8014726:	6823      	ldr	r3, [r4, #0]
 8014728:	4639      	mov	r1, r7
 801472a:	4630      	mov	r0, r6
 801472c:	eb04 0903 	add.w	r9, r4, r3
 8014730:	f000 fad8 	bl	8014ce4 <_sbrk_r>
 8014734:	4581      	cmp	r9, r0
 8014736:	d142      	bne.n	80147be <_malloc_r+0xea>
 8014738:	6821      	ldr	r1, [r4, #0]
 801473a:	1a6d      	subs	r5, r5, r1
 801473c:	4629      	mov	r1, r5
 801473e:	4630      	mov	r0, r6
 8014740:	f7ff ffa6 	bl	8014690 <sbrk_aligned>
 8014744:	3001      	adds	r0, #1
 8014746:	d03a      	beq.n	80147be <_malloc_r+0xea>
 8014748:	6823      	ldr	r3, [r4, #0]
 801474a:	442b      	add	r3, r5
 801474c:	6023      	str	r3, [r4, #0]
 801474e:	f8d8 3000 	ldr.w	r3, [r8]
 8014752:	685a      	ldr	r2, [r3, #4]
 8014754:	bb62      	cbnz	r2, 80147b0 <_malloc_r+0xdc>
 8014756:	f8c8 7000 	str.w	r7, [r8]
 801475a:	e00f      	b.n	801477c <_malloc_r+0xa8>
 801475c:	6822      	ldr	r2, [r4, #0]
 801475e:	1b52      	subs	r2, r2, r5
 8014760:	d420      	bmi.n	80147a4 <_malloc_r+0xd0>
 8014762:	2a0b      	cmp	r2, #11
 8014764:	d917      	bls.n	8014796 <_malloc_r+0xc2>
 8014766:	1961      	adds	r1, r4, r5
 8014768:	42a3      	cmp	r3, r4
 801476a:	6025      	str	r5, [r4, #0]
 801476c:	bf18      	it	ne
 801476e:	6059      	strne	r1, [r3, #4]
 8014770:	6863      	ldr	r3, [r4, #4]
 8014772:	bf08      	it	eq
 8014774:	f8c8 1000 	streq.w	r1, [r8]
 8014778:	5162      	str	r2, [r4, r5]
 801477a:	604b      	str	r3, [r1, #4]
 801477c:	4630      	mov	r0, r6
 801477e:	f000 f82f 	bl	80147e0 <__malloc_unlock>
 8014782:	f104 000b 	add.w	r0, r4, #11
 8014786:	1d23      	adds	r3, r4, #4
 8014788:	f020 0007 	bic.w	r0, r0, #7
 801478c:	1ac2      	subs	r2, r0, r3
 801478e:	bf1c      	itt	ne
 8014790:	1a1b      	subne	r3, r3, r0
 8014792:	50a3      	strne	r3, [r4, r2]
 8014794:	e7af      	b.n	80146f6 <_malloc_r+0x22>
 8014796:	6862      	ldr	r2, [r4, #4]
 8014798:	42a3      	cmp	r3, r4
 801479a:	bf0c      	ite	eq
 801479c:	f8c8 2000 	streq.w	r2, [r8]
 80147a0:	605a      	strne	r2, [r3, #4]
 80147a2:	e7eb      	b.n	801477c <_malloc_r+0xa8>
 80147a4:	4623      	mov	r3, r4
 80147a6:	6864      	ldr	r4, [r4, #4]
 80147a8:	e7ae      	b.n	8014708 <_malloc_r+0x34>
 80147aa:	463c      	mov	r4, r7
 80147ac:	687f      	ldr	r7, [r7, #4]
 80147ae:	e7b6      	b.n	801471e <_malloc_r+0x4a>
 80147b0:	461a      	mov	r2, r3
 80147b2:	685b      	ldr	r3, [r3, #4]
 80147b4:	42a3      	cmp	r3, r4
 80147b6:	d1fb      	bne.n	80147b0 <_malloc_r+0xdc>
 80147b8:	2300      	movs	r3, #0
 80147ba:	6053      	str	r3, [r2, #4]
 80147bc:	e7de      	b.n	801477c <_malloc_r+0xa8>
 80147be:	230c      	movs	r3, #12
 80147c0:	6033      	str	r3, [r6, #0]
 80147c2:	4630      	mov	r0, r6
 80147c4:	f000 f80c 	bl	80147e0 <__malloc_unlock>
 80147c8:	e794      	b.n	80146f4 <_malloc_r+0x20>
 80147ca:	6005      	str	r5, [r0, #0]
 80147cc:	e7d6      	b.n	801477c <_malloc_r+0xa8>
 80147ce:	bf00      	nop
 80147d0:	2001529c 	.word	0x2001529c

080147d4 <__malloc_lock>:
 80147d4:	4801      	ldr	r0, [pc, #4]	@ (80147dc <__malloc_lock+0x8>)
 80147d6:	f000 bad2 	b.w	8014d7e <__retarget_lock_acquire_recursive>
 80147da:	bf00      	nop
 80147dc:	200153e0 	.word	0x200153e0

080147e0 <__malloc_unlock>:
 80147e0:	4801      	ldr	r0, [pc, #4]	@ (80147e8 <__malloc_unlock+0x8>)
 80147e2:	f000 bacd 	b.w	8014d80 <__retarget_lock_release_recursive>
 80147e6:	bf00      	nop
 80147e8:	200153e0 	.word	0x200153e0

080147ec <std>:
 80147ec:	2300      	movs	r3, #0
 80147ee:	b510      	push	{r4, lr}
 80147f0:	4604      	mov	r4, r0
 80147f2:	e9c0 3300 	strd	r3, r3, [r0]
 80147f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80147fa:	6083      	str	r3, [r0, #8]
 80147fc:	8181      	strh	r1, [r0, #12]
 80147fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8014800:	81c2      	strh	r2, [r0, #14]
 8014802:	6183      	str	r3, [r0, #24]
 8014804:	4619      	mov	r1, r3
 8014806:	2208      	movs	r2, #8
 8014808:	305c      	adds	r0, #92	@ 0x5c
 801480a:	f000 fa2f 	bl	8014c6c <memset>
 801480e:	4b0d      	ldr	r3, [pc, #52]	@ (8014844 <std+0x58>)
 8014810:	6263      	str	r3, [r4, #36]	@ 0x24
 8014812:	4b0d      	ldr	r3, [pc, #52]	@ (8014848 <std+0x5c>)
 8014814:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014816:	4b0d      	ldr	r3, [pc, #52]	@ (801484c <std+0x60>)
 8014818:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801481a:	4b0d      	ldr	r3, [pc, #52]	@ (8014850 <std+0x64>)
 801481c:	6323      	str	r3, [r4, #48]	@ 0x30
 801481e:	4b0d      	ldr	r3, [pc, #52]	@ (8014854 <std+0x68>)
 8014820:	6224      	str	r4, [r4, #32]
 8014822:	429c      	cmp	r4, r3
 8014824:	d006      	beq.n	8014834 <std+0x48>
 8014826:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801482a:	4294      	cmp	r4, r2
 801482c:	d002      	beq.n	8014834 <std+0x48>
 801482e:	33d0      	adds	r3, #208	@ 0xd0
 8014830:	429c      	cmp	r4, r3
 8014832:	d105      	bne.n	8014840 <std+0x54>
 8014834:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801483c:	f000 ba9e 	b.w	8014d7c <__retarget_lock_init_recursive>
 8014840:	bd10      	pop	{r4, pc}
 8014842:	bf00      	nop
 8014844:	08014abd 	.word	0x08014abd
 8014848:	08014adf 	.word	0x08014adf
 801484c:	08014b17 	.word	0x08014b17
 8014850:	08014b3b 	.word	0x08014b3b
 8014854:	200152a0 	.word	0x200152a0

08014858 <stdio_exit_handler>:
 8014858:	4a02      	ldr	r2, [pc, #8]	@ (8014864 <stdio_exit_handler+0xc>)
 801485a:	4903      	ldr	r1, [pc, #12]	@ (8014868 <stdio_exit_handler+0x10>)
 801485c:	4803      	ldr	r0, [pc, #12]	@ (801486c <stdio_exit_handler+0x14>)
 801485e:	f000 b869 	b.w	8014934 <_fwalk_sglue>
 8014862:	bf00      	nop
 8014864:	20000228 	.word	0x20000228
 8014868:	08015789 	.word	0x08015789
 801486c:	20000238 	.word	0x20000238

08014870 <cleanup_stdio>:
 8014870:	6841      	ldr	r1, [r0, #4]
 8014872:	4b0c      	ldr	r3, [pc, #48]	@ (80148a4 <cleanup_stdio+0x34>)
 8014874:	4299      	cmp	r1, r3
 8014876:	b510      	push	{r4, lr}
 8014878:	4604      	mov	r4, r0
 801487a:	d001      	beq.n	8014880 <cleanup_stdio+0x10>
 801487c:	f000 ff84 	bl	8015788 <_fflush_r>
 8014880:	68a1      	ldr	r1, [r4, #8]
 8014882:	4b09      	ldr	r3, [pc, #36]	@ (80148a8 <cleanup_stdio+0x38>)
 8014884:	4299      	cmp	r1, r3
 8014886:	d002      	beq.n	801488e <cleanup_stdio+0x1e>
 8014888:	4620      	mov	r0, r4
 801488a:	f000 ff7d 	bl	8015788 <_fflush_r>
 801488e:	68e1      	ldr	r1, [r4, #12]
 8014890:	4b06      	ldr	r3, [pc, #24]	@ (80148ac <cleanup_stdio+0x3c>)
 8014892:	4299      	cmp	r1, r3
 8014894:	d004      	beq.n	80148a0 <cleanup_stdio+0x30>
 8014896:	4620      	mov	r0, r4
 8014898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801489c:	f000 bf74 	b.w	8015788 <_fflush_r>
 80148a0:	bd10      	pop	{r4, pc}
 80148a2:	bf00      	nop
 80148a4:	200152a0 	.word	0x200152a0
 80148a8:	20015308 	.word	0x20015308
 80148ac:	20015370 	.word	0x20015370

080148b0 <global_stdio_init.part.0>:
 80148b0:	b510      	push	{r4, lr}
 80148b2:	4b0b      	ldr	r3, [pc, #44]	@ (80148e0 <global_stdio_init.part.0+0x30>)
 80148b4:	4c0b      	ldr	r4, [pc, #44]	@ (80148e4 <global_stdio_init.part.0+0x34>)
 80148b6:	4a0c      	ldr	r2, [pc, #48]	@ (80148e8 <global_stdio_init.part.0+0x38>)
 80148b8:	601a      	str	r2, [r3, #0]
 80148ba:	4620      	mov	r0, r4
 80148bc:	2200      	movs	r2, #0
 80148be:	2104      	movs	r1, #4
 80148c0:	f7ff ff94 	bl	80147ec <std>
 80148c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80148c8:	2201      	movs	r2, #1
 80148ca:	2109      	movs	r1, #9
 80148cc:	f7ff ff8e 	bl	80147ec <std>
 80148d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80148d4:	2202      	movs	r2, #2
 80148d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148da:	2112      	movs	r1, #18
 80148dc:	f7ff bf86 	b.w	80147ec <std>
 80148e0:	200153d8 	.word	0x200153d8
 80148e4:	200152a0 	.word	0x200152a0
 80148e8:	08014859 	.word	0x08014859

080148ec <__sfp_lock_acquire>:
 80148ec:	4801      	ldr	r0, [pc, #4]	@ (80148f4 <__sfp_lock_acquire+0x8>)
 80148ee:	f000 ba46 	b.w	8014d7e <__retarget_lock_acquire_recursive>
 80148f2:	bf00      	nop
 80148f4:	200153e1 	.word	0x200153e1

080148f8 <__sfp_lock_release>:
 80148f8:	4801      	ldr	r0, [pc, #4]	@ (8014900 <__sfp_lock_release+0x8>)
 80148fa:	f000 ba41 	b.w	8014d80 <__retarget_lock_release_recursive>
 80148fe:	bf00      	nop
 8014900:	200153e1 	.word	0x200153e1

08014904 <__sinit>:
 8014904:	b510      	push	{r4, lr}
 8014906:	4604      	mov	r4, r0
 8014908:	f7ff fff0 	bl	80148ec <__sfp_lock_acquire>
 801490c:	6a23      	ldr	r3, [r4, #32]
 801490e:	b11b      	cbz	r3, 8014918 <__sinit+0x14>
 8014910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014914:	f7ff bff0 	b.w	80148f8 <__sfp_lock_release>
 8014918:	4b04      	ldr	r3, [pc, #16]	@ (801492c <__sinit+0x28>)
 801491a:	6223      	str	r3, [r4, #32]
 801491c:	4b04      	ldr	r3, [pc, #16]	@ (8014930 <__sinit+0x2c>)
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d1f5      	bne.n	8014910 <__sinit+0xc>
 8014924:	f7ff ffc4 	bl	80148b0 <global_stdio_init.part.0>
 8014928:	e7f2      	b.n	8014910 <__sinit+0xc>
 801492a:	bf00      	nop
 801492c:	08014871 	.word	0x08014871
 8014930:	200153d8 	.word	0x200153d8

08014934 <_fwalk_sglue>:
 8014934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014938:	4607      	mov	r7, r0
 801493a:	4688      	mov	r8, r1
 801493c:	4614      	mov	r4, r2
 801493e:	2600      	movs	r6, #0
 8014940:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014944:	f1b9 0901 	subs.w	r9, r9, #1
 8014948:	d505      	bpl.n	8014956 <_fwalk_sglue+0x22>
 801494a:	6824      	ldr	r4, [r4, #0]
 801494c:	2c00      	cmp	r4, #0
 801494e:	d1f7      	bne.n	8014940 <_fwalk_sglue+0xc>
 8014950:	4630      	mov	r0, r6
 8014952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014956:	89ab      	ldrh	r3, [r5, #12]
 8014958:	2b01      	cmp	r3, #1
 801495a:	d907      	bls.n	801496c <_fwalk_sglue+0x38>
 801495c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014960:	3301      	adds	r3, #1
 8014962:	d003      	beq.n	801496c <_fwalk_sglue+0x38>
 8014964:	4629      	mov	r1, r5
 8014966:	4638      	mov	r0, r7
 8014968:	47c0      	blx	r8
 801496a:	4306      	orrs	r6, r0
 801496c:	3568      	adds	r5, #104	@ 0x68
 801496e:	e7e9      	b.n	8014944 <_fwalk_sglue+0x10>

08014970 <iprintf>:
 8014970:	b40f      	push	{r0, r1, r2, r3}
 8014972:	b507      	push	{r0, r1, r2, lr}
 8014974:	4906      	ldr	r1, [pc, #24]	@ (8014990 <iprintf+0x20>)
 8014976:	ab04      	add	r3, sp, #16
 8014978:	6808      	ldr	r0, [r1, #0]
 801497a:	f853 2b04 	ldr.w	r2, [r3], #4
 801497e:	6881      	ldr	r1, [r0, #8]
 8014980:	9301      	str	r3, [sp, #4]
 8014982:	f000 fbd9 	bl	8015138 <_vfiprintf_r>
 8014986:	b003      	add	sp, #12
 8014988:	f85d eb04 	ldr.w	lr, [sp], #4
 801498c:	b004      	add	sp, #16
 801498e:	4770      	bx	lr
 8014990:	20000234 	.word	0x20000234

08014994 <_puts_r>:
 8014994:	6a03      	ldr	r3, [r0, #32]
 8014996:	b570      	push	{r4, r5, r6, lr}
 8014998:	6884      	ldr	r4, [r0, #8]
 801499a:	4605      	mov	r5, r0
 801499c:	460e      	mov	r6, r1
 801499e:	b90b      	cbnz	r3, 80149a4 <_puts_r+0x10>
 80149a0:	f7ff ffb0 	bl	8014904 <__sinit>
 80149a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80149a6:	07db      	lsls	r3, r3, #31
 80149a8:	d405      	bmi.n	80149b6 <_puts_r+0x22>
 80149aa:	89a3      	ldrh	r3, [r4, #12]
 80149ac:	0598      	lsls	r0, r3, #22
 80149ae:	d402      	bmi.n	80149b6 <_puts_r+0x22>
 80149b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80149b2:	f000 f9e4 	bl	8014d7e <__retarget_lock_acquire_recursive>
 80149b6:	89a3      	ldrh	r3, [r4, #12]
 80149b8:	0719      	lsls	r1, r3, #28
 80149ba:	d502      	bpl.n	80149c2 <_puts_r+0x2e>
 80149bc:	6923      	ldr	r3, [r4, #16]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d135      	bne.n	8014a2e <_puts_r+0x9a>
 80149c2:	4621      	mov	r1, r4
 80149c4:	4628      	mov	r0, r5
 80149c6:	f000 f8fb 	bl	8014bc0 <__swsetup_r>
 80149ca:	b380      	cbz	r0, 8014a2e <_puts_r+0x9a>
 80149cc:	f04f 35ff 	mov.w	r5, #4294967295
 80149d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80149d2:	07da      	lsls	r2, r3, #31
 80149d4:	d405      	bmi.n	80149e2 <_puts_r+0x4e>
 80149d6:	89a3      	ldrh	r3, [r4, #12]
 80149d8:	059b      	lsls	r3, r3, #22
 80149da:	d402      	bmi.n	80149e2 <_puts_r+0x4e>
 80149dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80149de:	f000 f9cf 	bl	8014d80 <__retarget_lock_release_recursive>
 80149e2:	4628      	mov	r0, r5
 80149e4:	bd70      	pop	{r4, r5, r6, pc}
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	da04      	bge.n	80149f4 <_puts_r+0x60>
 80149ea:	69a2      	ldr	r2, [r4, #24]
 80149ec:	429a      	cmp	r2, r3
 80149ee:	dc17      	bgt.n	8014a20 <_puts_r+0x8c>
 80149f0:	290a      	cmp	r1, #10
 80149f2:	d015      	beq.n	8014a20 <_puts_r+0x8c>
 80149f4:	6823      	ldr	r3, [r4, #0]
 80149f6:	1c5a      	adds	r2, r3, #1
 80149f8:	6022      	str	r2, [r4, #0]
 80149fa:	7019      	strb	r1, [r3, #0]
 80149fc:	68a3      	ldr	r3, [r4, #8]
 80149fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014a02:	3b01      	subs	r3, #1
 8014a04:	60a3      	str	r3, [r4, #8]
 8014a06:	2900      	cmp	r1, #0
 8014a08:	d1ed      	bne.n	80149e6 <_puts_r+0x52>
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	da11      	bge.n	8014a32 <_puts_r+0x9e>
 8014a0e:	4622      	mov	r2, r4
 8014a10:	210a      	movs	r1, #10
 8014a12:	4628      	mov	r0, r5
 8014a14:	f000 f895 	bl	8014b42 <__swbuf_r>
 8014a18:	3001      	adds	r0, #1
 8014a1a:	d0d7      	beq.n	80149cc <_puts_r+0x38>
 8014a1c:	250a      	movs	r5, #10
 8014a1e:	e7d7      	b.n	80149d0 <_puts_r+0x3c>
 8014a20:	4622      	mov	r2, r4
 8014a22:	4628      	mov	r0, r5
 8014a24:	f000 f88d 	bl	8014b42 <__swbuf_r>
 8014a28:	3001      	adds	r0, #1
 8014a2a:	d1e7      	bne.n	80149fc <_puts_r+0x68>
 8014a2c:	e7ce      	b.n	80149cc <_puts_r+0x38>
 8014a2e:	3e01      	subs	r6, #1
 8014a30:	e7e4      	b.n	80149fc <_puts_r+0x68>
 8014a32:	6823      	ldr	r3, [r4, #0]
 8014a34:	1c5a      	adds	r2, r3, #1
 8014a36:	6022      	str	r2, [r4, #0]
 8014a38:	220a      	movs	r2, #10
 8014a3a:	701a      	strb	r2, [r3, #0]
 8014a3c:	e7ee      	b.n	8014a1c <_puts_r+0x88>
	...

08014a40 <puts>:
 8014a40:	4b02      	ldr	r3, [pc, #8]	@ (8014a4c <puts+0xc>)
 8014a42:	4601      	mov	r1, r0
 8014a44:	6818      	ldr	r0, [r3, #0]
 8014a46:	f7ff bfa5 	b.w	8014994 <_puts_r>
 8014a4a:	bf00      	nop
 8014a4c:	20000234 	.word	0x20000234

08014a50 <sniprintf>:
 8014a50:	b40c      	push	{r2, r3}
 8014a52:	b530      	push	{r4, r5, lr}
 8014a54:	4b18      	ldr	r3, [pc, #96]	@ (8014ab8 <sniprintf+0x68>)
 8014a56:	1e0c      	subs	r4, r1, #0
 8014a58:	681d      	ldr	r5, [r3, #0]
 8014a5a:	b09d      	sub	sp, #116	@ 0x74
 8014a5c:	da08      	bge.n	8014a70 <sniprintf+0x20>
 8014a5e:	238b      	movs	r3, #139	@ 0x8b
 8014a60:	602b      	str	r3, [r5, #0]
 8014a62:	f04f 30ff 	mov.w	r0, #4294967295
 8014a66:	b01d      	add	sp, #116	@ 0x74
 8014a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014a6c:	b002      	add	sp, #8
 8014a6e:	4770      	bx	lr
 8014a70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014a74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014a78:	f04f 0300 	mov.w	r3, #0
 8014a7c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8014a7e:	bf14      	ite	ne
 8014a80:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014a84:	4623      	moveq	r3, r4
 8014a86:	9304      	str	r3, [sp, #16]
 8014a88:	9307      	str	r3, [sp, #28]
 8014a8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014a8e:	9002      	str	r0, [sp, #8]
 8014a90:	9006      	str	r0, [sp, #24]
 8014a92:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014a96:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014a98:	ab21      	add	r3, sp, #132	@ 0x84
 8014a9a:	a902      	add	r1, sp, #8
 8014a9c:	4628      	mov	r0, r5
 8014a9e:	9301      	str	r3, [sp, #4]
 8014aa0:	f000 fa24 	bl	8014eec <_svfiprintf_r>
 8014aa4:	1c43      	adds	r3, r0, #1
 8014aa6:	bfbc      	itt	lt
 8014aa8:	238b      	movlt	r3, #139	@ 0x8b
 8014aaa:	602b      	strlt	r3, [r5, #0]
 8014aac:	2c00      	cmp	r4, #0
 8014aae:	d0da      	beq.n	8014a66 <sniprintf+0x16>
 8014ab0:	9b02      	ldr	r3, [sp, #8]
 8014ab2:	2200      	movs	r2, #0
 8014ab4:	701a      	strb	r2, [r3, #0]
 8014ab6:	e7d6      	b.n	8014a66 <sniprintf+0x16>
 8014ab8:	20000234 	.word	0x20000234

08014abc <__sread>:
 8014abc:	b510      	push	{r4, lr}
 8014abe:	460c      	mov	r4, r1
 8014ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ac4:	f000 f8fc 	bl	8014cc0 <_read_r>
 8014ac8:	2800      	cmp	r0, #0
 8014aca:	bfab      	itete	ge
 8014acc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014ace:	89a3      	ldrhlt	r3, [r4, #12]
 8014ad0:	181b      	addge	r3, r3, r0
 8014ad2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014ad6:	bfac      	ite	ge
 8014ad8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014ada:	81a3      	strhlt	r3, [r4, #12]
 8014adc:	bd10      	pop	{r4, pc}

08014ade <__swrite>:
 8014ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ae2:	461f      	mov	r7, r3
 8014ae4:	898b      	ldrh	r3, [r1, #12]
 8014ae6:	05db      	lsls	r3, r3, #23
 8014ae8:	4605      	mov	r5, r0
 8014aea:	460c      	mov	r4, r1
 8014aec:	4616      	mov	r6, r2
 8014aee:	d505      	bpl.n	8014afc <__swrite+0x1e>
 8014af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014af4:	2302      	movs	r3, #2
 8014af6:	2200      	movs	r2, #0
 8014af8:	f000 f8d0 	bl	8014c9c <_lseek_r>
 8014afc:	89a3      	ldrh	r3, [r4, #12]
 8014afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014b06:	81a3      	strh	r3, [r4, #12]
 8014b08:	4632      	mov	r2, r6
 8014b0a:	463b      	mov	r3, r7
 8014b0c:	4628      	mov	r0, r5
 8014b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b12:	f000 b8f7 	b.w	8014d04 <_write_r>

08014b16 <__sseek>:
 8014b16:	b510      	push	{r4, lr}
 8014b18:	460c      	mov	r4, r1
 8014b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b1e:	f000 f8bd 	bl	8014c9c <_lseek_r>
 8014b22:	1c43      	adds	r3, r0, #1
 8014b24:	89a3      	ldrh	r3, [r4, #12]
 8014b26:	bf15      	itete	ne
 8014b28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014b2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014b2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014b32:	81a3      	strheq	r3, [r4, #12]
 8014b34:	bf18      	it	ne
 8014b36:	81a3      	strhne	r3, [r4, #12]
 8014b38:	bd10      	pop	{r4, pc}

08014b3a <__sclose>:
 8014b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b3e:	f000 b89d 	b.w	8014c7c <_close_r>

08014b42 <__swbuf_r>:
 8014b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b44:	460e      	mov	r6, r1
 8014b46:	4614      	mov	r4, r2
 8014b48:	4605      	mov	r5, r0
 8014b4a:	b118      	cbz	r0, 8014b54 <__swbuf_r+0x12>
 8014b4c:	6a03      	ldr	r3, [r0, #32]
 8014b4e:	b90b      	cbnz	r3, 8014b54 <__swbuf_r+0x12>
 8014b50:	f7ff fed8 	bl	8014904 <__sinit>
 8014b54:	69a3      	ldr	r3, [r4, #24]
 8014b56:	60a3      	str	r3, [r4, #8]
 8014b58:	89a3      	ldrh	r3, [r4, #12]
 8014b5a:	071a      	lsls	r2, r3, #28
 8014b5c:	d501      	bpl.n	8014b62 <__swbuf_r+0x20>
 8014b5e:	6923      	ldr	r3, [r4, #16]
 8014b60:	b943      	cbnz	r3, 8014b74 <__swbuf_r+0x32>
 8014b62:	4621      	mov	r1, r4
 8014b64:	4628      	mov	r0, r5
 8014b66:	f000 f82b 	bl	8014bc0 <__swsetup_r>
 8014b6a:	b118      	cbz	r0, 8014b74 <__swbuf_r+0x32>
 8014b6c:	f04f 37ff 	mov.w	r7, #4294967295
 8014b70:	4638      	mov	r0, r7
 8014b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b74:	6823      	ldr	r3, [r4, #0]
 8014b76:	6922      	ldr	r2, [r4, #16]
 8014b78:	1a98      	subs	r0, r3, r2
 8014b7a:	6963      	ldr	r3, [r4, #20]
 8014b7c:	b2f6      	uxtb	r6, r6
 8014b7e:	4283      	cmp	r3, r0
 8014b80:	4637      	mov	r7, r6
 8014b82:	dc05      	bgt.n	8014b90 <__swbuf_r+0x4e>
 8014b84:	4621      	mov	r1, r4
 8014b86:	4628      	mov	r0, r5
 8014b88:	f000 fdfe 	bl	8015788 <_fflush_r>
 8014b8c:	2800      	cmp	r0, #0
 8014b8e:	d1ed      	bne.n	8014b6c <__swbuf_r+0x2a>
 8014b90:	68a3      	ldr	r3, [r4, #8]
 8014b92:	3b01      	subs	r3, #1
 8014b94:	60a3      	str	r3, [r4, #8]
 8014b96:	6823      	ldr	r3, [r4, #0]
 8014b98:	1c5a      	adds	r2, r3, #1
 8014b9a:	6022      	str	r2, [r4, #0]
 8014b9c:	701e      	strb	r6, [r3, #0]
 8014b9e:	6962      	ldr	r2, [r4, #20]
 8014ba0:	1c43      	adds	r3, r0, #1
 8014ba2:	429a      	cmp	r2, r3
 8014ba4:	d004      	beq.n	8014bb0 <__swbuf_r+0x6e>
 8014ba6:	89a3      	ldrh	r3, [r4, #12]
 8014ba8:	07db      	lsls	r3, r3, #31
 8014baa:	d5e1      	bpl.n	8014b70 <__swbuf_r+0x2e>
 8014bac:	2e0a      	cmp	r6, #10
 8014bae:	d1df      	bne.n	8014b70 <__swbuf_r+0x2e>
 8014bb0:	4621      	mov	r1, r4
 8014bb2:	4628      	mov	r0, r5
 8014bb4:	f000 fde8 	bl	8015788 <_fflush_r>
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	d0d9      	beq.n	8014b70 <__swbuf_r+0x2e>
 8014bbc:	e7d6      	b.n	8014b6c <__swbuf_r+0x2a>
	...

08014bc0 <__swsetup_r>:
 8014bc0:	b538      	push	{r3, r4, r5, lr}
 8014bc2:	4b29      	ldr	r3, [pc, #164]	@ (8014c68 <__swsetup_r+0xa8>)
 8014bc4:	4605      	mov	r5, r0
 8014bc6:	6818      	ldr	r0, [r3, #0]
 8014bc8:	460c      	mov	r4, r1
 8014bca:	b118      	cbz	r0, 8014bd4 <__swsetup_r+0x14>
 8014bcc:	6a03      	ldr	r3, [r0, #32]
 8014bce:	b90b      	cbnz	r3, 8014bd4 <__swsetup_r+0x14>
 8014bd0:	f7ff fe98 	bl	8014904 <__sinit>
 8014bd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bd8:	0719      	lsls	r1, r3, #28
 8014bda:	d422      	bmi.n	8014c22 <__swsetup_r+0x62>
 8014bdc:	06da      	lsls	r2, r3, #27
 8014bde:	d407      	bmi.n	8014bf0 <__swsetup_r+0x30>
 8014be0:	2209      	movs	r2, #9
 8014be2:	602a      	str	r2, [r5, #0]
 8014be4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014be8:	81a3      	strh	r3, [r4, #12]
 8014bea:	f04f 30ff 	mov.w	r0, #4294967295
 8014bee:	e033      	b.n	8014c58 <__swsetup_r+0x98>
 8014bf0:	0758      	lsls	r0, r3, #29
 8014bf2:	d512      	bpl.n	8014c1a <__swsetup_r+0x5a>
 8014bf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014bf6:	b141      	cbz	r1, 8014c0a <__swsetup_r+0x4a>
 8014bf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014bfc:	4299      	cmp	r1, r3
 8014bfe:	d002      	beq.n	8014c06 <__swsetup_r+0x46>
 8014c00:	4628      	mov	r0, r5
 8014c02:	f000 f8cd 	bl	8014da0 <_free_r>
 8014c06:	2300      	movs	r3, #0
 8014c08:	6363      	str	r3, [r4, #52]	@ 0x34
 8014c0a:	89a3      	ldrh	r3, [r4, #12]
 8014c0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014c10:	81a3      	strh	r3, [r4, #12]
 8014c12:	2300      	movs	r3, #0
 8014c14:	6063      	str	r3, [r4, #4]
 8014c16:	6923      	ldr	r3, [r4, #16]
 8014c18:	6023      	str	r3, [r4, #0]
 8014c1a:	89a3      	ldrh	r3, [r4, #12]
 8014c1c:	f043 0308 	orr.w	r3, r3, #8
 8014c20:	81a3      	strh	r3, [r4, #12]
 8014c22:	6923      	ldr	r3, [r4, #16]
 8014c24:	b94b      	cbnz	r3, 8014c3a <__swsetup_r+0x7a>
 8014c26:	89a3      	ldrh	r3, [r4, #12]
 8014c28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014c30:	d003      	beq.n	8014c3a <__swsetup_r+0x7a>
 8014c32:	4621      	mov	r1, r4
 8014c34:	4628      	mov	r0, r5
 8014c36:	f000 fdf5 	bl	8015824 <__smakebuf_r>
 8014c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c3e:	f013 0201 	ands.w	r2, r3, #1
 8014c42:	d00a      	beq.n	8014c5a <__swsetup_r+0x9a>
 8014c44:	2200      	movs	r2, #0
 8014c46:	60a2      	str	r2, [r4, #8]
 8014c48:	6962      	ldr	r2, [r4, #20]
 8014c4a:	4252      	negs	r2, r2
 8014c4c:	61a2      	str	r2, [r4, #24]
 8014c4e:	6922      	ldr	r2, [r4, #16]
 8014c50:	b942      	cbnz	r2, 8014c64 <__swsetup_r+0xa4>
 8014c52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014c56:	d1c5      	bne.n	8014be4 <__swsetup_r+0x24>
 8014c58:	bd38      	pop	{r3, r4, r5, pc}
 8014c5a:	0799      	lsls	r1, r3, #30
 8014c5c:	bf58      	it	pl
 8014c5e:	6962      	ldrpl	r2, [r4, #20]
 8014c60:	60a2      	str	r2, [r4, #8]
 8014c62:	e7f4      	b.n	8014c4e <__swsetup_r+0x8e>
 8014c64:	2000      	movs	r0, #0
 8014c66:	e7f7      	b.n	8014c58 <__swsetup_r+0x98>
 8014c68:	20000234 	.word	0x20000234

08014c6c <memset>:
 8014c6c:	4402      	add	r2, r0
 8014c6e:	4603      	mov	r3, r0
 8014c70:	4293      	cmp	r3, r2
 8014c72:	d100      	bne.n	8014c76 <memset+0xa>
 8014c74:	4770      	bx	lr
 8014c76:	f803 1b01 	strb.w	r1, [r3], #1
 8014c7a:	e7f9      	b.n	8014c70 <memset+0x4>

08014c7c <_close_r>:
 8014c7c:	b538      	push	{r3, r4, r5, lr}
 8014c7e:	4d06      	ldr	r5, [pc, #24]	@ (8014c98 <_close_r+0x1c>)
 8014c80:	2300      	movs	r3, #0
 8014c82:	4604      	mov	r4, r0
 8014c84:	4608      	mov	r0, r1
 8014c86:	602b      	str	r3, [r5, #0]
 8014c88:	f7ed ffab 	bl	8002be2 <_close>
 8014c8c:	1c43      	adds	r3, r0, #1
 8014c8e:	d102      	bne.n	8014c96 <_close_r+0x1a>
 8014c90:	682b      	ldr	r3, [r5, #0]
 8014c92:	b103      	cbz	r3, 8014c96 <_close_r+0x1a>
 8014c94:	6023      	str	r3, [r4, #0]
 8014c96:	bd38      	pop	{r3, r4, r5, pc}
 8014c98:	200153dc 	.word	0x200153dc

08014c9c <_lseek_r>:
 8014c9c:	b538      	push	{r3, r4, r5, lr}
 8014c9e:	4d07      	ldr	r5, [pc, #28]	@ (8014cbc <_lseek_r+0x20>)
 8014ca0:	4604      	mov	r4, r0
 8014ca2:	4608      	mov	r0, r1
 8014ca4:	4611      	mov	r1, r2
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	602a      	str	r2, [r5, #0]
 8014caa:	461a      	mov	r2, r3
 8014cac:	f7ed ffc0 	bl	8002c30 <_lseek>
 8014cb0:	1c43      	adds	r3, r0, #1
 8014cb2:	d102      	bne.n	8014cba <_lseek_r+0x1e>
 8014cb4:	682b      	ldr	r3, [r5, #0]
 8014cb6:	b103      	cbz	r3, 8014cba <_lseek_r+0x1e>
 8014cb8:	6023      	str	r3, [r4, #0]
 8014cba:	bd38      	pop	{r3, r4, r5, pc}
 8014cbc:	200153dc 	.word	0x200153dc

08014cc0 <_read_r>:
 8014cc0:	b538      	push	{r3, r4, r5, lr}
 8014cc2:	4d07      	ldr	r5, [pc, #28]	@ (8014ce0 <_read_r+0x20>)
 8014cc4:	4604      	mov	r4, r0
 8014cc6:	4608      	mov	r0, r1
 8014cc8:	4611      	mov	r1, r2
 8014cca:	2200      	movs	r2, #0
 8014ccc:	602a      	str	r2, [r5, #0]
 8014cce:	461a      	mov	r2, r3
 8014cd0:	f7ed ff6a 	bl	8002ba8 <_read>
 8014cd4:	1c43      	adds	r3, r0, #1
 8014cd6:	d102      	bne.n	8014cde <_read_r+0x1e>
 8014cd8:	682b      	ldr	r3, [r5, #0]
 8014cda:	b103      	cbz	r3, 8014cde <_read_r+0x1e>
 8014cdc:	6023      	str	r3, [r4, #0]
 8014cde:	bd38      	pop	{r3, r4, r5, pc}
 8014ce0:	200153dc 	.word	0x200153dc

08014ce4 <_sbrk_r>:
 8014ce4:	b538      	push	{r3, r4, r5, lr}
 8014ce6:	4d06      	ldr	r5, [pc, #24]	@ (8014d00 <_sbrk_r+0x1c>)
 8014ce8:	2300      	movs	r3, #0
 8014cea:	4604      	mov	r4, r0
 8014cec:	4608      	mov	r0, r1
 8014cee:	602b      	str	r3, [r5, #0]
 8014cf0:	f7ed ffac 	bl	8002c4c <_sbrk>
 8014cf4:	1c43      	adds	r3, r0, #1
 8014cf6:	d102      	bne.n	8014cfe <_sbrk_r+0x1a>
 8014cf8:	682b      	ldr	r3, [r5, #0]
 8014cfa:	b103      	cbz	r3, 8014cfe <_sbrk_r+0x1a>
 8014cfc:	6023      	str	r3, [r4, #0]
 8014cfe:	bd38      	pop	{r3, r4, r5, pc}
 8014d00:	200153dc 	.word	0x200153dc

08014d04 <_write_r>:
 8014d04:	b538      	push	{r3, r4, r5, lr}
 8014d06:	4d07      	ldr	r5, [pc, #28]	@ (8014d24 <_write_r+0x20>)
 8014d08:	4604      	mov	r4, r0
 8014d0a:	4608      	mov	r0, r1
 8014d0c:	4611      	mov	r1, r2
 8014d0e:	2200      	movs	r2, #0
 8014d10:	602a      	str	r2, [r5, #0]
 8014d12:	461a      	mov	r2, r3
 8014d14:	f7ec f96d 	bl	8000ff2 <_write>
 8014d18:	1c43      	adds	r3, r0, #1
 8014d1a:	d102      	bne.n	8014d22 <_write_r+0x1e>
 8014d1c:	682b      	ldr	r3, [r5, #0]
 8014d1e:	b103      	cbz	r3, 8014d22 <_write_r+0x1e>
 8014d20:	6023      	str	r3, [r4, #0]
 8014d22:	bd38      	pop	{r3, r4, r5, pc}
 8014d24:	200153dc 	.word	0x200153dc

08014d28 <__errno>:
 8014d28:	4b01      	ldr	r3, [pc, #4]	@ (8014d30 <__errno+0x8>)
 8014d2a:	6818      	ldr	r0, [r3, #0]
 8014d2c:	4770      	bx	lr
 8014d2e:	bf00      	nop
 8014d30:	20000234 	.word	0x20000234

08014d34 <__libc_init_array>:
 8014d34:	b570      	push	{r4, r5, r6, lr}
 8014d36:	4d0d      	ldr	r5, [pc, #52]	@ (8014d6c <__libc_init_array+0x38>)
 8014d38:	4c0d      	ldr	r4, [pc, #52]	@ (8014d70 <__libc_init_array+0x3c>)
 8014d3a:	1b64      	subs	r4, r4, r5
 8014d3c:	10a4      	asrs	r4, r4, #2
 8014d3e:	2600      	movs	r6, #0
 8014d40:	42a6      	cmp	r6, r4
 8014d42:	d109      	bne.n	8014d58 <__libc_init_array+0x24>
 8014d44:	4d0b      	ldr	r5, [pc, #44]	@ (8014d74 <__libc_init_array+0x40>)
 8014d46:	4c0c      	ldr	r4, [pc, #48]	@ (8014d78 <__libc_init_array+0x44>)
 8014d48:	f001 fdb4 	bl	80168b4 <_init>
 8014d4c:	1b64      	subs	r4, r4, r5
 8014d4e:	10a4      	asrs	r4, r4, #2
 8014d50:	2600      	movs	r6, #0
 8014d52:	42a6      	cmp	r6, r4
 8014d54:	d105      	bne.n	8014d62 <__libc_init_array+0x2e>
 8014d56:	bd70      	pop	{r4, r5, r6, pc}
 8014d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d5c:	4798      	blx	r3
 8014d5e:	3601      	adds	r6, #1
 8014d60:	e7ee      	b.n	8014d40 <__libc_init_array+0xc>
 8014d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d66:	4798      	blx	r3
 8014d68:	3601      	adds	r6, #1
 8014d6a:	e7f2      	b.n	8014d52 <__libc_init_array+0x1e>
 8014d6c:	080176f8 	.word	0x080176f8
 8014d70:	080176f8 	.word	0x080176f8
 8014d74:	080176f8 	.word	0x080176f8
 8014d78:	080176fc 	.word	0x080176fc

08014d7c <__retarget_lock_init_recursive>:
 8014d7c:	4770      	bx	lr

08014d7e <__retarget_lock_acquire_recursive>:
 8014d7e:	4770      	bx	lr

08014d80 <__retarget_lock_release_recursive>:
 8014d80:	4770      	bx	lr

08014d82 <memcpy>:
 8014d82:	440a      	add	r2, r1
 8014d84:	4291      	cmp	r1, r2
 8014d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8014d8a:	d100      	bne.n	8014d8e <memcpy+0xc>
 8014d8c:	4770      	bx	lr
 8014d8e:	b510      	push	{r4, lr}
 8014d90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014d98:	4291      	cmp	r1, r2
 8014d9a:	d1f9      	bne.n	8014d90 <memcpy+0xe>
 8014d9c:	bd10      	pop	{r4, pc}
	...

08014da0 <_free_r>:
 8014da0:	b538      	push	{r3, r4, r5, lr}
 8014da2:	4605      	mov	r5, r0
 8014da4:	2900      	cmp	r1, #0
 8014da6:	d041      	beq.n	8014e2c <_free_r+0x8c>
 8014da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014dac:	1f0c      	subs	r4, r1, #4
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	bfb8      	it	lt
 8014db2:	18e4      	addlt	r4, r4, r3
 8014db4:	f7ff fd0e 	bl	80147d4 <__malloc_lock>
 8014db8:	4a1d      	ldr	r2, [pc, #116]	@ (8014e30 <_free_r+0x90>)
 8014dba:	6813      	ldr	r3, [r2, #0]
 8014dbc:	b933      	cbnz	r3, 8014dcc <_free_r+0x2c>
 8014dbe:	6063      	str	r3, [r4, #4]
 8014dc0:	6014      	str	r4, [r2, #0]
 8014dc2:	4628      	mov	r0, r5
 8014dc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014dc8:	f7ff bd0a 	b.w	80147e0 <__malloc_unlock>
 8014dcc:	42a3      	cmp	r3, r4
 8014dce:	d908      	bls.n	8014de2 <_free_r+0x42>
 8014dd0:	6820      	ldr	r0, [r4, #0]
 8014dd2:	1821      	adds	r1, r4, r0
 8014dd4:	428b      	cmp	r3, r1
 8014dd6:	bf01      	itttt	eq
 8014dd8:	6819      	ldreq	r1, [r3, #0]
 8014dda:	685b      	ldreq	r3, [r3, #4]
 8014ddc:	1809      	addeq	r1, r1, r0
 8014dde:	6021      	streq	r1, [r4, #0]
 8014de0:	e7ed      	b.n	8014dbe <_free_r+0x1e>
 8014de2:	461a      	mov	r2, r3
 8014de4:	685b      	ldr	r3, [r3, #4]
 8014de6:	b10b      	cbz	r3, 8014dec <_free_r+0x4c>
 8014de8:	42a3      	cmp	r3, r4
 8014dea:	d9fa      	bls.n	8014de2 <_free_r+0x42>
 8014dec:	6811      	ldr	r1, [r2, #0]
 8014dee:	1850      	adds	r0, r2, r1
 8014df0:	42a0      	cmp	r0, r4
 8014df2:	d10b      	bne.n	8014e0c <_free_r+0x6c>
 8014df4:	6820      	ldr	r0, [r4, #0]
 8014df6:	4401      	add	r1, r0
 8014df8:	1850      	adds	r0, r2, r1
 8014dfa:	4283      	cmp	r3, r0
 8014dfc:	6011      	str	r1, [r2, #0]
 8014dfe:	d1e0      	bne.n	8014dc2 <_free_r+0x22>
 8014e00:	6818      	ldr	r0, [r3, #0]
 8014e02:	685b      	ldr	r3, [r3, #4]
 8014e04:	6053      	str	r3, [r2, #4]
 8014e06:	4408      	add	r0, r1
 8014e08:	6010      	str	r0, [r2, #0]
 8014e0a:	e7da      	b.n	8014dc2 <_free_r+0x22>
 8014e0c:	d902      	bls.n	8014e14 <_free_r+0x74>
 8014e0e:	230c      	movs	r3, #12
 8014e10:	602b      	str	r3, [r5, #0]
 8014e12:	e7d6      	b.n	8014dc2 <_free_r+0x22>
 8014e14:	6820      	ldr	r0, [r4, #0]
 8014e16:	1821      	adds	r1, r4, r0
 8014e18:	428b      	cmp	r3, r1
 8014e1a:	bf04      	itt	eq
 8014e1c:	6819      	ldreq	r1, [r3, #0]
 8014e1e:	685b      	ldreq	r3, [r3, #4]
 8014e20:	6063      	str	r3, [r4, #4]
 8014e22:	bf04      	itt	eq
 8014e24:	1809      	addeq	r1, r1, r0
 8014e26:	6021      	streq	r1, [r4, #0]
 8014e28:	6054      	str	r4, [r2, #4]
 8014e2a:	e7ca      	b.n	8014dc2 <_free_r+0x22>
 8014e2c:	bd38      	pop	{r3, r4, r5, pc}
 8014e2e:	bf00      	nop
 8014e30:	2001529c 	.word	0x2001529c

08014e34 <__ssputs_r>:
 8014e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e38:	688e      	ldr	r6, [r1, #8]
 8014e3a:	461f      	mov	r7, r3
 8014e3c:	42be      	cmp	r6, r7
 8014e3e:	680b      	ldr	r3, [r1, #0]
 8014e40:	4682      	mov	sl, r0
 8014e42:	460c      	mov	r4, r1
 8014e44:	4690      	mov	r8, r2
 8014e46:	d82d      	bhi.n	8014ea4 <__ssputs_r+0x70>
 8014e48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014e4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014e50:	d026      	beq.n	8014ea0 <__ssputs_r+0x6c>
 8014e52:	6965      	ldr	r5, [r4, #20]
 8014e54:	6909      	ldr	r1, [r1, #16]
 8014e56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014e5a:	eba3 0901 	sub.w	r9, r3, r1
 8014e5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014e62:	1c7b      	adds	r3, r7, #1
 8014e64:	444b      	add	r3, r9
 8014e66:	106d      	asrs	r5, r5, #1
 8014e68:	429d      	cmp	r5, r3
 8014e6a:	bf38      	it	cc
 8014e6c:	461d      	movcc	r5, r3
 8014e6e:	0553      	lsls	r3, r2, #21
 8014e70:	d527      	bpl.n	8014ec2 <__ssputs_r+0x8e>
 8014e72:	4629      	mov	r1, r5
 8014e74:	f7ff fc2e 	bl	80146d4 <_malloc_r>
 8014e78:	4606      	mov	r6, r0
 8014e7a:	b360      	cbz	r0, 8014ed6 <__ssputs_r+0xa2>
 8014e7c:	6921      	ldr	r1, [r4, #16]
 8014e7e:	464a      	mov	r2, r9
 8014e80:	f7ff ff7f 	bl	8014d82 <memcpy>
 8014e84:	89a3      	ldrh	r3, [r4, #12]
 8014e86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8014e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014e8e:	81a3      	strh	r3, [r4, #12]
 8014e90:	6126      	str	r6, [r4, #16]
 8014e92:	6165      	str	r5, [r4, #20]
 8014e94:	444e      	add	r6, r9
 8014e96:	eba5 0509 	sub.w	r5, r5, r9
 8014e9a:	6026      	str	r6, [r4, #0]
 8014e9c:	60a5      	str	r5, [r4, #8]
 8014e9e:	463e      	mov	r6, r7
 8014ea0:	42be      	cmp	r6, r7
 8014ea2:	d900      	bls.n	8014ea6 <__ssputs_r+0x72>
 8014ea4:	463e      	mov	r6, r7
 8014ea6:	6820      	ldr	r0, [r4, #0]
 8014ea8:	4632      	mov	r2, r6
 8014eaa:	4641      	mov	r1, r8
 8014eac:	f000 fcf6 	bl	801589c <memmove>
 8014eb0:	68a3      	ldr	r3, [r4, #8]
 8014eb2:	1b9b      	subs	r3, r3, r6
 8014eb4:	60a3      	str	r3, [r4, #8]
 8014eb6:	6823      	ldr	r3, [r4, #0]
 8014eb8:	4433      	add	r3, r6
 8014eba:	6023      	str	r3, [r4, #0]
 8014ebc:	2000      	movs	r0, #0
 8014ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ec2:	462a      	mov	r2, r5
 8014ec4:	f000 fd26 	bl	8015914 <_realloc_r>
 8014ec8:	4606      	mov	r6, r0
 8014eca:	2800      	cmp	r0, #0
 8014ecc:	d1e0      	bne.n	8014e90 <__ssputs_r+0x5c>
 8014ece:	6921      	ldr	r1, [r4, #16]
 8014ed0:	4650      	mov	r0, sl
 8014ed2:	f7ff ff65 	bl	8014da0 <_free_r>
 8014ed6:	230c      	movs	r3, #12
 8014ed8:	f8ca 3000 	str.w	r3, [sl]
 8014edc:	89a3      	ldrh	r3, [r4, #12]
 8014ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014ee2:	81a3      	strh	r3, [r4, #12]
 8014ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8014ee8:	e7e9      	b.n	8014ebe <__ssputs_r+0x8a>
	...

08014eec <_svfiprintf_r>:
 8014eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ef0:	4698      	mov	r8, r3
 8014ef2:	898b      	ldrh	r3, [r1, #12]
 8014ef4:	061b      	lsls	r3, r3, #24
 8014ef6:	b09d      	sub	sp, #116	@ 0x74
 8014ef8:	4607      	mov	r7, r0
 8014efa:	460d      	mov	r5, r1
 8014efc:	4614      	mov	r4, r2
 8014efe:	d510      	bpl.n	8014f22 <_svfiprintf_r+0x36>
 8014f00:	690b      	ldr	r3, [r1, #16]
 8014f02:	b973      	cbnz	r3, 8014f22 <_svfiprintf_r+0x36>
 8014f04:	2140      	movs	r1, #64	@ 0x40
 8014f06:	f7ff fbe5 	bl	80146d4 <_malloc_r>
 8014f0a:	6028      	str	r0, [r5, #0]
 8014f0c:	6128      	str	r0, [r5, #16]
 8014f0e:	b930      	cbnz	r0, 8014f1e <_svfiprintf_r+0x32>
 8014f10:	230c      	movs	r3, #12
 8014f12:	603b      	str	r3, [r7, #0]
 8014f14:	f04f 30ff 	mov.w	r0, #4294967295
 8014f18:	b01d      	add	sp, #116	@ 0x74
 8014f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f1e:	2340      	movs	r3, #64	@ 0x40
 8014f20:	616b      	str	r3, [r5, #20]
 8014f22:	2300      	movs	r3, #0
 8014f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8014f26:	2320      	movs	r3, #32
 8014f28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014f2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014f30:	2330      	movs	r3, #48	@ 0x30
 8014f32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80150d0 <_svfiprintf_r+0x1e4>
 8014f36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014f3a:	f04f 0901 	mov.w	r9, #1
 8014f3e:	4623      	mov	r3, r4
 8014f40:	469a      	mov	sl, r3
 8014f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014f46:	b10a      	cbz	r2, 8014f4c <_svfiprintf_r+0x60>
 8014f48:	2a25      	cmp	r2, #37	@ 0x25
 8014f4a:	d1f9      	bne.n	8014f40 <_svfiprintf_r+0x54>
 8014f4c:	ebba 0b04 	subs.w	fp, sl, r4
 8014f50:	d00b      	beq.n	8014f6a <_svfiprintf_r+0x7e>
 8014f52:	465b      	mov	r3, fp
 8014f54:	4622      	mov	r2, r4
 8014f56:	4629      	mov	r1, r5
 8014f58:	4638      	mov	r0, r7
 8014f5a:	f7ff ff6b 	bl	8014e34 <__ssputs_r>
 8014f5e:	3001      	adds	r0, #1
 8014f60:	f000 80a7 	beq.w	80150b2 <_svfiprintf_r+0x1c6>
 8014f64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014f66:	445a      	add	r2, fp
 8014f68:	9209      	str	r2, [sp, #36]	@ 0x24
 8014f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	f000 809f 	beq.w	80150b2 <_svfiprintf_r+0x1c6>
 8014f74:	2300      	movs	r3, #0
 8014f76:	f04f 32ff 	mov.w	r2, #4294967295
 8014f7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014f7e:	f10a 0a01 	add.w	sl, sl, #1
 8014f82:	9304      	str	r3, [sp, #16]
 8014f84:	9307      	str	r3, [sp, #28]
 8014f86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014f8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8014f8c:	4654      	mov	r4, sl
 8014f8e:	2205      	movs	r2, #5
 8014f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f94:	484e      	ldr	r0, [pc, #312]	@ (80150d0 <_svfiprintf_r+0x1e4>)
 8014f96:	f7eb f93b 	bl	8000210 <memchr>
 8014f9a:	9a04      	ldr	r2, [sp, #16]
 8014f9c:	b9d8      	cbnz	r0, 8014fd6 <_svfiprintf_r+0xea>
 8014f9e:	06d0      	lsls	r0, r2, #27
 8014fa0:	bf44      	itt	mi
 8014fa2:	2320      	movmi	r3, #32
 8014fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014fa8:	0711      	lsls	r1, r2, #28
 8014faa:	bf44      	itt	mi
 8014fac:	232b      	movmi	r3, #43	@ 0x2b
 8014fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8014fb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8014fb8:	d015      	beq.n	8014fe6 <_svfiprintf_r+0xfa>
 8014fba:	9a07      	ldr	r2, [sp, #28]
 8014fbc:	4654      	mov	r4, sl
 8014fbe:	2000      	movs	r0, #0
 8014fc0:	f04f 0c0a 	mov.w	ip, #10
 8014fc4:	4621      	mov	r1, r4
 8014fc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014fca:	3b30      	subs	r3, #48	@ 0x30
 8014fcc:	2b09      	cmp	r3, #9
 8014fce:	d94b      	bls.n	8015068 <_svfiprintf_r+0x17c>
 8014fd0:	b1b0      	cbz	r0, 8015000 <_svfiprintf_r+0x114>
 8014fd2:	9207      	str	r2, [sp, #28]
 8014fd4:	e014      	b.n	8015000 <_svfiprintf_r+0x114>
 8014fd6:	eba0 0308 	sub.w	r3, r0, r8
 8014fda:	fa09 f303 	lsl.w	r3, r9, r3
 8014fde:	4313      	orrs	r3, r2
 8014fe0:	9304      	str	r3, [sp, #16]
 8014fe2:	46a2      	mov	sl, r4
 8014fe4:	e7d2      	b.n	8014f8c <_svfiprintf_r+0xa0>
 8014fe6:	9b03      	ldr	r3, [sp, #12]
 8014fe8:	1d19      	adds	r1, r3, #4
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	9103      	str	r1, [sp, #12]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	bfbb      	ittet	lt
 8014ff2:	425b      	neglt	r3, r3
 8014ff4:	f042 0202 	orrlt.w	r2, r2, #2
 8014ff8:	9307      	strge	r3, [sp, #28]
 8014ffa:	9307      	strlt	r3, [sp, #28]
 8014ffc:	bfb8      	it	lt
 8014ffe:	9204      	strlt	r2, [sp, #16]
 8015000:	7823      	ldrb	r3, [r4, #0]
 8015002:	2b2e      	cmp	r3, #46	@ 0x2e
 8015004:	d10a      	bne.n	801501c <_svfiprintf_r+0x130>
 8015006:	7863      	ldrb	r3, [r4, #1]
 8015008:	2b2a      	cmp	r3, #42	@ 0x2a
 801500a:	d132      	bne.n	8015072 <_svfiprintf_r+0x186>
 801500c:	9b03      	ldr	r3, [sp, #12]
 801500e:	1d1a      	adds	r2, r3, #4
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	9203      	str	r2, [sp, #12]
 8015014:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015018:	3402      	adds	r4, #2
 801501a:	9305      	str	r3, [sp, #20]
 801501c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80150e0 <_svfiprintf_r+0x1f4>
 8015020:	7821      	ldrb	r1, [r4, #0]
 8015022:	2203      	movs	r2, #3
 8015024:	4650      	mov	r0, sl
 8015026:	f7eb f8f3 	bl	8000210 <memchr>
 801502a:	b138      	cbz	r0, 801503c <_svfiprintf_r+0x150>
 801502c:	9b04      	ldr	r3, [sp, #16]
 801502e:	eba0 000a 	sub.w	r0, r0, sl
 8015032:	2240      	movs	r2, #64	@ 0x40
 8015034:	4082      	lsls	r2, r0
 8015036:	4313      	orrs	r3, r2
 8015038:	3401      	adds	r4, #1
 801503a:	9304      	str	r3, [sp, #16]
 801503c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015040:	4824      	ldr	r0, [pc, #144]	@ (80150d4 <_svfiprintf_r+0x1e8>)
 8015042:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015046:	2206      	movs	r2, #6
 8015048:	f7eb f8e2 	bl	8000210 <memchr>
 801504c:	2800      	cmp	r0, #0
 801504e:	d036      	beq.n	80150be <_svfiprintf_r+0x1d2>
 8015050:	4b21      	ldr	r3, [pc, #132]	@ (80150d8 <_svfiprintf_r+0x1ec>)
 8015052:	bb1b      	cbnz	r3, 801509c <_svfiprintf_r+0x1b0>
 8015054:	9b03      	ldr	r3, [sp, #12]
 8015056:	3307      	adds	r3, #7
 8015058:	f023 0307 	bic.w	r3, r3, #7
 801505c:	3308      	adds	r3, #8
 801505e:	9303      	str	r3, [sp, #12]
 8015060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015062:	4433      	add	r3, r6
 8015064:	9309      	str	r3, [sp, #36]	@ 0x24
 8015066:	e76a      	b.n	8014f3e <_svfiprintf_r+0x52>
 8015068:	fb0c 3202 	mla	r2, ip, r2, r3
 801506c:	460c      	mov	r4, r1
 801506e:	2001      	movs	r0, #1
 8015070:	e7a8      	b.n	8014fc4 <_svfiprintf_r+0xd8>
 8015072:	2300      	movs	r3, #0
 8015074:	3401      	adds	r4, #1
 8015076:	9305      	str	r3, [sp, #20]
 8015078:	4619      	mov	r1, r3
 801507a:	f04f 0c0a 	mov.w	ip, #10
 801507e:	4620      	mov	r0, r4
 8015080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015084:	3a30      	subs	r2, #48	@ 0x30
 8015086:	2a09      	cmp	r2, #9
 8015088:	d903      	bls.n	8015092 <_svfiprintf_r+0x1a6>
 801508a:	2b00      	cmp	r3, #0
 801508c:	d0c6      	beq.n	801501c <_svfiprintf_r+0x130>
 801508e:	9105      	str	r1, [sp, #20]
 8015090:	e7c4      	b.n	801501c <_svfiprintf_r+0x130>
 8015092:	fb0c 2101 	mla	r1, ip, r1, r2
 8015096:	4604      	mov	r4, r0
 8015098:	2301      	movs	r3, #1
 801509a:	e7f0      	b.n	801507e <_svfiprintf_r+0x192>
 801509c:	ab03      	add	r3, sp, #12
 801509e:	9300      	str	r3, [sp, #0]
 80150a0:	462a      	mov	r2, r5
 80150a2:	4b0e      	ldr	r3, [pc, #56]	@ (80150dc <_svfiprintf_r+0x1f0>)
 80150a4:	a904      	add	r1, sp, #16
 80150a6:	4638      	mov	r0, r7
 80150a8:	f3af 8000 	nop.w
 80150ac:	1c42      	adds	r2, r0, #1
 80150ae:	4606      	mov	r6, r0
 80150b0:	d1d6      	bne.n	8015060 <_svfiprintf_r+0x174>
 80150b2:	89ab      	ldrh	r3, [r5, #12]
 80150b4:	065b      	lsls	r3, r3, #25
 80150b6:	f53f af2d 	bmi.w	8014f14 <_svfiprintf_r+0x28>
 80150ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80150bc:	e72c      	b.n	8014f18 <_svfiprintf_r+0x2c>
 80150be:	ab03      	add	r3, sp, #12
 80150c0:	9300      	str	r3, [sp, #0]
 80150c2:	462a      	mov	r2, r5
 80150c4:	4b05      	ldr	r3, [pc, #20]	@ (80150dc <_svfiprintf_r+0x1f0>)
 80150c6:	a904      	add	r1, sp, #16
 80150c8:	4638      	mov	r0, r7
 80150ca:	f000 f9bb 	bl	8015444 <_printf_i>
 80150ce:	e7ed      	b.n	80150ac <_svfiprintf_r+0x1c0>
 80150d0:	08017678 	.word	0x08017678
 80150d4:	08017682 	.word	0x08017682
 80150d8:	00000000 	.word	0x00000000
 80150dc:	08014e35 	.word	0x08014e35
 80150e0:	0801767e 	.word	0x0801767e

080150e4 <__sfputc_r>:
 80150e4:	6893      	ldr	r3, [r2, #8]
 80150e6:	3b01      	subs	r3, #1
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	b410      	push	{r4}
 80150ec:	6093      	str	r3, [r2, #8]
 80150ee:	da08      	bge.n	8015102 <__sfputc_r+0x1e>
 80150f0:	6994      	ldr	r4, [r2, #24]
 80150f2:	42a3      	cmp	r3, r4
 80150f4:	db01      	blt.n	80150fa <__sfputc_r+0x16>
 80150f6:	290a      	cmp	r1, #10
 80150f8:	d103      	bne.n	8015102 <__sfputc_r+0x1e>
 80150fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80150fe:	f7ff bd20 	b.w	8014b42 <__swbuf_r>
 8015102:	6813      	ldr	r3, [r2, #0]
 8015104:	1c58      	adds	r0, r3, #1
 8015106:	6010      	str	r0, [r2, #0]
 8015108:	7019      	strb	r1, [r3, #0]
 801510a:	4608      	mov	r0, r1
 801510c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015110:	4770      	bx	lr

08015112 <__sfputs_r>:
 8015112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015114:	4606      	mov	r6, r0
 8015116:	460f      	mov	r7, r1
 8015118:	4614      	mov	r4, r2
 801511a:	18d5      	adds	r5, r2, r3
 801511c:	42ac      	cmp	r4, r5
 801511e:	d101      	bne.n	8015124 <__sfputs_r+0x12>
 8015120:	2000      	movs	r0, #0
 8015122:	e007      	b.n	8015134 <__sfputs_r+0x22>
 8015124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015128:	463a      	mov	r2, r7
 801512a:	4630      	mov	r0, r6
 801512c:	f7ff ffda 	bl	80150e4 <__sfputc_r>
 8015130:	1c43      	adds	r3, r0, #1
 8015132:	d1f3      	bne.n	801511c <__sfputs_r+0xa>
 8015134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015138 <_vfiprintf_r>:
 8015138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801513c:	460d      	mov	r5, r1
 801513e:	b09d      	sub	sp, #116	@ 0x74
 8015140:	4614      	mov	r4, r2
 8015142:	4698      	mov	r8, r3
 8015144:	4606      	mov	r6, r0
 8015146:	b118      	cbz	r0, 8015150 <_vfiprintf_r+0x18>
 8015148:	6a03      	ldr	r3, [r0, #32]
 801514a:	b90b      	cbnz	r3, 8015150 <_vfiprintf_r+0x18>
 801514c:	f7ff fbda 	bl	8014904 <__sinit>
 8015150:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015152:	07d9      	lsls	r1, r3, #31
 8015154:	d405      	bmi.n	8015162 <_vfiprintf_r+0x2a>
 8015156:	89ab      	ldrh	r3, [r5, #12]
 8015158:	059a      	lsls	r2, r3, #22
 801515a:	d402      	bmi.n	8015162 <_vfiprintf_r+0x2a>
 801515c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801515e:	f7ff fe0e 	bl	8014d7e <__retarget_lock_acquire_recursive>
 8015162:	89ab      	ldrh	r3, [r5, #12]
 8015164:	071b      	lsls	r3, r3, #28
 8015166:	d501      	bpl.n	801516c <_vfiprintf_r+0x34>
 8015168:	692b      	ldr	r3, [r5, #16]
 801516a:	b99b      	cbnz	r3, 8015194 <_vfiprintf_r+0x5c>
 801516c:	4629      	mov	r1, r5
 801516e:	4630      	mov	r0, r6
 8015170:	f7ff fd26 	bl	8014bc0 <__swsetup_r>
 8015174:	b170      	cbz	r0, 8015194 <_vfiprintf_r+0x5c>
 8015176:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015178:	07dc      	lsls	r4, r3, #31
 801517a:	d504      	bpl.n	8015186 <_vfiprintf_r+0x4e>
 801517c:	f04f 30ff 	mov.w	r0, #4294967295
 8015180:	b01d      	add	sp, #116	@ 0x74
 8015182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015186:	89ab      	ldrh	r3, [r5, #12]
 8015188:	0598      	lsls	r0, r3, #22
 801518a:	d4f7      	bmi.n	801517c <_vfiprintf_r+0x44>
 801518c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801518e:	f7ff fdf7 	bl	8014d80 <__retarget_lock_release_recursive>
 8015192:	e7f3      	b.n	801517c <_vfiprintf_r+0x44>
 8015194:	2300      	movs	r3, #0
 8015196:	9309      	str	r3, [sp, #36]	@ 0x24
 8015198:	2320      	movs	r3, #32
 801519a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801519e:	f8cd 800c 	str.w	r8, [sp, #12]
 80151a2:	2330      	movs	r3, #48	@ 0x30
 80151a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015354 <_vfiprintf_r+0x21c>
 80151a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80151ac:	f04f 0901 	mov.w	r9, #1
 80151b0:	4623      	mov	r3, r4
 80151b2:	469a      	mov	sl, r3
 80151b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80151b8:	b10a      	cbz	r2, 80151be <_vfiprintf_r+0x86>
 80151ba:	2a25      	cmp	r2, #37	@ 0x25
 80151bc:	d1f9      	bne.n	80151b2 <_vfiprintf_r+0x7a>
 80151be:	ebba 0b04 	subs.w	fp, sl, r4
 80151c2:	d00b      	beq.n	80151dc <_vfiprintf_r+0xa4>
 80151c4:	465b      	mov	r3, fp
 80151c6:	4622      	mov	r2, r4
 80151c8:	4629      	mov	r1, r5
 80151ca:	4630      	mov	r0, r6
 80151cc:	f7ff ffa1 	bl	8015112 <__sfputs_r>
 80151d0:	3001      	adds	r0, #1
 80151d2:	f000 80a7 	beq.w	8015324 <_vfiprintf_r+0x1ec>
 80151d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80151d8:	445a      	add	r2, fp
 80151da:	9209      	str	r2, [sp, #36]	@ 0x24
 80151dc:	f89a 3000 	ldrb.w	r3, [sl]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	f000 809f 	beq.w	8015324 <_vfiprintf_r+0x1ec>
 80151e6:	2300      	movs	r3, #0
 80151e8:	f04f 32ff 	mov.w	r2, #4294967295
 80151ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80151f0:	f10a 0a01 	add.w	sl, sl, #1
 80151f4:	9304      	str	r3, [sp, #16]
 80151f6:	9307      	str	r3, [sp, #28]
 80151f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80151fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80151fe:	4654      	mov	r4, sl
 8015200:	2205      	movs	r2, #5
 8015202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015206:	4853      	ldr	r0, [pc, #332]	@ (8015354 <_vfiprintf_r+0x21c>)
 8015208:	f7eb f802 	bl	8000210 <memchr>
 801520c:	9a04      	ldr	r2, [sp, #16]
 801520e:	b9d8      	cbnz	r0, 8015248 <_vfiprintf_r+0x110>
 8015210:	06d1      	lsls	r1, r2, #27
 8015212:	bf44      	itt	mi
 8015214:	2320      	movmi	r3, #32
 8015216:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801521a:	0713      	lsls	r3, r2, #28
 801521c:	bf44      	itt	mi
 801521e:	232b      	movmi	r3, #43	@ 0x2b
 8015220:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015224:	f89a 3000 	ldrb.w	r3, [sl]
 8015228:	2b2a      	cmp	r3, #42	@ 0x2a
 801522a:	d015      	beq.n	8015258 <_vfiprintf_r+0x120>
 801522c:	9a07      	ldr	r2, [sp, #28]
 801522e:	4654      	mov	r4, sl
 8015230:	2000      	movs	r0, #0
 8015232:	f04f 0c0a 	mov.w	ip, #10
 8015236:	4621      	mov	r1, r4
 8015238:	f811 3b01 	ldrb.w	r3, [r1], #1
 801523c:	3b30      	subs	r3, #48	@ 0x30
 801523e:	2b09      	cmp	r3, #9
 8015240:	d94b      	bls.n	80152da <_vfiprintf_r+0x1a2>
 8015242:	b1b0      	cbz	r0, 8015272 <_vfiprintf_r+0x13a>
 8015244:	9207      	str	r2, [sp, #28]
 8015246:	e014      	b.n	8015272 <_vfiprintf_r+0x13a>
 8015248:	eba0 0308 	sub.w	r3, r0, r8
 801524c:	fa09 f303 	lsl.w	r3, r9, r3
 8015250:	4313      	orrs	r3, r2
 8015252:	9304      	str	r3, [sp, #16]
 8015254:	46a2      	mov	sl, r4
 8015256:	e7d2      	b.n	80151fe <_vfiprintf_r+0xc6>
 8015258:	9b03      	ldr	r3, [sp, #12]
 801525a:	1d19      	adds	r1, r3, #4
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	9103      	str	r1, [sp, #12]
 8015260:	2b00      	cmp	r3, #0
 8015262:	bfbb      	ittet	lt
 8015264:	425b      	neglt	r3, r3
 8015266:	f042 0202 	orrlt.w	r2, r2, #2
 801526a:	9307      	strge	r3, [sp, #28]
 801526c:	9307      	strlt	r3, [sp, #28]
 801526e:	bfb8      	it	lt
 8015270:	9204      	strlt	r2, [sp, #16]
 8015272:	7823      	ldrb	r3, [r4, #0]
 8015274:	2b2e      	cmp	r3, #46	@ 0x2e
 8015276:	d10a      	bne.n	801528e <_vfiprintf_r+0x156>
 8015278:	7863      	ldrb	r3, [r4, #1]
 801527a:	2b2a      	cmp	r3, #42	@ 0x2a
 801527c:	d132      	bne.n	80152e4 <_vfiprintf_r+0x1ac>
 801527e:	9b03      	ldr	r3, [sp, #12]
 8015280:	1d1a      	adds	r2, r3, #4
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	9203      	str	r2, [sp, #12]
 8015286:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801528a:	3402      	adds	r4, #2
 801528c:	9305      	str	r3, [sp, #20]
 801528e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015364 <_vfiprintf_r+0x22c>
 8015292:	7821      	ldrb	r1, [r4, #0]
 8015294:	2203      	movs	r2, #3
 8015296:	4650      	mov	r0, sl
 8015298:	f7ea ffba 	bl	8000210 <memchr>
 801529c:	b138      	cbz	r0, 80152ae <_vfiprintf_r+0x176>
 801529e:	9b04      	ldr	r3, [sp, #16]
 80152a0:	eba0 000a 	sub.w	r0, r0, sl
 80152a4:	2240      	movs	r2, #64	@ 0x40
 80152a6:	4082      	lsls	r2, r0
 80152a8:	4313      	orrs	r3, r2
 80152aa:	3401      	adds	r4, #1
 80152ac:	9304      	str	r3, [sp, #16]
 80152ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152b2:	4829      	ldr	r0, [pc, #164]	@ (8015358 <_vfiprintf_r+0x220>)
 80152b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80152b8:	2206      	movs	r2, #6
 80152ba:	f7ea ffa9 	bl	8000210 <memchr>
 80152be:	2800      	cmp	r0, #0
 80152c0:	d03f      	beq.n	8015342 <_vfiprintf_r+0x20a>
 80152c2:	4b26      	ldr	r3, [pc, #152]	@ (801535c <_vfiprintf_r+0x224>)
 80152c4:	bb1b      	cbnz	r3, 801530e <_vfiprintf_r+0x1d6>
 80152c6:	9b03      	ldr	r3, [sp, #12]
 80152c8:	3307      	adds	r3, #7
 80152ca:	f023 0307 	bic.w	r3, r3, #7
 80152ce:	3308      	adds	r3, #8
 80152d0:	9303      	str	r3, [sp, #12]
 80152d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80152d4:	443b      	add	r3, r7
 80152d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80152d8:	e76a      	b.n	80151b0 <_vfiprintf_r+0x78>
 80152da:	fb0c 3202 	mla	r2, ip, r2, r3
 80152de:	460c      	mov	r4, r1
 80152e0:	2001      	movs	r0, #1
 80152e2:	e7a8      	b.n	8015236 <_vfiprintf_r+0xfe>
 80152e4:	2300      	movs	r3, #0
 80152e6:	3401      	adds	r4, #1
 80152e8:	9305      	str	r3, [sp, #20]
 80152ea:	4619      	mov	r1, r3
 80152ec:	f04f 0c0a 	mov.w	ip, #10
 80152f0:	4620      	mov	r0, r4
 80152f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80152f6:	3a30      	subs	r2, #48	@ 0x30
 80152f8:	2a09      	cmp	r2, #9
 80152fa:	d903      	bls.n	8015304 <_vfiprintf_r+0x1cc>
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d0c6      	beq.n	801528e <_vfiprintf_r+0x156>
 8015300:	9105      	str	r1, [sp, #20]
 8015302:	e7c4      	b.n	801528e <_vfiprintf_r+0x156>
 8015304:	fb0c 2101 	mla	r1, ip, r1, r2
 8015308:	4604      	mov	r4, r0
 801530a:	2301      	movs	r3, #1
 801530c:	e7f0      	b.n	80152f0 <_vfiprintf_r+0x1b8>
 801530e:	ab03      	add	r3, sp, #12
 8015310:	9300      	str	r3, [sp, #0]
 8015312:	462a      	mov	r2, r5
 8015314:	4b12      	ldr	r3, [pc, #72]	@ (8015360 <_vfiprintf_r+0x228>)
 8015316:	a904      	add	r1, sp, #16
 8015318:	4630      	mov	r0, r6
 801531a:	f3af 8000 	nop.w
 801531e:	4607      	mov	r7, r0
 8015320:	1c78      	adds	r0, r7, #1
 8015322:	d1d6      	bne.n	80152d2 <_vfiprintf_r+0x19a>
 8015324:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015326:	07d9      	lsls	r1, r3, #31
 8015328:	d405      	bmi.n	8015336 <_vfiprintf_r+0x1fe>
 801532a:	89ab      	ldrh	r3, [r5, #12]
 801532c:	059a      	lsls	r2, r3, #22
 801532e:	d402      	bmi.n	8015336 <_vfiprintf_r+0x1fe>
 8015330:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015332:	f7ff fd25 	bl	8014d80 <__retarget_lock_release_recursive>
 8015336:	89ab      	ldrh	r3, [r5, #12]
 8015338:	065b      	lsls	r3, r3, #25
 801533a:	f53f af1f 	bmi.w	801517c <_vfiprintf_r+0x44>
 801533e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015340:	e71e      	b.n	8015180 <_vfiprintf_r+0x48>
 8015342:	ab03      	add	r3, sp, #12
 8015344:	9300      	str	r3, [sp, #0]
 8015346:	462a      	mov	r2, r5
 8015348:	4b05      	ldr	r3, [pc, #20]	@ (8015360 <_vfiprintf_r+0x228>)
 801534a:	a904      	add	r1, sp, #16
 801534c:	4630      	mov	r0, r6
 801534e:	f000 f879 	bl	8015444 <_printf_i>
 8015352:	e7e4      	b.n	801531e <_vfiprintf_r+0x1e6>
 8015354:	08017678 	.word	0x08017678
 8015358:	08017682 	.word	0x08017682
 801535c:	00000000 	.word	0x00000000
 8015360:	08015113 	.word	0x08015113
 8015364:	0801767e 	.word	0x0801767e

08015368 <_printf_common>:
 8015368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801536c:	4616      	mov	r6, r2
 801536e:	4698      	mov	r8, r3
 8015370:	688a      	ldr	r2, [r1, #8]
 8015372:	690b      	ldr	r3, [r1, #16]
 8015374:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015378:	4293      	cmp	r3, r2
 801537a:	bfb8      	it	lt
 801537c:	4613      	movlt	r3, r2
 801537e:	6033      	str	r3, [r6, #0]
 8015380:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015384:	4607      	mov	r7, r0
 8015386:	460c      	mov	r4, r1
 8015388:	b10a      	cbz	r2, 801538e <_printf_common+0x26>
 801538a:	3301      	adds	r3, #1
 801538c:	6033      	str	r3, [r6, #0]
 801538e:	6823      	ldr	r3, [r4, #0]
 8015390:	0699      	lsls	r1, r3, #26
 8015392:	bf42      	ittt	mi
 8015394:	6833      	ldrmi	r3, [r6, #0]
 8015396:	3302      	addmi	r3, #2
 8015398:	6033      	strmi	r3, [r6, #0]
 801539a:	6825      	ldr	r5, [r4, #0]
 801539c:	f015 0506 	ands.w	r5, r5, #6
 80153a0:	d106      	bne.n	80153b0 <_printf_common+0x48>
 80153a2:	f104 0a19 	add.w	sl, r4, #25
 80153a6:	68e3      	ldr	r3, [r4, #12]
 80153a8:	6832      	ldr	r2, [r6, #0]
 80153aa:	1a9b      	subs	r3, r3, r2
 80153ac:	42ab      	cmp	r3, r5
 80153ae:	dc26      	bgt.n	80153fe <_printf_common+0x96>
 80153b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80153b4:	6822      	ldr	r2, [r4, #0]
 80153b6:	3b00      	subs	r3, #0
 80153b8:	bf18      	it	ne
 80153ba:	2301      	movne	r3, #1
 80153bc:	0692      	lsls	r2, r2, #26
 80153be:	d42b      	bmi.n	8015418 <_printf_common+0xb0>
 80153c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80153c4:	4641      	mov	r1, r8
 80153c6:	4638      	mov	r0, r7
 80153c8:	47c8      	blx	r9
 80153ca:	3001      	adds	r0, #1
 80153cc:	d01e      	beq.n	801540c <_printf_common+0xa4>
 80153ce:	6823      	ldr	r3, [r4, #0]
 80153d0:	6922      	ldr	r2, [r4, #16]
 80153d2:	f003 0306 	and.w	r3, r3, #6
 80153d6:	2b04      	cmp	r3, #4
 80153d8:	bf02      	ittt	eq
 80153da:	68e5      	ldreq	r5, [r4, #12]
 80153dc:	6833      	ldreq	r3, [r6, #0]
 80153de:	1aed      	subeq	r5, r5, r3
 80153e0:	68a3      	ldr	r3, [r4, #8]
 80153e2:	bf0c      	ite	eq
 80153e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80153e8:	2500      	movne	r5, #0
 80153ea:	4293      	cmp	r3, r2
 80153ec:	bfc4      	itt	gt
 80153ee:	1a9b      	subgt	r3, r3, r2
 80153f0:	18ed      	addgt	r5, r5, r3
 80153f2:	2600      	movs	r6, #0
 80153f4:	341a      	adds	r4, #26
 80153f6:	42b5      	cmp	r5, r6
 80153f8:	d11a      	bne.n	8015430 <_printf_common+0xc8>
 80153fa:	2000      	movs	r0, #0
 80153fc:	e008      	b.n	8015410 <_printf_common+0xa8>
 80153fe:	2301      	movs	r3, #1
 8015400:	4652      	mov	r2, sl
 8015402:	4641      	mov	r1, r8
 8015404:	4638      	mov	r0, r7
 8015406:	47c8      	blx	r9
 8015408:	3001      	adds	r0, #1
 801540a:	d103      	bne.n	8015414 <_printf_common+0xac>
 801540c:	f04f 30ff 	mov.w	r0, #4294967295
 8015410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015414:	3501      	adds	r5, #1
 8015416:	e7c6      	b.n	80153a6 <_printf_common+0x3e>
 8015418:	18e1      	adds	r1, r4, r3
 801541a:	1c5a      	adds	r2, r3, #1
 801541c:	2030      	movs	r0, #48	@ 0x30
 801541e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015422:	4422      	add	r2, r4
 8015424:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015428:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801542c:	3302      	adds	r3, #2
 801542e:	e7c7      	b.n	80153c0 <_printf_common+0x58>
 8015430:	2301      	movs	r3, #1
 8015432:	4622      	mov	r2, r4
 8015434:	4641      	mov	r1, r8
 8015436:	4638      	mov	r0, r7
 8015438:	47c8      	blx	r9
 801543a:	3001      	adds	r0, #1
 801543c:	d0e6      	beq.n	801540c <_printf_common+0xa4>
 801543e:	3601      	adds	r6, #1
 8015440:	e7d9      	b.n	80153f6 <_printf_common+0x8e>
	...

08015444 <_printf_i>:
 8015444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015448:	7e0f      	ldrb	r7, [r1, #24]
 801544a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801544c:	2f78      	cmp	r7, #120	@ 0x78
 801544e:	4691      	mov	r9, r2
 8015450:	4680      	mov	r8, r0
 8015452:	460c      	mov	r4, r1
 8015454:	469a      	mov	sl, r3
 8015456:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801545a:	d807      	bhi.n	801546c <_printf_i+0x28>
 801545c:	2f62      	cmp	r7, #98	@ 0x62
 801545e:	d80a      	bhi.n	8015476 <_printf_i+0x32>
 8015460:	2f00      	cmp	r7, #0
 8015462:	f000 80d1 	beq.w	8015608 <_printf_i+0x1c4>
 8015466:	2f58      	cmp	r7, #88	@ 0x58
 8015468:	f000 80b8 	beq.w	80155dc <_printf_i+0x198>
 801546c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015470:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015474:	e03a      	b.n	80154ec <_printf_i+0xa8>
 8015476:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801547a:	2b15      	cmp	r3, #21
 801547c:	d8f6      	bhi.n	801546c <_printf_i+0x28>
 801547e:	a101      	add	r1, pc, #4	@ (adr r1, 8015484 <_printf_i+0x40>)
 8015480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015484:	080154dd 	.word	0x080154dd
 8015488:	080154f1 	.word	0x080154f1
 801548c:	0801546d 	.word	0x0801546d
 8015490:	0801546d 	.word	0x0801546d
 8015494:	0801546d 	.word	0x0801546d
 8015498:	0801546d 	.word	0x0801546d
 801549c:	080154f1 	.word	0x080154f1
 80154a0:	0801546d 	.word	0x0801546d
 80154a4:	0801546d 	.word	0x0801546d
 80154a8:	0801546d 	.word	0x0801546d
 80154ac:	0801546d 	.word	0x0801546d
 80154b0:	080155ef 	.word	0x080155ef
 80154b4:	0801551b 	.word	0x0801551b
 80154b8:	080155a9 	.word	0x080155a9
 80154bc:	0801546d 	.word	0x0801546d
 80154c0:	0801546d 	.word	0x0801546d
 80154c4:	08015611 	.word	0x08015611
 80154c8:	0801546d 	.word	0x0801546d
 80154cc:	0801551b 	.word	0x0801551b
 80154d0:	0801546d 	.word	0x0801546d
 80154d4:	0801546d 	.word	0x0801546d
 80154d8:	080155b1 	.word	0x080155b1
 80154dc:	6833      	ldr	r3, [r6, #0]
 80154de:	1d1a      	adds	r2, r3, #4
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	6032      	str	r2, [r6, #0]
 80154e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80154e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80154ec:	2301      	movs	r3, #1
 80154ee:	e09c      	b.n	801562a <_printf_i+0x1e6>
 80154f0:	6833      	ldr	r3, [r6, #0]
 80154f2:	6820      	ldr	r0, [r4, #0]
 80154f4:	1d19      	adds	r1, r3, #4
 80154f6:	6031      	str	r1, [r6, #0]
 80154f8:	0606      	lsls	r6, r0, #24
 80154fa:	d501      	bpl.n	8015500 <_printf_i+0xbc>
 80154fc:	681d      	ldr	r5, [r3, #0]
 80154fe:	e003      	b.n	8015508 <_printf_i+0xc4>
 8015500:	0645      	lsls	r5, r0, #25
 8015502:	d5fb      	bpl.n	80154fc <_printf_i+0xb8>
 8015504:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015508:	2d00      	cmp	r5, #0
 801550a:	da03      	bge.n	8015514 <_printf_i+0xd0>
 801550c:	232d      	movs	r3, #45	@ 0x2d
 801550e:	426d      	negs	r5, r5
 8015510:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015514:	4858      	ldr	r0, [pc, #352]	@ (8015678 <_printf_i+0x234>)
 8015516:	230a      	movs	r3, #10
 8015518:	e011      	b.n	801553e <_printf_i+0xfa>
 801551a:	6821      	ldr	r1, [r4, #0]
 801551c:	6833      	ldr	r3, [r6, #0]
 801551e:	0608      	lsls	r0, r1, #24
 8015520:	f853 5b04 	ldr.w	r5, [r3], #4
 8015524:	d402      	bmi.n	801552c <_printf_i+0xe8>
 8015526:	0649      	lsls	r1, r1, #25
 8015528:	bf48      	it	mi
 801552a:	b2ad      	uxthmi	r5, r5
 801552c:	2f6f      	cmp	r7, #111	@ 0x6f
 801552e:	4852      	ldr	r0, [pc, #328]	@ (8015678 <_printf_i+0x234>)
 8015530:	6033      	str	r3, [r6, #0]
 8015532:	bf14      	ite	ne
 8015534:	230a      	movne	r3, #10
 8015536:	2308      	moveq	r3, #8
 8015538:	2100      	movs	r1, #0
 801553a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801553e:	6866      	ldr	r6, [r4, #4]
 8015540:	60a6      	str	r6, [r4, #8]
 8015542:	2e00      	cmp	r6, #0
 8015544:	db05      	blt.n	8015552 <_printf_i+0x10e>
 8015546:	6821      	ldr	r1, [r4, #0]
 8015548:	432e      	orrs	r6, r5
 801554a:	f021 0104 	bic.w	r1, r1, #4
 801554e:	6021      	str	r1, [r4, #0]
 8015550:	d04b      	beq.n	80155ea <_printf_i+0x1a6>
 8015552:	4616      	mov	r6, r2
 8015554:	fbb5 f1f3 	udiv	r1, r5, r3
 8015558:	fb03 5711 	mls	r7, r3, r1, r5
 801555c:	5dc7      	ldrb	r7, [r0, r7]
 801555e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015562:	462f      	mov	r7, r5
 8015564:	42bb      	cmp	r3, r7
 8015566:	460d      	mov	r5, r1
 8015568:	d9f4      	bls.n	8015554 <_printf_i+0x110>
 801556a:	2b08      	cmp	r3, #8
 801556c:	d10b      	bne.n	8015586 <_printf_i+0x142>
 801556e:	6823      	ldr	r3, [r4, #0]
 8015570:	07df      	lsls	r7, r3, #31
 8015572:	d508      	bpl.n	8015586 <_printf_i+0x142>
 8015574:	6923      	ldr	r3, [r4, #16]
 8015576:	6861      	ldr	r1, [r4, #4]
 8015578:	4299      	cmp	r1, r3
 801557a:	bfde      	ittt	le
 801557c:	2330      	movle	r3, #48	@ 0x30
 801557e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015582:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015586:	1b92      	subs	r2, r2, r6
 8015588:	6122      	str	r2, [r4, #16]
 801558a:	f8cd a000 	str.w	sl, [sp]
 801558e:	464b      	mov	r3, r9
 8015590:	aa03      	add	r2, sp, #12
 8015592:	4621      	mov	r1, r4
 8015594:	4640      	mov	r0, r8
 8015596:	f7ff fee7 	bl	8015368 <_printf_common>
 801559a:	3001      	adds	r0, #1
 801559c:	d14a      	bne.n	8015634 <_printf_i+0x1f0>
 801559e:	f04f 30ff 	mov.w	r0, #4294967295
 80155a2:	b004      	add	sp, #16
 80155a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155a8:	6823      	ldr	r3, [r4, #0]
 80155aa:	f043 0320 	orr.w	r3, r3, #32
 80155ae:	6023      	str	r3, [r4, #0]
 80155b0:	4832      	ldr	r0, [pc, #200]	@ (801567c <_printf_i+0x238>)
 80155b2:	2778      	movs	r7, #120	@ 0x78
 80155b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80155b8:	6823      	ldr	r3, [r4, #0]
 80155ba:	6831      	ldr	r1, [r6, #0]
 80155bc:	061f      	lsls	r7, r3, #24
 80155be:	f851 5b04 	ldr.w	r5, [r1], #4
 80155c2:	d402      	bmi.n	80155ca <_printf_i+0x186>
 80155c4:	065f      	lsls	r7, r3, #25
 80155c6:	bf48      	it	mi
 80155c8:	b2ad      	uxthmi	r5, r5
 80155ca:	6031      	str	r1, [r6, #0]
 80155cc:	07d9      	lsls	r1, r3, #31
 80155ce:	bf44      	itt	mi
 80155d0:	f043 0320 	orrmi.w	r3, r3, #32
 80155d4:	6023      	strmi	r3, [r4, #0]
 80155d6:	b11d      	cbz	r5, 80155e0 <_printf_i+0x19c>
 80155d8:	2310      	movs	r3, #16
 80155da:	e7ad      	b.n	8015538 <_printf_i+0xf4>
 80155dc:	4826      	ldr	r0, [pc, #152]	@ (8015678 <_printf_i+0x234>)
 80155de:	e7e9      	b.n	80155b4 <_printf_i+0x170>
 80155e0:	6823      	ldr	r3, [r4, #0]
 80155e2:	f023 0320 	bic.w	r3, r3, #32
 80155e6:	6023      	str	r3, [r4, #0]
 80155e8:	e7f6      	b.n	80155d8 <_printf_i+0x194>
 80155ea:	4616      	mov	r6, r2
 80155ec:	e7bd      	b.n	801556a <_printf_i+0x126>
 80155ee:	6833      	ldr	r3, [r6, #0]
 80155f0:	6825      	ldr	r5, [r4, #0]
 80155f2:	6961      	ldr	r1, [r4, #20]
 80155f4:	1d18      	adds	r0, r3, #4
 80155f6:	6030      	str	r0, [r6, #0]
 80155f8:	062e      	lsls	r6, r5, #24
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	d501      	bpl.n	8015602 <_printf_i+0x1be>
 80155fe:	6019      	str	r1, [r3, #0]
 8015600:	e002      	b.n	8015608 <_printf_i+0x1c4>
 8015602:	0668      	lsls	r0, r5, #25
 8015604:	d5fb      	bpl.n	80155fe <_printf_i+0x1ba>
 8015606:	8019      	strh	r1, [r3, #0]
 8015608:	2300      	movs	r3, #0
 801560a:	6123      	str	r3, [r4, #16]
 801560c:	4616      	mov	r6, r2
 801560e:	e7bc      	b.n	801558a <_printf_i+0x146>
 8015610:	6833      	ldr	r3, [r6, #0]
 8015612:	1d1a      	adds	r2, r3, #4
 8015614:	6032      	str	r2, [r6, #0]
 8015616:	681e      	ldr	r6, [r3, #0]
 8015618:	6862      	ldr	r2, [r4, #4]
 801561a:	2100      	movs	r1, #0
 801561c:	4630      	mov	r0, r6
 801561e:	f7ea fdf7 	bl	8000210 <memchr>
 8015622:	b108      	cbz	r0, 8015628 <_printf_i+0x1e4>
 8015624:	1b80      	subs	r0, r0, r6
 8015626:	6060      	str	r0, [r4, #4]
 8015628:	6863      	ldr	r3, [r4, #4]
 801562a:	6123      	str	r3, [r4, #16]
 801562c:	2300      	movs	r3, #0
 801562e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015632:	e7aa      	b.n	801558a <_printf_i+0x146>
 8015634:	6923      	ldr	r3, [r4, #16]
 8015636:	4632      	mov	r2, r6
 8015638:	4649      	mov	r1, r9
 801563a:	4640      	mov	r0, r8
 801563c:	47d0      	blx	sl
 801563e:	3001      	adds	r0, #1
 8015640:	d0ad      	beq.n	801559e <_printf_i+0x15a>
 8015642:	6823      	ldr	r3, [r4, #0]
 8015644:	079b      	lsls	r3, r3, #30
 8015646:	d413      	bmi.n	8015670 <_printf_i+0x22c>
 8015648:	68e0      	ldr	r0, [r4, #12]
 801564a:	9b03      	ldr	r3, [sp, #12]
 801564c:	4298      	cmp	r0, r3
 801564e:	bfb8      	it	lt
 8015650:	4618      	movlt	r0, r3
 8015652:	e7a6      	b.n	80155a2 <_printf_i+0x15e>
 8015654:	2301      	movs	r3, #1
 8015656:	4632      	mov	r2, r6
 8015658:	4649      	mov	r1, r9
 801565a:	4640      	mov	r0, r8
 801565c:	47d0      	blx	sl
 801565e:	3001      	adds	r0, #1
 8015660:	d09d      	beq.n	801559e <_printf_i+0x15a>
 8015662:	3501      	adds	r5, #1
 8015664:	68e3      	ldr	r3, [r4, #12]
 8015666:	9903      	ldr	r1, [sp, #12]
 8015668:	1a5b      	subs	r3, r3, r1
 801566a:	42ab      	cmp	r3, r5
 801566c:	dcf2      	bgt.n	8015654 <_printf_i+0x210>
 801566e:	e7eb      	b.n	8015648 <_printf_i+0x204>
 8015670:	2500      	movs	r5, #0
 8015672:	f104 0619 	add.w	r6, r4, #25
 8015676:	e7f5      	b.n	8015664 <_printf_i+0x220>
 8015678:	08017689 	.word	0x08017689
 801567c:	0801769a 	.word	0x0801769a

08015680 <__sflush_r>:
 8015680:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015688:	0716      	lsls	r6, r2, #28
 801568a:	4605      	mov	r5, r0
 801568c:	460c      	mov	r4, r1
 801568e:	d454      	bmi.n	801573a <__sflush_r+0xba>
 8015690:	684b      	ldr	r3, [r1, #4]
 8015692:	2b00      	cmp	r3, #0
 8015694:	dc02      	bgt.n	801569c <__sflush_r+0x1c>
 8015696:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015698:	2b00      	cmp	r3, #0
 801569a:	dd48      	ble.n	801572e <__sflush_r+0xae>
 801569c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801569e:	2e00      	cmp	r6, #0
 80156a0:	d045      	beq.n	801572e <__sflush_r+0xae>
 80156a2:	2300      	movs	r3, #0
 80156a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80156a8:	682f      	ldr	r7, [r5, #0]
 80156aa:	6a21      	ldr	r1, [r4, #32]
 80156ac:	602b      	str	r3, [r5, #0]
 80156ae:	d030      	beq.n	8015712 <__sflush_r+0x92>
 80156b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80156b2:	89a3      	ldrh	r3, [r4, #12]
 80156b4:	0759      	lsls	r1, r3, #29
 80156b6:	d505      	bpl.n	80156c4 <__sflush_r+0x44>
 80156b8:	6863      	ldr	r3, [r4, #4]
 80156ba:	1ad2      	subs	r2, r2, r3
 80156bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80156be:	b10b      	cbz	r3, 80156c4 <__sflush_r+0x44>
 80156c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80156c2:	1ad2      	subs	r2, r2, r3
 80156c4:	2300      	movs	r3, #0
 80156c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80156c8:	6a21      	ldr	r1, [r4, #32]
 80156ca:	4628      	mov	r0, r5
 80156cc:	47b0      	blx	r6
 80156ce:	1c43      	adds	r3, r0, #1
 80156d0:	89a3      	ldrh	r3, [r4, #12]
 80156d2:	d106      	bne.n	80156e2 <__sflush_r+0x62>
 80156d4:	6829      	ldr	r1, [r5, #0]
 80156d6:	291d      	cmp	r1, #29
 80156d8:	d82b      	bhi.n	8015732 <__sflush_r+0xb2>
 80156da:	4a2a      	ldr	r2, [pc, #168]	@ (8015784 <__sflush_r+0x104>)
 80156dc:	40ca      	lsrs	r2, r1
 80156de:	07d6      	lsls	r6, r2, #31
 80156e0:	d527      	bpl.n	8015732 <__sflush_r+0xb2>
 80156e2:	2200      	movs	r2, #0
 80156e4:	6062      	str	r2, [r4, #4]
 80156e6:	04d9      	lsls	r1, r3, #19
 80156e8:	6922      	ldr	r2, [r4, #16]
 80156ea:	6022      	str	r2, [r4, #0]
 80156ec:	d504      	bpl.n	80156f8 <__sflush_r+0x78>
 80156ee:	1c42      	adds	r2, r0, #1
 80156f0:	d101      	bne.n	80156f6 <__sflush_r+0x76>
 80156f2:	682b      	ldr	r3, [r5, #0]
 80156f4:	b903      	cbnz	r3, 80156f8 <__sflush_r+0x78>
 80156f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80156f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80156fa:	602f      	str	r7, [r5, #0]
 80156fc:	b1b9      	cbz	r1, 801572e <__sflush_r+0xae>
 80156fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015702:	4299      	cmp	r1, r3
 8015704:	d002      	beq.n	801570c <__sflush_r+0x8c>
 8015706:	4628      	mov	r0, r5
 8015708:	f7ff fb4a 	bl	8014da0 <_free_r>
 801570c:	2300      	movs	r3, #0
 801570e:	6363      	str	r3, [r4, #52]	@ 0x34
 8015710:	e00d      	b.n	801572e <__sflush_r+0xae>
 8015712:	2301      	movs	r3, #1
 8015714:	4628      	mov	r0, r5
 8015716:	47b0      	blx	r6
 8015718:	4602      	mov	r2, r0
 801571a:	1c50      	adds	r0, r2, #1
 801571c:	d1c9      	bne.n	80156b2 <__sflush_r+0x32>
 801571e:	682b      	ldr	r3, [r5, #0]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d0c6      	beq.n	80156b2 <__sflush_r+0x32>
 8015724:	2b1d      	cmp	r3, #29
 8015726:	d001      	beq.n	801572c <__sflush_r+0xac>
 8015728:	2b16      	cmp	r3, #22
 801572a:	d11e      	bne.n	801576a <__sflush_r+0xea>
 801572c:	602f      	str	r7, [r5, #0]
 801572e:	2000      	movs	r0, #0
 8015730:	e022      	b.n	8015778 <__sflush_r+0xf8>
 8015732:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015736:	b21b      	sxth	r3, r3
 8015738:	e01b      	b.n	8015772 <__sflush_r+0xf2>
 801573a:	690f      	ldr	r7, [r1, #16]
 801573c:	2f00      	cmp	r7, #0
 801573e:	d0f6      	beq.n	801572e <__sflush_r+0xae>
 8015740:	0793      	lsls	r3, r2, #30
 8015742:	680e      	ldr	r6, [r1, #0]
 8015744:	bf08      	it	eq
 8015746:	694b      	ldreq	r3, [r1, #20]
 8015748:	600f      	str	r7, [r1, #0]
 801574a:	bf18      	it	ne
 801574c:	2300      	movne	r3, #0
 801574e:	eba6 0807 	sub.w	r8, r6, r7
 8015752:	608b      	str	r3, [r1, #8]
 8015754:	f1b8 0f00 	cmp.w	r8, #0
 8015758:	dde9      	ble.n	801572e <__sflush_r+0xae>
 801575a:	6a21      	ldr	r1, [r4, #32]
 801575c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801575e:	4643      	mov	r3, r8
 8015760:	463a      	mov	r2, r7
 8015762:	4628      	mov	r0, r5
 8015764:	47b0      	blx	r6
 8015766:	2800      	cmp	r0, #0
 8015768:	dc08      	bgt.n	801577c <__sflush_r+0xfc>
 801576a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801576e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015772:	81a3      	strh	r3, [r4, #12]
 8015774:	f04f 30ff 	mov.w	r0, #4294967295
 8015778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801577c:	4407      	add	r7, r0
 801577e:	eba8 0800 	sub.w	r8, r8, r0
 8015782:	e7e7      	b.n	8015754 <__sflush_r+0xd4>
 8015784:	20400001 	.word	0x20400001

08015788 <_fflush_r>:
 8015788:	b538      	push	{r3, r4, r5, lr}
 801578a:	690b      	ldr	r3, [r1, #16]
 801578c:	4605      	mov	r5, r0
 801578e:	460c      	mov	r4, r1
 8015790:	b913      	cbnz	r3, 8015798 <_fflush_r+0x10>
 8015792:	2500      	movs	r5, #0
 8015794:	4628      	mov	r0, r5
 8015796:	bd38      	pop	{r3, r4, r5, pc}
 8015798:	b118      	cbz	r0, 80157a2 <_fflush_r+0x1a>
 801579a:	6a03      	ldr	r3, [r0, #32]
 801579c:	b90b      	cbnz	r3, 80157a2 <_fflush_r+0x1a>
 801579e:	f7ff f8b1 	bl	8014904 <__sinit>
 80157a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d0f3      	beq.n	8015792 <_fflush_r+0xa>
 80157aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80157ac:	07d0      	lsls	r0, r2, #31
 80157ae:	d404      	bmi.n	80157ba <_fflush_r+0x32>
 80157b0:	0599      	lsls	r1, r3, #22
 80157b2:	d402      	bmi.n	80157ba <_fflush_r+0x32>
 80157b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80157b6:	f7ff fae2 	bl	8014d7e <__retarget_lock_acquire_recursive>
 80157ba:	4628      	mov	r0, r5
 80157bc:	4621      	mov	r1, r4
 80157be:	f7ff ff5f 	bl	8015680 <__sflush_r>
 80157c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80157c4:	07da      	lsls	r2, r3, #31
 80157c6:	4605      	mov	r5, r0
 80157c8:	d4e4      	bmi.n	8015794 <_fflush_r+0xc>
 80157ca:	89a3      	ldrh	r3, [r4, #12]
 80157cc:	059b      	lsls	r3, r3, #22
 80157ce:	d4e1      	bmi.n	8015794 <_fflush_r+0xc>
 80157d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80157d2:	f7ff fad5 	bl	8014d80 <__retarget_lock_release_recursive>
 80157d6:	e7dd      	b.n	8015794 <_fflush_r+0xc>

080157d8 <__swhatbuf_r>:
 80157d8:	b570      	push	{r4, r5, r6, lr}
 80157da:	460c      	mov	r4, r1
 80157dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157e0:	2900      	cmp	r1, #0
 80157e2:	b096      	sub	sp, #88	@ 0x58
 80157e4:	4615      	mov	r5, r2
 80157e6:	461e      	mov	r6, r3
 80157e8:	da0d      	bge.n	8015806 <__swhatbuf_r+0x2e>
 80157ea:	89a3      	ldrh	r3, [r4, #12]
 80157ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80157f0:	f04f 0100 	mov.w	r1, #0
 80157f4:	bf14      	ite	ne
 80157f6:	2340      	movne	r3, #64	@ 0x40
 80157f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80157fc:	2000      	movs	r0, #0
 80157fe:	6031      	str	r1, [r6, #0]
 8015800:	602b      	str	r3, [r5, #0]
 8015802:	b016      	add	sp, #88	@ 0x58
 8015804:	bd70      	pop	{r4, r5, r6, pc}
 8015806:	466a      	mov	r2, sp
 8015808:	f000 f862 	bl	80158d0 <_fstat_r>
 801580c:	2800      	cmp	r0, #0
 801580e:	dbec      	blt.n	80157ea <__swhatbuf_r+0x12>
 8015810:	9901      	ldr	r1, [sp, #4]
 8015812:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015816:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801581a:	4259      	negs	r1, r3
 801581c:	4159      	adcs	r1, r3
 801581e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015822:	e7eb      	b.n	80157fc <__swhatbuf_r+0x24>

08015824 <__smakebuf_r>:
 8015824:	898b      	ldrh	r3, [r1, #12]
 8015826:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015828:	079d      	lsls	r5, r3, #30
 801582a:	4606      	mov	r6, r0
 801582c:	460c      	mov	r4, r1
 801582e:	d507      	bpl.n	8015840 <__smakebuf_r+0x1c>
 8015830:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015834:	6023      	str	r3, [r4, #0]
 8015836:	6123      	str	r3, [r4, #16]
 8015838:	2301      	movs	r3, #1
 801583a:	6163      	str	r3, [r4, #20]
 801583c:	b003      	add	sp, #12
 801583e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015840:	ab01      	add	r3, sp, #4
 8015842:	466a      	mov	r2, sp
 8015844:	f7ff ffc8 	bl	80157d8 <__swhatbuf_r>
 8015848:	9f00      	ldr	r7, [sp, #0]
 801584a:	4605      	mov	r5, r0
 801584c:	4639      	mov	r1, r7
 801584e:	4630      	mov	r0, r6
 8015850:	f7fe ff40 	bl	80146d4 <_malloc_r>
 8015854:	b948      	cbnz	r0, 801586a <__smakebuf_r+0x46>
 8015856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801585a:	059a      	lsls	r2, r3, #22
 801585c:	d4ee      	bmi.n	801583c <__smakebuf_r+0x18>
 801585e:	f023 0303 	bic.w	r3, r3, #3
 8015862:	f043 0302 	orr.w	r3, r3, #2
 8015866:	81a3      	strh	r3, [r4, #12]
 8015868:	e7e2      	b.n	8015830 <__smakebuf_r+0xc>
 801586a:	89a3      	ldrh	r3, [r4, #12]
 801586c:	6020      	str	r0, [r4, #0]
 801586e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015872:	81a3      	strh	r3, [r4, #12]
 8015874:	9b01      	ldr	r3, [sp, #4]
 8015876:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801587a:	b15b      	cbz	r3, 8015894 <__smakebuf_r+0x70>
 801587c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015880:	4630      	mov	r0, r6
 8015882:	f000 f837 	bl	80158f4 <_isatty_r>
 8015886:	b128      	cbz	r0, 8015894 <__smakebuf_r+0x70>
 8015888:	89a3      	ldrh	r3, [r4, #12]
 801588a:	f023 0303 	bic.w	r3, r3, #3
 801588e:	f043 0301 	orr.w	r3, r3, #1
 8015892:	81a3      	strh	r3, [r4, #12]
 8015894:	89a3      	ldrh	r3, [r4, #12]
 8015896:	431d      	orrs	r5, r3
 8015898:	81a5      	strh	r5, [r4, #12]
 801589a:	e7cf      	b.n	801583c <__smakebuf_r+0x18>

0801589c <memmove>:
 801589c:	4288      	cmp	r0, r1
 801589e:	b510      	push	{r4, lr}
 80158a0:	eb01 0402 	add.w	r4, r1, r2
 80158a4:	d902      	bls.n	80158ac <memmove+0x10>
 80158a6:	4284      	cmp	r4, r0
 80158a8:	4623      	mov	r3, r4
 80158aa:	d807      	bhi.n	80158bc <memmove+0x20>
 80158ac:	1e43      	subs	r3, r0, #1
 80158ae:	42a1      	cmp	r1, r4
 80158b0:	d008      	beq.n	80158c4 <memmove+0x28>
 80158b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80158b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80158ba:	e7f8      	b.n	80158ae <memmove+0x12>
 80158bc:	4402      	add	r2, r0
 80158be:	4601      	mov	r1, r0
 80158c0:	428a      	cmp	r2, r1
 80158c2:	d100      	bne.n	80158c6 <memmove+0x2a>
 80158c4:	bd10      	pop	{r4, pc}
 80158c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80158ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80158ce:	e7f7      	b.n	80158c0 <memmove+0x24>

080158d0 <_fstat_r>:
 80158d0:	b538      	push	{r3, r4, r5, lr}
 80158d2:	4d07      	ldr	r5, [pc, #28]	@ (80158f0 <_fstat_r+0x20>)
 80158d4:	2300      	movs	r3, #0
 80158d6:	4604      	mov	r4, r0
 80158d8:	4608      	mov	r0, r1
 80158da:	4611      	mov	r1, r2
 80158dc:	602b      	str	r3, [r5, #0]
 80158de:	f7ed f98c 	bl	8002bfa <_fstat>
 80158e2:	1c43      	adds	r3, r0, #1
 80158e4:	d102      	bne.n	80158ec <_fstat_r+0x1c>
 80158e6:	682b      	ldr	r3, [r5, #0]
 80158e8:	b103      	cbz	r3, 80158ec <_fstat_r+0x1c>
 80158ea:	6023      	str	r3, [r4, #0]
 80158ec:	bd38      	pop	{r3, r4, r5, pc}
 80158ee:	bf00      	nop
 80158f0:	200153dc 	.word	0x200153dc

080158f4 <_isatty_r>:
 80158f4:	b538      	push	{r3, r4, r5, lr}
 80158f6:	4d06      	ldr	r5, [pc, #24]	@ (8015910 <_isatty_r+0x1c>)
 80158f8:	2300      	movs	r3, #0
 80158fa:	4604      	mov	r4, r0
 80158fc:	4608      	mov	r0, r1
 80158fe:	602b      	str	r3, [r5, #0]
 8015900:	f7ed f98b 	bl	8002c1a <_isatty>
 8015904:	1c43      	adds	r3, r0, #1
 8015906:	d102      	bne.n	801590e <_isatty_r+0x1a>
 8015908:	682b      	ldr	r3, [r5, #0]
 801590a:	b103      	cbz	r3, 801590e <_isatty_r+0x1a>
 801590c:	6023      	str	r3, [r4, #0]
 801590e:	bd38      	pop	{r3, r4, r5, pc}
 8015910:	200153dc 	.word	0x200153dc

08015914 <_realloc_r>:
 8015914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015918:	4607      	mov	r7, r0
 801591a:	4614      	mov	r4, r2
 801591c:	460d      	mov	r5, r1
 801591e:	b921      	cbnz	r1, 801592a <_realloc_r+0x16>
 8015920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015924:	4611      	mov	r1, r2
 8015926:	f7fe bed5 	b.w	80146d4 <_malloc_r>
 801592a:	b92a      	cbnz	r2, 8015938 <_realloc_r+0x24>
 801592c:	f7ff fa38 	bl	8014da0 <_free_r>
 8015930:	4625      	mov	r5, r4
 8015932:	4628      	mov	r0, r5
 8015934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015938:	f000 f81a 	bl	8015970 <_malloc_usable_size_r>
 801593c:	4284      	cmp	r4, r0
 801593e:	4606      	mov	r6, r0
 8015940:	d802      	bhi.n	8015948 <_realloc_r+0x34>
 8015942:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015946:	d8f4      	bhi.n	8015932 <_realloc_r+0x1e>
 8015948:	4621      	mov	r1, r4
 801594a:	4638      	mov	r0, r7
 801594c:	f7fe fec2 	bl	80146d4 <_malloc_r>
 8015950:	4680      	mov	r8, r0
 8015952:	b908      	cbnz	r0, 8015958 <_realloc_r+0x44>
 8015954:	4645      	mov	r5, r8
 8015956:	e7ec      	b.n	8015932 <_realloc_r+0x1e>
 8015958:	42b4      	cmp	r4, r6
 801595a:	4622      	mov	r2, r4
 801595c:	4629      	mov	r1, r5
 801595e:	bf28      	it	cs
 8015960:	4632      	movcs	r2, r6
 8015962:	f7ff fa0e 	bl	8014d82 <memcpy>
 8015966:	4629      	mov	r1, r5
 8015968:	4638      	mov	r0, r7
 801596a:	f7ff fa19 	bl	8014da0 <_free_r>
 801596e:	e7f1      	b.n	8015954 <_realloc_r+0x40>

08015970 <_malloc_usable_size_r>:
 8015970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015974:	1f18      	subs	r0, r3, #4
 8015976:	2b00      	cmp	r3, #0
 8015978:	bfbc      	itt	lt
 801597a:	580b      	ldrlt	r3, [r1, r0]
 801597c:	18c0      	addlt	r0, r0, r3
 801597e:	4770      	bx	lr

08015980 <pow>:
 8015980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015982:	ed2d 8b02 	vpush	{d8}
 8015986:	eeb0 8a40 	vmov.f32	s16, s0
 801598a:	eef0 8a60 	vmov.f32	s17, s1
 801598e:	ec55 4b11 	vmov	r4, r5, d1
 8015992:	f000 f8ad 	bl	8015af0 <__ieee754_pow>
 8015996:	4622      	mov	r2, r4
 8015998:	462b      	mov	r3, r5
 801599a:	4620      	mov	r0, r4
 801599c:	4629      	mov	r1, r5
 801599e:	ec57 6b10 	vmov	r6, r7, d0
 80159a2:	f7eb f8db 	bl	8000b5c <__aeabi_dcmpun>
 80159a6:	2800      	cmp	r0, #0
 80159a8:	d13b      	bne.n	8015a22 <pow+0xa2>
 80159aa:	ec51 0b18 	vmov	r0, r1, d8
 80159ae:	2200      	movs	r2, #0
 80159b0:	2300      	movs	r3, #0
 80159b2:	f7eb f8a1 	bl	8000af8 <__aeabi_dcmpeq>
 80159b6:	b1b8      	cbz	r0, 80159e8 <pow+0x68>
 80159b8:	2200      	movs	r2, #0
 80159ba:	2300      	movs	r3, #0
 80159bc:	4620      	mov	r0, r4
 80159be:	4629      	mov	r1, r5
 80159c0:	f7eb f89a 	bl	8000af8 <__aeabi_dcmpeq>
 80159c4:	2800      	cmp	r0, #0
 80159c6:	d146      	bne.n	8015a56 <pow+0xd6>
 80159c8:	ec45 4b10 	vmov	d0, r4, r5
 80159cc:	f000 f848 	bl	8015a60 <finite>
 80159d0:	b338      	cbz	r0, 8015a22 <pow+0xa2>
 80159d2:	2200      	movs	r2, #0
 80159d4:	2300      	movs	r3, #0
 80159d6:	4620      	mov	r0, r4
 80159d8:	4629      	mov	r1, r5
 80159da:	f7eb f897 	bl	8000b0c <__aeabi_dcmplt>
 80159de:	b300      	cbz	r0, 8015a22 <pow+0xa2>
 80159e0:	f7ff f9a2 	bl	8014d28 <__errno>
 80159e4:	2322      	movs	r3, #34	@ 0x22
 80159e6:	e01b      	b.n	8015a20 <pow+0xa0>
 80159e8:	ec47 6b10 	vmov	d0, r6, r7
 80159ec:	f000 f838 	bl	8015a60 <finite>
 80159f0:	b9e0      	cbnz	r0, 8015a2c <pow+0xac>
 80159f2:	eeb0 0a48 	vmov.f32	s0, s16
 80159f6:	eef0 0a68 	vmov.f32	s1, s17
 80159fa:	f000 f831 	bl	8015a60 <finite>
 80159fe:	b1a8      	cbz	r0, 8015a2c <pow+0xac>
 8015a00:	ec45 4b10 	vmov	d0, r4, r5
 8015a04:	f000 f82c 	bl	8015a60 <finite>
 8015a08:	b180      	cbz	r0, 8015a2c <pow+0xac>
 8015a0a:	4632      	mov	r2, r6
 8015a0c:	463b      	mov	r3, r7
 8015a0e:	4630      	mov	r0, r6
 8015a10:	4639      	mov	r1, r7
 8015a12:	f7eb f8a3 	bl	8000b5c <__aeabi_dcmpun>
 8015a16:	2800      	cmp	r0, #0
 8015a18:	d0e2      	beq.n	80159e0 <pow+0x60>
 8015a1a:	f7ff f985 	bl	8014d28 <__errno>
 8015a1e:	2321      	movs	r3, #33	@ 0x21
 8015a20:	6003      	str	r3, [r0, #0]
 8015a22:	ecbd 8b02 	vpop	{d8}
 8015a26:	ec47 6b10 	vmov	d0, r6, r7
 8015a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a2c:	2200      	movs	r2, #0
 8015a2e:	2300      	movs	r3, #0
 8015a30:	4630      	mov	r0, r6
 8015a32:	4639      	mov	r1, r7
 8015a34:	f7eb f860 	bl	8000af8 <__aeabi_dcmpeq>
 8015a38:	2800      	cmp	r0, #0
 8015a3a:	d0f2      	beq.n	8015a22 <pow+0xa2>
 8015a3c:	eeb0 0a48 	vmov.f32	s0, s16
 8015a40:	eef0 0a68 	vmov.f32	s1, s17
 8015a44:	f000 f80c 	bl	8015a60 <finite>
 8015a48:	2800      	cmp	r0, #0
 8015a4a:	d0ea      	beq.n	8015a22 <pow+0xa2>
 8015a4c:	ec45 4b10 	vmov	d0, r4, r5
 8015a50:	f000 f806 	bl	8015a60 <finite>
 8015a54:	e7c3      	b.n	80159de <pow+0x5e>
 8015a56:	4f01      	ldr	r7, [pc, #4]	@ (8015a5c <pow+0xdc>)
 8015a58:	2600      	movs	r6, #0
 8015a5a:	e7e2      	b.n	8015a22 <pow+0xa2>
 8015a5c:	3ff00000 	.word	0x3ff00000

08015a60 <finite>:
 8015a60:	b082      	sub	sp, #8
 8015a62:	ed8d 0b00 	vstr	d0, [sp]
 8015a66:	9801      	ldr	r0, [sp, #4]
 8015a68:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8015a6c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8015a70:	0fc0      	lsrs	r0, r0, #31
 8015a72:	b002      	add	sp, #8
 8015a74:	4770      	bx	lr
	...

08015a78 <trunc>:
 8015a78:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8015a7c:	ec5c bb10 	vmov	fp, ip, d0
 8015a80:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8015a84:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8015a88:	2913      	cmp	r1, #19
 8015a8a:	4664      	mov	r4, ip
 8015a8c:	dc14      	bgt.n	8015ab8 <trunc+0x40>
 8015a8e:	2900      	cmp	r1, #0
 8015a90:	bfa4      	itt	ge
 8015a92:	4b15      	ldrge	r3, [pc, #84]	@ (8015ae8 <trunc+0x70>)
 8015a94:	fa43 f101 	asrge.w	r1, r3, r1
 8015a98:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8015a9c:	bfad      	iteet	ge
 8015a9e:	4021      	andge	r1, r4
 8015aa0:	2200      	movlt	r2, #0
 8015aa2:	4603      	movlt	r3, r0
 8015aa4:	2200      	movge	r2, #0
 8015aa6:	bfa8      	it	ge
 8015aa8:	ea41 0300 	orrge.w	r3, r1, r0
 8015aac:	4693      	mov	fp, r2
 8015aae:	469c      	mov	ip, r3
 8015ab0:	ec4c bb10 	vmov	d0, fp, ip
 8015ab4:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8015ab8:	2933      	cmp	r1, #51	@ 0x33
 8015aba:	dd0b      	ble.n	8015ad4 <trunc+0x5c>
 8015abc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8015ac0:	d1f6      	bne.n	8015ab0 <trunc+0x38>
 8015ac2:	465a      	mov	r2, fp
 8015ac4:	4663      	mov	r3, ip
 8015ac6:	4658      	mov	r0, fp
 8015ac8:	4621      	mov	r1, r4
 8015aca:	f7ea fbf7 	bl	80002bc <__adddf3>
 8015ace:	4683      	mov	fp, r0
 8015ad0:	468c      	mov	ip, r1
 8015ad2:	e7ed      	b.n	8015ab0 <trunc+0x38>
 8015ad4:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 8015ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8015adc:	40c3      	lsrs	r3, r0
 8015ade:	ea2b 0603 	bic.w	r6, fp, r3
 8015ae2:	46b3      	mov	fp, r6
 8015ae4:	46a4      	mov	ip, r4
 8015ae6:	e7e3      	b.n	8015ab0 <trunc+0x38>
 8015ae8:	fff00000 	.word	0xfff00000
 8015aec:	00000000 	.word	0x00000000

08015af0 <__ieee754_pow>:
 8015af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015af4:	b091      	sub	sp, #68	@ 0x44
 8015af6:	ed8d 1b00 	vstr	d1, [sp]
 8015afa:	e9dd 1900 	ldrd	r1, r9, [sp]
 8015afe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8015b02:	ea5a 0001 	orrs.w	r0, sl, r1
 8015b06:	ec57 6b10 	vmov	r6, r7, d0
 8015b0a:	d113      	bne.n	8015b34 <__ieee754_pow+0x44>
 8015b0c:	19b3      	adds	r3, r6, r6
 8015b0e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8015b12:	4152      	adcs	r2, r2
 8015b14:	4298      	cmp	r0, r3
 8015b16:	4b9a      	ldr	r3, [pc, #616]	@ (8015d80 <__ieee754_pow+0x290>)
 8015b18:	4193      	sbcs	r3, r2
 8015b1a:	f080 84ee 	bcs.w	80164fa <__ieee754_pow+0xa0a>
 8015b1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015b22:	4630      	mov	r0, r6
 8015b24:	4639      	mov	r1, r7
 8015b26:	f7ea fbc9 	bl	80002bc <__adddf3>
 8015b2a:	ec41 0b10 	vmov	d0, r0, r1
 8015b2e:	b011      	add	sp, #68	@ 0x44
 8015b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b34:	4a93      	ldr	r2, [pc, #588]	@ (8015d84 <__ieee754_pow+0x294>)
 8015b36:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8015b3a:	4295      	cmp	r5, r2
 8015b3c:	46b8      	mov	r8, r7
 8015b3e:	4633      	mov	r3, r6
 8015b40:	d80a      	bhi.n	8015b58 <__ieee754_pow+0x68>
 8015b42:	d104      	bne.n	8015b4e <__ieee754_pow+0x5e>
 8015b44:	2e00      	cmp	r6, #0
 8015b46:	d1ea      	bne.n	8015b1e <__ieee754_pow+0x2e>
 8015b48:	45aa      	cmp	sl, r5
 8015b4a:	d8e8      	bhi.n	8015b1e <__ieee754_pow+0x2e>
 8015b4c:	e001      	b.n	8015b52 <__ieee754_pow+0x62>
 8015b4e:	4592      	cmp	sl, r2
 8015b50:	d802      	bhi.n	8015b58 <__ieee754_pow+0x68>
 8015b52:	4592      	cmp	sl, r2
 8015b54:	d10f      	bne.n	8015b76 <__ieee754_pow+0x86>
 8015b56:	b171      	cbz	r1, 8015b76 <__ieee754_pow+0x86>
 8015b58:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8015b5c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8015b60:	ea58 0803 	orrs.w	r8, r8, r3
 8015b64:	d1db      	bne.n	8015b1e <__ieee754_pow+0x2e>
 8015b66:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015b6a:	18db      	adds	r3, r3, r3
 8015b6c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8015b70:	4152      	adcs	r2, r2
 8015b72:	4598      	cmp	r8, r3
 8015b74:	e7cf      	b.n	8015b16 <__ieee754_pow+0x26>
 8015b76:	f1b8 0f00 	cmp.w	r8, #0
 8015b7a:	46ab      	mov	fp, r5
 8015b7c:	da43      	bge.n	8015c06 <__ieee754_pow+0x116>
 8015b7e:	4a82      	ldr	r2, [pc, #520]	@ (8015d88 <__ieee754_pow+0x298>)
 8015b80:	4592      	cmp	sl, r2
 8015b82:	d856      	bhi.n	8015c32 <__ieee754_pow+0x142>
 8015b84:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8015b88:	4592      	cmp	sl, r2
 8015b8a:	f240 84c5 	bls.w	8016518 <__ieee754_pow+0xa28>
 8015b8e:	ea4f 522a 	mov.w	r2, sl, asr #20
 8015b92:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8015b96:	2a14      	cmp	r2, #20
 8015b98:	dd18      	ble.n	8015bcc <__ieee754_pow+0xdc>
 8015b9a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8015b9e:	fa21 f402 	lsr.w	r4, r1, r2
 8015ba2:	fa04 f202 	lsl.w	r2, r4, r2
 8015ba6:	428a      	cmp	r2, r1
 8015ba8:	f040 84b6 	bne.w	8016518 <__ieee754_pow+0xa28>
 8015bac:	f004 0401 	and.w	r4, r4, #1
 8015bb0:	f1c4 0402 	rsb	r4, r4, #2
 8015bb4:	2900      	cmp	r1, #0
 8015bb6:	d159      	bne.n	8015c6c <__ieee754_pow+0x17c>
 8015bb8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8015bbc:	d148      	bne.n	8015c50 <__ieee754_pow+0x160>
 8015bbe:	4632      	mov	r2, r6
 8015bc0:	463b      	mov	r3, r7
 8015bc2:	4630      	mov	r0, r6
 8015bc4:	4639      	mov	r1, r7
 8015bc6:	f7ea fd2f 	bl	8000628 <__aeabi_dmul>
 8015bca:	e7ae      	b.n	8015b2a <__ieee754_pow+0x3a>
 8015bcc:	2900      	cmp	r1, #0
 8015bce:	d14c      	bne.n	8015c6a <__ieee754_pow+0x17a>
 8015bd0:	f1c2 0214 	rsb	r2, r2, #20
 8015bd4:	fa4a f402 	asr.w	r4, sl, r2
 8015bd8:	fa04 f202 	lsl.w	r2, r4, r2
 8015bdc:	4552      	cmp	r2, sl
 8015bde:	f040 8498 	bne.w	8016512 <__ieee754_pow+0xa22>
 8015be2:	f004 0401 	and.w	r4, r4, #1
 8015be6:	f1c4 0402 	rsb	r4, r4, #2
 8015bea:	4a68      	ldr	r2, [pc, #416]	@ (8015d8c <__ieee754_pow+0x29c>)
 8015bec:	4592      	cmp	sl, r2
 8015bee:	d1e3      	bne.n	8015bb8 <__ieee754_pow+0xc8>
 8015bf0:	f1b9 0f00 	cmp.w	r9, #0
 8015bf4:	f280 8489 	bge.w	801650a <__ieee754_pow+0xa1a>
 8015bf8:	4964      	ldr	r1, [pc, #400]	@ (8015d8c <__ieee754_pow+0x29c>)
 8015bfa:	4632      	mov	r2, r6
 8015bfc:	463b      	mov	r3, r7
 8015bfe:	2000      	movs	r0, #0
 8015c00:	f7ea fe3c 	bl	800087c <__aeabi_ddiv>
 8015c04:	e791      	b.n	8015b2a <__ieee754_pow+0x3a>
 8015c06:	2400      	movs	r4, #0
 8015c08:	bb81      	cbnz	r1, 8015c6c <__ieee754_pow+0x17c>
 8015c0a:	4a5e      	ldr	r2, [pc, #376]	@ (8015d84 <__ieee754_pow+0x294>)
 8015c0c:	4592      	cmp	sl, r2
 8015c0e:	d1ec      	bne.n	8015bea <__ieee754_pow+0xfa>
 8015c10:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 8015c14:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8015c18:	431a      	orrs	r2, r3
 8015c1a:	f000 846e 	beq.w	80164fa <__ieee754_pow+0xa0a>
 8015c1e:	4b5c      	ldr	r3, [pc, #368]	@ (8015d90 <__ieee754_pow+0x2a0>)
 8015c20:	429d      	cmp	r5, r3
 8015c22:	d908      	bls.n	8015c36 <__ieee754_pow+0x146>
 8015c24:	f1b9 0f00 	cmp.w	r9, #0
 8015c28:	f280 846b 	bge.w	8016502 <__ieee754_pow+0xa12>
 8015c2c:	2000      	movs	r0, #0
 8015c2e:	2100      	movs	r1, #0
 8015c30:	e77b      	b.n	8015b2a <__ieee754_pow+0x3a>
 8015c32:	2402      	movs	r4, #2
 8015c34:	e7e8      	b.n	8015c08 <__ieee754_pow+0x118>
 8015c36:	f1b9 0f00 	cmp.w	r9, #0
 8015c3a:	f04f 0000 	mov.w	r0, #0
 8015c3e:	f04f 0100 	mov.w	r1, #0
 8015c42:	f6bf af72 	bge.w	8015b2a <__ieee754_pow+0x3a>
 8015c46:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015c4a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8015c4e:	e76c      	b.n	8015b2a <__ieee754_pow+0x3a>
 8015c50:	4a50      	ldr	r2, [pc, #320]	@ (8015d94 <__ieee754_pow+0x2a4>)
 8015c52:	4591      	cmp	r9, r2
 8015c54:	d10a      	bne.n	8015c6c <__ieee754_pow+0x17c>
 8015c56:	f1b8 0f00 	cmp.w	r8, #0
 8015c5a:	db07      	blt.n	8015c6c <__ieee754_pow+0x17c>
 8015c5c:	ec47 6b10 	vmov	d0, r6, r7
 8015c60:	b011      	add	sp, #68	@ 0x44
 8015c62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c66:	f000 bd4f 	b.w	8016708 <__ieee754_sqrt>
 8015c6a:	2400      	movs	r4, #0
 8015c6c:	ec47 6b10 	vmov	d0, r6, r7
 8015c70:	9302      	str	r3, [sp, #8]
 8015c72:	f000 fc87 	bl	8016584 <fabs>
 8015c76:	9b02      	ldr	r3, [sp, #8]
 8015c78:	ec51 0b10 	vmov	r0, r1, d0
 8015c7c:	bb43      	cbnz	r3, 8015cd0 <__ieee754_pow+0x1e0>
 8015c7e:	4b43      	ldr	r3, [pc, #268]	@ (8015d8c <__ieee754_pow+0x29c>)
 8015c80:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8015c84:	429a      	cmp	r2, r3
 8015c86:	d000      	beq.n	8015c8a <__ieee754_pow+0x19a>
 8015c88:	bb15      	cbnz	r5, 8015cd0 <__ieee754_pow+0x1e0>
 8015c8a:	f1b9 0f00 	cmp.w	r9, #0
 8015c8e:	da05      	bge.n	8015c9c <__ieee754_pow+0x1ac>
 8015c90:	4602      	mov	r2, r0
 8015c92:	460b      	mov	r3, r1
 8015c94:	2000      	movs	r0, #0
 8015c96:	493d      	ldr	r1, [pc, #244]	@ (8015d8c <__ieee754_pow+0x29c>)
 8015c98:	f7ea fdf0 	bl	800087c <__aeabi_ddiv>
 8015c9c:	f1b8 0f00 	cmp.w	r8, #0
 8015ca0:	f6bf af43 	bge.w	8015b2a <__ieee754_pow+0x3a>
 8015ca4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8015ca8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8015cac:	4325      	orrs	r5, r4
 8015cae:	d108      	bne.n	8015cc2 <__ieee754_pow+0x1d2>
 8015cb0:	4602      	mov	r2, r0
 8015cb2:	460b      	mov	r3, r1
 8015cb4:	4610      	mov	r0, r2
 8015cb6:	4619      	mov	r1, r3
 8015cb8:	f7ea fafe 	bl	80002b8 <__aeabi_dsub>
 8015cbc:	4602      	mov	r2, r0
 8015cbe:	460b      	mov	r3, r1
 8015cc0:	e79e      	b.n	8015c00 <__ieee754_pow+0x110>
 8015cc2:	2c01      	cmp	r4, #1
 8015cc4:	f47f af31 	bne.w	8015b2a <__ieee754_pow+0x3a>
 8015cc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015ccc:	4619      	mov	r1, r3
 8015cce:	e72c      	b.n	8015b2a <__ieee754_pow+0x3a>
 8015cd0:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8015cd4:	3b01      	subs	r3, #1
 8015cd6:	ea53 0204 	orrs.w	r2, r3, r4
 8015cda:	d102      	bne.n	8015ce2 <__ieee754_pow+0x1f2>
 8015cdc:	4632      	mov	r2, r6
 8015cde:	463b      	mov	r3, r7
 8015ce0:	e7e8      	b.n	8015cb4 <__ieee754_pow+0x1c4>
 8015ce2:	3c01      	subs	r4, #1
 8015ce4:	431c      	orrs	r4, r3
 8015ce6:	d016      	beq.n	8015d16 <__ieee754_pow+0x226>
 8015ce8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8015d70 <__ieee754_pow+0x280>
 8015cec:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8015cf0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015cf4:	f240 8110 	bls.w	8015f18 <__ieee754_pow+0x428>
 8015cf8:	4b27      	ldr	r3, [pc, #156]	@ (8015d98 <__ieee754_pow+0x2a8>)
 8015cfa:	459a      	cmp	sl, r3
 8015cfc:	4b24      	ldr	r3, [pc, #144]	@ (8015d90 <__ieee754_pow+0x2a0>)
 8015cfe:	d916      	bls.n	8015d2e <__ieee754_pow+0x23e>
 8015d00:	429d      	cmp	r5, r3
 8015d02:	d80b      	bhi.n	8015d1c <__ieee754_pow+0x22c>
 8015d04:	f1b9 0f00 	cmp.w	r9, #0
 8015d08:	da0b      	bge.n	8015d22 <__ieee754_pow+0x232>
 8015d0a:	2000      	movs	r0, #0
 8015d0c:	b011      	add	sp, #68	@ 0x44
 8015d0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d12:	f000 bcf1 	b.w	80166f8 <__math_oflow>
 8015d16:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8015d78 <__ieee754_pow+0x288>
 8015d1a:	e7e7      	b.n	8015cec <__ieee754_pow+0x1fc>
 8015d1c:	f1b9 0f00 	cmp.w	r9, #0
 8015d20:	dcf3      	bgt.n	8015d0a <__ieee754_pow+0x21a>
 8015d22:	2000      	movs	r0, #0
 8015d24:	b011      	add	sp, #68	@ 0x44
 8015d26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d2a:	f000 bcdd 	b.w	80166e8 <__math_uflow>
 8015d2e:	429d      	cmp	r5, r3
 8015d30:	d20c      	bcs.n	8015d4c <__ieee754_pow+0x25c>
 8015d32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015d36:	2200      	movs	r2, #0
 8015d38:	2300      	movs	r3, #0
 8015d3a:	f7ea fee7 	bl	8000b0c <__aeabi_dcmplt>
 8015d3e:	3800      	subs	r0, #0
 8015d40:	bf18      	it	ne
 8015d42:	2001      	movne	r0, #1
 8015d44:	f1b9 0f00 	cmp.w	r9, #0
 8015d48:	daec      	bge.n	8015d24 <__ieee754_pow+0x234>
 8015d4a:	e7df      	b.n	8015d0c <__ieee754_pow+0x21c>
 8015d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8015d8c <__ieee754_pow+0x29c>)
 8015d4e:	429d      	cmp	r5, r3
 8015d50:	f04f 0200 	mov.w	r2, #0
 8015d54:	d922      	bls.n	8015d9c <__ieee754_pow+0x2ac>
 8015d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	f7ea fed6 	bl	8000b0c <__aeabi_dcmplt>
 8015d60:	3800      	subs	r0, #0
 8015d62:	bf18      	it	ne
 8015d64:	2001      	movne	r0, #1
 8015d66:	f1b9 0f00 	cmp.w	r9, #0
 8015d6a:	dccf      	bgt.n	8015d0c <__ieee754_pow+0x21c>
 8015d6c:	e7da      	b.n	8015d24 <__ieee754_pow+0x234>
 8015d6e:	bf00      	nop
 8015d70:	00000000 	.word	0x00000000
 8015d74:	3ff00000 	.word	0x3ff00000
 8015d78:	00000000 	.word	0x00000000
 8015d7c:	bff00000 	.word	0xbff00000
 8015d80:	fff00000 	.word	0xfff00000
 8015d84:	7ff00000 	.word	0x7ff00000
 8015d88:	433fffff 	.word	0x433fffff
 8015d8c:	3ff00000 	.word	0x3ff00000
 8015d90:	3fefffff 	.word	0x3fefffff
 8015d94:	3fe00000 	.word	0x3fe00000
 8015d98:	43f00000 	.word	0x43f00000
 8015d9c:	4b5a      	ldr	r3, [pc, #360]	@ (8015f08 <__ieee754_pow+0x418>)
 8015d9e:	f7ea fa8b 	bl	80002b8 <__aeabi_dsub>
 8015da2:	a351      	add	r3, pc, #324	@ (adr r3, 8015ee8 <__ieee754_pow+0x3f8>)
 8015da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015da8:	4604      	mov	r4, r0
 8015daa:	460d      	mov	r5, r1
 8015dac:	f7ea fc3c 	bl	8000628 <__aeabi_dmul>
 8015db0:	a34f      	add	r3, pc, #316	@ (adr r3, 8015ef0 <__ieee754_pow+0x400>)
 8015db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015db6:	4606      	mov	r6, r0
 8015db8:	460f      	mov	r7, r1
 8015dba:	4620      	mov	r0, r4
 8015dbc:	4629      	mov	r1, r5
 8015dbe:	f7ea fc33 	bl	8000628 <__aeabi_dmul>
 8015dc2:	4b52      	ldr	r3, [pc, #328]	@ (8015f0c <__ieee754_pow+0x41c>)
 8015dc4:	4682      	mov	sl, r0
 8015dc6:	468b      	mov	fp, r1
 8015dc8:	2200      	movs	r2, #0
 8015dca:	4620      	mov	r0, r4
 8015dcc:	4629      	mov	r1, r5
 8015dce:	f7ea fc2b 	bl	8000628 <__aeabi_dmul>
 8015dd2:	4602      	mov	r2, r0
 8015dd4:	460b      	mov	r3, r1
 8015dd6:	a148      	add	r1, pc, #288	@ (adr r1, 8015ef8 <__ieee754_pow+0x408>)
 8015dd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ddc:	f7ea fa6c 	bl	80002b8 <__aeabi_dsub>
 8015de0:	4622      	mov	r2, r4
 8015de2:	462b      	mov	r3, r5
 8015de4:	f7ea fc20 	bl	8000628 <__aeabi_dmul>
 8015de8:	4602      	mov	r2, r0
 8015dea:	460b      	mov	r3, r1
 8015dec:	2000      	movs	r0, #0
 8015dee:	4948      	ldr	r1, [pc, #288]	@ (8015f10 <__ieee754_pow+0x420>)
 8015df0:	f7ea fa62 	bl	80002b8 <__aeabi_dsub>
 8015df4:	4622      	mov	r2, r4
 8015df6:	4680      	mov	r8, r0
 8015df8:	4689      	mov	r9, r1
 8015dfa:	462b      	mov	r3, r5
 8015dfc:	4620      	mov	r0, r4
 8015dfe:	4629      	mov	r1, r5
 8015e00:	f7ea fc12 	bl	8000628 <__aeabi_dmul>
 8015e04:	4602      	mov	r2, r0
 8015e06:	460b      	mov	r3, r1
 8015e08:	4640      	mov	r0, r8
 8015e0a:	4649      	mov	r1, r9
 8015e0c:	f7ea fc0c 	bl	8000628 <__aeabi_dmul>
 8015e10:	a33b      	add	r3, pc, #236	@ (adr r3, 8015f00 <__ieee754_pow+0x410>)
 8015e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e16:	f7ea fc07 	bl	8000628 <__aeabi_dmul>
 8015e1a:	4602      	mov	r2, r0
 8015e1c:	460b      	mov	r3, r1
 8015e1e:	4650      	mov	r0, sl
 8015e20:	4659      	mov	r1, fp
 8015e22:	f7ea fa49 	bl	80002b8 <__aeabi_dsub>
 8015e26:	4602      	mov	r2, r0
 8015e28:	460b      	mov	r3, r1
 8015e2a:	4680      	mov	r8, r0
 8015e2c:	4689      	mov	r9, r1
 8015e2e:	4630      	mov	r0, r6
 8015e30:	4639      	mov	r1, r7
 8015e32:	f7ea fa43 	bl	80002bc <__adddf3>
 8015e36:	2400      	movs	r4, #0
 8015e38:	4632      	mov	r2, r6
 8015e3a:	463b      	mov	r3, r7
 8015e3c:	4620      	mov	r0, r4
 8015e3e:	460d      	mov	r5, r1
 8015e40:	f7ea fa3a 	bl	80002b8 <__aeabi_dsub>
 8015e44:	4602      	mov	r2, r0
 8015e46:	460b      	mov	r3, r1
 8015e48:	4640      	mov	r0, r8
 8015e4a:	4649      	mov	r1, r9
 8015e4c:	f7ea fa34 	bl	80002b8 <__aeabi_dsub>
 8015e50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015e54:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015e58:	2300      	movs	r3, #0
 8015e5a:	9304      	str	r3, [sp, #16]
 8015e5c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8015e60:	4606      	mov	r6, r0
 8015e62:	460f      	mov	r7, r1
 8015e64:	465b      	mov	r3, fp
 8015e66:	4652      	mov	r2, sl
 8015e68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e6c:	f7ea fa24 	bl	80002b8 <__aeabi_dsub>
 8015e70:	4622      	mov	r2, r4
 8015e72:	462b      	mov	r3, r5
 8015e74:	f7ea fbd8 	bl	8000628 <__aeabi_dmul>
 8015e78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015e7c:	4680      	mov	r8, r0
 8015e7e:	4689      	mov	r9, r1
 8015e80:	4630      	mov	r0, r6
 8015e82:	4639      	mov	r1, r7
 8015e84:	f7ea fbd0 	bl	8000628 <__aeabi_dmul>
 8015e88:	4602      	mov	r2, r0
 8015e8a:	460b      	mov	r3, r1
 8015e8c:	4640      	mov	r0, r8
 8015e8e:	4649      	mov	r1, r9
 8015e90:	f7ea fa14 	bl	80002bc <__adddf3>
 8015e94:	465b      	mov	r3, fp
 8015e96:	4606      	mov	r6, r0
 8015e98:	460f      	mov	r7, r1
 8015e9a:	4652      	mov	r2, sl
 8015e9c:	4620      	mov	r0, r4
 8015e9e:	4629      	mov	r1, r5
 8015ea0:	f7ea fbc2 	bl	8000628 <__aeabi_dmul>
 8015ea4:	460b      	mov	r3, r1
 8015ea6:	4602      	mov	r2, r0
 8015ea8:	4680      	mov	r8, r0
 8015eaa:	4689      	mov	r9, r1
 8015eac:	4630      	mov	r0, r6
 8015eae:	4639      	mov	r1, r7
 8015eb0:	f7ea fa04 	bl	80002bc <__adddf3>
 8015eb4:	4b17      	ldr	r3, [pc, #92]	@ (8015f14 <__ieee754_pow+0x424>)
 8015eb6:	4299      	cmp	r1, r3
 8015eb8:	4604      	mov	r4, r0
 8015eba:	460d      	mov	r5, r1
 8015ebc:	468b      	mov	fp, r1
 8015ebe:	f340 820b 	ble.w	80162d8 <__ieee754_pow+0x7e8>
 8015ec2:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8015ec6:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8015eca:	4303      	orrs	r3, r0
 8015ecc:	f000 81ea 	beq.w	80162a4 <__ieee754_pow+0x7b4>
 8015ed0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015ed4:	2200      	movs	r2, #0
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	f7ea fe18 	bl	8000b0c <__aeabi_dcmplt>
 8015edc:	3800      	subs	r0, #0
 8015ede:	bf18      	it	ne
 8015ee0:	2001      	movne	r0, #1
 8015ee2:	e713      	b.n	8015d0c <__ieee754_pow+0x21c>
 8015ee4:	f3af 8000 	nop.w
 8015ee8:	60000000 	.word	0x60000000
 8015eec:	3ff71547 	.word	0x3ff71547
 8015ef0:	f85ddf44 	.word	0xf85ddf44
 8015ef4:	3e54ae0b 	.word	0x3e54ae0b
 8015ef8:	55555555 	.word	0x55555555
 8015efc:	3fd55555 	.word	0x3fd55555
 8015f00:	652b82fe 	.word	0x652b82fe
 8015f04:	3ff71547 	.word	0x3ff71547
 8015f08:	3ff00000 	.word	0x3ff00000
 8015f0c:	3fd00000 	.word	0x3fd00000
 8015f10:	3fe00000 	.word	0x3fe00000
 8015f14:	408fffff 	.word	0x408fffff
 8015f18:	4bd5      	ldr	r3, [pc, #852]	@ (8016270 <__ieee754_pow+0x780>)
 8015f1a:	ea08 0303 	and.w	r3, r8, r3
 8015f1e:	2200      	movs	r2, #0
 8015f20:	b92b      	cbnz	r3, 8015f2e <__ieee754_pow+0x43e>
 8015f22:	4bd4      	ldr	r3, [pc, #848]	@ (8016274 <__ieee754_pow+0x784>)
 8015f24:	f7ea fb80 	bl	8000628 <__aeabi_dmul>
 8015f28:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8015f2c:	468b      	mov	fp, r1
 8015f2e:	ea4f 532b 	mov.w	r3, fp, asr #20
 8015f32:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8015f36:	4413      	add	r3, r2
 8015f38:	930a      	str	r3, [sp, #40]	@ 0x28
 8015f3a:	4bcf      	ldr	r3, [pc, #828]	@ (8016278 <__ieee754_pow+0x788>)
 8015f3c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8015f40:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8015f44:	459b      	cmp	fp, r3
 8015f46:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8015f4a:	dd08      	ble.n	8015f5e <__ieee754_pow+0x46e>
 8015f4c:	4bcb      	ldr	r3, [pc, #812]	@ (801627c <__ieee754_pow+0x78c>)
 8015f4e:	459b      	cmp	fp, r3
 8015f50:	f340 81a5 	ble.w	801629e <__ieee754_pow+0x7ae>
 8015f54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015f56:	3301      	adds	r3, #1
 8015f58:	930a      	str	r3, [sp, #40]	@ 0x28
 8015f5a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8015f5e:	f04f 0a00 	mov.w	sl, #0
 8015f62:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8015f66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015f68:	4bc5      	ldr	r3, [pc, #788]	@ (8016280 <__ieee754_pow+0x790>)
 8015f6a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015f6e:	ed93 7b00 	vldr	d7, [r3]
 8015f72:	4629      	mov	r1, r5
 8015f74:	ec53 2b17 	vmov	r2, r3, d7
 8015f78:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015f7c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015f80:	f7ea f99a 	bl	80002b8 <__aeabi_dsub>
 8015f84:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015f88:	4606      	mov	r6, r0
 8015f8a:	460f      	mov	r7, r1
 8015f8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015f90:	f7ea f994 	bl	80002bc <__adddf3>
 8015f94:	4602      	mov	r2, r0
 8015f96:	460b      	mov	r3, r1
 8015f98:	2000      	movs	r0, #0
 8015f9a:	49ba      	ldr	r1, [pc, #744]	@ (8016284 <__ieee754_pow+0x794>)
 8015f9c:	f7ea fc6e 	bl	800087c <__aeabi_ddiv>
 8015fa0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8015fa4:	4602      	mov	r2, r0
 8015fa6:	460b      	mov	r3, r1
 8015fa8:	4630      	mov	r0, r6
 8015faa:	4639      	mov	r1, r7
 8015fac:	f7ea fb3c 	bl	8000628 <__aeabi_dmul>
 8015fb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015fb4:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8015fb8:	106d      	asrs	r5, r5, #1
 8015fba:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8015fbe:	f04f 0b00 	mov.w	fp, #0
 8015fc2:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8015fc6:	4661      	mov	r1, ip
 8015fc8:	2200      	movs	r2, #0
 8015fca:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8015fce:	4658      	mov	r0, fp
 8015fd0:	46e1      	mov	r9, ip
 8015fd2:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8015fd6:	4614      	mov	r4, r2
 8015fd8:	461d      	mov	r5, r3
 8015fda:	f7ea fb25 	bl	8000628 <__aeabi_dmul>
 8015fde:	4602      	mov	r2, r0
 8015fe0:	460b      	mov	r3, r1
 8015fe2:	4630      	mov	r0, r6
 8015fe4:	4639      	mov	r1, r7
 8015fe6:	f7ea f967 	bl	80002b8 <__aeabi_dsub>
 8015fea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015fee:	4606      	mov	r6, r0
 8015ff0:	460f      	mov	r7, r1
 8015ff2:	4620      	mov	r0, r4
 8015ff4:	4629      	mov	r1, r5
 8015ff6:	f7ea f95f 	bl	80002b8 <__aeabi_dsub>
 8015ffa:	4602      	mov	r2, r0
 8015ffc:	460b      	mov	r3, r1
 8015ffe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016002:	f7ea f959 	bl	80002b8 <__aeabi_dsub>
 8016006:	465a      	mov	r2, fp
 8016008:	464b      	mov	r3, r9
 801600a:	f7ea fb0d 	bl	8000628 <__aeabi_dmul>
 801600e:	4602      	mov	r2, r0
 8016010:	460b      	mov	r3, r1
 8016012:	4630      	mov	r0, r6
 8016014:	4639      	mov	r1, r7
 8016016:	f7ea f94f 	bl	80002b8 <__aeabi_dsub>
 801601a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801601e:	f7ea fb03 	bl	8000628 <__aeabi_dmul>
 8016022:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016026:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801602a:	4610      	mov	r0, r2
 801602c:	4619      	mov	r1, r3
 801602e:	f7ea fafb 	bl	8000628 <__aeabi_dmul>
 8016032:	a37d      	add	r3, pc, #500	@ (adr r3, 8016228 <__ieee754_pow+0x738>)
 8016034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016038:	4604      	mov	r4, r0
 801603a:	460d      	mov	r5, r1
 801603c:	f7ea faf4 	bl	8000628 <__aeabi_dmul>
 8016040:	a37b      	add	r3, pc, #492	@ (adr r3, 8016230 <__ieee754_pow+0x740>)
 8016042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016046:	f7ea f939 	bl	80002bc <__adddf3>
 801604a:	4622      	mov	r2, r4
 801604c:	462b      	mov	r3, r5
 801604e:	f7ea faeb 	bl	8000628 <__aeabi_dmul>
 8016052:	a379      	add	r3, pc, #484	@ (adr r3, 8016238 <__ieee754_pow+0x748>)
 8016054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016058:	f7ea f930 	bl	80002bc <__adddf3>
 801605c:	4622      	mov	r2, r4
 801605e:	462b      	mov	r3, r5
 8016060:	f7ea fae2 	bl	8000628 <__aeabi_dmul>
 8016064:	a376      	add	r3, pc, #472	@ (adr r3, 8016240 <__ieee754_pow+0x750>)
 8016066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801606a:	f7ea f927 	bl	80002bc <__adddf3>
 801606e:	4622      	mov	r2, r4
 8016070:	462b      	mov	r3, r5
 8016072:	f7ea fad9 	bl	8000628 <__aeabi_dmul>
 8016076:	a374      	add	r3, pc, #464	@ (adr r3, 8016248 <__ieee754_pow+0x758>)
 8016078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801607c:	f7ea f91e 	bl	80002bc <__adddf3>
 8016080:	4622      	mov	r2, r4
 8016082:	462b      	mov	r3, r5
 8016084:	f7ea fad0 	bl	8000628 <__aeabi_dmul>
 8016088:	a371      	add	r3, pc, #452	@ (adr r3, 8016250 <__ieee754_pow+0x760>)
 801608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801608e:	f7ea f915 	bl	80002bc <__adddf3>
 8016092:	4622      	mov	r2, r4
 8016094:	4606      	mov	r6, r0
 8016096:	460f      	mov	r7, r1
 8016098:	462b      	mov	r3, r5
 801609a:	4620      	mov	r0, r4
 801609c:	4629      	mov	r1, r5
 801609e:	f7ea fac3 	bl	8000628 <__aeabi_dmul>
 80160a2:	4602      	mov	r2, r0
 80160a4:	460b      	mov	r3, r1
 80160a6:	4630      	mov	r0, r6
 80160a8:	4639      	mov	r1, r7
 80160aa:	f7ea fabd 	bl	8000628 <__aeabi_dmul>
 80160ae:	465a      	mov	r2, fp
 80160b0:	4604      	mov	r4, r0
 80160b2:	460d      	mov	r5, r1
 80160b4:	464b      	mov	r3, r9
 80160b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80160ba:	f7ea f8ff 	bl	80002bc <__adddf3>
 80160be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80160c2:	f7ea fab1 	bl	8000628 <__aeabi_dmul>
 80160c6:	4622      	mov	r2, r4
 80160c8:	462b      	mov	r3, r5
 80160ca:	f7ea f8f7 	bl	80002bc <__adddf3>
 80160ce:	465a      	mov	r2, fp
 80160d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80160d4:	464b      	mov	r3, r9
 80160d6:	4658      	mov	r0, fp
 80160d8:	4649      	mov	r1, r9
 80160da:	f7ea faa5 	bl	8000628 <__aeabi_dmul>
 80160de:	4b6a      	ldr	r3, [pc, #424]	@ (8016288 <__ieee754_pow+0x798>)
 80160e0:	2200      	movs	r2, #0
 80160e2:	4606      	mov	r6, r0
 80160e4:	460f      	mov	r7, r1
 80160e6:	f7ea f8e9 	bl	80002bc <__adddf3>
 80160ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80160ee:	f7ea f8e5 	bl	80002bc <__adddf3>
 80160f2:	46d8      	mov	r8, fp
 80160f4:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80160f8:	460d      	mov	r5, r1
 80160fa:	465a      	mov	r2, fp
 80160fc:	460b      	mov	r3, r1
 80160fe:	4640      	mov	r0, r8
 8016100:	4649      	mov	r1, r9
 8016102:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8016106:	f7ea fa8f 	bl	8000628 <__aeabi_dmul>
 801610a:	465c      	mov	r4, fp
 801610c:	4680      	mov	r8, r0
 801610e:	4689      	mov	r9, r1
 8016110:	4b5d      	ldr	r3, [pc, #372]	@ (8016288 <__ieee754_pow+0x798>)
 8016112:	2200      	movs	r2, #0
 8016114:	4620      	mov	r0, r4
 8016116:	4629      	mov	r1, r5
 8016118:	f7ea f8ce 	bl	80002b8 <__aeabi_dsub>
 801611c:	4632      	mov	r2, r6
 801611e:	463b      	mov	r3, r7
 8016120:	f7ea f8ca 	bl	80002b8 <__aeabi_dsub>
 8016124:	4602      	mov	r2, r0
 8016126:	460b      	mov	r3, r1
 8016128:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801612c:	f7ea f8c4 	bl	80002b8 <__aeabi_dsub>
 8016130:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016134:	f7ea fa78 	bl	8000628 <__aeabi_dmul>
 8016138:	4622      	mov	r2, r4
 801613a:	4606      	mov	r6, r0
 801613c:	460f      	mov	r7, r1
 801613e:	462b      	mov	r3, r5
 8016140:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016144:	f7ea fa70 	bl	8000628 <__aeabi_dmul>
 8016148:	4602      	mov	r2, r0
 801614a:	460b      	mov	r3, r1
 801614c:	4630      	mov	r0, r6
 801614e:	4639      	mov	r1, r7
 8016150:	f7ea f8b4 	bl	80002bc <__adddf3>
 8016154:	4606      	mov	r6, r0
 8016156:	460f      	mov	r7, r1
 8016158:	4602      	mov	r2, r0
 801615a:	460b      	mov	r3, r1
 801615c:	4640      	mov	r0, r8
 801615e:	4649      	mov	r1, r9
 8016160:	f7ea f8ac 	bl	80002bc <__adddf3>
 8016164:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8016168:	a33b      	add	r3, pc, #236	@ (adr r3, 8016258 <__ieee754_pow+0x768>)
 801616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801616e:	4658      	mov	r0, fp
 8016170:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8016174:	460d      	mov	r5, r1
 8016176:	f7ea fa57 	bl	8000628 <__aeabi_dmul>
 801617a:	465c      	mov	r4, fp
 801617c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016180:	4642      	mov	r2, r8
 8016182:	464b      	mov	r3, r9
 8016184:	4620      	mov	r0, r4
 8016186:	4629      	mov	r1, r5
 8016188:	f7ea f896 	bl	80002b8 <__aeabi_dsub>
 801618c:	4602      	mov	r2, r0
 801618e:	460b      	mov	r3, r1
 8016190:	4630      	mov	r0, r6
 8016192:	4639      	mov	r1, r7
 8016194:	f7ea f890 	bl	80002b8 <__aeabi_dsub>
 8016198:	a331      	add	r3, pc, #196	@ (adr r3, 8016260 <__ieee754_pow+0x770>)
 801619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801619e:	f7ea fa43 	bl	8000628 <__aeabi_dmul>
 80161a2:	a331      	add	r3, pc, #196	@ (adr r3, 8016268 <__ieee754_pow+0x778>)
 80161a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161a8:	4606      	mov	r6, r0
 80161aa:	460f      	mov	r7, r1
 80161ac:	4620      	mov	r0, r4
 80161ae:	4629      	mov	r1, r5
 80161b0:	f7ea fa3a 	bl	8000628 <__aeabi_dmul>
 80161b4:	4602      	mov	r2, r0
 80161b6:	460b      	mov	r3, r1
 80161b8:	4630      	mov	r0, r6
 80161ba:	4639      	mov	r1, r7
 80161bc:	f7ea f87e 	bl	80002bc <__adddf3>
 80161c0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80161c2:	4b32      	ldr	r3, [pc, #200]	@ (801628c <__ieee754_pow+0x79c>)
 80161c4:	4413      	add	r3, r2
 80161c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ca:	f7ea f877 	bl	80002bc <__adddf3>
 80161ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80161d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80161d4:	f7ea f9be 	bl	8000554 <__aeabi_i2d>
 80161d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80161da:	4b2d      	ldr	r3, [pc, #180]	@ (8016290 <__ieee754_pow+0x7a0>)
 80161dc:	4413      	add	r3, r2
 80161de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80161e2:	4606      	mov	r6, r0
 80161e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80161e8:	460f      	mov	r7, r1
 80161ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80161ee:	f7ea f865 	bl	80002bc <__adddf3>
 80161f2:	4642      	mov	r2, r8
 80161f4:	464b      	mov	r3, r9
 80161f6:	f7ea f861 	bl	80002bc <__adddf3>
 80161fa:	4632      	mov	r2, r6
 80161fc:	463b      	mov	r3, r7
 80161fe:	f7ea f85d 	bl	80002bc <__adddf3>
 8016202:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8016206:	4632      	mov	r2, r6
 8016208:	463b      	mov	r3, r7
 801620a:	4658      	mov	r0, fp
 801620c:	460d      	mov	r5, r1
 801620e:	f7ea f853 	bl	80002b8 <__aeabi_dsub>
 8016212:	4642      	mov	r2, r8
 8016214:	464b      	mov	r3, r9
 8016216:	f7ea f84f 	bl	80002b8 <__aeabi_dsub>
 801621a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801621e:	f7ea f84b 	bl	80002b8 <__aeabi_dsub>
 8016222:	465c      	mov	r4, fp
 8016224:	e036      	b.n	8016294 <__ieee754_pow+0x7a4>
 8016226:	bf00      	nop
 8016228:	4a454eef 	.word	0x4a454eef
 801622c:	3fca7e28 	.word	0x3fca7e28
 8016230:	93c9db65 	.word	0x93c9db65
 8016234:	3fcd864a 	.word	0x3fcd864a
 8016238:	a91d4101 	.word	0xa91d4101
 801623c:	3fd17460 	.word	0x3fd17460
 8016240:	518f264d 	.word	0x518f264d
 8016244:	3fd55555 	.word	0x3fd55555
 8016248:	db6fabff 	.word	0xdb6fabff
 801624c:	3fdb6db6 	.word	0x3fdb6db6
 8016250:	33333303 	.word	0x33333303
 8016254:	3fe33333 	.word	0x3fe33333
 8016258:	e0000000 	.word	0xe0000000
 801625c:	3feec709 	.word	0x3feec709
 8016260:	dc3a03fd 	.word	0xdc3a03fd
 8016264:	3feec709 	.word	0x3feec709
 8016268:	145b01f5 	.word	0x145b01f5
 801626c:	be3e2fe0 	.word	0xbe3e2fe0
 8016270:	7ff00000 	.word	0x7ff00000
 8016274:	43400000 	.word	0x43400000
 8016278:	0003988e 	.word	0x0003988e
 801627c:	000bb679 	.word	0x000bb679
 8016280:	080176d0 	.word	0x080176d0
 8016284:	3ff00000 	.word	0x3ff00000
 8016288:	40080000 	.word	0x40080000
 801628c:	080176b0 	.word	0x080176b0
 8016290:	080176c0 	.word	0x080176c0
 8016294:	4602      	mov	r2, r0
 8016296:	460b      	mov	r3, r1
 8016298:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801629c:	e5d6      	b.n	8015e4c <__ieee754_pow+0x35c>
 801629e:	f04f 0a01 	mov.w	sl, #1
 80162a2:	e65e      	b.n	8015f62 <__ieee754_pow+0x472>
 80162a4:	a3b5      	add	r3, pc, #724	@ (adr r3, 801657c <__ieee754_pow+0xa8c>)
 80162a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162aa:	4630      	mov	r0, r6
 80162ac:	4639      	mov	r1, r7
 80162ae:	f7ea f805 	bl	80002bc <__adddf3>
 80162b2:	4642      	mov	r2, r8
 80162b4:	e9cd 0100 	strd	r0, r1, [sp]
 80162b8:	464b      	mov	r3, r9
 80162ba:	4620      	mov	r0, r4
 80162bc:	4629      	mov	r1, r5
 80162be:	f7e9 fffb 	bl	80002b8 <__aeabi_dsub>
 80162c2:	4602      	mov	r2, r0
 80162c4:	460b      	mov	r3, r1
 80162c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80162ca:	f7ea fc3d 	bl	8000b48 <__aeabi_dcmpgt>
 80162ce:	2800      	cmp	r0, #0
 80162d0:	f47f adfe 	bne.w	8015ed0 <__ieee754_pow+0x3e0>
 80162d4:	4ba2      	ldr	r3, [pc, #648]	@ (8016560 <__ieee754_pow+0xa70>)
 80162d6:	e022      	b.n	801631e <__ieee754_pow+0x82e>
 80162d8:	4ca2      	ldr	r4, [pc, #648]	@ (8016564 <__ieee754_pow+0xa74>)
 80162da:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80162de:	42a3      	cmp	r3, r4
 80162e0:	d919      	bls.n	8016316 <__ieee754_pow+0x826>
 80162e2:	4ba1      	ldr	r3, [pc, #644]	@ (8016568 <__ieee754_pow+0xa78>)
 80162e4:	440b      	add	r3, r1
 80162e6:	4303      	orrs	r3, r0
 80162e8:	d009      	beq.n	80162fe <__ieee754_pow+0x80e>
 80162ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80162ee:	2200      	movs	r2, #0
 80162f0:	2300      	movs	r3, #0
 80162f2:	f7ea fc0b 	bl	8000b0c <__aeabi_dcmplt>
 80162f6:	3800      	subs	r0, #0
 80162f8:	bf18      	it	ne
 80162fa:	2001      	movne	r0, #1
 80162fc:	e512      	b.n	8015d24 <__ieee754_pow+0x234>
 80162fe:	4642      	mov	r2, r8
 8016300:	464b      	mov	r3, r9
 8016302:	f7e9 ffd9 	bl	80002b8 <__aeabi_dsub>
 8016306:	4632      	mov	r2, r6
 8016308:	463b      	mov	r3, r7
 801630a:	f7ea fc13 	bl	8000b34 <__aeabi_dcmpge>
 801630e:	2800      	cmp	r0, #0
 8016310:	d1eb      	bne.n	80162ea <__ieee754_pow+0x7fa>
 8016312:	4b96      	ldr	r3, [pc, #600]	@ (801656c <__ieee754_pow+0xa7c>)
 8016314:	e003      	b.n	801631e <__ieee754_pow+0x82e>
 8016316:	4a96      	ldr	r2, [pc, #600]	@ (8016570 <__ieee754_pow+0xa80>)
 8016318:	4293      	cmp	r3, r2
 801631a:	f240 80e7 	bls.w	80164ec <__ieee754_pow+0x9fc>
 801631e:	151b      	asrs	r3, r3, #20
 8016320:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8016324:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8016328:	fa4a fa03 	asr.w	sl, sl, r3
 801632c:	44da      	add	sl, fp
 801632e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8016332:	4890      	ldr	r0, [pc, #576]	@ (8016574 <__ieee754_pow+0xa84>)
 8016334:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8016338:	4108      	asrs	r0, r1
 801633a:	ea00 030a 	and.w	r3, r0, sl
 801633e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8016342:	f1c1 0114 	rsb	r1, r1, #20
 8016346:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801634a:	fa4a fa01 	asr.w	sl, sl, r1
 801634e:	f1bb 0f00 	cmp.w	fp, #0
 8016352:	4640      	mov	r0, r8
 8016354:	4649      	mov	r1, r9
 8016356:	f04f 0200 	mov.w	r2, #0
 801635a:	bfb8      	it	lt
 801635c:	f1ca 0a00 	rsblt	sl, sl, #0
 8016360:	f7e9 ffaa 	bl	80002b8 <__aeabi_dsub>
 8016364:	4680      	mov	r8, r0
 8016366:	4689      	mov	r9, r1
 8016368:	4632      	mov	r2, r6
 801636a:	463b      	mov	r3, r7
 801636c:	4640      	mov	r0, r8
 801636e:	4649      	mov	r1, r9
 8016370:	f7e9 ffa4 	bl	80002bc <__adddf3>
 8016374:	2400      	movs	r4, #0
 8016376:	a36a      	add	r3, pc, #424	@ (adr r3, 8016520 <__ieee754_pow+0xa30>)
 8016378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801637c:	4620      	mov	r0, r4
 801637e:	460d      	mov	r5, r1
 8016380:	f7ea f952 	bl	8000628 <__aeabi_dmul>
 8016384:	4642      	mov	r2, r8
 8016386:	e9cd 0100 	strd	r0, r1, [sp]
 801638a:	464b      	mov	r3, r9
 801638c:	4620      	mov	r0, r4
 801638e:	4629      	mov	r1, r5
 8016390:	f7e9 ff92 	bl	80002b8 <__aeabi_dsub>
 8016394:	4602      	mov	r2, r0
 8016396:	460b      	mov	r3, r1
 8016398:	4630      	mov	r0, r6
 801639a:	4639      	mov	r1, r7
 801639c:	f7e9 ff8c 	bl	80002b8 <__aeabi_dsub>
 80163a0:	a361      	add	r3, pc, #388	@ (adr r3, 8016528 <__ieee754_pow+0xa38>)
 80163a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163a6:	f7ea f93f 	bl	8000628 <__aeabi_dmul>
 80163aa:	a361      	add	r3, pc, #388	@ (adr r3, 8016530 <__ieee754_pow+0xa40>)
 80163ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163b0:	4680      	mov	r8, r0
 80163b2:	4689      	mov	r9, r1
 80163b4:	4620      	mov	r0, r4
 80163b6:	4629      	mov	r1, r5
 80163b8:	f7ea f936 	bl	8000628 <__aeabi_dmul>
 80163bc:	4602      	mov	r2, r0
 80163be:	460b      	mov	r3, r1
 80163c0:	4640      	mov	r0, r8
 80163c2:	4649      	mov	r1, r9
 80163c4:	f7e9 ff7a 	bl	80002bc <__adddf3>
 80163c8:	4604      	mov	r4, r0
 80163ca:	460d      	mov	r5, r1
 80163cc:	4602      	mov	r2, r0
 80163ce:	460b      	mov	r3, r1
 80163d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80163d4:	f7e9 ff72 	bl	80002bc <__adddf3>
 80163d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80163dc:	4680      	mov	r8, r0
 80163de:	4689      	mov	r9, r1
 80163e0:	f7e9 ff6a 	bl	80002b8 <__aeabi_dsub>
 80163e4:	4602      	mov	r2, r0
 80163e6:	460b      	mov	r3, r1
 80163e8:	4620      	mov	r0, r4
 80163ea:	4629      	mov	r1, r5
 80163ec:	f7e9 ff64 	bl	80002b8 <__aeabi_dsub>
 80163f0:	4642      	mov	r2, r8
 80163f2:	4606      	mov	r6, r0
 80163f4:	460f      	mov	r7, r1
 80163f6:	464b      	mov	r3, r9
 80163f8:	4640      	mov	r0, r8
 80163fa:	4649      	mov	r1, r9
 80163fc:	f7ea f914 	bl	8000628 <__aeabi_dmul>
 8016400:	a34d      	add	r3, pc, #308	@ (adr r3, 8016538 <__ieee754_pow+0xa48>)
 8016402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016406:	4604      	mov	r4, r0
 8016408:	460d      	mov	r5, r1
 801640a:	f7ea f90d 	bl	8000628 <__aeabi_dmul>
 801640e:	a34c      	add	r3, pc, #304	@ (adr r3, 8016540 <__ieee754_pow+0xa50>)
 8016410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016414:	f7e9 ff50 	bl	80002b8 <__aeabi_dsub>
 8016418:	4622      	mov	r2, r4
 801641a:	462b      	mov	r3, r5
 801641c:	f7ea f904 	bl	8000628 <__aeabi_dmul>
 8016420:	a349      	add	r3, pc, #292	@ (adr r3, 8016548 <__ieee754_pow+0xa58>)
 8016422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016426:	f7e9 ff49 	bl	80002bc <__adddf3>
 801642a:	4622      	mov	r2, r4
 801642c:	462b      	mov	r3, r5
 801642e:	f7ea f8fb 	bl	8000628 <__aeabi_dmul>
 8016432:	a347      	add	r3, pc, #284	@ (adr r3, 8016550 <__ieee754_pow+0xa60>)
 8016434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016438:	f7e9 ff3e 	bl	80002b8 <__aeabi_dsub>
 801643c:	4622      	mov	r2, r4
 801643e:	462b      	mov	r3, r5
 8016440:	f7ea f8f2 	bl	8000628 <__aeabi_dmul>
 8016444:	a344      	add	r3, pc, #272	@ (adr r3, 8016558 <__ieee754_pow+0xa68>)
 8016446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801644a:	f7e9 ff37 	bl	80002bc <__adddf3>
 801644e:	4622      	mov	r2, r4
 8016450:	462b      	mov	r3, r5
 8016452:	f7ea f8e9 	bl	8000628 <__aeabi_dmul>
 8016456:	4602      	mov	r2, r0
 8016458:	460b      	mov	r3, r1
 801645a:	4640      	mov	r0, r8
 801645c:	4649      	mov	r1, r9
 801645e:	f7e9 ff2b 	bl	80002b8 <__aeabi_dsub>
 8016462:	4604      	mov	r4, r0
 8016464:	460d      	mov	r5, r1
 8016466:	4602      	mov	r2, r0
 8016468:	460b      	mov	r3, r1
 801646a:	4640      	mov	r0, r8
 801646c:	4649      	mov	r1, r9
 801646e:	f7ea f8db 	bl	8000628 <__aeabi_dmul>
 8016472:	2200      	movs	r2, #0
 8016474:	e9cd 0100 	strd	r0, r1, [sp]
 8016478:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801647c:	4620      	mov	r0, r4
 801647e:	4629      	mov	r1, r5
 8016480:	f7e9 ff1a 	bl	80002b8 <__aeabi_dsub>
 8016484:	4602      	mov	r2, r0
 8016486:	460b      	mov	r3, r1
 8016488:	e9dd 0100 	ldrd	r0, r1, [sp]
 801648c:	f7ea f9f6 	bl	800087c <__aeabi_ddiv>
 8016490:	4632      	mov	r2, r6
 8016492:	4604      	mov	r4, r0
 8016494:	460d      	mov	r5, r1
 8016496:	463b      	mov	r3, r7
 8016498:	4640      	mov	r0, r8
 801649a:	4649      	mov	r1, r9
 801649c:	f7ea f8c4 	bl	8000628 <__aeabi_dmul>
 80164a0:	4632      	mov	r2, r6
 80164a2:	463b      	mov	r3, r7
 80164a4:	f7e9 ff0a 	bl	80002bc <__adddf3>
 80164a8:	4602      	mov	r2, r0
 80164aa:	460b      	mov	r3, r1
 80164ac:	4620      	mov	r0, r4
 80164ae:	4629      	mov	r1, r5
 80164b0:	f7e9 ff02 	bl	80002b8 <__aeabi_dsub>
 80164b4:	4642      	mov	r2, r8
 80164b6:	464b      	mov	r3, r9
 80164b8:	f7e9 fefe 	bl	80002b8 <__aeabi_dsub>
 80164bc:	460b      	mov	r3, r1
 80164be:	4602      	mov	r2, r0
 80164c0:	492d      	ldr	r1, [pc, #180]	@ (8016578 <__ieee754_pow+0xa88>)
 80164c2:	2000      	movs	r0, #0
 80164c4:	f7e9 fef8 	bl	80002b8 <__aeabi_dsub>
 80164c8:	ec41 0b10 	vmov	d0, r0, r1
 80164cc:	ee10 3a90 	vmov	r3, s1
 80164d0:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80164d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80164d8:	da0b      	bge.n	80164f2 <__ieee754_pow+0xa02>
 80164da:	4650      	mov	r0, sl
 80164dc:	f000 f85c 	bl	8016598 <scalbn>
 80164e0:	ec51 0b10 	vmov	r0, r1, d0
 80164e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80164e8:	f7ff bb6d 	b.w	8015bc6 <__ieee754_pow+0xd6>
 80164ec:	f8dd a010 	ldr.w	sl, [sp, #16]
 80164f0:	e73a      	b.n	8016368 <__ieee754_pow+0x878>
 80164f2:	ec51 0b10 	vmov	r0, r1, d0
 80164f6:	4619      	mov	r1, r3
 80164f8:	e7f4      	b.n	80164e4 <__ieee754_pow+0x9f4>
 80164fa:	491f      	ldr	r1, [pc, #124]	@ (8016578 <__ieee754_pow+0xa88>)
 80164fc:	2000      	movs	r0, #0
 80164fe:	f7ff bb14 	b.w	8015b2a <__ieee754_pow+0x3a>
 8016502:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016506:	f7ff bb10 	b.w	8015b2a <__ieee754_pow+0x3a>
 801650a:	4630      	mov	r0, r6
 801650c:	4639      	mov	r1, r7
 801650e:	f7ff bb0c 	b.w	8015b2a <__ieee754_pow+0x3a>
 8016512:	460c      	mov	r4, r1
 8016514:	f7ff bb69 	b.w	8015bea <__ieee754_pow+0xfa>
 8016518:	2400      	movs	r4, #0
 801651a:	f7ff bb4b 	b.w	8015bb4 <__ieee754_pow+0xc4>
 801651e:	bf00      	nop
 8016520:	00000000 	.word	0x00000000
 8016524:	3fe62e43 	.word	0x3fe62e43
 8016528:	fefa39ef 	.word	0xfefa39ef
 801652c:	3fe62e42 	.word	0x3fe62e42
 8016530:	0ca86c39 	.word	0x0ca86c39
 8016534:	be205c61 	.word	0xbe205c61
 8016538:	72bea4d0 	.word	0x72bea4d0
 801653c:	3e663769 	.word	0x3e663769
 8016540:	c5d26bf1 	.word	0xc5d26bf1
 8016544:	3ebbbd41 	.word	0x3ebbbd41
 8016548:	af25de2c 	.word	0xaf25de2c
 801654c:	3f11566a 	.word	0x3f11566a
 8016550:	16bebd93 	.word	0x16bebd93
 8016554:	3f66c16c 	.word	0x3f66c16c
 8016558:	5555553e 	.word	0x5555553e
 801655c:	3fc55555 	.word	0x3fc55555
 8016560:	40900000 	.word	0x40900000
 8016564:	4090cbff 	.word	0x4090cbff
 8016568:	3f6f3400 	.word	0x3f6f3400
 801656c:	4090cc00 	.word	0x4090cc00
 8016570:	3fe00000 	.word	0x3fe00000
 8016574:	fff00000 	.word	0xfff00000
 8016578:	3ff00000 	.word	0x3ff00000
 801657c:	652b82fe 	.word	0x652b82fe
 8016580:	3c971547 	.word	0x3c971547

08016584 <fabs>:
 8016584:	ec51 0b10 	vmov	r0, r1, d0
 8016588:	4602      	mov	r2, r0
 801658a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801658e:	ec43 2b10 	vmov	d0, r2, r3
 8016592:	4770      	bx	lr
 8016594:	0000      	movs	r0, r0
	...

08016598 <scalbn>:
 8016598:	b570      	push	{r4, r5, r6, lr}
 801659a:	ec55 4b10 	vmov	r4, r5, d0
 801659e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80165a2:	4606      	mov	r6, r0
 80165a4:	462b      	mov	r3, r5
 80165a6:	b991      	cbnz	r1, 80165ce <scalbn+0x36>
 80165a8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80165ac:	4323      	orrs	r3, r4
 80165ae:	d03b      	beq.n	8016628 <scalbn+0x90>
 80165b0:	4b33      	ldr	r3, [pc, #204]	@ (8016680 <scalbn+0xe8>)
 80165b2:	4620      	mov	r0, r4
 80165b4:	4629      	mov	r1, r5
 80165b6:	2200      	movs	r2, #0
 80165b8:	f7ea f836 	bl	8000628 <__aeabi_dmul>
 80165bc:	4b31      	ldr	r3, [pc, #196]	@ (8016684 <scalbn+0xec>)
 80165be:	429e      	cmp	r6, r3
 80165c0:	4604      	mov	r4, r0
 80165c2:	460d      	mov	r5, r1
 80165c4:	da0f      	bge.n	80165e6 <scalbn+0x4e>
 80165c6:	a326      	add	r3, pc, #152	@ (adr r3, 8016660 <scalbn+0xc8>)
 80165c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165cc:	e01e      	b.n	801660c <scalbn+0x74>
 80165ce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80165d2:	4291      	cmp	r1, r2
 80165d4:	d10b      	bne.n	80165ee <scalbn+0x56>
 80165d6:	4622      	mov	r2, r4
 80165d8:	4620      	mov	r0, r4
 80165da:	4629      	mov	r1, r5
 80165dc:	f7e9 fe6e 	bl	80002bc <__adddf3>
 80165e0:	4604      	mov	r4, r0
 80165e2:	460d      	mov	r5, r1
 80165e4:	e020      	b.n	8016628 <scalbn+0x90>
 80165e6:	460b      	mov	r3, r1
 80165e8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80165ec:	3936      	subs	r1, #54	@ 0x36
 80165ee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80165f2:	4296      	cmp	r6, r2
 80165f4:	dd0d      	ble.n	8016612 <scalbn+0x7a>
 80165f6:	2d00      	cmp	r5, #0
 80165f8:	a11b      	add	r1, pc, #108	@ (adr r1, 8016668 <scalbn+0xd0>)
 80165fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165fe:	da02      	bge.n	8016606 <scalbn+0x6e>
 8016600:	a11b      	add	r1, pc, #108	@ (adr r1, 8016670 <scalbn+0xd8>)
 8016602:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016606:	a318      	add	r3, pc, #96	@ (adr r3, 8016668 <scalbn+0xd0>)
 8016608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801660c:	f7ea f80c 	bl	8000628 <__aeabi_dmul>
 8016610:	e7e6      	b.n	80165e0 <scalbn+0x48>
 8016612:	1872      	adds	r2, r6, r1
 8016614:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8016618:	428a      	cmp	r2, r1
 801661a:	dcec      	bgt.n	80165f6 <scalbn+0x5e>
 801661c:	2a00      	cmp	r2, #0
 801661e:	dd06      	ble.n	801662e <scalbn+0x96>
 8016620:	f36f 531e 	bfc	r3, #20, #11
 8016624:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016628:	ec45 4b10 	vmov	d0, r4, r5
 801662c:	bd70      	pop	{r4, r5, r6, pc}
 801662e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8016632:	da08      	bge.n	8016646 <scalbn+0xae>
 8016634:	2d00      	cmp	r5, #0
 8016636:	a10a      	add	r1, pc, #40	@ (adr r1, 8016660 <scalbn+0xc8>)
 8016638:	e9d1 0100 	ldrd	r0, r1, [r1]
 801663c:	dac3      	bge.n	80165c6 <scalbn+0x2e>
 801663e:	a10e      	add	r1, pc, #56	@ (adr r1, 8016678 <scalbn+0xe0>)
 8016640:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016644:	e7bf      	b.n	80165c6 <scalbn+0x2e>
 8016646:	3236      	adds	r2, #54	@ 0x36
 8016648:	f36f 531e 	bfc	r3, #20, #11
 801664c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016650:	4620      	mov	r0, r4
 8016652:	4b0d      	ldr	r3, [pc, #52]	@ (8016688 <scalbn+0xf0>)
 8016654:	4629      	mov	r1, r5
 8016656:	2200      	movs	r2, #0
 8016658:	e7d8      	b.n	801660c <scalbn+0x74>
 801665a:	bf00      	nop
 801665c:	f3af 8000 	nop.w
 8016660:	c2f8f359 	.word	0xc2f8f359
 8016664:	01a56e1f 	.word	0x01a56e1f
 8016668:	8800759c 	.word	0x8800759c
 801666c:	7e37e43c 	.word	0x7e37e43c
 8016670:	8800759c 	.word	0x8800759c
 8016674:	fe37e43c 	.word	0xfe37e43c
 8016678:	c2f8f359 	.word	0xc2f8f359
 801667c:	81a56e1f 	.word	0x81a56e1f
 8016680:	43500000 	.word	0x43500000
 8016684:	ffff3cb0 	.word	0xffff3cb0
 8016688:	3c900000 	.word	0x3c900000

0801668c <with_errno>:
 801668c:	b510      	push	{r4, lr}
 801668e:	ed2d 8b02 	vpush	{d8}
 8016692:	eeb0 8a40 	vmov.f32	s16, s0
 8016696:	eef0 8a60 	vmov.f32	s17, s1
 801669a:	4604      	mov	r4, r0
 801669c:	f7fe fb44 	bl	8014d28 <__errno>
 80166a0:	eeb0 0a48 	vmov.f32	s0, s16
 80166a4:	eef0 0a68 	vmov.f32	s1, s17
 80166a8:	ecbd 8b02 	vpop	{d8}
 80166ac:	6004      	str	r4, [r0, #0]
 80166ae:	bd10      	pop	{r4, pc}

080166b0 <xflow>:
 80166b0:	4603      	mov	r3, r0
 80166b2:	b507      	push	{r0, r1, r2, lr}
 80166b4:	ec51 0b10 	vmov	r0, r1, d0
 80166b8:	b183      	cbz	r3, 80166dc <xflow+0x2c>
 80166ba:	4602      	mov	r2, r0
 80166bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80166c0:	e9cd 2300 	strd	r2, r3, [sp]
 80166c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80166c8:	f7e9 ffae 	bl	8000628 <__aeabi_dmul>
 80166cc:	ec41 0b10 	vmov	d0, r0, r1
 80166d0:	2022      	movs	r0, #34	@ 0x22
 80166d2:	b003      	add	sp, #12
 80166d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80166d8:	f7ff bfd8 	b.w	801668c <with_errno>
 80166dc:	4602      	mov	r2, r0
 80166de:	460b      	mov	r3, r1
 80166e0:	e7ee      	b.n	80166c0 <xflow+0x10>
 80166e2:	0000      	movs	r0, r0
 80166e4:	0000      	movs	r0, r0
	...

080166e8 <__math_uflow>:
 80166e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80166f0 <__math_uflow+0x8>
 80166ec:	f7ff bfe0 	b.w	80166b0 <xflow>
 80166f0:	00000000 	.word	0x00000000
 80166f4:	10000000 	.word	0x10000000

080166f8 <__math_oflow>:
 80166f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016700 <__math_oflow+0x8>
 80166fc:	f7ff bfd8 	b.w	80166b0 <xflow>
 8016700:	00000000 	.word	0x00000000
 8016704:	70000000 	.word	0x70000000

08016708 <__ieee754_sqrt>:
 8016708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801670c:	4a66      	ldr	r2, [pc, #408]	@ (80168a8 <__ieee754_sqrt+0x1a0>)
 801670e:	ec55 4b10 	vmov	r4, r5, d0
 8016712:	43aa      	bics	r2, r5
 8016714:	462b      	mov	r3, r5
 8016716:	4621      	mov	r1, r4
 8016718:	d110      	bne.n	801673c <__ieee754_sqrt+0x34>
 801671a:	4622      	mov	r2, r4
 801671c:	4620      	mov	r0, r4
 801671e:	4629      	mov	r1, r5
 8016720:	f7e9 ff82 	bl	8000628 <__aeabi_dmul>
 8016724:	4602      	mov	r2, r0
 8016726:	460b      	mov	r3, r1
 8016728:	4620      	mov	r0, r4
 801672a:	4629      	mov	r1, r5
 801672c:	f7e9 fdc6 	bl	80002bc <__adddf3>
 8016730:	4604      	mov	r4, r0
 8016732:	460d      	mov	r5, r1
 8016734:	ec45 4b10 	vmov	d0, r4, r5
 8016738:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801673c:	2d00      	cmp	r5, #0
 801673e:	dc0e      	bgt.n	801675e <__ieee754_sqrt+0x56>
 8016740:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8016744:	4322      	orrs	r2, r4
 8016746:	d0f5      	beq.n	8016734 <__ieee754_sqrt+0x2c>
 8016748:	b19d      	cbz	r5, 8016772 <__ieee754_sqrt+0x6a>
 801674a:	4622      	mov	r2, r4
 801674c:	4620      	mov	r0, r4
 801674e:	4629      	mov	r1, r5
 8016750:	f7e9 fdb2 	bl	80002b8 <__aeabi_dsub>
 8016754:	4602      	mov	r2, r0
 8016756:	460b      	mov	r3, r1
 8016758:	f7ea f890 	bl	800087c <__aeabi_ddiv>
 801675c:	e7e8      	b.n	8016730 <__ieee754_sqrt+0x28>
 801675e:	152a      	asrs	r2, r5, #20
 8016760:	d115      	bne.n	801678e <__ieee754_sqrt+0x86>
 8016762:	2000      	movs	r0, #0
 8016764:	e009      	b.n	801677a <__ieee754_sqrt+0x72>
 8016766:	0acb      	lsrs	r3, r1, #11
 8016768:	3a15      	subs	r2, #21
 801676a:	0549      	lsls	r1, r1, #21
 801676c:	2b00      	cmp	r3, #0
 801676e:	d0fa      	beq.n	8016766 <__ieee754_sqrt+0x5e>
 8016770:	e7f7      	b.n	8016762 <__ieee754_sqrt+0x5a>
 8016772:	462a      	mov	r2, r5
 8016774:	e7fa      	b.n	801676c <__ieee754_sqrt+0x64>
 8016776:	005b      	lsls	r3, r3, #1
 8016778:	3001      	adds	r0, #1
 801677a:	02dc      	lsls	r4, r3, #11
 801677c:	d5fb      	bpl.n	8016776 <__ieee754_sqrt+0x6e>
 801677e:	1e44      	subs	r4, r0, #1
 8016780:	1b12      	subs	r2, r2, r4
 8016782:	f1c0 0420 	rsb	r4, r0, #32
 8016786:	fa21 f404 	lsr.w	r4, r1, r4
 801678a:	4323      	orrs	r3, r4
 801678c:	4081      	lsls	r1, r0
 801678e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016792:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8016796:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801679a:	07d2      	lsls	r2, r2, #31
 801679c:	bf5c      	itt	pl
 801679e:	005b      	lslpl	r3, r3, #1
 80167a0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80167a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80167a8:	bf58      	it	pl
 80167aa:	0049      	lslpl	r1, r1, #1
 80167ac:	2600      	movs	r6, #0
 80167ae:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80167b2:	107f      	asrs	r7, r7, #1
 80167b4:	0049      	lsls	r1, r1, #1
 80167b6:	2016      	movs	r0, #22
 80167b8:	4632      	mov	r2, r6
 80167ba:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80167be:	1915      	adds	r5, r2, r4
 80167c0:	429d      	cmp	r5, r3
 80167c2:	bfde      	ittt	le
 80167c4:	192a      	addle	r2, r5, r4
 80167c6:	1b5b      	suble	r3, r3, r5
 80167c8:	1936      	addle	r6, r6, r4
 80167ca:	0fcd      	lsrs	r5, r1, #31
 80167cc:	3801      	subs	r0, #1
 80167ce:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80167d2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80167d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80167da:	d1f0      	bne.n	80167be <__ieee754_sqrt+0xb6>
 80167dc:	4605      	mov	r5, r0
 80167de:	2420      	movs	r4, #32
 80167e0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80167e4:	4293      	cmp	r3, r2
 80167e6:	eb0c 0e00 	add.w	lr, ip, r0
 80167ea:	dc02      	bgt.n	80167f2 <__ieee754_sqrt+0xea>
 80167ec:	d113      	bne.n	8016816 <__ieee754_sqrt+0x10e>
 80167ee:	458e      	cmp	lr, r1
 80167f0:	d811      	bhi.n	8016816 <__ieee754_sqrt+0x10e>
 80167f2:	f1be 0f00 	cmp.w	lr, #0
 80167f6:	eb0e 000c 	add.w	r0, lr, ip
 80167fa:	da3f      	bge.n	801687c <__ieee754_sqrt+0x174>
 80167fc:	2800      	cmp	r0, #0
 80167fe:	db3d      	blt.n	801687c <__ieee754_sqrt+0x174>
 8016800:	f102 0801 	add.w	r8, r2, #1
 8016804:	1a9b      	subs	r3, r3, r2
 8016806:	458e      	cmp	lr, r1
 8016808:	bf88      	it	hi
 801680a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801680e:	eba1 010e 	sub.w	r1, r1, lr
 8016812:	4465      	add	r5, ip
 8016814:	4642      	mov	r2, r8
 8016816:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801681a:	3c01      	subs	r4, #1
 801681c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8016820:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016824:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8016828:	d1dc      	bne.n	80167e4 <__ieee754_sqrt+0xdc>
 801682a:	4319      	orrs	r1, r3
 801682c:	d01b      	beq.n	8016866 <__ieee754_sqrt+0x15e>
 801682e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80168ac <__ieee754_sqrt+0x1a4>
 8016832:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80168b0 <__ieee754_sqrt+0x1a8>
 8016836:	e9da 0100 	ldrd	r0, r1, [sl]
 801683a:	e9db 2300 	ldrd	r2, r3, [fp]
 801683e:	f7e9 fd3b 	bl	80002b8 <__aeabi_dsub>
 8016842:	e9da 8900 	ldrd	r8, r9, [sl]
 8016846:	4602      	mov	r2, r0
 8016848:	460b      	mov	r3, r1
 801684a:	4640      	mov	r0, r8
 801684c:	4649      	mov	r1, r9
 801684e:	f7ea f967 	bl	8000b20 <__aeabi_dcmple>
 8016852:	b140      	cbz	r0, 8016866 <__ieee754_sqrt+0x15e>
 8016854:	f1b5 3fff 	cmp.w	r5, #4294967295
 8016858:	e9da 0100 	ldrd	r0, r1, [sl]
 801685c:	e9db 2300 	ldrd	r2, r3, [fp]
 8016860:	d10e      	bne.n	8016880 <__ieee754_sqrt+0x178>
 8016862:	3601      	adds	r6, #1
 8016864:	4625      	mov	r5, r4
 8016866:	1073      	asrs	r3, r6, #1
 8016868:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 801686c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8016870:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8016874:	086b      	lsrs	r3, r5, #1
 8016876:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801687a:	e759      	b.n	8016730 <__ieee754_sqrt+0x28>
 801687c:	4690      	mov	r8, r2
 801687e:	e7c1      	b.n	8016804 <__ieee754_sqrt+0xfc>
 8016880:	f7e9 fd1c 	bl	80002bc <__adddf3>
 8016884:	e9da 8900 	ldrd	r8, r9, [sl]
 8016888:	4602      	mov	r2, r0
 801688a:	460b      	mov	r3, r1
 801688c:	4640      	mov	r0, r8
 801688e:	4649      	mov	r1, r9
 8016890:	f7ea f93c 	bl	8000b0c <__aeabi_dcmplt>
 8016894:	b120      	cbz	r0, 80168a0 <__ieee754_sqrt+0x198>
 8016896:	1cab      	adds	r3, r5, #2
 8016898:	bf08      	it	eq
 801689a:	3601      	addeq	r6, #1
 801689c:	3502      	adds	r5, #2
 801689e:	e7e2      	b.n	8016866 <__ieee754_sqrt+0x15e>
 80168a0:	1c6b      	adds	r3, r5, #1
 80168a2:	f023 0501 	bic.w	r5, r3, #1
 80168a6:	e7de      	b.n	8016866 <__ieee754_sqrt+0x15e>
 80168a8:	7ff00000 	.word	0x7ff00000
 80168ac:	080176e8 	.word	0x080176e8
 80168b0:	080176e0 	.word	0x080176e0

080168b4 <_init>:
 80168b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168b6:	bf00      	nop
 80168b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168ba:	bc08      	pop	{r3}
 80168bc:	469e      	mov	lr, r3
 80168be:	4770      	bx	lr

080168c0 <_fini>:
 80168c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168c2:	bf00      	nop
 80168c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80168c6:	bc08      	pop	{r3}
 80168c8:	469e      	mov	lr, r3
 80168ca:	4770      	bx	lr
