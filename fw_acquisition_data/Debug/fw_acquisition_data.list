
fw_acquisition_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011cbc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  08011e60  08011e60  00012e60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012378  08012378  00014284  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012378  08012378  00013378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012380  08012380  00014284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012380  08012380  00013380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012384  08012384  00013384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  20000000  08012388  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  20000284  0801260c  00014284  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009b8  0801260c  000149b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014284  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033ade  00000000  00000000  000142b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f63  00000000  00000000  00047d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d90  00000000  00000000  0004ccf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002349  00000000  00000000  0004fa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c0bd  00000000  00000000  00051dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000292e9  00000000  00000000  0006de8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a53e2  00000000  00000000  00097177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c559  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d294  00000000  00000000  0013c59c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00149830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000284 	.word	0x20000284
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011e44 	.word	0x08011e44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000288 	.word	0x20000288
 80001dc:	08011e44 	.word	0x08011e44

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f78:	f00a f9be 	bl	800b2f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7c:	f000 f80c 	bl	8000f98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f80:	f000 f8d4 	bl	800112c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f84:	f000 f8aa 	bl	80010dc <MX_DMA_Init>
  MX_SPI2_Init();
 8000f88:	f000 f872 	bl	8001070 <MX_SPI2_Init>
  MX_MEMS_Init();
 8000f8c:	f00d ff46 	bl	800ee1c <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8000f90:	f00d ff4a 	bl	800ee28 <MX_MEMS_Process>
 8000f94:	e7fc      	b.n	8000f90 <main+0x1c>
	...

08000f98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b094      	sub	sp, #80	@ 0x50
 8000f9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9e:	f107 0320 	add.w	r3, r7, #32
 8000fa2:	2230      	movs	r2, #48	@ 0x30
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f00f f895 	bl	80100d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fac:	f107 030c 	add.w	r3, r7, #12
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	4b29      	ldr	r3, [pc, #164]	@ (8001068 <SystemClock_Config+0xd0>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc4:	4a28      	ldr	r2, [pc, #160]	@ (8001068 <SystemClock_Config+0xd0>)
 8000fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fcc:	4b26      	ldr	r3, [pc, #152]	@ (8001068 <SystemClock_Config+0xd0>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	4b23      	ldr	r3, [pc, #140]	@ (800106c <SystemClock_Config+0xd4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fe4:	4a21      	ldr	r2, [pc, #132]	@ (800106c <SystemClock_Config+0xd4>)
 8000fe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b1f      	ldr	r3, [pc, #124]	@ (800106c <SystemClock_Config+0xd4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001000:	2310      	movs	r3, #16
 8001002:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001004:	2302      	movs	r3, #2
 8001006:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001008:	2300      	movs	r3, #0
 800100a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800100c:	2310      	movs	r3, #16
 800100e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001010:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001014:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001016:	2304      	movs	r3, #4
 8001018:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800101a:	2307      	movs	r3, #7
 800101c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101e:	f107 0320 	add.w	r3, r7, #32
 8001022:	4618      	mov	r0, r3
 8001024:	f00c fdc4 	bl	800dbb0 <HAL_RCC_OscConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800102e:	f000 f8db 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001032:	230f      	movs	r3, #15
 8001034:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001036:	2302      	movs	r3, #2
 8001038:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001042:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2102      	movs	r1, #2
 800104e:	4618      	mov	r0, r3
 8001050:	f00d f826 	bl	800e0a0 <HAL_RCC_ClockConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800105a:	f000 f8c5 	bl	80011e8 <Error_Handler>
  }
}
 800105e:	bf00      	nop
 8001060:	3750      	adds	r7, #80	@ 0x50
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001074:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <MX_SPI2_Init+0x64>)
 8001076:	4a18      	ldr	r2, [pc, #96]	@ (80010d8 <MX_SPI2_Init+0x68>)
 8001078:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800107a:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <MX_SPI2_Init+0x64>)
 800107c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001080:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001082:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <MX_SPI2_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001088:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <MX_SPI2_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <MX_SPI2_Init+0x64>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001094:	4b0f      	ldr	r3, [pc, #60]	@ (80010d4 <MX_SPI2_Init+0x64>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800109a:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <MX_SPI2_Init+0x64>)
 800109c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010a0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	@ (80010d4 <MX_SPI2_Init+0x64>)
 80010a4:	2220      	movs	r2, #32
 80010a6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <MX_SPI2_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ae:	4b09      	ldr	r3, [pc, #36]	@ (80010d4 <MX_SPI2_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b4:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <MX_SPI2_Init+0x64>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80010ba:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <MX_SPI2_Init+0x64>)
 80010bc:	220a      	movs	r2, #10
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	@ (80010d4 <MX_SPI2_Init+0x64>)
 80010c2:	f00d fa0d 	bl	800e4e0 <HAL_SPI_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80010cc:	f000 f88c 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200002a0 	.word	0x200002a0
 80010d8:	40003800 	.word	0x40003800

080010dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	4b10      	ldr	r3, [pc, #64]	@ (8001128 <MX_DMA_Init+0x4c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001128 <MX_DMA_Init+0x4c>)
 80010ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <MX_DMA_Init+0x4c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2100      	movs	r1, #0
 8001102:	200e      	movs	r0, #14
 8001104:	f00a fa69 	bl	800b5da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001108:	200e      	movs	r0, #14
 800110a:	f00a fa82 	bl	800b612 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	200f      	movs	r0, #15
 8001114:	f00a fa61 	bl	800b5da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001118:	200f      	movs	r0, #15
 800111a:	f00a fa7a 	bl	800b612 <HAL_NVIC_EnableIRQ>

}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800

0800112c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08a      	sub	sp, #40	@ 0x28
 8001130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b26      	ldr	r3, [pc, #152]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	4a25      	ldr	r2, [pc, #148]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	6313      	str	r3, [r2, #48]	@ 0x30
 8001152:	4b23      	ldr	r3, [pc, #140]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	4a1e      	ldr	r2, [pc, #120]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 8001168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800116c:	6313      	str	r3, [r2, #48]	@ 0x30
 800116e:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	4a17      	ldr	r2, [pc, #92]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	@ 0x30
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a10      	ldr	r2, [pc, #64]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 80011a0:	f043 0302 	orr.w	r3, r3, #2
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b0e      	ldr	r3, [pc, #56]	@ (80011e0 <MX_GPIO_Init+0xb4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80011b2:	2201      	movs	r2, #1
 80011b4:	2180      	movs	r1, #128	@ 0x80
 80011b6:	480b      	ldr	r0, [pc, #44]	@ (80011e4 <MX_GPIO_Init+0xb8>)
 80011b8:	f00a ffde 	bl	800c178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80011bc:	2380      	movs	r3, #128	@ 0x80
 80011be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c8:	2302      	movs	r3, #2
 80011ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	4804      	ldr	r0, [pc, #16]	@ (80011e4 <MX_GPIO_Init+0xb8>)
 80011d4:	f00a fd50 	bl	800bc78 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011d8:	bf00      	nop
 80011da:	3728      	adds	r7, #40	@ 0x28
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020800 	.word	0x40020800

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <Error_Handler+0x8>

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <HAL_MspInit+0x4c>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	4a0f      	ldr	r2, [pc, #60]	@ (8001240 <HAL_MspInit+0x4c>)
 8001204:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001208:	6453      	str	r3, [r2, #68]	@ 0x44
 800120a:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <HAL_MspInit+0x4c>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	4b09      	ldr	r3, [pc, #36]	@ (8001240 <HAL_MspInit+0x4c>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121e:	4a08      	ldr	r2, [pc, #32]	@ (8001240 <HAL_MspInit+0x4c>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001224:	6413      	str	r3, [r2, #64]	@ 0x40
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <HAL_MspInit+0x4c>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	@ 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a47      	ldr	r2, [pc, #284]	@ (8001380 <HAL_SPI_MspInit+0x13c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	f040 8087 	bne.w	8001376 <HAL_SPI_MspInit+0x132>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	4b45      	ldr	r3, [pc, #276]	@ (8001384 <HAL_SPI_MspInit+0x140>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	4a44      	ldr	r2, [pc, #272]	@ (8001384 <HAL_SPI_MspInit+0x140>)
 8001272:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001276:	6413      	str	r3, [r2, #64]	@ 0x40
 8001278:	4b42      	ldr	r3, [pc, #264]	@ (8001384 <HAL_SPI_MspInit+0x140>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	4b3e      	ldr	r3, [pc, #248]	@ (8001384 <HAL_SPI_MspInit+0x140>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128c:	4a3d      	ldr	r2, [pc, #244]	@ (8001384 <HAL_SPI_MspInit+0x140>)
 800128e:	f043 0302 	orr.w	r3, r3, #2
 8001292:	6313      	str	r3, [r2, #48]	@ 0x30
 8001294:	4b3b      	ldr	r3, [pc, #236]	@ (8001384 <HAL_SPI_MspInit+0x140>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80012a0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80012a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012b2:	2305      	movs	r3, #5
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	4832      	ldr	r0, [pc, #200]	@ (8001388 <HAL_SPI_MspInit+0x144>)
 80012be:	f00a fcdb 	bl	800bc78 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80012c2:	4b32      	ldr	r3, [pc, #200]	@ (800138c <HAL_SPI_MspInit+0x148>)
 80012c4:	4a32      	ldr	r2, [pc, #200]	@ (8001390 <HAL_SPI_MspInit+0x14c>)
 80012c6:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80012c8:	4b30      	ldr	r3, [pc, #192]	@ (800138c <HAL_SPI_MspInit+0x148>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ce:	4b2f      	ldr	r3, [pc, #188]	@ (800138c <HAL_SPI_MspInit+0x148>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d4:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <HAL_SPI_MspInit+0x148>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012da:	4b2c      	ldr	r3, [pc, #176]	@ (800138c <HAL_SPI_MspInit+0x148>)
 80012dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012e0:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012e2:	4b2a      	ldr	r3, [pc, #168]	@ (800138c <HAL_SPI_MspInit+0x148>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012e8:	4b28      	ldr	r3, [pc, #160]	@ (800138c <HAL_SPI_MspInit+0x148>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80012ee:	4b27      	ldr	r3, [pc, #156]	@ (800138c <HAL_SPI_MspInit+0x148>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012f4:	4b25      	ldr	r3, [pc, #148]	@ (800138c <HAL_SPI_MspInit+0x148>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012fa:	4b24      	ldr	r3, [pc, #144]	@ (800138c <HAL_SPI_MspInit+0x148>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001300:	4822      	ldr	r0, [pc, #136]	@ (800138c <HAL_SPI_MspInit+0x148>)
 8001302:	f00a f9a1 	bl	800b648 <HAL_DMA_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 800130c:	f7ff ff6c 	bl	80011e8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a1e      	ldr	r2, [pc, #120]	@ (800138c <HAL_SPI_MspInit+0x148>)
 8001314:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001316:	4a1d      	ldr	r2, [pc, #116]	@ (800138c <HAL_SPI_MspInit+0x148>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800131c:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <HAL_SPI_MspInit+0x150>)
 800131e:	4a1e      	ldr	r2, [pc, #120]	@ (8001398 <HAL_SPI_MspInit+0x154>)
 8001320:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <HAL_SPI_MspInit+0x150>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001328:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <HAL_SPI_MspInit+0x150>)
 800132a:	2240      	movs	r2, #64	@ 0x40
 800132c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800132e:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <HAL_SPI_MspInit+0x150>)
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001334:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <HAL_SPI_MspInit+0x150>)
 8001336:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800133a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800133c:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <HAL_SPI_MspInit+0x150>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001342:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <HAL_SPI_MspInit+0x150>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001348:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <HAL_SPI_MspInit+0x150>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800134e:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <HAL_SPI_MspInit+0x150>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001354:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <HAL_SPI_MspInit+0x150>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800135a:	480e      	ldr	r0, [pc, #56]	@ (8001394 <HAL_SPI_MspInit+0x150>)
 800135c:	f00a f974 	bl	800b648 <HAL_DMA_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8001366:	f7ff ff3f 	bl	80011e8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a09      	ldr	r2, [pc, #36]	@ (8001394 <HAL_SPI_MspInit+0x150>)
 800136e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001370:	4a08      	ldr	r2, [pc, #32]	@ (8001394 <HAL_SPI_MspInit+0x150>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	@ 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40003800 	.word	0x40003800
 8001384:	40023800 	.word	0x40023800
 8001388:	40020400 	.word	0x40020400
 800138c:	200002f8 	.word	0x200002f8
 8001390:	40026058 	.word	0x40026058
 8001394:	20000358 	.word	0x20000358
 8001398:	40026070 	.word	0x40026070

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <NMI_Handler+0x4>

080013a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <MemManage_Handler+0x4>

080013b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f2:	f009 ffd3 	bl	800b39c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001400:	4802      	ldr	r0, [pc, #8]	@ (800140c <DMA1_Stream3_IRQHandler+0x10>)
 8001402:	f00a f9cf 	bl	800b7a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200002f8 	.word	0x200002f8

08001410 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <DMA1_Stream4_IRQHandler+0x10>)
 8001416:	f00a f9c5 	bl	800b7a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000358 	.word	0x20000358

08001424 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800142e:	4b13      	ldr	r3, [pc, #76]	@ (800147c <BSP_I2C1_Init+0x58>)
 8001430:	4a13      	ldr	r2, [pc, #76]	@ (8001480 <BSP_I2C1_Init+0x5c>)
 8001432:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001434:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <BSP_I2C1_Init+0x60>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	1c5a      	adds	r2, r3, #1
 800143a:	4912      	ldr	r1, [pc, #72]	@ (8001484 <BSP_I2C1_Init+0x60>)
 800143c:	600a      	str	r2, [r1, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d117      	bne.n	8001472 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001442:	480e      	ldr	r0, [pc, #56]	@ (800147c <BSP_I2C1_Init+0x58>)
 8001444:	f00b fe96 	bl	800d174 <HAL_I2C_GetState>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d111      	bne.n	8001472 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800144e:	480b      	ldr	r0, [pc, #44]	@ (800147c <BSP_I2C1_Init+0x58>)
 8001450:	f000 f936 	bl	80016c0 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10b      	bne.n	8001472 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800145a:	4808      	ldr	r0, [pc, #32]	@ (800147c <BSP_I2C1_Init+0x58>)
 800145c:	f000 f8fc 	bl	8001658 <MX_I2C1_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001466:	f06f 0307 	mvn.w	r3, #7
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	e001      	b.n	8001472 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001472:	687b      	ldr	r3, [r7, #4]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200003b8 	.word	0x200003b8
 8001480:	40005400 	.word	0x40005400
 8001484:	2000040c 	.word	0x2000040c

08001488 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001492:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <BSP_I2C1_DeInit+0x48>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d014      	beq.n	80014c4 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <BSP_I2C1_DeInit+0x48>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	3b01      	subs	r3, #1
 80014a0:	4a0b      	ldr	r2, [pc, #44]	@ (80014d0 <BSP_I2C1_DeInit+0x48>)
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <BSP_I2C1_DeInit+0x48>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d10b      	bne.n	80014c4 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80014ac:	4809      	ldr	r0, [pc, #36]	@ (80014d4 <BSP_I2C1_DeInit+0x4c>)
 80014ae:	f000 f94f 	bl	8001750 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80014b2:	4808      	ldr	r0, [pc, #32]	@ (80014d4 <BSP_I2C1_DeInit+0x4c>)
 80014b4:	f00a ffbe 	bl	800c434 <HAL_I2C_DeInit>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80014be:	f06f 0307 	mvn.w	r3, #7
 80014c2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80014c4:	687b      	ldr	r3, [r7, #4]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000040c 	.word	0x2000040c
 80014d4:	200003b8 	.word	0x200003b8

080014d8 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	@ 0x28
 80014dc:	af04      	add	r7, sp, #16
 80014de:	60ba      	str	r2, [r7, #8]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4603      	mov	r3, r0
 80014e4:	81fb      	strh	r3, [r7, #14]
 80014e6:	460b      	mov	r3, r1
 80014e8:	81bb      	strh	r3, [r7, #12]
 80014ea:	4613      	mov	r3, r2
 80014ec:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80014f2:	89ba      	ldrh	r2, [r7, #12]
 80014f4:	89f9      	ldrh	r1, [r7, #14]
 80014f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014fa:	9302      	str	r3, [sp, #8]
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2301      	movs	r3, #1
 8001506:	480c      	ldr	r0, [pc, #48]	@ (8001538 <BSP_I2C1_WriteReg+0x60>)
 8001508:	f00b fb08 	bl	800cb1c <HAL_I2C_Mem_Write>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00c      	beq.n	800152c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001512:	4809      	ldr	r0, [pc, #36]	@ (8001538 <BSP_I2C1_WriteReg+0x60>)
 8001514:	f00b fe3c 	bl	800d190 <HAL_I2C_GetError>
 8001518:	4603      	mov	r3, r0
 800151a:	2b04      	cmp	r3, #4
 800151c:	d103      	bne.n	8001526 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800151e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e002      	b.n	800152c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001526:	f06f 0303 	mvn.w	r3, #3
 800152a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800152c:	697b      	ldr	r3, [r7, #20]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200003b8 	.word	0x200003b8

0800153c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	@ 0x28
 8001540:	af04      	add	r7, sp, #16
 8001542:	60ba      	str	r2, [r7, #8]
 8001544:	461a      	mov	r2, r3
 8001546:	4603      	mov	r3, r0
 8001548:	81fb      	strh	r3, [r7, #14]
 800154a:	460b      	mov	r3, r1
 800154c:	81bb      	strh	r3, [r7, #12]
 800154e:	4613      	mov	r3, r2
 8001550:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001556:	89ba      	ldrh	r2, [r7, #12]
 8001558:	89f9      	ldrh	r1, [r7, #14]
 800155a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800155e:	9302      	str	r3, [sp, #8]
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2301      	movs	r3, #1
 800156a:	480c      	ldr	r0, [pc, #48]	@ (800159c <BSP_I2C1_ReadReg+0x60>)
 800156c:	f00b fbd0 	bl	800cd10 <HAL_I2C_Mem_Read>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00c      	beq.n	8001590 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001576:	4809      	ldr	r0, [pc, #36]	@ (800159c <BSP_I2C1_ReadReg+0x60>)
 8001578:	f00b fe0a 	bl	800d190 <HAL_I2C_GetError>
 800157c:	4603      	mov	r3, r0
 800157e:	2b04      	cmp	r3, #4
 8001580:	d103      	bne.n	800158a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001582:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e002      	b.n	8001590 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800158a:	f06f 0303 	mvn.w	r3, #3
 800158e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001590:	697b      	ldr	r3, [r7, #20]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200003b8 	.word	0x200003b8

080015a0 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af02      	add	r7, sp, #8
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	80fb      	strh	r3, [r7, #6]
 80015ac:	4613      	mov	r3, r2
 80015ae:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80015b4:	88bb      	ldrh	r3, [r7, #4]
 80015b6:	88f9      	ldrh	r1, [r7, #6]
 80015b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015bc:	9200      	str	r2, [sp, #0]
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	480b      	ldr	r0, [pc, #44]	@ (80015f0 <BSP_I2C1_Send+0x50>)
 80015c2:	f00a ff7b 	bl	800c4bc <HAL_I2C_Master_Transmit>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00c      	beq.n	80015e6 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80015cc:	4808      	ldr	r0, [pc, #32]	@ (80015f0 <BSP_I2C1_Send+0x50>)
 80015ce:	f00b fddf 	bl	800d190 <HAL_I2C_GetError>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d003      	beq.n	80015e0 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80015d8:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	e002      	b.n	80015e6 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80015e0:	f06f 0303 	mvn.w	r3, #3
 80015e4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80015e6:	68fb      	ldr	r3, [r7, #12]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200003b8 	.word	0x200003b8

080015f4 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	80fb      	strh	r3, [r7, #6]
 8001600:	4613      	mov	r3, r2
 8001602:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001608:	88bb      	ldrh	r3, [r7, #4]
 800160a:	88f9      	ldrh	r1, [r7, #6]
 800160c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001610:	9200      	str	r2, [sp, #0]
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	480b      	ldr	r0, [pc, #44]	@ (8001644 <BSP_I2C1_Recv+0x50>)
 8001616:	f00b f84f 	bl	800c6b8 <HAL_I2C_Master_Receive>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00c      	beq.n	800163a <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8001620:	4808      	ldr	r0, [pc, #32]	@ (8001644 <BSP_I2C1_Recv+0x50>)
 8001622:	f00b fdb5 	bl	800d190 <HAL_I2C_GetError>
 8001626:	4603      	mov	r3, r0
 8001628:	2b04      	cmp	r3, #4
 800162a:	d003      	beq.n	8001634 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800162c:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	e002      	b.n	800163a <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001634:	f06f 0303 	mvn.w	r3, #3
 8001638:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200003b8 	.word	0x200003b8

08001648 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800164c:	f009 feba 	bl	800b3c4 <HAL_GetTick>
 8001650:	4603      	mov	r3, r0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a14      	ldr	r2, [pc, #80]	@ (80016b8 <MX_I2C1_Init+0x60>)
 8001668:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a13      	ldr	r2, [pc, #76]	@ (80016bc <MX_I2C1_Init+0x64>)
 800166e:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001682:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f00a fd85 	bl	800c1ac <HAL_I2C_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40005400 	.word	0x40005400
 80016bc:	000186a0 	.word	0x000186a0

080016c0 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	@ 0x28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001748 <I2C1_MspInit+0x88>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001748 <I2C1_MspInit+0x88>)
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001748 <I2C1_MspInit+0x88>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80016e4:	2340      	movs	r3, #64	@ 0x40
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e8:	2312      	movs	r3, #18
 80016ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80016f4:	2304      	movs	r3, #4
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	4813      	ldr	r0, [pc, #76]	@ (800174c <I2C1_MspInit+0x8c>)
 8001700:	f00a faba 	bl	800bc78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001704:	2380      	movs	r3, #128	@ 0x80
 8001706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001708:	2312      	movs	r3, #18
 800170a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001714:	2304      	movs	r3, #4
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	480b      	ldr	r0, [pc, #44]	@ (800174c <I2C1_MspInit+0x8c>)
 8001720:	f00a faaa 	bl	800bc78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <I2C1_MspInit+0x88>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172c:	4a06      	ldr	r2, [pc, #24]	@ (8001748 <I2C1_MspInit+0x88>)
 800172e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001732:	6413      	str	r3, [r2, #64]	@ 0x40
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <I2C1_MspInit+0x88>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001738:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001740:	bf00      	nop
 8001742:	3728      	adds	r7, #40	@ 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40023800 	.word	0x40023800
 800174c:	40020400 	.word	0x40020400

08001750 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <I2C1_MspDeInit+0x2c>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175c:	4a07      	ldr	r2, [pc, #28]	@ (800177c <I2C1_MspDeInit+0x2c>)
 800175e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001762:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001764:	2140      	movs	r1, #64	@ 0x40
 8001766:	4806      	ldr	r0, [pc, #24]	@ (8001780 <I2C1_MspDeInit+0x30>)
 8001768:	f00a fc0a 	bl	800bf80 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800176c:	2180      	movs	r1, #128	@ 0x80
 800176e:	4804      	ldr	r0, [pc, #16]	@ (8001780 <I2C1_MspDeInit+0x30>)
 8001770:	f00a fc06 	bl	800bf80 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40023800 	.word	0x40023800
 8001780:	40020400 	.word	0x40020400

08001784 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e00a      	b.n	80017ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001796:	f3af 8000 	nop.w
 800179a:	4601      	mov	r1, r0
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60ba      	str	r2, [r7, #8]
 80017a2:	b2ca      	uxtb	r2, r1
 80017a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbf0      	blt.n	8001796 <_read+0x12>
  }

  return len;
 80017b4:	687b      	ldr	r3, [r7, #4]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e009      	b.n	80017e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	60ba      	str	r2, [r7, #8]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f009 fd29 	bl	800b230 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dbf1      	blt.n	80017d0 <_write+0x12>
  }
  return len;
 80017ec:	687b      	ldr	r3, [r7, #4]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_close>:

int _close(int file)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800181e:	605a      	str	r2, [r3, #4]
  return 0;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <_isatty>:

int _isatty(int file)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001868:	4a14      	ldr	r2, [pc, #80]	@ (80018bc <_sbrk+0x5c>)
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <_sbrk+0x60>)
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001874:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800187c:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <_sbrk+0x64>)
 800187e:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <_sbrk+0x68>)
 8001880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001882:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	429a      	cmp	r2, r3
 800188e:	d207      	bcs.n	80018a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001890:	f00e fc80 	bl	8010194 <__errno>
 8001894:	4603      	mov	r3, r0
 8001896:	220c      	movs	r2, #12
 8001898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	e009      	b.n	80018b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a0:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a6:	4b07      	ldr	r3, [pc, #28]	@ (80018c4 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	4a05      	ldr	r2, [pc, #20]	@ (80018c4 <_sbrk+0x64>)
 80018b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20018000 	.word	0x20018000
 80018c0:	00000400 	.word	0x00000400
 80018c4:	20000410 	.word	0x20000410
 80018c8:	200009b8 	.word	0x200009b8

080018cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d0:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <SystemInit+0x20>)
 80018d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018d6:	4a05      	ldr	r2, [pc, #20]	@ (80018ec <SystemInit+0x20>)
 80018d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001928 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018f4:	f7ff ffea 	bl	80018cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f8:	480c      	ldr	r0, [pc, #48]	@ (800192c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018fa:	490d      	ldr	r1, [pc, #52]	@ (8001930 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001934 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001900:	e002      	b.n	8001908 <LoopCopyDataInit>

08001902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001906:	3304      	adds	r3, #4

08001908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800190c:	d3f9      	bcc.n	8001902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800190e:	4a0a      	ldr	r2, [pc, #40]	@ (8001938 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001910:	4c0a      	ldr	r4, [pc, #40]	@ (800193c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001914:	e001      	b.n	800191a <LoopFillZerobss>

08001916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001918:	3204      	adds	r2, #4

0800191a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800191c:	d3fb      	bcc.n	8001916 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800191e:	f00e fc3f 	bl	80101a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001922:	f7ff fb27 	bl	8000f74 <main>
  bx  lr    
 8001926:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001928:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800192c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001930:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 8001934:	08012388 	.word	0x08012388
  ldr r2, =_sbss
 8001938:	20000284 	.word	0x20000284
  ldr r4, =_ebss
 800193c:	200009b8 	.word	0x200009b8

08001940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001940:	e7fe      	b.n	8001940 <ADC_IRQHandler>
	...

08001944 <LIS2DUXS12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_RegisterBusIO(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_IO_t *pIO)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d103      	bne.n	8001960 <LIS2DUXS12_RegisterBusIO+0x1c>
  {
    ret = LIS2DUXS12_ERROR;
 8001958:	f04f 33ff 	mov.w	r3, #4294967295
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	e088      	b.n	8001a72 <LIS2DUXS12_RegisterBusIO+0x12e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	7b1a      	ldrb	r2, [r3, #12]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	695a      	ldr	r2, [r3, #20]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	699a      	ldr	r2, [r3, #24]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	619a      	str	r2, [r3, #24]
    pObj->IO.Delay     = pIO->Delay;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	69da      	ldr	r2, [r3, #28]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	61da      	str	r2, [r3, #28]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a36      	ldr	r2, [pc, #216]	@ (8001a7c <LIS2DUXS12_RegisterBusIO+0x138>)
 80019a4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a35      	ldr	r2, [pc, #212]	@ (8001a80 <LIS2DUXS12_RegisterBusIO+0x13c>)
 80019aa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	69da      	ldr	r2, [r3, #28]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d103      	bne.n	80019ca <LIS2DUXS12_RegisterBusIO+0x86>
    {
      ret = LIS2DUXS12_ERROR;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	e053      	b.n	8001a72 <LIS2DUXS12_RegisterBusIO+0x12e>
    }
    else if (pObj->IO.Init() != LIS2DUXS12_OK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4798      	blx	r3
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <LIS2DUXS12_RegisterBusIO+0x9a>
    {
      ret = LIS2DUXS12_ERROR;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	e049      	b.n	8001a72 <LIS2DUXS12_RegisterBusIO+0x12e>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DUXS12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d11c      	bne.n	8001a20 <LIS2DUXS12_RegisterBusIO+0xdc>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d140      	bne.n	8001a72 <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          /* Exit from deep power down only the first time in SPI mode */
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f8f4 	bl	8001bde <LIS2DUXS12_ExitDeepPowerDownSPI>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d002      	beq.n	8001a02 <LIS2DUXS12_RegisterBusIO+0xbe>
          {
            ret = LIS2DUXS12_ERROR;
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001a00:	60fb      	str	r3, [r7, #12]
          }
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x50;
 8001a02:	2350      	movs	r3, #80	@ 0x50
 8001a04:	72fb      	strb	r3, [r7, #11]

          if (LIS2DUXS12_Write_Reg(pObj, LIS2DUXS12_CTRL1, data) != LIS2DUXS12_OK)
 8001a06:	7afb      	ldrb	r3, [r7, #11]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2110      	movs	r1, #16
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fbf6 	bl	80021fe <LIS2DUXS12_Write_Reg>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d02c      	beq.n	8001a72 <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	e028      	b.n	8001a72 <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_SPI_4WIRES_BUS)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d10e      	bne.n	8001a46 <LIS2DUXS12_RegisterBusIO+0x102>
      {
        /* Exit from deep power down only the first time in SPI mode */
        if (pObj->is_initialized == 0U)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d11f      	bne.n	8001a72 <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f8d3 	bl	8001bde <LIS2DUXS12_ExitDeepPowerDownSPI>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d019      	beq.n	8001a72 <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	e015      	b.n	8001a72 <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_I2C_BUS)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10e      	bne.n	8001a6c <LIS2DUXS12_RegisterBusIO+0x128>
      {
        /* Exit from deep power down only the first time in I2C mode */
        if (pObj->is_initialized == 0U)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10c      	bne.n	8001a72 <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          if (LIS2DUXS12_ExitDeepPowerDownI2C(pObj) != LIS2DUXS12_OK)
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f8ab 	bl	8001bb4 <LIS2DUXS12_ExitDeepPowerDownI2C>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d006      	beq.n	8001a72 <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	e002      	b.n	8001a72 <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else
      {
        ret = LIS2DUXS12_ERROR;
 8001a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a70:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8001a72:	68fb      	ldr	r3, [r7, #12]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	080026b9 	.word	0x080026b9
 8001a80:	080026ef 	.word	0x080026ef

08001a84 <LIS2DUXS12_Init>:
  * @brief  Initialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Init(LIS2DUXS12_Object_t *pObj)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  lis2duxs12_i3c_cfg_t val;

  if(pObj->IO.BusType != LIS2DUXS12_I3C_BUS)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d01f      	beq.n	8001ad4 <LIS2DUXS12_Init+0x50>
  {
    /* Disable I3C */
    if (lis2duxs12_i3c_configure_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3320      	adds	r3, #32
 8001a98:	f107 0214 	add.w	r2, r7, #20
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f001 fb0a 	bl	80030b8 <lis2duxs12_i3c_configure_get>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <LIS2DUXS12_Init+0x2c>
    {
      return LIS2DUXS12_ERROR;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e05c      	b.n	8001b6a <LIS2DUXS12_Init+0xe6>
    }
    val.asf_on = PROPERTY_ENABLE;
 8001ab0:	7d7b      	ldrb	r3, [r7, #21]
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	757b      	strb	r3, [r7, #21]
    if (lis2duxs12_i3c_configure_set(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3320      	adds	r3, #32
 8001abc:	f107 0214 	add.w	r2, r7, #20
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 fac0 	bl	8003048 <lis2duxs12_i3c_configure_set>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d002      	beq.n	8001ad4 <LIS2DUXS12_Init+0x50>
    {
      return LIS2DUXS12_ERROR;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	e04a      	b.n	8001b6a <LIS2DUXS12_Init+0xe6>
    }
  }

  /* Set main memory bank */
  if (LIS2DUXS12_Set_Mem_Bank(pObj, (uint8_t)LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 fbac 	bl	8002234 <LIS2DUXS12_Set_Mem_Bank>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d002      	beq.n	8001ae8 <LIS2DUXS12_Init+0x64>
  {
    return LIS2DUXS12_ERROR;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae6:	e040      	b.n	8001b6a <LIS2DUXS12_Init+0xe6>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. Enable BDU. */
  if (lis2duxs12_init_set(&(pObj->Ctx), LIS2DUXS12_SENSOR_ONLY_ON) != LIS2DUXS12_OK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3320      	adds	r3, #32
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 fec4 	bl	800287c <lis2duxs12_init_set>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <LIS2DUXS12_Init+0x7c>
  {
    return LIS2DUXS12_ERROR;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295
 8001afe:	e034      	b.n	8001b6a <LIS2DUXS12_Init+0xe6>
  }

  /* FIFO mode selection */
  lis2duxs12_fifo_mode_t fifo_mode =
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	809a      	strh	r2, [r3, #4]
    .operation = LIS2DUXS12_BYPASS_MODE,
    .store     = LIS2DUXS12_FIFO_1X,
    .watermark = 0,
  };

  if (lis2duxs12_fifo_mode_set(&(pObj->Ctx), fifo_mode) != LIS2DUXS12_OK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f103 0020 	add.w	r0, r3, #32
 8001b10:	f107 030c 	add.w	r3, r7, #12
 8001b14:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001b18:	f001 fb33 	bl	8003182 <lis2duxs12_fifo_mode_set>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <LIS2DUXS12_Init+0xa4>
  {
    return LIS2DUXS12_ERROR;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	e020      	b.n	8001b6a <LIS2DUXS12_Init+0xe6>
  }

  /* Select default output data rate */
  pObj->acc_odr = 100.0f;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a12      	ldr	r2, [pc, #72]	@ (8001b74 <LIS2DUXS12_Init+0xf0>)
 8001b2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Select default high performance mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_HIGH_PERFORMANCE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2202      	movs	r2, #2
 8001b32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Output data rate: power down, full scale: 2g */
  lis2duxs12_md_t mode =
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	460a      	mov	r2, r1
 8001b3e:	801a      	strh	r2, [r3, #0]
 8001b40:	460a      	mov	r2, r1
 8001b42:	709a      	strb	r2, [r3, #2]
  {
    .odr = LIS2DUXS12_OFF,
    .fs  = LIS2DUXS12_2g,
  };

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3320      	adds	r3, #32
 8001b48:	f107 0208 	add.w	r2, r7, #8
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 ffe2 	bl	8002b18 <lis2duxs12_mode_set>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <LIS2DUXS12_Init+0xdc>
  {
    return LIS2DUXS12_ERROR;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	e004      	b.n	8001b6a <LIS2DUXS12_Init+0xe6>
  }

  pObj->is_initialized = 1;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	42c80000 	.word	0x42c80000

08001b78 <LIS2DUXS12_DeInit>:
  * @brief  Deinitialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_DeInit(LIS2DUXS12_Object_t *pObj)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DUXS12_ACC_Disable(pObj) != LIS2DUXS12_OK)
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f8ad 	bl	8001ce0 <LIS2DUXS12_ACC_Disable>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <LIS2DUXS12_DeInit+0x1a>
  {
    return LIS2DUXS12_ERROR;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b90:	e00c      	b.n	8001bac <LIS2DUXS12_DeInit+0x34>
  }

  /* Reset output data rate */
  pObj->acc_odr = 0.0f;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set low power mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_LOW_POWER;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 0;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <LIS2DUXS12_ExitDeepPowerDownI2C>:
  * @brief  Exit from deep power down in I2C
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownI2C(LIS2DUXS12_Object_t *pObj)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint8_t val;

  /* Perform dummy read in order to exit from deep power down in I2C mode.
   * NOTE: No return value check - expected first read fail. */
  (void)lis2duxs12_device_id_get(&(pObj->Ctx), &val);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3320      	adds	r3, #32
 8001bc0:	f107 020f 	add.w	r2, r7, #15
 8001bc4:	4611      	mov	r1, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fe46 	bl	8002858 <lis2duxs12_device_id_get>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd0:	2019      	movs	r0, #25
 8001bd2:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <LIS2DUXS12_ExitDeepPowerDownSPI>:
  * @brief  Exit from deep power down in SPI
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownSPI(LIS2DUXS12_Object_t *pObj)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  /* Write IF_WAKE_UP register to exit from deep power down in SPI mode*/
  (void)lis2duxs12_exit_deep_power_down(&(pObj->Ctx));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3320      	adds	r3, #32
 8001bea:	4618      	mov	r0, r3
 8001bec:	f001 f960 	bl	8002eb0 <lis2duxs12_exit_deep_power_down>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf4:	2019      	movs	r0, #25
 8001bf6:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <LIS2DUXS12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ReadID(LIS2DUXS12_Object_t *pObj, uint8_t *Id)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6039      	str	r1, [r7, #0]
  uint8_t val;

  if (lis2duxs12_device_id_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3320      	adds	r3, #32
 8001c10:	f107 020f 	add.w	r2, r7, #15
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 fe1e 	bl	8002858 <lis2duxs12_device_id_get>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <LIS2DUXS12_ReadID+0x26>
  {
    return LIS2DUXS12_ERROR;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
 8001c26:	e003      	b.n	8001c30 <LIS2DUXS12_ReadID+0x2e>
  }

  *Id = val;
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	701a      	strb	r2, [r3, #0]

  return LIS2DUXS12_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <LIS2DUXS12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DUXS12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_GetCapabilities(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Capabilities_t *Capabilities)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc        = 1;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro       = 0;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto    = 0;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2200      	movs	r2, #0
 8001c52:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower   = 1;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	2201      	movs	r2, #1
 8001c58:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS  = 0;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS   = 16;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2210      	movs	r2, #16
 8001c64:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS   = 0;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr = 0.0f;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr  = 800.0f;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4a06      	ldr	r2, [pc, #24]	@ (8001c90 <LIS2DUXS12_GetCapabilities+0x58>)
 8001c78:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr  = 0.0f;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
  return LIS2DUXS12_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	44480000 	.word	0x44480000

08001c94 <LIS2DUXS12_ACC_Enable>:
  * @brief  Enable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Enable(LIS2DUXS12_Object_t *pObj)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <LIS2DUXS12_ACC_Enable+0x16>
  {
    return LIS2DUXS12_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e016      	b.n	8001cd8 <LIS2DUXS12_ACC_Enable+0x44>
  }

  /* Output data rate selection. */
  if (LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->power_mode) != LIS2DUXS12_OK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 fadb 	bl	8002278 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <LIS2DUXS12_ACC_Enable+0x3a>
  {
    return LIS2DUXS12_ERROR;
 8001cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ccc:	e004      	b.n	8001cd8 <LIS2DUXS12_ACC_Enable+0x44>
  }

  pObj->acc_is_enabled = 1;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <LIS2DUXS12_ACC_Disable>:
  * @brief  Disable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Disable(LIS2DUXS12_Object_t *pObj)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  float_t Odr;
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <LIS2DUXS12_ACC_Disable+0x16>
  {
    return LIS2DUXS12_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e046      	b.n	8001d84 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (LIS2DUXS12_ACC_GetOutputDataRate(pObj, &Odr) != LIS2DUXS12_OK)
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f893 	bl	8001e28 <LIS2DUXS12_ACC_GetOutputDataRate>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <LIS2DUXS12_ACC_Disable+0x2e>
  {
    return LIS2DUXS12_ERROR;
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0c:	e03a      	b.n	8001d84 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (Odr == 800.0f)
 8001d0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d12:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001d8c <LIS2DUXS12_ACC_Disable+0xac>
 8001d16:	eef4 7a47 	vcmp.f32	s15, s14
 8001d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1e:	d10e      	bne.n	8001d3e <LIS2DUXS12_ACC_Disable+0x5e>
  {
    if (LIS2DUXS12_ACC_SetOutputDataRate(pObj, 400.0f) != LIS2DUXS12_OK)
 8001d20:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8001d90 <LIS2DUXS12_ACC_Disable+0xb0>
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f94b 	bl	8001fc0 <LIS2DUXS12_ACC_SetOutputDataRate>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <LIS2DUXS12_ACC_Disable+0x56>
    {
      return LIS2DUXS12_ERROR;
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
 8001d34:	e026      	b.n	8001d84 <LIS2DUXS12_ACC_Disable+0xa4>
    }

    /* Wait for 3 ms based on datasheet */
    pObj->Ctx.mdelay(3);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d3a:	2003      	movs	r0, #3
 8001d3c:	4798      	blx	r3
  }

  /* Output data rate selection - power down. */
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3320      	adds	r3, #32
 8001d42:	f107 0208 	add.w	r2, r7, #8
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 ffa1 	bl	8002c90 <lis2duxs12_mode_get>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <LIS2DUXS12_ACC_Disable+0x7a>
  {
    return LIS2DUXS12_ERROR;
 8001d54:	f04f 33ff 	mov.w	r3, #4294967295
 8001d58:	e014      	b.n	8001d84 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  mode.odr = LIS2DUXS12_OFF;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	723b      	strb	r3, [r7, #8]

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3320      	adds	r3, #32
 8001d62:	f107 0208 	add.w	r2, r7, #8
 8001d66:	4611      	mov	r1, r2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 fed5 	bl	8002b18 <lis2duxs12_mode_set>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <LIS2DUXS12_ACC_Disable+0x9a>
  {
    return LIS2DUXS12_ERROR;
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295
 8001d78:	e004      	b.n	8001d84 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  pObj->acc_is_enabled = 0;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	44480000 	.word	0x44480000
 8001d90:	43c80000 	.word	0x43c80000

08001d94 <LIS2DUXS12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetSensitivity(LIS2DUXS12_Object_t *pObj, float_t *Sensitivity)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3320      	adds	r3, #32
 8001da6:	f107 0208 	add.w	r2, r7, #8
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 ff6f 	bl	8002c90 <lis2duxs12_mode_get>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <LIS2DUXS12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8001db8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dbc:	e026      	b.n	8001e0c <LIS2DUXS12_ACC_GetSensitivity+0x78>
  }

  switch (mode.fs)
 8001dbe:	7a7b      	ldrb	r3, [r7, #9]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d81b      	bhi.n	8001dfc <LIS2DUXS12_ACC_GetSensitivity+0x68>
 8001dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8001dcc <LIS2DUXS12_ACC_GetSensitivity+0x38>)
 8001dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dca:	bf00      	nop
 8001dcc:	08001ddd 	.word	0x08001ddd
 8001dd0:	08001de5 	.word	0x08001de5
 8001dd4:	08001ded 	.word	0x08001ded
 8001dd8:	08001df5 	.word	0x08001df5
  {
    case LIS2DUXS12_2g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_2G;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	4a0d      	ldr	r2, [pc, #52]	@ (8001e14 <LIS2DUXS12_ACC_GetSensitivity+0x80>)
 8001de0:	601a      	str	r2, [r3, #0]
      break;
 8001de2:	e012      	b.n	8001e0a <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_4g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_4G;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	4a0c      	ldr	r2, [pc, #48]	@ (8001e18 <LIS2DUXS12_ACC_GetSensitivity+0x84>)
 8001de8:	601a      	str	r2, [r3, #0]
      break;
 8001dea:	e00e      	b.n	8001e0a <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_8g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_8G;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	4a0b      	ldr	r2, [pc, #44]	@ (8001e1c <LIS2DUXS12_ACC_GetSensitivity+0x88>)
 8001df0:	601a      	str	r2, [r3, #0]
      break;
 8001df2:	e00a      	b.n	8001e0a <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_16g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_16G;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e20 <LIS2DUXS12_ACC_GetSensitivity+0x8c>)
 8001df8:	601a      	str	r2, [r3, #0]
      break;
 8001dfa:	e006      	b.n	8001e0a <LIS2DUXS12_ACC_GetSensitivity+0x76>

    default:
      *Sensitivity = -1.0f;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	4a09      	ldr	r2, [pc, #36]	@ (8001e24 <LIS2DUXS12_ACC_GetSensitivity+0x90>)
 8001e00:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	60fb      	str	r3, [r7, #12]
      break;
 8001e08:	bf00      	nop
  }

  return ret;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	3d79db23 	.word	0x3d79db23
 8001e18:	3df9db23 	.word	0x3df9db23
 8001e1c:	3e79db23 	.word	0x3e79db23
 8001e20:	3ef9db23 	.word	0x3ef9db23
 8001e24:	bf800000 	.word	0xbf800000

08001e28 <LIS2DUXS12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t *Odr)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual output data rate from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3320      	adds	r3, #32
 8001e3a:	f107 0208 	add.w	r2, r7, #8
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 ff25 	bl	8002c90 <lis2duxs12_mode_get>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <LIS2DUXS12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8001e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e50:	e09b      	b.n	8001f8a <LIS2DUXS12_ACC_GetOutputDataRate+0x162>
  }

  switch (mode.odr)
 8001e52:	7a3b      	ldrb	r3, [r7, #8]
 8001e54:	2b2f      	cmp	r3, #47	@ 0x2f
 8001e56:	f200 8090 	bhi.w	8001f7a <LIS2DUXS12_ACC_GetOutputDataRate+0x152>
 8001e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e60 <LIS2DUXS12_ACC_GetOutputDataRate+0x38>)
 8001e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e60:	08001f21 	.word	0x08001f21
 8001e64:	08001f2b 	.word	0x08001f2b
 8001e68:	08001f33 	.word	0x08001f33
 8001e6c:	08001f4b 	.word	0x08001f4b
 8001e70:	08001f3b 	.word	0x08001f3b
 8001e74:	08001f43 	.word	0x08001f43
 8001e78:	08001f4b 	.word	0x08001f4b
 8001e7c:	08001f53 	.word	0x08001f53
 8001e80:	08001f5b 	.word	0x08001f5b
 8001e84:	08001f63 	.word	0x08001f63
 8001e88:	08001f6b 	.word	0x08001f6b
 8001e8c:	08001f73 	.word	0x08001f73
 8001e90:	08001f7b 	.word	0x08001f7b
 8001e94:	08001f7b 	.word	0x08001f7b
 8001e98:	08001f7b 	.word	0x08001f7b
 8001e9c:	08001f7b 	.word	0x08001f7b
 8001ea0:	08001f7b 	.word	0x08001f7b
 8001ea4:	08001f7b 	.word	0x08001f7b
 8001ea8:	08001f7b 	.word	0x08001f7b
 8001eac:	08001f7b 	.word	0x08001f7b
 8001eb0:	08001f3b 	.word	0x08001f3b
 8001eb4:	08001f43 	.word	0x08001f43
 8001eb8:	08001f4b 	.word	0x08001f4b
 8001ebc:	08001f53 	.word	0x08001f53
 8001ec0:	08001f5b 	.word	0x08001f5b
 8001ec4:	08001f63 	.word	0x08001f63
 8001ec8:	08001f6b 	.word	0x08001f6b
 8001ecc:	08001f73 	.word	0x08001f73
 8001ed0:	08001f7b 	.word	0x08001f7b
 8001ed4:	08001f7b 	.word	0x08001f7b
 8001ed8:	08001f7b 	.word	0x08001f7b
 8001edc:	08001f7b 	.word	0x08001f7b
 8001ee0:	08001f7b 	.word	0x08001f7b
 8001ee4:	08001f7b 	.word	0x08001f7b
 8001ee8:	08001f7b 	.word	0x08001f7b
 8001eec:	08001f7b 	.word	0x08001f7b
 8001ef0:	08001f7b 	.word	0x08001f7b
 8001ef4:	08001f7b 	.word	0x08001f7b
 8001ef8:	08001f7b 	.word	0x08001f7b
 8001efc:	08001f7b 	.word	0x08001f7b
 8001f00:	08001f7b 	.word	0x08001f7b
 8001f04:	08001f7b 	.word	0x08001f7b
 8001f08:	08001f7b 	.word	0x08001f7b
 8001f0c:	08001f7b 	.word	0x08001f7b
 8001f10:	08001f7b 	.word	0x08001f7b
 8001f14:	08001f7b 	.word	0x08001f7b
 8001f18:	08001f21 	.word	0x08001f21
 8001f1c:	08001f21 	.word	0x08001f21
  {
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_TRIG_PIN:
    case LIS2DUXS12_TRIG_SW:
      *Odr = 0.0f;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
      break;
 8001f28:	e02e      	b.n	8001f88 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_1Hz6_ULP:
      *Odr = 1.6f;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	4a19      	ldr	r2, [pc, #100]	@ (8001f94 <LIS2DUXS12_ACC_GetOutputDataRate+0x16c>)
 8001f2e:	601a      	str	r2, [r3, #0]
      break;
 8001f30:	e02a      	b.n	8001f88 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_3Hz_ULP:
      *Odr = 3.0f;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	4a18      	ldr	r2, [pc, #96]	@ (8001f98 <LIS2DUXS12_ACC_GetOutputDataRate+0x170>)
 8001f36:	601a      	str	r2, [r3, #0]
      break;
 8001f38:	e026      	b.n	8001f88 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_6Hz_LP:
    case LIS2DUXS12_6Hz_HP:
      *Odr = 6.0f;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	4a17      	ldr	r2, [pc, #92]	@ (8001f9c <LIS2DUXS12_ACC_GetOutputDataRate+0x174>)
 8001f3e:	601a      	str	r2, [r3, #0]
      break;
 8001f40:	e022      	b.n	8001f88 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_12Hz5_LP:
    case LIS2DUXS12_12Hz5_HP:
      *Odr = 12.5f;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	4a16      	ldr	r2, [pc, #88]	@ (8001fa0 <LIS2DUXS12_ACC_GetOutputDataRate+0x178>)
 8001f46:	601a      	str	r2, [r3, #0]
      break;
 8001f48:	e01e      	b.n	8001f88 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_25Hz_ULP:
    case LIS2DUXS12_25Hz_LP:
    case LIS2DUXS12_25Hz_HP:
      *Odr = 25.0f;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	4a15      	ldr	r2, [pc, #84]	@ (8001fa4 <LIS2DUXS12_ACC_GetOutputDataRate+0x17c>)
 8001f4e:	601a      	str	r2, [r3, #0]
      break;
 8001f50:	e01a      	b.n	8001f88 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_50Hz_LP:
    case LIS2DUXS12_50Hz_HP:
      *Odr = 50.0f;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	4a14      	ldr	r2, [pc, #80]	@ (8001fa8 <LIS2DUXS12_ACC_GetOutputDataRate+0x180>)
 8001f56:	601a      	str	r2, [r3, #0]
      break;
 8001f58:	e016      	b.n	8001f88 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_100Hz_LP:
    case LIS2DUXS12_100Hz_HP:
      *Odr = 100.0f;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	4a13      	ldr	r2, [pc, #76]	@ (8001fac <LIS2DUXS12_ACC_GetOutputDataRate+0x184>)
 8001f5e:	601a      	str	r2, [r3, #0]
      break;
 8001f60:	e012      	b.n	8001f88 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_200Hz_LP:
    case LIS2DUXS12_200Hz_HP:
      *Odr = 200.0f;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	4a12      	ldr	r2, [pc, #72]	@ (8001fb0 <LIS2DUXS12_ACC_GetOutputDataRate+0x188>)
 8001f66:	601a      	str	r2, [r3, #0]
      break;
 8001f68:	e00e      	b.n	8001f88 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_400Hz_LP:
    case LIS2DUXS12_400Hz_HP:
      *Odr = 400.0f;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	4a11      	ldr	r2, [pc, #68]	@ (8001fb4 <LIS2DUXS12_ACC_GetOutputDataRate+0x18c>)
 8001f6e:	601a      	str	r2, [r3, #0]
      break;
 8001f70:	e00a      	b.n	8001f88 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_800Hz_LP:
    case LIS2DUXS12_800Hz_HP:
      *Odr = 800.0f;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	4a10      	ldr	r2, [pc, #64]	@ (8001fb8 <LIS2DUXS12_ACC_GetOutputDataRate+0x190>)
 8001f76:	601a      	str	r2, [r3, #0]
      break;
 8001f78:	e006      	b.n	8001f88 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    default:
      *Odr = -1.0f;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	4a0f      	ldr	r2, [pc, #60]	@ (8001fbc <LIS2DUXS12_ACC_GetOutputDataRate+0x194>)
 8001f7e:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295
 8001f84:	60fb      	str	r3, [r7, #12]
      break;
 8001f86:	bf00      	nop
  }

  return ret;
 8001f88:	68fb      	ldr	r3, [r7, #12]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	3fcccccd 	.word	0x3fcccccd
 8001f98:	40400000 	.word	0x40400000
 8001f9c:	40c00000 	.word	0x40c00000
 8001fa0:	41480000 	.word	0x41480000
 8001fa4:	41c80000 	.word	0x41c80000
 8001fa8:	42480000 	.word	0x42480000
 8001fac:	42c80000 	.word	0x42c80000
 8001fb0:	43480000 	.word	0x43480000
 8001fb4:	43c80000 	.word	0x43c80000
 8001fb8:	44480000 	.word	0x44480000
 8001fbc:	bf800000 	.word	0xbf800000

08001fc0 <LIS2DUXS12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t Odr)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use high performance mode */
  return LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DUXS12_HIGH_PERFORMANCE);
 8001fcc:	2102      	movs	r1, #2
 8001fce:	ed97 0a00 	vldr	s0, [r7]
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f805 	bl	8001fe2 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>
 8001fd8:	4603      	mov	r3, r0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Odr the output data rate value to be set
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(LIS2DUXS12_Object_t *pObj, float_t Odr, LIS2DUXS12_Power_Mode_t Power)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	60f8      	str	r0, [r7, #12]
 8001fea:	ed87 0a02 	vstr	s0, [r7, #8]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	71fb      	strb	r3, [r7, #7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d108      	bne.n	800200e <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x2c>
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Power);
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	4619      	mov	r1, r3
 8002000:	ed97 0a02 	vldr	s0, [r7, #8]
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 f937 	bl	8002278 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 800200a:	4603      	mov	r3, r0
 800200c:	e007      	b.n	800201e <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x3c>
  }
  else
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Power);
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	4619      	mov	r1, r3
 8002012:	ed97 0a02 	vldr	s0, [r7, #8]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 faac 	bl	8002574 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>
 800201c:	4603      	mov	r3, r0
  }
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <LIS2DUXS12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetFullScale(LIS2DUXS12_Object_t *pObj, int32_t *FullScale)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3320      	adds	r3, #32
 800203a:	f107 0208 	add.w	r2, r7, #8
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f000 fe25 	bl	8002c90 <lis2duxs12_mode_get>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <LIS2DUXS12_ACC_GetFullScale+0x2a>
  {
    return LIS2DUXS12_ERROR;
 800204c:	f04f 33ff 	mov.w	r3, #4294967295
 8002050:	e027      	b.n	80020a2 <LIS2DUXS12_ACC_GetFullScale+0x7a>
  }

  switch (mode.fs)
 8002052:	7a7b      	ldrb	r3, [r7, #9]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d81b      	bhi.n	8002090 <LIS2DUXS12_ACC_GetFullScale+0x68>
 8002058:	a201      	add	r2, pc, #4	@ (adr r2, 8002060 <LIS2DUXS12_ACC_GetFullScale+0x38>)
 800205a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205e:	bf00      	nop
 8002060:	08002071 	.word	0x08002071
 8002064:	08002079 	.word	0x08002079
 8002068:	08002081 	.word	0x08002081
 800206c:	08002089 	.word	0x08002089
  {
    case LIS2DUXS12_2g:
      *FullScale =  2;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2202      	movs	r2, #2
 8002074:	601a      	str	r2, [r3, #0]
      break;
 8002076:	e013      	b.n	80020a0 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_4g:
      *FullScale =  4;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2204      	movs	r2, #4
 800207c:	601a      	str	r2, [r3, #0]
      break;
 800207e:	e00f      	b.n	80020a0 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_8g:
      *FullScale =  8;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2208      	movs	r2, #8
 8002084:	601a      	str	r2, [r3, #0]
      break;
 8002086:	e00b      	b.n	80020a0 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_16g:
      *FullScale = 16;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2210      	movs	r2, #16
 800208c:	601a      	str	r2, [r3, #0]
      break;
 800208e:	e007      	b.n	80020a0 <LIS2DUXS12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f04f 32ff 	mov.w	r2, #4294967295
 8002096:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8002098:	f04f 33ff 	mov.w	r3, #4294967295
 800209c:	60fb      	str	r3, [r7, #12]
      break;
 800209e:	bf00      	nop
  }

  return ret;
 80020a0:	68fb      	ldr	r3, [r7, #12]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop

080020ac <LIS2DUXS12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetFullScale(LIS2DUXS12_Object_t *pObj, int32_t FullScale)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3320      	adds	r3, #32
 80020ba:	f107 020c 	add.w	r2, r7, #12
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 fde5 	bl	8002c90 <lis2duxs12_mode_get>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <LIS2DUXS12_ACC_SetFullScale+0x26>
  {
    return LIS2DUXS12_ERROR;
 80020cc:	f04f 33ff 	mov.w	r3, #4294967295
 80020d0:	e01f      	b.n	8002112 <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
            : (FullScale <= 4) ? LIS2DUXS12_4g
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	dd0b      	ble.n	80020f0 <LIS2DUXS12_ACC_SetFullScale+0x44>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	2b04      	cmp	r3, #4
 80020dc:	dd06      	ble.n	80020ec <LIS2DUXS12_ACC_SetFullScale+0x40>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	dc01      	bgt.n	80020e8 <LIS2DUXS12_ACC_SetFullScale+0x3c>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e004      	b.n	80020f2 <LIS2DUXS12_ACC_SetFullScale+0x46>
 80020e8:	2303      	movs	r3, #3
 80020ea:	e002      	b.n	80020f2 <LIS2DUXS12_ACC_SetFullScale+0x46>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <LIS2DUXS12_ACC_SetFullScale+0x46>
 80020f0:	2300      	movs	r3, #0
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
 80020f2:	737b      	strb	r3, [r7, #13]
            : (FullScale <= 8) ? LIS2DUXS12_8g
            :                    LIS2DUXS12_16g;

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3320      	adds	r3, #32
 80020f8:	f107 020c 	add.w	r2, r7, #12
 80020fc:	4611      	mov	r1, r2
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 fd0a 	bl	8002b18 <lis2duxs12_mode_set>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <LIS2DUXS12_ACC_SetFullScale+0x64>
  {
    return LIS2DUXS12_ERROR;
 800210a:	f04f 33ff 	mov.w	r3, #4294967295
 800210e:	e000      	b.n	8002112 <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  return LIS2DUXS12_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <LIS2DUXS12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxesRaw(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_AxesRaw_t *Value)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b088      	sub	sp, #32
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3320      	adds	r3, #32
 8002128:	f107 021c 	add.w	r2, r7, #28
 800212c:	4611      	mov	r1, r2
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fdae 	bl	8002c90 <lis2duxs12_mode_get>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d002      	beq.n	8002140 <LIS2DUXS12_ACC_GetAxesRaw+0x26>
  {
    return LIS2DUXS12_ERROR;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
 800213e:	e01b      	b.n	8002178 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3320      	adds	r3, #32
 8002144:	f107 0208 	add.w	r2, r7, #8
 8002148:	f107 011c 	add.w	r1, r7, #28
 800214c:	4618      	mov	r0, r3
 800214e:	f000 fecf 	bl	8002ef0 <lis2duxs12_xl_data_get>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <LIS2DUXS12_ACC_GetAxesRaw+0x44>
  {
    return LIS2DUXS12_ERROR;
 8002158:	f04f 33ff 	mov.w	r3, #4294967295
 800215c:	e00c      	b.n	8002178 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  Value->x = data.raw[0];
 800215e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	801a      	strh	r2, [r3, #0]
  Value->y = data.raw[1];
 8002166:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	805a      	strh	r2, [r3, #2]
  Value->z = data.raw[2];
 800216e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	809a      	strh	r2, [r3, #4]

  return LIS2DUXS12_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3720      	adds	r7, #32
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <LIS2DUXS12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxes(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Axes_t *Acceleration)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3320      	adds	r3, #32
 800218e:	f107 021c 	add.w	r2, r7, #28
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f000 fd7b 	bl	8002c90 <lis2duxs12_mode_get>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <LIS2DUXS12_ACC_GetAxes+0x26>
  {
    return LIS2DUXS12_ERROR;
 80021a0:	f04f 33ff 	mov.w	r3, #4294967295
 80021a4:	e027      	b.n	80021f6 <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3320      	adds	r3, #32
 80021aa:	f107 0208 	add.w	r2, r7, #8
 80021ae:	f107 011c 	add.w	r1, r7, #28
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fe9c 	bl	8002ef0 <lis2duxs12_xl_data_get>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <LIS2DUXS12_ACC_GetAxes+0x44>
  {
    return LIS2DUXS12_ERROR;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
 80021c2:	e018      	b.n	80021f6 <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  Acceleration->x = (int32_t)data.mg[0];
 80021c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80021c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021cc:	ee17 2a90 	vmov	r2, s15
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)data.mg[1];
 80021d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80021d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021dc:	ee17 2a90 	vmov	r2, s15
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)data.mg[2];
 80021e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80021e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ec:	ee17 2a90 	vmov	r2, s15
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	609a      	str	r2, [r3, #8]

  return LIS2DUXS12_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3720      	adds	r7, #32
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <LIS2DUXS12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Write_Reg(LIS2DUXS12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	460b      	mov	r3, r1
 8002208:	70fb      	strb	r3, [r7, #3]
 800220a:	4613      	mov	r3, r2
 800220c:	70bb      	strb	r3, [r7, #2]
  if (lis2duxs12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DUXS12_OK)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f103 0020 	add.w	r0, r3, #32
 8002214:	1cba      	adds	r2, r7, #2
 8002216:	78f9      	ldrb	r1, [r7, #3]
 8002218:	2301      	movs	r3, #1
 800221a:	f000 faa0 	bl	800275e <lis2duxs12_write_reg>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <LIS2DUXS12_Write_Reg+0x2c>
  {
    return LIS2DUXS12_ERROR;
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
 8002228:	e000      	b.n	800222c <LIS2DUXS12_Write_Reg+0x2e>
  }

  return LIS2DUXS12_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <LIS2DUXS12_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LIS2DUXS12_MAIN_MEM_BANK, 1 - LIS2DUXS12_EMBED_FUNC_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Set_Mem_Bank(LIS2DUXS12_Object_t *pObj, uint8_t Val)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LIS2DUXS12_OK;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
  lis2duxs12_mem_bank_t reg;

  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
        :               LIS2DUXS12_MAIN_MEM_BANK;
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	2b01      	cmp	r3, #1
 8002248:	bf0c      	ite	eq
 800224a:	2301      	moveq	r3, #1
 800224c:	2300      	movne	r3, #0
 800224e:	b2db      	uxtb	r3, r3
  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
 8002250:	72fb      	strb	r3, [r7, #11]

  if (lis2duxs12_mem_bank_set(&(pObj->Ctx), reg) != LIS2DUXS12_OK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3320      	adds	r3, #32
 8002256:	7afa      	ldrb	r2, [r7, #11]
 8002258:	4611      	mov	r1, r2
 800225a:	4618      	mov	r0, r3
 800225c:	f000 ff6b 	bl	8003136 <lis2duxs12_mem_bank_set>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <LIS2DUXS12_Set_Mem_Bank+0x38>
  {
    ret = LIS2DUXS12_ERROR;
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
 800226a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800226c:	68fb      	ldr	r3, [r7, #12]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	ed87 0a02 	vstr	s0, [r7, #8]
 8002284:	460b      	mov	r3, r1
 8002286:	71fb      	strb	r3, [r7, #7]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3320      	adds	r3, #32
 800228c:	f107 0214 	add.w	r2, r7, #20
 8002290:	4611      	mov	r1, r2
 8002292:	4618      	mov	r0, r3
 8002294:	f000 fcfc 	bl	8002c90 <lis2duxs12_mode_get>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c>
  {
    return LIS2DUXS12_ERROR;
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
 80022a2:	e142      	b.n	800252a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d118      	bne.n	80022dc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x64>
  {
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
               : (Odr <= 3.0f) ? LIS2DUXS12_3Hz_ULP
 80022aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80022ae:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8002534 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2bc>
 80022b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ba:	d801      	bhi.n	80022c0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x48>
 80022bc:	2301      	movs	r3, #1
 80022be:	e00b      	b.n	80022d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 80022c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80022c4:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80022c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d0:	d801      	bhi.n	80022d6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x5e>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e000      	b.n	80022d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 80022d6:	2303      	movs	r3, #3
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
 80022d8:	753b      	strb	r3, [r7, #20]
 80022da:	e0a4      	b.n	8002426 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               :                 LIS2DUXS12_25Hz_ULP;
  }
  else if (Power == LIS2DUXS12_LOW_POWER)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d14f      	bne.n	8002382 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x10a>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_LP
 80022e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80022e6:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80022ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f2:	d801      	bhi.n	80022f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x80>
 80022f4:	2304      	movs	r3, #4
 80022f6:	e042      	b.n	800237e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80022f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80022fc:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002308:	d801      	bhi.n	800230e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x96>
 800230a:	2305      	movs	r3, #5
 800230c:	e037      	b.n	800237e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 800230e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002312:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800231a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231e:	d801      	bhi.n	8002324 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xac>
 8002320:	2306      	movs	r3, #6
 8002322:	e02c      	b.n	800237e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8002324:	edd7 7a02 	vldr	s15, [r7, #8]
 8002328:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002538 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 800232c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002334:	d801      	bhi.n	800233a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xc2>
 8002336:	2307      	movs	r3, #7
 8002338:	e021      	b.n	800237e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 800233a:	edd7 7a02 	vldr	s15, [r7, #8]
 800233e:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 800253c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 8002342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234a:	d801      	bhi.n	8002350 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800234c:	2308      	movs	r3, #8
 800234e:	e016      	b.n	800237e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8002350:	edd7 7a02 	vldr	s15, [r7, #8]
 8002354:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002540 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 8002358:	eef4 7ac7 	vcmpe.f32	s15, s14
 800235c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002360:	d801      	bhi.n	8002366 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xee>
 8002362:	2309      	movs	r3, #9
 8002364:	e00b      	b.n	800237e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8002366:	edd7 7a02 	vldr	s15, [r7, #8]
 800236a:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8002544 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 800236e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002376:	d801      	bhi.n	800237c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x104>
 8002378:	230a      	movs	r3, #10
 800237a:	e000      	b.n	800237e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 800237c:	230b      	movs	r3, #11
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
 800237e:	753b      	strb	r3, [r7, #20]
 8002380:	e051      	b.n	8002426 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               : (Odr <= 100.0f) ? LIS2DUXS12_100Hz_LP
               : (Odr <= 200.0f) ? LIS2DUXS12_200Hz_LP
               : (Odr <= 400.0f) ? LIS2DUXS12_400Hz_LP
               :                   LIS2DUXS12_800Hz_LP;
  }
  else if (Power == LIS2DUXS12_HIGH_PERFORMANCE)
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d14e      	bne.n	8002426 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_HP
 8002388:	edd7 7a02 	vldr	s15, [r7, #8]
 800238c:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8002390:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002398:	d801      	bhi.n	800239e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x126>
 800239a:	2314      	movs	r3, #20
 800239c:	e042      	b.n	8002424 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800239e:	edd7 7a02 	vldr	s15, [r7, #8]
 80023a2:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80023a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ae:	d801      	bhi.n	80023b4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80023b0:	2315      	movs	r3, #21
 80023b2:	e037      	b.n	8002424 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80023b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80023b8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80023bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c4:	d801      	bhi.n	80023ca <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x152>
 80023c6:	2316      	movs	r3, #22
 80023c8:	e02c      	b.n	8002424 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80023ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80023ce:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8002538 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 80023d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023da:	d801      	bhi.n	80023e0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80023dc:	2317      	movs	r3, #23
 80023de:	e021      	b.n	8002424 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80023e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80023e4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800253c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 80023e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f0:	d801      	bhi.n	80023f6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 80023f2:	2318      	movs	r3, #24
 80023f4:	e016      	b.n	8002424 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80023f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80023fa:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8002540 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 80023fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002406:	d801      	bhi.n	800240c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8002408:	2319      	movs	r3, #25
 800240a:	e00b      	b.n	8002424 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800240c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002410:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8002544 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 8002414:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241c:	d801      	bhi.n	8002422 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 800241e:	231a      	movs	r3, #26
 8002420:	e000      	b.n	8002424 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8002422:	231b      	movs	r3, #27
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
 8002424:	753b      	strb	r3, [r7, #20]
  else
  {
    /* Do nothing */
  }

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	3320      	adds	r3, #32
 800242a:	f107 0214 	add.w	r2, r7, #20
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f000 fb71 	bl	8002b18 <lis2duxs12_mode_set>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ca>
  {
    return LIS2DUXS12_ERROR;
 800243c:	f04f 33ff 	mov.w	r3, #4294967295
 8002440:	e073      	b.n	800252a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Odr value */
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 8002442:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 8002444:	2b01      	cmp	r3, #1
 8002446:	d05b      	beq.n	8002500 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x288>
 8002448:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 800244a:	2b02      	cmp	r3, #2
 800244c:	d056      	beq.n	80024fc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x284>
 800244e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 8002450:	2b04      	cmp	r3, #4
 8002452:	d051      	beq.n	80024f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x280>
 8002454:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 8002456:	2b14      	cmp	r3, #20
 8002458:	d04c      	beq.n	80024f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x27c>
 800245a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 800245c:	2b05      	cmp	r3, #5
 800245e:	d047      	beq.n	80024f0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x278>
 8002460:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 8002462:	2b15      	cmp	r3, #21
 8002464:	d042      	beq.n	80024ec <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x274>
 8002466:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 8002468:	2b03      	cmp	r3, #3
 800246a:	d03d      	beq.n	80024e8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x270>
 800246c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 800246e:	2b06      	cmp	r3, #6
 8002470:	d038      	beq.n	80024e4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x26c>
 8002472:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 8002474:	2b16      	cmp	r3, #22
 8002476:	d033      	beq.n	80024e0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x268>
 8002478:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 800247a:	2b07      	cmp	r3, #7
 800247c:	d02e      	beq.n	80024dc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x264>
 800247e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 8002480:	2b17      	cmp	r3, #23
 8002482:	d029      	beq.n	80024d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x260>
 8002484:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 8002486:	2b08      	cmp	r3, #8
 8002488:	d024      	beq.n	80024d4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x25c>
 800248a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 800248c:	2b18      	cmp	r3, #24
 800248e:	d01f      	beq.n	80024d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x258>
 8002490:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 8002492:	2b09      	cmp	r3, #9
 8002494:	d01a      	beq.n	80024cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x254>
 8002496:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 8002498:	2b19      	cmp	r3, #25
 800249a:	d015      	beq.n	80024c8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x250>
 800249c:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 800249e:	2b0a      	cmp	r3, #10
 80024a0:	d010      	beq.n	80024c4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x24c>
 80024a2:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 80024a4:	2b1a      	cmp	r3, #26
 80024a6:	d00b      	beq.n	80024c0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x248>
 80024a8:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 80024aa:	2b0b      	cmp	r3, #11
 80024ac:	d006      	beq.n	80024bc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x244>
 80024ae:	7d3b      	ldrb	r3, [r7, #20]
                  :                                     -1.0f;
 80024b0:	2b1b      	cmp	r3, #27
 80024b2:	d101      	bne.n	80024b8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x240>
 80024b4:	4b24      	ldr	r3, [pc, #144]	@ (8002548 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 80024b6:	e024      	b.n	8002502 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 80024b8:	4b24      	ldr	r3, [pc, #144]	@ (800254c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d4>)
 80024ba:	e022      	b.n	8002502 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 80024bc:	4b22      	ldr	r3, [pc, #136]	@ (8002548 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 80024be:	e020      	b.n	8002502 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 80024c0:	4b23      	ldr	r3, [pc, #140]	@ (8002550 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 80024c2:	e01e      	b.n	8002502 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 80024c4:	4b22      	ldr	r3, [pc, #136]	@ (8002550 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 80024c6:	e01c      	b.n	8002502 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 80024c8:	4b22      	ldr	r3, [pc, #136]	@ (8002554 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 80024ca:	e01a      	b.n	8002502 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 80024cc:	4b21      	ldr	r3, [pc, #132]	@ (8002554 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 80024ce:	e018      	b.n	8002502 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 80024d0:	4b21      	ldr	r3, [pc, #132]	@ (8002558 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 80024d2:	e016      	b.n	8002502 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 80024d4:	4b20      	ldr	r3, [pc, #128]	@ (8002558 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 80024d6:	e014      	b.n	8002502 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 80024d8:	4b20      	ldr	r3, [pc, #128]	@ (800255c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 80024da:	e012      	b.n	8002502 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 80024dc:	4b1f      	ldr	r3, [pc, #124]	@ (800255c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 80024de:	e010      	b.n	8002502 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 80024e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002560 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 80024e2:	e00e      	b.n	8002502 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 80024e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002560 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 80024e6:	e00c      	b.n	8002502 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 80024e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002560 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 80024ea:	e00a      	b.n	8002502 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 80024ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002564 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 80024ee:	e008      	b.n	8002502 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 80024f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002564 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 80024f2:	e006      	b.n	8002502 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 80024f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002568 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 80024f6:	e004      	b.n	8002502 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 80024f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002568 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 80024fa:	e002      	b.n	8002502 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 80024fc:	4b1b      	ldr	r3, [pc, #108]	@ (800256c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f4>)
 80024fe:	e000      	b.n	8002502 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 8002500:	4b1b      	ldr	r3, [pc, #108]	@ (8002570 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f8>)
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	6353      	str	r3, [r2, #52]	@ 0x34

  if (pObj->acc_odr == -1.0f)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800250c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002510:	eef4 7a47 	vcmp.f32	s15, s14
 8002514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002518:	d102      	bne.n	8002520 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2a8>
  {
    return LIS2DUXS12_ERROR;
 800251a:	f04f 33ff 	mov.w	r3, #4294967295
 800251e:	e004      	b.n	800252a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Power value */
  pObj->power_mode = Power;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	79fa      	ldrb	r2, [r7, #7]
 8002524:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	3fcccccd 	.word	0x3fcccccd
 8002538:	42480000 	.word	0x42480000
 800253c:	42c80000 	.word	0x42c80000
 8002540:	43480000 	.word	0x43480000
 8002544:	43c80000 	.word	0x43c80000
 8002548:	44480000 	.word	0x44480000
 800254c:	bf800000 	.word	0xbf800000
 8002550:	43c80000 	.word	0x43c80000
 8002554:	43480000 	.word	0x43480000
 8002558:	42c80000 	.word	0x42c80000
 800255c:	42480000 	.word	0x42480000
 8002560:	41c80000 	.word	0x41c80000
 8002564:	41480000 	.word	0x41480000
 8002568:	40c00000 	.word	0x40c00000
 800256c:	40400000 	.word	0x40400000
 8002570:	3fcccccd 	.word	0x3fcccccd

08002574 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002580:	460b      	mov	r3, r1
 8002582:	71fb      	strb	r3, [r7, #7]
  /* Store the new Odr value */
  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d11a      	bne.n	80025c0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x4c>
  {
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
                    : (Odr <= 3.0f) ? 3.0f
 800258a:	edd7 7a02 	vldr	s15, [r7, #8]
 800258e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8002592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259a:	d802      	bhi.n	80025a2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x2e>
 800259c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80025a0:	e00b      	b.n	80025ba <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
                    :                25.0f;
 80025a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80025a6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80025aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b2:	d801      	bhi.n	80025b8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x44>
 80025b4:	4b33      	ldr	r3, [pc, #204]	@ (8002684 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x110>)
 80025b6:	e000      	b.n	80025ba <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
 80025b8:	4b33      	ldr	r3, [pc, #204]	@ (8002688 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	6353      	str	r3, [r2, #52]	@ 0x34
 80025be:	e055      	b.n	800266c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  }
  else if ((Power == LIS2DUXS12_LOW_POWER) || (Power == LIS2DUXS12_HIGH_PERFORMANCE))
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d002      	beq.n	80025cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x58>
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d14f      	bne.n	800266c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  {
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
                    : (Odr <=  12.5f) ?  12.5f
 80025cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80025d0:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80025d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025dc:	d801      	bhi.n	80025e2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x6e>
 80025de:	4b2b      	ldr	r3, [pc, #172]	@ (800268c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x118>)
 80025e0:	e042      	b.n	8002668 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  25.0f) ?  25.0f
 80025e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80025e6:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80025ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f2:	d801      	bhi.n	80025f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x84>
 80025f4:	4b26      	ldr	r3, [pc, #152]	@ (8002690 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 80025f6:	e037      	b.n	8002668 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  50.0f) ?  50.0f
 80025f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80025fc:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002600:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002608:	d801      	bhi.n	800260e <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x9a>
 800260a:	4b1f      	ldr	r3, [pc, #124]	@ (8002688 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 800260c:	e02c      	b.n	8002668 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 100.0f) ? 100.0f
 800260e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002612:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8002694 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x120>
 8002616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800261a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261e:	d801      	bhi.n	8002624 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8002620:	4b1d      	ldr	r3, [pc, #116]	@ (8002698 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x124>)
 8002622:	e021      	b.n	8002668 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 200.0f) ? 200.0f
 8002624:	edd7 7a02 	vldr	s15, [r7, #8]
 8002628:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800269c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x128>
 800262c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002634:	d801      	bhi.n	800263a <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xc6>
 8002636:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x12c>)
 8002638:	e016      	b.n	8002668 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 400.0f) ? 400.0f
 800263a:	edd7 7a02 	vldr	s15, [r7, #8]
 800263e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80026a4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x130>
 8002642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264a:	d801      	bhi.n	8002650 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xdc>
 800264c:	4b16      	ldr	r3, [pc, #88]	@ (80026a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x134>)
 800264e:	e00b      	b.n	8002668 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    :                   800.0f;
 8002650:	edd7 7a02 	vldr	s15, [r7, #8]
 8002654:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80026ac <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x138>
 8002658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800265c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002660:	d801      	bhi.n	8002666 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf2>
 8002662:	4b13      	ldr	r3, [pc, #76]	@ (80026b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x13c>)
 8002664:	e000      	b.n	8002668 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8002666:	4b13      	ldr	r3, [pc, #76]	@ (80026b4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x140>)
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	6353      	str	r3, [r2, #52]	@ 0x34
  {
    /* Do nothing */
  }

  /* Store the new Power value */
  pObj->power_mode = Power;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	79fa      	ldrb	r2, [r7, #7]
 8002670:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40400000 	.word	0x40400000
 8002688:	41c80000 	.word	0x41c80000
 800268c:	40c00000 	.word	0x40c00000
 8002690:	41480000 	.word	0x41480000
 8002694:	42480000 	.word	0x42480000
 8002698:	42480000 	.word	0x42480000
 800269c:	42c80000 	.word	0x42c80000
 80026a0:	42c80000 	.word	0x42c80000
 80026a4:	43480000 	.word	0x43480000
 80026a8:	43480000 	.word	0x43480000
 80026ac:	43c80000 	.word	0x43c80000
 80026b0:	43c80000 	.word	0x43c80000
 80026b4:	44480000 	.word	0x44480000

080026b8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	461a      	mov	r2, r3
 80026c4:	460b      	mov	r3, r1
 80026c6:	72fb      	strb	r3, [r7, #11]
 80026c8:	4613      	mov	r3, r2
 80026ca:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	695c      	ldr	r4, [r3, #20]
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	7b1b      	ldrb	r3, [r3, #12]
 80026d8:	4618      	mov	r0, r3
 80026da:	7afb      	ldrb	r3, [r7, #11]
 80026dc:	b299      	uxth	r1, r3
 80026de:	893b      	ldrh	r3, [r7, #8]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	47a0      	blx	r4
 80026e4:	4603      	mov	r3, r0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd90      	pop	{r4, r7, pc}

080026ee <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80026ee:	b590      	push	{r4, r7, lr}
 80026f0:	b087      	sub	sp, #28
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	461a      	mov	r2, r3
 80026fa:	460b      	mov	r3, r1
 80026fc:	72fb      	strb	r3, [r7, #11]
 80026fe:	4613      	mov	r3, r2
 8002700:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	691c      	ldr	r4, [r3, #16]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	7b1b      	ldrb	r3, [r3, #12]
 800270e:	4618      	mov	r0, r3
 8002710:	7afb      	ldrb	r3, [r7, #11]
 8002712:	b299      	uxth	r1, r3
 8002714:	893b      	ldrh	r3, [r7, #8]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	47a0      	blx	r4
 800271a:	4603      	mov	r3, r0
}
 800271c:	4618      	mov	r0, r3
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	bd90      	pop	{r4, r7, pc}

08002724 <lis2duxs12_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                   uint16_t len)
{
 8002724:	b590      	push	{r4, r7, lr}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	461a      	mov	r2, r3
 8002730:	460b      	mov	r3, r1
 8002732:	72fb      	strb	r3, [r7, #11]
 8002734:	4613      	mov	r3, r2
 8002736:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d102      	bne.n	8002744 <lis2duxs12_read_reg+0x20>
  {
    return -1;
 800273e:	f04f 33ff 	mov.w	r3, #4294967295
 8002742:	e008      	b.n	8002756 <lis2duxs12_read_reg+0x32>
  }

  return ctx->read_reg(ctx->handle, reg, data, len);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	685c      	ldr	r4, [r3, #4]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	68d8      	ldr	r0, [r3, #12]
 800274c:	893b      	ldrh	r3, [r7, #8]
 800274e:	7af9      	ldrb	r1, [r7, #11]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	47a0      	blx	r4
 8002754:	4603      	mov	r3, r0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	bd90      	pop	{r4, r7, pc}

0800275e <lis2duxs12_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                    uint16_t len)
{
 800275e:	b590      	push	{r4, r7, lr}
 8002760:	b085      	sub	sp, #20
 8002762:	af00      	add	r7, sp, #0
 8002764:	60f8      	str	r0, [r7, #12]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	461a      	mov	r2, r3
 800276a:	460b      	mov	r3, r1
 800276c:	72fb      	strb	r3, [r7, #11]
 800276e:	4613      	mov	r3, r2
 8002770:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d102      	bne.n	800277e <lis2duxs12_write_reg+0x20>
  {
    return -1;
 8002778:	f04f 33ff 	mov.w	r3, #4294967295
 800277c:	e008      	b.n	8002790 <lis2duxs12_write_reg+0x32>
  }

  return ctx->write_reg(ctx->handle, reg, data, len);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681c      	ldr	r4, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	68d8      	ldr	r0, [r3, #12]
 8002786:	893b      	ldrh	r3, [r7, #8]
 8002788:	7af9      	ldrb	r1, [r7, #11]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	47a0      	blx	r4
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	bd90      	pop	{r4, r7, pc}

08002798 <lis2duxs12_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lis2duxs12_from_fs2g_to_mg(int16_t lsb)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.061f;
 80027a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027a6:	ee07 3a90 	vmov	s15, r3
 80027aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ae:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80027c4 <lis2duxs12_from_fs2g_to_mg+0x2c>
 80027b2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80027b6:	eeb0 0a67 	vmov.f32	s0, s15
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	3d79db23 	.word	0x3d79db23

080027c8 <lis2duxs12_from_fs4g_to_mg>:

float_t lis2duxs12_from_fs4g_to_mg(int16_t lsb)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.122f;
 80027d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027de:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80027f4 <lis2duxs12_from_fs4g_to_mg+0x2c>
 80027e2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80027e6:	eeb0 0a67 	vmov.f32	s0, s15
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	3df9db23 	.word	0x3df9db23

080027f8 <lis2duxs12_from_fs8g_to_mg>:

float_t lis2duxs12_from_fs8g_to_mg(int16_t lsb)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.244f;
 8002802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800280e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002824 <lis2duxs12_from_fs8g_to_mg+0x2c>
 8002812:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002816:	eeb0 0a67 	vmov.f32	s0, s15
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	3e79db23 	.word	0x3e79db23

08002828 <lis2duxs12_from_fs16g_to_mg>:

float_t lis2duxs12_from_fs16g_to_mg(int16_t lsb)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.488f;
 8002832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002836:	ee07 3a90 	vmov	s15, r3
 800283a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800283e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002854 <lis2duxs12_from_fs16g_to_mg+0x2c>
 8002842:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002846:	eeb0 0a67 	vmov.f32	s0, s15
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	3ef9db23 	.word	0x3ef9db23

08002858 <lis2duxs12_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_WHO_AM_I, val, 1);
 8002862:	2301      	movs	r3, #1
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	210f      	movs	r1, #15
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ff5b 	bl	8002724 <lis2duxs12_read_reg>
 800286e:	60f8      	str	r0, [r7, #12]

  return ret;
 8002870:	68fb      	ldr	r3, [r7, #12]
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <lis2duxs12_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_init_set(const stmdev_ctx_t *ctx, lis2duxs12_init_t val)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  lis2duxs12_status_t status;
  uint8_t cnt = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	77fb      	strb	r3, [r7, #31]
  int32_t ret = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	61bb      	str	r3, [r7, #24]

  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002890:	f107 0214 	add.w	r2, r7, #20
 8002894:	2301      	movs	r3, #1
 8002896:	2110      	movs	r1, #16
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff43 	bl	8002724 <lis2duxs12_read_reg>
 800289e:	4602      	mov	r2, r0
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	4413      	add	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 80028a6:	f107 0210 	add.w	r2, r7, #16
 80028aa:	2301      	movs	r3, #1
 80028ac:	2113      	movs	r1, #19
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ff38 	bl	8002724 <lis2duxs12_read_reg>
 80028b4:	4602      	mov	r2, r0
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	4413      	add	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
  switch (val)
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	f200 80ca 	bhi.w	8002a58 <lis2duxs12_init_set+0x1dc>
 80028c4:	a201      	add	r2, pc, #4	@ (adr r2, 80028cc <lis2duxs12_init_set+0x50>)
 80028c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ca:	bf00      	nop
 80028cc:	080029cd 	.word	0x080029cd
 80028d0:	080028dd 	.word	0x080028dd
 80028d4:	08002957 	.word	0x08002957
 80028d8:	08002a13 	.word	0x08002a13
  {
    case LIS2DUXS12_BOOT:
      ctrl4.boot = PROPERTY_ENABLE;
 80028dc:	7c3b      	ldrb	r3, [r7, #16]
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	743b      	strb	r3, [r7, #16]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 80028e4:	f107 0210 	add.w	r2, r7, #16
 80028e8:	2301      	movs	r3, #1
 80028ea:	2113      	movs	r1, #19
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff ff36 	bl	800275e <lis2duxs12_write_reg>
 80028f2:	4602      	mov	r2, r0
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	4413      	add	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f040 80bb 	bne.w	8002a78 <lis2duxs12_init_set+0x1fc>
        break;
      }

      do
      {
        ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8002902:	f107 0210 	add.w	r2, r7, #16
 8002906:	2301      	movs	r3, #1
 8002908:	2113      	movs	r1, #19
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff ff0a 	bl	8002724 <lis2duxs12_read_reg>
 8002910:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d113      	bne.n	8002940 <lis2duxs12_init_set+0xc4>
        {
          break;
        }

        /* boot procedure ended correctly */
        if (ctrl4.boot == 0U)
 8002918:	7c3b      	ldrb	r3, [r7, #16]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00f      	beq.n	8002944 <lis2duxs12_init_set+0xc8>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <lis2duxs12_init_set+0xb8>
        {
          ctx->mdelay(25); /* 25 ms of boot time */
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2019      	movs	r0, #25
 8002932:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 8002934:	7ffb      	ldrb	r3, [r7, #31]
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	77fa      	strb	r2, [r7, #31]
 800293a:	2b04      	cmp	r3, #4
 800293c:	d9e1      	bls.n	8002902 <lis2duxs12_init_set+0x86>
 800293e:	e002      	b.n	8002946 <lis2duxs12_init_set+0xca>
          break;
 8002940:	bf00      	nop
 8002942:	e000      	b.n	8002946 <lis2duxs12_init_set+0xca>
          break;
 8002944:	bf00      	nop

      if (cnt >= 5U)
 8002946:	7ffb      	ldrb	r3, [r7, #31]
 8002948:	2b04      	cmp	r3, #4
 800294a:	f240 8097 	bls.w	8002a7c <lis2duxs12_init_set+0x200>
      {
        ret = -1;  /* boot procedure failed */
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
 8002952:	61bb      	str	r3, [r7, #24]
      }
      break;
 8002954:	e092      	b.n	8002a7c <lis2duxs12_init_set+0x200>
    case LIS2DUXS12_RESET:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 8002956:	7d3b      	ldrb	r3, [r7, #20]
 8002958:	f043 0320 	orr.w	r3, r3, #32
 800295c:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 800295e:	f107 0214 	add.w	r2, r7, #20
 8002962:	2301      	movs	r3, #1
 8002964:	2110      	movs	r1, #16
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff fef9 	bl	800275e <lis2duxs12_write_reg>
 800296c:	4602      	mov	r2, r0
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	4413      	add	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f040 8082 	bne.w	8002a80 <lis2duxs12_init_set+0x204>
        break;
      }

      do
      {
        ret = lis2duxs12_status_get(ctx, &status);
 800297c:	f107 030c 	add.w	r3, r7, #12
 8002980:	4619      	mov	r1, r3
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f884 	bl	8002a90 <lis2duxs12_status_get>
 8002988:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d113      	bne.n	80029b8 <lis2duxs12_init_set+0x13c>
        {
          break;
        }

        /* sw-reset procedure ended correctly */
        if (status.sw_reset == 0U)
 8002990:	7b3b      	ldrb	r3, [r7, #12]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00f      	beq.n	80029bc <lis2duxs12_init_set+0x140>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <lis2duxs12_init_set+0x130>
        {
          ctx->mdelay(1); /* should be 50 us */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2001      	movs	r0, #1
 80029aa:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 80029ac:	7ffb      	ldrb	r3, [r7, #31]
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	77fa      	strb	r2, [r7, #31]
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d9e2      	bls.n	800297c <lis2duxs12_init_set+0x100>
 80029b6:	e002      	b.n	80029be <lis2duxs12_init_set+0x142>
          break;
 80029b8:	bf00      	nop
 80029ba:	e000      	b.n	80029be <lis2duxs12_init_set+0x142>
          break;
 80029bc:	bf00      	nop

      if (cnt >= 5U)
 80029be:	7ffb      	ldrb	r3, [r7, #31]
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d95f      	bls.n	8002a84 <lis2duxs12_init_set+0x208>
      {
        ret = -1;  /* sw-reset procedure failed */
 80029c4:	f04f 33ff 	mov.w	r3, #4294967295
 80029c8:	61bb      	str	r3, [r7, #24]
      }
      break;
 80029ca:	e05b      	b.n	8002a84 <lis2duxs12_init_set+0x208>
    case LIS2DUXS12_SENSOR_ONLY_ON:
      /* no embedded funcs are used */
      ctrl4.emb_func_en = PROPERTY_DISABLE;
 80029cc:	7c3b      	ldrb	r3, [r7, #16]
 80029ce:	f023 0310 	bic.w	r3, r3, #16
 80029d2:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 80029d4:	7c3b      	ldrb	r3, [r7, #16]
 80029d6:	f043 0320 	orr.w	r3, r3, #32
 80029da:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 80029dc:	7d3b      	ldrb	r3, [r7, #20]
 80029de:	f043 0310 	orr.w	r3, r3, #16
 80029e2:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 80029e4:	f107 0210 	add.w	r2, r7, #16
 80029e8:	2301      	movs	r3, #1
 80029ea:	2113      	movs	r1, #19
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff feb6 	bl	800275e <lis2duxs12_write_reg>
 80029f2:	4602      	mov	r2, r0
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	4413      	add	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 80029fa:	f107 0214 	add.w	r2, r7, #20
 80029fe:	2301      	movs	r3, #1
 8002a00:	2110      	movs	r1, #16
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff feab 	bl	800275e <lis2duxs12_write_reg>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
      break;
 8002a10:	e039      	b.n	8002a86 <lis2duxs12_init_set+0x20a>
    case LIS2DUXS12_SENSOR_EMB_FUNC_ON:
      /* complete configuration is used */
      ctrl4.emb_func_en = PROPERTY_ENABLE;
 8002a12:	7c3b      	ldrb	r3, [r7, #16]
 8002a14:	f043 0310 	orr.w	r3, r3, #16
 8002a18:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 8002a1a:	7c3b      	ldrb	r3, [r7, #16]
 8002a1c:	f043 0320 	orr.w	r3, r3, #32
 8002a20:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 8002a22:	7d3b      	ldrb	r3, [r7, #20]
 8002a24:	f043 0310 	orr.w	r3, r3, #16
 8002a28:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8002a2a:	f107 0210 	add.w	r2, r7, #16
 8002a2e:	2301      	movs	r3, #1
 8002a30:	2113      	movs	r1, #19
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff fe93 	bl	800275e <lis2duxs12_write_reg>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002a40:	f107 0214 	add.w	r2, r7, #20
 8002a44:	2301      	movs	r3, #1
 8002a46:	2110      	movs	r1, #16
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff fe88 	bl	800275e <lis2duxs12_write_reg>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	4413      	add	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
      break;
 8002a56:	e016      	b.n	8002a86 <lis2duxs12_init_set+0x20a>
    default:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 8002a58:	7d3b      	ldrb	r3, [r7, #20]
 8002a5a:	f043 0320 	orr.w	r3, r3, #32
 8002a5e:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002a60:	f107 0214 	add.w	r2, r7, #20
 8002a64:	2301      	movs	r3, #1
 8002a66:	2110      	movs	r1, #16
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff fe78 	bl	800275e <lis2duxs12_write_reg>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	4413      	add	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
      break;
 8002a76:	e006      	b.n	8002a86 <lis2duxs12_init_set+0x20a>
        break;
 8002a78:	bf00      	nop
 8002a7a:	e004      	b.n	8002a86 <lis2duxs12_init_set+0x20a>
      break;
 8002a7c:	bf00      	nop
 8002a7e:	e002      	b.n	8002a86 <lis2duxs12_init_set+0x20a>
        break;
 8002a80:	bf00      	nop
 8002a82:	e000      	b.n	8002a86 <lis2duxs12_init_set+0x20a>
      break;
 8002a84:	bf00      	nop
  }
  return ret;
 8002a86:	69bb      	ldr	r3, [r7, #24]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3720      	adds	r7, #32
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <lis2duxs12_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_status_get(const stmdev_ctx_t *ctx, lis2duxs12_status_t *val)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  lis2duxs12_status_register_t status_register;
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_STATUS,
 8002a9a:	f107 0210 	add.w	r2, r7, #16
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	2125      	movs	r1, #37	@ 0x25
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff fe3e 	bl	8002724 <lis2duxs12_read_reg>
 8002aa8:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&status_register, 1);
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8002aaa:	f107 020c 	add.w	r2, r7, #12
 8002aae:	2301      	movs	r3, #1
 8002ab0:	2110      	movs	r1, #16
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff fe36 	bl	8002724 <lis2duxs12_read_reg>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	4413      	add	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8002ac0:	f107 0208 	add.w	r2, r7, #8
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	2113      	movs	r1, #19
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff fe2b 	bl	8002724 <lis2duxs12_read_reg>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  val->sw_reset = ctrl1.sw_reset;
 8002ad6:	7b3b      	ldrb	r3, [r7, #12]
 8002ad8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002adc:	b2d9      	uxtb	r1, r3
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	7813      	ldrb	r3, [r2, #0]
 8002ae2:	f361 0300 	bfi	r3, r1, #0, #1
 8002ae6:	7013      	strb	r3, [r2, #0]
  val->boot     = ctrl4.boot;
 8002ae8:	7a3b      	ldrb	r3, [r7, #8]
 8002aea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002aee:	b2d9      	uxtb	r1, r3
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	7813      	ldrb	r3, [r2, #0]
 8002af4:	f361 0341 	bfi	r3, r1, #1, #1
 8002af8:	7013      	strb	r3, [r2, #0]
  val->drdy     = status_register.drdy;
 8002afa:	7c3b      	ldrb	r3, [r7, #16]
 8002afc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b00:	b2d9      	uxtb	r1, r3
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	7813      	ldrb	r3, [r2, #0]
 8002b06:	f361 0382 	bfi	r3, r1, #2, #1
 8002b0a:	7013      	strb	r3, [r2, #0]

  return ret;
 8002b0c:	697b      	ldr	r3, [r7, #20]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <lis2duxs12_mode_set>:
  * @param  val   set the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_set(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *val)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8002b22:	f107 020c 	add.w	r2, r7, #12
 8002b26:	2301      	movs	r3, #1
 8002b28:	2114      	movs	r1, #20
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff fdfa 	bl	8002724 <lis2duxs12_read_reg>
 8002b30:	6178      	str	r0, [r7, #20]

  ctrl5.odr = (uint8_t)val->odr & 0xFU;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	7b3b      	ldrb	r3, [r7, #12]
 8002b3e:	f362 1307 	bfi	r3, r2, #4, #4
 8002b42:	733b      	strb	r3, [r7, #12]
  ctrl5.fs = (uint8_t)val->fs;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	785b      	ldrb	r3, [r3, #1]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	7b3b      	ldrb	r3, [r7, #12]
 8002b50:	f362 0301 	bfi	r3, r2, #0, #2
 8002b54:	733b      	strb	r3, [r7, #12]

  /* set the bandwidth */
  switch (val->odr)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b06      	cmp	r3, #6
 8002b5c:	d859      	bhi.n	8002c12 <lis2duxs12_mode_set+0xfa>
 8002b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002b64 <lis2duxs12_mode_set+0x4c>)
 8002b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b64:	08002b81 	.word	0x08002b81
 8002b68:	08002b81 	.word	0x08002b81
 8002b6c:	08002b81 	.word	0x08002b81
 8002b70:	08002b81 	.word	0x08002b81
 8002b74:	08002b8b 	.word	0x08002b8b
 8002b78:	08002ba7 	.word	0x08002ba7
 8002b7c:	08002bd3 	.word	0x08002bd3
    /* no anti-aliasing filter present */
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_1Hz6_ULP:
    case LIS2DUXS12_3Hz_ULP:
    case LIS2DUXS12_25Hz_ULP:
      ctrl5.bw = 0x0;
 8002b80:	7b3b      	ldrb	r3, [r7, #12]
 8002b82:	f023 030c 	bic.w	r3, r3, #12
 8002b86:	733b      	strb	r3, [r7, #12]
      break;
 8002b88:	e04d      	b.n	8002c26 <lis2duxs12_mode_set+0x10e>

    /* low-power mode with ODR < 50 Hz */
    case LIS2DUXS12_6Hz_LP:
      switch (val->bw)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	789b      	ldrb	r3, [r3, #2]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d003      	beq.n	8002b9a <lis2duxs12_mode_set+0x82>
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
        case LIS2DUXS12_ODR_div_8:
          /* value not allowed */
          ret = -1;
 8002b92:	f04f 33ff 	mov.w	r3, #4294967295
 8002b96:	617b      	str	r3, [r7, #20]
          break;
 8002b98:	e004      	b.n	8002ba4 <lis2duxs12_mode_set+0x8c>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8002b9a:	7b3b      	ldrb	r3, [r7, #12]
 8002b9c:	f043 030c 	orr.w	r3, r3, #12
 8002ba0:	733b      	strb	r3, [r7, #12]
          break;
 8002ba2:	bf00      	nop
      }
      break;
 8002ba4:	e03f      	b.n	8002c26 <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_12Hz5_LP:
      switch (val->bw)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	789b      	ldrb	r3, [r3, #2]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d005      	beq.n	8002bba <lis2duxs12_mode_set+0xa2>
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d009      	beq.n	8002bc6 <lis2duxs12_mode_set+0xae>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
          /* value not allowed */
          ret = -1;
 8002bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb6:	617b      	str	r3, [r7, #20]
          break;
 8002bb8:	e00a      	b.n	8002bd0 <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 8002bba:	7b3b      	ldrb	r3, [r7, #12]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	f362 0383 	bfi	r3, r2, #2, #2
 8002bc2:	733b      	strb	r3, [r7, #12]
          break;
 8002bc4:	e004      	b.n	8002bd0 <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8002bc6:	7b3b      	ldrb	r3, [r7, #12]
 8002bc8:	f043 030c 	orr.w	r3, r3, #12
 8002bcc:	733b      	strb	r3, [r7, #12]
          break;
 8002bce:	bf00      	nop
      }
      break;
 8002bd0:	e029      	b.n	8002c26 <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_25Hz_LP:
      switch (val->bw)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	789b      	ldrb	r3, [r3, #2]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d015      	beq.n	8002c06 <lis2duxs12_mode_set+0xee>
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	dc03      	bgt.n	8002be6 <lis2duxs12_mode_set+0xce>
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d005      	beq.n	8002bee <lis2duxs12_mode_set+0xd6>
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d009      	beq.n	8002bfa <lis2duxs12_mode_set+0xe2>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
          /* value not allowed */
          ret = -1;
 8002be6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bea:	617b      	str	r3, [r7, #20]
          break;
 8002bec:	e010      	b.n	8002c10 <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_4:
          ctrl5.bw = 0x1;
 8002bee:	7b3b      	ldrb	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f362 0383 	bfi	r3, r2, #2, #2
 8002bf6:	733b      	strb	r3, [r7, #12]
          break;
 8002bf8:	e00a      	b.n	8002c10 <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 8002bfa:	7b3b      	ldrb	r3, [r7, #12]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	f362 0383 	bfi	r3, r2, #2, #2
 8002c02:	733b      	strb	r3, [r7, #12]
          break;
 8002c04:	e004      	b.n	8002c10 <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8002c06:	7b3b      	ldrb	r3, [r7, #12]
 8002c08:	f043 030c 	orr.w	r3, r3, #12
 8002c0c:	733b      	strb	r3, [r7, #12]
          break;
 8002c0e:	bf00      	nop
      }
      break;
 8002c10:	e009      	b.n	8002c26 <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_100Hz_HP:
    case LIS2DUXS12_200Hz_HP:
    case LIS2DUXS12_400Hz_HP:
    case LIS2DUXS12_800Hz_HP:
    default:
      ctrl5.bw = (uint8_t)val->bw;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	789b      	ldrb	r3, [r3, #2]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	7b3b      	ldrb	r3, [r7, #12]
 8002c1e:	f362 0383 	bfi	r3, r2, #2, #2
 8002c22:	733b      	strb	r3, [r7, #12]
      break;
 8002c24:	bf00      	nop
  }

  if (ret != 0)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <lis2duxs12_mode_set+0x118>
  {
    return ret;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	e02b      	b.n	8002c88 <lis2duxs12_mode_set+0x170>
  }

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8002c30:	f107 0210 	add.w	r2, r7, #16
 8002c34:	2301      	movs	r3, #1
 8002c36:	2112      	movs	r1, #18
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff fd73 	bl	8002724 <lis2duxs12_read_reg>
 8002c3e:	6178      	str	r0, [r7, #20]

  ctrl3.hp_en = (((uint8_t)val->odr & 0x30U) == 0x10U) ? 1U : 0U;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002c48:	2b10      	cmp	r3, #16
 8002c4a:	d101      	bne.n	8002c50 <lis2duxs12_mode_set+0x138>
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	e000      	b.n	8002c52 <lis2duxs12_mode_set+0x13a>
 8002c50:	2200      	movs	r2, #0
 8002c52:	7c3b      	ldrb	r3, [r7, #16]
 8002c54:	f362 0382 	bfi	r3, r2, #2, #1
 8002c58:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d112      	bne.n	8002c86 <lis2duxs12_mode_set+0x16e>
  {
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8002c60:	f107 020c 	add.w	r2, r7, #12
 8002c64:	2301      	movs	r3, #1
 8002c66:	2114      	movs	r1, #20
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff fd78 	bl	800275e <lis2duxs12_write_reg>
 8002c6e:	6178      	str	r0, [r7, #20]
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8002c70:	f107 0210 	add.w	r2, r7, #16
 8002c74:	2301      	movs	r3, #1
 8002c76:	2112      	movs	r1, #18
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff fd70 	bl	800275e <lis2duxs12_write_reg>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	4413      	add	r3, r2
 8002c84:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002c86:	697b      	ldr	r3, [r7, #20]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <lis2duxs12_mode_get>:
  * @param  val   get the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_get(const stmdev_ctx_t *ctx, lis2duxs12_md_t *val)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8002c9a:	f107 020c 	add.w	r2, r7, #12
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	2114      	movs	r1, #20
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff fd3e 	bl	8002724 <lis2duxs12_read_reg>
 8002ca8:	6178      	str	r0, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8002caa:	f107 0210 	add.w	r2, r7, #16
 8002cae:	2301      	movs	r3, #1
 8002cb0:	2112      	movs	r1, #18
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff fd36 	bl	8002724 <lis2duxs12_read_reg>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]

  switch (ctrl5.odr)
 8002cc0:	7b3b      	ldrb	r3, [r7, #12]
 8002cc2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b0f      	cmp	r3, #15
 8002cca:	f200 809b 	bhi.w	8002e04 <lis2duxs12_mode_get+0x174>
 8002cce:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd4 <lis2duxs12_mode_get+0x44>)
 8002cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd4:	08002d15 	.word	0x08002d15
 8002cd8:	08002d1d 	.word	0x08002d1d
 8002cdc:	08002d25 	.word	0x08002d25
 8002ce0:	08002d2d 	.word	0x08002d2d
 8002ce4:	08002d35 	.word	0x08002d35
 8002ce8:	08002d4d 	.word	0x08002d4d
 8002cec:	08002d65 	.word	0x08002d65
 8002cf0:	08002d7d 	.word	0x08002d7d
 8002cf4:	08002d95 	.word	0x08002d95
 8002cf8:	08002dad 	.word	0x08002dad
 8002cfc:	08002dc5 	.word	0x08002dc5
 8002d00:	08002ddd 	.word	0x08002ddd
 8002d04:	08002e05 	.word	0x08002e05
 8002d08:	08002e05 	.word	0x08002e05
 8002d0c:	08002df5 	.word	0x08002df5
 8002d10:	08002dfd 	.word	0x08002dfd
  {
    case 0x00:
      val->odr = LIS2DUXS12_OFF;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
      break;
 8002d1a:	e077      	b.n	8002e0c <lis2duxs12_mode_get+0x17c>
    case 0x01:
      val->odr = LIS2DUXS12_1Hz6_ULP;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
      break;
 8002d22:	e073      	b.n	8002e0c <lis2duxs12_mode_get+0x17c>
    case 0x02:
      val->odr = LIS2DUXS12_3Hz_ULP;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2202      	movs	r2, #2
 8002d28:	701a      	strb	r2, [r3, #0]
      break;
 8002d2a:	e06f      	b.n	8002e0c <lis2duxs12_mode_get+0x17c>
    case 0x03:
      val->odr = LIS2DUXS12_25Hz_ULP;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2203      	movs	r2, #3
 8002d30:	701a      	strb	r2, [r3, #0]
      break;
 8002d32:	e06b      	b.n	8002e0c <lis2duxs12_mode_get+0x17c>
    case 0x04:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_6Hz_HP : LIS2DUXS12_6Hz_LP;
 8002d34:	7c3b      	ldrb	r3, [r7, #16]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <lis2duxs12_mode_get+0xb4>
 8002d40:	2214      	movs	r2, #20
 8002d42:	e000      	b.n	8002d46 <lis2duxs12_mode_get+0xb6>
 8002d44:	2204      	movs	r2, #4
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	701a      	strb	r2, [r3, #0]
      break;
 8002d4a:	e05f      	b.n	8002e0c <lis2duxs12_mode_get+0x17c>
    case 0x05:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_12Hz5_HP : LIS2DUXS12_12Hz5_LP;
 8002d4c:	7c3b      	ldrb	r3, [r7, #16]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <lis2duxs12_mode_get+0xcc>
 8002d58:	2215      	movs	r2, #21
 8002d5a:	e000      	b.n	8002d5e <lis2duxs12_mode_get+0xce>
 8002d5c:	2205      	movs	r2, #5
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	701a      	strb	r2, [r3, #0]
      break;
 8002d62:	e053      	b.n	8002e0c <lis2duxs12_mode_get+0x17c>
    case 0x06:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_25Hz_HP : LIS2DUXS12_25Hz_LP;
 8002d64:	7c3b      	ldrb	r3, [r7, #16]
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <lis2duxs12_mode_get+0xe4>
 8002d70:	2216      	movs	r2, #22
 8002d72:	e000      	b.n	8002d76 <lis2duxs12_mode_get+0xe6>
 8002d74:	2206      	movs	r2, #6
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	701a      	strb	r2, [r3, #0]
      break;
 8002d7a:	e047      	b.n	8002e0c <lis2duxs12_mode_get+0x17c>
    case 0x07:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_50Hz_HP : LIS2DUXS12_50Hz_LP;
 8002d7c:	7c3b      	ldrb	r3, [r7, #16]
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <lis2duxs12_mode_get+0xfc>
 8002d88:	2217      	movs	r2, #23
 8002d8a:	e000      	b.n	8002d8e <lis2duxs12_mode_get+0xfe>
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	701a      	strb	r2, [r3, #0]
      break;
 8002d92:	e03b      	b.n	8002e0c <lis2duxs12_mode_get+0x17c>
    case 0x08:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_100Hz_HP : LIS2DUXS12_100Hz_LP;
 8002d94:	7c3b      	ldrb	r3, [r7, #16]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <lis2duxs12_mode_get+0x114>
 8002da0:	2218      	movs	r2, #24
 8002da2:	e000      	b.n	8002da6 <lis2duxs12_mode_get+0x116>
 8002da4:	2208      	movs	r2, #8
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	701a      	strb	r2, [r3, #0]
      break;
 8002daa:	e02f      	b.n	8002e0c <lis2duxs12_mode_get+0x17c>
    case 0x09:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_200Hz_HP : LIS2DUXS12_200Hz_LP;
 8002dac:	7c3b      	ldrb	r3, [r7, #16]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <lis2duxs12_mode_get+0x12c>
 8002db8:	2219      	movs	r2, #25
 8002dba:	e000      	b.n	8002dbe <lis2duxs12_mode_get+0x12e>
 8002dbc:	2209      	movs	r2, #9
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	701a      	strb	r2, [r3, #0]
      break;
 8002dc2:	e023      	b.n	8002e0c <lis2duxs12_mode_get+0x17c>
    case 0x0A:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_400Hz_HP : LIS2DUXS12_400Hz_LP;
 8002dc4:	7c3b      	ldrb	r3, [r7, #16]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <lis2duxs12_mode_get+0x144>
 8002dd0:	221a      	movs	r2, #26
 8002dd2:	e000      	b.n	8002dd6 <lis2duxs12_mode_get+0x146>
 8002dd4:	220a      	movs	r2, #10
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	701a      	strb	r2, [r3, #0]
      break;
 8002dda:	e017      	b.n	8002e0c <lis2duxs12_mode_get+0x17c>
    case 0x0B:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_800Hz_HP : LIS2DUXS12_800Hz_LP;
 8002ddc:	7c3b      	ldrb	r3, [r7, #16]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <lis2duxs12_mode_get+0x15c>
 8002de8:	221b      	movs	r2, #27
 8002dea:	e000      	b.n	8002dee <lis2duxs12_mode_get+0x15e>
 8002dec:	220b      	movs	r2, #11
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	701a      	strb	r2, [r3, #0]
      break;
 8002df2:	e00b      	b.n	8002e0c <lis2duxs12_mode_get+0x17c>
    case 0xe:
      val->odr = LIS2DUXS12_TRIG_PIN;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	222e      	movs	r2, #46	@ 0x2e
 8002df8:	701a      	strb	r2, [r3, #0]
      break;
 8002dfa:	e007      	b.n	8002e0c <lis2duxs12_mode_get+0x17c>
    case 0xf:
      val->odr = LIS2DUXS12_TRIG_SW;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	222f      	movs	r2, #47	@ 0x2f
 8002e00:	701a      	strb	r2, [r3, #0]
      break;
 8002e02:	e003      	b.n	8002e0c <lis2duxs12_mode_get+0x17c>
    default:
      val->odr = LIS2DUXS12_OFF;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]
      break;
 8002e0a:	bf00      	nop
  }

  switch (ctrl5.fs)
 8002e0c:	7b3b      	ldrb	r3, [r7, #12]
 8002e0e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d81b      	bhi.n	8002e50 <lis2duxs12_mode_get+0x1c0>
 8002e18:	a201      	add	r2, pc, #4	@ (adr r2, 8002e20 <lis2duxs12_mode_get+0x190>)
 8002e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1e:	bf00      	nop
 8002e20:	08002e31 	.word	0x08002e31
 8002e24:	08002e39 	.word	0x08002e39
 8002e28:	08002e41 	.word	0x08002e41
 8002e2c:	08002e49 	.word	0x08002e49
  {
    case 0:
      val->fs = LIS2DUXS12_2g;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2200      	movs	r2, #0
 8002e34:	705a      	strb	r2, [r3, #1]
      break;
 8002e36:	e00f      	b.n	8002e58 <lis2duxs12_mode_get+0x1c8>
    case 1:
      val->fs = LIS2DUXS12_4g;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	705a      	strb	r2, [r3, #1]
      break;
 8002e3e:	e00b      	b.n	8002e58 <lis2duxs12_mode_get+0x1c8>
    case 2:
      val->fs = LIS2DUXS12_8g;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2202      	movs	r2, #2
 8002e44:	705a      	strb	r2, [r3, #1]
      break;
 8002e46:	e007      	b.n	8002e58 <lis2duxs12_mode_get+0x1c8>
    case 3:
      val->fs = LIS2DUXS12_16g;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	705a      	strb	r2, [r3, #1]
      break;
 8002e4e:	e003      	b.n	8002e58 <lis2duxs12_mode_get+0x1c8>
    default:
      val->fs = LIS2DUXS12_2g;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	2200      	movs	r2, #0
 8002e54:	705a      	strb	r2, [r3, #1]
      break;
 8002e56:	bf00      	nop
  }

  switch (ctrl5.bw)
 8002e58:	7b3b      	ldrb	r3, [r7, #12]
 8002e5a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d81b      	bhi.n	8002e9c <lis2duxs12_mode_get+0x20c>
 8002e64:	a201      	add	r2, pc, #4	@ (adr r2, 8002e6c <lis2duxs12_mode_get+0x1dc>)
 8002e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6a:	bf00      	nop
 8002e6c:	08002e7d 	.word	0x08002e7d
 8002e70:	08002e85 	.word	0x08002e85
 8002e74:	08002e8d 	.word	0x08002e8d
 8002e78:	08002e95 	.word	0x08002e95
  {
    case 0:
      val->bw = LIS2DUXS12_ODR_div_2;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	709a      	strb	r2, [r3, #2]
      break;
 8002e82:	e00f      	b.n	8002ea4 <lis2duxs12_mode_get+0x214>
    case 1:
      val->bw = LIS2DUXS12_ODR_div_4;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2201      	movs	r2, #1
 8002e88:	709a      	strb	r2, [r3, #2]
      break;
 8002e8a:	e00b      	b.n	8002ea4 <lis2duxs12_mode_get+0x214>
    case 2:
      val->bw = LIS2DUXS12_ODR_div_8;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	709a      	strb	r2, [r3, #2]
      break;
 8002e92:	e007      	b.n	8002ea4 <lis2duxs12_mode_get+0x214>
    case 3:
      val->bw = LIS2DUXS12_ODR_div_16;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	2203      	movs	r2, #3
 8002e98:	709a      	strb	r2, [r3, #2]
      break;
 8002e9a:	e003      	b.n	8002ea4 <lis2duxs12_mode_get+0x214>
    default:
      val->bw = LIS2DUXS12_ODR_div_2;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	709a      	strb	r2, [r3, #2]
      break;
 8002ea2:	bf00      	nop
  }

  return ret;
 8002ea4:	697b      	ldr	r3, [r7, #20]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop

08002eb0 <lis2duxs12_exit_deep_power_down>:
  * @param  val      Enter soft power down in SPI case
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_exit_deep_power_down(const stmdev_ctx_t *ctx)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  lis2duxs12_en_device_config_t en_device_config = {0};
 8002eb8:	2300      	movs	r3, #0
 8002eba:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  en_device_config.soft_pd = PROPERTY_ENABLE;
 8002ebc:	7a3b      	ldrb	r3, [r7, #8]
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	723b      	strb	r3, [r7, #8]
  ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_EN_DEVICE_CONFIG, (uint8_t *)&en_device_config, 1);
 8002ec4:	f107 0208 	add.w	r2, r7, #8
 8002ec8:	2301      	movs	r3, #1
 8002eca:	213e      	movs	r1, #62	@ 0x3e
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7ff fc46 	bl	800275e <lis2duxs12_write_reg>
 8002ed2:	60f8      	str	r0, [r7, #12]

  if (ctx->mdelay != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <lis2duxs12_exit_deep_power_down+0x34>
  {
    ctx->mdelay(25); /* See AN5812 - paragraphs 3.1.1.1 and 3.1.1.2 */
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2019      	movs	r0, #25
 8002ee2:	4798      	blx	r3
  }

  return ret;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <lis2duxs12_xl_data_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_xl_data_get(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *md,
                               lis2duxs12_xl_data_t *data)
{
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b089      	sub	sp, #36	@ 0x24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  uint8_t buff[6];
  int32_t ret;
  uint8_t i;
  uint8_t j;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_OUT_X_L, buff, 6);
 8002efc:	f107 0210 	add.w	r2, r7, #16
 8002f00:	2306      	movs	r3, #6
 8002f02:	2128      	movs	r1, #40	@ 0x28
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f7ff fc0d 	bl	8002724 <lis2duxs12_read_reg>
 8002f0a:	61b8      	str	r0, [r7, #24]

  /* acceleration conversion */
  j = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	77bb      	strb	r3, [r7, #30]
  for (i = 0U; i < 3U; i++)
 8002f10:	2300      	movs	r3, #0
 8002f12:	77fb      	strb	r3, [r7, #31]
 8002f14:	e08f      	b.n	8003036 <lis2duxs12_xl_data_get+0x146>
  {
    data->raw[i] = (int16_t)buff[j + 1U];
 8002f16:	7fbb      	ldrb	r3, [r7, #30]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	3320      	adds	r3, #32
 8002f1c:	443b      	add	r3, r7
 8002f1e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8002f22:	7ffb      	ldrb	r3, [r7, #31]
 8002f24:	b211      	sxth	r1, r2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	4413      	add	r3, r2
 8002f2e:	460a      	mov	r2, r1
 8002f30:	809a      	strh	r2, [r3, #4]
    data->raw[i] = (data->raw[i] * 256) + (int16_t) buff[j];
 8002f32:	7ffb      	ldrb	r3, [r7, #31]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	3304      	adds	r3, #4
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	7fba      	ldrb	r2, [r7, #30]
 8002f48:	3220      	adds	r2, #32
 8002f4a:	443a      	add	r2, r7
 8002f4c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8002f50:	4413      	add	r3, r2
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	7ffb      	ldrb	r3, [r7, #31]
 8002f56:	b211      	sxth	r1, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	460a      	mov	r2, r1
 8002f62:	809a      	strh	r2, [r3, #4]
    j += 2U;
 8002f64:	7fbb      	ldrb	r3, [r7, #30]
 8002f66:	3302      	adds	r3, #2
 8002f68:	77bb      	strb	r3, [r7, #30]
    switch (md->fs)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	785b      	ldrb	r3, [r3, #1]
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	d856      	bhi.n	8003020 <lis2duxs12_xl_data_get+0x130>
 8002f72:	a201      	add	r2, pc, #4	@ (adr r2, 8002f78 <lis2duxs12_xl_data_get+0x88>)
 8002f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f78:	08002f89 	.word	0x08002f89
 8002f7c:	08002faf 	.word	0x08002faf
 8002f80:	08002fd5 	.word	0x08002fd5
 8002f84:	08002ffb 	.word	0x08002ffb
    {
      case LIS2DUXS12_2g:
        data->mg[i] = lis2duxs12_from_fs2g_to_mg(data->raw[i]);
 8002f88:	7ffb      	ldrb	r3, [r7, #31]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4413      	add	r3, r2
 8002f92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f96:	7ffc      	ldrb	r4, [r7, #31]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fbfd 	bl	8002798 <lis2duxs12_from_fs2g_to_mg>
 8002f9e:	eef0 7a40 	vmov.f32	s15, s0
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	00a3      	lsls	r3, r4, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	edc3 7a00 	vstr	s15, [r3]
        break;
 8002fac:	e040      	b.n	8003030 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_4g:
        data->mg[i] = lis2duxs12_from_fs4g_to_mg(data->raw[i]);
 8002fae:	7ffb      	ldrb	r3, [r7, #31]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002fbc:	7ffc      	ldrb	r4, [r7, #31]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fc02 	bl	80027c8 <lis2duxs12_from_fs4g_to_mg>
 8002fc4:	eef0 7a40 	vmov.f32	s15, s0
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	00a3      	lsls	r3, r4, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	edc3 7a00 	vstr	s15, [r3]
        break;
 8002fd2:	e02d      	b.n	8003030 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_8g:
        data->mg[i] = lis2duxs12_from_fs8g_to_mg(data->raw[i]);
 8002fd4:	7ffb      	ldrb	r3, [r7, #31]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002fe2:	7ffc      	ldrb	r4, [r7, #31]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fc07 	bl	80027f8 <lis2duxs12_from_fs8g_to_mg>
 8002fea:	eef0 7a40 	vmov.f32	s15, s0
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	00a3      	lsls	r3, r4, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	edc3 7a00 	vstr	s15, [r3]
        break;
 8002ff8:	e01a      	b.n	8003030 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_16g:
        data->mg[i] = lis2duxs12_from_fs16g_to_mg(data->raw[i]);
 8002ffa:	7ffb      	ldrb	r3, [r7, #31]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	3304      	adds	r3, #4
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003008:	7ffc      	ldrb	r4, [r7, #31]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fc0c 	bl	8002828 <lis2duxs12_from_fs16g_to_mg>
 8003010:	eef0 7a40 	vmov.f32	s15, s0
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	00a3      	lsls	r3, r4, #2
 8003018:	4413      	add	r3, r2
 800301a:	edc3 7a00 	vstr	s15, [r3]
        break;
 800301e:	e007      	b.n	8003030 <lis2duxs12_xl_data_get+0x140>
      default:
        data->mg[i] = 0.0f;
 8003020:	7ffb      	ldrb	r3, [r7, #31]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
        break;
 800302e:	bf00      	nop
  for (i = 0U; i < 3U; i++)
 8003030:	7ffb      	ldrb	r3, [r7, #31]
 8003032:	3301      	adds	r3, #1
 8003034:	77fb      	strb	r3, [r7, #31]
 8003036:	7ffb      	ldrb	r3, [r7, #31]
 8003038:	2b02      	cmp	r3, #2
 800303a:	f67f af6c 	bls.w	8002f16 <lis2duxs12_xl_data_get+0x26>
    }
  }

  return ret;
 800303e:	69bb      	ldr	r3, [r7, #24]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3724      	adds	r7, #36	@ 0x24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd90      	pop	{r4, r7, pc}

08003048 <lis2duxs12_i3c_configure_set>:
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_i3c_configure_set(const stmdev_ctx_t *ctx, const lis2duxs12_i3c_cfg_t *val)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 8003052:	f107 0208 	add.w	r2, r7, #8
 8003056:	2301      	movs	r3, #1
 8003058:	2133      	movs	r1, #51	@ 0x33
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff fb62 	bl	8002724 <lis2duxs12_read_reg>
 8003060:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d122      	bne.n	80030ae <lis2duxs12_i3c_configure_set+0x66>
  {
    i3c_cfg.bus_act_sel = (uint8_t)val->bus_act_sel;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	b2da      	uxtb	r2, r3
 8003072:	7a3b      	ldrb	r3, [r7, #8]
 8003074:	f362 0301 	bfi	r3, r2, #0, #2
 8003078:	723b      	strb	r3, [r7, #8]
    i3c_cfg.dis_drstdaa = val->drstdaa_en;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	785b      	ldrb	r3, [r3, #1]
 800307e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003082:	b2da      	uxtb	r2, r3
 8003084:	7a3b      	ldrb	r3, [r7, #8]
 8003086:	f362 1386 	bfi	r3, r2, #6, #1
 800308a:	723b      	strb	r3, [r7, #8]
    i3c_cfg.asf_on = val->asf_on;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	785b      	ldrb	r3, [r3, #1]
 8003090:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003094:	b2da      	uxtb	r2, r3
 8003096:	7a3b      	ldrb	r3, [r7, #8]
 8003098:	f362 1345 	bfi	r3, r2, #5, #1
 800309c:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 800309e:	f107 0208 	add.w	r2, r7, #8
 80030a2:	2301      	movs	r3, #1
 80030a4:	2133      	movs	r1, #51	@ 0x33
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff fb59 	bl	800275e <lis2duxs12_write_reg>
 80030ac:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80030ae:	68fb      	ldr	r3, [r7, #12]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <lis2duxs12_i3c_configure_get>:
  * @param  ctx   communication interface handler.(ptr)
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */int32_t lis2duxs12_i3c_configure_get(const stmdev_ctx_t *ctx, lis2duxs12_i3c_cfg_t *val)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 80030c2:	f107 0208 	add.w	r2, r7, #8
 80030c6:	2301      	movs	r3, #1
 80030c8:	2133      	movs	r1, #51	@ 0x33
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff fb2a 	bl	8002724 <lis2duxs12_read_reg>
 80030d0:	60f8      	str	r0, [r7, #12]

  val->drstdaa_en = i3c_cfg.dis_drstdaa;
 80030d2:	7a3b      	ldrb	r3, [r7, #8]
 80030d4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80030d8:	b2d9      	uxtb	r1, r3
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	7853      	ldrb	r3, [r2, #1]
 80030de:	f361 0341 	bfi	r3, r1, #1, #1
 80030e2:	7053      	strb	r3, [r2, #1]
  val->asf_on = i3c_cfg.asf_on;
 80030e4:	7a3b      	ldrb	r3, [r7, #8]
 80030e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80030ea:	b2d9      	uxtb	r1, r3
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	7853      	ldrb	r3, [r2, #1]
 80030f0:	f361 0300 	bfi	r3, r1, #0, #1
 80030f4:	7053      	strb	r3, [r2, #1]

  switch (val->bus_act_sel)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d00e      	beq.n	800311c <lis2duxs12_i3c_configure_get+0x64>
 80030fe:	2b02      	cmp	r3, #2
 8003100:	dc10      	bgt.n	8003124 <lis2duxs12_i3c_configure_get+0x6c>
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <lis2duxs12_i3c_configure_get+0x54>
 8003106:	2b01      	cmp	r3, #1
 8003108:	d004      	beq.n	8003114 <lis2duxs12_i3c_configure_get+0x5c>
 800310a:	e00b      	b.n	8003124 <lis2duxs12_i3c_configure_get+0x6c>
  {
    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
      break;
 8003112:	e00b      	b.n	800312c <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US;
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]
      break;
 800311a:	e007      	b.n	800312c <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2202      	movs	r2, #2
 8003120:	701a      	strb	r2, [r3, #0]
      break;
 8003122:	e003      	b.n	800312c <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS:
    default:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2203      	movs	r2, #3
 8003128:	701a      	strb	r2, [r3, #0]
      break;
 800312a:	bf00      	nop
  }

  return ret;
 800312c:	68fb      	ldr	r3, [r7, #12]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <lis2duxs12_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, STRED_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mem_bank_set(const stmdev_ctx_t *ctx, lis2duxs12_mem_bank_t val)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003142:	f107 0208 	add.w	r2, r7, #8
 8003146:	2301      	movs	r3, #1
 8003148:	213f      	movs	r1, #63	@ 0x3f
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff faea 	bl	8002724 <lis2duxs12_read_reg>
 8003150:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10f      	bne.n	8003178 <lis2duxs12_mem_bank_set+0x42>
  {
    func_cfg_access.emb_func_reg_access = ((uint8_t)val & 0x1U);
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	b2da      	uxtb	r2, r3
 8003160:	7a3b      	ldrb	r3, [r7, #8]
 8003162:	f362 13c7 	bfi	r3, r2, #7, #1
 8003166:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8003168:	f107 0208 	add.w	r2, r7, #8
 800316c:	2301      	movs	r3, #1
 800316e:	213f      	movs	r1, #63	@ 0x3f
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff faf4 	bl	800275e <lis2duxs12_write_reg>
 8003176:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003178:	68fb      	ldr	r3, [r7, #12]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <lis2duxs12_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_fifo_mode_set(const stmdev_ctx_t *ctx, lis2duxs12_fifo_mode_t val)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b08a      	sub	sp, #40	@ 0x28
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	1d3b      	adds	r3, r7, #4
 800318c:	e883 0006 	stmia.w	r3, {r1, r2}
  lis2duxs12_fifo_ctrl_t fifo_ctrl;
  lis2duxs12_fifo_wtm_t fifo_wtm;
  lis2duxs12_fifo_batch_dec_t fifo_batch;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003190:	f107 0220 	add.w	r2, r7, #32
 8003194:	2301      	movs	r3, #1
 8003196:	2113      	movs	r1, #19
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff fac3 	bl	8002724 <lis2duxs12_read_reg>
 800319e:	6278      	str	r0, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 80031a0:	f107 021c 	add.w	r2, r7, #28
 80031a4:	2301      	movs	r3, #1
 80031a6:	2115      	movs	r1, #21
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f7ff fabb 	bl	8002724 <lis2duxs12_read_reg>
 80031ae:	4602      	mov	r2, r0
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	4413      	add	r3, r2
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 80031b6:	f107 0214 	add.w	r2, r7, #20
 80031ba:	2301      	movs	r3, #1
 80031bc:	2147      	movs	r1, #71	@ 0x47
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7ff fab0 	bl	8002724 <lis2duxs12_read_reg>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	4413      	add	r3, r2
 80031ca:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 80031cc:	f107 0218 	add.w	r2, r7, #24
 80031d0:	2301      	movs	r3, #1
 80031d2:	2116      	movs	r1, #22
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f7ff faa5 	bl	8002724 <lis2duxs12_read_reg>
 80031da:	4602      	mov	r2, r0
 80031dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031de:	4413      	add	r3, r2
 80031e0:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ret == 0)
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f040 808a 	bne.w	80032fe <lis2duxs12_fifo_mode_set+0x17c>
  {
    /* set FIFO mode */
    if (val.operation != LIS2DUXS12_FIFO_OFF)
 80031ea:	793b      	ldrb	r3, [r7, #4]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d00e      	beq.n	800320e <lis2duxs12_fifo_mode_set+0x8c>
    {
      ctrl4.fifo_en = 1;
 80031f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031f4:	f043 0308 	orr.w	r3, r3, #8
 80031f8:	f887 3020 	strb.w	r3, [r7, #32]
      fifo_ctrl.fifo_mode = ((uint8_t)val.operation & 0x7U);
 80031fc:	793b      	ldrb	r3, [r7, #4]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	b2da      	uxtb	r2, r3
 8003204:	7f3b      	ldrb	r3, [r7, #28]
 8003206:	f362 0302 	bfi	r3, r2, #0, #3
 800320a:	773b      	strb	r3, [r7, #28]
 800320c:	e005      	b.n	800321a <lis2duxs12_fifo_mode_set+0x98>
    }
    else
    {
      ctrl4.fifo_en = 0;
 800320e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003212:	f023 0308 	bic.w	r3, r3, #8
 8003216:	f887 3020 	strb.w	r3, [r7, #32]
    }

    /* set fifo depth (1X/2X) */
    fifo_ctrl.fifo_depth = (uint8_t)val.store;
 800321a:	797b      	ldrb	r3, [r7, #5]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	b2da      	uxtb	r2, r3
 8003222:	7f3b      	ldrb	r3, [r7, #28]
 8003224:	f362 1386 	bfi	r3, r2, #6, #1
 8003228:	773b      	strb	r3, [r7, #28]

    /* Set xl_only_fifo */
    fifo_wtm.xl_only_fifo = val.xl_only;
 800322a:	79bb      	ldrb	r3, [r7, #6]
 800322c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003230:	b2da      	uxtb	r2, r3
 8003232:	7e3b      	ldrb	r3, [r7, #24]
 8003234:	f362 13c7 	bfi	r3, r2, #7, #1
 8003238:	763b      	strb	r3, [r7, #24]

    /* set batching info */
    if (val.batch.dec_ts != LIS2DUXS12_DEC_TS_OFF)
 800323a:	7a3b      	ldrb	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00f      	beq.n	8003260 <lis2duxs12_fifo_mode_set+0xde>
    {
      fifo_batch.dec_ts_batch = (uint8_t)val.batch.dec_ts;
 8003240:	7a3b      	ldrb	r3, [r7, #8]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	b2da      	uxtb	r2, r3
 8003248:	7d3b      	ldrb	r3, [r7, #20]
 800324a:	f362 03c4 	bfi	r3, r2, #3, #2
 800324e:	753b      	strb	r3, [r7, #20]
      fifo_batch.bdr_xl = (uint8_t)val.batch.bdr_xl;
 8003250:	7a7b      	ldrb	r3, [r7, #9]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	b2da      	uxtb	r2, r3
 8003258:	7d3b      	ldrb	r3, [r7, #20]
 800325a:	f362 0302 	bfi	r3, r2, #0, #3
 800325e:	753b      	strb	r3, [r7, #20]
    }

    fifo_ctrl.cfg_chg_en = val.cfg_change_in_fifo;
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003266:	b2da      	uxtb	r2, r3
 8003268:	7f3b      	ldrb	r3, [r7, #28]
 800326a:	f362 13c7 	bfi	r3, r2, #7, #1
 800326e:	773b      	strb	r3, [r7, #28]

    /* set watermark */
    if (val.watermark > 0U)
 8003270:	79bb      	ldrb	r3, [r7, #6]
 8003272:	f023 0301 	bic.w	r3, r3, #1
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d014      	beq.n	80032a6 <lis2duxs12_fifo_mode_set+0x124>
    {
      fifo_ctrl.stop_on_fth = (val.fifo_event == LIS2DUXS12_FIFO_EV_WTM) ? 1 : 0;
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2da      	uxtb	r2, r3
 800328e:	7f3b      	ldrb	r3, [r7, #28]
 8003290:	f362 03c3 	bfi	r3, r2, #3, #1
 8003294:	773b      	strb	r3, [r7, #28]
      fifo_wtm.fth = val.watermark;
 8003296:	79bb      	ldrb	r3, [r7, #6]
 8003298:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800329c:	b2da      	uxtb	r2, r3
 800329e:	7e3b      	ldrb	r3, [r7, #24]
 80032a0:	f362 0306 	bfi	r3, r2, #0, #7
 80032a4:	763b      	strb	r3, [r7, #24]
    }

    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 80032a6:	f107 0214 	add.w	r2, r7, #20
 80032aa:	2301      	movs	r3, #1
 80032ac:	2147      	movs	r1, #71	@ 0x47
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f7ff fa55 	bl	800275e <lis2duxs12_write_reg>
 80032b4:	4602      	mov	r2, r0
 80032b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b8:	4413      	add	r3, r2
 80032ba:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 80032bc:	f107 0218 	add.w	r2, r7, #24
 80032c0:	2301      	movs	r3, #1
 80032c2:	2116      	movs	r1, #22
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f7ff fa4a 	bl	800275e <lis2duxs12_write_reg>
 80032ca:	4602      	mov	r2, r0
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	4413      	add	r3, r2
 80032d0:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 80032d2:	f107 021c 	add.w	r2, r7, #28
 80032d6:	2301      	movs	r3, #1
 80032d8:	2115      	movs	r1, #21
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f7ff fa3f 	bl	800275e <lis2duxs12_write_reg>
 80032e0:	4602      	mov	r2, r0
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e4:	4413      	add	r3, r2
 80032e6:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 80032e8:	f107 0220 	add.w	r2, r7, #32
 80032ec:	2301      	movs	r3, #1
 80032ee:	2113      	movs	r1, #19
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f7ff fa34 	bl	800275e <lis2duxs12_write_reg>
 80032f6:	4602      	mov	r2, r0
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fa:	4413      	add	r3, r2
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  return ret;
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003300:	4618      	mov	r0, r3
 8003302:	3728      	adds	r7, #40	@ 0x28
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d103      	bne.n	8003324 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 800331c:	f04f 33ff 	mov.w	r3, #4294967295
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e067      	b.n	80033f4 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	7b1a      	ldrb	r2, [r3, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	699a      	ldr	r2, [r3, #24]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a28      	ldr	r2, [pc, #160]	@ (8003400 <LIS2MDL_RegisterBusIO+0xf8>)
 8003360:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a27      	ldr	r2, [pc, #156]	@ (8003404 <LIS2MDL_RegisterBusIO+0xfc>)
 8003366:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d103      	bne.n	8003386 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 800337e:	f04f 33ff 	mov.w	r3, #4294967295
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	e036      	b.n	80033f4 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4798      	blx	r3
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8003392:	f04f 33ff 	mov.w	r3, #4294967295
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	e02c      	b.n	80033f4 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d028      	beq.n	80033f4 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d123      	bne.n	80033f4 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d10d      	bne.n	80033d0 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80033b4:	2334      	movs	r3, #52	@ 0x34
 80033b6:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80033b8:	7afb      	ldrb	r3, [r7, #11]
 80033ba:	461a      	mov	r2, r3
 80033bc:	2162      	movs	r1, #98	@ 0x62
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fb1b 	bl	80039fa <LIS2MDL_Write_Reg>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d014      	beq.n	80033f4 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80033ca:	f04f 33ff 	mov.w	r3, #4294967295
 80033ce:	e012      	b.n	80033f6 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d101      	bne.n	80033dc <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	e00c      	b.n	80033f6 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3320      	adds	r3, #32
 80033e0:	2101      	movs	r1, #1
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 ff79 	bl	80042da <lis2mdl_i2c_interface_set>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 80033ee:	f04f 33ff 	mov.w	r3, #4294967295
 80033f2:	e000      	b.n	80033f6 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 80033f4:	68fb      	ldr	r3, [r7, #12]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	08003a51 	.word	0x08003a51
 8003404:	08003ad3 	.word	0x08003ad3

08003408 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d144      	bne.n	80034a2 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003418:	f107 0208 	add.w	r2, r7, #8
 800341c:	2301      	movs	r3, #1
 800341e:	2162      	movs	r1, #98	@ 0x62
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fb97 	bl	8003b54 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 800342c:	f04f 33ff 	mov.w	r3, #4294967295
 8003430:	e06c      	b.n	800350c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003432:	f107 020c 	add.w	r2, r7, #12
 8003436:	2301      	movs	r3, #1
 8003438:	2160      	movs	r1, #96	@ 0x60
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fb8a 	bl	8003b54 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8003446:	f04f 33ff 	mov.w	r3, #4294967295
 800344a:	e05f      	b.n	800350c <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 800344c:	7a3b      	ldrb	r3, [r7, #8]
 800344e:	f043 0310 	orr.w	r3, r3, #16
 8003452:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8003454:	7a3b      	ldrb	r3, [r7, #8]
 8003456:	f023 0302 	bic.w	r3, r3, #2
 800345a:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 800345c:	7b3b      	ldrb	r3, [r7, #12]
 800345e:	2202      	movs	r2, #2
 8003460:	f362 0301 	bfi	r3, r2, #0, #2
 8003464:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8003466:	7b3b      	ldrb	r3, [r7, #12]
 8003468:	f043 030c 	orr.w	r3, r3, #12
 800346c:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800346e:	f107 0208 	add.w	r2, r7, #8
 8003472:	2301      	movs	r3, #1
 8003474:	2162      	movs	r1, #98	@ 0x62
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fcab 	bl	8003dd2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8003482:	f04f 33ff 	mov.w	r3, #4294967295
 8003486:	e041      	b.n	800350c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003488:	f107 020c 	add.w	r2, r7, #12
 800348c:	2301      	movs	r3, #1
 800348e:	2160      	movs	r1, #96	@ 0x60
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fc9e 	bl	8003dd2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d032      	beq.n	8003502 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 800349c:	f04f 33ff 	mov.w	r3, #4294967295
 80034a0:	e034      	b.n	800350c <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3320      	adds	r3, #32
 80034a6:	2101      	movs	r1, #1
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fe71 	bl	8004190 <lis2mdl_block_data_update_set>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80034b4:	f04f 33ff 	mov.w	r3, #4294967295
 80034b8:	e028      	b.n	800350c <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3320      	adds	r3, #32
 80034be:	2102      	movs	r1, #2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fde0 	bl	8004086 <lis2mdl_operating_mode_set>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 80034cc:	f04f 33ff 	mov.w	r3, #4294967295
 80034d0:	e01c      	b.n	800350c <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3320      	adds	r3, #32
 80034d6:	2103      	movs	r1, #3
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fdfa 	bl	80040d2 <lis2mdl_data_rate_set>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 80034e4:	f04f 33ff 	mov.w	r3, #4294967295
 80034e8:	e010      	b.n	800350c <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3320      	adds	r3, #32
 80034ee:	2100      	movs	r1, #0
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fecc 	bl	800428e <lis2mdl_self_test_set>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80034fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003500:	e004      	b.n	800350c <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f8a5 	bl	800366c <LIS2MDL_MAG_Disable>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8003528:	f04f 33ff 	mov.w	r3, #4294967295
 800352c:	e004      	b.n	8003538 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b03      	cmp	r3, #3
 8003550:	d10b      	bne.n	800356a <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8003552:	2301      	movs	r3, #1
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	214f      	movs	r1, #79	@ 0x4f
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fafb 	bl	8003b54 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00e      	beq.n	8003582 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8003564:	f04f 33ff 	mov.w	r3, #4294967295
 8003568:	e00c      	b.n	8003584 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	3320      	adds	r3, #32
 800356e:	6839      	ldr	r1, [r7, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f000 fe7b 	bl	800426c <lis2mdl_device_id_get>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 800357c:	f04f 33ff 	mov.w	r3, #4294967295
 8003580:	e000      	b.n	8003584 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2200      	movs	r2, #0
 80035a0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2201      	movs	r2, #1
 80035a6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2200      	movs	r2, #0
 80035ac:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2200      	movs	r2, #0
 80035b2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	2200      	movs	r2, #0
 80035b8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2232      	movs	r2, #50	@ 0x32
 80035be:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	4a04      	ldr	r2, [pc, #16]	@ (80035e4 <LIS2MDL_GetCapabilities+0x58>)
 80035d4:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	42c80000 	.word	0x42c80000

080035e8 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	e032      	b.n	8003664 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b03      	cmp	r3, #3
 8003604:	d11d      	bne.n	8003642 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003606:	f107 020c 	add.w	r2, r7, #12
 800360a:	2301      	movs	r3, #1
 800360c:	2160      	movs	r1, #96	@ 0x60
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 faa0 	bl	8003b54 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800361a:	f04f 33ff 	mov.w	r3, #4294967295
 800361e:	e021      	b.n	8003664 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8003620:	7b3b      	ldrb	r3, [r7, #12]
 8003622:	f023 0303 	bic.w	r3, r3, #3
 8003626:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003628:	f107 020c 	add.w	r2, r7, #12
 800362c:	2301      	movs	r3, #1
 800362e:	2160      	movs	r1, #96	@ 0x60
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 fbce 	bl	8003dd2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00e      	beq.n	800365a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 800363c:	f04f 33ff 	mov.w	r3, #4294967295
 8003640:	e010      	b.n	8003664 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3320      	adds	r3, #32
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fd1c 	bl	8004086 <lis2mdl_operating_mode_set>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8003654:	f04f 33ff 	mov.w	r3, #4294967295
 8003658:	e004      	b.n	8003664 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	e033      	b.n	80036ea <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d11e      	bne.n	80036c8 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800368a:	f107 020c 	add.w	r2, r7, #12
 800368e:	2301      	movs	r3, #1
 8003690:	2160      	movs	r1, #96	@ 0x60
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fa5e 	bl	8003b54 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 800369e:	f04f 33ff 	mov.w	r3, #4294967295
 80036a2:	e022      	b.n	80036ea <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80036a4:	7b3b      	ldrb	r3, [r7, #12]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f362 0301 	bfi	r3, r2, #0, #2
 80036ac:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80036ae:	f107 020c 	add.w	r2, r7, #12
 80036b2:	2301      	movs	r3, #1
 80036b4:	2160      	movs	r1, #96	@ 0x60
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fb8b 	bl	8003dd2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00e      	beq.n	80036e0 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80036c2:	f04f 33ff 	mov.w	r3, #4294967295
 80036c6:	e010      	b.n	80036ea <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3320      	adds	r3, #32
 80036cc:	2102      	movs	r1, #2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 fcd9 	bl	8004086 <lis2mdl_operating_mode_set>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80036da:	f04f 33ff 	mov.w	r3, #4294967295
 80036de:	e004      	b.n	80036ea <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float_t *Sensitivity)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8003702:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
	...

08003714 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float_t *Odr)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3320      	adds	r3, #32
 8003726:	f107 020b 	add.w	r2, r7, #11
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f000 fcf7 	bl	8004120 <lis2mdl_data_rate_get>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d002      	beq.n	800373e <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8003738:	f04f 33ff 	mov.w	r3, #4294967295
 800373c:	e023      	b.n	8003786 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800373e:	7afb      	ldrb	r3, [r7, #11]
 8003740:	2b03      	cmp	r3, #3
 8003742:	d81b      	bhi.n	800377c <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8003744:	a201      	add	r2, pc, #4	@ (adr r2, 800374c <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	0800375d 	.word	0x0800375d
 8003750:	08003765 	.word	0x08003765
 8003754:	0800376d 	.word	0x0800376d
 8003758:	08003775 	.word	0x08003775
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4a0c      	ldr	r2, [pc, #48]	@ (8003790 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8003760:	601a      	str	r2, [r3, #0]
      break;
 8003762:	e00f      	b.n	8003784 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	4a0b      	ldr	r2, [pc, #44]	@ (8003794 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8003768:	601a      	str	r2, [r3, #0]
      break;
 800376a:	e00b      	b.n	8003784 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	4a0a      	ldr	r2, [pc, #40]	@ (8003798 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 8003770:	601a      	str	r2, [r3, #0]
      break;
 8003772:	e007      	b.n	8003784 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	4a09      	ldr	r2, [pc, #36]	@ (800379c <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 8003778:	601a      	str	r2, [r3, #0]
      break;
 800377a:	e003      	b.n	8003784 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 800377c:	f04f 33ff 	mov.w	r3, #4294967295
 8003780:	60fb      	str	r3, [r7, #12]
      break;
 8003782:	bf00      	nop
  }

  return ret;
 8003784:	68fb      	ldr	r3, [r7, #12]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	41200000 	.word	0x41200000
 8003794:	41a00000 	.word	0x41a00000
 8003798:	42480000 	.word	0x42480000
 800379c:	42c80000 	.word	0x42c80000

080037a0 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float_t Odr)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80037ac:	edd7 7a00 	vldr	s15, [r7]
 80037b0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80037b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037bc:	d801      	bhi.n	80037c2 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 80037be:	2300      	movs	r3, #0
 80037c0:	e016      	b.n	80037f0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80037c2:	edd7 7a00 	vldr	s15, [r7]
 80037c6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80037ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d2:	d801      	bhi.n	80037d8 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e00b      	b.n	80037f0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80037d8:	edd7 7a00 	vldr	s15, [r7]
 80037dc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003864 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 80037e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e8:	d801      	bhi.n	80037ee <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e000      	b.n	80037f0 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80037ee:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 80037f0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d121      	bne.n	800383e <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80037fa:	f107 020c 	add.w	r2, r7, #12
 80037fe:	2301      	movs	r3, #1
 8003800:	2160      	movs	r1, #96	@ 0x60
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f9a6 	bl	8003b54 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 800380e:	f04f 33ff 	mov.w	r3, #4294967295
 8003812:	e022      	b.n	800385a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	b2da      	uxtb	r2, r3
 800381c:	7b3b      	ldrb	r3, [r7, #12]
 800381e:	f362 0383 	bfi	r3, r2, #2, #2
 8003822:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003824:	f107 020c 	add.w	r2, r7, #12
 8003828:	2301      	movs	r3, #1
 800382a:	2160      	movs	r1, #96	@ 0x60
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fad0 	bl	8003dd2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00f      	beq.n	8003858 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003838:	f04f 33ff 	mov.w	r3, #4294967295
 800383c:	e00d      	b.n	800385a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3320      	adds	r3, #32
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fc43 	bl	80040d2 <lis2mdl_data_rate_set>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8003852:	f04f 33ff 	mov.w	r3, #4294967295
 8003856:	e000      	b.n	800385a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	42480000 	.word	0x42480000

08003868 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *FullScale = 50;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2232      	movs	r2, #50	@ 0x32
 8003876:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	6039      	str	r1, [r7, #0]
  (void)pObj;
  (void)FullScale;

  return LIS2MDL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3320      	adds	r3, #32
 80038ac:	f107 0208 	add.w	r2, r7, #8
 80038b0:	4611      	mov	r1, r2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fc92 	bl	80041dc <lis2mdl_magnetic_raw_get>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80038be:	f04f 33ff 	mov.w	r3, #4294967295
 80038c2:	e00c      	b.n	80038de <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80038c4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80038cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80038d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b088      	sub	sp, #32
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d134      	bne.n	8003968 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 80038fe:	f107 0218 	add.w	r2, r7, #24
 8003902:	2306      	movs	r3, #6
 8003904:	2168      	movs	r1, #104	@ 0x68
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f924 	bl	8003b54 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <LIS2MDL_MAG_GetAxes+0x32>
    {
      return LIS2MDL_ERROR;
 8003912:	f04f 33ff 	mov.w	r3, #4294967295
 8003916:	e06c      	b.n	80039f2 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8003918:	7e7b      	ldrb	r3, [r7, #25]
 800391a:	b21b      	sxth	r3, r3
 800391c:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 800391e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003922:	b29b      	uxth	r3, r3
 8003924:	021b      	lsls	r3, r3, #8
 8003926:	b29b      	uxth	r3, r3
 8003928:	7e3a      	ldrb	r2, [r7, #24]
 800392a:	4413      	add	r3, r2
 800392c:	b29b      	uxth	r3, r3
 800392e:	b21b      	sxth	r3, r3
 8003930:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8003932:	7efb      	ldrb	r3, [r7, #27]
 8003934:	b21b      	sxth	r3, r3
 8003936:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8003938:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800393c:	b29b      	uxth	r3, r3
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	b29b      	uxth	r3, r3
 8003942:	7eba      	ldrb	r2, [r7, #26]
 8003944:	4413      	add	r3, r2
 8003946:	b29b      	uxth	r3, r3
 8003948:	b21b      	sxth	r3, r3
 800394a:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 800394c:	7f7b      	ldrb	r3, [r7, #29]
 800394e:	b21b      	sxth	r3, r3
 8003950:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8003952:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003956:	b29b      	uxth	r3, r3
 8003958:	021b      	lsls	r3, r3, #8
 800395a:	b29b      	uxth	r3, r3
 800395c:	7f3a      	ldrb	r2, [r7, #28]
 800395e:	4413      	add	r3, r2
 8003960:	b29b      	uxth	r3, r3
 8003962:	b21b      	sxth	r3, r3
 8003964:	82bb      	strh	r3, [r7, #20]
 8003966:	e00d      	b.n	8003984 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3320      	adds	r3, #32
 800396c:	f107 0210 	add.w	r2, r7, #16
 8003970:	4611      	mov	r1, r2
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fc32 	bl	80041dc <lis2mdl_magnetic_raw_get>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 800397e:	f04f 33ff 	mov.w	r3, #4294967295
 8003982:	e036      	b.n	80039f2 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8003984:	f107 030c 	add.w	r3, r7, #12
 8003988:	4619      	mov	r1, r3
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff feb1 	bl	80036f2 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8003990:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003994:	ee07 3a90 	vmov	s15, r3
 8003998:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800399c:	edd7 7a03 	vldr	s15, [r7, #12]
 80039a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039a8:	ee17 2a90 	vmov	r2, s15
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80039b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80039b4:	ee07 3a90 	vmov	s15, r3
 80039b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80039c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039c8:	ee17 2a90 	vmov	r2, s15
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80039d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80039d4:	ee07 3a90 	vmov	s15, r3
 80039d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80039e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039e8:	ee17 2a90 	vmov	r2, s15
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	460b      	mov	r3, r1
 8003a04:	70fb      	strb	r3, [r7, #3]
 8003a06:	4613      	mov	r3, r2
 8003a08:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d10b      	bne.n	8003a2a <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8003a12:	1cba      	adds	r2, r7, #2
 8003a14:	78f9      	ldrb	r1, [r7, #3]
 8003a16:	2301      	movs	r3, #1
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f9da 	bl	8003dd2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d010      	beq.n	8003a46 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003a24:	f04f 33ff 	mov.w	r3, #4294967295
 8003a28:	e00e      	b.n	8003a48 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f103 0020 	add.w	r0, r3, #32
 8003a30:	1cba      	adds	r2, r7, #2
 8003a32:	78f9      	ldrb	r1, [r7, #3]
 8003a34:	2301      	movs	r3, #1
 8003a36:	f000 fb08 	bl	800404a <lis2mdl_write_reg>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8003a40:	f04f 33ff 	mov.w	r3, #4294967295
 8003a44:	e000      	b.n	8003a48 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	72fb      	strb	r3, [r7, #11]
 8003a60:	4613      	mov	r3, r2
 8003a62:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10e      	bne.n	8003a8e <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	695c      	ldr	r4, [r3, #20]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	7b1b      	ldrb	r3, [r3, #12]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	7afb      	ldrb	r3, [r7, #11]
 8003a7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	4619      	mov	r1, r3
 8003a84:	893b      	ldrh	r3, [r7, #8]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	47a0      	blx	r4
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	e01d      	b.n	8003aca <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d10b      	bne.n	8003aae <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	695c      	ldr	r4, [r3, #20]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	7b1b      	ldrb	r3, [r3, #12]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	7afb      	ldrb	r3, [r7, #11]
 8003aa2:	b299      	uxth	r1, r3
 8003aa4:	893b      	ldrh	r3, [r7, #8]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	47a0      	blx	r4
 8003aaa:	4603      	mov	r3, r0
 8003aac:	e00d      	b.n	8003aca <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	695c      	ldr	r4, [r3, #20]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	7b1b      	ldrb	r3, [r3, #12]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	7afb      	ldrb	r3, [r7, #11]
 8003aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	893b      	ldrh	r3, [r7, #8]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	47a0      	blx	r4
 8003ac8:	4603      	mov	r3, r0
  }
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	371c      	adds	r7, #28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd90      	pop	{r4, r7, pc}

08003ad2 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003ad2:	b590      	push	{r4, r7, lr}
 8003ad4:	b087      	sub	sp, #28
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	461a      	mov	r2, r3
 8003ade:	460b      	mov	r3, r1
 8003ae0:	72fb      	strb	r3, [r7, #11]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10e      	bne.n	8003b10 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	691c      	ldr	r4, [r3, #16]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	7b1b      	ldrb	r3, [r3, #12]
 8003afa:	4618      	mov	r0, r3
 8003afc:	7afb      	ldrb	r3, [r7, #11]
 8003afe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	4619      	mov	r1, r3
 8003b06:	893b      	ldrh	r3, [r7, #8]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	47a0      	blx	r4
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	e01d      	b.n	8003b4c <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d10b      	bne.n	8003b30 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	691c      	ldr	r4, [r3, #16]
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	7b1b      	ldrb	r3, [r3, #12]
 8003b20:	4618      	mov	r0, r3
 8003b22:	7afb      	ldrb	r3, [r7, #11]
 8003b24:	b299      	uxth	r1, r3
 8003b26:	893b      	ldrh	r3, [r7, #8]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	47a0      	blx	r4
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	e00d      	b.n	8003b4c <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	691c      	ldr	r4, [r3, #16]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	7b1b      	ldrb	r3, [r3, #12]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	7afb      	ldrb	r3, [r7, #11]
 8003b3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	4619      	mov	r1, r3
 8003b44:	893b      	ldrh	r3, [r7, #8]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	47a0      	blx	r4
 8003b4a:	4603      	mov	r3, r0
  }
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd90      	pop	{r4, r7, pc}

08003b54 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08c      	sub	sp, #48	@ 0x30
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	607a      	str	r2, [r7, #4]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	460b      	mov	r3, r1
 8003b62:	72fb      	strb	r3, [r7, #11]
 8003b64:	4613      	mov	r3, r2
 8003b66:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003b6e:	2340      	movs	r3, #64	@ 0x40
 8003b70:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8003b7a:	233d      	movs	r3, #61	@ 0x3d
 8003b7c:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003b7e:	2315      	movs	r3, #21
 8003b80:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003b84:	2316      	movs	r3, #22
 8003b86:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8003b8a:	2317      	movs	r3, #23
 8003b8c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 8003b90:	2314      	movs	r3, #20
 8003b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003b96:	2344      	movs	r3, #68	@ 0x44
 8003b98:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8003ba0:	2339      	movs	r3, #57	@ 0x39
 8003ba2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003bac:	2329      	movs	r3, #41	@ 0x29
 8003bae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003bb2:	231e      	movs	r3, #30
 8003bb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 8003bbe:	893b      	ldrh	r3, [r7, #8]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003bc4:	2310      	movs	r3, #16
 8003bc6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003bd0:	2340      	movs	r3, #64	@ 0x40
 8003bd2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f103 0020 	add.w	r0, r3, #32
 8003bdc:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8003be0:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003be4:	2301      	movs	r3, #1
 8003be6:	f000 fa30 	bl	800404a <lis2mdl_write_reg>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8003bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf4:	e0e9      	b.n	8003dca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f103 0020 	add.w	r0, r3, #32
 8003bfc:	f107 021f 	add.w	r2, r7, #31
 8003c00:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8003c04:	2301      	movs	r3, #1
 8003c06:	f000 fa20 	bl	800404a <lis2mdl_write_reg>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8003c10:	f04f 33ff 	mov.w	r3, #4294967295
 8003c14:	e0d9      	b.n	8003dca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f103 0020 	add.w	r0, r3, #32
 8003c1c:	f107 020b 	add.w	r2, r7, #11
 8003c20:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8003c24:	2301      	movs	r3, #1
 8003c26:	f000 fa10 	bl	800404a <lis2mdl_write_reg>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d002      	beq.n	8003c36 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8003c30:	f04f 33ff 	mov.w	r3, #4294967295
 8003c34:	e0c9      	b.n	8003dca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f103 0020 	add.w	r0, r3, #32
 8003c3c:	f107 021d 	add.w	r2, r7, #29
 8003c40:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8003c44:	2301      	movs	r3, #1
 8003c46:	f000 fa00 	bl	800404a <lis2mdl_write_reg>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295
 8003c54:	e0b9      	b.n	8003dca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f103 0020 	add.w	r0, r3, #32
 8003c5c:	f107 021e 	add.w	r2, r7, #30
 8003c60:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8003c64:	2301      	movs	r3, #1
 8003c66:	f000 f9f0 	bl	800404a <lis2mdl_write_reg>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8003c70:	f04f 33ff 	mov.w	r3, #4294967295
 8003c74:	e0a9      	b.n	8003dca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f103 0020 	add.w	r0, r3, #32
 8003c7c:	f107 0220 	add.w	r2, r7, #32
 8003c80:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003c84:	2301      	movs	r3, #1
 8003c86:	f000 f9e0 	bl	800404a <lis2mdl_write_reg>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8003c90:	f04f 33ff 	mov.w	r3, #4294967295
 8003c94:	e099      	b.n	8003dca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f103 0020 	add.w	r0, r3, #32
 8003c9c:	f107 021c 	add.w	r2, r7, #28
 8003ca0:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f000 f9b2 	bl	800400e <lis2mdl_read_reg>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8003cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb4:	e089      	b.n	8003dca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003cb6:	7f3b      	ldrb	r3, [r7, #28]
 8003cb8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d102      	bne.n	8003cc6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003cc0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003cc4:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f103 0020 	add.w	r0, r3, #32
 8003ccc:	f107 021c 	add.w	r2, r7, #28
 8003cd0:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f000 f9b8 	bl	800404a <lis2mdl_write_reg>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8003ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce4:	e071      	b.n	8003dca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f103 0020 	add.w	r0, r3, #32
 8003cec:	f107 0214 	add.w	r2, r7, #20
 8003cf0:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8003cf4:	2306      	movs	r3, #6
 8003cf6:	f000 f98a 	bl	800400e <lis2mdl_read_reg>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8003d00:	f04f 33ff 	mov.w	r3, #4294967295
 8003d04:	e061      	b.n	8003dca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f103 0020 	add.w	r0, r3, #32
 8003d0c:	f107 021b 	add.w	r2, r7, #27
 8003d10:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8003d14:	2301      	movs	r3, #1
 8003d16:	f000 f97a 	bl	800400e <lis2mdl_read_reg>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8003d20:	f04f 33ff 	mov.w	r3, #4294967295
 8003d24:	e051      	b.n	8003dca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8003d26:	7efa      	ldrb	r2, [r7, #27]
 8003d28:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d1e6      	bne.n	8003d06 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f103 0020 	add.w	r0, r3, #32
 8003d3e:	f107 021b 	add.w	r2, r7, #27
 8003d42:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8003d46:	2301      	movs	r3, #1
 8003d48:	f000 f961 	bl	800400e <lis2mdl_read_reg>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295
 8003d56:	e038      	b.n	8003dca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8003d58:	7efa      	ldrb	r2, [r7, #27]
 8003d5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003d5e:	4013      	ands	r3, r2
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d1e6      	bne.n	8003d38 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f103 0020 	add.w	r0, r3, #32
 8003d70:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8003d74:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003d78:	2301      	movs	r3, #1
 8003d7a:	f000 f966 	bl	800404a <lis2mdl_write_reg>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8003d84:	f04f 33ff 	mov.w	r3, #4294967295
 8003d88:	e01f      	b.n	8003dca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f103 0020 	add.w	r0, r3, #32
 8003d90:	893b      	ldrh	r3, [r7, #8]
 8003d92:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	f000 f939 	bl	800400e <lis2mdl_read_reg>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8003da2:	f04f 33ff 	mov.w	r3, #4294967295
 8003da6:	e010      	b.n	8003dca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f103 0020 	add.w	r0, r3, #32
 8003dae:	f107 0220 	add.w	r2, r7, #32
 8003db2:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003db6:	2301      	movs	r3, #1
 8003db8:	f000 f947 	bl	800404a <lis2mdl_write_reg>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8003dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc6:	e000      	b.n	8003dca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3730      	adds	r7, #48	@ 0x30
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b08c      	sub	sp, #48	@ 0x30
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	460b      	mov	r3, r1
 8003de0:	72fb      	strb	r3, [r7, #11]
 8003de2:	4613      	mov	r3, r2
 8003de4:	813b      	strh	r3, [r7, #8]
  (void)Length;
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8003de6:	2301      	movs	r3, #1
 8003de8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8003dec:	2340      	movs	r3, #64	@ 0x40
 8003dee:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8003df8:	233c      	movs	r3, #60	@ 0x3c
 8003dfa:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8003dfc:	2315      	movs	r3, #21
 8003dfe:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8003e02:	2316      	movs	r3, #22
 8003e04:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8003e08:	2317      	movs	r3, #23
 8003e0a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8003e12:	2314      	movs	r3, #20
 8003e14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8003e18:	2344      	movs	r3, #68	@ 0x44
 8003e1a:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8003e1c:	2339      	movs	r3, #57	@ 0x39
 8003e1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 8003e22:	2380      	movs	r3, #128	@ 0x80
 8003e24:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8003e28:	2329      	movs	r3, #41	@ 0x29
 8003e2a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8003e2e:	231e      	movs	r3, #30
 8003e30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8003e3a:	2310      	movs	r3, #16
 8003e3c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8003e46:	2340      	movs	r3, #64	@ 0x40
 8003e48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8003e4c:	230e      	movs	r3, #14
 8003e4e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f103 0020 	add.w	r0, r3, #32
 8003e58:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8003e5c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003e60:	2301      	movs	r3, #1
 8003e62:	f000 f8f2 	bl	800404a <lis2mdl_write_reg>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8003e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e70:	e0c9      	b.n	8004006 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f103 0020 	add.w	r0, r3, #32
 8003e78:	f107 021f 	add.w	r2, r7, #31
 8003e7c:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8003e80:	2301      	movs	r3, #1
 8003e82:	f000 f8e2 	bl	800404a <lis2mdl_write_reg>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8003e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e90:	e0b9      	b.n	8004006 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f103 0020 	add.w	r0, r3, #32
 8003e98:	f107 020b 	add.w	r2, r7, #11
 8003e9c:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f000 f8d2 	bl	800404a <lis2mdl_write_reg>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8003eac:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb0:	e0a9      	b.n	8004006 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f103 0020 	add.w	r0, r3, #32
 8003eb8:	f107 021e 	add.w	r2, r7, #30
 8003ebc:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	f000 f8c2 	bl	800404a <lis2mdl_write_reg>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8003ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed0:	e099      	b.n	8004006 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f103 0020 	add.w	r0, r3, #32
 8003ed8:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8003edc:	2301      	movs	r3, #1
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	f000 f8b3 	bl	800404a <lis2mdl_write_reg>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8003eea:	f04f 33ff 	mov.w	r3, #4294967295
 8003eee:	e08a      	b.n	8004006 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f103 0020 	add.w	r0, r3, #32
 8003ef6:	f107 021d 	add.w	r2, r7, #29
 8003efa:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8003efe:	2301      	movs	r3, #1
 8003f00:	f000 f8a3 	bl	800404a <lis2mdl_write_reg>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0e:	e07a      	b.n	8004006 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f103 0020 	add.w	r0, r3, #32
 8003f16:	f107 0220 	add.w	r2, r7, #32
 8003f1a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8003f1e:	2301      	movs	r3, #1
 8003f20:	f000 f893 	bl	800404a <lis2mdl_write_reg>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8003f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2e:	e06a      	b.n	8004006 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f103 0020 	add.w	r0, r3, #32
 8003f36:	f107 021c 	add.w	r2, r7, #28
 8003f3a:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8003f3e:	2301      	movs	r3, #1
 8003f40:	f000 f865 	bl	800400e <lis2mdl_read_reg>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4e:	e05a      	b.n	8004006 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8003f50:	7f3b      	ldrb	r3, [r7, #28]
 8003f52:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d102      	bne.n	8003f60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8003f5a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f5e:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f103 0020 	add.w	r0, r3, #32
 8003f66:	f107 021c 	add.w	r2, r7, #28
 8003f6a:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8003f6e:	2301      	movs	r3, #1
 8003f70:	f000 f86b 	bl	800404a <lis2mdl_write_reg>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d002      	beq.n	8003f80 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8003f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f7e:	e042      	b.n	8004006 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f103 0020 	add.w	r0, r3, #32
 8003f86:	f107 0214 	add.w	r2, r7, #20
 8003f8a:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8003f8e:	2306      	movs	r3, #6
 8003f90:	f000 f83d 	bl	800400e <lis2mdl_read_reg>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8003f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9e:	e032      	b.n	8004006 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f103 0020 	add.w	r0, r3, #32
 8003fa6:	f107 021b 	add.w	r2, r7, #27
 8003faa:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f000 f82d 	bl	800400e <lis2mdl_read_reg>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8003fba:	f04f 33ff 	mov.w	r3, #4294967295
 8003fbe:	e022      	b.n	8004006 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8003fc0:	7efa      	ldrb	r2, [r7, #27]
 8003fc2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d1e6      	bne.n	8003fa0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f103 0020 	add.w	r0, r3, #32
 8003fd8:	f107 021b 	add.w	r2, r7, #27
 8003fdc:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f000 f814 	bl	800400e <lis2mdl_read_reg>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8003fec:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff0:	e009      	b.n	8004006 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8003ff2:	7efa      	ldrb	r2, [r7, #27]
 8003ff4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8004000:	429a      	cmp	r2, r3
 8004002:	d1e6      	bne.n	8003fd2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3730      	adds	r7, #48	@ 0x30
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <lis2mdl_read_reg>:
  *
  */
int32_t __weak lis2mdl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800400e:	b590      	push	{r4, r7, lr}
 8004010:	b087      	sub	sp, #28
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	461a      	mov	r2, r3
 800401a:	460b      	mov	r3, r1
 800401c:	72fb      	strb	r3, [r7, #11]
 800401e:	4613      	mov	r3, r2
 8004020:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d102      	bne.n	800402e <lis2mdl_read_reg+0x20>
  {
    return -1;
 8004028:	f04f 33ff 	mov.w	r3, #4294967295
 800402c:	e009      	b.n	8004042 <lis2mdl_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685c      	ldr	r4, [r3, #4]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	68d8      	ldr	r0, [r3, #12]
 8004036:	893b      	ldrh	r3, [r7, #8]
 8004038:	7af9      	ldrb	r1, [r7, #11]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	47a0      	blx	r4
 800403e:	6178      	str	r0, [r7, #20]

  return ret;
 8004040:	697b      	ldr	r3, [r7, #20]
}
 8004042:	4618      	mov	r0, r3
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	bd90      	pop	{r4, r7, pc}

0800404a <lis2mdl_write_reg>:
  *
  */
int32_t __weak lis2mdl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800404a:	b590      	push	{r4, r7, lr}
 800404c:	b087      	sub	sp, #28
 800404e:	af00      	add	r7, sp, #0
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	461a      	mov	r2, r3
 8004056:	460b      	mov	r3, r1
 8004058:	72fb      	strb	r3, [r7, #11]
 800405a:	4613      	mov	r3, r2
 800405c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d102      	bne.n	800406a <lis2mdl_write_reg+0x20>
  {
    return -1;
 8004064:	f04f 33ff 	mov.w	r3, #4294967295
 8004068:	e009      	b.n	800407e <lis2mdl_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681c      	ldr	r4, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	68d8      	ldr	r0, [r3, #12]
 8004072:	893b      	ldrh	r3, [r7, #8]
 8004074:	7af9      	ldrb	r1, [r7, #11]
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	47a0      	blx	r4
 800407a:	6178      	str	r0, [r7, #20]

  return ret;
 800407c:	697b      	ldr	r3, [r7, #20]
}
 800407e:	4618      	mov	r0, r3
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	bd90      	pop	{r4, r7, pc}

08004086 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(const stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004092:	f107 0208 	add.w	r2, r7, #8
 8004096:	2301      	movs	r3, #1
 8004098:	2160      	movs	r1, #96	@ 0x60
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff ffb7 	bl	800400e <lis2mdl_read_reg>
 80040a0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10f      	bne.n	80040c8 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	7a3b      	ldrb	r3, [r7, #8]
 80040b2:	f362 0301 	bfi	r3, r2, #0, #2
 80040b6:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80040b8:	f107 0208 	add.w	r2, r7, #8
 80040bc:	2301      	movs	r3, #1
 80040be:	2160      	movs	r1, #96	@ 0x60
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff ffc2 	bl	800404a <lis2mdl_write_reg>
 80040c6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80040c8:	68fb      	ldr	r3, [r7, #12]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(const stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	460b      	mov	r3, r1
 80040dc:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80040de:	f107 0208 	add.w	r2, r7, #8
 80040e2:	2301      	movs	r3, #1
 80040e4:	2160      	movs	r1, #96	@ 0x60
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff ff91 	bl	800400e <lis2mdl_read_reg>
 80040ec:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10f      	bne.n	8004114 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	7a3b      	ldrb	r3, [r7, #8]
 80040fe:	f362 0383 	bfi	r3, r2, #2, #2
 8004102:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004104:	f107 0208 	add.w	r2, r7, #8
 8004108:	2301      	movs	r3, #1
 800410a:	2160      	movs	r1, #96	@ 0x60
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff ff9c 	bl	800404a <lis2mdl_write_reg>
 8004112:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004114:	68fb      	ldr	r3, [r7, #12]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(const stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800412a:	f107 0208 	add.w	r2, r7, #8
 800412e:	2301      	movs	r3, #1
 8004130:	2160      	movs	r1, #96	@ 0x60
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff ff6b 	bl	800400e <lis2mdl_read_reg>
 8004138:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800413a:	7a3b      	ldrb	r3, [r7, #8]
 800413c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b03      	cmp	r3, #3
 8004144:	d81a      	bhi.n	800417c <lis2mdl_data_rate_get+0x5c>
 8004146:	a201      	add	r2, pc, #4	@ (adr r2, 800414c <lis2mdl_data_rate_get+0x2c>)
 8004148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414c:	0800415d 	.word	0x0800415d
 8004150:	08004165 	.word	0x08004165
 8004154:	0800416d 	.word	0x0800416d
 8004158:	08004175 	.word	0x08004175
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2200      	movs	r2, #0
 8004160:	701a      	strb	r2, [r3, #0]
      break;
 8004162:	e00f      	b.n	8004184 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2201      	movs	r2, #1
 8004168:	701a      	strb	r2, [r3, #0]
      break;
 800416a:	e00b      	b.n	8004184 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2202      	movs	r2, #2
 8004170:	701a      	strb	r2, [r3, #0]
      break;
 8004172:	e007      	b.n	8004184 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2203      	movs	r2, #3
 8004178:	701a      	strb	r2, [r3, #0]
      break;
 800417a:	e003      	b.n	8004184 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2200      	movs	r2, #0
 8004180:	701a      	strb	r2, [r3, #0]
      break;
 8004182:	bf00      	nop
  }

  return ret;
 8004184:	68fb      	ldr	r3, [r7, #12]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop

08004190 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800419c:	f107 0208 	add.w	r2, r7, #8
 80041a0:	2301      	movs	r3, #1
 80041a2:	2162      	movs	r1, #98	@ 0x62
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ff32 	bl	800400e <lis2mdl_read_reg>
 80041aa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10f      	bne.n	80041d2 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	7a3b      	ldrb	r3, [r7, #8]
 80041bc:	f362 1304 	bfi	r3, r2, #4, #1
 80041c0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80041c2:	f107 0208 	add.w	r2, r7, #8
 80041c6:	2301      	movs	r3, #1
 80041c8:	2162      	movs	r1, #98	@ 0x62
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff ff3d 	bl	800404a <lis2mdl_write_reg>
 80041d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80041d2:	68fb      	ldr	r3, [r7, #12]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 80041e6:	f107 020c 	add.w	r2, r7, #12
 80041ea:	2306      	movs	r3, #6
 80041ec:	2168      	movs	r1, #104	@ 0x68
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7ff ff0d 	bl	800400e <lis2mdl_read_reg>
 80041f4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80041f6:	7b7b      	ldrb	r3, [r7, #13]
 80041f8:	b21a      	sxth	r2, r3
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004204:	b29b      	uxth	r3, r3
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	b29b      	uxth	r3, r3
 800420a:	7b3a      	ldrb	r2, [r7, #12]
 800420c:	4413      	add	r3, r2
 800420e:	b29b      	uxth	r3, r3
 8004210:	b21a      	sxth	r2, r3
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004216:	7bfa      	ldrb	r2, [r7, #15]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	3302      	adds	r3, #2
 800421c:	b212      	sxth	r2, r2
 800421e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	3302      	adds	r3, #2
 8004224:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004228:	b29b      	uxth	r3, r3
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	b29b      	uxth	r3, r3
 800422e:	7bba      	ldrb	r2, [r7, #14]
 8004230:	4413      	add	r3, r2
 8004232:	b29a      	uxth	r2, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	3302      	adds	r3, #2
 8004238:	b212      	sxth	r2, r2
 800423a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800423c:	7c7a      	ldrb	r2, [r7, #17]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	3304      	adds	r3, #4
 8004242:	b212      	sxth	r2, r2
 8004244:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	3304      	adds	r3, #4
 800424a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800424e:	b29b      	uxth	r3, r3
 8004250:	021b      	lsls	r3, r3, #8
 8004252:	b29b      	uxth	r3, r3
 8004254:	7c3a      	ldrb	r2, [r7, #16]
 8004256:	4413      	add	r3, r2
 8004258:	b29a      	uxth	r2, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	3304      	adds	r3, #4
 800425e:	b212      	sxth	r2, r2
 8004260:	801a      	strh	r2, [r3, #0]

  return ret;
 8004262:	697b      	ldr	r3, [r7, #20]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8004276:	2301      	movs	r3, #1
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	214f      	movs	r1, #79	@ 0x4f
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7ff fec6 	bl	800400e <lis2mdl_read_reg>
 8004282:	60f8      	str	r0, [r7, #12]

  return ret;
 8004284:	68fb      	ldr	r3, [r7, #12]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	460b      	mov	r3, r1
 8004298:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800429a:	f107 0208 	add.w	r2, r7, #8
 800429e:	2301      	movs	r3, #1
 80042a0:	2162      	movs	r1, #98	@ 0x62
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7ff feb3 	bl	800400e <lis2mdl_read_reg>
 80042a8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10f      	bne.n	80042d0 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	7a3b      	ldrb	r3, [r7, #8]
 80042ba:	f362 0341 	bfi	r3, r2, #1, #1
 80042be:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80042c0:	f107 0208 	add.w	r2, r7, #8
 80042c4:	2301      	movs	r3, #1
 80042c6:	2162      	movs	r1, #98	@ 0x62
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7ff febe 	bl	800404a <lis2mdl_write_reg>
 80042ce:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80042d0:	68fb      	ldr	r3, [r7, #12]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(const stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b084      	sub	sp, #16
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
 80042e2:	460b      	mov	r3, r1
 80042e4:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80042e6:	f107 0208 	add.w	r2, r7, #8
 80042ea:	2301      	movs	r3, #1
 80042ec:	2162      	movs	r1, #98	@ 0x62
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff fe8d 	bl	800400e <lis2mdl_read_reg>
 80042f4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10f      	bne.n	800431c <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	b2da      	uxtb	r2, r3
 8004304:	7a3b      	ldrb	r3, [r7, #8]
 8004306:	f362 1345 	bfi	r3, r2, #5, #1
 800430a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800430c:	f107 0208 	add.w	r2, r7, #8
 8004310:	2301      	movs	r3, #1
 8004312:	2162      	movs	r1, #98	@ 0x62
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff fe98 	bl	800404a <lis2mdl_write_reg>
 800431a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800431c:	68fb      	ldr	r3, [r7, #12]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
	...

08004328 <LPS22DF_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_RegisterBusIO(LPS22DF_Object_t *pObj, LPS22DF_IO_t *pIO)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d103      	bne.n	8004344 <LPS22DF_RegisterBusIO+0x1c>
  {
    ret = LPS22DF_ERROR;
 800433c:	f04f 33ff 	mov.w	r3, #4294967295
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	e051      	b.n	80043e8 <LPS22DF_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	7b1a      	ldrb	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	695a      	ldr	r2, [r3, #20]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	699a      	ldr	r2, [r3, #24]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a1d      	ldr	r2, [pc, #116]	@ (80043f4 <LPS22DF_RegisterBusIO+0xcc>)
 8004380:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a1c      	ldr	r2, [pc, #112]	@ (80043f8 <LPS22DF_RegisterBusIO+0xd0>)
 8004386:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	69da      	ldr	r2, [r3, #28]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d103      	bne.n	80043a6 <LPS22DF_RegisterBusIO+0x7e>
    {
      ret = LPS22DF_ERROR;
 800439e:	f04f 33ff 	mov.w	r3, #4294967295
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	e020      	b.n	80043e8 <LPS22DF_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22DF_OK)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4798      	blx	r3
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <LPS22DF_RegisterBusIO+0x92>
    {
      ret = LPS22DF_ERROR;
 80043b2:	f04f 33ff 	mov.w	r3, #4294967295
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	e016      	b.n	80043e8 <LPS22DF_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d112      	bne.n	80043e8 <LPS22DF_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10d      	bne.n	80043e8 <LPS22DF_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x20;
 80043cc:	2320      	movs	r3, #32
 80043ce:	72fb      	strb	r3, [r7, #11]

          if (LPS22DF_Write_Reg(pObj, LPS22DF_IF_CTRL, data) != LPS22DF_OK)
 80043d0:	7afb      	ldrb	r3, [r7, #11]
 80043d2:	461a      	mov	r2, r3
 80043d4:	210e      	movs	r1, #14
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f9f3 	bl	80047c2 <LPS22DF_Write_Reg>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <LPS22DF_RegisterBusIO+0xc0>
          {
            ret = LPS22DF_ERROR;
 80043e2:	f04f 33ff 	mov.w	r3, #4294967295
 80043e6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80043e8:	68fb      	ldr	r3, [r7, #12]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	08004b65 	.word	0x08004b65
 80043f8:	08004b9b 	.word	0x08004b9b

080043fc <LPS22DF_Init>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Init(LPS22DF_Object_t *pObj)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800440a:	2b00      	cmp	r3, #0
 800440c:	d108      	bne.n	8004420 <LPS22DF_Init+0x24>
  {
    if (LPS22DF_Initialize(pObj) != LPS22DF_OK)
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fb4c 	bl	8004aac <LPS22DF_Initialize>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <LPS22DF_Init+0x24>
    {
      return LPS22DF_ERROR;
 800441a:	f04f 33ff 	mov.w	r3, #4294967295
 800441e:	e004      	b.n	800442a <LPS22DF_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <LPS22DF_DeInit>:
  * @brief  Deinitialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_DeInit(LPS22DF_Object_t *pObj)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004440:	2b01      	cmp	r3, #1
 8004442:	d111      	bne.n	8004468 <LPS22DF_DeInit+0x36>
  {
    if (LPS22DF_PRESS_Disable(pObj) != LPS22DF_OK)
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f882 	bl	800454e <LPS22DF_PRESS_Disable>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <LPS22DF_DeInit+0x24>
    {
      return LPS22DF_ERROR;
 8004450:	f04f 33ff 	mov.w	r3, #4294967295
 8004454:	e00d      	b.n	8004472 <LPS22DF_DeInit+0x40>
    }

    if (LPS22DF_TEMP_Disable(pObj) != LPS22DF_OK)
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f927 	bl	80046aa <LPS22DF_TEMP_Disable>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <LPS22DF_DeInit+0x36>
    {
      return LPS22DF_ERROR;
 8004462:	f04f 33ff 	mov.w	r3, #4294967295
 8004466:	e004      	b.n	8004472 <LPS22DF_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <LPS22DF_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_ReadID(LPS22DF_Object_t *pObj, uint8_t *Id)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b084      	sub	sp, #16
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
 8004482:	6039      	str	r1, [r7, #0]
  lps22df_id_t val;
  if (lps22df_id_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3320      	adds	r3, #32
 8004488:	f107 020c 	add.w	r2, r7, #12
 800448c:	4611      	mov	r1, r2
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fc22 	bl	8004cd8 <lps22df_id_get>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <LPS22DF_ReadID+0x26>
  {
    return LPS22DF_ERROR;
 800449a:	f04f 33ff 	mov.w	r3, #4294967295
 800449e:	e003      	b.n	80044a8 <LPS22DF_ReadID+0x2e>
  }

  *Id = val.whoami;
 80044a0:	7b3a      	ldrb	r2, [r7, #12]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	701a      	strb	r2, [r3, #0]

  return LPS22DF_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <LPS22DF_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22DF sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_GetCapabilities(LPS22DF_Object_t *pObj, LPS22DF_Capabilities_t *Capabilities)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2200      	movs	r2, #0
 80044be:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2201      	movs	r2, #1
 80044c4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2201      	movs	r2, #1
 80044ca:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2200      	movs	r2, #0
 80044d0:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2200      	movs	r2, #0
 80044d6:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	4a08      	ldr	r2, [pc, #32]	@ (8004504 <LPS22DF_GetCapabilities+0x54>)
 80044e4:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	4a06      	ldr	r2, [pc, #24]	@ (8004504 <LPS22DF_GetCapabilities+0x54>)
 80044ea:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	615a      	str	r2, [r3, #20]
  return LPS22DF_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	43480000 	.word	0x43480000

08004508 <LPS22DF_PRESS_Enable>:
  * @brief  Enable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Enable(LPS22DF_Object_t *pObj)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <LPS22DF_PRESS_Enable+0x16>
  {
    return LPS22DF_OK;
 800451a:	2300      	movs	r3, #0
 800451c:	e013      	b.n	8004546 <LPS22DF_PRESS_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f103 0220 	add.w	r2, r3, #32
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3333      	adds	r3, #51	@ 0x33
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f000 fdb2 	bl	8005094 <lps22df_mode_set>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <LPS22DF_PRESS_Enable+0x34>
  {
    return LPS22DF_ERROR;
 8004536:	f04f 33ff 	mov.w	r3, #4294967295
 800453a:	e004      	b.n	8004546 <LPS22DF_PRESS_Enable+0x3e>
  }

  pObj->press_is_enabled = 1;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <LPS22DF_PRESS_Disable>:
  * @brief  Disable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Disable(LPS22DF_Object_t *pObj)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b084      	sub	sp, #16
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <LPS22DF_PRESS_Disable+0x16>
  {
    return LPS22DF_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	e030      	b.n	80045c6 <LPS22DF_PRESS_Disable+0x78>
  }

  /* Check if the LPS22DF temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d126      	bne.n	80045bc <LPS22DF_PRESS_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3320      	adds	r3, #32
 8004572:	f107 020c 	add.w	r2, r7, #12
 8004576:	4611      	mov	r1, r2
 8004578:	4618      	mov	r0, r3
 800457a:	f000 fde9 	bl	8005150 <lps22df_mode_get>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <LPS22DF_PRESS_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 8004584:	f04f 33ff 	mov.w	r3, #4294967295
 8004588:	e01d      	b.n	80045c6 <LPS22DF_PRESS_Disable+0x78>
    }

    (void)memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3333      	adds	r3, #51	@ 0x33
 800458e:	461a      	mov	r2, r3
 8004590:	f107 030c 	add.w	r3, r7, #12
 8004594:	8819      	ldrh	r1, [r3, #0]
 8004596:	789b      	ldrb	r3, [r3, #2]
 8004598:	8011      	strh	r1, [r2, #0]
 800459a:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 800459c:	2300      	movs	r3, #0
 800459e:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3320      	adds	r3, #32
 80045a4:	f107 020c 	add.w	r2, r7, #12
 80045a8:	4611      	mov	r1, r2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fd72 	bl	8005094 <lps22df_mode_set>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <LPS22DF_PRESS_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 80045b6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ba:	e004      	b.n	80045c6 <LPS22DF_PRESS_Disable+0x78>
    }
  }

  pObj->press_is_enabled = 0;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <LPS22DF_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 80045d8:	6839      	ldr	r1, [r7, #0]
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f90c 	bl	80047f8 <LPS22DF_GetOutputDataRate>
 80045e0:	4603      	mov	r3, r0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <LPS22DF_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_SetOutputDataRate(LPS22DF_Object_t *pObj, float_t Odr)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d106      	bne.n	800460e <LPS22DF_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004600:	ed97 0a00 	vldr	s0, [r7]
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f961 	bl	80048cc <LPS22DF_SetOutputDataRate_When_Enabled>
 800460a:	4603      	mov	r3, r0
 800460c:	e005      	b.n	800461a <LPS22DF_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 800460e:	ed97 0a00 	vldr	s0, [r7]
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f9e6 	bl	80049e4 <LPS22DF_SetOutputDataRate_When_Disabled>
 8004618:	4603      	mov	r3, r0
  }
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <LPS22DF_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetPressure(LPS22DF_Object_t *pObj, float_t *Value)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b084      	sub	sp, #16
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	6039      	str	r1, [r7, #0]
  uint32_t pressure_raw;

  if (lps22df_pressure_raw_get(&(pObj->Ctx), &pressure_raw) != LPS22DF_OK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3320      	adds	r3, #32
 8004630:	f107 020c 	add.w	r2, r7, #12
 8004634:	4611      	mov	r1, r2
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fe56 	bl	80052e8 <lps22df_pressure_raw_get>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <LPS22DF_PRESS_GetPressure+0x26>
  {
    return LPS22DF_ERROR;
 8004642:	f04f 33ff 	mov.w	r3, #4294967295
 8004646:	e009      	b.n	800465c <LPS22DF_PRESS_GetPressure+0x3a>
  }

  *Value = lps22df_from_lsb_to_hPa((int32_t)pressure_raw);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4618      	mov	r0, r3
 800464c:	f000 fb12 	bl	8004c74 <lps22df_from_lsb_to_hPa>
 8004650:	eef0 7a40 	vmov.f32	s15, s0
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	edc3 7a00 	vstr	s15, [r3]

  return LPS22DF_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <LPS22DF_TEMP_Enable>:
  * @brief  Enable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Enable(LPS22DF_Object_t *pObj)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <LPS22DF_TEMP_Enable+0x16>
  {
    return LPS22DF_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	e013      	b.n	80046a2 <LPS22DF_TEMP_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f103 0220 	add.w	r2, r3, #32
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3333      	adds	r3, #51	@ 0x33
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f000 fd04 	bl	8005094 <lps22df_mode_set>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <LPS22DF_TEMP_Enable+0x34>
  {
    return LPS22DF_ERROR;
 8004692:	f04f 33ff 	mov.w	r3, #4294967295
 8004696:	e004      	b.n	80046a2 <LPS22DF_TEMP_Enable+0x3e>
  }

  pObj->temp_is_enabled = 1;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <LPS22DF_TEMP_Disable>:
  * @brief  Disable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Disable(LPS22DF_Object_t *pObj)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <LPS22DF_TEMP_Disable+0x16>
  {
    return LPS22DF_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	e030      	b.n	8004722 <LPS22DF_TEMP_Disable+0x78>
  }

  /* Check if the LPS22DF pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d126      	bne.n	8004718 <LPS22DF_TEMP_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3320      	adds	r3, #32
 80046ce:	f107 020c 	add.w	r2, r7, #12
 80046d2:	4611      	mov	r1, r2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 fd3b 	bl	8005150 <lps22df_mode_get>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <LPS22DF_TEMP_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 80046e0:	f04f 33ff 	mov.w	r3, #4294967295
 80046e4:	e01d      	b.n	8004722 <LPS22DF_TEMP_Disable+0x78>
    }

    (void)memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3333      	adds	r3, #51	@ 0x33
 80046ea:	461a      	mov	r2, r3
 80046ec:	f107 030c 	add.w	r3, r7, #12
 80046f0:	8819      	ldrh	r1, [r3, #0]
 80046f2:	789b      	ldrb	r3, [r3, #2]
 80046f4:	8011      	strh	r1, [r2, #0]
 80046f6:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 80046f8:	2300      	movs	r3, #0
 80046fa:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3320      	adds	r3, #32
 8004700:	f107 020c 	add.w	r2, r7, #12
 8004704:	4611      	mov	r1, r2
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fcc4 	bl	8005094 <lps22df_mode_set>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <LPS22DF_TEMP_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 8004712:	f04f 33ff 	mov.w	r3, #4294967295
 8004716:	e004      	b.n	8004722 <LPS22DF_TEMP_Disable+0x78>
    }
  }

  pObj->temp_is_enabled = 0;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <LPS22DF_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 8004734:	6839      	ldr	r1, [r7, #0]
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f85e 	bl	80047f8 <LPS22DF_GetOutputDataRate>
 800473c:	4603      	mov	r3, r0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <LPS22DF_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_SetOutputDataRate(LPS22DF_Object_t *pObj, float_t Odr)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004758:	2b01      	cmp	r3, #1
 800475a:	d106      	bne.n	800476a <LPS22DF_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 800475c:	ed97 0a00 	vldr	s0, [r7]
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f8b3 	bl	80048cc <LPS22DF_SetOutputDataRate_When_Enabled>
 8004766:	4603      	mov	r3, r0
 8004768:	e005      	b.n	8004776 <LPS22DF_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 800476a:	ed97 0a00 	vldr	s0, [r7]
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f938 	bl	80049e4 <LPS22DF_SetOutputDataRate_When_Disabled>
 8004774:	4603      	mov	r3, r0
  }
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <LPS22DF_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetTemperature(LPS22DF_Object_t *pObj, float_t *Value)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	6039      	str	r1, [r7, #0]
  int16_t temperature_raw;

  if (lps22df_temperature_raw_get(&(pObj->Ctx), &temperature_raw) != LPS22DF_OK)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3320      	adds	r3, #32
 800478c:	f107 020e 	add.w	r2, r7, #14
 8004790:	4611      	mov	r1, r2
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fdd1 	bl	800533a <lps22df_temperature_raw_get>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <LPS22DF_TEMP_GetTemperature+0x26>
  {
    return LPS22DF_ERROR;
 800479e:	f04f 33ff 	mov.w	r3, #4294967295
 80047a2:	e00a      	b.n	80047ba <LPS22DF_TEMP_GetTemperature+0x3c>
  }

  *Value = lps22df_from_lsb_to_celsius(temperature_raw);
 80047a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fa7b 	bl	8004ca4 <lps22df_from_lsb_to_celsius>
 80047ae:	eef0 7a40 	vmov.f32	s15, s0
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	edc3 7a00 	vstr	s15, [r3]

  return LPS22DF_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <LPS22DF_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Write_Reg(LPS22DF_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	460b      	mov	r3, r1
 80047cc:	70fb      	strb	r3, [r7, #3]
 80047ce:	4613      	mov	r3, r2
 80047d0:	70bb      	strb	r3, [r7, #2]
  if (lps22df_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22DF_OK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f103 0020 	add.w	r0, r3, #32
 80047d8:	1cba      	adds	r2, r7, #2
 80047da:	78f9      	ldrb	r1, [r7, #3]
 80047dc:	2301      	movs	r3, #1
 80047de:	f000 fa15 	bl	8004c0c <lps22df_write_reg>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <LPS22DF_Write_Reg+0x2c>
  {
    return LPS22DF_ERROR;
 80047e8:	f04f 33ff 	mov.w	r3, #4294967295
 80047ec:	e000      	b.n	80047f0 <LPS22DF_Write_Reg+0x2e>
  }

  return LPS22DF_OK;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <LPS22DF_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
  lps22df_md_t val;

  if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	3320      	adds	r3, #32
 800480a:	f107 0208 	add.w	r2, r7, #8
 800480e:	4611      	mov	r1, r2
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fc9d 	bl	8005150 <lps22df_mode_get>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d002      	beq.n	8004822 <LPS22DF_GetOutputDataRate+0x2a>
  {
    return LPS22DF_ERROR;
 800481c:	f04f 33ff 	mov.w	r3, #4294967295
 8004820:	e044      	b.n	80048ac <LPS22DF_GetOutputDataRate+0xb4>
  }

  switch (val.odr)
 8004822:	7a3b      	ldrb	r3, [r7, #8]
 8004824:	2b08      	cmp	r3, #8
 8004826:	d83c      	bhi.n	80048a2 <LPS22DF_GetOutputDataRate+0xaa>
 8004828:	a201      	add	r2, pc, #4	@ (adr r2, 8004830 <LPS22DF_GetOutputDataRate+0x38>)
 800482a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482e:	bf00      	nop
 8004830:	08004855 	.word	0x08004855
 8004834:	0800485f 	.word	0x0800485f
 8004838:	08004869 	.word	0x08004869
 800483c:	08004873 	.word	0x08004873
 8004840:	0800487b 	.word	0x0800487b
 8004844:	08004883 	.word	0x08004883
 8004848:	0800488b 	.word	0x0800488b
 800484c:	08004893 	.word	0x08004893
 8004850:	0800489b 	.word	0x0800489b
  {
    case LPS22DF_ONE_SHOT:
      *Odr = 0.0f;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
      break;
 800485c:	e025      	b.n	80048aa <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_1Hz:
      *Odr = 1.0f;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004864:	601a      	str	r2, [r3, #0]
      break;
 8004866:	e020      	b.n	80048aa <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_4Hz:
      *Odr = 4.0f;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800486e:	601a      	str	r2, [r3, #0]
      break;
 8004870:	e01b      	b.n	80048aa <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_10Hz:
      *Odr = 10.0f;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	4a0f      	ldr	r2, [pc, #60]	@ (80048b4 <LPS22DF_GetOutputDataRate+0xbc>)
 8004876:	601a      	str	r2, [r3, #0]
      break;
 8004878:	e017      	b.n	80048aa <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_25Hz:
      *Odr = 25.0f;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	4a0e      	ldr	r2, [pc, #56]	@ (80048b8 <LPS22DF_GetOutputDataRate+0xc0>)
 800487e:	601a      	str	r2, [r3, #0]
      break;
 8004880:	e013      	b.n	80048aa <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_50Hz:
      *Odr = 50.0f;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	4a0d      	ldr	r2, [pc, #52]	@ (80048bc <LPS22DF_GetOutputDataRate+0xc4>)
 8004886:	601a      	str	r2, [r3, #0]
      break;
 8004888:	e00f      	b.n	80048aa <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_75Hz:
      *Odr = 75.0f;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	4a0c      	ldr	r2, [pc, #48]	@ (80048c0 <LPS22DF_GetOutputDataRate+0xc8>)
 800488e:	601a      	str	r2, [r3, #0]
      break;
 8004890:	e00b      	b.n	80048aa <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_100Hz:
      *Odr = 100.0f;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	4a0b      	ldr	r2, [pc, #44]	@ (80048c4 <LPS22DF_GetOutputDataRate+0xcc>)
 8004896:	601a      	str	r2, [r3, #0]
      break;
 8004898:	e007      	b.n	80048aa <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_200Hz:
      *Odr = 200.0f;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	4a0a      	ldr	r2, [pc, #40]	@ (80048c8 <LPS22DF_GetOutputDataRate+0xd0>)
 800489e:	601a      	str	r2, [r3, #0]
      break;
 80048a0:	e003      	b.n	80048aa <LPS22DF_GetOutputDataRate+0xb2>

    default:
      ret = LPS22DF_ERROR;
 80048a2:	f04f 33ff 	mov.w	r3, #4294967295
 80048a6:	60fb      	str	r3, [r7, #12]
      break;
 80048a8:	bf00      	nop
  }

  return ret;
 80048aa:	68fb      	ldr	r3, [r7, #12]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	41200000 	.word	0x41200000
 80048b8:	41c80000 	.word	0x41c80000
 80048bc:	42480000 	.word	0x42480000
 80048c0:	42960000 	.word	0x42960000
 80048c4:	42c80000 	.word	0x42c80000
 80048c8:	43480000 	.word	0x43480000

080048cc <LPS22DF_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Enabled(LPS22DF_Object_t *pObj, float_t Odr)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	ed87 0a00 	vstr	s0, [r7]
  lps22df_md_t new_val;

  if (lps22df_mode_get(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3320      	adds	r3, #32
 80048dc:	f107 020c 	add.w	r2, r7, #12
 80048e0:	4611      	mov	r1, r2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fc34 	bl	8005150 <lps22df_mode_get>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <LPS22DF_SetOutputDataRate_When_Enabled+0x28>
  {
    return LPS22DF_ERROR;
 80048ee:	f04f 33ff 	mov.w	r3, #4294967295
 80048f2:	e06c      	b.n	80049ce <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                : (Odr <=   4.0f) ? LPS22DF_4Hz
 80048f4:	edd7 7a00 	vldr	s15, [r7]
 80048f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004904:	d801      	bhi.n	800490a <LPS22DF_SetOutputDataRate_When_Enabled+0x3e>
 8004906:	2301      	movs	r3, #1
 8004908:	e042      	b.n	8004990 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 800490a:	edd7 7a00 	vldr	s15, [r7]
 800490e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8004912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491a:	d801      	bhi.n	8004920 <LPS22DF_SetOutputDataRate_When_Enabled+0x54>
 800491c:	2302      	movs	r3, #2
 800491e:	e037      	b.n	8004990 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8004920:	edd7 7a00 	vldr	s15, [r7]
 8004924:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800492c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004930:	d801      	bhi.n	8004936 <LPS22DF_SetOutputDataRate_When_Enabled+0x6a>
 8004932:	2303      	movs	r3, #3
 8004934:	e02c      	b.n	8004990 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8004936:	edd7 7a00 	vldr	s15, [r7]
 800493a:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800493e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004946:	d801      	bhi.n	800494c <LPS22DF_SetOutputDataRate_When_Enabled+0x80>
 8004948:	2304      	movs	r3, #4
 800494a:	e021      	b.n	8004990 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 800494c:	edd7 7a00 	vldr	s15, [r7]
 8004950:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80049d8 <LPS22DF_SetOutputDataRate_When_Enabled+0x10c>
 8004954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800495c:	d801      	bhi.n	8004962 <LPS22DF_SetOutputDataRate_When_Enabled+0x96>
 800495e:	2305      	movs	r3, #5
 8004960:	e016      	b.n	8004990 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8004962:	edd7 7a00 	vldr	s15, [r7]
 8004966:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80049dc <LPS22DF_SetOutputDataRate_When_Enabled+0x110>
 800496a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800496e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004972:	d801      	bhi.n	8004978 <LPS22DF_SetOutputDataRate_When_Enabled+0xac>
 8004974:	2306      	movs	r3, #6
 8004976:	e00b      	b.n	8004990 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8004978:	edd7 7a00 	vldr	s15, [r7]
 800497c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80049e0 <LPS22DF_SetOutputDataRate_When_Enabled+0x114>
 8004980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004988:	d801      	bhi.n	800498e <LPS22DF_SetOutputDataRate_When_Enabled+0xc2>
 800498a:	2307      	movs	r3, #7
 800498c:	e000      	b.n	8004990 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 800498e:	2308      	movs	r3, #8
  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8004990:	733b      	strb	r3, [r7, #12]
                : (Odr <=  50.0f) ? LPS22DF_50Hz
                : (Odr <=  75.0f) ? LPS22DF_75Hz
                : (Odr <= 100.0f) ? LPS22DF_100Hz
                :                   LPS22DF_200Hz;

  if (lps22df_mode_set(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3320      	adds	r3, #32
 8004996:	f107 020c 	add.w	r2, r7, #12
 800499a:	4611      	mov	r1, r2
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fb79 	bl	8005094 <lps22df_mode_set>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <LPS22DF_SetOutputDataRate_When_Enabled+0xe2>
  {
    return LPS22DF_ERROR;
 80049a8:	f04f 33ff 	mov.w	r3, #4294967295
 80049ac:	e00f      	b.n	80049ce <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f103 0220 	add.w	r2, r3, #32
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3333      	adds	r3, #51	@ 0x33
 80049b8:	4619      	mov	r1, r3
 80049ba:	4610      	mov	r0, r2
 80049bc:	f000 fbc8 	bl	8005150 <lps22df_mode_get>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <LPS22DF_SetOutputDataRate_When_Enabled+0x100>
  {
    return LPS22DF_ERROR;
 80049c6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ca:	e000      	b.n	80049ce <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  return LPS22DF_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	42480000 	.word	0x42480000
 80049dc:	42960000 	.word	0x42960000
 80049e0:	42c80000 	.word	0x42c80000

080049e4 <LPS22DF_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Disabled(LPS22DF_Object_t *pObj, float_t Odr)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                       : (Odr <=   4.0f) ? LPS22DF_4Hz
 80049f0:	edd7 7a00 	vldr	s15, [r7]
 80049f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a00:	d801      	bhi.n	8004a06 <LPS22DF_SetOutputDataRate_When_Disabled+0x22>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e042      	b.n	8004a8c <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004a06:	edd7 7a00 	vldr	s15, [r7]
 8004a0a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8004a0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a16:	d801      	bhi.n	8004a1c <LPS22DF_SetOutputDataRate_When_Disabled+0x38>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e037      	b.n	8004a8c <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004a1c:	edd7 7a00 	vldr	s15, [r7]
 8004a20:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004a24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a2c:	d801      	bhi.n	8004a32 <LPS22DF_SetOutputDataRate_When_Disabled+0x4e>
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e02c      	b.n	8004a8c <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004a32:	edd7 7a00 	vldr	s15, [r7]
 8004a36:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8004a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a42:	d801      	bhi.n	8004a48 <LPS22DF_SetOutputDataRate_When_Disabled+0x64>
 8004a44:	2304      	movs	r3, #4
 8004a46:	e021      	b.n	8004a8c <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004a48:	edd7 7a00 	vldr	s15, [r7]
 8004a4c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004aa0 <LPS22DF_SetOutputDataRate_When_Disabled+0xbc>
 8004a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a58:	d801      	bhi.n	8004a5e <LPS22DF_SetOutputDataRate_When_Disabled+0x7a>
 8004a5a:	2305      	movs	r3, #5
 8004a5c:	e016      	b.n	8004a8c <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004a5e:	edd7 7a00 	vldr	s15, [r7]
 8004a62:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8004aa4 <LPS22DF_SetOutputDataRate_When_Disabled+0xc0>
 8004a66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6e:	d801      	bhi.n	8004a74 <LPS22DF_SetOutputDataRate_When_Disabled+0x90>
 8004a70:	2306      	movs	r3, #6
 8004a72:	e00b      	b.n	8004a8c <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004a74:	edd7 7a00 	vldr	s15, [r7]
 8004a78:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8004aa8 <LPS22DF_SetOutputDataRate_When_Disabled+0xc4>
 8004a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a84:	d801      	bhi.n	8004a8a <LPS22DF_SetOutputDataRate_When_Disabled+0xa6>
 8004a86:	2307      	movs	r3, #7
 8004a88:	e000      	b.n	8004a8c <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8004a8a:	2308      	movs	r3, #8
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                       : (Odr <=  50.0f) ? LPS22DF_50Hz
                       : (Odr <=  75.0f) ? LPS22DF_75Hz
                       : (Odr <= 100.0f) ? LPS22DF_100Hz
                       :                   LPS22DF_200Hz;

  return LPS22DF_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	42480000 	.word	0x42480000
 8004aa4:	42960000 	.word	0x42960000
 8004aa8:	42c80000 	.word	0x42c80000

08004aac <LPS22DF_Initialize>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_Initialize(LPS22DF_Object_t *pObj)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  lps22df_md_t md;
  lps22df_bus_mode_t bus_mode;

  /* Set bdu and if_inc recommended for driver usage */
  if (lps22df_init_set(&(pObj->Ctx), LPS22DF_DRV_RDY) != LPS22DF_OK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3320      	adds	r3, #32
 8004ab8:	2100      	movs	r1, #0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f983 	bl	8004dc6 <lps22df_init_set>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <LPS22DF_Initialize+0x20>
  {
    return LPS22DF_ERROR;
 8004ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aca:	e047      	b.n	8004b5c <LPS22DF_Initialize+0xb0>
  }

  /* Select bus interface */
  if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d102      	bne.n	8004ada <LPS22DF_Initialize+0x2e>
  {
    bus_mode.interface = LPS22DF_SPI_3W;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	723b      	strb	r3, [r7, #8]
 8004ad8:	e008      	b.n	8004aec <LPS22DF_Initialize+0x40>
  }
  else if (pObj->IO.BusType == LPS22DF_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d102      	bne.n	8004ae8 <LPS22DF_Initialize+0x3c>
  {
    bus_mode.interface = LPS22DF_SPI_4W;
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	723b      	strb	r3, [r7, #8]
 8004ae6:	e001      	b.n	8004aec <LPS22DF_Initialize+0x40>
  }
  else
  {
    bus_mode.interface = LPS22DF_SEL_BY_HW;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	723b      	strb	r3, [r7, #8]
  }

  bus_mode.filter = LPS22DF_FILTER_AUTO;
 8004aec:	2300      	movs	r3, #0
 8004aee:	727b      	strb	r3, [r7, #9]
  if (lps22df_bus_mode_set(&(pObj->Ctx), &bus_mode) != LPS22DF_OK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3320      	adds	r3, #32
 8004af4:	f107 0208 	add.w	r2, r7, #8
 8004af8:	4611      	mov	r1, r2
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 f901 	bl	8004d02 <lps22df_bus_mode_set>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <LPS22DF_Initialize+0x60>
  {
    return LPS22DF_ERROR;
 8004b06:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0a:	e027      	b.n	8004b5c <LPS22DF_Initialize+0xb0>
  }

  /* Set Output Data Rate in Power Down */
  md.odr = LPS22DF_ONE_SHOT;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	733b      	strb	r3, [r7, #12]
  md.avg = LPS22DF_4_AVG;
 8004b10:	2300      	movs	r3, #0
 8004b12:	737b      	strb	r3, [r7, #13]
  md.lpf = LPS22DF_LPF_ODR_DIV_4;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73bb      	strb	r3, [r7, #14]

  /* Power down the device */
  if (lps22df_mode_set(&(pObj->Ctx), &md) != LPS22DF_OK)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3320      	adds	r3, #32
 8004b1c:	f107 020c 	add.w	r2, r7, #12
 8004b20:	4611      	mov	r1, r2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fab6 	bl	8005094 <lps22df_mode_set>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <LPS22DF_Initialize+0x88>
  {
    return LPS22DF_ERROR;
 8004b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b32:	e013      	b.n	8004b5c <LPS22DF_Initialize+0xb0>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f103 0220 	add.w	r2, r3, #32
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3333      	adds	r3, #51	@ 0x33
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4610      	mov	r0, r2
 8004b42:	f000 fb05 	bl	8005150 <lps22df_mode_get>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <LPS22DF_Initialize+0xa6>
  {
    return LPS22DF_ERROR;
 8004b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b50:	e004      	b.n	8004b5c <LPS22DF_Initialize+0xb0>
  }

  pObj->last_odr.odr = LPS22DF_25Hz;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2204      	movs	r2, #4
 8004b56:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22DF_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b64:	b590      	push	{r4, r7, lr}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	607a      	str	r2, [r7, #4]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	460b      	mov	r3, r1
 8004b72:	72fb      	strb	r3, [r7, #11]
 8004b74:	4613      	mov	r3, r2
 8004b76:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	695c      	ldr	r4, [r3, #20]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	7b1b      	ldrb	r3, [r3, #12]
 8004b84:	4618      	mov	r0, r3
 8004b86:	7afb      	ldrb	r3, [r7, #11]
 8004b88:	b299      	uxth	r1, r3
 8004b8a:	893b      	ldrh	r3, [r7, #8]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	47a0      	blx	r4
 8004b90:	4603      	mov	r3, r0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd90      	pop	{r4, r7, pc}

08004b9a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b9a:	b590      	push	{r4, r7, lr}
 8004b9c:	b087      	sub	sp, #28
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	72fb      	strb	r3, [r7, #11]
 8004baa:	4613      	mov	r3, r2
 8004bac:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	691c      	ldr	r4, [r3, #16]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	7b1b      	ldrb	r3, [r3, #12]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	7afb      	ldrb	r3, [r7, #11]
 8004bbe:	b299      	uxth	r1, r3
 8004bc0:	893b      	ldrh	r3, [r7, #8]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	47a0      	blx	r4
 8004bc6:	4603      	mov	r3, r0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd90      	pop	{r4, r7, pc}

08004bd0 <lps22df_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lps22df_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                uint16_t len)
{
 8004bd0:	b590      	push	{r4, r7, lr}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	607a      	str	r2, [r7, #4]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	460b      	mov	r3, r1
 8004bde:	72fb      	strb	r3, [r7, #11]
 8004be0:	4613      	mov	r3, r2
 8004be2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d102      	bne.n	8004bf0 <lps22df_read_reg+0x20>
  {
    return -1;
 8004bea:	f04f 33ff 	mov.w	r3, #4294967295
 8004bee:	e009      	b.n	8004c04 <lps22df_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	685c      	ldr	r4, [r3, #4]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	68d8      	ldr	r0, [r3, #12]
 8004bf8:	893b      	ldrh	r3, [r7, #8]
 8004bfa:	7af9      	ldrb	r1, [r7, #11]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	47a0      	blx	r4
 8004c00:	6178      	str	r0, [r7, #20]

  return ret;
 8004c02:	697b      	ldr	r3, [r7, #20]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	371c      	adds	r7, #28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd90      	pop	{r4, r7, pc}

08004c0c <lps22df_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lps22df_write_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                 uint16_t len)
{
 8004c0c:	b590      	push	{r4, r7, lr}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	607a      	str	r2, [r7, #4]
 8004c16:	461a      	mov	r2, r3
 8004c18:	460b      	mov	r3, r1
 8004c1a:	72fb      	strb	r3, [r7, #11]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d102      	bne.n	8004c2c <lps22df_write_reg+0x20>
  {
    return -1;
 8004c26:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2a:	e009      	b.n	8004c40 <lps22df_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681c      	ldr	r4, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	68d8      	ldr	r0, [r3, #12]
 8004c34:	893b      	ldrh	r3, [r7, #8]
 8004c36:	7af9      	ldrb	r1, [r7, #11]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	47a0      	blx	r4
 8004c3c:	6178      	str	r0, [r7, #20]

  return ret;
 8004c3e:	697b      	ldr	r3, [r7, #20]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	371c      	adds	r7, #28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd90      	pop	{r4, r7, pc}

08004c48 <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d006      	beq.n	8004c66 <bytecpy+0x1e>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <bytecpy+0x1e>
  {
    *target = *source;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	781a      	ldrb	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	701a      	strb	r2, [r3, #0]
  }
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
	...

08004c74 <lps22df_from_lsb_to_hPa>:
  * @{
  *
  */

float_t lps22df_from_lsb_to_hPa(int32_t lsb)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);   /* 4096.0f * 256 */
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	ee07 3a90 	vmov	s15, r3
 8004c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c86:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004ca0 <lps22df_from_lsb_to_hPa+0x2c>
 8004c8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c8e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004c92:	eeb0 0a67 	vmov.f32	s0, s15
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	49800000 	.word	0x49800000

08004ca4 <lps22df_from_lsb_to_celsius>:

float_t lps22df_from_lsb_to_celsius(int16_t lsb)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	4603      	mov	r3, r0
 8004cac:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 8004cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cba:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8004cd4 <lps22df_from_lsb_to_celsius+0x30>
 8004cbe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004cc2:	eef0 7a66 	vmov.f32	s15, s13
}
 8004cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	42c80000 	.word	0x42c80000

08004cd8 <lps22df_id_get>:
  * @param  val   ID values.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_id_get(const stmdev_ctx_t *ctx, lps22df_id_t *val)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint8_t reg;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_WHO_AM_I, &reg, 1);
 8004ce2:	f107 020b 	add.w	r2, r7, #11
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	210f      	movs	r1, #15
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7ff ff70 	bl	8004bd0 <lps22df_read_reg>
 8004cf0:	60f8      	str	r0, [r7, #12]
  val->whoami = reg;
 8004cf2:	7afa      	ldrb	r2, [r7, #11]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	701a      	strb	r2, [r3, #0]

  return ret;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <lps22df_bus_mode_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_bus_mode_set(const stmdev_ctx_t *ctx, lps22df_bus_mode_t *val)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b086      	sub	sp, #24
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	6039      	str	r1, [r7, #0]
  lps22df_i3c_if_ctrl_t i3c_if_ctrl;
  lps22df_if_ctrl_t if_ctrl;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8004d0c:	f107 020c 	add.w	r2, r7, #12
 8004d10:	2301      	movs	r3, #1
 8004d12:	210e      	movs	r1, #14
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff ff5b 	bl	8004bd0 <lps22df_read_reg>
 8004d1a:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d124      	bne.n	8004d6c <lps22df_bus_mode_set+0x6a>
  {
    if_ctrl.i2c_i3c_dis = ((uint8_t)val->interface & 0x02U) >> 1;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	085b      	lsrs	r3, r3, #1
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	7b3b      	ldrb	r3, [r7, #12]
 8004d30:	f362 1386 	bfi	r3, r2, #6, #1
 8004d34:	733b      	strb	r3, [r7, #12]
    if_ctrl.int_en_i3c = ((uint8_t)val->interface & 0x04U) >> 2;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	089b      	lsrs	r3, r3, #2
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	7b3b      	ldrb	r3, [r7, #12]
 8004d44:	f362 13c7 	bfi	r3, r2, #7, #1
 8004d48:	733b      	strb	r3, [r7, #12]
    if_ctrl.sim = ((uint8_t)val->interface & 0x01U);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	7b3b      	ldrb	r3, [r7, #12]
 8004d56:	f362 1345 	bfi	r3, r2, #5, #1
 8004d5a:	733b      	strb	r3, [r7, #12]
    ret = lps22df_write_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8004d5c:	f107 020c 	add.w	r2, r7, #12
 8004d60:	2301      	movs	r3, #1
 8004d62:	210e      	movs	r1, #14
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7ff ff51 	bl	8004c0c <lps22df_write_reg>
 8004d6a:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d107      	bne.n	8004d82 <lps22df_bus_mode_set+0x80>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_I3C_IF_CTRL,
 8004d72:	f107 0210 	add.w	r2, r7, #16
 8004d76:	2301      	movs	r3, #1
 8004d78:	2119      	movs	r1, #25
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7ff ff28 	bl	8004bd0 <lps22df_read_reg>
 8004d80:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_if_ctrl, 1);
  }
  if (ret == 0)
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d119      	bne.n	8004dbc <lps22df_bus_mode_set+0xba>
  {
    i3c_if_ctrl.asf_on = (uint8_t)val->filter & 0x01U;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	785b      	ldrb	r3, [r3, #1]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	7c3b      	ldrb	r3, [r7, #16]
 8004d94:	f362 1345 	bfi	r3, r2, #5, #1
 8004d98:	743b      	strb	r3, [r7, #16]
    i3c_if_ctrl.i3c_bus_avb_sel = (uint8_t)val->i3c_ibi_time & 0x03U;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	789b      	ldrb	r3, [r3, #2]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	7c3b      	ldrb	r3, [r7, #16]
 8004da6:	f362 0301 	bfi	r3, r2, #0, #2
 8004daa:	743b      	strb	r3, [r7, #16]
    ret = lps22df_write_reg(ctx, LPS22DF_I3C_IF_CTRL,
 8004dac:	f107 0210 	add.w	r2, r7, #16
 8004db0:	2301      	movs	r3, #1
 8004db2:	2119      	movs	r1, #25
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff ff29 	bl	8004c0c <lps22df_write_reg>
 8004dba:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_if_ctrl, 1);
  }
  return ret;
 8004dbc:	697b      	ldr	r3, [r7, #20]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <lps22df_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_init_set(const stmdev_ctx_t *ctx, lps22df_init_t val)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b08a      	sub	sp, #40	@ 0x28
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	70fb      	strb	r3, [r7, #3]
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_ctrl_reg3_t ctrl_reg3;
  lps22df_int_source_t int_src;
  lps22df_stat_t status;
  uint8_t reg[2], cnt = 0;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8004dd8:	f107 020c 	add.w	r2, r7, #12
 8004ddc:	2302      	movs	r3, #2
 8004dde:	2111      	movs	r1, #17
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff fef5 	bl	8004bd0 <lps22df_read_reg>
 8004de6:	6238      	str	r0, [r7, #32]
  if (ret == 0)
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f040 80c8 	bne.w	8004f80 <lps22df_init_set+0x1ba>
  {
    bytecpy((uint8_t *)&ctrl_reg2, &reg[0]);
 8004df0:	f107 020c 	add.w	r2, r7, #12
 8004df4:	f107 031c 	add.w	r3, r7, #28
 8004df8:	4611      	mov	r1, r2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff ff24 	bl	8004c48 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg3, &reg[1]);
 8004e00:	f107 030c 	add.w	r3, r7, #12
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	f107 0318 	add.w	r3, r7, #24
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7ff ff1b 	bl	8004c48 <bytecpy>

    switch (val)
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d043      	beq.n	8004ea0 <lps22df_init_set+0xda>
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	f300 809d 	bgt.w	8004f58 <lps22df_init_set+0x192>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d078      	beq.n	8004f14 <lps22df_init_set+0x14e>
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	f040 8098 	bne.w	8004f58 <lps22df_init_set+0x192>
    {
      case LPS22DF_BOOT:
        ctrl_reg2.boot = PROPERTY_ENABLE;
 8004e28:	7f3b      	ldrb	r3, [r7, #28]
 8004e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e2e:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8004e30:	f107 021c 	add.w	r2, r7, #28
 8004e34:	2301      	movs	r3, #1
 8004e36:	2111      	movs	r1, #17
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff fee7 	bl	8004c0c <lps22df_write_reg>
 8004e3e:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        if (ret != 0)
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f040 8095 	bne.w	8004f72 <lps22df_init_set+0x1ac>
          break;
        }

        do
        {
          ret = lps22df_read_reg(ctx, LPS22DF_INT_SOURCE, (uint8_t *)&int_src, 1);
 8004e48:	f107 0214 	add.w	r2, r7, #20
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	2124      	movs	r1, #36	@ 0x24
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff febd 	bl	8004bd0 <lps22df_read_reg>
 8004e56:	6238      	str	r0, [r7, #32]
          if (ret != 0)
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d115      	bne.n	8004e8a <lps22df_init_set+0xc4>
          {
            break;
          }

          /* boot procedue ended correctly */
          if (int_src.boot_on == 0U)
 8004e5e:	7d3b      	ldrb	r3, [r7, #20]
 8004e60:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d011      	beq.n	8004e8e <lps22df_init_set+0xc8>
          {
            break;
          }

          if (ctx->mdelay != NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <lps22df_init_set+0xb4>
          {
            ctx->mdelay(10); /* 10ms of boot time */
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	200a      	movs	r0, #10
 8004e78:	4798      	blx	r3
          }
        } while (cnt++ < 5U);
 8004e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d9df      	bls.n	8004e48 <lps22df_init_set+0x82>
 8004e88:	e002      	b.n	8004e90 <lps22df_init_set+0xca>
            break;
 8004e8a:	bf00      	nop
 8004e8c:	e000      	b.n	8004e90 <lps22df_init_set+0xca>
            break;
 8004e8e:	bf00      	nop

        if (cnt >= 5U)
 8004e90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e94:	2b04      	cmp	r3, #4
 8004e96:	d96e      	bls.n	8004f76 <lps22df_init_set+0x1b0>
        {
          ret = -1;  /* boot procedure failed */
 8004e98:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9c:	623b      	str	r3, [r7, #32]
        }

        break;
 8004e9e:	e06a      	b.n	8004f76 <lps22df_init_set+0x1b0>
      case LPS22DF_RESET:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8004ea0:	7f3b      	ldrb	r3, [r7, #28]
 8004ea2:	f043 0304 	orr.w	r3, r3, #4
 8004ea6:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8004ea8:	f107 021c 	add.w	r2, r7, #28
 8004eac:	2301      	movs	r3, #1
 8004eae:	2111      	movs	r1, #17
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff feab 	bl	8004c0c <lps22df_write_reg>
 8004eb6:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        if (ret != 0)
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d15d      	bne.n	8004f7a <lps22df_init_set+0x1b4>
          break;
        }

        do
        {
          ret = lps22df_status_get(ctx, &status);
 8004ebe:	f107 0310 	add.w	r3, r7, #16
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f860 	bl	8004f8a <lps22df_status_get>
 8004eca:	6238      	str	r0, [r7, #32]
          if (ret != 0)
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d115      	bne.n	8004efe <lps22df_init_set+0x138>
          {
            break;
          }

          /* sw-reset procedue ended correctly */
          if (status.sw_reset == 0U)
 8004ed2:	7c3b      	ldrb	r3, [r7, #16]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d011      	beq.n	8004f02 <lps22df_init_set+0x13c>
          {
            break;
          }

          if (ctx->mdelay != NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <lps22df_init_set+0x128>
          {
            ctx->mdelay(1); /* should be 50 us */
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	2001      	movs	r0, #1
 8004eec:	4798      	blx	r3
          }
        } while (cnt++ < 5U);
 8004eee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d9e0      	bls.n	8004ebe <lps22df_init_set+0xf8>
 8004efc:	e002      	b.n	8004f04 <lps22df_init_set+0x13e>
            break;
 8004efe:	bf00      	nop
 8004f00:	e000      	b.n	8004f04 <lps22df_init_set+0x13e>
            break;
 8004f02:	bf00      	nop

        if (cnt >= 5U)
 8004f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d938      	bls.n	8004f7e <lps22df_init_set+0x1b8>
        {
          ret = -1;  /* sw-reset procedure failed */
 8004f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f10:	623b      	str	r3, [r7, #32]
        }

        break;
 8004f12:	e034      	b.n	8004f7e <lps22df_init_set+0x1b8>
      case LPS22DF_DRV_RDY:
        ctrl_reg2.bdu = PROPERTY_ENABLE;
 8004f14:	7f3b      	ldrb	r3, [r7, #28]
 8004f16:	f043 0308 	orr.w	r3, r3, #8
 8004f1a:	773b      	strb	r3, [r7, #28]
        ctrl_reg3.if_add_inc = PROPERTY_ENABLE;
 8004f1c:	7e3b      	ldrb	r3, [r7, #24]
 8004f1e:	f043 0301 	orr.w	r3, r3, #1
 8004f22:	763b      	strb	r3, [r7, #24]
        bytecpy(&reg[0], (uint8_t *)&ctrl_reg2);
 8004f24:	f107 021c 	add.w	r2, r7, #28
 8004f28:	f107 030c 	add.w	r3, r7, #12
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7ff fe8a 	bl	8004c48 <bytecpy>
        bytecpy(&reg[1], (uint8_t *)&ctrl_reg3);
 8004f34:	f107 0218 	add.w	r2, r7, #24
 8004f38:	f107 030c 	add.w	r3, r7, #12
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	4611      	mov	r1, r2
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff fe81 	bl	8004c48 <bytecpy>
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8004f46:	f107 020c 	add.w	r2, r7, #12
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	2111      	movs	r1, #17
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7ff fe5c 	bl	8004c0c <lps22df_write_reg>
 8004f54:	6238      	str	r0, [r7, #32]
        break;
 8004f56:	e013      	b.n	8004f80 <lps22df_init_set+0x1ba>
      default:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8004f58:	7f3b      	ldrb	r3, [r7, #28]
 8004f5a:	f043 0304 	orr.w	r3, r3, #4
 8004f5e:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8004f60:	f107 021c 	add.w	r2, r7, #28
 8004f64:	2301      	movs	r3, #1
 8004f66:	2111      	movs	r1, #17
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff fe4f 	bl	8004c0c <lps22df_write_reg>
 8004f6e:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 8004f70:	e006      	b.n	8004f80 <lps22df_init_set+0x1ba>
          break;
 8004f72:	bf00      	nop
 8004f74:	e004      	b.n	8004f80 <lps22df_init_set+0x1ba>
        break;
 8004f76:	bf00      	nop
 8004f78:	e002      	b.n	8004f80 <lps22df_init_set+0x1ba>
          break;
 8004f7a:	bf00      	nop
 8004f7c:	e000      	b.n	8004f80 <lps22df_init_set+0x1ba>
        break;
 8004f7e:	bf00      	nop
    }
  }

  return ret;
 8004f80:	6a3b      	ldr	r3, [r7, #32]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3728      	adds	r7, #40	@ 0x28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <lps22df_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_status_get(const stmdev_ctx_t *ctx, lps22df_stat_t *val)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b088      	sub	sp, #32
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	6039      	str	r1, [r7, #0]
  lps22df_int_source_t int_source;
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_status_t status;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2,
 8004f94:	f107 0210 	add.w	r2, r7, #16
 8004f98:	2301      	movs	r3, #1
 8004f9a:	2111      	movs	r1, #17
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff fe17 	bl	8004bd0 <lps22df_read_reg>
 8004fa2:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg2, 1);
  if (ret == 0)
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d107      	bne.n	8004fba <lps22df_status_get+0x30>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_INT_SOURCE, (uint8_t *)&int_source, 1);
 8004faa:	f107 0214 	add.w	r2, r7, #20
 8004fae:	2301      	movs	r3, #1
 8004fb0:	2124      	movs	r1, #36	@ 0x24
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff fe0c 	bl	8004bd0 <lps22df_read_reg>
 8004fb8:	61f8      	str	r0, [r7, #28]
  }
  if (ret == 0)
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d107      	bne.n	8004fd0 <lps22df_status_get+0x46>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_STATUS, (uint8_t *)&status, 1);
 8004fc0:	f107 020c 	add.w	r2, r7, #12
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	2127      	movs	r1, #39	@ 0x27
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff fe01 	bl	8004bd0 <lps22df_read_reg>
 8004fce:	61f8      	str	r0, [r7, #28]
  }
  if (ret == 0)
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d107      	bne.n	8004fe6 <lps22df_status_get+0x5c>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_INTERRUPT_CFG,
 8004fd6:	f107 0218 	add.w	r2, r7, #24
 8004fda:	2301      	movs	r3, #1
 8004fdc:	210b      	movs	r1, #11
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7ff fdf6 	bl	8004bd0 <lps22df_read_reg>
 8004fe4:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&interrupt_cfg, 1);
  }
  val->sw_reset  = ctrl_reg2.swreset;
 8004fe6:	7c3b      	ldrb	r3, [r7, #16]
 8004fe8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004fec:	b2d9      	uxtb	r1, r3
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	7813      	ldrb	r3, [r2, #0]
 8004ff2:	f361 0300 	bfi	r3, r1, #0, #1
 8004ff6:	7013      	strb	r3, [r2, #0]
  val->boot      = int_source.boot_on;
 8004ff8:	7d3b      	ldrb	r3, [r7, #20]
 8004ffa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004ffe:	b2d9      	uxtb	r1, r3
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	7813      	ldrb	r3, [r2, #0]
 8005004:	f361 0341 	bfi	r3, r1, #1, #1
 8005008:	7013      	strb	r3, [r2, #0]
  val->drdy_pres = status.p_da;
 800500a:	7b3b      	ldrb	r3, [r7, #12]
 800500c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005010:	b2d9      	uxtb	r1, r3
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	7813      	ldrb	r3, [r2, #0]
 8005016:	f361 0382 	bfi	r3, r1, #2, #1
 800501a:	7013      	strb	r3, [r2, #0]
  val->drdy_temp = status.t_da;
 800501c:	7b3b      	ldrb	r3, [r7, #12]
 800501e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005022:	b2d9      	uxtb	r1, r3
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	7813      	ldrb	r3, [r2, #0]
 8005028:	f361 03c3 	bfi	r3, r1, #3, #1
 800502c:	7013      	strb	r3, [r2, #0]
  val->ovr_pres  = status.p_or;
 800502e:	7b3b      	ldrb	r3, [r7, #12]
 8005030:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005034:	b2d9      	uxtb	r1, r3
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	7813      	ldrb	r3, [r2, #0]
 800503a:	f361 1304 	bfi	r3, r1, #4, #1
 800503e:	7013      	strb	r3, [r2, #0]
  val->ovr_temp  = status.t_or;
 8005040:	7b3b      	ldrb	r3, [r7, #12]
 8005042:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005046:	b2d9      	uxtb	r1, r3
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	7813      	ldrb	r3, [r2, #0]
 800504c:	f361 1345 	bfi	r3, r1, #5, #1
 8005050:	7013      	strb	r3, [r2, #0]
  val->end_meas  = ~ctrl_reg2.oneshot;
 8005052:	7c3b      	ldrb	r3, [r7, #16]
 8005054:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005058:	b2db      	uxtb	r3, r3
 800505a:	43db      	mvns	r3, r3
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	b2d9      	uxtb	r1, r3
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	7813      	ldrb	r3, [r2, #0]
 8005068:	f361 1386 	bfi	r3, r1, #6, #1
 800506c:	7013      	strb	r3, [r2, #0]
  val->ref_done = ~interrupt_cfg.autozero;
 800506e:	7e3b      	ldrb	r3, [r7, #24]
 8005070:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005074:	b2db      	uxtb	r3, r3
 8005076:	43db      	mvns	r3, r3
 8005078:	b2db      	uxtb	r3, r3
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	b2d9      	uxtb	r1, r3
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	7813      	ldrb	r3, [r2, #0]
 8005084:	f361 13c7 	bfi	r3, r1, #7, #1
 8005088:	7013      	strb	r3, [r2, #0]

  return ret;
 800508a:	69fb      	ldr	r3, [r7, #28]
}
 800508c:	4618      	mov	r0, r3
 800508e:	3720      	adds	r7, #32
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <lps22df_mode_set>:
  * @param  val   set the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_set(const stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 800509e:	f107 0208 	add.w	r2, r7, #8
 80050a2:	2302      	movs	r3, #2
 80050a4:	2110      	movs	r1, #16
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff fd92 	bl	8004bd0 <lps22df_read_reg>
 80050ac:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d148      	bne.n	8005146 <lps22df_mode_set+0xb2>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 80050b4:	f107 0208 	add.w	r2, r7, #8
 80050b8:	f107 0310 	add.w	r3, r7, #16
 80050bc:	4611      	mov	r1, r2
 80050be:	4618      	mov	r0, r3
 80050c0:	f7ff fdc2 	bl	8004c48 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 80050c4:	f107 0308 	add.w	r3, r7, #8
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	f107 030c 	add.w	r3, r7, #12
 80050ce:	4611      	mov	r1, r2
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff fdb9 	bl	8004c48 <bytecpy>

    ctrl_reg1.odr = (uint8_t)val->odr;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	7c3b      	ldrb	r3, [r7, #16]
 80050e2:	f362 03c6 	bfi	r3, r2, #3, #4
 80050e6:	743b      	strb	r3, [r7, #16]
    ctrl_reg1.avg = (uint8_t)val->avg;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	785b      	ldrb	r3, [r3, #1]
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	7c3b      	ldrb	r3, [r7, #16]
 80050f4:	f362 0302 	bfi	r3, r2, #0, #3
 80050f8:	743b      	strb	r3, [r7, #16]
    ctrl_reg2.en_lpfp = (uint8_t)val->lpf & 0x01U;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	789b      	ldrb	r3, [r3, #2]
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	b2da      	uxtb	r2, r3
 8005104:	7b3b      	ldrb	r3, [r7, #12]
 8005106:	f362 1304 	bfi	r3, r2, #4, #1
 800510a:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.lfpf_cfg = ((uint8_t)val->lpf & 0x02U) >> 2;
 800510c:	7b3b      	ldrb	r3, [r7, #12]
 800510e:	f023 0320 	bic.w	r3, r3, #32
 8005112:	733b      	strb	r3, [r7, #12]

    bytecpy(&reg[0], (uint8_t *)&ctrl_reg1);
 8005114:	f107 0210 	add.w	r2, r7, #16
 8005118:	f107 0308 	add.w	r3, r7, #8
 800511c:	4611      	mov	r1, r2
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff fd92 	bl	8004c48 <bytecpy>
    bytecpy(&reg[1], (uint8_t *)&ctrl_reg2);
 8005124:	f107 020c 	add.w	r2, r7, #12
 8005128:	f107 0308 	add.w	r3, r7, #8
 800512c:	3301      	adds	r3, #1
 800512e:	4611      	mov	r1, r2
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff fd89 	bl	8004c48 <bytecpy>
    ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8005136:	f107 0208 	add.w	r2, r7, #8
 800513a:	2302      	movs	r3, #2
 800513c:	2110      	movs	r1, #16
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff fd64 	bl	8004c0c <lps22df_write_reg>
 8005144:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005146:	697b      	ldr	r3, [r7, #20]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <lps22df_mode_get>:
  * @param  val   get the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_get(const stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 800515a:	f107 0208 	add.w	r2, r7, #8
 800515e:	2302      	movs	r3, #2
 8005160:	2110      	movs	r1, #16
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f7ff fd34 	bl	8004bd0 <lps22df_read_reg>
 8005168:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2b00      	cmp	r3, #0
 800516e:	f040 80b6 	bne.w	80052de <lps22df_mode_get+0x18e>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 8005172:	f107 0208 	add.w	r2, r7, #8
 8005176:	f107 0310 	add.w	r3, r7, #16
 800517a:	4611      	mov	r1, r2
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff fd63 	bl	8004c48 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 8005182:	f107 0308 	add.w	r3, r7, #8
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	f107 030c 	add.w	r3, r7, #12
 800518c:	4611      	mov	r1, r2
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff fd5a 	bl	8004c48 <bytecpy>

    switch (ctrl_reg1.odr)
 8005194:	7c3b      	ldrb	r3, [r7, #16]
 8005196:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b08      	cmp	r3, #8
 800519e:	d839      	bhi.n	8005214 <lps22df_mode_get+0xc4>
 80051a0:	a201      	add	r2, pc, #4	@ (adr r2, 80051a8 <lps22df_mode_get+0x58>)
 80051a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a6:	bf00      	nop
 80051a8:	080051cd 	.word	0x080051cd
 80051ac:	080051d5 	.word	0x080051d5
 80051b0:	080051dd 	.word	0x080051dd
 80051b4:	080051e5 	.word	0x080051e5
 80051b8:	080051ed 	.word	0x080051ed
 80051bc:	080051f5 	.word	0x080051f5
 80051c0:	080051fd 	.word	0x080051fd
 80051c4:	08005205 	.word	0x08005205
 80051c8:	0800520d 	.word	0x0800520d
    {
      case LPS22DF_ONE_SHOT:
        val->odr = LPS22DF_ONE_SHOT;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2200      	movs	r2, #0
 80051d0:	701a      	strb	r2, [r3, #0]
        break;
 80051d2:	e023      	b.n	800521c <lps22df_mode_get+0xcc>
      case LPS22DF_1Hz:
        val->odr = LPS22DF_1Hz;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2201      	movs	r2, #1
 80051d8:	701a      	strb	r2, [r3, #0]
        break;
 80051da:	e01f      	b.n	800521c <lps22df_mode_get+0xcc>
      case LPS22DF_4Hz:
        val->odr = LPS22DF_4Hz;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2202      	movs	r2, #2
 80051e0:	701a      	strb	r2, [r3, #0]
        break;
 80051e2:	e01b      	b.n	800521c <lps22df_mode_get+0xcc>
      case LPS22DF_10Hz:
        val->odr = LPS22DF_10Hz;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2203      	movs	r2, #3
 80051e8:	701a      	strb	r2, [r3, #0]
        break;
 80051ea:	e017      	b.n	800521c <lps22df_mode_get+0xcc>
      case LPS22DF_25Hz:
        val->odr = LPS22DF_25Hz;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2204      	movs	r2, #4
 80051f0:	701a      	strb	r2, [r3, #0]
        break;
 80051f2:	e013      	b.n	800521c <lps22df_mode_get+0xcc>
      case LPS22DF_50Hz:
        val->odr = LPS22DF_50Hz;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2205      	movs	r2, #5
 80051f8:	701a      	strb	r2, [r3, #0]
        break;
 80051fa:	e00f      	b.n	800521c <lps22df_mode_get+0xcc>
      case LPS22DF_75Hz:
        val->odr = LPS22DF_75Hz;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	2206      	movs	r2, #6
 8005200:	701a      	strb	r2, [r3, #0]
        break;
 8005202:	e00b      	b.n	800521c <lps22df_mode_get+0xcc>
      case LPS22DF_100Hz:
        val->odr = LPS22DF_100Hz;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2207      	movs	r2, #7
 8005208:	701a      	strb	r2, [r3, #0]
        break;
 800520a:	e007      	b.n	800521c <lps22df_mode_get+0xcc>
      case LPS22DF_200Hz:
        val->odr = LPS22DF_200Hz;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2208      	movs	r2, #8
 8005210:	701a      	strb	r2, [r3, #0]
        break;
 8005212:	e003      	b.n	800521c <lps22df_mode_get+0xcc>
      default:
        val->odr = LPS22DF_ONE_SHOT;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2200      	movs	r2, #0
 8005218:	701a      	strb	r2, [r3, #0]
        break;
 800521a:	bf00      	nop
    }

    switch (ctrl_reg1.avg)
 800521c:	7c3b      	ldrb	r3, [r7, #16]
 800521e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b07      	cmp	r3, #7
 8005226:	d833      	bhi.n	8005290 <lps22df_mode_get+0x140>
 8005228:	a201      	add	r2, pc, #4	@ (adr r2, 8005230 <lps22df_mode_get+0xe0>)
 800522a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522e:	bf00      	nop
 8005230:	08005251 	.word	0x08005251
 8005234:	08005259 	.word	0x08005259
 8005238:	08005261 	.word	0x08005261
 800523c:	08005269 	.word	0x08005269
 8005240:	08005271 	.word	0x08005271
 8005244:	08005279 	.word	0x08005279
 8005248:	08005281 	.word	0x08005281
 800524c:	08005289 	.word	0x08005289
    {
      case LPS22DF_4_AVG:
        val->avg = LPS22DF_4_AVG;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2200      	movs	r2, #0
 8005254:	705a      	strb	r2, [r3, #1]
        break;
 8005256:	e01f      	b.n	8005298 <lps22df_mode_get+0x148>
      case LPS22DF_8_AVG:
        val->avg = LPS22DF_8_AVG;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2201      	movs	r2, #1
 800525c:	705a      	strb	r2, [r3, #1]
        break;
 800525e:	e01b      	b.n	8005298 <lps22df_mode_get+0x148>
      case LPS22DF_16_AVG:
        val->avg = LPS22DF_16_AVG;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	2202      	movs	r2, #2
 8005264:	705a      	strb	r2, [r3, #1]
        break;
 8005266:	e017      	b.n	8005298 <lps22df_mode_get+0x148>
      case LPS22DF_32_AVG:
        val->avg = LPS22DF_32_AVG;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2203      	movs	r2, #3
 800526c:	705a      	strb	r2, [r3, #1]
        break;
 800526e:	e013      	b.n	8005298 <lps22df_mode_get+0x148>
      case LPS22DF_64_AVG:
        val->avg = LPS22DF_64_AVG;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2204      	movs	r2, #4
 8005274:	705a      	strb	r2, [r3, #1]
        break;
 8005276:	e00f      	b.n	8005298 <lps22df_mode_get+0x148>
      case LPS22DF_128_AVG:
        val->avg = LPS22DF_128_AVG;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2205      	movs	r2, #5
 800527c:	705a      	strb	r2, [r3, #1]
        break;
 800527e:	e00b      	b.n	8005298 <lps22df_mode_get+0x148>
      case LPS22DF_256_AVG:
        val->avg = LPS22DF_256_AVG;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2206      	movs	r2, #6
 8005284:	705a      	strb	r2, [r3, #1]
        break;
 8005286:	e007      	b.n	8005298 <lps22df_mode_get+0x148>
      case LPS22DF_512_AVG:
        val->avg = LPS22DF_512_AVG;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	2207      	movs	r2, #7
 800528c:	705a      	strb	r2, [r3, #1]
        break;
 800528e:	e003      	b.n	8005298 <lps22df_mode_get+0x148>
      default:
        val->avg = LPS22DF_4_AVG;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2200      	movs	r2, #0
 8005294:	705a      	strb	r2, [r3, #1]
        break;
 8005296:	bf00      	nop
    }

    switch ((ctrl_reg2.lfpf_cfg << 2) | ctrl_reg2.en_lpfp)
 8005298:	7b3b      	ldrb	r3, [r7, #12]
 800529a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	7b3a      	ldrb	r2, [r7, #12]
 80052a4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	4313      	orrs	r3, r2
 80052ac:	2b03      	cmp	r3, #3
 80052ae:	d00e      	beq.n	80052ce <lps22df_mode_get+0x17e>
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	dc10      	bgt.n	80052d6 <lps22df_mode_get+0x186>
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <lps22df_mode_get+0x16e>
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d004      	beq.n	80052c6 <lps22df_mode_get+0x176>
 80052bc:	e00b      	b.n	80052d6 <lps22df_mode_get+0x186>
    {
      case LPS22DF_LPF_DISABLE:
        val->lpf = LPS22DF_LPF_DISABLE;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2200      	movs	r2, #0
 80052c2:	709a      	strb	r2, [r3, #2]
        break;
 80052c4:	e00b      	b.n	80052de <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_4:
        val->lpf = LPS22DF_LPF_ODR_DIV_4;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2201      	movs	r2, #1
 80052ca:	709a      	strb	r2, [r3, #2]
        break;
 80052cc:	e007      	b.n	80052de <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_9:
        val->lpf = LPS22DF_LPF_ODR_DIV_9;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2203      	movs	r2, #3
 80052d2:	709a      	strb	r2, [r3, #2]
        break;
 80052d4:	e003      	b.n	80052de <lps22df_mode_get+0x18e>
      default:
        val->lpf = LPS22DF_LPF_DISABLE;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2200      	movs	r2, #0
 80052da:	709a      	strb	r2, [r3, #2]
        break;
 80052dc:	bf00      	nop
    }
  }
  return ret;
 80052de:	697b      	ldr	r3, [r7, #20]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <lps22df_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_pressure_raw_get(const stmdev_ctx_t *ctx, uint32_t *buff)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[3];

  ret =  lps22df_read_reg(ctx, LPS22DF_PRESS_OUT_XL, reg, 3);
 80052f2:	f107 0208 	add.w	r2, r7, #8
 80052f6:	2303      	movs	r3, #3
 80052f8:	2128      	movs	r1, #40	@ 0x28
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7ff fc68 	bl	8004bd0 <lps22df_read_reg>
 8005300:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005302:	7abb      	ldrb	r3, [r7, #10]
 8005304:	461a      	mov	r2, r3
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	021b      	lsls	r3, r3, #8
 8005310:	7a7a      	ldrb	r2, [r7, #9]
 8005312:	441a      	add	r2, r3
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	021b      	lsls	r3, r3, #8
 800531e:	7a3a      	ldrb	r2, [r7, #8]
 8005320:	441a      	add	r2, r3
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	021a      	lsls	r2, r3, #8
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	601a      	str	r2, [r3, #0]

  return ret;
 8005330:	68fb      	ldr	r3, [r7, #12]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <lps22df_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *buff)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b084      	sub	sp, #16
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];

  ret =  lps22df_read_reg(ctx, LPS22DF_TEMP_OUT_L, reg, 2);
 8005344:	f107 0208 	add.w	r2, r7, #8
 8005348:	2302      	movs	r3, #2
 800534a:	212b      	movs	r1, #43	@ 0x2b
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff fc3f 	bl	8004bd0 <lps22df_read_reg>
 8005352:	60f8      	str	r0, [r7, #12]
  *buff = (int16_t)reg[1];
 8005354:	7a7b      	ldrb	r3, [r7, #9]
 8005356:	b21a      	sxth	r2, r3
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + (int16_t)reg[0];
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005362:	b29b      	uxth	r3, r3
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	b29b      	uxth	r3, r3
 8005368:	7a3a      	ldrb	r2, [r7, #8]
 800536a:	4413      	add	r3, r2
 800536c:	b29b      	uxth	r3, r3
 800536e:	b21a      	sxth	r2, r3
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	801a      	strh	r2, [r3, #0]

  return ret;
 8005374:	68fb      	ldr	r3, [r7, #12]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <LSM6DSO16IS_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_RegisterBusIO(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_IO_t *pIO)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d103      	bne.n	800539c <LSM6DSO16IS_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO16IS_ERROR;
 8005394:	f04f 33ff 	mov.w	r3, #4294967295
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	e04d      	b.n	8005438 <LSM6DSO16IS_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	7b1a      	ldrb	r2, [r3, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	695a      	ldr	r2, [r3, #20]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	699a      	ldr	r2, [r3, #24]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005444 <LSM6DSO16IS_RegisterBusIO+0xc4>)
 80053d8:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a1a      	ldr	r2, [pc, #104]	@ (8005448 <LSM6DSO16IS_RegisterBusIO+0xc8>)
 80053de:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d103      	bne.n	80053f6 <LSM6DSO16IS_RegisterBusIO+0x76>
    {
      ret = LSM6DSO16IS_ERROR;
 80053ee:	f04f 33ff 	mov.w	r3, #4294967295
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	e020      	b.n	8005438 <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO16IS_OK)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4798      	blx	r3
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <LSM6DSO16IS_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO16IS_ERROR;
 8005402:	f04f 33ff 	mov.w	r3, #4294967295
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	e016      	b.n	8005438 <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO16IS_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d112      	bne.n	8005438 <LSM6DSO16IS_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10d      	bne.n	8005438 <LSM6DSO16IS_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 800541c:	230c      	movs	r3, #12
 800541e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO16IS_Write_Reg(pObj, LSM6DSO16IS_CTRL3_C, data) != LSM6DSO16IS_OK)
 8005420:	7afb      	ldrb	r3, [r7, #11]
 8005422:	461a      	mov	r2, r3
 8005424:	2112      	movs	r1, #18
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fdbe 	bl	8005fa8 <LSM6DSO16IS_Write_Reg>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d002      	beq.n	8005438 <LSM6DSO16IS_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO16IS_ERROR;
 8005432:	f04f 33ff 	mov.w	r3, #4294967295
 8005436:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005438:	68fb      	ldr	r3, [r7, #12]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	08006471 	.word	0x08006471
 8005448:	080064a7 	.word	0x080064a7

0800544c <LSM6DSO16IS_Init>:
  * @brief  Initialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Init(LSM6DSO16IS_Object_t *pObj)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	60fb      	str	r3, [r7, #12]

  /* Set main memory bank */
  if (LSM6DSO16IS_Set_Mem_Bank(pObj, (uint8_t)LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 8005458:	2100      	movs	r1, #0
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 fdc1 	bl	8005fe2 <LSM6DSO16IS_Set_Mem_Bank>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <LSM6DSO16IS_Init+0x20>
  {
    ret = LSM6DSO16IS_ERROR;
 8005466:	f04f 33ff 	mov.w	r3, #4294967295
 800546a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso16is_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3320      	adds	r3, #32
 8005470:	2101      	movs	r1, #1
 8005472:	4618      	mov	r0, r3
 8005474:	f001 fbdc 	bl	8006c30 <lsm6dso16is_auto_increment_set>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <LSM6DSO16IS_Init+0x38>
  {
    ret = LSM6DSO16IS_ERROR;
 800547e:	f04f 33ff 	mov.w	r3, #4294967295
 8005482:	60fb      	str	r3, [r7, #12]
  }

  /* Enable BDU */
  if (lsm6dso16is_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3320      	adds	r3, #32
 8005488:	2101      	movs	r1, #1
 800548a:	4618      	mov	r0, r3
 800548c:	f001 fbf6 	bl	8006c7c <lsm6dso16is_block_data_update_set>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <LSM6DSO16IS_Init+0x50>
  {
    ret = LSM6DSO16IS_ERROR;
 8005496:	f04f 33ff 	mov.w	r3, #4294967295
 800549a:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2204      	movs	r2, #4
 80054a0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3320      	adds	r3, #32
 80054a8:	2100      	movs	r1, #0
 80054aa:	4618      	mov	r0, r3
 80054ac:	f001 f910 	bl	80066d0 <lsm6dso16is_xl_data_rate_set>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <LSM6DSO16IS_Init+0x70>
  {
    ret = LSM6DSO16IS_ERROR;
 80054b6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ba:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2g) != LSM6DSO16IS_OK)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3320      	adds	r3, #32
 80054c0:	2100      	movs	r1, #0
 80054c2:	4618      	mov	r0, r3
 80054c4:	f001 f8a6 	bl	8006614 <lsm6dso16is_xl_full_scale_set>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <LSM6DSO16IS_Init+0x88>
  {
    ret = LSM6DSO16IS_ERROR;
 80054ce:	f04f 33ff 	mov.w	r3, #4294967295
 80054d2:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2204      	movs	r2, #4
 80054d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3320      	adds	r3, #32
 80054e0:	2100      	movs	r1, #0
 80054e2:	4618      	mov	r0, r3
 80054e4:	f001 faa8 	bl	8006a38 <lsm6dso16is_gy_data_rate_set>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <LSM6DSO16IS_Init+0xa8>
  {
    ret = LSM6DSO16IS_ERROR;
 80054ee:	f04f 33ff 	mov.w	r3, #4294967295
 80054f2:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2000dps) != LSM6DSO16IS_OK)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3320      	adds	r3, #32
 80054f8:	2103      	movs	r1, #3
 80054fa:	4618      	mov	r0, r3
 80054fc:	f001 fa10 	bl	8006920 <lsm6dso16is_gy_full_scale_set>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <LSM6DSO16IS_Init+0xc0>
  {
    ret = LSM6DSO16IS_ERROR;
 8005506:	f04f 33ff 	mov.w	r3, #4294967295
 800550a:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d103      	bne.n	800551a <LSM6DSO16IS_Init+0xce>
  {
    pObj->is_initialized = 1;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 800551a:	68fb      	ldr	r3, [r7, #12]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <LSM6DSO16IS_DeInit>:
  * @brief  Deinitialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_DeInit(LSM6DSO16IS_Object_t *pObj)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	60fb      	str	r3, [r7, #12]

  /* Disable the component */
  if (LSM6DSO16IS_ACC_Disable(pObj) != LSM6DSO16IS_OK)
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f890 	bl	8005656 <LSM6DSO16IS_ACC_Disable>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <LSM6DSO16IS_DeInit+0x1e>
  {
    ret = LSM6DSO16IS_ERROR;
 800553c:	f04f 33ff 	mov.w	r3, #4294967295
 8005540:	60fb      	str	r3, [r7, #12]
  }

  if (LSM6DSO16IS_GYRO_Disable(pObj) != LSM6DSO16IS_OK)
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fad0 	bl	8005ae8 <LSM6DSO16IS_GYRO_Disable>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <LSM6DSO16IS_DeInit+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 800554e:	f04f 33ff 	mov.w	r3, #4294967295
 8005552:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10b      	bne.n	8005572 <LSM6DSO16IS_DeInit+0x4e>
  {
    /* Reset output data rate. */
    pObj->acc_odr = LSM6DSO16IS_XL_ODR_OFF;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    pObj->gyro_odr = LSM6DSO16IS_GY_ODR_OFF;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    pObj->is_initialized = 0;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 8005572:	68fb      	ldr	r3, [r7, #12]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <LSM6DSO16IS_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ReadID(LSM6DSO16IS_Object_t *pObj, uint8_t *Id)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_device_id_get(&(pObj->Ctx), Id) != LSM6DSO16IS_OK)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3320      	adds	r3, #32
 800558e:	6839      	ldr	r1, [r7, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f001 f808 	bl	80065a6 <lsm6dso16is_device_id_get>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <LSM6DSO16IS_ReadID+0x26>
  {
    ret = LSM6DSO16IS_ERROR;
 800559c:	f04f 33ff 	mov.w	r3, #4294967295
 80055a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80055a2:	68fb      	ldr	r3, [r7, #12]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <LSM6DSO16IS_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO16IS sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GetCapabilities(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Capabilities_t *Capabilities)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2201      	movs	r2, #1
 80055ba:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2201      	movs	r2, #1
 80055c0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2200      	movs	r2, #0
 80055c6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	2200      	movs	r2, #0
 80055cc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80055d4:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2210      	movs	r2, #16
 80055da:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	2200      	movs	r2, #0
 80055e0:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 3333.0f;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	4a07      	ldr	r2, [pc, #28]	@ (8005604 <LSM6DSO16IS_GetCapabilities+0x58>)
 80055e6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 3333.0f;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	4a06      	ldr	r2, [pc, #24]	@ (8005604 <LSM6DSO16IS_GetCapabilities+0x58>)
 80055ec:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	619a      	str	r2, [r3, #24]

  return LSM6DSO16IS_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	45505000 	.word	0x45505000

08005608 <LSM6DSO16IS_ACC_Enable>:
  * @brief  Enable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Enable(LSM6DSO16IS_Object_t *pObj)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800561a:	2b01      	cmp	r3, #1
 800561c:	d102      	bne.n	8005624 <LSM6DSO16IS_ACC_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	e013      	b.n	800564c <LSM6DSO16IS_ACC_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO16IS_OK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f103 0220 	add.w	r2, r3, #32
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005630:	4619      	mov	r1, r3
 8005632:	4610      	mov	r0, r2
 8005634:	f001 f84c 	bl	80066d0 <lsm6dso16is_xl_data_rate_set>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <LSM6DSO16IS_ACC_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 800563e:	f04f 33ff 	mov.w	r3, #4294967295
 8005642:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 1;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 800564c:	68fb      	ldr	r3, [r7, #12]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <LSM6DSO16IS_ACC_Disable>:
  * @brief  Disable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Disable(LSM6DSO16IS_Object_t *pObj)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005668:	2b00      	cmp	r3, #0
 800566a:	d102      	bne.n	8005672 <LSM6DSO16IS_ACC_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	e01e      	b.n	80056b0 <LSM6DSO16IS_ACC_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO16IS_OK)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f103 0220 	add.w	r2, r3, #32
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3333      	adds	r3, #51	@ 0x33
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f001 f866 	bl	8006750 <lsm6dso16is_xl_data_rate_get>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <LSM6DSO16IS_ACC_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 800568a:	f04f 33ff 	mov.w	r3, #4294967295
 800568e:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3320      	adds	r3, #32
 8005694:	2100      	movs	r1, #0
 8005696:	4618      	mov	r0, r3
 8005698:	f001 f81a 	bl	80066d0 <lsm6dso16is_xl_data_rate_set>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <LSM6DSO16IS_ACC_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 80056a2:	f04f 33ff 	mov.w	r3, #4294967295
 80056a6:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 0;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 80056b0:	68fb      	ldr	r3, [r7, #12]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <LSM6DSO16IS_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3320      	adds	r3, #32
 80056ce:	f107 020b 	add.w	r2, r7, #11
 80056d2:	4611      	mov	r1, r2
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 ffc3 	bl	8006660 <lsm6dso16is_xl_full_scale_get>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <LSM6DSO16IS_ACC_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80056e0:	f04f 33ff 	mov.w	r3, #4294967295
 80056e4:	60fb      	str	r3, [r7, #12]
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80056e6:	7afb      	ldrb	r3, [r7, #11]
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	d81b      	bhi.n	8005724 <LSM6DSO16IS_ACC_GetSensitivity+0x68>
 80056ec:	a201      	add	r2, pc, #4	@ (adr r2, 80056f4 <LSM6DSO16IS_ACC_GetSensitivity+0x38>)
 80056ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f2:	bf00      	nop
 80056f4:	08005705 	.word	0x08005705
 80056f8:	0800571d 	.word	0x0800571d
 80056fc:	0800570d 	.word	0x0800570d
 8005700:	08005715 	.word	0x08005715
  {
    case LSM6DSO16IS_2g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_2G;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	4a0c      	ldr	r2, [pc, #48]	@ (8005738 <LSM6DSO16IS_ACC_GetSensitivity+0x7c>)
 8005708:	601a      	str	r2, [r3, #0]
      break;
 800570a:	e00f      	b.n	800572c <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_4g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_4G;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	4a0b      	ldr	r2, [pc, #44]	@ (800573c <LSM6DSO16IS_ACC_GetSensitivity+0x80>)
 8005710:	601a      	str	r2, [r3, #0]
      break;
 8005712:	e00b      	b.n	800572c <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_8g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_8G;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	4a0a      	ldr	r2, [pc, #40]	@ (8005740 <LSM6DSO16IS_ACC_GetSensitivity+0x84>)
 8005718:	601a      	str	r2, [r3, #0]
      break;
 800571a:	e007      	b.n	800572c <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_16g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_16G;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	4a09      	ldr	r2, [pc, #36]	@ (8005744 <LSM6DSO16IS_ACC_GetSensitivity+0x88>)
 8005720:	601a      	str	r2, [r3, #0]
      break;
 8005722:	e003      	b.n	800572c <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 8005724:	f04f 33ff 	mov.w	r3, #4294967295
 8005728:	60fb      	str	r3, [r7, #12]
      break;
 800572a:	bf00      	nop
  }

  return ret;
 800572c:	68fb      	ldr	r3, [r7, #12]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	3d79db23 	.word	0x3d79db23
 800573c:	3df9db23 	.word	0x3df9db23
 8005740:	3e79db23 	.word	0x3e79db23
 8005744:	3ef9db23 	.word	0x3ef9db23

08005748 <LSM6DSO16IS_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	3320      	adds	r3, #32
 800575a:	f107 020b 	add.w	r2, r7, #11
 800575e:	4611      	mov	r1, r2
 8005760:	4618      	mov	r0, r3
 8005762:	f000 fff5 	bl	8006750 <lsm6dso16is_xl_data_rate_get>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <LSM6DSO16IS_ACC_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 800576c:	f04f 33ff 	mov.w	r3, #4294967295
 8005770:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 8005772:	7afb      	ldrb	r3, [r7, #11]
 8005774:	2b1b      	cmp	r3, #27
 8005776:	d86c      	bhi.n	8005852 <LSM6DSO16IS_ACC_GetOutputDataRate+0x10a>
 8005778:	a201      	add	r2, pc, #4	@ (adr r2, 8005780 <LSM6DSO16IS_ACC_GetOutputDataRate+0x38>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	080057f1 	.word	0x080057f1
 8005784:	08005803 	.word	0x08005803
 8005788:	0800580b 	.word	0x0800580b
 800578c:	08005813 	.word	0x08005813
 8005790:	0800581b 	.word	0x0800581b
 8005794:	08005823 	.word	0x08005823
 8005798:	0800582b 	.word	0x0800582b
 800579c:	08005833 	.word	0x08005833
 80057a0:	0800583b 	.word	0x0800583b
 80057a4:	08005843 	.word	0x08005843
 80057a8:	0800584b 	.word	0x0800584b
 80057ac:	08005853 	.word	0x08005853
 80057b0:	08005853 	.word	0x08005853
 80057b4:	08005853 	.word	0x08005853
 80057b8:	08005853 	.word	0x08005853
 80057bc:	08005853 	.word	0x08005853
 80057c0:	08005853 	.word	0x08005853
 80057c4:	08005803 	.word	0x08005803
 80057c8:	0800580b 	.word	0x0800580b
 80057cc:	08005813 	.word	0x08005813
 80057d0:	0800581b 	.word	0x0800581b
 80057d4:	08005823 	.word	0x08005823
 80057d8:	0800582b 	.word	0x0800582b
 80057dc:	08005833 	.word	0x08005833
 80057e0:	0800583b 	.word	0x0800583b
 80057e4:	08005843 	.word	0x08005843
 80057e8:	0800584b 	.word	0x0800584b
 80057ec:	080057fb 	.word	0x080057fb
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *Odr = 0.0f;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
      break;
 80057f8:	e02f      	b.n	800585a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *Odr = 1.6f;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	4a19      	ldr	r2, [pc, #100]	@ (8005864 <LSM6DSO16IS_ACC_GetOutputDataRate+0x11c>)
 80057fe:	601a      	str	r2, [r3, #0]
      break;
 8005800:	e02b      	b.n	800585a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	4a18      	ldr	r2, [pc, #96]	@ (8005868 <LSM6DSO16IS_ACC_GetOutputDataRate+0x120>)
 8005806:	601a      	str	r2, [r3, #0]
      break;
 8005808:	e027      	b.n	800585a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *Odr = 26.0f;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	4a17      	ldr	r2, [pc, #92]	@ (800586c <LSM6DSO16IS_ACC_GetOutputDataRate+0x124>)
 800580e:	601a      	str	r2, [r3, #0]
      break;
 8005810:	e023      	b.n	800585a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	4a16      	ldr	r2, [pc, #88]	@ (8005870 <LSM6DSO16IS_ACC_GetOutputDataRate+0x128>)
 8005816:	601a      	str	r2, [r3, #0]
      break;
 8005818:	e01f      	b.n	800585a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	4a15      	ldr	r2, [pc, #84]	@ (8005874 <LSM6DSO16IS_ACC_GetOutputDataRate+0x12c>)
 800581e:	601a      	str	r2, [r3, #0]
      break;
 8005820:	e01b      	b.n	800585a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	4a14      	ldr	r2, [pc, #80]	@ (8005878 <LSM6DSO16IS_ACC_GetOutputDataRate+0x130>)
 8005826:	601a      	str	r2, [r3, #0]
      break;
 8005828:	e017      	b.n	800585a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	4a13      	ldr	r2, [pc, #76]	@ (800587c <LSM6DSO16IS_ACC_GetOutputDataRate+0x134>)
 800582e:	601a      	str	r2, [r3, #0]
      break;
 8005830:	e013      	b.n	800585a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	4a12      	ldr	r2, [pc, #72]	@ (8005880 <LSM6DSO16IS_ACC_GetOutputDataRate+0x138>)
 8005836:	601a      	str	r2, [r3, #0]
      break;
 8005838:	e00f      	b.n	800585a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *Odr = 1667.0f;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	4a11      	ldr	r2, [pc, #68]	@ (8005884 <LSM6DSO16IS_ACC_GetOutputDataRate+0x13c>)
 800583e:	601a      	str	r2, [r3, #0]
      break;
 8005840:	e00b      	b.n	800585a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *Odr = 3333.0f;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	4a10      	ldr	r2, [pc, #64]	@ (8005888 <LSM6DSO16IS_ACC_GetOutputDataRate+0x140>)
 8005846:	601a      	str	r2, [r3, #0]
      break;
 8005848:	e007      	b.n	800585a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *Odr = 6667.0f;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	4a0f      	ldr	r2, [pc, #60]	@ (800588c <LSM6DSO16IS_ACC_GetOutputDataRate+0x144>)
 800584e:	601a      	str	r2, [r3, #0]
      break;
 8005850:	e003      	b.n	800585a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    default:
      ret = LSM6DSO16IS_ERROR;
 8005852:	f04f 33ff 	mov.w	r3, #4294967295
 8005856:	60fb      	str	r3, [r7, #12]
      break;
 8005858:	bf00      	nop
  }

  return ret;
 800585a:	68fb      	ldr	r3, [r7, #12]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	3fcccccd 	.word	0x3fcccccd
 8005868:	41480000 	.word	0x41480000
 800586c:	41d00000 	.word	0x41d00000
 8005870:	42500000 	.word	0x42500000
 8005874:	42d00000 	.word	0x42d00000
 8005878:	43500000 	.word	0x43500000
 800587c:	43d00000 	.word	0x43d00000
 8005880:	44504000 	.word	0x44504000
 8005884:	44d06000 	.word	0x44d06000
 8005888:	45505000 	.word	0x45505000
 800588c:	45d05800 	.word	0x45d05800

08005890 <LSM6DSO16IS_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d106      	bne.n	80058b4 <LSM6DSO16IS_ACC_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80058a6:	ed97 0a00 	vldr	s0, [r7]
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fbc0 	bl	8006030 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>
 80058b0:	60f8      	str	r0, [r7, #12]
 80058b2:	e005      	b.n	80058c0 <LSM6DSO16IS_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80058b4:	ed97 0a00 	vldr	s0, [r7]
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fc47 	bl	800614c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>
 80058be:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80058c0:	68fb      	ldr	r3, [r7, #12]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
	...

080058cc <LSM6DSO16IS_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t *FullScale)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3320      	adds	r3, #32
 80058de:	f107 020b 	add.w	r2, r7, #11
 80058e2:	4611      	mov	r1, r2
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 febb 	bl	8006660 <lsm6dso16is_xl_full_scale_get>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <LSM6DSO16IS_ACC_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80058f0:	f04f 33ff 	mov.w	r3, #4294967295
 80058f4:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 80058f6:	7afb      	ldrb	r3, [r7, #11]
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d81b      	bhi.n	8005934 <LSM6DSO16IS_ACC_GetFullScale+0x68>
 80058fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005904 <LSM6DSO16IS_ACC_GetFullScale+0x38>)
 80058fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005902:	bf00      	nop
 8005904:	08005915 	.word	0x08005915
 8005908:	0800592d 	.word	0x0800592d
 800590c:	0800591d 	.word	0x0800591d
 8005910:	08005925 	.word	0x08005925
  {
    case LSM6DSO16IS_2g:
      *FullScale =  2;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2202      	movs	r2, #2
 8005918:	601a      	str	r2, [r3, #0]
      break;
 800591a:	e00f      	b.n	800593c <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_4g:
      *FullScale =  4;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2204      	movs	r2, #4
 8005920:	601a      	str	r2, [r3, #0]
      break;
 8005922:	e00b      	b.n	800593c <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_8g:
      *FullScale =  8;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2208      	movs	r2, #8
 8005928:	601a      	str	r2, [r3, #0]
      break;
 800592a:	e007      	b.n	800593c <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_16g:
      *FullScale = 16;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2210      	movs	r2, #16
 8005930:	601a      	str	r2, [r3, #0]
      break;
 8005932:	e003      	b.n	800593c <LSM6DSO16IS_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 8005934:	f04f 33ff 	mov.w	r3, #4294967295
 8005938:	60fb      	str	r3, [r7, #12]
      break;
 800593a:	bf00      	nop
  }

  return ret;
 800593c:	68fb      	ldr	r3, [r7, #12]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop

08005948 <LSM6DSO16IS_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t new_fs;

  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
           : (FullScale <= 4) ? LSM6DSO16IS_4g
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b02      	cmp	r3, #2
 800595a:	dd0b      	ble.n	8005974 <LSM6DSO16IS_ACC_SetFullScale+0x2c>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b04      	cmp	r3, #4
 8005960:	dd06      	ble.n	8005970 <LSM6DSO16IS_ACC_SetFullScale+0x28>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b08      	cmp	r3, #8
 8005966:	dc01      	bgt.n	800596c <LSM6DSO16IS_ACC_SetFullScale+0x24>
 8005968:	2303      	movs	r3, #3
 800596a:	e004      	b.n	8005976 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 800596c:	2301      	movs	r3, #1
 800596e:	e002      	b.n	8005976 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8005970:	2302      	movs	r3, #2
 8005972:	e000      	b.n	8005976 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 8005974:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
 8005976:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 8) ? LSM6DSO16IS_8g
           :                    LSM6DSO16IS_16g;

  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	3320      	adds	r3, #32
 800597c:	7afa      	ldrb	r2, [r7, #11]
 800597e:	4611      	mov	r1, r2
 8005980:	4618      	mov	r0, r3
 8005982:	f000 fe47 	bl	8006614 <lsm6dso16is_xl_full_scale_set>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <LSM6DSO16IS_ACC_SetFullScale+0x4a>
  {
    ret = LSM6DSO16IS_ERROR;
 800598c:	f04f 33ff 	mov.w	r3, #4294967295
 8005990:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005992:	68fb      	ldr	r3, [r7, #12]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <LSM6DSO16IS_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3320      	adds	r3, #32
 80059ae:	f107 020c 	add.w	r2, r7, #12
 80059b2:	4611      	mov	r1, r2
 80059b4:	4618      	mov	r0, r3
 80059b6:	f001 f9cf 	bl	8006d58 <lsm6dso16is_acceleration_raw_get>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <LSM6DSO16IS_ACC_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80059c0:	f04f 33ff 	mov.w	r3, #4294967295
 80059c4:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 80059c6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 80059ce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 80059d6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	809a      	strh	r2, [r3, #4]

  return ret;
 80059de:	697b      	ldr	r3, [r7, #20]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3718      	adds	r7, #24
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <LSM6DSO16IS_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *Acceleration)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 80059f6:	f04f 0300 	mov.w	r3, #0
 80059fa:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3320      	adds	r3, #32
 8005a00:	f107 020c 	add.w	r2, r7, #12
 8005a04:	4611      	mov	r1, r2
 8005a06:	4618      	mov	r0, r3
 8005a08:	f001 f9a6 	bl	8006d58 <lsm6dso16is_acceleration_raw_get>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <LSM6DSO16IS_ACC_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8005a12:	f04f 33ff 	mov.w	r3, #4294967295
 8005a16:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 8005a18:	f107 0308 	add.w	r3, r7, #8
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff fe4c 	bl	80056bc <LSM6DSO16IS_ACC_GetSensitivity>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <LSM6DSO16IS_ACC_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 8005a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2e:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8005a30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005a34:	ee07 3a90 	vmov	s15, r3
 8005a38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a48:	ee17 2a90 	vmov	r2, s15
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8005a50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a54:	ee07 3a90 	vmov	s15, r3
 8005a58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a68:	ee17 2a90 	vmov	r2, s15
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 8005a70:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005a74:	ee07 3a90 	vmov	s15, r3
 8005a78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a88:	ee17 2a90 	vmov	r2, s15
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	609a      	str	r2, [r3, #8]

  return ret;
 8005a90:	697b      	ldr	r3, [r7, #20]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <LSM6DSO16IS_GYRO_Enable>:
  * @brief  Enable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Enable(LSM6DSO16IS_Object_t *pObj)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d102      	bne.n	8005ab6 <LSM6DSO16IS_GYRO_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	e013      	b.n	8005ade <LSM6DSO16IS_GYRO_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO16IS_OK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f103 0220 	add.w	r2, r3, #32
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	f000 ffb7 	bl	8006a38 <lsm6dso16is_gy_data_rate_set>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <LSM6DSO16IS_GYRO_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 8005ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad4:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 1;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8005ade:	68fb      	ldr	r3, [r7, #12]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <LSM6DSO16IS_GYRO_Disable>:
  * @brief  Disable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Disable(LSM6DSO16IS_Object_t *pObj)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d102      	bne.n	8005b04 <LSM6DSO16IS_GYRO_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	60fb      	str	r3, [r7, #12]
 8005b02:	e01e      	b.n	8005b42 <LSM6DSO16IS_GYRO_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO16IS_OK)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f103 0220 	add.w	r2, r3, #32
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	3334      	adds	r3, #52	@ 0x34
 8005b0e:	4619      	mov	r1, r3
 8005b10:	4610      	mov	r0, r2
 8005b12:	f000 ffd1 	bl	8006ab8 <lsm6dso16is_gy_data_rate_get>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <LSM6DSO16IS_GYRO_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 8005b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b20:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	3320      	adds	r3, #32
 8005b26:	2100      	movs	r1, #0
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 ff85 	bl	8006a38 <lsm6dso16is_gy_data_rate_set>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <LSM6DSO16IS_GYRO_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 8005b34:	f04f 33ff 	mov.w	r3, #4294967295
 8005b38:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 0;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8005b42:	68fb      	ldr	r3, [r7, #12]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <LSM6DSO16IS_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	3320      	adds	r3, #32
 8005b5e:	f107 020b 	add.w	r2, r7, #11
 8005b62:	4611      	mov	r1, r2
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 ff0b 	bl	8006980 <lsm6dso16is_gy_full_scale_get>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <LSM6DSO16IS_GYRO_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8005b70:	f04f 33ff 	mov.w	r3, #4294967295
 8005b74:	60fb      	str	r3, [r7, #12]
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8005b76:	7afb      	ldrb	r3, [r7, #11]
 8005b78:	2b10      	cmp	r3, #16
 8005b7a:	d839      	bhi.n	8005bf0 <LSM6DSO16IS_GYRO_GetSensitivity+0xa4>
 8005b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b84 <LSM6DSO16IS_GYRO_GetSensitivity+0x38>)
 8005b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b82:	bf00      	nop
 8005b84:	08005bd1 	.word	0x08005bd1
 8005b88:	08005bd9 	.word	0x08005bd9
 8005b8c:	08005be1 	.word	0x08005be1
 8005b90:	08005be9 	.word	0x08005be9
 8005b94:	08005bf1 	.word	0x08005bf1
 8005b98:	08005bf1 	.word	0x08005bf1
 8005b9c:	08005bf1 	.word	0x08005bf1
 8005ba0:	08005bf1 	.word	0x08005bf1
 8005ba4:	08005bf1 	.word	0x08005bf1
 8005ba8:	08005bf1 	.word	0x08005bf1
 8005bac:	08005bf1 	.word	0x08005bf1
 8005bb0:	08005bf1 	.word	0x08005bf1
 8005bb4:	08005bf1 	.word	0x08005bf1
 8005bb8:	08005bf1 	.word	0x08005bf1
 8005bbc:	08005bf1 	.word	0x08005bf1
 8005bc0:	08005bf1 	.word	0x08005bf1
 8005bc4:	08005bc9 	.word	0x08005bc9
  {
    case LSM6DSO16IS_125dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_125DPS;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	4a0e      	ldr	r2, [pc, #56]	@ (8005c04 <LSM6DSO16IS_GYRO_GetSensitivity+0xb8>)
 8005bcc:	601a      	str	r2, [r3, #0]
      break;
 8005bce:	e013      	b.n	8005bf8 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_250dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_250DPS;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	4a0d      	ldr	r2, [pc, #52]	@ (8005c08 <LSM6DSO16IS_GYRO_GetSensitivity+0xbc>)
 8005bd4:	601a      	str	r2, [r3, #0]
      break;
 8005bd6:	e00f      	b.n	8005bf8 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_500dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_500DPS;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	4a0c      	ldr	r2, [pc, #48]	@ (8005c0c <LSM6DSO16IS_GYRO_GetSensitivity+0xc0>)
 8005bdc:	601a      	str	r2, [r3, #0]
      break;
 8005bde:	e00b      	b.n	8005bf8 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_1000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_1000DPS;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	4a0b      	ldr	r2, [pc, #44]	@ (8005c10 <LSM6DSO16IS_GYRO_GetSensitivity+0xc4>)
 8005be4:	601a      	str	r2, [r3, #0]
      break;
 8005be6:	e007      	b.n	8005bf8 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_2000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_2000DPS;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	4a0a      	ldr	r2, [pc, #40]	@ (8005c14 <LSM6DSO16IS_GYRO_GetSensitivity+0xc8>)
 8005bec:	601a      	str	r2, [r3, #0]
      break;
 8005bee:	e003      	b.n	8005bf8 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    default:
      ret = LSM6DSO16IS_ERROR;
 8005bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf4:	60fb      	str	r3, [r7, #12]
      break;
 8005bf6:	bf00      	nop
  }

  return ret;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	408c0000 	.word	0x408c0000
 8005c08:	410c0000 	.word	0x410c0000
 8005c0c:	418c0000 	.word	0x418c0000
 8005c10:	420c0000 	.word	0x420c0000
 8005c14:	428c0000 	.word	0x428c0000

08005c18 <LSM6DSO16IS_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3320      	adds	r3, #32
 8005c2a:	f107 020b 	add.w	r2, r7, #11
 8005c2e:	4611      	mov	r1, r2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 ff41 	bl	8006ab8 <lsm6dso16is_gy_data_rate_get>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8005c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c40:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 8005c42:	7afb      	ldrb	r3, [r7, #11]
 8005c44:	2b1a      	cmp	r3, #26
 8005c46:	d866      	bhi.n	8005d16 <LSM6DSO16IS_GYRO_GetOutputDataRate+0xfe>
 8005c48:	a201      	add	r2, pc, #4	@ (adr r2, 8005c50 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x38>)
 8005c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4e:	bf00      	nop
 8005c50:	08005cbd 	.word	0x08005cbd
 8005c54:	08005cc7 	.word	0x08005cc7
 8005c58:	08005ccf 	.word	0x08005ccf
 8005c5c:	08005cd7 	.word	0x08005cd7
 8005c60:	08005cdf 	.word	0x08005cdf
 8005c64:	08005ce7 	.word	0x08005ce7
 8005c68:	08005cef 	.word	0x08005cef
 8005c6c:	08005cf7 	.word	0x08005cf7
 8005c70:	08005cff 	.word	0x08005cff
 8005c74:	08005d07 	.word	0x08005d07
 8005c78:	08005d0f 	.word	0x08005d0f
 8005c7c:	08005d17 	.word	0x08005d17
 8005c80:	08005d17 	.word	0x08005d17
 8005c84:	08005d17 	.word	0x08005d17
 8005c88:	08005d17 	.word	0x08005d17
 8005c8c:	08005d17 	.word	0x08005d17
 8005c90:	08005d17 	.word	0x08005d17
 8005c94:	08005cc7 	.word	0x08005cc7
 8005c98:	08005ccf 	.word	0x08005ccf
 8005c9c:	08005cd7 	.word	0x08005cd7
 8005ca0:	08005cdf 	.word	0x08005cdf
 8005ca4:	08005ce7 	.word	0x08005ce7
 8005ca8:	08005cef 	.word	0x08005cef
 8005cac:	08005cf7 	.word	0x08005cf7
 8005cb0:	08005cff 	.word	0x08005cff
 8005cb4:	08005d07 	.word	0x08005d07
 8005cb8:	08005d0f 	.word	0x08005d0f
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *Odr = 0.0f;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
      break;
 8005cc4:	e02b      	b.n	8005d1e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	4a17      	ldr	r2, [pc, #92]	@ (8005d28 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x110>)
 8005cca:	601a      	str	r2, [r3, #0]
      break;
 8005ccc:	e027      	b.n	8005d1e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *Odr = 26.0f;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	4a16      	ldr	r2, [pc, #88]	@ (8005d2c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x114>)
 8005cd2:	601a      	str	r2, [r3, #0]
      break;
 8005cd4:	e023      	b.n	8005d1e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	4a15      	ldr	r2, [pc, #84]	@ (8005d30 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x118>)
 8005cda:	601a      	str	r2, [r3, #0]
      break;
 8005cdc:	e01f      	b.n	8005d1e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	4a14      	ldr	r2, [pc, #80]	@ (8005d34 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x11c>)
 8005ce2:	601a      	str	r2, [r3, #0]
      break;
 8005ce4:	e01b      	b.n	8005d1e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	4a13      	ldr	r2, [pc, #76]	@ (8005d38 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x120>)
 8005cea:	601a      	str	r2, [r3, #0]
      break;
 8005cec:	e017      	b.n	8005d1e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	4a12      	ldr	r2, [pc, #72]	@ (8005d3c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x124>)
 8005cf2:	601a      	str	r2, [r3, #0]
      break;
 8005cf4:	e013      	b.n	8005d1e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	4a11      	ldr	r2, [pc, #68]	@ (8005d40 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x128>)
 8005cfa:	601a      	str	r2, [r3, #0]
      break;
 8005cfc:	e00f      	b.n	8005d1e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *Odr =  1667.0f;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	4a10      	ldr	r2, [pc, #64]	@ (8005d44 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x12c>)
 8005d02:	601a      	str	r2, [r3, #0]
      break;
 8005d04:	e00b      	b.n	8005d1e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *Odr =  3333.0f;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	4a0f      	ldr	r2, [pc, #60]	@ (8005d48 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x130>)
 8005d0a:	601a      	str	r2, [r3, #0]
      break;
 8005d0c:	e007      	b.n	8005d1e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *Odr =  6667.0f;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	4a0e      	ldr	r2, [pc, #56]	@ (8005d4c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x134>)
 8005d12:	601a      	str	r2, [r3, #0]
      break;
 8005d14:	e003      	b.n	8005d1e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    default:
      ret = LSM6DSO16IS_ERROR;
 8005d16:	f04f 33ff 	mov.w	r3, #4294967295
 8005d1a:	60fb      	str	r3, [r7, #12]
      break;
 8005d1c:	bf00      	nop
  }

  return ret;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	41480000 	.word	0x41480000
 8005d2c:	41d00000 	.word	0x41d00000
 8005d30:	42500000 	.word	0x42500000
 8005d34:	42d00000 	.word	0x42d00000
 8005d38:	43500000 	.word	0x43500000
 8005d3c:	43d00000 	.word	0x43d00000
 8005d40:	44504000 	.word	0x44504000
 8005d44:	44d06000 	.word	0x44d06000
 8005d48:	45505000 	.word	0x45505000
 8005d4c:	45d05800 	.word	0x45d05800

08005d50 <LSM6DSO16IS_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d106      	bne.n	8005d74 <LSM6DSO16IS_GYRO_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005d66:	ed97 0a00 	vldr	s0, [r7]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fa70 	bl	8006250 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	e005      	b.n	8005d80 <LSM6DSO16IS_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005d74:	ed97 0a00 	vldr	s0, [r7]
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 faf7 	bl	800636c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>
 8005d7e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005d80:	68fb      	ldr	r3, [r7, #12]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <LSM6DSO16IS_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t  *FullScale)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	3320      	adds	r3, #32
 8005d9e:	f107 020b 	add.w	r2, r7, #11
 8005da2:	4611      	mov	r1, r2
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 fdeb 	bl	8006980 <lsm6dso16is_gy_full_scale_get>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <LSM6DSO16IS_GYRO_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8005db0:	f04f 33ff 	mov.w	r3, #4294967295
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 8005db6:	7afb      	ldrb	r3, [r7, #11]
 8005db8:	2b10      	cmp	r3, #16
 8005dba:	d83c      	bhi.n	8005e36 <LSM6DSO16IS_GYRO_GetFullScale+0xaa>
 8005dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc4 <LSM6DSO16IS_GYRO_GetFullScale+0x38>)
 8005dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc2:	bf00      	nop
 8005dc4:	08005e11 	.word	0x08005e11
 8005dc8:	08005e19 	.word	0x08005e19
 8005dcc:	08005e23 	.word	0x08005e23
 8005dd0:	08005e2d 	.word	0x08005e2d
 8005dd4:	08005e37 	.word	0x08005e37
 8005dd8:	08005e37 	.word	0x08005e37
 8005ddc:	08005e37 	.word	0x08005e37
 8005de0:	08005e37 	.word	0x08005e37
 8005de4:	08005e37 	.word	0x08005e37
 8005de8:	08005e37 	.word	0x08005e37
 8005dec:	08005e37 	.word	0x08005e37
 8005df0:	08005e37 	.word	0x08005e37
 8005df4:	08005e37 	.word	0x08005e37
 8005df8:	08005e37 	.word	0x08005e37
 8005dfc:	08005e37 	.word	0x08005e37
 8005e00:	08005e37 	.word	0x08005e37
 8005e04:	08005e09 	.word	0x08005e09
  {
    case LSM6DSO16IS_125dps:
      *FullScale =  125;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	227d      	movs	r2, #125	@ 0x7d
 8005e0c:	601a      	str	r2, [r3, #0]
      break;
 8005e0e:	e016      	b.n	8005e3e <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_250dps:
      *FullScale =  250;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	22fa      	movs	r2, #250	@ 0xfa
 8005e14:	601a      	str	r2, [r3, #0]
      break;
 8005e16:	e012      	b.n	8005e3e <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_500dps:
      *FullScale =  500;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8005e1e:	601a      	str	r2, [r3, #0]
      break;
 8005e20:	e00d      	b.n	8005e3e <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_1000dps:
      *FullScale = 1000;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e28:	601a      	str	r2, [r3, #0]
      break;
 8005e2a:	e008      	b.n	8005e3e <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_2000dps:
      *FullScale = 2000;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005e32:	601a      	str	r2, [r3, #0]
      break;
 8005e34:	e003      	b.n	8005e3e <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    default:
      ret = LSM6DSO16IS_ERROR;
 8005e36:	f04f 33ff 	mov.w	r3, #4294967295
 8005e3a:	60fb      	str	r3, [r7, #12]
      break;
 8005e3c:	bf00      	nop
  }

  return ret;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <LSM6DSO16IS_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
           : (FullScale <= 250)  ? LSM6DSO16IS_250dps
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b7d      	cmp	r3, #125	@ 0x7d
 8005e5a:	dd12      	ble.n	8005e82 <LSM6DSO16IS_GYRO_SetFullScale+0x3a>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2bfa      	cmp	r3, #250	@ 0xfa
 8005e60:	dd0d      	ble.n	8005e7e <LSM6DSO16IS_GYRO_SetFullScale+0x36>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005e68:	dd07      	ble.n	8005e7a <LSM6DSO16IS_GYRO_SetFullScale+0x32>
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e70:	dc01      	bgt.n	8005e76 <LSM6DSO16IS_GYRO_SetFullScale+0x2e>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e006      	b.n	8005e84 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8005e76:	2303      	movs	r3, #3
 8005e78:	e004      	b.n	8005e84 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e002      	b.n	8005e84 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e000      	b.n	8005e84 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8005e82:	2310      	movs	r3, #16
  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
 8005e84:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 500)  ? LSM6DSO16IS_500dps
           : (FullScale <= 1000) ? LSM6DSO16IS_1000dps
           :                       LSM6DSO16IS_2000dps;

  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	3320      	adds	r3, #32
 8005e8a:	7afa      	ldrb	r2, [r7, #11]
 8005e8c:	4611      	mov	r1, r2
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 fd46 	bl	8006920 <lsm6dso16is_gy_full_scale_set>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <LSM6DSO16IS_GYRO_SetFullScale+0x58>
  {
    ret = LSM6DSO16IS_ERROR;
 8005e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005e9e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <LSM6DSO16IS_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b086      	sub	sp, #24
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3320      	adds	r3, #32
 8005ebc:	f107 020c 	add.w	r2, r7, #12
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 ff00 	bl	8006cc8 <lsm6dso16is_angular_rate_raw_get>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <LSM6DSO16IS_GYRO_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8005ece:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed2:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 8005ed4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 8005edc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 8005ee4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	809a      	strh	r2, [r3, #4]

  return ret;
 8005eec:	697b      	ldr	r3, [r7, #20]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <LSM6DSO16IS_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *AngularRate)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b086      	sub	sp, #24
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8005f00:	2300      	movs	r3, #0
 8005f02:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 8005f04:	f04f 0300 	mov.w	r3, #0
 8005f08:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3320      	adds	r3, #32
 8005f0e:	f107 020c 	add.w	r2, r7, #12
 8005f12:	4611      	mov	r1, r2
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 fed7 	bl	8006cc8 <lsm6dso16is_angular_rate_raw_get>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <LSM6DSO16IS_GYRO_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8005f20:	f04f 33ff 	mov.w	r3, #4294967295
 8005f24:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 8005f26:	f107 0308 	add.w	r3, r7, #8
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff fe0d 	bl	8005b4c <LSM6DSO16IS_GYRO_GetSensitivity>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <LSM6DSO16IS_GYRO_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 8005f38:	f04f 33ff 	mov.w	r3, #4294967295
 8005f3c:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8005f3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f56:	ee17 2a90 	vmov	r2, s15
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8005f5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f62:	ee07 3a90 	vmov	s15, r3
 8005f66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f76:	ee17 2a90 	vmov	r2, s15
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 8005f7e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f96:	ee17 2a90 	vmov	r2, s15
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	609a      	str	r2, [r3, #8]

  return ret;
 8005f9e:	697b      	ldr	r3, [r7, #20]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <LSM6DSO16IS_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Write_Reg(LSM6DSO16IS_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	70fb      	strb	r3, [r7, #3]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	70bb      	strb	r3, [r7, #2]
  int32_t ret = LSM6DSO16IS_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO16IS_OK)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f103 0020 	add.w	r0, r3, #32
 8005fc2:	1cba      	adds	r2, r7, #2
 8005fc4:	78f9      	ldrb	r1, [r7, #3]
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	f000 faa6 	bl	8006518 <lsm6dso16is_write_reg>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <LSM6DSO16IS_Write_Reg+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8005fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <LSM6DSO16IS_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSO16IS_MAIN_MEM_BANK, 2 - LSM6DSO16IS_SENSOR_HUB_MEM_BANK, 3 - LSM6DSO16IS_ISPU_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Set_Mem_Bank(LSM6DSO16IS_Object_t *pObj, uint8_t Val)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	460b      	mov	r3, r1
 8005fec:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO16IS_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_mem_bank_t reg;

  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
        : (Val == 3U) ? LSM6DSO16IS_ISPU_MEM_BANK
 8005ff2:	78fb      	ldrb	r3, [r7, #3]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d006      	beq.n	8006006 <LSM6DSO16IS_Set_Mem_Bank+0x24>
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d101      	bne.n	8006002 <LSM6DSO16IS_Set_Mem_Bank+0x20>
 8005ffe:	2303      	movs	r3, #3
 8006000:	e002      	b.n	8006008 <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8006002:	2300      	movs	r3, #0
 8006004:	e000      	b.n	8006008 <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8006006:	2302      	movs	r3, #2
  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
 8006008:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSO16IS_MAIN_MEM_BANK;

  if (lsm6dso16is_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSO16IS_OK)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3320      	adds	r3, #32
 800600e:	7afa      	ldrb	r2, [r7, #11]
 8006010:	4611      	mov	r1, r2
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fa9e 	bl	8006554 <lsm6dso16is_mem_bank_set>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <LSM6DSO16IS_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSO16IS_ERROR;
 800601e:	f04f 33ff 	mov.w	r3, #4294967295
 8006022:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006024:	68fb      	ldr	r3, [r7, #12]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
	...

08006030 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 800603c:	2300      	movs	r3, #0
 800603e:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 8006040:	edd7 7a00 	vldr	s15, [r7]
 8006044:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800604c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006050:	d801      	bhi.n	8006056 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x26>
 8006052:	2301      	movs	r3, #1
 8006054:	e058      	b.n	8006108 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006056:	edd7 7a00 	vldr	s15, [r7]
 800605a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800605e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006066:	d801      	bhi.n	800606c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x3c>
 8006068:	2302      	movs	r3, #2
 800606a:	e04d      	b.n	8006108 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800606c:	edd7 7a00 	vldr	s15, [r7]
 8006070:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8006130 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x100>
 8006074:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800607c:	d801      	bhi.n	8006082 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x52>
 800607e:	2303      	movs	r3, #3
 8006080:	e042      	b.n	8006108 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006082:	edd7 7a00 	vldr	s15, [r7]
 8006086:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8006134 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x104>
 800608a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800608e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006092:	d801      	bhi.n	8006098 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x68>
 8006094:	2304      	movs	r3, #4
 8006096:	e037      	b.n	8006108 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006098:	edd7 7a00 	vldr	s15, [r7]
 800609c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006138 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x108>
 80060a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a8:	d801      	bhi.n	80060ae <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x7e>
 80060aa:	2305      	movs	r3, #5
 80060ac:	e02c      	b.n	8006108 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80060ae:	edd7 7a00 	vldr	s15, [r7]
 80060b2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800613c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80060b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060be:	d801      	bhi.n	80060c4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x94>
 80060c0:	2306      	movs	r3, #6
 80060c2:	e021      	b.n	8006108 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80060c4:	edd7 7a00 	vldr	s15, [r7]
 80060c8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006140 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x110>
 80060cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060d4:	d801      	bhi.n	80060da <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xaa>
 80060d6:	2307      	movs	r3, #7
 80060d8:	e016      	b.n	8006108 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80060da:	edd7 7a00 	vldr	s15, [r7]
 80060de:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006144 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x114>
 80060e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ea:	d801      	bhi.n	80060f0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xc0>
 80060ec:	2308      	movs	r3, #8
 80060ee:	e00b      	b.n	8006108 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80060f0:	edd7 7a00 	vldr	s15, [r7]
 80060f4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006148 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x118>
 80060f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006100:	d801      	bhi.n	8006106 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd6>
 8006102:	2309      	movs	r3, #9
 8006104:	e000      	b.n	8006108 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8006106:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 8006108:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3320      	adds	r3, #32
 800610e:	7afa      	ldrb	r2, [r7, #11]
 8006110:	4611      	mov	r1, r2
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fadc 	bl	80066d0 <lsm6dso16is_xl_data_rate_set>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 800611e:	f04f 33ff 	mov.w	r3, #4294967295
 8006122:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006124:	68fb      	ldr	r3, [r7, #12]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	42500000 	.word	0x42500000
 8006134:	42d00000 	.word	0x42d00000
 8006138:	43500000 	.word	0x43500000
 800613c:	43d00000 	.word	0x43d00000
 8006140:	44504000 	.word	0x44504000
 8006144:	44d06000 	.word	0x44d06000
 8006148:	45505000 	.word	0x45505000

0800614c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
                  : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 8006158:	edd7 7a00 	vldr	s15, [r7]
 800615c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006168:	d801      	bhi.n	800616e <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x22>
 800616a:	2301      	movs	r3, #1
 800616c:	e058      	b.n	8006220 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800616e:	edd7 7a00 	vldr	s15, [r7]
 8006172:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800617a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617e:	d801      	bhi.n	8006184 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x38>
 8006180:	2302      	movs	r3, #2
 8006182:	e04d      	b.n	8006220 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8006184:	edd7 7a00 	vldr	s15, [r7]
 8006188:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8006234 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xe8>
 800618c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006194:	d801      	bhi.n	800619a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8006196:	2303      	movs	r3, #3
 8006198:	e042      	b.n	8006220 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800619a:	edd7 7a00 	vldr	s15, [r7]
 800619e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006238 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xec>
 80061a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061aa:	d801      	bhi.n	80061b0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x64>
 80061ac:	2304      	movs	r3, #4
 80061ae:	e037      	b.n	8006220 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80061b0:	edd7 7a00 	vldr	s15, [r7]
 80061b4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800623c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80061b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c0:	d801      	bhi.n	80061c6 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80061c2:	2305      	movs	r3, #5
 80061c4:	e02c      	b.n	8006220 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80061c6:	edd7 7a00 	vldr	s15, [r7]
 80061ca:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006240 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80061ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d6:	d801      	bhi.n	80061dc <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x90>
 80061d8:	2306      	movs	r3, #6
 80061da:	e021      	b.n	8006220 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80061dc:	edd7 7a00 	vldr	s15, [r7]
 80061e0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006244 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf8>
 80061e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ec:	d801      	bhi.n	80061f2 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80061ee:	2307      	movs	r3, #7
 80061f0:	e016      	b.n	8006220 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80061f2:	edd7 7a00 	vldr	s15, [r7]
 80061f6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006248 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xfc>
 80061fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006202:	d801      	bhi.n	8006208 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8006204:	2308      	movs	r3, #8
 8006206:	e00b      	b.n	8006220 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8006208:	edd7 7a00 	vldr	s15, [r7]
 800620c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800624c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x100>
 8006210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006218:	d801      	bhi.n	800621e <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800621a:	2309      	movs	r3, #9
 800621c:	e000      	b.n	8006220 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800621e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 8006220:	687a      	ldr	r2, [r7, #4]
 8006222:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO16IS_XL_ODR_AT_833Hz_HP
                  : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
                  : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
                  :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr
 8006234:	42500000 	.word	0x42500000
 8006238:	42d00000 	.word	0x42d00000
 800623c:	43500000 	.word	0x43500000
 8006240:	43d00000 	.word	0x43d00000
 8006244:	44504000 	.word	0x44504000
 8006248:	44d06000 	.word	0x44d06000
 800624c:	45505000 	.word	0x45505000

08006250 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 8006260:	edd7 7a00 	vldr	s15, [r7]
 8006264:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800626c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006270:	d801      	bhi.n	8006276 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x26>
 8006272:	2301      	movs	r3, #1
 8006274:	e058      	b.n	8006328 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8006276:	edd7 7a00 	vldr	s15, [r7]
 800627a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800627e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006286:	d801      	bhi.n	800628c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x3c>
 8006288:	2302      	movs	r3, #2
 800628a:	e04d      	b.n	8006328 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800628c:	edd7 7a00 	vldr	s15, [r7]
 8006290:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8006350 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8006294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800629c:	d801      	bhi.n	80062a2 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x52>
 800629e:	2303      	movs	r3, #3
 80062a0:	e042      	b.n	8006328 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80062a2:	edd7 7a00 	vldr	s15, [r7]
 80062a6:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8006354 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80062aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062b2:	d801      	bhi.n	80062b8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x68>
 80062b4:	2304      	movs	r3, #4
 80062b6:	e037      	b.n	8006328 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80062b8:	edd7 7a00 	vldr	s15, [r7]
 80062bc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006358 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80062c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c8:	d801      	bhi.n	80062ce <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x7e>
 80062ca:	2305      	movs	r3, #5
 80062cc:	e02c      	b.n	8006328 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80062ce:	edd7 7a00 	vldr	s15, [r7]
 80062d2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800635c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80062d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062de:	d801      	bhi.n	80062e4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x94>
 80062e0:	2306      	movs	r3, #6
 80062e2:	e021      	b.n	8006328 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80062e4:	edd7 7a00 	vldr	s15, [r7]
 80062e8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006360 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x110>
 80062ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062f4:	d801      	bhi.n	80062fa <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xaa>
 80062f6:	2307      	movs	r3, #7
 80062f8:	e016      	b.n	8006328 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80062fa:	edd7 7a00 	vldr	s15, [r7]
 80062fe:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006364 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8006302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800630a:	d801      	bhi.n	8006310 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 800630c:	2308      	movs	r3, #8
 800630e:	e00b      	b.n	8006328 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8006310:	edd7 7a00 	vldr	s15, [r7]
 8006314:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006368 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x118>
 8006318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800631c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006320:	d801      	bhi.n	8006326 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd6>
 8006322:	2309      	movs	r3, #9
 8006324:	e000      	b.n	8006328 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8006326:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 8006328:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	3320      	adds	r3, #32
 800632e:	7afa      	ldrb	r2, [r7, #11]
 8006330:	4611      	mov	r1, r2
 8006332:	4618      	mov	r0, r3
 8006334:	f000 fb80 	bl	8006a38 <lsm6dso16is_gy_data_rate_set>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 800633e:	f04f 33ff 	mov.w	r3, #4294967295
 8006342:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006344:	68fb      	ldr	r3, [r7, #12]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	42500000 	.word	0x42500000
 8006354:	42d00000 	.word	0x42d00000
 8006358:	43500000 	.word	0x43500000
 800635c:	43d00000 	.word	0x43d00000
 8006360:	44504000 	.word	0x44504000
 8006364:	44d06000 	.word	0x44d06000
 8006368:	45505000 	.word	0x45505000

0800636c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
                   : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 8006378:	edd7 7a00 	vldr	s15, [r7]
 800637c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006388:	d801      	bhi.n	800638e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800638a:	2301      	movs	r3, #1
 800638c:	e058      	b.n	8006440 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800638e:	edd7 7a00 	vldr	s15, [r7]
 8006392:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800639a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800639e:	d801      	bhi.n	80063a4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80063a0:	2302      	movs	r3, #2
 80063a2:	e04d      	b.n	8006440 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80063a4:	edd7 7a00 	vldr	s15, [r7]
 80063a8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8006454 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80063ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b4:	d801      	bhi.n	80063ba <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80063b6:	2303      	movs	r3, #3
 80063b8:	e042      	b.n	8006440 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80063ba:	edd7 7a00 	vldr	s15, [r7]
 80063be:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006458 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80063c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063ca:	d801      	bhi.n	80063d0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80063cc:	2304      	movs	r3, #4
 80063ce:	e037      	b.n	8006440 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80063d0:	edd7 7a00 	vldr	s15, [r7]
 80063d4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800645c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80063d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e0:	d801      	bhi.n	80063e6 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80063e2:	2305      	movs	r3, #5
 80063e4:	e02c      	b.n	8006440 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80063e6:	edd7 7a00 	vldr	s15, [r7]
 80063ea:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006460 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80063ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f6:	d801      	bhi.n	80063fc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80063f8:	2306      	movs	r3, #6
 80063fa:	e021      	b.n	8006440 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80063fc:	edd7 7a00 	vldr	s15, [r7]
 8006400:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8006464 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8006404:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800640c:	d801      	bhi.n	8006412 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800640e:	2307      	movs	r3, #7
 8006410:	e016      	b.n	8006440 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006412:	edd7 7a00 	vldr	s15, [r7]
 8006416:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006468 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800641a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800641e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006422:	d801      	bhi.n	8006428 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8006424:	2308      	movs	r3, #8
 8006426:	e00b      	b.n	8006440 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006428:	edd7 7a00 	vldr	s15, [r7]
 800642c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800646c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8006430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006438:	d801      	bhi.n	800643e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800643a:	2309      	movs	r3, #9
 800643c:	e000      	b.n	8006440 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800643e:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO16IS_GY_ODR_AT_833Hz_HP
                   : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
                   : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
                   :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	42500000 	.word	0x42500000
 8006458:	42d00000 	.word	0x42d00000
 800645c:	43500000 	.word	0x43500000
 8006460:	43d00000 	.word	0x43d00000
 8006464:	44504000 	.word	0x44504000
 8006468:	44d06000 	.word	0x44d06000
 800646c:	45505000 	.word	0x45505000

08006470 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006470:	b590      	push	{r4, r7, lr}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	607a      	str	r2, [r7, #4]
 800647a:	461a      	mov	r2, r3
 800647c:	460b      	mov	r3, r1
 800647e:	72fb      	strb	r3, [r7, #11]
 8006480:	4613      	mov	r3, r2
 8006482:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	695c      	ldr	r4, [r3, #20]
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	7b1b      	ldrb	r3, [r3, #12]
 8006490:	4618      	mov	r0, r3
 8006492:	7afb      	ldrb	r3, [r7, #11]
 8006494:	b299      	uxth	r1, r3
 8006496:	893b      	ldrh	r3, [r7, #8]
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	47a0      	blx	r4
 800649c:	4603      	mov	r3, r0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	371c      	adds	r7, #28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd90      	pop	{r4, r7, pc}

080064a6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80064a6:	b590      	push	{r4, r7, lr}
 80064a8:	b087      	sub	sp, #28
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	461a      	mov	r2, r3
 80064b2:	460b      	mov	r3, r1
 80064b4:	72fb      	strb	r3, [r7, #11]
 80064b6:	4613      	mov	r3, r2
 80064b8:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	691c      	ldr	r4, [r3, #16]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	7b1b      	ldrb	r3, [r3, #12]
 80064c6:	4618      	mov	r0, r3
 80064c8:	7afb      	ldrb	r3, [r7, #11]
 80064ca:	b299      	uxth	r1, r3
 80064cc:	893b      	ldrh	r3, [r7, #8]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	47a0      	blx	r4
 80064d2:	4603      	mov	r3, r0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	371c      	adds	r7, #28
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd90      	pop	{r4, r7, pc}

080064dc <lsm6dso16is_read_reg>:
  *
  */
int32_t __weak lsm6dso16is_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80064dc:	b590      	push	{r4, r7, lr}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	607a      	str	r2, [r7, #4]
 80064e6:	461a      	mov	r2, r3
 80064e8:	460b      	mov	r3, r1
 80064ea:	72fb      	strb	r3, [r7, #11]
 80064ec:	4613      	mov	r3, r2
 80064ee:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d102      	bne.n	80064fc <lsm6dso16is_read_reg+0x20>
  {
    return -1;
 80064f6:	f04f 33ff 	mov.w	r3, #4294967295
 80064fa:	e009      	b.n	8006510 <lsm6dso16is_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	685c      	ldr	r4, [r3, #4]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68d8      	ldr	r0, [r3, #12]
 8006504:	893b      	ldrh	r3, [r7, #8]
 8006506:	7af9      	ldrb	r1, [r7, #11]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	47a0      	blx	r4
 800650c:	6178      	str	r0, [r7, #20]

  return ret;
 800650e:	697b      	ldr	r3, [r7, #20]
}
 8006510:	4618      	mov	r0, r3
 8006512:	371c      	adds	r7, #28
 8006514:	46bd      	mov	sp, r7
 8006516:	bd90      	pop	{r4, r7, pc}

08006518 <lsm6dso16is_write_reg>:
  *
  */
int32_t __weak lsm6dso16is_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                     uint8_t *data,
                                     uint16_t len)
{
 8006518:	b590      	push	{r4, r7, lr}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	607a      	str	r2, [r7, #4]
 8006522:	461a      	mov	r2, r3
 8006524:	460b      	mov	r3, r1
 8006526:	72fb      	strb	r3, [r7, #11]
 8006528:	4613      	mov	r3, r2
 800652a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d102      	bne.n	8006538 <lsm6dso16is_write_reg+0x20>
  {
    return -1;
 8006532:	f04f 33ff 	mov.w	r3, #4294967295
 8006536:	e009      	b.n	800654c <lsm6dso16is_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681c      	ldr	r4, [r3, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	68d8      	ldr	r0, [r3, #12]
 8006540:	893b      	ldrh	r3, [r7, #8]
 8006542:	7af9      	ldrb	r1, [r7, #11]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	47a0      	blx	r4
 8006548:	6178      	str	r0, [r7, #20]

  return ret;
 800654a:	697b      	ldr	r3, [r7, #20]
}
 800654c:	4618      	mov	r0, r3
 800654e:	371c      	adds	r7, #28
 8006550:	46bd      	mov	sp, r7
 8006552:	bd90      	pop	{r4, r7, pc}

08006554 <lsm6dso16is_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, ISPU_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dso16is_mem_bank_t val)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_func_cfg_access_t func_cfg_access = {0x0};
 8006560:	2300      	movs	r3, #0
 8006562:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /* no need to read it first as the only other field is a ispu reset bit */
  func_cfg_access.shub_reg_access = (val == LSM6DSO16IS_SENSOR_HUB_MEM_BANK) ? 0x1U : 0x0U;
 8006564:	78fb      	ldrb	r3, [r7, #3]
 8006566:	2b02      	cmp	r3, #2
 8006568:	d101      	bne.n	800656e <lsm6dso16is_mem_bank_set+0x1a>
 800656a:	2201      	movs	r2, #1
 800656c:	e000      	b.n	8006570 <lsm6dso16is_mem_bank_set+0x1c>
 800656e:	2200      	movs	r2, #0
 8006570:	7a3b      	ldrb	r3, [r7, #8]
 8006572:	f362 1386 	bfi	r3, r2, #6, #1
 8006576:	723b      	strb	r3, [r7, #8]
  func_cfg_access.ispu_reg_access = (val == LSM6DSO16IS_ISPU_MEM_BANK) ? 0x1U : 0x0U;
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	2b03      	cmp	r3, #3
 800657c:	d101      	bne.n	8006582 <lsm6dso16is_mem_bank_set+0x2e>
 800657e:	2201      	movs	r2, #1
 8006580:	e000      	b.n	8006584 <lsm6dso16is_mem_bank_set+0x30>
 8006582:	2200      	movs	r2, #0
 8006584:	7a3b      	ldrb	r3, [r7, #8]
 8006586:	f362 13c7 	bfi	r3, r2, #7, #1
 800658a:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 800658c:	f107 0208 	add.w	r2, r7, #8
 8006590:	2301      	movs	r3, #1
 8006592:	2101      	movs	r1, #1
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7ff ffbf 	bl	8006518 <lsm6dso16is_write_reg>
 800659a:	60f8      	str	r0, [r7, #12]

  return ret;
 800659c:	68fb      	ldr	r3, [r7, #12]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <lsm6dso16is_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_WHO_AM_I, (uint8_t *)val, 1);
 80065b0:	2301      	movs	r3, #1
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	210f      	movs	r1, #15
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff ff90 	bl	80064dc <lsm6dso16is_read_reg>
 80065bc:	60f8      	str	r0, [r7, #12]

  return ret;
 80065be:	68fb      	ldr	r3, [r7, #12]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <lsm6dso16is_xl_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80065d4:	f107 0208 	add.w	r2, r7, #8
 80065d8:	2301      	movs	r3, #1
 80065da:	2115      	movs	r1, #21
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7ff ff7d 	bl	80064dc <lsm6dso16is_read_reg>
 80065e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10f      	bne.n	800660a <lsm6dso16is_xl_hm_mode_set+0x42>
  {
    ctrl6_c.xl_hm_mode = ((uint8_t)val & 0x1U);
 80065ea:	78fb      	ldrb	r3, [r7, #3]
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	7a3b      	ldrb	r3, [r7, #8]
 80065f4:	f362 1304 	bfi	r3, r2, #4, #1
 80065f8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80065fa:	f107 0208 	add.w	r2, r7, #8
 80065fe:	2301      	movs	r3, #1
 8006600:	2115      	movs	r1, #21
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff ff88 	bl	8006518 <lsm6dso16is_write_reg>
 8006608:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800660a:	68fb      	ldr	r3, [r7, #12]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <lsm6dso16is_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t val)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006620:	f107 0208 	add.w	r2, r7, #8
 8006624:	2301      	movs	r3, #1
 8006626:	2110      	movs	r1, #16
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7ff ff57 	bl	80064dc <lsm6dso16is_read_reg>
 800662e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10f      	bne.n	8006656 <lsm6dso16is_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = ((uint8_t)val & 0x3U);
 8006636:	78fb      	ldrb	r3, [r7, #3]
 8006638:	f003 0303 	and.w	r3, r3, #3
 800663c:	b2da      	uxtb	r2, r3
 800663e:	7a3b      	ldrb	r3, [r7, #8]
 8006640:	f362 0383 	bfi	r3, r2, #2, #2
 8006644:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006646:	f107 0208 	add.w	r2, r7, #8
 800664a:	2301      	movs	r3, #1
 800664c:	2110      	movs	r1, #16
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7ff ff62 	bl	8006518 <lsm6dso16is_write_reg>
 8006654:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006656:	68fb      	ldr	r3, [r7, #12]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <lsm6dso16is_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t *val)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800666a:	f107 0208 	add.w	r2, r7, #8
 800666e:	2301      	movs	r3, #1
 8006670:	2110      	movs	r1, #16
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7ff ff32 	bl	80064dc <lsm6dso16is_read_reg>
 8006678:	60f8      	str	r0, [r7, #12]

  switch ((ctrl1_xl.fs_xl))
 800667a:	7a3b      	ldrb	r3, [r7, #8]
 800667c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b03      	cmp	r3, #3
 8006684:	d81a      	bhi.n	80066bc <lsm6dso16is_xl_full_scale_get+0x5c>
 8006686:	a201      	add	r2, pc, #4	@ (adr r2, 800668c <lsm6dso16is_xl_full_scale_get+0x2c>)
 8006688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668c:	0800669d 	.word	0x0800669d
 8006690:	080066b5 	.word	0x080066b5
 8006694:	080066a5 	.word	0x080066a5
 8006698:	080066ad 	.word	0x080066ad
  {
    case LSM6DSO16IS_2g:
      *val = LSM6DSO16IS_2g;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	2200      	movs	r2, #0
 80066a0:	701a      	strb	r2, [r3, #0]
      break;
 80066a2:	e00f      	b.n	80066c4 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_4g:
      *val = LSM6DSO16IS_4g;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	2202      	movs	r2, #2
 80066a8:	701a      	strb	r2, [r3, #0]
      break;
 80066aa:	e00b      	b.n	80066c4 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_8g:
      *val = LSM6DSO16IS_8g;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2203      	movs	r2, #3
 80066b0:	701a      	strb	r2, [r3, #0]
      break;
 80066b2:	e007      	b.n	80066c4 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_16g:
      *val = LSM6DSO16IS_16g;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2201      	movs	r2, #1
 80066b8:	701a      	strb	r2, [r3, #0]
      break;
 80066ba:	e003      	b.n	80066c4 <lsm6dso16is_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO16IS_2g;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2200      	movs	r2, #0
 80066c0:	701a      	strb	r2, [r3, #0]
      break;
 80066c2:	bf00      	nop
  }
  return ret;
 80066c4:	68fb      	ldr	r3, [r7, #12]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop

080066d0 <lsm6dso16is_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t val)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	460b      	mov	r3, r1
 80066da:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80066dc:	f107 0208 	add.w	r2, r7, #8
 80066e0:	2301      	movs	r3, #1
 80066e2:	2110      	movs	r1, #16
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7ff fef9 	bl	80064dc <lsm6dso16is_read_reg>
 80066ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d128      	bne.n	8006744 <lsm6dso16is_xl_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 80066f2:	78fb      	ldrb	r3, [r7, #3]
 80066f4:	f003 0310 	and.w	r3, r3, #16
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d008      	beq.n	800670e <lsm6dso16is_xl_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 80066fc:	2101      	movs	r1, #1
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7ff ff62 	bl	80065c8 <lsm6dso16is_xl_hm_mode_set>
 8006704:	4602      	mov	r2, r0
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4413      	add	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	e007      	b.n	800671e <lsm6dso16is_xl_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 800670e:	2100      	movs	r1, #0
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7ff ff59 	bl	80065c8 <lsm6dso16is_xl_hm_mode_set>
 8006716:	4602      	mov	r2, r0
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4413      	add	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]
    }

    ctrl1_xl.odr_xl = ((uint8_t)val & 0xfU);
 800671e:	78fb      	ldrb	r3, [r7, #3]
 8006720:	f003 030f 	and.w	r3, r3, #15
 8006724:	b2da      	uxtb	r2, r3
 8006726:	7a3b      	ldrb	r3, [r7, #8]
 8006728:	f362 1307 	bfi	r3, r2, #4, #4
 800672c:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800672e:	f107 0208 	add.w	r2, r7, #8
 8006732:	2301      	movs	r3, #1
 8006734:	2110      	movs	r1, #16
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff feee 	bl	8006518 <lsm6dso16is_write_reg>
 800673c:	4602      	mov	r2, r0
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4413      	add	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006744:	68fb      	ldr	r3, [r7, #12]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
	...

08006750 <lsm6dso16is_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t *val)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800675a:	f107 0210 	add.w	r2, r7, #16
 800675e:	2301      	movs	r3, #1
 8006760:	2110      	movs	r1, #16
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7ff feba 	bl	80064dc <lsm6dso16is_read_reg>
 8006768:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800676a:	f107 020c 	add.w	r2, r7, #12
 800676e:	2301      	movs	r3, #1
 8006770:	2115      	movs	r1, #21
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff feb2 	bl	80064dc <lsm6dso16is_read_reg>
 8006778:	4602      	mov	r2, r0
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	4413      	add	r3, r2
 800677e:	617b      	str	r3, [r7, #20]

  switch ((ctrl6_c.xl_hm_mode << 4) | (ctrl1_xl.odr_xl))
 8006780:	7b3b      	ldrb	r3, [r7, #12]
 8006782:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006786:	b2db      	uxtb	r3, r3
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	7c3a      	ldrb	r2, [r7, #16]
 800678c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	4313      	orrs	r3, r2
 8006794:	2b1b      	cmp	r3, #27
 8006796:	f200 8093 	bhi.w	80068c0 <lsm6dso16is_xl_data_rate_get+0x170>
 800679a:	a201      	add	r2, pc, #4	@ (adr r2, 80067a0 <lsm6dso16is_xl_data_rate_get+0x50>)
 800679c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a0:	08006811 	.word	0x08006811
 80067a4:	08006819 	.word	0x08006819
 80067a8:	08006821 	.word	0x08006821
 80067ac:	08006829 	.word	0x08006829
 80067b0:	08006831 	.word	0x08006831
 80067b4:	08006839 	.word	0x08006839
 80067b8:	08006841 	.word	0x08006841
 80067bc:	08006849 	.word	0x08006849
 80067c0:	08006851 	.word	0x08006851
 80067c4:	08006859 	.word	0x08006859
 80067c8:	08006861 	.word	0x08006861
 80067cc:	080068c1 	.word	0x080068c1
 80067d0:	080068c1 	.word	0x080068c1
 80067d4:	080068c1 	.word	0x080068c1
 80067d8:	080068c1 	.word	0x080068c1
 80067dc:	080068c1 	.word	0x080068c1
 80067e0:	080068c1 	.word	0x080068c1
 80067e4:	08006869 	.word	0x08006869
 80067e8:	08006871 	.word	0x08006871
 80067ec:	08006879 	.word	0x08006879
 80067f0:	08006881 	.word	0x08006881
 80067f4:	08006889 	.word	0x08006889
 80067f8:	08006891 	.word	0x08006891
 80067fc:	08006899 	.word	0x08006899
 8006800:	080068a1 	.word	0x080068a1
 8006804:	080068a9 	.word	0x080068a9
 8006808:	080068b1 	.word	0x080068b1
 800680c:	080068b9 	.word	0x080068b9
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	2200      	movs	r2, #0
 8006814:	701a      	strb	r2, [r3, #0]
      break;
 8006816:	e057      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_HP;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2201      	movs	r2, #1
 800681c:	701a      	strb	r2, [r3, #0]
      break;
 800681e:	e053      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_HP;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2202      	movs	r2, #2
 8006824:	701a      	strb	r2, [r3, #0]
      break;
 8006826:	e04f      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_HP;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	2203      	movs	r2, #3
 800682c:	701a      	strb	r2, [r3, #0]
      break;
 800682e:	e04b      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	2204      	movs	r2, #4
 8006834:	701a      	strb	r2, [r3, #0]
      break;
 8006836:	e047      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_HP;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2205      	movs	r2, #5
 800683c:	701a      	strb	r2, [r3, #0]
      break;
 800683e:	e043      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_HP;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2206      	movs	r2, #6
 8006844:	701a      	strb	r2, [r3, #0]
      break;
 8006846:	e03f      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_HP;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	2207      	movs	r2, #7
 800684c:	701a      	strb	r2, [r3, #0]
      break;
 800684e:	e03b      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_HP;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	2208      	movs	r2, #8
 8006854:	701a      	strb	r2, [r3, #0]
      break;
 8006856:	e037      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_HP;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2209      	movs	r2, #9
 800685c:	701a      	strb	r2, [r3, #0]
      break;
 800685e:	e033      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	220a      	movs	r2, #10
 8006864:	701a      	strb	r2, [r3, #0]
      break;
 8006866:	e02f      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_LP;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	2211      	movs	r2, #17
 800686c:	701a      	strb	r2, [r3, #0]
      break;
 800686e:	e02b      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_LP;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2212      	movs	r2, #18
 8006874:	701a      	strb	r2, [r3, #0]
      break;
 8006876:	e027      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_LP;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	2213      	movs	r2, #19
 800687c:	701a      	strb	r2, [r3, #0]
      break;
 800687e:	e023      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_LP;
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2214      	movs	r2, #20
 8006884:	701a      	strb	r2, [r3, #0]
      break;
 8006886:	e01f      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_LP;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2215      	movs	r2, #21
 800688c:	701a      	strb	r2, [r3, #0]
      break;
 800688e:	e01b      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_LP;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2216      	movs	r2, #22
 8006894:	701a      	strb	r2, [r3, #0]
      break;
 8006896:	e017      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_LP;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	2217      	movs	r2, #23
 800689c:	701a      	strb	r2, [r3, #0]
      break;
 800689e:	e013      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_LP;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	2218      	movs	r2, #24
 80068a4:	701a      	strb	r2, [r3, #0]
      break;
 80068a6:	e00f      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_LP;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2219      	movs	r2, #25
 80068ac:	701a      	strb	r2, [r3, #0]
      break;
 80068ae:	e00b      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_LP;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	221a      	movs	r2, #26
 80068b4:	701a      	strb	r2, [r3, #0]
      break;
 80068b6:	e007      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1Hz6_LP;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	221b      	movs	r2, #27
 80068bc:	701a      	strb	r2, [r3, #0]
      break;
 80068be:	e003      	b.n	80068c8 <lsm6dso16is_xl_data_rate_get+0x178>

    default:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2200      	movs	r2, #0
 80068c4:	701a      	strb	r2, [r3, #0]
      break;
 80068c6:	bf00      	nop
  }

  return ret;
 80068c8:	697b      	ldr	r3, [r7, #20]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop

080068d4 <lsm6dso16is_gy_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	460b      	mov	r3, r1
 80068de:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80068e0:	f107 0208 	add.w	r2, r7, #8
 80068e4:	2301      	movs	r3, #1
 80068e6:	2116      	movs	r1, #22
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7ff fdf7 	bl	80064dc <lsm6dso16is_read_reg>
 80068ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10f      	bne.n	8006916 <lsm6dso16is_gy_hm_mode_set+0x42>
  {
    ctrl7_g.g_hm_mode = ((uint8_t)val & 0x1U);
 80068f6:	78fb      	ldrb	r3, [r7, #3]
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	7a3b      	ldrb	r3, [r7, #8]
 8006900:	f362 13c7 	bfi	r3, r2, #7, #1
 8006904:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8006906:	f107 0208 	add.w	r2, r7, #8
 800690a:	2301      	movs	r3, #1
 800690c:	2116      	movs	r1, #22
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff fe02 	bl	8006518 <lsm6dso16is_write_reg>
 8006914:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006916:	68fb      	ldr	r3, [r7, #12]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <lsm6dso16is_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t val)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	460b      	mov	r3, r1
 800692a:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800692c:	f107 0208 	add.w	r2, r7, #8
 8006930:	2301      	movs	r3, #1
 8006932:	2111      	movs	r1, #17
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff fdd1 	bl	80064dc <lsm6dso16is_read_reg>
 800693a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d119      	bne.n	8006976 <lsm6dso16is_gy_full_scale_set+0x56>
  {
    ctrl2_g.fs_g = ((uint8_t)val & 0x3U);
 8006942:	78fb      	ldrb	r3, [r7, #3]
 8006944:	f003 0303 	and.w	r3, r3, #3
 8006948:	b2da      	uxtb	r2, r3
 800694a:	7a3b      	ldrb	r3, [r7, #8]
 800694c:	f362 0383 	bfi	r3, r2, #2, #2
 8006950:	723b      	strb	r3, [r7, #8]
    ctrl2_g.fs_125 = ((uint8_t)val >> 4);
 8006952:	78fb      	ldrb	r3, [r7, #3]
 8006954:	091b      	lsrs	r3, r3, #4
 8006956:	b2db      	uxtb	r3, r3
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	b2da      	uxtb	r2, r3
 800695e:	7a3b      	ldrb	r3, [r7, #8]
 8006960:	f362 0341 	bfi	r3, r2, #1, #1
 8006964:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006966:	f107 0208 	add.w	r2, r7, #8
 800696a:	2301      	movs	r3, #1
 800696c:	2111      	movs	r1, #17
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7ff fdd2 	bl	8006518 <lsm6dso16is_write_reg>
 8006974:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006976:	68fb      	ldr	r3, [r7, #12]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <lsm6dso16is_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t *val)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800698a:	f107 0208 	add.w	r2, r7, #8
 800698e:	2301      	movs	r3, #1
 8006990:	2111      	movs	r1, #17
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff fda2 	bl	80064dc <lsm6dso16is_read_reg>
 8006998:	60f8      	str	r0, [r7, #12]

  switch ((ctrl2_g.fs_125 << 4) | (ctrl2_g.fs_g))
 800699a:	7a3b      	ldrb	r3, [r7, #8]
 800699c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	011b      	lsls	r3, r3, #4
 80069a4:	7a3a      	ldrb	r2, [r7, #8]
 80069a6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	4313      	orrs	r3, r2
 80069ae:	2b10      	cmp	r3, #16
 80069b0:	d838      	bhi.n	8006a24 <lsm6dso16is_gy_full_scale_get+0xa4>
 80069b2:	a201      	add	r2, pc, #4	@ (adr r2, 80069b8 <lsm6dso16is_gy_full_scale_get+0x38>)
 80069b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b8:	08006a05 	.word	0x08006a05
 80069bc:	08006a0d 	.word	0x08006a0d
 80069c0:	08006a15 	.word	0x08006a15
 80069c4:	08006a1d 	.word	0x08006a1d
 80069c8:	08006a25 	.word	0x08006a25
 80069cc:	08006a25 	.word	0x08006a25
 80069d0:	08006a25 	.word	0x08006a25
 80069d4:	08006a25 	.word	0x08006a25
 80069d8:	08006a25 	.word	0x08006a25
 80069dc:	08006a25 	.word	0x08006a25
 80069e0:	08006a25 	.word	0x08006a25
 80069e4:	08006a25 	.word	0x08006a25
 80069e8:	08006a25 	.word	0x08006a25
 80069ec:	08006a25 	.word	0x08006a25
 80069f0:	08006a25 	.word	0x08006a25
 80069f4:	08006a25 	.word	0x08006a25
 80069f8:	080069fd 	.word	0x080069fd
  {
    case LSM6DSO16IS_125dps:
      *val = LSM6DSO16IS_125dps;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2210      	movs	r2, #16
 8006a00:	701a      	strb	r2, [r3, #0]
      break;
 8006a02:	e013      	b.n	8006a2c <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_250dps:
      *val = LSM6DSO16IS_250dps;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2200      	movs	r2, #0
 8006a08:	701a      	strb	r2, [r3, #0]
      break;
 8006a0a:	e00f      	b.n	8006a2c <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_500dps:
      *val = LSM6DSO16IS_500dps;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	701a      	strb	r2, [r3, #0]
      break;
 8006a12:	e00b      	b.n	8006a2c <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_1000dps:
      *val = LSM6DSO16IS_1000dps;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2202      	movs	r2, #2
 8006a18:	701a      	strb	r2, [r3, #0]
      break;
 8006a1a:	e007      	b.n	8006a2c <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_2000dps:
      *val = LSM6DSO16IS_2000dps;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	2203      	movs	r2, #3
 8006a20:	701a      	strb	r2, [r3, #0]
      break;
 8006a22:	e003      	b.n	8006a2c <lsm6dso16is_gy_full_scale_get+0xac>

    default:
      *val = LSM6DSO16IS_125dps;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	2210      	movs	r2, #16
 8006a28:	701a      	strb	r2, [r3, #0]
      break;
 8006a2a:	bf00      	nop
  }
  return ret;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop

08006a38 <lsm6dso16is_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t val)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006a44:	f107 0208 	add.w	r2, r7, #8
 8006a48:	2301      	movs	r3, #1
 8006a4a:	2111      	movs	r1, #17
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff fd45 	bl	80064dc <lsm6dso16is_read_reg>
 8006a52:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d128      	bne.n	8006aac <lsm6dso16is_gy_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 8006a5a:	78fb      	ldrb	r3, [r7, #3]
 8006a5c:	f003 0310 	and.w	r3, r3, #16
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d008      	beq.n	8006a76 <lsm6dso16is_gy_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 8006a64:	2101      	movs	r1, #1
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff ff34 	bl	80068d4 <lsm6dso16is_gy_hm_mode_set>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	4413      	add	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	e007      	b.n	8006a86 <lsm6dso16is_gy_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 8006a76:	2100      	movs	r1, #0
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7ff ff2b 	bl	80068d4 <lsm6dso16is_gy_hm_mode_set>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]
    }

    ctrl2_g.odr_g = ((uint8_t)val & 0xfU);
 8006a86:	78fb      	ldrb	r3, [r7, #3]
 8006a88:	f003 030f 	and.w	r3, r3, #15
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	7a3b      	ldrb	r3, [r7, #8]
 8006a90:	f362 1307 	bfi	r3, r2, #4, #4
 8006a94:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006a96:	f107 0208 	add.w	r2, r7, #8
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	2111      	movs	r1, #17
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7ff fd3a 	bl	8006518 <lsm6dso16is_write_reg>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006aac:	68fb      	ldr	r3, [r7, #12]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <lsm6dso16is_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t *val)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006ac2:	f107 0210 	add.w	r2, r7, #16
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	2111      	movs	r1, #17
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff fd06 	bl	80064dc <lsm6dso16is_read_reg>
 8006ad0:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8006ad2:	f107 020c 	add.w	r2, r7, #12
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	2116      	movs	r1, #22
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7ff fcfe 	bl	80064dc <lsm6dso16is_read_reg>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	617b      	str	r3, [r7, #20]

  switch ((ctrl7_g.g_hm_mode << 4) | (ctrl2_g.odr_g))
 8006ae8:	7b3b      	ldrb	r3, [r7, #12]
 8006aea:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	7c3a      	ldrb	r2, [r7, #16]
 8006af4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	4313      	orrs	r3, r2
 8006afc:	2b1a      	cmp	r3, #26
 8006afe:	f200 808d 	bhi.w	8006c1c <lsm6dso16is_gy_data_rate_get+0x164>
 8006b02:	a201      	add	r2, pc, #4	@ (adr r2, 8006b08 <lsm6dso16is_gy_data_rate_get+0x50>)
 8006b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b08:	08006b75 	.word	0x08006b75
 8006b0c:	08006b7d 	.word	0x08006b7d
 8006b10:	08006b85 	.word	0x08006b85
 8006b14:	08006b8d 	.word	0x08006b8d
 8006b18:	08006b95 	.word	0x08006b95
 8006b1c:	08006b9d 	.word	0x08006b9d
 8006b20:	08006ba5 	.word	0x08006ba5
 8006b24:	08006bad 	.word	0x08006bad
 8006b28:	08006bb5 	.word	0x08006bb5
 8006b2c:	08006bbd 	.word	0x08006bbd
 8006b30:	08006bc5 	.word	0x08006bc5
 8006b34:	08006c1d 	.word	0x08006c1d
 8006b38:	08006c1d 	.word	0x08006c1d
 8006b3c:	08006c1d 	.word	0x08006c1d
 8006b40:	08006c1d 	.word	0x08006c1d
 8006b44:	08006c1d 	.word	0x08006c1d
 8006b48:	08006c1d 	.word	0x08006c1d
 8006b4c:	08006bcd 	.word	0x08006bcd
 8006b50:	08006bd5 	.word	0x08006bd5
 8006b54:	08006bdd 	.word	0x08006bdd
 8006b58:	08006be5 	.word	0x08006be5
 8006b5c:	08006bed 	.word	0x08006bed
 8006b60:	08006bf5 	.word	0x08006bf5
 8006b64:	08006bfd 	.word	0x08006bfd
 8006b68:	08006c05 	.word	0x08006c05
 8006b6c:	08006c0d 	.word	0x08006c0d
 8006b70:	08006c15 	.word	0x08006c15
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2200      	movs	r2, #0
 8006b78:	701a      	strb	r2, [r3, #0]
      break;
 8006b7a:	e053      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_HP;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	701a      	strb	r2, [r3, #0]
      break;
 8006b82:	e04f      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_HP;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2202      	movs	r2, #2
 8006b88:	701a      	strb	r2, [r3, #0]
      break;
 8006b8a:	e04b      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_HP;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2203      	movs	r2, #3
 8006b90:	701a      	strb	r2, [r3, #0]
      break;
 8006b92:	e047      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2204      	movs	r2, #4
 8006b98:	701a      	strb	r2, [r3, #0]
      break;
 8006b9a:	e043      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_HP;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	2205      	movs	r2, #5
 8006ba0:	701a      	strb	r2, [r3, #0]
      break;
 8006ba2:	e03f      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_HP;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2206      	movs	r2, #6
 8006ba8:	701a      	strb	r2, [r3, #0]
      break;
 8006baa:	e03b      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_HP;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2207      	movs	r2, #7
 8006bb0:	701a      	strb	r2, [r3, #0]
      break;
 8006bb2:	e037      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_HP;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2208      	movs	r2, #8
 8006bb8:	701a      	strb	r2, [r3, #0]
      break;
 8006bba:	e033      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_HP;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2209      	movs	r2, #9
 8006bc0:	701a      	strb	r2, [r3, #0]
      break;
 8006bc2:	e02f      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	220a      	movs	r2, #10
 8006bc8:	701a      	strb	r2, [r3, #0]
      break;
 8006bca:	e02b      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_LP;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2211      	movs	r2, #17
 8006bd0:	701a      	strb	r2, [r3, #0]
      break;
 8006bd2:	e027      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_LP;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2212      	movs	r2, #18
 8006bd8:	701a      	strb	r2, [r3, #0]
      break;
 8006bda:	e023      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_LP;
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2213      	movs	r2, #19
 8006be0:	701a      	strb	r2, [r3, #0]
      break;
 8006be2:	e01f      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_LP;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2214      	movs	r2, #20
 8006be8:	701a      	strb	r2, [r3, #0]
      break;
 8006bea:	e01b      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_LP;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2215      	movs	r2, #21
 8006bf0:	701a      	strb	r2, [r3, #0]
      break;
 8006bf2:	e017      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_LP;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2216      	movs	r2, #22
 8006bf8:	701a      	strb	r2, [r3, #0]
      break;
 8006bfa:	e013      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_LP;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2217      	movs	r2, #23
 8006c00:	701a      	strb	r2, [r3, #0]
      break;
 8006c02:	e00f      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_LP;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2218      	movs	r2, #24
 8006c08:	701a      	strb	r2, [r3, #0]
      break;
 8006c0a:	e00b      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_LP;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2219      	movs	r2, #25
 8006c10:	701a      	strb	r2, [r3, #0]
      break;
 8006c12:	e007      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_LP;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	221a      	movs	r2, #26
 8006c18:	701a      	strb	r2, [r3, #0]
      break;
 8006c1a:	e003      	b.n	8006c24 <lsm6dso16is_gy_data_rate_get+0x16c>

    default:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	701a      	strb	r2, [r3, #0]
      break;
 8006c22:	bf00      	nop
  }

  return ret;
 8006c24:	697b      	ldr	r3, [r7, #20]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop

08006c30 <lsm6dso16is_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006c3c:	f107 0208 	add.w	r2, r7, #8
 8006c40:	2301      	movs	r3, #1
 8006c42:	2112      	movs	r1, #18
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff fc49 	bl	80064dc <lsm6dso16is_read_reg>
 8006c4a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10f      	bne.n	8006c72 <lsm6dso16is_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8006c52:	78fb      	ldrb	r3, [r7, #3]
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	7a3b      	ldrb	r3, [r7, #8]
 8006c5c:	f362 0382 	bfi	r3, r2, #2, #1
 8006c60:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006c62:	f107 0208 	add.w	r2, r7, #8
 8006c66:	2301      	movs	r3, #1
 8006c68:	2112      	movs	r1, #18
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7ff fc54 	bl	8006518 <lsm6dso16is_write_reg>
 8006c70:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006c72:	68fb      	ldr	r3, [r7, #12]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <lsm6dso16is_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006c88:	f107 0208 	add.w	r2, r7, #8
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	2112      	movs	r1, #18
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff fc23 	bl	80064dc <lsm6dso16is_read_reg>
 8006c96:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10f      	bne.n	8006cbe <lsm6dso16is_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	7a3b      	ldrb	r3, [r7, #8]
 8006ca8:	f362 1386 	bfi	r3, r2, #6, #1
 8006cac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006cae:	f107 0208 	add.w	r2, r7, #8
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	2112      	movs	r1, #18
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff fc2e 	bl	8006518 <lsm6dso16is_write_reg>
 8006cbc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <lsm6dso16is_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_G, buff, 6);
 8006cd2:	f107 020c 	add.w	r2, r7, #12
 8006cd6:	2306      	movs	r3, #6
 8006cd8:	2122      	movs	r1, #34	@ 0x22
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff fbfe 	bl	80064dc <lsm6dso16is_read_reg>
 8006ce0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006ce2:	7b7b      	ldrb	r3, [r7, #13]
 8006ce4:	b21a      	sxth	r2, r3
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	021b      	lsls	r3, r3, #8
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	7b3a      	ldrb	r2, [r7, #12]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	b21a      	sxth	r2, r3
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006d02:	7bfa      	ldrb	r2, [r7, #15]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	3302      	adds	r3, #2
 8006d08:	b212      	sxth	r2, r2
 8006d0a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	3302      	adds	r3, #2
 8006d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	021b      	lsls	r3, r3, #8
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	7bba      	ldrb	r2, [r7, #14]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	3302      	adds	r3, #2
 8006d24:	b212      	sxth	r2, r2
 8006d26:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006d28:	7c7a      	ldrb	r2, [r7, #17]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	b212      	sxth	r2, r2
 8006d30:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	3304      	adds	r3, #4
 8006d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	021b      	lsls	r3, r3, #8
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	7c3a      	ldrb	r2, [r7, #16]
 8006d42:	4413      	add	r3, r2
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	3304      	adds	r3, #4
 8006d4a:	b212      	sxth	r2, r2
 8006d4c:	801a      	strh	r2, [r3, #0]

  return ret;
 8006d4e:	697b      	ldr	r3, [r7, #20]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <lsm6dso16is_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_A, buff, 6);
 8006d62:	f107 020c 	add.w	r2, r7, #12
 8006d66:	2306      	movs	r3, #6
 8006d68:	2128      	movs	r1, #40	@ 0x28
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff fbb6 	bl	80064dc <lsm6dso16is_read_reg>
 8006d70:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006d72:	7b7b      	ldrb	r3, [r7, #13]
 8006d74:	b21a      	sxth	r2, r3
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	021b      	lsls	r3, r3, #8
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	7b3a      	ldrb	r2, [r7, #12]
 8006d88:	4413      	add	r3, r2
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	b21a      	sxth	r2, r3
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006d92:	7bfa      	ldrb	r2, [r7, #15]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	3302      	adds	r3, #2
 8006d98:	b212      	sxth	r2, r2
 8006d9a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	3302      	adds	r3, #2
 8006da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	021b      	lsls	r3, r3, #8
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	7bba      	ldrb	r2, [r7, #14]
 8006dac:	4413      	add	r3, r2
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	3302      	adds	r3, #2
 8006db4:	b212      	sxth	r2, r2
 8006db6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006db8:	7c7a      	ldrb	r2, [r7, #17]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	b212      	sxth	r2, r2
 8006dc0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	021b      	lsls	r3, r3, #8
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	7c3a      	ldrb	r2, [r7, #16]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	b212      	sxth	r2, r2
 8006ddc:	801a      	strh	r2, [r3, #0]

  return ret;
 8006dde:	697b      	ldr	r3, [r7, #20]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <LSM6DSV16X_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_RegisterBusIO(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_IO_t *pIO)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d103      	bne.n	8006e04 <LSM6DSV16X_RegisterBusIO+0x1c>
  {
    ret = LSM6DSV16X_ERROR;
 8006dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8006e00:	60fb      	str	r3, [r7, #12]
 8006e02:	e05d      	b.n	8006ec0 <LSM6DSV16X_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init       = pIO->Init;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit     = pIO->DeInit;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType    = pIO->BusType;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address    = pIO->Address;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	7b1a      	ldrb	r2, [r3, #12]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg   = pIO->WriteReg;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	691a      	ldr	r2, [r3, #16]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg    = pIO->ReadReg;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	695a      	ldr	r2, [r3, #20]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick    = pIO->GetTick;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	699a      	ldr	r2, [r3, #24]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a23      	ldr	r2, [pc, #140]	@ (8006ecc <LSM6DSV16X_RegisterBusIO+0xe4>)
 8006e40:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a22      	ldr	r2, [pc, #136]	@ (8006ed0 <LSM6DSV16X_RegisterBusIO+0xe8>)
 8006e46:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	69da      	ldr	r2, [r3, #28]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d103      	bne.n	8006e66 <LSM6DSV16X_RegisterBusIO+0x7e>
    {
      ret = LSM6DSV16X_ERROR;
 8006e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e62:	60fb      	str	r3, [r7, #12]
 8006e64:	e02c      	b.n	8006ec0 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LSM6DSV16X_OK)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4798      	blx	r3
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <LSM6DSV16X_RegisterBusIO+0x92>
    {
      ret = LSM6DSV16X_ERROR;
 8006e72:	f04f 33ff 	mov.w	r3, #4294967295
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	e022      	b.n	8006ec0 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSV16X_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d11e      	bne.n	8006ec0 <LSM6DSV16X_RegisterBusIO+0xd8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d119      	bne.n	8006ec0 <LSM6DSV16X_RegisterBusIO+0xd8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x04;
 8006e8c:	2304      	movs	r3, #4
 8006e8e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_CTRL3, data) != LSM6DSV16X_OK)
 8006e90:	7afb      	ldrb	r3, [r7, #11]
 8006e92:	461a      	mov	r2, r3
 8006e94:	2112      	movs	r1, #18
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 ff18 	bl	8007ccc <LSM6DSV16X_Write_Reg>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <LSM6DSV16X_RegisterBusIO+0xc0>
          {
            ret = LSM6DSV16X_ERROR;
 8006ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea6:	60fb      	str	r3, [r7, #12]
          }

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_IF_CFG, data) != LSM6DSV16X_OK)
 8006ea8:	7afb      	ldrb	r3, [r7, #11]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	2103      	movs	r1, #3
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 ff0c 	bl	8007ccc <LSM6DSV16X_Write_Reg>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <LSM6DSV16X_RegisterBusIO+0xd8>
          {
            ret = LSM6DSV16X_ERROR;
 8006eba:	f04f 33ff 	mov.w	r3, #4294967295
 8006ebe:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	0800820d 	.word	0x0800820d
 8006ed0:	08008243 	.word	0x08008243

08006ed4 <LSM6DSV16X_Init>:
  * @brief  Initialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Init(LSM6DSV16X_Object_t *pObj)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Set main memory bank */
  if (LSM6DSV16X_Set_Mem_Bank(pObj, (uint8_t)LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 8006edc:	2100      	movs	r1, #0
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 ff0f 	bl	8007d02 <LSM6DSV16X_Set_Mem_Bank>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d002      	beq.n	8006ef0 <LSM6DSV16X_Init+0x1c>
  {
    return LSM6DSV16X_ERROR;
 8006eea:	f04f 33ff 	mov.w	r3, #4294967295
 8006eee:	e070      	b.n	8006fd2 <LSM6DSV16X_Init+0xfe>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface */
  if (lsm6dsv16x_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	3320      	adds	r3, #32
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f001 fcfe 	bl	80088f8 <lsm6dsv16x_auto_increment_set>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <LSM6DSV16X_Init+0x34>
  {
    return LSM6DSV16X_ERROR;
 8006f02:	f04f 33ff 	mov.w	r3, #4294967295
 8006f06:	e064      	b.n	8006fd2 <LSM6DSV16X_Init+0xfe>
  }

  /* Enable BDU */
  if (lsm6dsv16x_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3320      	adds	r3, #32
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f001 fd18 	bl	8008944 <lsm6dsv16x_block_data_update_set>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <LSM6DSV16X_Init+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8006f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f1e:	e058      	b.n	8006fd2 <LSM6DSV16X_Init+0xfe>
  }

  /* WAKE_UP mode selection */
  if (lsm6dsv16x_fifo_mode_set(&(pObj->Ctx), LSM6DSV16X_BYPASS_MODE) != LSM6DSV16X_OK)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	3320      	adds	r3, #32
 8006f24:	2100      	movs	r1, #0
 8006f26:	4618      	mov	r0, r3
 8006f28:	f001 feae 	bl	8008c88 <lsm6dsv16x_fifo_mode_set>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <LSM6DSV16X_Init+0x64>
  {
    return LSM6DSV16X_ERROR;
 8006f32:	f04f 33ff 	mov.w	r3, #4294967295
 8006f36:	e04c      	b.n	8006fd2 <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_AT_120Hz;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2206      	movs	r2, #6
 8006f3c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	3320      	adds	r3, #32
 8006f44:	2100      	movs	r1, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	f001 fa14 	bl	8008374 <lsm6dsv16x_xl_data_rate_set>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <LSM6DSV16X_Init+0x84>
  {
    return LSM6DSV16X_ERROR;
 8006f52:	f04f 33ff 	mov.w	r3, #4294967295
 8006f56:	e03c      	b.n	8006fd2 <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2g) != LSM6DSV16X_OK)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3320      	adds	r3, #32
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f001 fd94 	bl	8008a8c <lsm6dsv16x_xl_full_scale_set>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d002      	beq.n	8006f70 <LSM6DSV16X_Init+0x9c>
  {
    return LSM6DSV16X_ERROR;
 8006f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f6e:	e030      	b.n	8006fd2 <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->gyro_odr = LSM6DSV16X_ODR_AT_120Hz;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2206      	movs	r2, #6
 8006f74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3320      	adds	r3, #32
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 fb5a 	bl	8008638 <lsm6dsv16x_gy_data_rate_set>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d002      	beq.n	8006f90 <LSM6DSV16X_Init+0xbc>
  {
    return LSM6DSV16X_ERROR;
 8006f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f8e:	e020      	b.n	8006fd2 <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2000dps) != LSM6DSV16X_OK)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3320      	adds	r3, #32
 8006f94:	2104      	movs	r1, #4
 8006f96:	4618      	mov	r0, r3
 8006f98:	f001 fcfa 	bl	8008990 <lsm6dsv16x_gy_full_scale_set>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <LSM6DSV16X_Init+0xd4>
  {
    return LSM6DSV16X_ERROR;
 8006fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fa6:	e014      	b.n	8006fd2 <LSM6DSV16X_Init+0xfe>
  }

  /* Enable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 1;
 8006fa8:	7b3b      	ldrb	r3, [r7, #12]
 8006faa:	f043 0301 	orr.w	r3, r3, #1
 8006fae:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3320      	adds	r3, #32
 8006fb4:	7b39      	ldrb	r1, [r7, #12]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f001 fe8c 	bl	8008cd4 <lsm6dsv16x_ah_qvar_mode_set>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <LSM6DSV16X_Init+0xf4>
  {
    return LSM6DSV16X_ERROR;
 8006fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc6:	e004      	b.n	8006fd2 <LSM6DSV16X_Init+0xfe>
  }

  pObj->is_initialized = 1;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <LSM6DSV16X_DeInit>:
  * @brief  Deinitialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_DeInit(LSM6DSV16X_Object_t *pObj)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSV16X_ACC_Disable(pObj) != LSM6DSV16X_OK)
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f898 	bl	8007118 <LSM6DSV16X_ACC_Disable>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <LSM6DSV16X_DeInit+0x1a>
  {
    return LSM6DSV16X_ERROR;
 8006fee:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff2:	e025      	b.n	8007040 <LSM6DSV16X_DeInit+0x66>
  }

  if (LSM6DSV16X_GYRO_Disable(pObj) != LSM6DSV16X_OK)
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fb6a 	bl	80076ce <LSM6DSV16X_GYRO_Disable>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <LSM6DSV16X_DeInit+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8007000:	f04f 33ff 	mov.w	r3, #4294967295
 8007004:	e01c      	b.n	8007040 <LSM6DSV16X_DeInit+0x66>
  }

  /* Reset output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_OFF;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSV16X_ODR_OFF;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 0;
 8007016:	7b3b      	ldrb	r3, [r7, #12]
 8007018:	f023 0301 	bic.w	r3, r3, #1
 800701c:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	3320      	adds	r3, #32
 8007022:	7b39      	ldrb	r1, [r7, #12]
 8007024:	4618      	mov	r0, r3
 8007026:	f001 fe55 	bl	8008cd4 <lsm6dsv16x_ah_qvar_mode_set>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <LSM6DSV16X_DeInit+0x5c>
  {
    return LSM6DSV16X_ERROR;
 8007030:	f04f 33ff 	mov.w	r3, #4294967295
 8007034:	e004      	b.n	8007040 <LSM6DSV16X_DeInit+0x66>
  }

  pObj->is_initialized = 0;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 800703e:	2300      	movs	r3, #0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3710      	adds	r7, #16
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <LSM6DSV16X_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ReadID(LSM6DSV16X_Object_t *pObj, uint8_t *Id)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  if (lsm6dsv16x_device_id_get(&(pObj->Ctx), Id) != LSM6DSV16X_OK)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	3320      	adds	r3, #32
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	4618      	mov	r0, r3
 800705a:	f001 f97a 	bl	8008352 <lsm6dsv16x_device_id_get>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <LSM6DSV16X_ReadID+0x22>
  {
    return LSM6DSV16X_ERROR;
 8007064:	f04f 33ff 	mov.w	r3, #4294967295
 8007068:	e000      	b.n	800706c <LSM6DSV16X_ReadID+0x24>
  }

  return LSM6DSV16X_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <LSM6DSV16X_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSV16X sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GetCapabilities(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Capabilities_t *Capabilities)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2201      	movs	r2, #1
 8007082:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2201      	movs	r2, #1
 8007088:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2200      	movs	r2, #0
 800708e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 1;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2201      	movs	r2, #1
 8007094:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800709c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2210      	movs	r2, #16
 80070a2:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	2200      	movs	r2, #0
 80070a8:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 7680.0f;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	4a07      	ldr	r2, [pc, #28]	@ (80070cc <LSM6DSV16X_GetCapabilities+0x58>)
 80070ae:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 7680.0f;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	4a06      	ldr	r2, [pc, #24]	@ (80070cc <LSM6DSV16X_GetCapabilities+0x58>)
 80070b4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	f04f 0200 	mov.w	r2, #0
 80070bc:	619a      	str	r2, [r3, #24]
  return LSM6DSV16X_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	45f00000 	.word	0x45f00000

080070d0 <LSM6DSV16X_ACC_Enable>:
  * @brief  Enable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Enable(LSM6DSV16X_Object_t *pObj)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d101      	bne.n	80070e6 <LSM6DSV16X_ACC_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	e014      	b.n	8007110 <LSM6DSV16X_ACC_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSV16X_OK)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f103 0220 	add.w	r2, r3, #32
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80070f2:	4619      	mov	r1, r3
 80070f4:	4610      	mov	r0, r2
 80070f6:	f001 f93d 	bl	8008374 <lsm6dsv16x_xl_data_rate_set>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <LSM6DSV16X_ACC_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 8007100:	f04f 33ff 	mov.w	r3, #4294967295
 8007104:	e004      	b.n	8007110 <LSM6DSV16X_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2201      	movs	r2, #1
 800710a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <LSM6DSV16X_ACC_Disable>:
  * @brief  Disable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Disable(LSM6DSV16X_Object_t *pObj)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <LSM6DSV16X_ACC_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	e01f      	b.n	800716e <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSV16X_OK)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f103 0220 	add.w	r2, r3, #32
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3333      	adds	r3, #51	@ 0x33
 8007138:	4619      	mov	r1, r3
 800713a:	4610      	mov	r0, r2
 800713c:	f001 f96c 	bl	8008418 <lsm6dsv16x_xl_data_rate_get>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <LSM6DSV16X_ACC_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 8007146:	f04f 33ff 	mov.w	r3, #4294967295
 800714a:	e010      	b.n	800716e <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	3320      	adds	r3, #32
 8007150:	2100      	movs	r1, #0
 8007152:	4618      	mov	r0, r3
 8007154:	f001 f90e 	bl	8008374 <lsm6dsv16x_xl_data_rate_set>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <LSM6DSV16X_ACC_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 800715e:	f04f 33ff 	mov.w	r3, #4294967295
 8007162:	e004      	b.n	800716e <LSM6DSV16X_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
	...

08007178 <LSM6DSV16X_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	3320      	adds	r3, #32
 800718a:	f107 020b 	add.w	r2, r7, #11
 800718e:	4611      	mov	r1, r2
 8007190:	4618      	mov	r0, r3
 8007192:	f001 fca1 	bl	8008ad8 <lsm6dsv16x_xl_full_scale_get>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <LSM6DSV16X_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 800719c:	f04f 33ff 	mov.w	r3, #4294967295
 80071a0:	e023      	b.n	80071ea <LSM6DSV16X_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale */
  switch (full_scale)
 80071a2:	7afb      	ldrb	r3, [r7, #11]
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d81b      	bhi.n	80071e0 <LSM6DSV16X_ACC_GetSensitivity+0x68>
 80071a8:	a201      	add	r2, pc, #4	@ (adr r2, 80071b0 <LSM6DSV16X_ACC_GetSensitivity+0x38>)
 80071aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ae:	bf00      	nop
 80071b0:	080071c1 	.word	0x080071c1
 80071b4:	080071c9 	.word	0x080071c9
 80071b8:	080071d1 	.word	0x080071d1
 80071bc:	080071d9 	.word	0x080071d9
  {
    case LSM6DSV16X_2g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_2G;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	4a0c      	ldr	r2, [pc, #48]	@ (80071f4 <LSM6DSV16X_ACC_GetSensitivity+0x7c>)
 80071c4:	601a      	str	r2, [r3, #0]
      break;
 80071c6:	e00f      	b.n	80071e8 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_4g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_4G;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	4a0b      	ldr	r2, [pc, #44]	@ (80071f8 <LSM6DSV16X_ACC_GetSensitivity+0x80>)
 80071cc:	601a      	str	r2, [r3, #0]
      break;
 80071ce:	e00b      	b.n	80071e8 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_8g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_8G;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	4a0a      	ldr	r2, [pc, #40]	@ (80071fc <LSM6DSV16X_ACC_GetSensitivity+0x84>)
 80071d4:	601a      	str	r2, [r3, #0]
      break;
 80071d6:	e007      	b.n	80071e8 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_16g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_16G;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	4a09      	ldr	r2, [pc, #36]	@ (8007200 <LSM6DSV16X_ACC_GetSensitivity+0x88>)
 80071dc:	601a      	str	r2, [r3, #0]
      break;
 80071de:	e003      	b.n	80071e8 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 80071e0:	f04f 33ff 	mov.w	r3, #4294967295
 80071e4:	60fb      	str	r3, [r7, #12]
      break;
 80071e6:	bf00      	nop
  }

  return ret;
 80071e8:	68fb      	ldr	r3, [r7, #12]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	3d79db23 	.word	0x3d79db23
 80071f8:	3df9db23 	.word	0x3df9db23
 80071fc:	3e79db23 	.word	0x3e79db23
 8007200:	3ef9db23 	.word	0x3ef9db23

08007204 <LSM6DSV16X_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3320      	adds	r3, #32
 8007216:	f107 020b 	add.w	r2, r7, #11
 800721a:	4611      	mov	r1, r2
 800721c:	4618      	mov	r0, r3
 800721e:	f001 f8fb 	bl	8008418 <lsm6dsv16x_xl_data_rate_get>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <LSM6DSV16X_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8007228:	f04f 33ff 	mov.w	r3, #4294967295
 800722c:	e0ea      	b.n	8007404 <LSM6DSV16X_ACC_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 800722e:	7afb      	ldrb	r3, [r7, #11]
 8007230:	2b2c      	cmp	r3, #44	@ 0x2c
 8007232:	f200 80e2 	bhi.w	80073fa <LSM6DSV16X_ACC_GetOutputDataRate+0x1f6>
 8007236:	a201      	add	r2, pc, #4	@ (adr r2, 800723c <LSM6DSV16X_ACC_GetOutputDataRate+0x38>)
 8007238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723c:	080072f1 	.word	0x080072f1
 8007240:	080072fb 	.word	0x080072fb
 8007244:	08007303 	.word	0x08007303
 8007248:	08007313 	.word	0x08007313
 800724c:	0800732b 	.word	0x0800732b
 8007250:	08007343 	.word	0x08007343
 8007254:	0800735b 	.word	0x0800735b
 8007258:	08007373 	.word	0x08007373
 800725c:	0800738b 	.word	0x0800738b
 8007260:	080073a3 	.word	0x080073a3
 8007264:	080073bb 	.word	0x080073bb
 8007268:	080073d3 	.word	0x080073d3
 800726c:	080073eb 	.word	0x080073eb
 8007270:	080073fb 	.word	0x080073fb
 8007274:	080073fb 	.word	0x080073fb
 8007278:	080073fb 	.word	0x080073fb
 800727c:	080073fb 	.word	0x080073fb
 8007280:	080073fb 	.word	0x080073fb
 8007284:	080073fb 	.word	0x080073fb
 8007288:	0800731b 	.word	0x0800731b
 800728c:	08007333 	.word	0x08007333
 8007290:	0800734b 	.word	0x0800734b
 8007294:	08007363 	.word	0x08007363
 8007298:	0800737b 	.word	0x0800737b
 800729c:	08007393 	.word	0x08007393
 80072a0:	080073ab 	.word	0x080073ab
 80072a4:	080073c3 	.word	0x080073c3
 80072a8:	080073db 	.word	0x080073db
 80072ac:	080073f3 	.word	0x080073f3
 80072b0:	080073fb 	.word	0x080073fb
 80072b4:	080073fb 	.word	0x080073fb
 80072b8:	080073fb 	.word	0x080073fb
 80072bc:	080073fb 	.word	0x080073fb
 80072c0:	080073fb 	.word	0x080073fb
 80072c4:	080073fb 	.word	0x080073fb
 80072c8:	0800730b 	.word	0x0800730b
 80072cc:	08007323 	.word	0x08007323
 80072d0:	0800733b 	.word	0x0800733b
 80072d4:	08007353 	.word	0x08007353
 80072d8:	0800736b 	.word	0x0800736b
 80072dc:	08007383 	.word	0x08007383
 80072e0:	0800739b 	.word	0x0800739b
 80072e4:	080073b3 	.word	0x080073b3
 80072e8:	080073cb 	.word	0x080073cb
 80072ec:	080073e3 	.word	0x080073e3
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	f04f 0200 	mov.w	r2, #0
 80072f6:	601a      	str	r2, [r3, #0]
      break;
 80072f8:	e083      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	4a43      	ldr	r2, [pc, #268]	@ (800740c <LSM6DSV16X_ACC_GetOutputDataRate+0x208>)
 80072fe:	601a      	str	r2, [r3, #0]
      break;
 8007300:	e07f      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	4a42      	ldr	r2, [pc, #264]	@ (8007410 <LSM6DSV16X_ACC_GetOutputDataRate+0x20c>)
 8007306:	601a      	str	r2, [r3, #0]
      break;
 8007308:	e07b      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	4a41      	ldr	r2, [pc, #260]	@ (8007414 <LSM6DSV16X_ACC_GetOutputDataRate+0x210>)
 800730e:	601a      	str	r2, [r3, #0]
      break;
 8007310:	e077      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	4a40      	ldr	r2, [pc, #256]	@ (8007418 <LSM6DSV16X_ACC_GetOutputDataRate+0x214>)
 8007316:	601a      	str	r2, [r3, #0]
      break;
 8007318:	e073      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	4a3f      	ldr	r2, [pc, #252]	@ (800741c <LSM6DSV16X_ACC_GetOutputDataRate+0x218>)
 800731e:	601a      	str	r2, [r3, #0]
      break;
 8007320:	e06f      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	4a3e      	ldr	r2, [pc, #248]	@ (8007420 <LSM6DSV16X_ACC_GetOutputDataRate+0x21c>)
 8007326:	601a      	str	r2, [r3, #0]
      break;
 8007328:	e06b      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	4a3d      	ldr	r2, [pc, #244]	@ (8007424 <LSM6DSV16X_ACC_GetOutputDataRate+0x220>)
 800732e:	601a      	str	r2, [r3, #0]
      break;
 8007330:	e067      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	4a3c      	ldr	r2, [pc, #240]	@ (8007428 <LSM6DSV16X_ACC_GetOutputDataRate+0x224>)
 8007336:	601a      	str	r2, [r3, #0]
      break;
 8007338:	e063      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	4a3b      	ldr	r2, [pc, #236]	@ (800742c <LSM6DSV16X_ACC_GetOutputDataRate+0x228>)
 800733e:	601a      	str	r2, [r3, #0]
      break;
 8007340:	e05f      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	4a3a      	ldr	r2, [pc, #232]	@ (8007430 <LSM6DSV16X_ACC_GetOutputDataRate+0x22c>)
 8007346:	601a      	str	r2, [r3, #0]
      break;
 8007348:	e05b      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	4a39      	ldr	r2, [pc, #228]	@ (8007434 <LSM6DSV16X_ACC_GetOutputDataRate+0x230>)
 800734e:	601a      	str	r2, [r3, #0]
      break;
 8007350:	e057      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	4a38      	ldr	r2, [pc, #224]	@ (8007438 <LSM6DSV16X_ACC_GetOutputDataRate+0x234>)
 8007356:	601a      	str	r2, [r3, #0]
      break;
 8007358:	e053      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	4a37      	ldr	r2, [pc, #220]	@ (800743c <LSM6DSV16X_ACC_GetOutputDataRate+0x238>)
 800735e:	601a      	str	r2, [r3, #0]
      break;
 8007360:	e04f      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	4a36      	ldr	r2, [pc, #216]	@ (8007440 <LSM6DSV16X_ACC_GetOutputDataRate+0x23c>)
 8007366:	601a      	str	r2, [r3, #0]
      break;
 8007368:	e04b      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	4a35      	ldr	r2, [pc, #212]	@ (8007444 <LSM6DSV16X_ACC_GetOutputDataRate+0x240>)
 800736e:	601a      	str	r2, [r3, #0]
      break;
 8007370:	e047      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	4a34      	ldr	r2, [pc, #208]	@ (8007448 <LSM6DSV16X_ACC_GetOutputDataRate+0x244>)
 8007376:	601a      	str	r2, [r3, #0]
      break;
 8007378:	e043      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	4a33      	ldr	r2, [pc, #204]	@ (800744c <LSM6DSV16X_ACC_GetOutputDataRate+0x248>)
 800737e:	601a      	str	r2, [r3, #0]
      break;
 8007380:	e03f      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	4a32      	ldr	r2, [pc, #200]	@ (8007450 <LSM6DSV16X_ACC_GetOutputDataRate+0x24c>)
 8007386:	601a      	str	r2, [r3, #0]
      break;
 8007388:	e03b      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	4a31      	ldr	r2, [pc, #196]	@ (8007454 <LSM6DSV16X_ACC_GetOutputDataRate+0x250>)
 800738e:	601a      	str	r2, [r3, #0]
      break;
 8007390:	e037      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	4a30      	ldr	r2, [pc, #192]	@ (8007458 <LSM6DSV16X_ACC_GetOutputDataRate+0x254>)
 8007396:	601a      	str	r2, [r3, #0]
      break;
 8007398:	e033      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	4a2f      	ldr	r2, [pc, #188]	@ (800745c <LSM6DSV16X_ACC_GetOutputDataRate+0x258>)
 800739e:	601a      	str	r2, [r3, #0]
      break;
 80073a0:	e02f      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	4a2e      	ldr	r2, [pc, #184]	@ (8007460 <LSM6DSV16X_ACC_GetOutputDataRate+0x25c>)
 80073a6:	601a      	str	r2, [r3, #0]
      break;
 80073a8:	e02b      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	4a2d      	ldr	r2, [pc, #180]	@ (8007464 <LSM6DSV16X_ACC_GetOutputDataRate+0x260>)
 80073ae:	601a      	str	r2, [r3, #0]
      break;
 80073b0:	e027      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	4a2c      	ldr	r2, [pc, #176]	@ (8007468 <LSM6DSV16X_ACC_GetOutputDataRate+0x264>)
 80073b6:	601a      	str	r2, [r3, #0]
      break;
 80073b8:	e023      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	4a2b      	ldr	r2, [pc, #172]	@ (800746c <LSM6DSV16X_ACC_GetOutputDataRate+0x268>)
 80073be:	601a      	str	r2, [r3, #0]
      break;
 80073c0:	e01f      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	4a2a      	ldr	r2, [pc, #168]	@ (8007470 <LSM6DSV16X_ACC_GetOutputDataRate+0x26c>)
 80073c6:	601a      	str	r2, [r3, #0]
      break;
 80073c8:	e01b      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	4a29      	ldr	r2, [pc, #164]	@ (8007474 <LSM6DSV16X_ACC_GetOutputDataRate+0x270>)
 80073ce:	601a      	str	r2, [r3, #0]
      break;
 80073d0:	e017      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	4a28      	ldr	r2, [pc, #160]	@ (8007478 <LSM6DSV16X_ACC_GetOutputDataRate+0x274>)
 80073d6:	601a      	str	r2, [r3, #0]
      break;
 80073d8:	e013      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	4a27      	ldr	r2, [pc, #156]	@ (800747c <LSM6DSV16X_ACC_GetOutputDataRate+0x278>)
 80073de:	601a      	str	r2, [r3, #0]
      break;
 80073e0:	e00f      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	4a26      	ldr	r2, [pc, #152]	@ (8007480 <LSM6DSV16X_ACC_GetOutputDataRate+0x27c>)
 80073e6:	601a      	str	r2, [r3, #0]
      break;
 80073e8:	e00b      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	4a25      	ldr	r2, [pc, #148]	@ (8007484 <LSM6DSV16X_ACC_GetOutputDataRate+0x280>)
 80073ee:	601a      	str	r2, [r3, #0]
      break;
 80073f0:	e007      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	4a24      	ldr	r2, [pc, #144]	@ (8007488 <LSM6DSV16X_ACC_GetOutputDataRate+0x284>)
 80073f6:	601a      	str	r2, [r3, #0]
      break;
 80073f8:	e003      	b.n	8007402 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 80073fa:	f04f 33ff 	mov.w	r3, #4294967295
 80073fe:	60fb      	str	r3, [r7, #12]
      break;
 8007400:	bf00      	nop
  }

  return ret;
 8007402:	68fb      	ldr	r3, [r7, #12]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	3ff00000 	.word	0x3ff00000
 8007410:	40f00000 	.word	0x40f00000
 8007414:	41480000 	.word	0x41480000
 8007418:	41700000 	.word	0x41700000
 800741c:	417a0000 	.word	0x417a0000
 8007420:	41c80000 	.word	0x41c80000
 8007424:	41f00000 	.word	0x41f00000
 8007428:	41fa0000 	.word	0x41fa0000
 800742c:	42480000 	.word	0x42480000
 8007430:	42700000 	.word	0x42700000
 8007434:	427a0000 	.word	0x427a0000
 8007438:	42c80000 	.word	0x42c80000
 800743c:	42f00000 	.word	0x42f00000
 8007440:	42fa0000 	.word	0x42fa0000
 8007444:	43480000 	.word	0x43480000
 8007448:	43700000 	.word	0x43700000
 800744c:	437a0000 	.word	0x437a0000
 8007450:	43c80000 	.word	0x43c80000
 8007454:	43f00000 	.word	0x43f00000
 8007458:	43fa0000 	.word	0x43fa0000
 800745c:	44480000 	.word	0x44480000
 8007460:	44700000 	.word	0x44700000
 8007464:	447a0000 	.word	0x447a0000
 8007468:	44c80000 	.word	0x44c80000
 800746c:	44f00000 	.word	0x44f00000
 8007470:	44fa0000 	.word	0x44fa0000
 8007474:	45480000 	.word	0x45480000
 8007478:	45700000 	.word	0x45700000
 800747c:	457a0000 	.word	0x457a0000
 8007480:	45c80000 	.word	0x45c80000
 8007484:	45f00000 	.word	0x45f00000
 8007488:	45fa0000 	.word	0x45fa0000

0800748c <LSM6DSV16X_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->acc_is_enabled == 1U)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d106      	bne.n	80074b0 <LSM6DSV16X_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80074a2:	ed97 0a00 	vldr	s0, [r7]
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fc52 	bl	8007d50 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>
 80074ac:	4603      	mov	r3, r0
 80074ae:	e005      	b.n	80074bc <LSM6DSV16X_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80074b0:	ed97 0a00 	vldr	s0, [r7]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fced 	bl	8007e94 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>
 80074ba:	4603      	mov	r3, r0
  }
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <LSM6DSV16X_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t *FullScale)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	3320      	adds	r3, #32
 80074d6:	f107 020b 	add.w	r2, r7, #11
 80074da:	4611      	mov	r1, r2
 80074dc:	4618      	mov	r0, r3
 80074de:	f001 fafb 	bl	8008ad8 <lsm6dsv16x_xl_full_scale_get>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <LSM6DSV16X_ACC_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 80074e8:	f04f 33ff 	mov.w	r3, #4294967295
 80074ec:	e023      	b.n	8007536 <LSM6DSV16X_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80074ee:	7afb      	ldrb	r3, [r7, #11]
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d81b      	bhi.n	800752c <LSM6DSV16X_ACC_GetFullScale+0x68>
 80074f4:	a201      	add	r2, pc, #4	@ (adr r2, 80074fc <LSM6DSV16X_ACC_GetFullScale+0x38>)
 80074f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074fa:	bf00      	nop
 80074fc:	0800750d 	.word	0x0800750d
 8007500:	08007515 	.word	0x08007515
 8007504:	0800751d 	.word	0x0800751d
 8007508:	08007525 	.word	0x08007525
  {
    case LSM6DSV16X_2g:
      *FullScale =  2;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	2202      	movs	r2, #2
 8007510:	601a      	str	r2, [r3, #0]
      break;
 8007512:	e00f      	b.n	8007534 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_4g:
      *FullScale =  4;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2204      	movs	r2, #4
 8007518:	601a      	str	r2, [r3, #0]
      break;
 800751a:	e00b      	b.n	8007534 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_8g:
      *FullScale =  8;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2208      	movs	r2, #8
 8007520:	601a      	str	r2, [r3, #0]
      break;
 8007522:	e007      	b.n	8007534 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_16g:
      *FullScale = 16;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	2210      	movs	r2, #16
 8007528:	601a      	str	r2, [r3, #0]
      break;
 800752a:	e003      	b.n	8007534 <LSM6DSV16X_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 800752c:	f04f 33ff 	mov.w	r3, #4294967295
 8007530:	60fb      	str	r3, [r7, #12]
      break;
 8007532:	bf00      	nop
  }

  return ret;
 8007534:	68fb      	ldr	r3, [r7, #12]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop

08007540 <LSM6DSV16X_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_xl_full_scale_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
           : (FullScale <= 4) ? LSM6DSV16X_4g
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b02      	cmp	r3, #2
 800754e:	dd0b      	ble.n	8007568 <LSM6DSV16X_ACC_SetFullScale+0x28>
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2b04      	cmp	r3, #4
 8007554:	dd06      	ble.n	8007564 <LSM6DSV16X_ACC_SetFullScale+0x24>
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b08      	cmp	r3, #8
 800755a:	dc01      	bgt.n	8007560 <LSM6DSV16X_ACC_SetFullScale+0x20>
 800755c:	2302      	movs	r3, #2
 800755e:	e004      	b.n	800756a <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8007560:	2303      	movs	r3, #3
 8007562:	e002      	b.n	800756a <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8007564:	2301      	movs	r3, #1
 8007566:	e000      	b.n	800756a <LSM6DSV16X_ACC_SetFullScale+0x2a>
 8007568:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
 800756a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSV16X_8g
           :                    LSM6DSV16X_16g;

  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3320      	adds	r3, #32
 8007570:	7bfa      	ldrb	r2, [r7, #15]
 8007572:	4611      	mov	r1, r2
 8007574:	4618      	mov	r0, r3
 8007576:	f001 fa89 	bl	8008a8c <lsm6dsv16x_xl_full_scale_set>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <LSM6DSV16X_ACC_SetFullScale+0x46>
  {
    return LSM6DSV16X_ERROR;
 8007580:	f04f 33ff 	mov.w	r3, #4294967295
 8007584:	e000      	b.n	8007588 <LSM6DSV16X_ACC_SetFullScale+0x48>
  }

  return LSM6DSV16X_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <LSM6DSV16X_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3320      	adds	r3, #32
 800759e:	f107 0208 	add.w	r2, r7, #8
 80075a2:	4611      	mov	r1, r2
 80075a4:	4618      	mov	r0, r3
 80075a6:	f001 fb22 	bl	8008bee <lsm6dsv16x_acceleration_raw_get>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d002      	beq.n	80075b6 <LSM6DSV16X_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 80075b0:	f04f 33ff 	mov.w	r3, #4294967295
 80075b4:	e00c      	b.n	80075d0 <LSM6DSV16X_ACC_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 80075b6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80075be:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80075c6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <LSM6DSV16X_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *Acceleration)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80075e2:	f04f 0300 	mov.w	r3, #0
 80075e6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3320      	adds	r3, #32
 80075ec:	f107 0210 	add.w	r2, r7, #16
 80075f0:	4611      	mov	r1, r2
 80075f2:	4618      	mov	r0, r3
 80075f4:	f001 fafb 	bl	8008bee <lsm6dsv16x_acceleration_raw_get>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d002      	beq.n	8007604 <LSM6DSV16X_ACC_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 80075fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007602:	e03c      	b.n	800767e <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8007604:	f107 030c 	add.w	r3, r7, #12
 8007608:	4619      	mov	r1, r3
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7ff fdb4 	bl	8007178 <LSM6DSV16X_ACC_GetSensitivity>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d002      	beq.n	800761c <LSM6DSV16X_ACC_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 8007616:	f04f 33ff 	mov.w	r3, #4294967295
 800761a:	e030      	b.n	800767e <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Calculate the data */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800761c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007620:	ee07 3a90 	vmov	s15, r3
 8007624:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007628:	edd7 7a03 	vldr	s15, [r7, #12]
 800762c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007630:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007634:	ee17 2a90 	vmov	r2, s15
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800763c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007640:	ee07 3a90 	vmov	s15, r3
 8007644:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007648:	edd7 7a03 	vldr	s15, [r7, #12]
 800764c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007654:	ee17 2a90 	vmov	r2, s15
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800765c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007660:	ee07 3a90 	vmov	s15, r3
 8007664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007668:	edd7 7a03 	vldr	s15, [r7, #12]
 800766c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007674:	ee17 2a90 	vmov	r2, s15
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <LSM6DSV16X_GYRO_Enable>:
  * @brief  Enable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Enable(LSM6DSV16X_Object_t *pObj)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007694:	2b01      	cmp	r3, #1
 8007696:	d101      	bne.n	800769c <LSM6DSV16X_GYRO_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	e014      	b.n	80076c6 <LSM6DSV16X_GYRO_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSV16X_OK)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f103 0220 	add.w	r2, r3, #32
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80076a8:	4619      	mov	r1, r3
 80076aa:	4610      	mov	r0, r2
 80076ac:	f000 ffc4 	bl	8008638 <lsm6dsv16x_gy_data_rate_set>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d002      	beq.n	80076bc <LSM6DSV16X_GYRO_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 80076b6:	f04f 33ff 	mov.w	r3, #4294967295
 80076ba:	e004      	b.n	80076c6 <LSM6DSV16X_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <LSM6DSV16X_GYRO_Disable>:
  * @brief  Disable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Disable(LSM6DSV16X_Object_t *pObj)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b082      	sub	sp, #8
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <LSM6DSV16X_GYRO_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	e01f      	b.n	8007724 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSV16X_OK)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f103 0220 	add.w	r2, r3, #32
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	3334      	adds	r3, #52	@ 0x34
 80076ee:	4619      	mov	r1, r3
 80076f0:	4610      	mov	r0, r2
 80076f2:	f000 fff1 	bl	80086d8 <lsm6dsv16x_gy_data_rate_get>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <LSM6DSV16X_GYRO_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 80076fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007700:	e010      	b.n	8007724 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	3320      	adds	r3, #32
 8007706:	2100      	movs	r1, #0
 8007708:	4618      	mov	r0, r3
 800770a:	f000 ff95 	bl	8008638 <lsm6dsv16x_gy_data_rate_set>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <LSM6DSV16X_GYRO_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8007714:	f04f 33ff 	mov.w	r3, #4294967295
 8007718:	e004      	b.n	8007724 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <LSM6DSV16X_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	3320      	adds	r3, #32
 800773e:	f107 020b 	add.w	r2, r7, #11
 8007742:	4611      	mov	r1, r2
 8007744:	4618      	mov	r0, r3
 8007746:	f001 f949 	bl	80089dc <lsm6dsv16x_gy_full_scale_get>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d002      	beq.n	8007756 <LSM6DSV16X_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8007750:	f04f 33ff 	mov.w	r3, #4294967295
 8007754:	e03d      	b.n	80077d2 <LSM6DSV16X_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale */
  switch (full_scale)
 8007756:	7afb      	ldrb	r3, [r7, #11]
 8007758:	2b0c      	cmp	r3, #12
 800775a:	d835      	bhi.n	80077c8 <LSM6DSV16X_GYRO_GetSensitivity+0x9c>
 800775c:	a201      	add	r2, pc, #4	@ (adr r2, 8007764 <LSM6DSV16X_GYRO_GetSensitivity+0x38>)
 800775e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007762:	bf00      	nop
 8007764:	08007799 	.word	0x08007799
 8007768:	080077a1 	.word	0x080077a1
 800776c:	080077a9 	.word	0x080077a9
 8007770:	080077b1 	.word	0x080077b1
 8007774:	080077b9 	.word	0x080077b9
 8007778:	080077c9 	.word	0x080077c9
 800777c:	080077c9 	.word	0x080077c9
 8007780:	080077c9 	.word	0x080077c9
 8007784:	080077c9 	.word	0x080077c9
 8007788:	080077c9 	.word	0x080077c9
 800778c:	080077c9 	.word	0x080077c9
 8007790:	080077c9 	.word	0x080077c9
 8007794:	080077c1 	.word	0x080077c1
  {
    case LSM6DSV16X_125dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_125DPS;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	4a10      	ldr	r2, [pc, #64]	@ (80077dc <LSM6DSV16X_GYRO_GetSensitivity+0xb0>)
 800779c:	601a      	str	r2, [r3, #0]
      break;
 800779e:	e017      	b.n	80077d0 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_250dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_250DPS;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	4a0f      	ldr	r2, [pc, #60]	@ (80077e0 <LSM6DSV16X_GYRO_GetSensitivity+0xb4>)
 80077a4:	601a      	str	r2, [r3, #0]
      break;
 80077a6:	e013      	b.n	80077d0 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_500dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_500DPS;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	4a0e      	ldr	r2, [pc, #56]	@ (80077e4 <LSM6DSV16X_GYRO_GetSensitivity+0xb8>)
 80077ac:	601a      	str	r2, [r3, #0]
      break;
 80077ae:	e00f      	b.n	80077d0 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_1000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_1000DPS;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	4a0d      	ldr	r2, [pc, #52]	@ (80077e8 <LSM6DSV16X_GYRO_GetSensitivity+0xbc>)
 80077b4:	601a      	str	r2, [r3, #0]
      break;
 80077b6:	e00b      	b.n	80077d0 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_2000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_2000DPS;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	4a0c      	ldr	r2, [pc, #48]	@ (80077ec <LSM6DSV16X_GYRO_GetSensitivity+0xc0>)
 80077bc:	601a      	str	r2, [r3, #0]
      break;
 80077be:	e007      	b.n	80077d0 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_4000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_4000DPS;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	4a0b      	ldr	r2, [pc, #44]	@ (80077f0 <LSM6DSV16X_GYRO_GetSensitivity+0xc4>)
 80077c4:	601a      	str	r2, [r3, #0]
      break;
 80077c6:	e003      	b.n	80077d0 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    default:
      ret = LSM6DSV16X_ERROR;
 80077c8:	f04f 33ff 	mov.w	r3, #4294967295
 80077cc:	60fb      	str	r3, [r7, #12]
      break;
 80077ce:	bf00      	nop
  }

  return ret;
 80077d0:	68fb      	ldr	r3, [r7, #12]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	408c0000 	.word	0x408c0000
 80077e0:	410c0000 	.word	0x410c0000
 80077e4:	418c0000 	.word	0x418c0000
 80077e8:	420c0000 	.word	0x420c0000
 80077ec:	428c0000 	.word	0x428c0000
 80077f0:	430c0000 	.word	0x430c0000

080077f4 <LSM6DSV16X_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	3320      	adds	r3, #32
 8007806:	f107 020b 	add.w	r2, r7, #11
 800780a:	4611      	mov	r1, r2
 800780c:	4618      	mov	r0, r3
 800780e:	f000 ff63 	bl	80086d8 <lsm6dsv16x_gy_data_rate_get>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <LSM6DSV16X_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8007818:	f04f 33ff 	mov.w	r3, #4294967295
 800781c:	e0ea      	b.n	80079f4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 800781e:	7afb      	ldrb	r3, [r7, #11]
 8007820:	2b2c      	cmp	r3, #44	@ 0x2c
 8007822:	f200 80e2 	bhi.w	80079ea <LSM6DSV16X_GYRO_GetOutputDataRate+0x1f6>
 8007826:	a201      	add	r2, pc, #4	@ (adr r2, 800782c <LSM6DSV16X_GYRO_GetOutputDataRate+0x38>)
 8007828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782c:	080078e1 	.word	0x080078e1
 8007830:	080078eb 	.word	0x080078eb
 8007834:	080078f3 	.word	0x080078f3
 8007838:	08007903 	.word	0x08007903
 800783c:	0800791b 	.word	0x0800791b
 8007840:	08007933 	.word	0x08007933
 8007844:	0800794b 	.word	0x0800794b
 8007848:	08007963 	.word	0x08007963
 800784c:	0800797b 	.word	0x0800797b
 8007850:	08007993 	.word	0x08007993
 8007854:	080079ab 	.word	0x080079ab
 8007858:	080079c3 	.word	0x080079c3
 800785c:	080079db 	.word	0x080079db
 8007860:	080079eb 	.word	0x080079eb
 8007864:	080079eb 	.word	0x080079eb
 8007868:	080079eb 	.word	0x080079eb
 800786c:	080079eb 	.word	0x080079eb
 8007870:	080079eb 	.word	0x080079eb
 8007874:	080079eb 	.word	0x080079eb
 8007878:	0800790b 	.word	0x0800790b
 800787c:	08007923 	.word	0x08007923
 8007880:	0800793b 	.word	0x0800793b
 8007884:	08007953 	.word	0x08007953
 8007888:	0800796b 	.word	0x0800796b
 800788c:	08007983 	.word	0x08007983
 8007890:	0800799b 	.word	0x0800799b
 8007894:	080079b3 	.word	0x080079b3
 8007898:	080079cb 	.word	0x080079cb
 800789c:	080079e3 	.word	0x080079e3
 80078a0:	080079eb 	.word	0x080079eb
 80078a4:	080079eb 	.word	0x080079eb
 80078a8:	080079eb 	.word	0x080079eb
 80078ac:	080079eb 	.word	0x080079eb
 80078b0:	080079eb 	.word	0x080079eb
 80078b4:	080079eb 	.word	0x080079eb
 80078b8:	080078fb 	.word	0x080078fb
 80078bc:	08007913 	.word	0x08007913
 80078c0:	0800792b 	.word	0x0800792b
 80078c4:	08007943 	.word	0x08007943
 80078c8:	0800795b 	.word	0x0800795b
 80078cc:	08007973 	.word	0x08007973
 80078d0:	0800798b 	.word	0x0800798b
 80078d4:	080079a3 	.word	0x080079a3
 80078d8:	080079bb 	.word	0x080079bb
 80078dc:	080079d3 	.word	0x080079d3
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	f04f 0200 	mov.w	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]
      break;
 80078e8:	e083      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	4a43      	ldr	r2, [pc, #268]	@ (80079fc <LSM6DSV16X_GYRO_GetOutputDataRate+0x208>)
 80078ee:	601a      	str	r2, [r3, #0]
      break;
 80078f0:	e07f      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	4a42      	ldr	r2, [pc, #264]	@ (8007a00 <LSM6DSV16X_GYRO_GetOutputDataRate+0x20c>)
 80078f6:	601a      	str	r2, [r3, #0]
      break;
 80078f8:	e07b      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	4a41      	ldr	r2, [pc, #260]	@ (8007a04 <LSM6DSV16X_GYRO_GetOutputDataRate+0x210>)
 80078fe:	601a      	str	r2, [r3, #0]
      break;
 8007900:	e077      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	4a40      	ldr	r2, [pc, #256]	@ (8007a08 <LSM6DSV16X_GYRO_GetOutputDataRate+0x214>)
 8007906:	601a      	str	r2, [r3, #0]
      break;
 8007908:	e073      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	4a3f      	ldr	r2, [pc, #252]	@ (8007a0c <LSM6DSV16X_GYRO_GetOutputDataRate+0x218>)
 800790e:	601a      	str	r2, [r3, #0]
      break;
 8007910:	e06f      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	4a3e      	ldr	r2, [pc, #248]	@ (8007a10 <LSM6DSV16X_GYRO_GetOutputDataRate+0x21c>)
 8007916:	601a      	str	r2, [r3, #0]
      break;
 8007918:	e06b      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	4a3d      	ldr	r2, [pc, #244]	@ (8007a14 <LSM6DSV16X_GYRO_GetOutputDataRate+0x220>)
 800791e:	601a      	str	r2, [r3, #0]
      break;
 8007920:	e067      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	4a3c      	ldr	r2, [pc, #240]	@ (8007a18 <LSM6DSV16X_GYRO_GetOutputDataRate+0x224>)
 8007926:	601a      	str	r2, [r3, #0]
      break;
 8007928:	e063      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	4a3b      	ldr	r2, [pc, #236]	@ (8007a1c <LSM6DSV16X_GYRO_GetOutputDataRate+0x228>)
 800792e:	601a      	str	r2, [r3, #0]
      break;
 8007930:	e05f      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	4a3a      	ldr	r2, [pc, #232]	@ (8007a20 <LSM6DSV16X_GYRO_GetOutputDataRate+0x22c>)
 8007936:	601a      	str	r2, [r3, #0]
      break;
 8007938:	e05b      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	4a39      	ldr	r2, [pc, #228]	@ (8007a24 <LSM6DSV16X_GYRO_GetOutputDataRate+0x230>)
 800793e:	601a      	str	r2, [r3, #0]
      break;
 8007940:	e057      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	4a38      	ldr	r2, [pc, #224]	@ (8007a28 <LSM6DSV16X_GYRO_GetOutputDataRate+0x234>)
 8007946:	601a      	str	r2, [r3, #0]
      break;
 8007948:	e053      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	4a37      	ldr	r2, [pc, #220]	@ (8007a2c <LSM6DSV16X_GYRO_GetOutputDataRate+0x238>)
 800794e:	601a      	str	r2, [r3, #0]
      break;
 8007950:	e04f      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	4a36      	ldr	r2, [pc, #216]	@ (8007a30 <LSM6DSV16X_GYRO_GetOutputDataRate+0x23c>)
 8007956:	601a      	str	r2, [r3, #0]
      break;
 8007958:	e04b      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	4a35      	ldr	r2, [pc, #212]	@ (8007a34 <LSM6DSV16X_GYRO_GetOutputDataRate+0x240>)
 800795e:	601a      	str	r2, [r3, #0]
      break;
 8007960:	e047      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	4a34      	ldr	r2, [pc, #208]	@ (8007a38 <LSM6DSV16X_GYRO_GetOutputDataRate+0x244>)
 8007966:	601a      	str	r2, [r3, #0]
      break;
 8007968:	e043      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	4a33      	ldr	r2, [pc, #204]	@ (8007a3c <LSM6DSV16X_GYRO_GetOutputDataRate+0x248>)
 800796e:	601a      	str	r2, [r3, #0]
      break;
 8007970:	e03f      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	4a32      	ldr	r2, [pc, #200]	@ (8007a40 <LSM6DSV16X_GYRO_GetOutputDataRate+0x24c>)
 8007976:	601a      	str	r2, [r3, #0]
      break;
 8007978:	e03b      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	4a31      	ldr	r2, [pc, #196]	@ (8007a44 <LSM6DSV16X_GYRO_GetOutputDataRate+0x250>)
 800797e:	601a      	str	r2, [r3, #0]
      break;
 8007980:	e037      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	4a30      	ldr	r2, [pc, #192]	@ (8007a48 <LSM6DSV16X_GYRO_GetOutputDataRate+0x254>)
 8007986:	601a      	str	r2, [r3, #0]
      break;
 8007988:	e033      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	4a2f      	ldr	r2, [pc, #188]	@ (8007a4c <LSM6DSV16X_GYRO_GetOutputDataRate+0x258>)
 800798e:	601a      	str	r2, [r3, #0]
      break;
 8007990:	e02f      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	4a2e      	ldr	r2, [pc, #184]	@ (8007a50 <LSM6DSV16X_GYRO_GetOutputDataRate+0x25c>)
 8007996:	601a      	str	r2, [r3, #0]
      break;
 8007998:	e02b      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	4a2d      	ldr	r2, [pc, #180]	@ (8007a54 <LSM6DSV16X_GYRO_GetOutputDataRate+0x260>)
 800799e:	601a      	str	r2, [r3, #0]
      break;
 80079a0:	e027      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	4a2c      	ldr	r2, [pc, #176]	@ (8007a58 <LSM6DSV16X_GYRO_GetOutputDataRate+0x264>)
 80079a6:	601a      	str	r2, [r3, #0]
      break;
 80079a8:	e023      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	4a2b      	ldr	r2, [pc, #172]	@ (8007a5c <LSM6DSV16X_GYRO_GetOutputDataRate+0x268>)
 80079ae:	601a      	str	r2, [r3, #0]
      break;
 80079b0:	e01f      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	4a2a      	ldr	r2, [pc, #168]	@ (8007a60 <LSM6DSV16X_GYRO_GetOutputDataRate+0x26c>)
 80079b6:	601a      	str	r2, [r3, #0]
      break;
 80079b8:	e01b      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	4a29      	ldr	r2, [pc, #164]	@ (8007a64 <LSM6DSV16X_GYRO_GetOutputDataRate+0x270>)
 80079be:	601a      	str	r2, [r3, #0]
      break;
 80079c0:	e017      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	4a28      	ldr	r2, [pc, #160]	@ (8007a68 <LSM6DSV16X_GYRO_GetOutputDataRate+0x274>)
 80079c6:	601a      	str	r2, [r3, #0]
      break;
 80079c8:	e013      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	4a27      	ldr	r2, [pc, #156]	@ (8007a6c <LSM6DSV16X_GYRO_GetOutputDataRate+0x278>)
 80079ce:	601a      	str	r2, [r3, #0]
      break;
 80079d0:	e00f      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	4a26      	ldr	r2, [pc, #152]	@ (8007a70 <LSM6DSV16X_GYRO_GetOutputDataRate+0x27c>)
 80079d6:	601a      	str	r2, [r3, #0]
      break;
 80079d8:	e00b      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	4a25      	ldr	r2, [pc, #148]	@ (8007a74 <LSM6DSV16X_GYRO_GetOutputDataRate+0x280>)
 80079de:	601a      	str	r2, [r3, #0]
      break;
 80079e0:	e007      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	4a24      	ldr	r2, [pc, #144]	@ (8007a78 <LSM6DSV16X_GYRO_GetOutputDataRate+0x284>)
 80079e6:	601a      	str	r2, [r3, #0]
      break;
 80079e8:	e003      	b.n	80079f2 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 80079ea:	f04f 33ff 	mov.w	r3, #4294967295
 80079ee:	60fb      	str	r3, [r7, #12]
      break;
 80079f0:	bf00      	nop
  }

  return ret;
 80079f2:	68fb      	ldr	r3, [r7, #12]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	3ff00000 	.word	0x3ff00000
 8007a00:	40f00000 	.word	0x40f00000
 8007a04:	41480000 	.word	0x41480000
 8007a08:	41700000 	.word	0x41700000
 8007a0c:	417a0000 	.word	0x417a0000
 8007a10:	41c80000 	.word	0x41c80000
 8007a14:	41f00000 	.word	0x41f00000
 8007a18:	41fa0000 	.word	0x41fa0000
 8007a1c:	42480000 	.word	0x42480000
 8007a20:	42700000 	.word	0x42700000
 8007a24:	427a0000 	.word	0x427a0000
 8007a28:	42c80000 	.word	0x42c80000
 8007a2c:	42f00000 	.word	0x42f00000
 8007a30:	42fa0000 	.word	0x42fa0000
 8007a34:	43480000 	.word	0x43480000
 8007a38:	43700000 	.word	0x43700000
 8007a3c:	437a0000 	.word	0x437a0000
 8007a40:	43c80000 	.word	0x43c80000
 8007a44:	43f00000 	.word	0x43f00000
 8007a48:	43fa0000 	.word	0x43fa0000
 8007a4c:	44480000 	.word	0x44480000
 8007a50:	44700000 	.word	0x44700000
 8007a54:	447a0000 	.word	0x447a0000
 8007a58:	44c80000 	.word	0x44c80000
 8007a5c:	44f00000 	.word	0x44f00000
 8007a60:	44fa0000 	.word	0x44fa0000
 8007a64:	45480000 	.word	0x45480000
 8007a68:	45700000 	.word	0x45700000
 8007a6c:	457a0000 	.word	0x457a0000
 8007a70:	45c80000 	.word	0x45c80000
 8007a74:	45f00000 	.word	0x45f00000
 8007a78:	45fa0000 	.word	0x45fa0000

08007a7c <LSM6DSV16X_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->gyro_is_enabled == 1U)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d106      	bne.n	8007aa0 <LSM6DSV16X_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8007a92:	ed97 0a00 	vldr	s0, [r7]
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fa94 	bl	8007fc4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	e005      	b.n	8007aac <LSM6DSV16X_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8007aa0:	ed97 0a00 	vldr	s0, [r7]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fb23 	bl	80080f0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>
 8007aaa:	4603      	mov	r3, r0
  }
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <LSM6DSV16X_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t  *FullScale)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3320      	adds	r3, #32
 8007ac6:	f107 020b 	add.w	r2, r7, #11
 8007aca:	4611      	mov	r1, r2
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 ff85 	bl	80089dc <lsm6dsv16x_gy_full_scale_get>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <LSM6DSV16X_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8007ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8007adc:	e041      	b.n	8007b62 <LSM6DSV16X_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 8007ade:	7afb      	ldrb	r3, [r7, #11]
 8007ae0:	2b0c      	cmp	r3, #12
 8007ae2:	d839      	bhi.n	8007b58 <LSM6DSV16X_GYRO_GetFullScale+0xa4>
 8007ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8007aec <LSM6DSV16X_GYRO_GetFullScale+0x38>)
 8007ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aea:	bf00      	nop
 8007aec:	08007b21 	.word	0x08007b21
 8007af0:	08007b29 	.word	0x08007b29
 8007af4:	08007b31 	.word	0x08007b31
 8007af8:	08007b3b 	.word	0x08007b3b
 8007afc:	08007b45 	.word	0x08007b45
 8007b00:	08007b59 	.word	0x08007b59
 8007b04:	08007b59 	.word	0x08007b59
 8007b08:	08007b59 	.word	0x08007b59
 8007b0c:	08007b59 	.word	0x08007b59
 8007b10:	08007b59 	.word	0x08007b59
 8007b14:	08007b59 	.word	0x08007b59
 8007b18:	08007b59 	.word	0x08007b59
 8007b1c:	08007b4f 	.word	0x08007b4f
  {
    case LSM6DSV16X_125dps:
      *FullScale =  125;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	227d      	movs	r2, #125	@ 0x7d
 8007b24:	601a      	str	r2, [r3, #0]
      break;
 8007b26:	e01b      	b.n	8007b60 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_250dps:
      *FullScale =  250;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	22fa      	movs	r2, #250	@ 0xfa
 8007b2c:	601a      	str	r2, [r3, #0]
      break;
 8007b2e:	e017      	b.n	8007b60 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_500dps:
      *FullScale =  500;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8007b36:	601a      	str	r2, [r3, #0]
      break;
 8007b38:	e012      	b.n	8007b60 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_1000dps:
      *FullScale = 1000;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007b40:	601a      	str	r2, [r3, #0]
      break;
 8007b42:	e00d      	b.n	8007b60 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_2000dps:
      *FullScale = 2000;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8007b4a:	601a      	str	r2, [r3, #0]
      break;
 8007b4c:	e008      	b.n	8007b60 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_4000dps:
      *FullScale = 4000;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8007b54:	601a      	str	r2, [r3, #0]
      break;
 8007b56:	e003      	b.n	8007b60 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    default:
      ret = LSM6DSV16X_ERROR;
 8007b58:	f04f 33ff 	mov.w	r3, #4294967295
 8007b5c:	60fb      	str	r3, [r7, #12]
      break;
 8007b5e:	bf00      	nop
  }

  return ret;
 8007b60:	68fb      	ldr	r3, [r7, #12]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop

08007b6c <LSM6DSV16X_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
           : (FullScale <= 250)  ? LSM6DSV16X_250dps
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	2b7d      	cmp	r3, #125	@ 0x7d
 8007b7a:	dd18      	ble.n	8007bae <LSM6DSV16X_GYRO_SetFullScale+0x42>
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	2bfa      	cmp	r3, #250	@ 0xfa
 8007b80:	dd13      	ble.n	8007baa <LSM6DSV16X_GYRO_SetFullScale+0x3e>
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007b88:	dd0d      	ble.n	8007ba6 <LSM6DSV16X_GYRO_SetFullScale+0x3a>
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b90:	dd07      	ble.n	8007ba2 <LSM6DSV16X_GYRO_SetFullScale+0x36>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8007b98:	dc01      	bgt.n	8007b9e <LSM6DSV16X_GYRO_SetFullScale+0x32>
 8007b9a:	2304      	movs	r3, #4
 8007b9c:	e008      	b.n	8007bb0 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8007b9e:	230c      	movs	r3, #12
 8007ba0:	e006      	b.n	8007bb0 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e004      	b.n	8007bb0 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	e002      	b.n	8007bb0 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8007baa:	2301      	movs	r3, #1
 8007bac:	e000      	b.n	8007bb0 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8007bae:	2300      	movs	r3, #0
  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
 8007bb0:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSV16X_500dps
           : (FullScale <= 1000) ? LSM6DSV16X_1000dps
           : (FullScale <= 2000) ? LSM6DSV16X_2000dps
           :                       LSM6DSV16X_4000dps;

  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	3320      	adds	r3, #32
 8007bb6:	7bfa      	ldrb	r2, [r7, #15]
 8007bb8:	4611      	mov	r1, r2
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 fee8 	bl	8008990 <lsm6dsv16x_gy_full_scale_set>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d002      	beq.n	8007bcc <LSM6DSV16X_GYRO_SetFullScale+0x60>
  {
    return LSM6DSV16X_ERROR;
 8007bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bca:	e000      	b.n	8007bce <LSM6DSV16X_GYRO_SetFullScale+0x62>
  }

  return LSM6DSV16X_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <LSM6DSV16X_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3320      	adds	r3, #32
 8007be4:	f107 0208 	add.w	r2, r7, #8
 8007be8:	4611      	mov	r1, r2
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 ffb2 	bl	8008b54 <lsm6dsv16x_angular_rate_raw_get>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d002      	beq.n	8007bfc <LSM6DSV16X_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 8007bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bfa:	e00c      	b.n	8007c16 <LSM6DSV16X_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 8007bfc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8007c04:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8007c0c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <LSM6DSV16X_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *AngularRate)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b086      	sub	sp, #24
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8007c28:	f04f 0300 	mov.w	r3, #0
 8007c2c:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	3320      	adds	r3, #32
 8007c32:	f107 0210 	add.w	r2, r7, #16
 8007c36:	4611      	mov	r1, r2
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 ff8b 	bl	8008b54 <lsm6dsv16x_angular_rate_raw_get>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <LSM6DSV16X_GYRO_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8007c44:	f04f 33ff 	mov.w	r3, #4294967295
 8007c48:	e03c      	b.n	8007cc4 <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8007c4a:	f107 030c 	add.w	r3, r7, #12
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7ff fd6b 	bl	800772c <LSM6DSV16X_GYRO_GetSensitivity>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <LSM6DSV16X_GYRO_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 8007c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c60:	e030      	b.n	8007cc4 <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Calculate the data */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8007c62:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007c66:	ee07 3a90 	vmov	s15, r3
 8007c6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c7a:	ee17 2a90 	vmov	r2, s15
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8007c82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c9a:	ee17 2a90 	vmov	r2, s15
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8007ca2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007ca6:	ee07 3a90 	vmov	s15, r3
 8007caa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007cae:	edd7 7a03 	vldr	s15, [r7, #12]
 8007cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cba:	ee17 2a90 	vmov	r2, s15
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3718      	adds	r7, #24
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <LSM6DSV16X_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Write_Reg(LSM6DSV16X_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
 8007cd8:	4613      	mov	r3, r2
 8007cda:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsv16x_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSV16X_OK)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f103 0020 	add.w	r0, r3, #32
 8007ce2:	1cba      	adds	r2, r7, #2
 8007ce4:	78f9      	ldrb	r1, [r7, #3]
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	f000 fae4 	bl	80082b4 <lsm6dsv16x_write_reg>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d002      	beq.n	8007cf8 <LSM6DSV16X_Write_Reg+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8007cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf6:	e000      	b.n	8007cfa <LSM6DSV16X_Write_Reg+0x2e>
  }

  return LSM6DSV16X_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <LSM6DSV16X_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSV16X_MAIN_MEM_BANK, 1 - LSM6DSV16X_EMBED_FUNC_MEM_BANK, 2 - LSM6DSV16X_SENSOR_HUB_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Set_Mem_Bank(LSM6DSV16X_Object_t *pObj, uint8_t Val)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSV16X_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_mem_bank_t reg;

  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
        : (Val == 2U) ? LSM6DSV16X_SENSOR_HUB_MEM_BANK
 8007d12:	78fb      	ldrb	r3, [r7, #3]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d006      	beq.n	8007d26 <LSM6DSV16X_Set_Mem_Bank+0x24>
 8007d18:	78fb      	ldrb	r3, [r7, #3]
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d101      	bne.n	8007d22 <LSM6DSV16X_Set_Mem_Bank+0x20>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e002      	b.n	8007d28 <LSM6DSV16X_Set_Mem_Bank+0x26>
 8007d22:	2300      	movs	r3, #0
 8007d24:	e000      	b.n	8007d28 <LSM6DSV16X_Set_Mem_Bank+0x26>
 8007d26:	2301      	movs	r3, #1
  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
 8007d28:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSV16X_MAIN_MEM_BANK;

  if (lsm6dsv16x_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSV16X_OK)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	3320      	adds	r3, #32
 8007d2e:	7afa      	ldrb	r2, [r7, #11]
 8007d30:	4611      	mov	r1, r2
 8007d32:	4618      	mov	r0, r3
 8007d34:	f000 fadc 	bl	80082f0 <lsm6dsv16x_mem_bank_set>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <LSM6DSV16X_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSV16X_ERROR;
 8007d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d42:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007d44:	68fb      	ldr	r3, [r7, #12]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
	...

08007d50 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
            : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8007d5c:	edd7 7a00 	vldr	s15, [r7]
 8007d60:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8007d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d6c:	d801      	bhi.n	8007d72 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x22>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e06e      	b.n	8007e50 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007d72:	edd7 7a00 	vldr	s15, [r7]
 8007d76:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8007d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d82:	d801      	bhi.n	8007d88 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x38>
 8007d84:	2302      	movs	r3, #2
 8007d86:	e063      	b.n	8007e50 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007d88:	edd7 7a00 	vldr	s15, [r7]
 8007d8c:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8007d90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d98:	d801      	bhi.n	8007d9e <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e058      	b.n	8007e50 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007d9e:	edd7 7a00 	vldr	s15, [r7]
 8007da2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8007da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dae:	d801      	bhi.n	8007db4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x64>
 8007db0:	2304      	movs	r3, #4
 8007db2:	e04d      	b.n	8007e50 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007db4:	edd7 7a00 	vldr	s15, [r7]
 8007db8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8007e78 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x128>
 8007dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc4:	d801      	bhi.n	8007dca <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8007dc6:	2305      	movs	r3, #5
 8007dc8:	e042      	b.n	8007e50 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007dca:	edd7 7a00 	vldr	s15, [r7]
 8007dce:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8007e7c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8007dd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dda:	d801      	bhi.n	8007de0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x90>
 8007ddc:	2306      	movs	r3, #6
 8007dde:	e037      	b.n	8007e50 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007de0:	edd7 7a00 	vldr	s15, [r7]
 8007de4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007e80 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x130>
 8007de8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007df0:	d801      	bhi.n	8007df6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8007df2:	2307      	movs	r3, #7
 8007df4:	e02c      	b.n	8007e50 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007df6:	edd7 7a00 	vldr	s15, [r7]
 8007dfa:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007e84 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x134>
 8007dfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e06:	d801      	bhi.n	8007e0c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8007e08:	2308      	movs	r3, #8
 8007e0a:	e021      	b.n	8007e50 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007e0c:	edd7 7a00 	vldr	s15, [r7]
 8007e10:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8007e88 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x138>
 8007e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e1c:	d801      	bhi.n	8007e22 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8007e1e:	2309      	movs	r3, #9
 8007e20:	e016      	b.n	8007e50 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007e22:	edd7 7a00 	vldr	s15, [r7]
 8007e26:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007e8c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8007e2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e32:	d801      	bhi.n	8007e38 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8007e34:	230a      	movs	r3, #10
 8007e36:	e00b      	b.n	8007e50 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007e38:	edd7 7a00 	vldr	s15, [r7]
 8007e3c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007e90 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x140>
 8007e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e48:	d801      	bhi.n	8007e4e <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xfe>
 8007e4a:	230b      	movs	r3, #11
 8007e4c:	e000      	b.n	8007e50 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8007e4e:	230c      	movs	r3, #12
  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8007e50:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	3320      	adds	r3, #32
 8007e56:	7bfa      	ldrb	r2, [r7, #15]
 8007e58:	4611      	mov	r1, r2
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 fa8a 	bl	8008374 <lsm6dsv16x_xl_data_rate_set>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d002      	beq.n	8007e6c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11c>
  {
    return LSM6DSV16X_ERROR;
 8007e66:	f04f 33ff 	mov.w	r3, #4294967295
 8007e6a:	e000      	b.n	8007e6e <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11e>
  }

  return LSM6DSV16X_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	42700000 	.word	0x42700000
 8007e7c:	42f00000 	.word	0x42f00000
 8007e80:	43700000 	.word	0x43700000
 8007e84:	43f00000 	.word	0x43f00000
 8007e88:	44700000 	.word	0x44700000
 8007e8c:	44f00000 	.word	0x44f00000
 8007e90:	45700000 	.word	0x45700000

08007e94 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
                  : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8007ea0:	edd7 7a00 	vldr	s15, [r7]
 8007ea4:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8007ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eb0:	d801      	bhi.n	8007eb6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x22>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e06e      	b.n	8007f94 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007eb6:	edd7 7a00 	vldr	s15, [r7]
 8007eba:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8007ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ec6:	d801      	bhi.n	8007ecc <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x38>
 8007ec8:	2302      	movs	r3, #2
 8007eca:	e063      	b.n	8007f94 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007ecc:	edd7 7a00 	vldr	s15, [r7]
 8007ed0:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8007ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007edc:	d801      	bhi.n	8007ee2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e058      	b.n	8007f94 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007ee2:	edd7 7a00 	vldr	s15, [r7]
 8007ee6:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8007eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ef2:	d801      	bhi.n	8007ef8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x64>
 8007ef4:	2304      	movs	r3, #4
 8007ef6:	e04d      	b.n	8007f94 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007ef8:	edd7 7a00 	vldr	s15, [r7]
 8007efc:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8007fa8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x114>
 8007f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f08:	d801      	bhi.n	8007f0e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8007f0a:	2305      	movs	r3, #5
 8007f0c:	e042      	b.n	8007f94 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007f0e:	edd7 7a00 	vldr	s15, [r7]
 8007f12:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007fac <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x118>
 8007f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f1e:	d801      	bhi.n	8007f24 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x90>
 8007f20:	2306      	movs	r3, #6
 8007f22:	e037      	b.n	8007f94 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007f24:	edd7 7a00 	vldr	s15, [r7]
 8007f28:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8007fb0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8007f2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f34:	d801      	bhi.n	8007f3a <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8007f36:	2307      	movs	r3, #7
 8007f38:	e02c      	b.n	8007f94 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007f3a:	edd7 7a00 	vldr	s15, [r7]
 8007f3e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8007fb4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x120>
 8007f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f4a:	d801      	bhi.n	8007f50 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8007f4c:	2308      	movs	r3, #8
 8007f4e:	e021      	b.n	8007f94 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007f50:	edd7 7a00 	vldr	s15, [r7]
 8007f54:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8007fb8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x124>
 8007f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f60:	d801      	bhi.n	8007f66 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8007f62:	2309      	movs	r3, #9
 8007f64:	e016      	b.n	8007f94 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007f66:	edd7 7a00 	vldr	s15, [r7]
 8007f6a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007fbc <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x128>
 8007f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f76:	d801      	bhi.n	8007f7c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8007f78:	230a      	movs	r3, #10
 8007f7a:	e00b      	b.n	8007f94 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007f7c:	edd7 7a00 	vldr	s15, [r7]
 8007f80:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007fc0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x12c>
 8007f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f8c:	d801      	bhi.n	8007f92 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xfe>
 8007f8e:	230b      	movs	r3, #11
 8007f90:	e000      	b.n	8007f94 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007f92:	230c      	movs	r3, #12
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                  : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                  : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                  :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	42700000 	.word	0x42700000
 8007fac:	42f00000 	.word	0x42f00000
 8007fb0:	43700000 	.word	0x43700000
 8007fb4:	43f00000 	.word	0x43f00000
 8007fb8:	44700000 	.word	0x44700000
 8007fbc:	44f00000 	.word	0x44f00000
 8007fc0:	45700000 	.word	0x45700000

08007fc4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
            : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 8007fd0:	edd7 7a00 	vldr	s15, [r7]
 8007fd4:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8007fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe0:	d801      	bhi.n	8007fe6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	e063      	b.n	80080ae <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8007fe6:	edd7 7a00 	vldr	s15, [r7]
 8007fea:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8007fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ff6:	d801      	bhi.n	8007ffc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e058      	b.n	80080ae <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8007ffc:	edd7 7a00 	vldr	s15, [r7]
 8008000:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800800c:	d801      	bhi.n	8008012 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800800e:	2304      	movs	r3, #4
 8008010:	e04d      	b.n	80080ae <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008012:	edd7 7a00 	vldr	s15, [r7]
 8008016:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80080d4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800801a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800801e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008022:	d801      	bhi.n	8008028 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8008024:	2305      	movs	r3, #5
 8008026:	e042      	b.n	80080ae <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008028:	edd7 7a00 	vldr	s15, [r7]
 800802c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80080d8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8008030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008038:	d801      	bhi.n	800803e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800803a:	2306      	movs	r3, #6
 800803c:	e037      	b.n	80080ae <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800803e:	edd7 7a00 	vldr	s15, [r7]
 8008042:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80080dc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x118>
 8008046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800804a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800804e:	d801      	bhi.n	8008054 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8008050:	2307      	movs	r3, #7
 8008052:	e02c      	b.n	80080ae <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008054:	edd7 7a00 	vldr	s15, [r7]
 8008058:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80080e0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x11c>
 800805c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008064:	d801      	bhi.n	800806a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8008066:	2308      	movs	r3, #8
 8008068:	e021      	b.n	80080ae <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800806a:	edd7 7a00 	vldr	s15, [r7]
 800806e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80080e4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x120>
 8008072:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800807a:	d801      	bhi.n	8008080 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 800807c:	2309      	movs	r3, #9
 800807e:	e016      	b.n	80080ae <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008080:	edd7 7a00 	vldr	s15, [r7]
 8008084:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80080e8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x124>
 8008088:	eef4 7ac7 	vcmpe.f32	s15, s14
 800808c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008090:	d801      	bhi.n	8008096 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8008092:	230a      	movs	r3, #10
 8008094:	e00b      	b.n	80080ae <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8008096:	edd7 7a00 	vldr	s15, [r7]
 800809a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80080ec <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x128>
 800809e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a6:	d801      	bhi.n	80080ac <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xe8>
 80080a8:	230b      	movs	r3, #11
 80080aa:	e000      	b.n	80080ae <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80080ac:	230c      	movs	r3, #12
  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 80080ae:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3320      	adds	r3, #32
 80080b4:	7bfa      	ldrb	r2, [r7, #15]
 80080b6:	4611      	mov	r1, r2
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 fabd 	bl	8008638 <lsm6dsv16x_gy_data_rate_set>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d002      	beq.n	80080ca <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSV16X_ERROR;
 80080c4:	f04f 33ff 	mov.w	r3, #4294967295
 80080c8:	e000      	b.n	80080cc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSV16X_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	42700000 	.word	0x42700000
 80080d8:	42f00000 	.word	0x42f00000
 80080dc:	43700000 	.word	0x43700000
 80080e0:	43f00000 	.word	0x43f00000
 80080e4:	44700000 	.word	0x44700000
 80080e8:	44f00000 	.word	0x44f00000
 80080ec:	45700000 	.word	0x45700000

080080f0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
                   : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 80080fc:	edd7 7a00 	vldr	s15, [r7]
 8008100:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8008104:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800810c:	d801      	bhi.n	8008112 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800810e:	2302      	movs	r3, #2
 8008110:	e063      	b.n	80081da <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8008112:	edd7 7a00 	vldr	s15, [r7]
 8008116:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800811a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800811e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008122:	d801      	bhi.n	8008128 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8008124:	2303      	movs	r3, #3
 8008126:	e058      	b.n	80081da <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8008128:	edd7 7a00 	vldr	s15, [r7]
 800812c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008138:	d801      	bhi.n	800813e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800813a:	2304      	movs	r3, #4
 800813c:	e04d      	b.n	80081da <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800813e:	edd7 7a00 	vldr	s15, [r7]
 8008142:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80081f0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8008146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800814a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800814e:	d801      	bhi.n	8008154 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8008150:	2305      	movs	r3, #5
 8008152:	e042      	b.n	80081da <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8008154:	edd7 7a00 	vldr	s15, [r7]
 8008158:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80081f4 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x104>
 800815c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008164:	d801      	bhi.n	800816a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8008166:	2306      	movs	r3, #6
 8008168:	e037      	b.n	80081da <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800816a:	edd7 7a00 	vldr	s15, [r7]
 800816e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80081f8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x108>
 8008172:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800817a:	d801      	bhi.n	8008180 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x90>
 800817c:	2307      	movs	r3, #7
 800817e:	e02c      	b.n	80081da <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8008180:	edd7 7a00 	vldr	s15, [r7]
 8008184:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80081fc <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x10c>
 8008188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800818c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008190:	d801      	bhi.n	8008196 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8008192:	2308      	movs	r3, #8
 8008194:	e021      	b.n	80081da <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8008196:	edd7 7a00 	vldr	s15, [r7]
 800819a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008200 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x110>
 800819e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081a6:	d801      	bhi.n	80081ac <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80081a8:	2309      	movs	r3, #9
 80081aa:	e016      	b.n	80081da <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80081ac:	edd7 7a00 	vldr	s15, [r7]
 80081b0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008204 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x114>
 80081b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081bc:	d801      	bhi.n	80081c2 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80081be:	230a      	movs	r3, #10
 80081c0:	e00b      	b.n	80081da <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80081c2:	edd7 7a00 	vldr	s15, [r7]
 80081c6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8008208 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x118>
 80081ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081d2:	d801      	bhi.n	80081d8 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80081d4:	230b      	movs	r3, #11
 80081d6:	e000      	b.n	80081da <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80081d8:	230c      	movs	r3, #12
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                   : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                   : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                   :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	42700000 	.word	0x42700000
 80081f4:	42f00000 	.word	0x42f00000
 80081f8:	43700000 	.word	0x43700000
 80081fc:	43f00000 	.word	0x43f00000
 8008200:	44700000 	.word	0x44700000
 8008204:	44f00000 	.word	0x44f00000
 8008208:	45700000 	.word	0x45700000

0800820c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800820c:	b590      	push	{r4, r7, lr}
 800820e:	b087      	sub	sp, #28
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	607a      	str	r2, [r7, #4]
 8008216:	461a      	mov	r2, r3
 8008218:	460b      	mov	r3, r1
 800821a:	72fb      	strb	r3, [r7, #11]
 800821c:	4613      	mov	r3, r2
 800821e:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	695c      	ldr	r4, [r3, #20]
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	7b1b      	ldrb	r3, [r3, #12]
 800822c:	4618      	mov	r0, r3
 800822e:	7afb      	ldrb	r3, [r7, #11]
 8008230:	b299      	uxth	r1, r3
 8008232:	893b      	ldrh	r3, [r7, #8]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	47a0      	blx	r4
 8008238:	4603      	mov	r3, r0
}
 800823a:	4618      	mov	r0, r3
 800823c:	371c      	adds	r7, #28
 800823e:	46bd      	mov	sp, r7
 8008240:	bd90      	pop	{r4, r7, pc}

08008242 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008242:	b590      	push	{r4, r7, lr}
 8008244:	b087      	sub	sp, #28
 8008246:	af00      	add	r7, sp, #0
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	607a      	str	r2, [r7, #4]
 800824c:	461a      	mov	r2, r3
 800824e:	460b      	mov	r3, r1
 8008250:	72fb      	strb	r3, [r7, #11]
 8008252:	4613      	mov	r3, r2
 8008254:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	691c      	ldr	r4, [r3, #16]
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	7b1b      	ldrb	r3, [r3, #12]
 8008262:	4618      	mov	r0, r3
 8008264:	7afb      	ldrb	r3, [r7, #11]
 8008266:	b299      	uxth	r1, r3
 8008268:	893b      	ldrh	r3, [r7, #8]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	47a0      	blx	r4
 800826e:	4603      	mov	r3, r0
}
 8008270:	4618      	mov	r0, r3
 8008272:	371c      	adds	r7, #28
 8008274:	46bd      	mov	sp, r7
 8008276:	bd90      	pop	{r4, r7, pc}

08008278 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8008278:	b590      	push	{r4, r7, lr}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	607a      	str	r2, [r7, #4]
 8008282:	461a      	mov	r2, r3
 8008284:	460b      	mov	r3, r1
 8008286:	72fb      	strb	r3, [r7, #11]
 8008288:	4613      	mov	r3, r2
 800828a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d102      	bne.n	8008298 <lsm6dsv16x_read_reg+0x20>
  {
    return -1;
 8008292:	f04f 33ff 	mov.w	r3, #4294967295
 8008296:	e009      	b.n	80082ac <lsm6dsv16x_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	685c      	ldr	r4, [r3, #4]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	68d8      	ldr	r0, [r3, #12]
 80082a0:	893b      	ldrh	r3, [r7, #8]
 80082a2:	7af9      	ldrb	r1, [r7, #11]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	47a0      	blx	r4
 80082a8:	6178      	str	r0, [r7, #20]

  return ret;
 80082aa:	697b      	ldr	r3, [r7, #20]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd90      	pop	{r4, r7, pc}

080082b4 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80082b4:	b590      	push	{r4, r7, lr}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	607a      	str	r2, [r7, #4]
 80082be:	461a      	mov	r2, r3
 80082c0:	460b      	mov	r3, r1
 80082c2:	72fb      	strb	r3, [r7, #11]
 80082c4:	4613      	mov	r3, r2
 80082c6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d102      	bne.n	80082d4 <lsm6dsv16x_write_reg+0x20>
  {
    return -1;
 80082ce:	f04f 33ff 	mov.w	r3, #4294967295
 80082d2:	e009      	b.n	80082e8 <lsm6dsv16x_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681c      	ldr	r4, [r3, #0]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	68d8      	ldr	r0, [r3, #12]
 80082dc:	893b      	ldrh	r3, [r7, #8]
 80082de:	7af9      	ldrb	r1, [r7, #11]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	47a0      	blx	r4
 80082e4:	6178      	str	r0, [r7, #20]

  return ret;
 80082e6:	697b      	ldr	r3, [r7, #20]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	371c      	adds	r7, #28
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd90      	pop	{r4, r7, pc}

080082f0 <lsm6dsv16x_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dsv16x_mem_bank_t val)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	460b      	mov	r3, r1
 80082fa:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80082fc:	f107 0208 	add.w	r2, r7, #8
 8008300:	2301      	movs	r3, #1
 8008302:	2101      	movs	r1, #1
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f7ff ffb7 	bl	8008278 <lsm6dsv16x_read_reg>
 800830a:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <lsm6dsv16x_mem_bank_set+0x26>
  {
    return ret;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	e019      	b.n	800834a <lsm6dsv16x_mem_bank_set+0x5a>
  }

  func_cfg_access.shub_reg_access = ((uint8_t)val & 0x02U) >> 1;
 8008316:	78fb      	ldrb	r3, [r7, #3]
 8008318:	085b      	lsrs	r3, r3, #1
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	b2da      	uxtb	r2, r3
 8008320:	7a3b      	ldrb	r3, [r7, #8]
 8008322:	f362 1386 	bfi	r3, r2, #6, #1
 8008326:	723b      	strb	r3, [r7, #8]
  func_cfg_access.emb_func_reg_access = (uint8_t)val & 0x01U;
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	b2da      	uxtb	r2, r3
 8008330:	7a3b      	ldrb	r3, [r7, #8]
 8008332:	f362 13c7 	bfi	r3, r2, #7, #1
 8008336:	723b      	strb	r3, [r7, #8]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8008338:	f107 0208 	add.w	r2, r7, #8
 800833c:	2301      	movs	r3, #1
 800833e:	2101      	movs	r1, #1
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7ff ffb7 	bl	80082b4 <lsm6dsv16x_write_reg>
 8008346:	60f8      	str	r0, [r7, #12]

  return ret;
 8008348:	68fb      	ldr	r3, [r7, #12]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}

08008352 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b084      	sub	sp, #16
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 800835c:	2301      	movs	r3, #1
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	210f      	movs	r1, #15
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f7ff ff88 	bl	8008278 <lsm6dsv16x_read_reg>
 8008368:	60f8      	str	r0, [r7, #12]

  return ret;
 800836a:	68fb      	ldr	r3, [r7, #12]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8008380:	f107 0210 	add.w	r2, r7, #16
 8008384:	2301      	movs	r3, #1
 8008386:	2110      	movs	r1, #16
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7ff ff75 	bl	8008278 <lsm6dsv16x_read_reg>
 800838e:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <lsm6dsv16x_xl_data_rate_set+0x26>
  {
    return ret;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	e039      	b.n	800840e <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	f003 030f 	and.w	r3, r3, #15
 80083a0:	b2da      	uxtb	r2, r3
 80083a2:	7c3b      	ldrb	r3, [r7, #16]
 80083a4:	f362 0303 	bfi	r3, r2, #0, #4
 80083a8:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80083aa:	f107 0210 	add.w	r2, r7, #16
 80083ae:	2301      	movs	r3, #1
 80083b0:	2110      	movs	r1, #16
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7ff ff7e 	bl	80082b4 <lsm6dsv16x_write_reg>
 80083b8:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <lsm6dsv16x_xl_data_rate_set+0x50>
  {
    return ret;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	e024      	b.n	800840e <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 80083c4:	78fb      	ldrb	r3, [r7, #3]
 80083c6:	091b      	lsrs	r3, r3, #4
 80083c8:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 80083ca:	7cfb      	ldrb	r3, [r7, #19]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d01d      	beq.n	800840c <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80083d0:	f107 020c 	add.w	r2, r7, #12
 80083d4:	2301      	movs	r3, #1
 80083d6:	2162      	movs	r1, #98	@ 0x62
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f7ff ff4d 	bl	8008278 <lsm6dsv16x_read_reg>
 80083de:	4602      	mov	r2, r0
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	4413      	add	r3, r2
 80083e4:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 80083e6:	7cfb      	ldrb	r3, [r7, #19]
 80083e8:	f003 0303 	and.w	r3, r3, #3
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	7b3b      	ldrb	r3, [r7, #12]
 80083f0:	f362 0301 	bfi	r3, r2, #0, #2
 80083f4:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80083f6:	f107 020c 	add.w	r2, r7, #12
 80083fa:	2301      	movs	r3, #1
 80083fc:	2162      	movs	r1, #98	@ 0x62
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7ff ff58 	bl	80082b4 <lsm6dsv16x_write_reg>
 8008404:	4602      	mov	r2, r0
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	4413      	add	r3, r2
 800840a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800840c:	697b      	ldr	r3, [r7, #20]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3718      	adds	r7, #24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
	...

08008418 <lsm6dsv16x_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8008422:	f107 0210 	add.w	r2, r7, #16
 8008426:	2301      	movs	r3, #1
 8008428:	2110      	movs	r1, #16
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7ff ff24 	bl	8008278 <lsm6dsv16x_read_reg>
 8008430:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8008432:	f107 020c 	add.w	r2, r7, #12
 8008436:	2301      	movs	r3, #1
 8008438:	2162      	movs	r1, #98	@ 0x62
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7ff ff1c 	bl	8008278 <lsm6dsv16x_read_reg>
 8008440:	4602      	mov	r2, r0
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	4413      	add	r3, r2
 8008446:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <lsm6dsv16x_xl_data_rate_get+0x3a>
  {
    return ret;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	e0ed      	b.n	800862e <lsm6dsv16x_xl_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 8008452:	7b3b      	ldrb	r3, [r7, #12]
 8008454:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008458:	b2db      	uxtb	r3, r3
 800845a:	74fb      	strb	r3, [r7, #19]

  switch (ctrl1.odr_xl)
 800845c:	7c3b      	ldrb	r3, [r7, #16]
 800845e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b0c      	cmp	r3, #12
 8008466:	f200 80dd 	bhi.w	8008624 <lsm6dsv16x_xl_data_rate_get+0x20c>
 800846a:	a201      	add	r2, pc, #4	@ (adr r2, 8008470 <lsm6dsv16x_xl_data_rate_get+0x58>)
 800846c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008470:	080084a5 	.word	0x080084a5
 8008474:	080084ad 	.word	0x080084ad
 8008478:	080084b5 	.word	0x080084b5
 800847c:	080084bd 	.word	0x080084bd
 8008480:	080084e1 	.word	0x080084e1
 8008484:	08008505 	.word	0x08008505
 8008488:	08008529 	.word	0x08008529
 800848c:	0800854d 	.word	0x0800854d
 8008490:	08008571 	.word	0x08008571
 8008494:	08008595 	.word	0x08008595
 8008498:	080085b9 	.word	0x080085b9
 800849c:	080085dd 	.word	0x080085dd
 80084a0:	08008601 	.word	0x08008601
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	2200      	movs	r2, #0
 80084a8:	701a      	strb	r2, [r3, #0]
      break;
 80084aa:	e0bf      	b.n	800862c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	2201      	movs	r2, #1
 80084b0:	701a      	strb	r2, [r3, #0]
      break;
 80084b2:	e0bb      	b.n	800862c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	2202      	movs	r2, #2
 80084b8:	701a      	strb	r2, [r3, #0]
      break;
 80084ba:	e0b7      	b.n	800862c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 80084bc:	7cfb      	ldrb	r3, [r7, #19]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d005      	beq.n	80084ce <lsm6dsv16x_xl_data_rate_get+0xb6>
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d007      	beq.n	80084d6 <lsm6dsv16x_xl_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2203      	movs	r2, #3
 80084ca:	701a      	strb	r2, [r3, #0]
          break;
 80084cc:	e007      	b.n	80084de <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2213      	movs	r2, #19
 80084d2:	701a      	strb	r2, [r3, #0]
          break;
 80084d4:	e003      	b.n	80084de <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2223      	movs	r2, #35	@ 0x23
 80084da:	701a      	strb	r2, [r3, #0]
          break;
 80084dc:	bf00      	nop
      }
      break;
 80084de:	e0a5      	b.n	800862c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 80084e0:	7cfb      	ldrb	r3, [r7, #19]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d005      	beq.n	80084f2 <lsm6dsv16x_xl_data_rate_get+0xda>
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d007      	beq.n	80084fa <lsm6dsv16x_xl_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2204      	movs	r2, #4
 80084ee:	701a      	strb	r2, [r3, #0]
          break;
 80084f0:	e007      	b.n	8008502 <lsm6dsv16x_xl_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	2214      	movs	r2, #20
 80084f6:	701a      	strb	r2, [r3, #0]
          break;
 80084f8:	e003      	b.n	8008502 <lsm6dsv16x_xl_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	2224      	movs	r2, #36	@ 0x24
 80084fe:	701a      	strb	r2, [r3, #0]
          break;
 8008500:	bf00      	nop
      }
      break;
 8008502:	e093      	b.n	800862c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 8008504:	7cfb      	ldrb	r3, [r7, #19]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d005      	beq.n	8008516 <lsm6dsv16x_xl_data_rate_get+0xfe>
 800850a:	2b02      	cmp	r3, #2
 800850c:	d007      	beq.n	800851e <lsm6dsv16x_xl_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	2205      	movs	r2, #5
 8008512:	701a      	strb	r2, [r3, #0]
          break;
 8008514:	e007      	b.n	8008526 <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2215      	movs	r2, #21
 800851a:	701a      	strb	r2, [r3, #0]
          break;
 800851c:	e003      	b.n	8008526 <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	2225      	movs	r2, #37	@ 0x25
 8008522:	701a      	strb	r2, [r3, #0]
          break;
 8008524:	bf00      	nop
      }
      break;
 8008526:	e081      	b.n	800862c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 8008528:	7cfb      	ldrb	r3, [r7, #19]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d005      	beq.n	800853a <lsm6dsv16x_xl_data_rate_get+0x122>
 800852e:	2b02      	cmp	r3, #2
 8008530:	d007      	beq.n	8008542 <lsm6dsv16x_xl_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	2206      	movs	r2, #6
 8008536:	701a      	strb	r2, [r3, #0]
          break;
 8008538:	e007      	b.n	800854a <lsm6dsv16x_xl_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	2216      	movs	r2, #22
 800853e:	701a      	strb	r2, [r3, #0]
          break;
 8008540:	e003      	b.n	800854a <lsm6dsv16x_xl_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2226      	movs	r2, #38	@ 0x26
 8008546:	701a      	strb	r2, [r3, #0]
          break;
 8008548:	bf00      	nop
      }
      break;
 800854a:	e06f      	b.n	800862c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 800854c:	7cfb      	ldrb	r3, [r7, #19]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d005      	beq.n	800855e <lsm6dsv16x_xl_data_rate_get+0x146>
 8008552:	2b02      	cmp	r3, #2
 8008554:	d007      	beq.n	8008566 <lsm6dsv16x_xl_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2207      	movs	r2, #7
 800855a:	701a      	strb	r2, [r3, #0]
          break;
 800855c:	e007      	b.n	800856e <lsm6dsv16x_xl_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2217      	movs	r2, #23
 8008562:	701a      	strb	r2, [r3, #0]
          break;
 8008564:	e003      	b.n	800856e <lsm6dsv16x_xl_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	2227      	movs	r2, #39	@ 0x27
 800856a:	701a      	strb	r2, [r3, #0]
          break;
 800856c:	bf00      	nop
      }
      break;
 800856e:	e05d      	b.n	800862c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 8008570:	7cfb      	ldrb	r3, [r7, #19]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d005      	beq.n	8008582 <lsm6dsv16x_xl_data_rate_get+0x16a>
 8008576:	2b02      	cmp	r3, #2
 8008578:	d007      	beq.n	800858a <lsm6dsv16x_xl_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2208      	movs	r2, #8
 800857e:	701a      	strb	r2, [r3, #0]
          break;
 8008580:	e007      	b.n	8008592 <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2218      	movs	r2, #24
 8008586:	701a      	strb	r2, [r3, #0]
          break;
 8008588:	e003      	b.n	8008592 <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2228      	movs	r2, #40	@ 0x28
 800858e:	701a      	strb	r2, [r3, #0]
          break;
 8008590:	bf00      	nop
      }
      break;
 8008592:	e04b      	b.n	800862c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 8008594:	7cfb      	ldrb	r3, [r7, #19]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d005      	beq.n	80085a6 <lsm6dsv16x_xl_data_rate_get+0x18e>
 800859a:	2b02      	cmp	r3, #2
 800859c:	d007      	beq.n	80085ae <lsm6dsv16x_xl_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	2209      	movs	r2, #9
 80085a2:	701a      	strb	r2, [r3, #0]
          break;
 80085a4:	e007      	b.n	80085b6 <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2219      	movs	r2, #25
 80085aa:	701a      	strb	r2, [r3, #0]
          break;
 80085ac:	e003      	b.n	80085b6 <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	2229      	movs	r2, #41	@ 0x29
 80085b2:	701a      	strb	r2, [r3, #0]
          break;
 80085b4:	bf00      	nop
      }
      break;
 80085b6:	e039      	b.n	800862c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 80085b8:	7cfb      	ldrb	r3, [r7, #19]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d005      	beq.n	80085ca <lsm6dsv16x_xl_data_rate_get+0x1b2>
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d007      	beq.n	80085d2 <lsm6dsv16x_xl_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	220a      	movs	r2, #10
 80085c6:	701a      	strb	r2, [r3, #0]
          break;
 80085c8:	e007      	b.n	80085da <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	221a      	movs	r2, #26
 80085ce:	701a      	strb	r2, [r3, #0]
          break;
 80085d0:	e003      	b.n	80085da <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	222a      	movs	r2, #42	@ 0x2a
 80085d6:	701a      	strb	r2, [r3, #0]
          break;
 80085d8:	bf00      	nop
      }
      break;
 80085da:	e027      	b.n	800862c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 80085dc:	7cfb      	ldrb	r3, [r7, #19]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d005      	beq.n	80085ee <lsm6dsv16x_xl_data_rate_get+0x1d6>
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d007      	beq.n	80085f6 <lsm6dsv16x_xl_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	220b      	movs	r2, #11
 80085ea:	701a      	strb	r2, [r3, #0]
          break;
 80085ec:	e007      	b.n	80085fe <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	221b      	movs	r2, #27
 80085f2:	701a      	strb	r2, [r3, #0]
          break;
 80085f4:	e003      	b.n	80085fe <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	222b      	movs	r2, #43	@ 0x2b
 80085fa:	701a      	strb	r2, [r3, #0]
          break;
 80085fc:	bf00      	nop
      }
      break;
 80085fe:	e015      	b.n	800862c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 8008600:	7cfb      	ldrb	r3, [r7, #19]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d005      	beq.n	8008612 <lsm6dsv16x_xl_data_rate_get+0x1fa>
 8008606:	2b02      	cmp	r3, #2
 8008608:	d007      	beq.n	800861a <lsm6dsv16x_xl_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	220c      	movs	r2, #12
 800860e:	701a      	strb	r2, [r3, #0]
          break;
 8008610:	e007      	b.n	8008622 <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	221c      	movs	r2, #28
 8008616:	701a      	strb	r2, [r3, #0]
          break;
 8008618:	e003      	b.n	8008622 <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	222c      	movs	r2, #44	@ 0x2c
 800861e:	701a      	strb	r2, [r3, #0]
          break;
 8008620:	bf00      	nop
      }
      break;
 8008622:	e003      	b.n	800862c <lsm6dsv16x_xl_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	2200      	movs	r2, #0
 8008628:	701a      	strb	r2, [r3, #0]
      break;
 800862a:	bf00      	nop
  }

  return ret;
 800862c:	697b      	ldr	r3, [r7, #20]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3718      	adds	r7, #24
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop

08008638 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	460b      	mov	r3, r1
 8008642:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8008644:	f107 0210 	add.w	r2, r7, #16
 8008648:	2301      	movs	r3, #1
 800864a:	2111      	movs	r1, #17
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f7ff fe13 	bl	8008278 <lsm6dsv16x_read_reg>
 8008652:	6178      	str	r0, [r7, #20]

  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8008654:	78fb      	ldrb	r3, [r7, #3]
 8008656:	f003 030f 	and.w	r3, r3, #15
 800865a:	b2da      	uxtb	r2, r3
 800865c:	7c3b      	ldrb	r3, [r7, #16]
 800865e:	f362 0303 	bfi	r3, r2, #0, #4
 8008662:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8008664:	f107 0210 	add.w	r2, r7, #16
 8008668:	2301      	movs	r3, #1
 800866a:	2111      	movs	r1, #17
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7ff fe21 	bl	80082b4 <lsm6dsv16x_write_reg>
 8008672:	4602      	mov	r2, r0
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	4413      	add	r3, r2
 8008678:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d001      	beq.n	8008684 <lsm6dsv16x_gy_data_rate_set+0x4c>
  {
    return ret;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	e024      	b.n	80086ce <lsm6dsv16x_gy_data_rate_set+0x96>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 8008684:	78fb      	ldrb	r3, [r7, #3]
 8008686:	091b      	lsrs	r3, r3, #4
 8008688:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 800868a:	7cfb      	ldrb	r3, [r7, #19]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d01d      	beq.n	80086cc <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8008690:	f107 020c 	add.w	r2, r7, #12
 8008694:	2301      	movs	r3, #1
 8008696:	2162      	movs	r1, #98	@ 0x62
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff fded 	bl	8008278 <lsm6dsv16x_read_reg>
 800869e:	4602      	mov	r2, r0
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	4413      	add	r3, r2
 80086a4:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 80086a6:	7cfb      	ldrb	r3, [r7, #19]
 80086a8:	f003 0303 	and.w	r3, r3, #3
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	7b3b      	ldrb	r3, [r7, #12]
 80086b0:	f362 0301 	bfi	r3, r2, #0, #2
 80086b4:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80086b6:	f107 020c 	add.w	r2, r7, #12
 80086ba:	2301      	movs	r3, #1
 80086bc:	2162      	movs	r1, #98	@ 0x62
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7ff fdf8 	bl	80082b4 <lsm6dsv16x_write_reg>
 80086c4:	4602      	mov	r2, r0
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	4413      	add	r3, r2
 80086ca:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80086cc:	697b      	ldr	r3, [r7, #20]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3718      	adds	r7, #24
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
	...

080086d8 <lsm6dsv16x_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80086e2:	f107 0210 	add.w	r2, r7, #16
 80086e6:	2301      	movs	r3, #1
 80086e8:	2111      	movs	r1, #17
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7ff fdc4 	bl	8008278 <lsm6dsv16x_read_reg>
 80086f0:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80086f2:	f107 020c 	add.w	r2, r7, #12
 80086f6:	2301      	movs	r3, #1
 80086f8:	2162      	movs	r1, #98	@ 0x62
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f7ff fdbc 	bl	8008278 <lsm6dsv16x_read_reg>
 8008700:	4602      	mov	r2, r0
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	4413      	add	r3, r2
 8008706:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <lsm6dsv16x_gy_data_rate_get+0x3a>
  {
    return ret;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	e0ed      	b.n	80088ee <lsm6dsv16x_gy_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 8008712:	7b3b      	ldrb	r3, [r7, #12]
 8008714:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008718:	b2db      	uxtb	r3, r3
 800871a:	74fb      	strb	r3, [r7, #19]

  switch (ctrl2.odr_g)
 800871c:	7c3b      	ldrb	r3, [r7, #16]
 800871e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b0c      	cmp	r3, #12
 8008726:	f200 80dd 	bhi.w	80088e4 <lsm6dsv16x_gy_data_rate_get+0x20c>
 800872a:	a201      	add	r2, pc, #4	@ (adr r2, 8008730 <lsm6dsv16x_gy_data_rate_get+0x58>)
 800872c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008730:	08008765 	.word	0x08008765
 8008734:	0800876d 	.word	0x0800876d
 8008738:	08008775 	.word	0x08008775
 800873c:	0800877d 	.word	0x0800877d
 8008740:	080087a1 	.word	0x080087a1
 8008744:	080087c5 	.word	0x080087c5
 8008748:	080087e9 	.word	0x080087e9
 800874c:	0800880d 	.word	0x0800880d
 8008750:	08008831 	.word	0x08008831
 8008754:	08008855 	.word	0x08008855
 8008758:	08008879 	.word	0x08008879
 800875c:	0800889d 	.word	0x0800889d
 8008760:	080088c1 	.word	0x080088c1
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	2200      	movs	r2, #0
 8008768:	701a      	strb	r2, [r3, #0]
      break;
 800876a:	e0bf      	b.n	80088ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	2201      	movs	r2, #1
 8008770:	701a      	strb	r2, [r3, #0]
      break;
 8008772:	e0bb      	b.n	80088ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	2202      	movs	r2, #2
 8008778:	701a      	strb	r2, [r3, #0]
      break;
 800877a:	e0b7      	b.n	80088ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 800877c:	7cfb      	ldrb	r3, [r7, #19]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d005      	beq.n	800878e <lsm6dsv16x_gy_data_rate_get+0xb6>
 8008782:	2b02      	cmp	r3, #2
 8008784:	d007      	beq.n	8008796 <lsm6dsv16x_gy_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2203      	movs	r2, #3
 800878a:	701a      	strb	r2, [r3, #0]
          break;
 800878c:	e007      	b.n	800879e <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2213      	movs	r2, #19
 8008792:	701a      	strb	r2, [r3, #0]
          break;
 8008794:	e003      	b.n	800879e <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	2223      	movs	r2, #35	@ 0x23
 800879a:	701a      	strb	r2, [r3, #0]
          break;
 800879c:	bf00      	nop
      }
      break;
 800879e:	e0a5      	b.n	80088ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 80087a0:	7cfb      	ldrb	r3, [r7, #19]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d005      	beq.n	80087b2 <lsm6dsv16x_gy_data_rate_get+0xda>
 80087a6:	2b02      	cmp	r3, #2
 80087a8:	d007      	beq.n	80087ba <lsm6dsv16x_gy_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2204      	movs	r2, #4
 80087ae:	701a      	strb	r2, [r3, #0]
          break;
 80087b0:	e007      	b.n	80087c2 <lsm6dsv16x_gy_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2214      	movs	r2, #20
 80087b6:	701a      	strb	r2, [r3, #0]
          break;
 80087b8:	e003      	b.n	80087c2 <lsm6dsv16x_gy_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2224      	movs	r2, #36	@ 0x24
 80087be:	701a      	strb	r2, [r3, #0]
          break;
 80087c0:	bf00      	nop
      }
      break;
 80087c2:	e093      	b.n	80088ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 80087c4:	7cfb      	ldrb	r3, [r7, #19]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d005      	beq.n	80087d6 <lsm6dsv16x_gy_data_rate_get+0xfe>
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d007      	beq.n	80087de <lsm6dsv16x_gy_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2205      	movs	r2, #5
 80087d2:	701a      	strb	r2, [r3, #0]
          break;
 80087d4:	e007      	b.n	80087e6 <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	2215      	movs	r2, #21
 80087da:	701a      	strb	r2, [r3, #0]
          break;
 80087dc:	e003      	b.n	80087e6 <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2225      	movs	r2, #37	@ 0x25
 80087e2:	701a      	strb	r2, [r3, #0]
          break;
 80087e4:	bf00      	nop
      }
      break;
 80087e6:	e081      	b.n	80088ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 80087e8:	7cfb      	ldrb	r3, [r7, #19]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d005      	beq.n	80087fa <lsm6dsv16x_gy_data_rate_get+0x122>
 80087ee:	2b02      	cmp	r3, #2
 80087f0:	d007      	beq.n	8008802 <lsm6dsv16x_gy_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2206      	movs	r2, #6
 80087f6:	701a      	strb	r2, [r3, #0]
          break;
 80087f8:	e007      	b.n	800880a <lsm6dsv16x_gy_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2216      	movs	r2, #22
 80087fe:	701a      	strb	r2, [r3, #0]
          break;
 8008800:	e003      	b.n	800880a <lsm6dsv16x_gy_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	2226      	movs	r2, #38	@ 0x26
 8008806:	701a      	strb	r2, [r3, #0]
          break;
 8008808:	bf00      	nop
      }
      break;
 800880a:	e06f      	b.n	80088ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 800880c:	7cfb      	ldrb	r3, [r7, #19]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d005      	beq.n	800881e <lsm6dsv16x_gy_data_rate_get+0x146>
 8008812:	2b02      	cmp	r3, #2
 8008814:	d007      	beq.n	8008826 <lsm6dsv16x_gy_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2207      	movs	r2, #7
 800881a:	701a      	strb	r2, [r3, #0]
          break;
 800881c:	e007      	b.n	800882e <lsm6dsv16x_gy_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2217      	movs	r2, #23
 8008822:	701a      	strb	r2, [r3, #0]
          break;
 8008824:	e003      	b.n	800882e <lsm6dsv16x_gy_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2227      	movs	r2, #39	@ 0x27
 800882a:	701a      	strb	r2, [r3, #0]
          break;
 800882c:	bf00      	nop
      }
      break;
 800882e:	e05d      	b.n	80088ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 8008830:	7cfb      	ldrb	r3, [r7, #19]
 8008832:	2b01      	cmp	r3, #1
 8008834:	d005      	beq.n	8008842 <lsm6dsv16x_gy_data_rate_get+0x16a>
 8008836:	2b02      	cmp	r3, #2
 8008838:	d007      	beq.n	800884a <lsm6dsv16x_gy_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2208      	movs	r2, #8
 800883e:	701a      	strb	r2, [r3, #0]
          break;
 8008840:	e007      	b.n	8008852 <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2218      	movs	r2, #24
 8008846:	701a      	strb	r2, [r3, #0]
          break;
 8008848:	e003      	b.n	8008852 <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	2228      	movs	r2, #40	@ 0x28
 800884e:	701a      	strb	r2, [r3, #0]
          break;
 8008850:	bf00      	nop
      }
      break;
 8008852:	e04b      	b.n	80088ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 8008854:	7cfb      	ldrb	r3, [r7, #19]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d005      	beq.n	8008866 <lsm6dsv16x_gy_data_rate_get+0x18e>
 800885a:	2b02      	cmp	r3, #2
 800885c:	d007      	beq.n	800886e <lsm6dsv16x_gy_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	2209      	movs	r2, #9
 8008862:	701a      	strb	r2, [r3, #0]
          break;
 8008864:	e007      	b.n	8008876 <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	2219      	movs	r2, #25
 800886a:	701a      	strb	r2, [r3, #0]
          break;
 800886c:	e003      	b.n	8008876 <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	2229      	movs	r2, #41	@ 0x29
 8008872:	701a      	strb	r2, [r3, #0]
          break;
 8008874:	bf00      	nop
      }
      break;
 8008876:	e039      	b.n	80088ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 8008878:	7cfb      	ldrb	r3, [r7, #19]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d005      	beq.n	800888a <lsm6dsv16x_gy_data_rate_get+0x1b2>
 800887e:	2b02      	cmp	r3, #2
 8008880:	d007      	beq.n	8008892 <lsm6dsv16x_gy_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	220a      	movs	r2, #10
 8008886:	701a      	strb	r2, [r3, #0]
          break;
 8008888:	e007      	b.n	800889a <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	221a      	movs	r2, #26
 800888e:	701a      	strb	r2, [r3, #0]
          break;
 8008890:	e003      	b.n	800889a <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	222a      	movs	r2, #42	@ 0x2a
 8008896:	701a      	strb	r2, [r3, #0]
          break;
 8008898:	bf00      	nop
      }
      break;
 800889a:	e027      	b.n	80088ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 800889c:	7cfb      	ldrb	r3, [r7, #19]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d005      	beq.n	80088ae <lsm6dsv16x_gy_data_rate_get+0x1d6>
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d007      	beq.n	80088b6 <lsm6dsv16x_gy_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	220b      	movs	r2, #11
 80088aa:	701a      	strb	r2, [r3, #0]
          break;
 80088ac:	e007      	b.n	80088be <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	221b      	movs	r2, #27
 80088b2:	701a      	strb	r2, [r3, #0]
          break;
 80088b4:	e003      	b.n	80088be <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	222b      	movs	r2, #43	@ 0x2b
 80088ba:	701a      	strb	r2, [r3, #0]
          break;
 80088bc:	bf00      	nop
      }
      break;
 80088be:	e015      	b.n	80088ec <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 80088c0:	7cfb      	ldrb	r3, [r7, #19]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d005      	beq.n	80088d2 <lsm6dsv16x_gy_data_rate_get+0x1fa>
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d007      	beq.n	80088da <lsm6dsv16x_gy_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	220c      	movs	r2, #12
 80088ce:	701a      	strb	r2, [r3, #0]
          break;
 80088d0:	e007      	b.n	80088e2 <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	221c      	movs	r2, #28
 80088d6:	701a      	strb	r2, [r3, #0]
          break;
 80088d8:	e003      	b.n	80088e2 <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	222c      	movs	r2, #44	@ 0x2c
 80088de:	701a      	strb	r2, [r3, #0]
          break;
 80088e0:	bf00      	nop
      }
      break;
 80088e2:	e003      	b.n	80088ec <lsm6dsv16x_gy_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	2200      	movs	r2, #0
 80088e8:	701a      	strb	r2, [r3, #0]
      break;
 80088ea:	bf00      	nop
  }

  return ret;
 80088ec:	697b      	ldr	r3, [r7, #20]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop

080088f8 <lsm6dsv16x_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8008904:	f107 0208 	add.w	r2, r7, #8
 8008908:	2301      	movs	r3, #1
 800890a:	2112      	movs	r1, #18
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f7ff fcb3 	bl	8008278 <lsm6dsv16x_read_reg>
 8008912:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10f      	bne.n	800893a <lsm6dsv16x_auto_increment_set+0x42>
  {
    ctrl3.if_inc = val;
 800891a:	78fb      	ldrb	r3, [r7, #3]
 800891c:	f003 0301 	and.w	r3, r3, #1
 8008920:	b2da      	uxtb	r2, r3
 8008922:	7a3b      	ldrb	r3, [r7, #8]
 8008924:	f362 0382 	bfi	r3, r2, #2, #1
 8008928:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800892a:	f107 0208 	add.w	r2, r7, #8
 800892e:	2301      	movs	r3, #1
 8008930:	2112      	movs	r1, #18
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7ff fcbe 	bl	80082b4 <lsm6dsv16x_write_reg>
 8008938:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800893a:	68fb      	ldr	r3, [r7, #12]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8008950:	f107 0208 	add.w	r2, r7, #8
 8008954:	2301      	movs	r3, #1
 8008956:	2112      	movs	r1, #18
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f7ff fc8d 	bl	8008278 <lsm6dsv16x_read_reg>
 800895e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10f      	bne.n	8008986 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 8008966:	78fb      	ldrb	r3, [r7, #3]
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	b2da      	uxtb	r2, r3
 800896e:	7a3b      	ldrb	r3, [r7, #8]
 8008970:	f362 1386 	bfi	r3, r2, #6, #1
 8008974:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8008976:	f107 0208 	add.w	r2, r7, #8
 800897a:	2301      	movs	r3, #1
 800897c:	2112      	movs	r1, #18
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff fc98 	bl	80082b4 <lsm6dsv16x_write_reg>
 8008984:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008986:	68fb      	ldr	r3, [r7, #12]
}
 8008988:	4618      	mov	r0, r3
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 800899c:	f107 0208 	add.w	r2, r7, #8
 80089a0:	2301      	movs	r3, #1
 80089a2:	2115      	movs	r1, #21
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff fc67 	bl	8008278 <lsm6dsv16x_read_reg>
 80089aa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10f      	bne.n	80089d2 <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 80089b2:	78fb      	ldrb	r3, [r7, #3]
 80089b4:	f003 030f 	and.w	r3, r3, #15
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	7a3b      	ldrb	r3, [r7, #8]
 80089bc:	f362 0303 	bfi	r3, r2, #0, #4
 80089c0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 80089c2:	f107 0208 	add.w	r2, r7, #8
 80089c6:	2301      	movs	r3, #1
 80089c8:	2115      	movs	r1, #21
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7ff fc72 	bl	80082b4 <lsm6dsv16x_write_reg>
 80089d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80089d2:	68fb      	ldr	r3, [r7, #12]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <lsm6dsv16x_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t *val)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 80089e6:	f107 0208 	add.w	r2, r7, #8
 80089ea:	2301      	movs	r3, #1
 80089ec:	2115      	movs	r1, #21
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7ff fc42 	bl	8008278 <lsm6dsv16x_read_reg>
 80089f4:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d001      	beq.n	8008a00 <lsm6dsv16x_gy_full_scale_get+0x24>
  {
    return ret;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	e040      	b.n	8008a82 <lsm6dsv16x_gy_full_scale_get+0xa6>
  }

  switch (ctrl6.fs_g)
 8008a00:	7a3b      	ldrb	r3, [r7, #8]
 8008a02:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b0c      	cmp	r3, #12
 8008a0a:	d835      	bhi.n	8008a78 <lsm6dsv16x_gy_full_scale_get+0x9c>
 8008a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008a14 <lsm6dsv16x_gy_full_scale_get+0x38>)
 8008a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a12:	bf00      	nop
 8008a14:	08008a49 	.word	0x08008a49
 8008a18:	08008a51 	.word	0x08008a51
 8008a1c:	08008a59 	.word	0x08008a59
 8008a20:	08008a61 	.word	0x08008a61
 8008a24:	08008a69 	.word	0x08008a69
 8008a28:	08008a79 	.word	0x08008a79
 8008a2c:	08008a79 	.word	0x08008a79
 8008a30:	08008a79 	.word	0x08008a79
 8008a34:	08008a79 	.word	0x08008a79
 8008a38:	08008a79 	.word	0x08008a79
 8008a3c:	08008a79 	.word	0x08008a79
 8008a40:	08008a79 	.word	0x08008a79
 8008a44:	08008a71 	.word	0x08008a71
  {
    case LSM6DSV16X_125dps:
      *val = LSM6DSV16X_125dps;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	701a      	strb	r2, [r3, #0]
      break;
 8008a4e:	e017      	b.n	8008a80 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_250dps:
      *val = LSM6DSV16X_250dps;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	2201      	movs	r2, #1
 8008a54:	701a      	strb	r2, [r3, #0]
      break;
 8008a56:	e013      	b.n	8008a80 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_500dps:
      *val = LSM6DSV16X_500dps;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	701a      	strb	r2, [r3, #0]
      break;
 8008a5e:	e00f      	b.n	8008a80 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_1000dps:
      *val = LSM6DSV16X_1000dps;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	2203      	movs	r2, #3
 8008a64:	701a      	strb	r2, [r3, #0]
      break;
 8008a66:	e00b      	b.n	8008a80 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_2000dps:
      *val = LSM6DSV16X_2000dps;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	2204      	movs	r2, #4
 8008a6c:	701a      	strb	r2, [r3, #0]
      break;
 8008a6e:	e007      	b.n	8008a80 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_4000dps:
      *val = LSM6DSV16X_4000dps;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	220c      	movs	r2, #12
 8008a74:	701a      	strb	r2, [r3, #0]
      break;
 8008a76:	e003      	b.n	8008a80 <lsm6dsv16x_gy_full_scale_get+0xa4>

    default:
      *val = LSM6DSV16X_125dps;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	701a      	strb	r2, [r3, #0]
      break;
 8008a7e:	bf00      	nop
  }

  return ret;
 8008a80:	68fb      	ldr	r3, [r7, #12]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop

08008a8c <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8008a98:	f107 0208 	add.w	r2, r7, #8
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	2117      	movs	r1, #23
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7ff fbe9 	bl	8008278 <lsm6dsv16x_read_reg>
 8008aa6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10f      	bne.n	8008ace <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8008aae:	78fb      	ldrb	r3, [r7, #3]
 8008ab0:	f003 0303 	and.w	r3, r3, #3
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	7a3b      	ldrb	r3, [r7, #8]
 8008ab8:	f362 0301 	bfi	r3, r2, #0, #2
 8008abc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8008abe:	f107 0208 	add.w	r2, r7, #8
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	2117      	movs	r1, #23
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f7ff fbf4 	bl	80082b4 <lsm6dsv16x_write_reg>
 8008acc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008ace:	68fb      	ldr	r3, [r7, #12]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <lsm6dsv16x_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t *val)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8008ae2:	f107 0208 	add.w	r2, r7, #8
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	2117      	movs	r1, #23
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f7ff fbc4 	bl	8008278 <lsm6dsv16x_read_reg>
 8008af0:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d001      	beq.n	8008afc <lsm6dsv16x_xl_full_scale_get+0x24>
  {
    return ret;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	e026      	b.n	8008b4a <lsm6dsv16x_xl_full_scale_get+0x72>
  }

  switch (ctrl8.fs_xl)
 8008afc:	7a3b      	ldrb	r3, [r7, #8]
 8008afe:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	2b03      	cmp	r3, #3
 8008b06:	d81b      	bhi.n	8008b40 <lsm6dsv16x_xl_full_scale_get+0x68>
 8008b08:	a201      	add	r2, pc, #4	@ (adr r2, 8008b10 <lsm6dsv16x_xl_full_scale_get+0x38>)
 8008b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0e:	bf00      	nop
 8008b10:	08008b21 	.word	0x08008b21
 8008b14:	08008b29 	.word	0x08008b29
 8008b18:	08008b31 	.word	0x08008b31
 8008b1c:	08008b39 	.word	0x08008b39
  {
    case LSM6DSV16X_2g:
      *val = LSM6DSV16X_2g;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	2200      	movs	r2, #0
 8008b24:	701a      	strb	r2, [r3, #0]
      break;
 8008b26:	e00f      	b.n	8008b48 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_4g:
      *val = LSM6DSV16X_4g;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	701a      	strb	r2, [r3, #0]
      break;
 8008b2e:	e00b      	b.n	8008b48 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_8g:
      *val = LSM6DSV16X_8g;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	2202      	movs	r2, #2
 8008b34:	701a      	strb	r2, [r3, #0]
      break;
 8008b36:	e007      	b.n	8008b48 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_16g:
      *val = LSM6DSV16X_16g;
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	2203      	movs	r2, #3
 8008b3c:	701a      	strb	r2, [r3, #0]
      break;
 8008b3e:	e003      	b.n	8008b48 <lsm6dsv16x_xl_full_scale_get+0x70>

    default:
      *val = LSM6DSV16X_2g;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	2200      	movs	r2, #0
 8008b44:	701a      	strb	r2, [r3, #0]
      break;
 8008b46:	bf00      	nop
  }

  return ret;
 8008b48:	68fb      	ldr	r3, [r7, #12]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop

08008b54 <lsm6dsv16x_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_G, &buff[0], 6);
 8008b5e:	f107 020c 	add.w	r2, r7, #12
 8008b62:	2306      	movs	r3, #6
 8008b64:	2122      	movs	r1, #34	@ 0x22
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7ff fb86 	bl	8008278 <lsm6dsv16x_read_reg>
 8008b6c:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d001      	beq.n	8008b78 <lsm6dsv16x_angular_rate_raw_get+0x24>
  {
    return ret;
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	e036      	b.n	8008be6 <lsm6dsv16x_angular_rate_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 8008b78:	7b7b      	ldrb	r3, [r7, #13]
 8008b7a:	b21a      	sxth	r2, r3
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	021b      	lsls	r3, r3, #8
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	7b3a      	ldrb	r2, [r7, #12]
 8008b8e:	4413      	add	r3, r2
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	b21a      	sxth	r2, r3
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008b98:	7bfa      	ldrb	r2, [r7, #15]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	3302      	adds	r3, #2
 8008b9e:	b212      	sxth	r2, r2
 8008ba0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	3302      	adds	r3, #2
 8008ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	021b      	lsls	r3, r3, #8
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	7bba      	ldrb	r2, [r7, #14]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	3302      	adds	r3, #2
 8008bba:	b212      	sxth	r2, r2
 8008bbc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008bbe:	7c7a      	ldrb	r2, [r7, #17]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	b212      	sxth	r2, r2
 8008bc6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	3304      	adds	r3, #4
 8008bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	021b      	lsls	r3, r3, #8
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	7c3a      	ldrb	r2, [r7, #16]
 8008bd8:	4413      	add	r3, r2
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	3304      	adds	r3, #4
 8008be0:	b212      	sxth	r2, r2
 8008be2:	801a      	strh	r2, [r3, #0]

  return ret;
 8008be4:	697b      	ldr	r3, [r7, #20]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3718      	adds	r7, #24
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <lsm6dsv16x_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b086      	sub	sp, #24
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_A, &buff[0], 6);
 8008bf8:	f107 020c 	add.w	r2, r7, #12
 8008bfc:	2306      	movs	r3, #6
 8008bfe:	2128      	movs	r1, #40	@ 0x28
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff fb39 	bl	8008278 <lsm6dsv16x_read_reg>
 8008c06:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <lsm6dsv16x_acceleration_raw_get+0x24>
  {
    return ret;
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	e036      	b.n	8008c80 <lsm6dsv16x_acceleration_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 8008c12:	7b7b      	ldrb	r3, [r7, #13]
 8008c14:	b21a      	sxth	r2, r3
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	021b      	lsls	r3, r3, #8
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	7b3a      	ldrb	r2, [r7, #12]
 8008c28:	4413      	add	r3, r2
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	b21a      	sxth	r2, r3
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8008c32:	7bfa      	ldrb	r2, [r7, #15]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	3302      	adds	r3, #2
 8008c38:	b212      	sxth	r2, r2
 8008c3a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	3302      	adds	r3, #2
 8008c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	021b      	lsls	r3, r3, #8
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	7bba      	ldrb	r2, [r7, #14]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	3302      	adds	r3, #2
 8008c54:	b212      	sxth	r2, r2
 8008c56:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8008c58:	7c7a      	ldrb	r2, [r7, #17]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	b212      	sxth	r2, r2
 8008c60:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	3304      	adds	r3, #4
 8008c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	021b      	lsls	r3, r3, #8
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	7c3a      	ldrb	r2, [r7, #16]
 8008c72:	4413      	add	r3, r2
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	3304      	adds	r3, #4
 8008c7a:	b212      	sxth	r2, r2
 8008c7c:	801a      	strh	r2, [r3, #0]

  return ret;
 8008c7e:	697b      	ldr	r3, [r7, #20]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3718      	adds	r7, #24
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(const stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	460b      	mov	r3, r1
 8008c92:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8008c94:	f107 0208 	add.w	r2, r7, #8
 8008c98:	2301      	movs	r3, #1
 8008c9a:	210a      	movs	r1, #10
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7ff faeb 	bl	8008278 <lsm6dsv16x_read_reg>
 8008ca2:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10f      	bne.n	8008cca <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8008caa:	78fb      	ldrb	r3, [r7, #3]
 8008cac:	f003 0307 	and.w	r3, r3, #7
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	7a3b      	ldrb	r3, [r7, #8]
 8008cb4:	f362 0302 	bfi	r3, r2, #0, #3
 8008cb8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8008cba:	f107 0208 	add.w	r2, r7, #8
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	210a      	movs	r1, #10
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff faf6 	bl	80082b4 <lsm6dsv16x_write_reg>
 8008cc8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008cca:	68fb      	ldr	r3, [r7, #12]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3710      	adds	r7, #16
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <lsm6dsv16x_ah_qvar_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ah_qvar_mode_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_ah_qvar_mode_t val)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b084      	sub	sp, #16
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	7039      	strb	r1, [r7, #0]
  lsm6dsv16x_ctrl7_t ctrl7;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8008cde:	f107 0208 	add.w	r2, r7, #8
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	2116      	movs	r1, #22
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7ff fac6 	bl	8008278 <lsm6dsv16x_read_reg>
 8008cec:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10f      	bne.n	8008d14 <lsm6dsv16x_ah_qvar_mode_set+0x40>
  {
    ctrl7.ah_qvar_en = val.ah_qvar_en;
 8008cf4:	783b      	ldrb	r3, [r7, #0]
 8008cf6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	7a3b      	ldrb	r3, [r7, #8]
 8008cfe:	f362 13c7 	bfi	r3, r2, #7, #1
 8008d02:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8008d04:	f107 0208 	add.w	r2, r7, #8
 8008d08:	2301      	movs	r3, #1
 8008d0a:	2116      	movs	r1, #22
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7ff fad1 	bl	80082b4 <lsm6dsv16x_write_reg>
 8008d12:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008d14:	68fb      	ldr	r3, [r7, #12]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
	...

08008d20 <SHT40AD1B_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_RegisterBusIO(SHT40AD1B_Object_t *pObj, SHT40AD1B_IO_t *pIO)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d103      	bne.n	8008d38 <SHT40AD1B_RegisterBusIO+0x18>
  {
    ret = SHT40AD1B_ERROR;
 8008d30:	f04f 33ff 	mov.w	r3, #4294967295
 8008d34:	60fb      	str	r3, [r7, #12]
 8008d36:	e034      	b.n	8008da2 <SHT40AD1B_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init    = pIO->Init;
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit  = pIO->DeInit;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685a      	ldr	r2, [r3, #4]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType = pIO->BusType;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	689a      	ldr	r2, [r3, #8]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address = pIO->Address;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	7b1a      	ldrb	r2, [r3, #12]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	731a      	strb	r2, [r3, #12]
    pObj->IO.Write   = pIO->Write;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	691a      	ldr	r2, [r3, #16]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	611a      	str	r2, [r3, #16]
    pObj->IO.Read    = pIO->Read;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	695a      	ldr	r2, [r3, #20]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick = pIO->GetTick;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	699a      	ldr	r2, [r3, #24]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a0e      	ldr	r2, [pc, #56]	@ (8008dac <SHT40AD1B_RegisterBusIO+0x8c>)
 8008d74:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a0d      	ldr	r2, [pc, #52]	@ (8008db0 <SHT40AD1B_RegisterBusIO+0x90>)
 8008d7a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	69da      	ldr	r2, [r3, #28]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d004      	beq.n	8008d9c <SHT40AD1B_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4798      	blx	r3
 8008d98:	60f8      	str	r0, [r7, #12]
 8008d9a:	e002      	b.n	8008da2 <SHT40AD1B_RegisterBusIO+0x82>
    }
    else
    {
      ret = SHT40AD1B_ERROR;
 8008d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008da0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008da2:	68fb      	ldr	r3, [r7, #12]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	08009031 	.word	0x08009031
 8008db0:	08009071 	.word	0x08009071

08008db4 <SHT40AD1B_Init>:
  * @brief  Initialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_Init(SHT40AD1B_Object_t *pObj)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* This device doesn't support ODR, works more like one-shot measurement */
  pObj->hum_odr  = 0.0f;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f04f 0200 	mov.w	r2, #0
 8008dc2:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->temp_odr = 0.0f;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f04f 0200 	mov.w	r2, #0
 8008dca:	639a      	str	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 1;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <SHT40AD1B_DeInit>:
  * @brief  Deinitialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_DeInit(SHT40AD1B_Object_t *pObj)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b083      	sub	sp, #12
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
  pObj->is_initialized = 0;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <SHT40AD1B_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_ReadID(SHT40AD1B_Object_t *pObj, uint8_t *Id)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  return sht40ad1b_device_id_get(&(pObj->Ctx), Id);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	3320      	adds	r3, #32
 8008e0e:	6839      	ldr	r1, [r7, #0]
 8008e10:	4618      	mov	r0, r3
 8008e12:	f000 fa23 	bl	800925c <sht40ad1b_device_id_get>
 8008e16:	4603      	mov	r3, r0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <SHT40AD1B_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to SHT40AD1B sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_GetCapabilities(SHT40AD1B_Object_t *pObj, SHT40AD1B_Capabilities_t *Capabilities)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	2200      	movs	r2, #0
 8008e34:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	2200      	movs	r2, #0
 8008e46:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	f04f 0200 	mov.w	r2, #0
 8008e4e:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 0.0f;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	f04f 0200 	mov.w	r2, #0
 8008e56:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	f04f 0200 	mov.w	r2, #0
 8008e5e:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	f04f 0200 	mov.w	r2, #0
 8008e66:	615a      	str	r2, [r3, #20]
  return SHT40AD1B_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	370c      	adds	r7, #12
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <SHT40AD1B_HUM_Enable>:
  * @brief  Enable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Enable(SHT40AD1B_Object_t *pObj)
{
 8008e76:	b480      	push	{r7}
 8008e78:	b083      	sub	sp, #12
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d101      	bne.n	8008e8c <SHT40AD1B_HUM_Enable+0x16>
  {
    return SHT40AD1B_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	e004      	b.n	8008e96 <SHT40AD1B_HUM_Enable+0x20>
  }

  pObj->hum_is_enabled = 1;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <SHT40AD1B_HUM_Disable>:
  * @brief  Disable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Disable(SHT40AD1B_Object_t *pObj)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b083      	sub	sp, #12
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <SHT40AD1B_HUM_Disable+0x16>
  {
    return SHT40AD1B_OK;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	e004      	b.n	8008ec2 <SHT40AD1B_HUM_Disable+0x20>
  }

  pObj->hum_is_enabled = 0;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	370c      	adds	r7, #12
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr

08008ece <SHT40AD1B_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b083      	sub	sp, #12
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	6039      	str	r1, [r7, #0]
  *Odr = pObj->hum_odr;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	370c      	adds	r7, #12
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <SHT40AD1B_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b083      	sub	sp, #12
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <SHT40AD1B_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetHumidity(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 f86f 	bl	8008ff6 <GetData>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d002      	beq.n	8008f24 <SHT40AD1B_HUM_GetHumidity+0x1c>
  {
    return SHT40AD1B_ERROR;
 8008f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f22:	e004      	b.n	8008f2e <SHT40AD1B_HUM_GetHumidity+0x26>
  }

  *Value = pObj->hum_value;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <SHT40AD1B_TEMP_Enable>:
  * @brief  Enable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Enable(SHT40AD1B_Object_t *pObj)
{
 8008f36:	b480      	push	{r7}
 8008f38:	b083      	sub	sp, #12
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d101      	bne.n	8008f4c <SHT40AD1B_TEMP_Enable+0x16>
  {
    return SHT40AD1B_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	e004      	b.n	8008f56 <SHT40AD1B_TEMP_Enable+0x20>
  }

  pObj->temp_is_enabled = 1;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	370c      	adds	r7, #12
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <SHT40AD1B_TEMP_Disable>:
  * @brief  Disable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Disable(SHT40AD1B_Object_t *pObj)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b083      	sub	sp, #12
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d101      	bne.n	8008f78 <SHT40AD1B_TEMP_Disable+0x16>
  {
    return SHT40AD1B_OK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	e004      	b.n	8008f82 <SHT40AD1B_TEMP_Disable+0x20>
  }

  pObj->temp_is_enabled = 0;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	370c      	adds	r7, #12
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <SHT40AD1B_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 8008f8e:	b480      	push	{r7}
 8008f90:	b083      	sub	sp, #12
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	6078      	str	r0, [r7, #4]
 8008f96:	6039      	str	r1, [r7, #0]
  *Odr = pObj->temp_odr;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <SHT40AD1B_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b083      	sub	sp, #12
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <SHT40AD1B_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetTemperature(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f80f 	bl	8008ff6 <GetData>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d002      	beq.n	8008fe4 <SHT40AD1B_TEMP_GetTemperature+0x1c>
  {
    return SHT40AD1B_ERROR;
 8008fde:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe2:	e004      	b.n	8008fee <SHT40AD1B_TEMP_GetTemperature+0x26>
  }

  *Value = pObj->temp_value;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <GetData>:
  * @param  pObj the device pObj
  * @param  Status the new data status
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t GetData(SHT40AD1B_Object_t *pObj)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  float_t data[2];  /* humidity, temperature */

  if (sht40ad1b_data_get(&(pObj->Ctx), data) != 0)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	3320      	adds	r3, #32
 8009002:	f107 0208 	add.w	r2, r7, #8
 8009006:	4611      	mov	r1, r2
 8009008:	4618      	mov	r0, r3
 800900a:	f000 f881 	bl	8009110 <sht40ad1b_data_get>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <GetData+0x24>
  {
    return SHT40AD1B_ERROR;
 8009014:	f04f 33ff 	mov.w	r3, #4294967295
 8009018:	e006      	b.n	8009028 <GetData+0x32>
  }

  pObj->hum_value = data[0];
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	63da      	str	r2, [r3, #60]	@ 0x3c
  pObj->temp_value = data[1];
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	641a      	str	r2, [r3, #64]	@ 0x40

  return SHT40AD1B_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	607a      	str	r2, [r7, #4]
 800903a:	461a      	mov	r2, r3
 800903c:	460b      	mov	r3, r1
 800903e:	72fb      	strb	r3, [r7, #11]
 8009040:	4613      	mov	r3, r2
 8009042:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d109      	bne.n	8009064 <ReadRegWrap+0x34>
  {
    return pObj->IO.Read(pObj->IO.Address, pData, Length);
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	695b      	ldr	r3, [r3, #20]
 8009054:	697a      	ldr	r2, [r7, #20]
 8009056:	7b12      	ldrb	r2, [r2, #12]
 8009058:	4610      	mov	r0, r2
 800905a:	893a      	ldrh	r2, [r7, #8]
 800905c:	6879      	ldr	r1, [r7, #4]
 800905e:	4798      	blx	r3
 8009060:	4603      	mov	r3, r0
 8009062:	e001      	b.n	8009068 <ReadRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 8009064:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8009068:	4618      	mov	r0, r3
 800906a:	3718      	adds	r7, #24
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	607a      	str	r2, [r7, #4]
 800907a:	461a      	mov	r2, r3
 800907c:	460b      	mov	r3, r1
 800907e:	72fb      	strb	r3, [r7, #11]
 8009080:	4613      	mov	r3, r2
 8009082:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d109      	bne.n	80090a4 <WriteRegWrap+0x34>
  {
    return pObj->IO.Write(pObj->IO.Address, pData, Length);
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	697a      	ldr	r2, [r7, #20]
 8009096:	7b12      	ldrb	r2, [r2, #12]
 8009098:	4610      	mov	r0, r2
 800909a:	893a      	ldrh	r2, [r7, #8]
 800909c:	6879      	ldr	r1, [r7, #4]
 800909e:	4798      	blx	r3
 80090a0:	4603      	mov	r3, r0
 80090a2:	e001      	b.n	80090a8 <WriteRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 80090a4:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3718      	adds	r7, #24
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <sht40ad1b_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data, uint16_t len)
{
 80090b0:	b590      	push	{r4, r7, lr}
 80090b2:	b087      	sub	sp, #28
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	607a      	str	r2, [r7, #4]
 80090ba:	461a      	mov	r2, r3
 80090bc:	460b      	mov	r3, r1
 80090be:	72fb      	strb	r3, [r7, #11]
 80090c0:	4613      	mov	r3, r2
 80090c2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	685c      	ldr	r4, [r3, #4]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	68d8      	ldr	r0, [r3, #12]
 80090cc:	893b      	ldrh	r3, [r7, #8]
 80090ce:	7af9      	ldrb	r1, [r7, #11]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	47a0      	blx	r4
 80090d4:	6178      	str	r0, [r7, #20]

  return ret;
 80090d6:	697b      	ldr	r3, [r7, #20]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	371c      	adds	r7, #28
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd90      	pop	{r4, r7, pc}

080090e0 <sht40ad1b_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data, uint16_t len)
{
 80090e0:	b590      	push	{r4, r7, lr}
 80090e2:	b087      	sub	sp, #28
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	607a      	str	r2, [r7, #4]
 80090ea:	461a      	mov	r2, r3
 80090ec:	460b      	mov	r3, r1
 80090ee:	72fb      	strb	r3, [r7, #11]
 80090f0:	4613      	mov	r3, r2
 80090f2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681c      	ldr	r4, [r3, #0]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	68d8      	ldr	r0, [r3, #12]
 80090fc:	893b      	ldrh	r3, [r7, #8]
 80090fe:	7af9      	ldrb	r1, [r7, #11]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	47a0      	blx	r4
 8009104:	6178      	str	r0, [r7, #20]

  return ret;
 8009106:	697b      	ldr	r3, [r7, #20]
}
 8009108:	4618      	mov	r0, r3
 800910a:	371c      	adds	r7, #28
 800910c:	46bd      	mov	sp, r7
 800910e:	bd90      	pop	{r4, r7, pc}

08009110 <sht40ad1b_data_get>:
  * @param  buffer  buffer to store humidity and temperature values pair
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_data_get(stmdev_ctx_t *ctx, float_t *buffer)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b088      	sub	sp, #32
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint8_t command = 0xFD;
 800911a:	23fd      	movs	r3, #253	@ 0xfd
 800911c:	73fb      	strb	r3, [r7, #15]
  uint8_t data[6] = {0};
 800911e:	f107 0308 	add.w	r3, r7, #8
 8009122:	2200      	movs	r2, #0
 8009124:	601a      	str	r2, [r3, #0]
 8009126:	809a      	strh	r2, [r3, #4]

  if (sht40ad1b_write_reg(ctx, 0, &command, 1) != 0)
 8009128:	f107 020f 	add.w	r2, r7, #15
 800912c:	2301      	movs	r3, #1
 800912e:	2100      	movs	r1, #0
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff ffd5 	bl	80090e0 <sht40ad1b_write_reg>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <sht40ad1b_data_get+0x30>
  {
    return 1;
 800913c:	2301      	movs	r3, #1
 800913e:	e07d      	b.n	800923c <sht40ad1b_data_get+0x12c>
  }

  /* Wait 10 ms */
  ctx->mdelay(10);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	200a      	movs	r0, #10
 8009146:	4798      	blx	r3

  if (sht40ad1b_read_reg(ctx, 0, data, 6) != 0)
 8009148:	f107 0208 	add.w	r2, r7, #8
 800914c:	2306      	movs	r3, #6
 800914e:	2100      	movs	r1, #0
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f7ff ffad 	bl	80090b0 <sht40ad1b_read_reg>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <sht40ad1b_data_get+0x50>
  {
    return 1;
 800915c:	2301      	movs	r3, #1
 800915e:	e06d      	b.n	800923c <sht40ad1b_data_get+0x12c>
  }

  uint16_t temp_value_raw = (data[0] * 0x100U) + data[1];
 8009160:	7a3b      	ldrb	r3, [r7, #8]
 8009162:	021b      	lsls	r3, r3, #8
 8009164:	b29b      	uxth	r3, r3
 8009166:	7a7a      	ldrb	r2, [r7, #9]
 8009168:	4413      	add	r3, r2
 800916a:	83fb      	strh	r3, [r7, #30]
  uint8_t temp_value_crc  = data[2];
 800916c:	7abb      	ldrb	r3, [r7, #10]
 800916e:	777b      	strb	r3, [r7, #29]
  uint16_t hum_value_raw  = (data[3] * 0x100U) + data[4];
 8009170:	7afb      	ldrb	r3, [r7, #11]
 8009172:	021b      	lsls	r3, r3, #8
 8009174:	b29b      	uxth	r3, r3
 8009176:	7b3a      	ldrb	r2, [r7, #12]
 8009178:	4413      	add	r3, r2
 800917a:	837b      	strh	r3, [r7, #26]
  uint8_t hum_value_crc   = data[5];
 800917c:	7b7b      	ldrb	r3, [r7, #13]
 800917e:	767b      	strb	r3, [r7, #25]

  /* Check CRC for temperature value */
  if (crc_check(&data[0], 2, temp_value_crc) != 0U)
 8009180:	7f7a      	ldrb	r2, [r7, #29]
 8009182:	f107 0308 	add.w	r3, r7, #8
 8009186:	2102      	movs	r1, #2
 8009188:	4618      	mov	r0, r3
 800918a:	f000 f8b3 	bl	80092f4 <crc_check>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <sht40ad1b_data_get+0x88>
  {
    return 1;
 8009194:	2301      	movs	r3, #1
 8009196:	e051      	b.n	800923c <sht40ad1b_data_get+0x12c>
  }

  /* Check CRC for humidity value */
  if (crc_check(&data[3], 2, hum_value_crc) != 0U)
 8009198:	7e7a      	ldrb	r2, [r7, #25]
 800919a:	f107 0308 	add.w	r3, r7, #8
 800919e:	3303      	adds	r3, #3
 80091a0:	2102      	movs	r1, #2
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 f8a6 	bl	80092f4 <crc_check>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <sht40ad1b_data_get+0xa2>
  {
    return 1;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e044      	b.n	800923c <sht40ad1b_data_get+0x12c>
  }

  float_t temp_value = -45.0f + (175.0f * (float_t)temp_value_raw / (float_t)0xFFFF);
 80091b2:	8bfb      	ldrh	r3, [r7, #30]
 80091b4:	ee07 3a90 	vmov	s15, r3
 80091b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091bc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8009244 <sht40ad1b_data_get+0x134>
 80091c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80091c4:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8009248 <sht40ad1b_data_get+0x138>
 80091c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80091cc:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800924c <sht40ad1b_data_get+0x13c>
 80091d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091d4:	edc7 7a05 	vstr	s15, [r7, #20]
  float_t hum_value  =  -6.0f + (125.0f * (float_t)hum_value_raw  / (float_t)0xFFFF);
 80091d8:	8b7b      	ldrh	r3, [r7, #26]
 80091da:	ee07 3a90 	vmov	s15, r3
 80091de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e2:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8009250 <sht40ad1b_data_get+0x140>
 80091e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80091ea:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8009248 <sht40ad1b_data_get+0x138>
 80091ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80091f2:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80091f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091fa:	edc7 7a04 	vstr	s15, [r7, #16]

  hum_value = (hum_value > 100.0f) ? 100.0f
              : (hum_value <   0.0f) ?   0.0f
 80091fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8009202:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009254 <sht40ad1b_data_get+0x144>
 8009206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800920a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800920e:	dd01      	ble.n	8009214 <sht40ad1b_data_get+0x104>
 8009210:	4b11      	ldr	r3, [pc, #68]	@ (8009258 <sht40ad1b_data_get+0x148>)
 8009212:	e00a      	b.n	800922a <sht40ad1b_data_get+0x11a>
              :                        hum_value;
 8009214:	edd7 7a04 	vldr	s15, [r7, #16]
 8009218:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800921c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009220:	d502      	bpl.n	8009228 <sht40ad1b_data_get+0x118>
 8009222:	f04f 0300 	mov.w	r3, #0
 8009226:	e000      	b.n	800922a <sht40ad1b_data_get+0x11a>
 8009228:	693b      	ldr	r3, [r7, #16]
  hum_value = (hum_value > 100.0f) ? 100.0f
 800922a:	613b      	str	r3, [r7, #16]

  buffer[0] = hum_value;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	601a      	str	r2, [r3, #0]
  buffer[1] = temp_value;
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	3304      	adds	r3, #4
 8009236:	697a      	ldr	r2, [r7, #20]
 8009238:	601a      	str	r2, [r3, #0]
  return 0;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3720      	adds	r7, #32
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	432f0000 	.word	0x432f0000
 8009248:	477fff00 	.word	0x477fff00
 800924c:	42340000 	.word	0x42340000
 8009250:	42fa0000 	.word	0x42fa0000
 8009254:	42c80000 	.word	0x42c80000
 8009258:	42c80000 	.word	0x42c80000

0800925c <sht40ad1b_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  (void)ctx;
  *buff = SHT40AD1B_ID;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	2200      	movs	r2, #0
 800926a:	701a      	strb	r2, [r3, #0]
  return 0;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <crc_calculate>:
  * @param  count  number of data bytes
  * @retval        CRC check sum of data stream
  *
  */
static uint8_t crc_calculate(const uint8_t *data, uint16_t count)
{
 800927a:	b480      	push	{r7}
 800927c:	b085      	sub	sp, #20
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	460b      	mov	r3, r1
 8009284:	807b      	strh	r3, [r7, #2]
  const uint8_t crc8_polynomial = 0x31;
 8009286:	2331      	movs	r3, #49	@ 0x31
 8009288:	72bb      	strb	r3, [r7, #10]
  uint8_t crc = 0xFF;
 800928a:	23ff      	movs	r3, #255	@ 0xff
 800928c:	73fb      	strb	r3, [r7, #15]

  /* Calculate 8-bit checksum for given polynomial */
  for (uint16_t index = 0; index < count; index++)
 800928e:	2300      	movs	r3, #0
 8009290:	81bb      	strh	r3, [r7, #12]
 8009292:	e024      	b.n	80092de <crc_calculate+0x64>
  {
    crc ^= data[index];
 8009294:	89bb      	ldrh	r3, [r7, #12]
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	4413      	add	r3, r2
 800929a:	781a      	ldrb	r2, [r3, #0]
 800929c:	7bfb      	ldrb	r3, [r7, #15]
 800929e:	4053      	eors	r3, r2
 80092a0:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 80092a2:	2308      	movs	r3, #8
 80092a4:	72fb      	strb	r3, [r7, #11]
 80092a6:	e014      	b.n	80092d2 <crc_calculate+0x58>
    {
      crc = ((crc & 0x80U) != 0U) ? ((crc << 1) ^ crc8_polynomial) : (crc << 1);
 80092a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	da09      	bge.n	80092c4 <crc_calculate+0x4a>
 80092b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092b4:	005b      	lsls	r3, r3, #1
 80092b6:	b25a      	sxtb	r2, r3
 80092b8:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80092bc:	4053      	eors	r3, r2
 80092be:	b25b      	sxtb	r3, r3
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	e002      	b.n	80092ca <crc_calculate+0x50>
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
 80092c6:	005b      	lsls	r3, r3, #1
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 80092cc:	7afb      	ldrb	r3, [r7, #11]
 80092ce:	3b01      	subs	r3, #1
 80092d0:	72fb      	strb	r3, [r7, #11]
 80092d2:	7afb      	ldrb	r3, [r7, #11]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1e7      	bne.n	80092a8 <crc_calculate+0x2e>
  for (uint16_t index = 0; index < count; index++)
 80092d8:	89bb      	ldrh	r3, [r7, #12]
 80092da:	3301      	adds	r3, #1
 80092dc:	81bb      	strh	r3, [r7, #12]
 80092de:	89ba      	ldrh	r2, [r7, #12]
 80092e0:	887b      	ldrh	r3, [r7, #2]
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d3d6      	bcc.n	8009294 <crc_calculate+0x1a>
    }
  }

  return crc;
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <crc_check>:
  * @param  crc    CRC check sum of data stream
  * @retval        0 if CRC is OK else 1
  *
  */
static uint8_t crc_check(const uint8_t *data, uint16_t count, uint8_t crc)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	460b      	mov	r3, r1
 80092fe:	807b      	strh	r3, [r7, #2]
 8009300:	4613      	mov	r3, r2
 8009302:	707b      	strb	r3, [r7, #1]
  return (crc_calculate(data, count) == crc) ? 0U : 1U;
 8009304:	887b      	ldrh	r3, [r7, #2]
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7ff ffb6 	bl	800927a <crc_calculate>
 800930e:	4603      	mov	r3, r0
 8009310:	461a      	mov	r2, r3
 8009312:	787b      	ldrb	r3, [r7, #1]
 8009314:	4293      	cmp	r3, r2
 8009316:	bf14      	ite	ne
 8009318:	2301      	movne	r3, #1
 800931a:	2300      	moveq	r3, #0
 800931c:	b2db      	uxtb	r3, r3
}
 800931e:	4618      	mov	r0, r3
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
	...

08009328 <STTS22H_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_RegisterBusIO(STTS22H_Object_t *pObj, STTS22H_IO_t *pIO)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d103      	bne.n	8009340 <STTS22H_RegisterBusIO+0x18>
  {
    ret = STTS22H_ERROR;
 8009338:	f04f 33ff 	mov.w	r3, #4294967295
 800933c:	60fb      	str	r3, [r7, #12]
 800933e:	e034      	b.n	80093aa <STTS22H_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	689a      	ldr	r2, [r3, #8]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	7b1a      	ldrb	r2, [r3, #12]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	691a      	ldr	r2, [r3, #16]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	695a      	ldr	r2, [r3, #20]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	699a      	ldr	r2, [r3, #24]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a0e      	ldr	r2, [pc, #56]	@ (80093b4 <STTS22H_RegisterBusIO+0x8c>)
 800937c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a0d      	ldr	r2, [pc, #52]	@ (80093b8 <STTS22H_RegisterBusIO+0x90>)
 8009382:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	69da      	ldr	r2, [r3, #28]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d004      	beq.n	80093a4 <STTS22H_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4798      	blx	r3
 80093a0:	60f8      	str	r0, [r7, #12]
 80093a2:	e002      	b.n	80093aa <STTS22H_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS22H_ERROR;
 80093a4:	f04f 33ff 	mov.w	r3, #4294967295
 80093a8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80093aa:	68fb      	ldr	r3, [r7, #12]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	080097c5 	.word	0x080097c5
 80093b8:	08009833 	.word	0x08009833

080093bc <STTS22H_Init>:
  * @brief  Initialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_Init(STTS22H_Object_t *pObj)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d127      	bne.n	800941e <STTS22H_Init+0x62>
  {
    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80093d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable BDU */
    if (stts22h_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	3320      	adds	r3, #32
 80093da:	2101      	movs	r1, #1
 80093dc:	4618      	mov	r0, r3
 80093de:	f000 fbad 	bl	8009b3c <stts22h_block_data_update_set>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d002      	beq.n	80093ee <STTS22H_Init+0x32>
    {
      return STTS22H_ERROR;
 80093e8:	f04f 33ff 	mov.w	r3, #4294967295
 80093ec:	e01c      	b.n	8009428 <STTS22H_Init+0x6c>
    }

    /* Enable Automatic Address Increment */
    if (stts22h_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	3320      	adds	r3, #32
 80093f2:	2101      	movs	r1, #1
 80093f4:	4618      	mov	r0, r3
 80093f6:	f000 fbfa 	bl	8009bee <stts22h_auto_increment_set>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <STTS22H_Init+0x4a>
    {
      return STTS22H_ERROR;
 8009400:	f04f 33ff 	mov.w	r3, #4294967295
 8009404:	e010      	b.n	8009428 <STTS22H_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	3320      	adds	r3, #32
 800940a:	2100      	movs	r1, #0
 800940c:	4618      	mov	r0, r3
 800940e:	f000 fa9d 	bl	800994c <stts22h_temp_data_rate_set>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <STTS22H_Init+0x62>
    {
      return STTS22H_ERROR;
 8009418:	f04f 33ff 	mov.w	r3, #4294967295
 800941c:	e004      	b.n	8009428 <STTS22H_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2201      	movs	r2, #1
 8009422:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <STTS22H_DeInit>:
  * @brief  Deinitialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_DeInit(STTS22H_Object_t *pObj)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800943e:	2b01      	cmp	r3, #1
 8009440:	d108      	bne.n	8009454 <STTS22H_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS22H_TEMP_Disable(pObj) != STTS22H_OK)
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f878 	bl	8009538 <STTS22H_TEMP_Disable>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d002      	beq.n	8009454 <STTS22H_DeInit+0x24>
    {
      return STTS22H_ERROR;
 800944e:	f04f 33ff 	mov.w	r3, #4294967295
 8009452:	e004      	b.n	800945e <STTS22H_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <STTS22H_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_ReadID(STTS22H_Object_t *pObj, uint8_t *Id)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b084      	sub	sp, #16
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	6039      	str	r1, [r7, #0]
  uint8_t buf;

  if (stts22h_dev_id_get(&(pObj->Ctx), &buf) != STTS22H_OK)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	3320      	adds	r3, #32
 8009474:	f107 020f 	add.w	r2, r7, #15
 8009478:	4611      	mov	r1, r2
 800947a:	4618      	mov	r0, r3
 800947c:	f000 fba6 	bl	8009bcc <stts22h_dev_id_get>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d002      	beq.n	800948c <STTS22H_ReadID+0x26>
  {
    return STTS22H_ERROR;
 8009486:	f04f 33ff 	mov.w	r3, #4294967295
 800948a:	e003      	b.n	8009494 <STTS22H_ReadID+0x2e>
  }

  *Id = buf;
 800948c:	7bfa      	ldrb	r2, [r7, #15]
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	701a      	strb	r2, [r3, #0]

  return STTS22H_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <STTS22H_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS22H sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_GetCapabilities(STTS22H_Object_t *pObj, STTS22H_Capabilities_t *Capabilities)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	2200      	movs	r2, #0
 80094aa:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	2200      	movs	r2, #0
 80094b0:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	2201      	movs	r2, #1
 80094b6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	2200      	movs	r2, #0
 80094bc:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2200      	movs	r2, #0
 80094c2:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	f04f 0200 	mov.w	r2, #0
 80094ca:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	4a08      	ldr	r2, [pc, #32]	@ (80094f0 <STTS22H_GetCapabilities+0x54>)
 80094d0:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	f04f 0200 	mov.w	r2, #0
 80094d8:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	f04f 0200 	mov.w	r2, #0
 80094e0:	615a      	str	r2, [r3, #20]
  return STTS22H_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	43480000 	.word	0x43480000

080094f4 <STTS22H_TEMP_Enable>:
  * @brief  Enable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Enable(STTS22H_Object_t *pObj)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009502:	2b01      	cmp	r3, #1
 8009504:	d101      	bne.n	800950a <STTS22H_TEMP_Enable+0x16>
  {
    return STTS22H_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	e012      	b.n	8009530 <STTS22H_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS22H_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS22H_OK)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8009510:	eeb0 0a67 	vmov.f32	s0, s15
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 f8e9 	bl	80096ec <STTS22H_TEMP_SetOutputDataRate>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <STTS22H_TEMP_Enable+0x32>
  {
    return STTS22H_ERROR;
 8009520:	f04f 33ff 	mov.w	r3, #4294967295
 8009524:	e004      	b.n	8009530 <STTS22H_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <STTS22H_TEMP_Disable>:
  * @brief  Disable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Disable(STTS22H_Object_t *pObj)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009546:	2b00      	cmp	r3, #0
 8009548:	d101      	bne.n	800954e <STTS22H_TEMP_Disable+0x16>
  {
    return STTS22H_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	e01c      	b.n	8009588 <STTS22H_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS22H_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS22H_OK)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	3334      	adds	r3, #52	@ 0x34
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f81b 	bl	8009590 <STTS22H_TEMP_GetOutputDataRate>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d002      	beq.n	8009566 <STTS22H_TEMP_Disable+0x2e>
  {
    return STTS22H_ERROR;
 8009560:	f04f 33ff 	mov.w	r3, #4294967295
 8009564:	e010      	b.n	8009588 <STTS22H_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	3320      	adds	r3, #32
 800956a:	2100      	movs	r1, #0
 800956c:	4618      	mov	r0, r3
 800956e:	f000 f9ed 	bl	800994c <stts22h_temp_data_rate_set>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d002      	beq.n	800957e <STTS22H_TEMP_Disable+0x46>
  {
    return STTS22H_ERROR;
 8009578:	f04f 33ff 	mov.w	r3, #4294967295
 800957c:	e004      	b.n	8009588 <STTS22H_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <STTS22H_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetOutputDataRate(STTS22H_Object_t *pObj, float *Odr)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS22H_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	60fb      	str	r3, [r7, #12]
  stts22h_odr_temp_t odr_low_level;

  if (stts22h_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS22H_OK)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	3320      	adds	r3, #32
 80095a2:	f107 020b 	add.w	r2, r7, #11
 80095a6:	4611      	mov	r1, r2
 80095a8:	4618      	mov	r0, r3
 80095aa:	f000 fa11 	bl	80099d0 <stts22h_temp_data_rate_get>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d002      	beq.n	80095ba <STTS22H_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS22H_ERROR;
 80095b4:	f04f 33ff 	mov.w	r3, #4294967295
 80095b8:	e08b      	b.n	80096d2 <STTS22H_TEMP_GetOutputDataRate+0x142>
  }

  switch (odr_low_level)
 80095ba:	7afb      	ldrb	r3, [r7, #11]
 80095bc:	2b32      	cmp	r3, #50	@ 0x32
 80095be:	f200 8083 	bhi.w	80096c8 <STTS22H_TEMP_GetOutputDataRate+0x138>
 80095c2:	a201      	add	r2, pc, #4	@ (adr r2, 80095c8 <STTS22H_TEMP_GetOutputDataRate+0x38>)
 80095c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c8:	08009695 	.word	0x08009695
 80095cc:	08009695 	.word	0x08009695
 80095d0:	080096a9 	.word	0x080096a9
 80095d4:	080096c9 	.word	0x080096c9
 80095d8:	0800969f 	.word	0x0800969f
 80095dc:	080096c9 	.word	0x080096c9
 80095e0:	080096c9 	.word	0x080096c9
 80095e4:	080096c9 	.word	0x080096c9
 80095e8:	080096c9 	.word	0x080096c9
 80095ec:	080096c9 	.word	0x080096c9
 80095f0:	080096c9 	.word	0x080096c9
 80095f4:	080096c9 	.word	0x080096c9
 80095f8:	080096c9 	.word	0x080096c9
 80095fc:	080096c9 	.word	0x080096c9
 8009600:	080096c9 	.word	0x080096c9
 8009604:	080096c9 	.word	0x080096c9
 8009608:	080096c9 	.word	0x080096c9
 800960c:	080096c9 	.word	0x080096c9
 8009610:	080096b1 	.word	0x080096b1
 8009614:	080096c9 	.word	0x080096c9
 8009618:	080096c9 	.word	0x080096c9
 800961c:	080096c9 	.word	0x080096c9
 8009620:	080096c9 	.word	0x080096c9
 8009624:	080096c9 	.word	0x080096c9
 8009628:	080096c9 	.word	0x080096c9
 800962c:	080096c9 	.word	0x080096c9
 8009630:	080096c9 	.word	0x080096c9
 8009634:	080096c9 	.word	0x080096c9
 8009638:	080096c9 	.word	0x080096c9
 800963c:	080096c9 	.word	0x080096c9
 8009640:	080096c9 	.word	0x080096c9
 8009644:	080096c9 	.word	0x080096c9
 8009648:	080096c9 	.word	0x080096c9
 800964c:	080096c9 	.word	0x080096c9
 8009650:	080096b9 	.word	0x080096b9
 8009654:	080096c9 	.word	0x080096c9
 8009658:	080096c9 	.word	0x080096c9
 800965c:	080096c9 	.word	0x080096c9
 8009660:	080096c9 	.word	0x080096c9
 8009664:	080096c9 	.word	0x080096c9
 8009668:	080096c9 	.word	0x080096c9
 800966c:	080096c9 	.word	0x080096c9
 8009670:	080096c9 	.word	0x080096c9
 8009674:	080096c9 	.word	0x080096c9
 8009678:	080096c9 	.word	0x080096c9
 800967c:	080096c9 	.word	0x080096c9
 8009680:	080096c9 	.word	0x080096c9
 8009684:	080096c9 	.word	0x080096c9
 8009688:	080096c9 	.word	0x080096c9
 800968c:	080096c9 	.word	0x080096c9
 8009690:	080096c1 	.word	0x080096c1
  {
    case STTS22H_POWER_DOWN:
    case STTS22H_ONE_SHOT:
      *Odr = 0.0f;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	f04f 0200 	mov.w	r2, #0
 800969a:	601a      	str	r2, [r3, #0]
      break;
 800969c:	e018      	b.n	80096d0 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_1Hz:
      *Odr = 1.0f;
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80096a4:	601a      	str	r2, [r3, #0]
      break;
 80096a6:	e013      	b.n	80096d0 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_25Hz:
      *Odr = 25.0f;
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	4a0c      	ldr	r2, [pc, #48]	@ (80096dc <STTS22H_TEMP_GetOutputDataRate+0x14c>)
 80096ac:	601a      	str	r2, [r3, #0]
      break;
 80096ae:	e00f      	b.n	80096d0 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_50Hz:
      *Odr = 50.0f;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	4a0b      	ldr	r2, [pc, #44]	@ (80096e0 <STTS22H_TEMP_GetOutputDataRate+0x150>)
 80096b4:	601a      	str	r2, [r3, #0]
      break;
 80096b6:	e00b      	b.n	80096d0 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_100Hz:
      *Odr = 100.0f;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	4a0a      	ldr	r2, [pc, #40]	@ (80096e4 <STTS22H_TEMP_GetOutputDataRate+0x154>)
 80096bc:	601a      	str	r2, [r3, #0]
      break;
 80096be:	e007      	b.n	80096d0 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_200Hz:
      *Odr = 200.0f;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	4a09      	ldr	r2, [pc, #36]	@ (80096e8 <STTS22H_TEMP_GetOutputDataRate+0x158>)
 80096c4:	601a      	str	r2, [r3, #0]
      break;
 80096c6:	e003      	b.n	80096d0 <STTS22H_TEMP_GetOutputDataRate+0x140>

    default:
      ret = STTS22H_ERROR;
 80096c8:	f04f 33ff 	mov.w	r3, #4294967295
 80096cc:	60fb      	str	r3, [r7, #12]
      break;
 80096ce:	bf00      	nop
  }

  return ret;
 80096d0:	68fb      	ldr	r3, [r7, #12]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	41c80000 	.word	0x41c80000
 80096e0:	42480000 	.word	0x42480000
 80096e4:	42c80000 	.word	0x42c80000
 80096e8:	43480000 	.word	0x43480000

080096ec <STTS22H_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_SetOutputDataRate(STTS22H_Object_t *pObj, float Odr)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	ed87 0a00 	vstr	s0, [r7]
  stts22h_odr_temp_t new_odr;

  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
            : (Odr <= 25.0f) ? STTS22H_25Hz
 80096f8:	edd7 7a00 	vldr	s15, [r7]
 80096fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009708:	d801      	bhi.n	800970e <STTS22H_TEMP_SetOutputDataRate+0x22>
 800970a:	2304      	movs	r3, #4
 800970c:	e021      	b.n	8009752 <STTS22H_TEMP_SetOutputDataRate+0x66>
 800970e:	edd7 7a00 	vldr	s15, [r7]
 8009712:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8009716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800971a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800971e:	d801      	bhi.n	8009724 <STTS22H_TEMP_SetOutputDataRate+0x38>
 8009720:	2302      	movs	r3, #2
 8009722:	e016      	b.n	8009752 <STTS22H_TEMP_SetOutputDataRate+0x66>
 8009724:	edd7 7a00 	vldr	s15, [r7]
 8009728:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8009778 <STTS22H_TEMP_SetOutputDataRate+0x8c>
 800972c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009734:	d801      	bhi.n	800973a <STTS22H_TEMP_SetOutputDataRate+0x4e>
 8009736:	2312      	movs	r3, #18
 8009738:	e00b      	b.n	8009752 <STTS22H_TEMP_SetOutputDataRate+0x66>
 800973a:	edd7 7a00 	vldr	s15, [r7]
 800973e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800977c <STTS22H_TEMP_SetOutputDataRate+0x90>
 8009742:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800974a:	d801      	bhi.n	8009750 <STTS22H_TEMP_SetOutputDataRate+0x64>
 800974c:	2322      	movs	r3, #34	@ 0x22
 800974e:	e000      	b.n	8009752 <STTS22H_TEMP_SetOutputDataRate+0x66>
 8009750:	2332      	movs	r3, #50	@ 0x32
  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
 8009752:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.0f) ? STTS22H_50Hz
            : (Odr <= 100.0f) ? STTS22H_100Hz
            :                    STTS22H_200Hz;

  if (stts22h_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS22H_OK)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	3320      	adds	r3, #32
 8009758:	7bfa      	ldrb	r2, [r7, #15]
 800975a:	4611      	mov	r1, r2
 800975c:	4618      	mov	r0, r3
 800975e:	f000 f8f5 	bl	800994c <stts22h_temp_data_rate_set>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d002      	beq.n	800976e <STTS22H_TEMP_SetOutputDataRate+0x82>
  {
    return STTS22H_ERROR;
 8009768:	f04f 33ff 	mov.w	r3, #4294967295
 800976c:	e000      	b.n	8009770 <STTS22H_TEMP_SetOutputDataRate+0x84>
  }

  return STTS22H_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3710      	adds	r7, #16
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	42480000 	.word	0x42480000
 800977c:	42c80000 	.word	0x42c80000

08009780 <STTS22H_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetTemperature(STTS22H_Object_t *pObj, float *Value)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts22h_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS22H_OK)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	3320      	adds	r3, #32
 800978e:	f107 020e 	add.w	r2, r7, #14
 8009792:	4611      	mov	r1, r2
 8009794:	4618      	mov	r0, r3
 8009796:	f000 f9f7 	bl	8009b88 <stts22h_temperature_raw_get>
 800979a:	4603      	mov	r3, r0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d002      	beq.n	80097a6 <STTS22H_TEMP_GetTemperature+0x26>
  {
    return STTS22H_ERROR;
 80097a0:	f04f 33ff 	mov.w	r3, #4294967295
 80097a4:	e00a      	b.n	80097bc <STTS22H_TEMP_GetTemperature+0x3c>
  }

  *Value = stts22h_from_lsb_to_celsius(raw_value);
 80097a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 f8b4 	bl	8009918 <stts22h_from_lsb_to_celsius>
 80097b0:	eef0 7a40 	vmov.f32	s15, s0
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	edc3 7a00 	vstr	s15, [r3]

  return STTS22H_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80097c4:	b590      	push	{r4, r7, lr}
 80097c6:	b089      	sub	sp, #36	@ 0x24
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	607a      	str	r2, [r7, #4]
 80097ce:	461a      	mov	r2, r3
 80097d0:	460b      	mov	r3, r1
 80097d2:	72fb      	strb	r3, [r7, #11]
 80097d4:	4613      	mov	r3, r2
 80097d6:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 80097d8:	2300      	movs	r3, #0
 80097da:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d11f      	bne.n	8009828 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 80097e8:	2300      	movs	r3, #0
 80097ea:	83fb      	strh	r3, [r7, #30]
 80097ec:	e018      	b.n	8009820 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	695c      	ldr	r4, [r3, #20]
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	7b1b      	ldrb	r3, [r3, #12]
 80097f6:	4618      	mov	r0, r3
 80097f8:	7afb      	ldrb	r3, [r7, #11]
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	8bfb      	ldrh	r3, [r7, #30]
 80097fe:	4413      	add	r3, r2
 8009800:	b299      	uxth	r1, r3
 8009802:	8bfb      	ldrh	r3, [r7, #30]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	441a      	add	r2, r3
 8009808:	2301      	movs	r3, #1
 800980a:	47a0      	blx	r4
 800980c:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d002      	beq.n	800981a <ReadRegWrap+0x56>
      {
        return STTS22H_ERROR;
 8009814:	f04f 33ff 	mov.w	r3, #4294967295
 8009818:	e007      	b.n	800982a <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800981a:	8bfb      	ldrh	r3, [r7, #30]
 800981c:	3301      	adds	r3, #1
 800981e:	83fb      	strh	r3, [r7, #30]
 8009820:	8bfa      	ldrh	r2, [r7, #30]
 8009822:	893b      	ldrh	r3, [r7, #8]
 8009824:	429a      	cmp	r2, r3
 8009826:	d3e2      	bcc.n	80097ee <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 8009828:	69bb      	ldr	r3, [r7, #24]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3724      	adds	r7, #36	@ 0x24
 800982e:	46bd      	mov	sp, r7
 8009830:	bd90      	pop	{r4, r7, pc}

08009832 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009832:	b590      	push	{r4, r7, lr}
 8009834:	b089      	sub	sp, #36	@ 0x24
 8009836:	af00      	add	r7, sp, #0
 8009838:	60f8      	str	r0, [r7, #12]
 800983a:	607a      	str	r2, [r7, #4]
 800983c:	461a      	mov	r2, r3
 800983e:	460b      	mov	r3, r1
 8009840:	72fb      	strb	r3, [r7, #11]
 8009842:	4613      	mov	r3, r2
 8009844:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d11f      	bne.n	8009896 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 8009856:	2300      	movs	r3, #0
 8009858:	83fb      	strh	r3, [r7, #30]
 800985a:	e018      	b.n	800988e <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	691c      	ldr	r4, [r3, #16]
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	7b1b      	ldrb	r3, [r3, #12]
 8009864:	4618      	mov	r0, r3
 8009866:	7afb      	ldrb	r3, [r7, #11]
 8009868:	b29a      	uxth	r2, r3
 800986a:	8bfb      	ldrh	r3, [r7, #30]
 800986c:	4413      	add	r3, r2
 800986e:	b299      	uxth	r1, r3
 8009870:	8bfb      	ldrh	r3, [r7, #30]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	441a      	add	r2, r3
 8009876:	2301      	movs	r3, #1
 8009878:	47a0      	blx	r4
 800987a:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800987c:	69bb      	ldr	r3, [r7, #24]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d002      	beq.n	8009888 <WriteRegWrap+0x56>
      {
        return STTS22H_ERROR;
 8009882:	f04f 33ff 	mov.w	r3, #4294967295
 8009886:	e007      	b.n	8009898 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 8009888:	8bfb      	ldrh	r3, [r7, #30]
 800988a:	3301      	adds	r3, #1
 800988c:	83fb      	strh	r3, [r7, #30]
 800988e:	8bfa      	ldrh	r2, [r7, #30]
 8009890:	893b      	ldrh	r3, [r7, #8]
 8009892:	429a      	cmp	r2, r3
 8009894:	d3e2      	bcc.n	800985c <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 8009896:	69bb      	ldr	r3, [r7, #24]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3724      	adds	r7, #36	@ 0x24
 800989c:	46bd      	mov	sp, r7
 800989e:	bd90      	pop	{r4, r7, pc}

080098a0 <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80098a0:	b590      	push	{r4, r7, lr}
 80098a2:	b087      	sub	sp, #28
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	607a      	str	r2, [r7, #4]
 80098aa:	461a      	mov	r2, r3
 80098ac:	460b      	mov	r3, r1
 80098ae:	72fb      	strb	r3, [r7, #11]
 80098b0:	4613      	mov	r3, r2
 80098b2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d102      	bne.n	80098c0 <stts22h_read_reg+0x20>
 80098ba:	f04f 33ff 	mov.w	r3, #4294967295
 80098be:	e009      	b.n	80098d4 <stts22h_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	685c      	ldr	r4, [r3, #4]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	68d8      	ldr	r0, [r3, #12]
 80098c8:	893b      	ldrh	r3, [r7, #8]
 80098ca:	7af9      	ldrb	r1, [r7, #11]
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	47a0      	blx	r4
 80098d0:	6178      	str	r0, [r7, #20]

  return ret;
 80098d2:	697b      	ldr	r3, [r7, #20]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	371c      	adds	r7, #28
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd90      	pop	{r4, r7, pc}

080098dc <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80098dc:	b590      	push	{r4, r7, lr}
 80098de:	b087      	sub	sp, #28
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	607a      	str	r2, [r7, #4]
 80098e6:	461a      	mov	r2, r3
 80098e8:	460b      	mov	r3, r1
 80098ea:	72fb      	strb	r3, [r7, #11]
 80098ec:	4613      	mov	r3, r2
 80098ee:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d102      	bne.n	80098fc <stts22h_write_reg+0x20>
 80098f6:	f04f 33ff 	mov.w	r3, #4294967295
 80098fa:	e009      	b.n	8009910 <stts22h_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681c      	ldr	r4, [r3, #0]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	68d8      	ldr	r0, [r3, #12]
 8009904:	893b      	ldrh	r3, [r7, #8]
 8009906:	7af9      	ldrb	r1, [r7, #11]
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	47a0      	blx	r4
 800990c:	6178      	str	r0, [r7, #20]

  return ret;
 800990e:	697b      	ldr	r3, [r7, #20]
}
 8009910:	4618      	mov	r0, r3
 8009912:	371c      	adds	r7, #28
 8009914:	46bd      	mov	sp, r7
 8009916:	bd90      	pop	{r4, r7, pc}

08009918 <stts22h_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts22h_from_lsb_to_celsius(int16_t lsb)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	4603      	mov	r3, r0
 8009920:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 8009922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009926:	ee07 3a90 	vmov	s15, r3
 800992a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800992e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8009948 <stts22h_from_lsb_to_celsius+0x30>
 8009932:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009936:	eef0 7a66 	vmov.f32	s15, s13
}
 800993a:	eeb0 0a67 	vmov.f32	s0, s15
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	42c80000 	.word	0x42c80000

0800994c <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(const stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t val)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	460b      	mov	r3, r1
 8009956:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8009958:	f107 0208 	add.w	r2, r7, #8
 800995c:	2301      	movs	r3, #1
 800995e:	2104      	movs	r1, #4
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f7ff ff9d 	bl	80098a0 <stts22h_read_reg>
 8009966:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d12a      	bne.n	80099c4 <stts22h_temp_data_rate_set+0x78>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 800996e:	78fb      	ldrb	r3, [r7, #3]
 8009970:	f003 0301 	and.w	r3, r3, #1
 8009974:	b2da      	uxtb	r2, r3
 8009976:	7a3b      	ldrb	r3, [r7, #8]
 8009978:	f362 0300 	bfi	r3, r2, #0, #1
 800997c:	723b      	strb	r3, [r7, #8]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 800997e:	78fb      	ldrb	r3, [r7, #3]
 8009980:	085b      	lsrs	r3, r3, #1
 8009982:	f003 0301 	and.w	r3, r3, #1
 8009986:	b2da      	uxtb	r2, r3
 8009988:	7a3b      	ldrb	r3, [r7, #8]
 800998a:	f362 0382 	bfi	r3, r2, #2, #1
 800998e:	723b      	strb	r3, [r7, #8]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	089b      	lsrs	r3, r3, #2
 8009994:	f003 0301 	and.w	r3, r3, #1
 8009998:	b2da      	uxtb	r2, r3
 800999a:	7a3b      	ldrb	r3, [r7, #8]
 800999c:	f362 13c7 	bfi	r3, r2, #7, #1
 80099a0:	723b      	strb	r3, [r7, #8]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 80099a2:	78fb      	ldrb	r3, [r7, #3]
 80099a4:	091b      	lsrs	r3, r3, #4
 80099a6:	f003 0303 	and.w	r3, r3, #3
 80099aa:	b2da      	uxtb	r2, r3
 80099ac:	7a3b      	ldrb	r3, [r7, #8]
 80099ae:	f362 1305 	bfi	r3, r2, #4, #2
 80099b2:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 80099b4:	f107 0208 	add.w	r2, r7, #8
 80099b8:	2301      	movs	r3, #1
 80099ba:	2104      	movs	r1, #4
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f7ff ff8d 	bl	80098dc <stts22h_write_reg>
 80099c2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80099c4:	68fb      	ldr	r3, [r7, #12]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
	...

080099d0 <stts22h_temp_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_get(const stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t *val)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL,
 80099da:	f107 0208 	add.w	r2, r7, #8
 80099de:	2301      	movs	r3, #1
 80099e0:	2104      	movs	r1, #4
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7ff ff5c 	bl	80098a0 <stts22h_read_reg>
 80099e8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl, 1);

  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 80099ea:	7a3b      	ldrb	r3, [r7, #8]
 80099ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	461a      	mov	r2, r3
 80099f4:	7a3b      	ldrb	r3, [r7, #8]
 80099f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	005b      	lsls	r3, r3, #1
 80099fe:	431a      	orrs	r2, r3
 8009a00:	7a3b      	ldrb	r3, [r7, #8]
 8009a02:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	431a      	orrs	r2, r3
                                                 2) |
          (ctrl.avg << 4))
 8009a0c:	7a3b      	ldrb	r3, [r7, #8]
 8009a0e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	011b      	lsls	r3, r3, #4
                                                 2) |
 8009a16:	4313      	orrs	r3, r2
  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 8009a18:	2b32      	cmp	r3, #50	@ 0x32
 8009a1a:	f200 8085 	bhi.w	8009b28 <stts22h_temp_data_rate_get+0x158>
 8009a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a24 <stts22h_temp_data_rate_get+0x54>)
 8009a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a24:	08009af1 	.word	0x08009af1
 8009a28:	08009af9 	.word	0x08009af9
 8009a2c:	08009b09 	.word	0x08009b09
 8009a30:	08009b29 	.word	0x08009b29
 8009a34:	08009b01 	.word	0x08009b01
 8009a38:	08009b29 	.word	0x08009b29
 8009a3c:	08009b29 	.word	0x08009b29
 8009a40:	08009b29 	.word	0x08009b29
 8009a44:	08009b29 	.word	0x08009b29
 8009a48:	08009b29 	.word	0x08009b29
 8009a4c:	08009b29 	.word	0x08009b29
 8009a50:	08009b29 	.word	0x08009b29
 8009a54:	08009b29 	.word	0x08009b29
 8009a58:	08009b29 	.word	0x08009b29
 8009a5c:	08009b29 	.word	0x08009b29
 8009a60:	08009b29 	.word	0x08009b29
 8009a64:	08009b29 	.word	0x08009b29
 8009a68:	08009b29 	.word	0x08009b29
 8009a6c:	08009b11 	.word	0x08009b11
 8009a70:	08009b29 	.word	0x08009b29
 8009a74:	08009b29 	.word	0x08009b29
 8009a78:	08009b29 	.word	0x08009b29
 8009a7c:	08009b29 	.word	0x08009b29
 8009a80:	08009b29 	.word	0x08009b29
 8009a84:	08009b29 	.word	0x08009b29
 8009a88:	08009b29 	.word	0x08009b29
 8009a8c:	08009b29 	.word	0x08009b29
 8009a90:	08009b29 	.word	0x08009b29
 8009a94:	08009b29 	.word	0x08009b29
 8009a98:	08009b29 	.word	0x08009b29
 8009a9c:	08009b29 	.word	0x08009b29
 8009aa0:	08009b29 	.word	0x08009b29
 8009aa4:	08009b29 	.word	0x08009b29
 8009aa8:	08009b29 	.word	0x08009b29
 8009aac:	08009b19 	.word	0x08009b19
 8009ab0:	08009b29 	.word	0x08009b29
 8009ab4:	08009b29 	.word	0x08009b29
 8009ab8:	08009b29 	.word	0x08009b29
 8009abc:	08009b29 	.word	0x08009b29
 8009ac0:	08009b29 	.word	0x08009b29
 8009ac4:	08009b29 	.word	0x08009b29
 8009ac8:	08009b29 	.word	0x08009b29
 8009acc:	08009b29 	.word	0x08009b29
 8009ad0:	08009b29 	.word	0x08009b29
 8009ad4:	08009b29 	.word	0x08009b29
 8009ad8:	08009b29 	.word	0x08009b29
 8009adc:	08009b29 	.word	0x08009b29
 8009ae0:	08009b29 	.word	0x08009b29
 8009ae4:	08009b29 	.word	0x08009b29
 8009ae8:	08009b29 	.word	0x08009b29
 8009aec:	08009b21 	.word	0x08009b21
  {
    case STTS22H_POWER_DOWN:
      *val = STTS22H_POWER_DOWN;
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	2200      	movs	r2, #0
 8009af4:	701a      	strb	r2, [r3, #0]
      break;
 8009af6:	e01b      	b.n	8009b30 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_ONE_SHOT:
      *val = STTS22H_ONE_SHOT;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	2201      	movs	r2, #1
 8009afc:	701a      	strb	r2, [r3, #0]
      break;
 8009afe:	e017      	b.n	8009b30 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_1Hz:
      *val = STTS22H_1Hz;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	2204      	movs	r2, #4
 8009b04:	701a      	strb	r2, [r3, #0]
      break;
 8009b06:	e013      	b.n	8009b30 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_25Hz:
      *val = STTS22H_25Hz;
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	701a      	strb	r2, [r3, #0]
      break;
 8009b0e:	e00f      	b.n	8009b30 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_50Hz:
      *val = STTS22H_50Hz;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	2212      	movs	r2, #18
 8009b14:	701a      	strb	r2, [r3, #0]
      break;
 8009b16:	e00b      	b.n	8009b30 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_100Hz:
      *val = STTS22H_100Hz;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	2222      	movs	r2, #34	@ 0x22
 8009b1c:	701a      	strb	r2, [r3, #0]
      break;
 8009b1e:	e007      	b.n	8009b30 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_200Hz:
      *val = STTS22H_200Hz;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	2232      	movs	r2, #50	@ 0x32
 8009b24:	701a      	strb	r2, [r3, #0]
      break;
 8009b26:	e003      	b.n	8009b30 <stts22h_temp_data_rate_get+0x160>

    default:
      *val = STTS22H_POWER_DOWN;
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	701a      	strb	r2, [r3, #0]
      break;
 8009b2e:	bf00      	nop
  }

  return ret;
 8009b30:	68fb      	ldr	r3, [r7, #12]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop

08009b3c <stts22h_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	460b      	mov	r3, r1
 8009b46:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8009b48:	f107 0208 	add.w	r2, r7, #8
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	2104      	movs	r1, #4
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f7ff fea5 	bl	80098a0 <stts22h_read_reg>
 8009b56:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10f      	bne.n	8009b7e <stts22h_block_data_update_set+0x42>
  {
    ctrl.bdu = val;
 8009b5e:	78fb      	ldrb	r3, [r7, #3]
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	b2da      	uxtb	r2, r3
 8009b66:	7a3b      	ldrb	r3, [r7, #8]
 8009b68:	f362 1386 	bfi	r3, r2, #6, #1
 8009b6c:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8009b6e:	f107 0208 	add.w	r2, r7, #8
 8009b72:	2301      	movs	r3, #1
 8009b74:	2104      	movs	r1, #4
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7ff feb0 	bl	80098dc <stts22h_write_reg>
 8009b7c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_TEMP_L_OUT, buff, 2);
 8009b92:	f107 0208 	add.w	r2, r7, #8
 8009b96:	2302      	movs	r3, #2
 8009b98:	2106      	movs	r1, #6
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7ff fe80 	bl	80098a0 <stts22h_read_reg>
 8009ba0:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8009ba2:	7a7b      	ldrb	r3, [r7, #9]
 8009ba4:	b21a      	sxth	r2, r3
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	021b      	lsls	r3, r3, #8
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	7a3a      	ldrb	r2, [r7, #8]
 8009bb8:	4413      	add	r3, r2
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	b21a      	sxth	r2, r3
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	801a      	strh	r2, [r3, #0]

  return ret;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_WHOAMI, buff, 1);
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	2101      	movs	r1, #1
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7ff fe5f 	bl	80098a0 <stts22h_read_reg>
 8009be2:	60f8      	str	r0, [r7, #12]

  return ret;
 8009be4:	68fb      	ldr	r3, [r7, #12]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <stts22h_auto_increment_set>:
  * @param  val    Change the values of "if_add_inc" in reg STTS22H.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8009bfa:	f107 0208 	add.w	r2, r7, #8
 8009bfe:	2301      	movs	r3, #1
 8009c00:	2104      	movs	r1, #4
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff fe4c 	bl	80098a0 <stts22h_read_reg>
 8009c08:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10f      	bne.n	8009c30 <stts22h_auto_increment_set+0x42>
  {
    ctrl.if_add_inc = (uint8_t)val;
 8009c10:	78fb      	ldrb	r3, [r7, #3]
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	7a3b      	ldrb	r3, [r7, #8]
 8009c1a:	f362 03c3 	bfi	r3, r2, #3, #1
 8009c1e:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 8009c20:	f107 0208 	add.w	r2, r7, #8
 8009c24:	2301      	movs	r3, #1
 8009c26:	2104      	movs	r1, #4
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7ff fe57 	bl	80098dc <stts22h_write_reg>
 8009c2e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009c30:	68fb      	ldr	r3, [r7, #12]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
	...

08009c3c <IKS4A1_ENV_SENSOR_Init>:
  *         - ENV_PRESSURE
  *         - ENV_HUMIDITY
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b08c      	sub	sp, #48	@ 0x30
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8009c46:	2300      	movs	r3, #0
 8009c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	623b      	str	r3, [r7, #32]
  IKS4A1_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d07c      	beq.n	8009d52 <IKS4A1_ENV_SENSOR_Init+0x116>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	f200 80b2 	bhi.w	8009dc4 <IKS4A1_ENV_SENSOR_Init+0x188>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <IKS4A1_ENV_SENSOR_Init+0x32>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d039      	beq.n	8009ce0 <IKS4A1_ENV_SENSOR_Init+0xa4>
 8009c6c:	e0aa      	b.n	8009dc4 <IKS4A1_ENV_SENSOR_Init+0x188>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_STTS22H_0 == 1)
    case IKS4A1_STTS22H_0:
      if (STTS22H_0_Probe(Functions) != BSP_ERROR_NONE)
 8009c6e:	6838      	ldr	r0, [r7, #0]
 8009c70:	f000 f9ca 	bl	800a008 <STTS22H_0_Probe>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d002      	beq.n	8009c80 <IKS4A1_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8009c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c7e:	e0df      	b.n	8009e40 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009c80:	4a71      	ldr	r2, [pc, #452]	@ (8009e48 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	4970      	ldr	r1, [pc, #448]	@ (8009e4c <IKS4A1_ENV_SENSOR_Init+0x210>)
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009c92:	f107 0108 	add.w	r1, r7, #8
 8009c96:	4610      	mov	r0, r2
 8009c98:	4798      	blx	r3
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <IKS4A1_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009ca0:	f06f 0306 	mvn.w	r3, #6
 8009ca4:	e0cc      	b.n	8009e40 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8009ca6:	7a3b      	ldrb	r3, [r7, #8]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d103      	bne.n	8009cb4 <IKS4A1_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 8009cac:	6a3b      	ldr	r3, [r7, #32]
 8009cae:	f043 0301 	orr.w	r3, r3, #1
 8009cb2:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8009cb4:	7abb      	ldrb	r3, [r7, #10]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d103      	bne.n	8009cc2 <IKS4A1_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	f043 0304 	orr.w	r3, r3, #4
 8009cc0:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8009cc2:	7a7b      	ldrb	r3, [r7, #9]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d103      	bne.n	8009cd0 <IKS4A1_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 8009cc8:	6a3b      	ldr	r3, [r7, #32]
 8009cca:	f043 0302 	orr.w	r3, r3, #2
 8009cce:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8009cd0:	7afb      	ldrb	r3, [r7, #11]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d17a      	bne.n	8009dcc <IKS4A1_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 8009cd6:	6a3b      	ldr	r3, [r7, #32]
 8009cd8:	f043 0308 	orr.w	r3, r3, #8
 8009cdc:	623b      	str	r3, [r7, #32]
      }
      break;
 8009cde:	e075      	b.n	8009dcc <IKS4A1_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_LPS22DF_0 == 1)
    case IKS4A1_LPS22DF_0:
      if (LPS22DF_0_Probe(Functions) != BSP_ERROR_NONE)
 8009ce0:	6838      	ldr	r0, [r7, #0]
 8009ce2:	f000 fa47 	bl	800a174 <LPS22DF_0_Probe>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d002      	beq.n	8009cf2 <IKS4A1_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 8009cec:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf0:	e0a6      	b.n	8009e40 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009cf2:	4a55      	ldr	r2, [pc, #340]	@ (8009e48 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	4953      	ldr	r1, [pc, #332]	@ (8009e4c <IKS4A1_ENV_SENSOR_Init+0x210>)
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009d04:	f107 0108 	add.w	r1, r7, #8
 8009d08:	4610      	mov	r0, r2
 8009d0a:	4798      	blx	r3
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d002      	beq.n	8009d18 <IKS4A1_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009d12:	f06f 0306 	mvn.w	r3, #6
 8009d16:	e093      	b.n	8009e40 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8009d18:	7a3b      	ldrb	r3, [r7, #8]
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d103      	bne.n	8009d26 <IKS4A1_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 8009d1e:	6a3b      	ldr	r3, [r7, #32]
 8009d20:	f043 0301 	orr.w	r3, r3, #1
 8009d24:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8009d26:	7abb      	ldrb	r3, [r7, #10]
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d103      	bne.n	8009d34 <IKS4A1_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 8009d2c:	6a3b      	ldr	r3, [r7, #32]
 8009d2e:	f043 0304 	orr.w	r3, r3, #4
 8009d32:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8009d34:	7a7b      	ldrb	r3, [r7, #9]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d103      	bne.n	8009d42 <IKS4A1_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 8009d3a:	6a3b      	ldr	r3, [r7, #32]
 8009d3c:	f043 0302 	orr.w	r3, r3, #2
 8009d40:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8009d42:	7afb      	ldrb	r3, [r7, #11]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d143      	bne.n	8009dd0 <IKS4A1_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 8009d48:	6a3b      	ldr	r3, [r7, #32]
 8009d4a:	f043 0308 	orr.w	r3, r3, #8
 8009d4e:	623b      	str	r3, [r7, #32]
      }
      break;
 8009d50:	e03e      	b.n	8009dd0 <IKS4A1_ENV_SENSOR_Init+0x194>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_SHT40AD1B_0 == 1)
    case IKS4A1_SHT40AD1B_0:
      if (SHT40AD1B_0_Probe(Functions) != BSP_ERROR_NONE)
 8009d52:	6838      	ldr	r0, [r7, #0]
 8009d54:	f000 fade 	bl	800a314 <SHT40AD1B_0_Probe>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d002      	beq.n	8009d64 <IKS4A1_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 8009d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d62:	e06d      	b.n	8009e40 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009d64:	4a38      	ldr	r2, [pc, #224]	@ (8009e48 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	4937      	ldr	r1, [pc, #220]	@ (8009e4c <IKS4A1_ENV_SENSOR_Init+0x210>)
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009d76:	f107 0108 	add.w	r1, r7, #8
 8009d7a:	4610      	mov	r0, r2
 8009d7c:	4798      	blx	r3
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d002      	beq.n	8009d8a <IKS4A1_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009d84:	f06f 0306 	mvn.w	r3, #6
 8009d88:	e05a      	b.n	8009e40 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 8009d8a:	7a3b      	ldrb	r3, [r7, #8]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d103      	bne.n	8009d98 <IKS4A1_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	f043 0301 	orr.w	r3, r3, #1
 8009d96:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8009d98:	7abb      	ldrb	r3, [r7, #10]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d103      	bne.n	8009da6 <IKS4A1_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 8009d9e:	6a3b      	ldr	r3, [r7, #32]
 8009da0:	f043 0304 	orr.w	r3, r3, #4
 8009da4:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8009da6:	7a7b      	ldrb	r3, [r7, #9]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d103      	bne.n	8009db4 <IKS4A1_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 8009dac:	6a3b      	ldr	r3, [r7, #32]
 8009dae:	f043 0302 	orr.w	r3, r3, #2
 8009db2:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8009db4:	7afb      	ldrb	r3, [r7, #11]
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d10c      	bne.n	8009dd4 <IKS4A1_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 8009dba:	6a3b      	ldr	r3, [r7, #32]
 8009dbc:	f043 0308 	orr.w	r3, r3, #8
 8009dc0:	623b      	str	r3, [r7, #32]
      }
      break;
 8009dc2:	e007      	b.n	8009dd4 <IKS4A1_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8009dc4:	f06f 0301 	mvn.w	r3, #1
 8009dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8009dca:	e004      	b.n	8009dd6 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 8009dcc:	bf00      	nop
 8009dce:	e002      	b.n	8009dd6 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 8009dd0:	bf00      	nop
 8009dd2:	e000      	b.n	8009dd6 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 8009dd4:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8009dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d001      	beq.n	8009de0 <IKS4A1_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 8009ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dde:	e02f      	b.n	8009e40 <IKS4A1_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 8009de0:	2300      	movs	r3, #0
 8009de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009de4:	e028      	b.n	8009e38 <IKS4A1_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dea:	4013      	ands	r3, r2
 8009dec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d11c      	bne.n	8009e2c <IKS4A1_ENV_SENSOR_Init+0x1f0>
 8009df2:	6a3a      	ldr	r2, [r7, #32]
 8009df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df6:	4013      	ands	r3, r2
 8009df8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d116      	bne.n	8009e2c <IKS4A1_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8009dfe:	4a14      	ldr	r2, [pc, #80]	@ (8009e50 <IKS4A1_ENV_SENSOR_Init+0x214>)
 8009e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e06:	4913      	ldr	r1, [pc, #76]	@ (8009e54 <IKS4A1_ENV_SENSOR_Init+0x218>)
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	0092      	lsls	r2, r2, #2
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	490d      	ldr	r1, [pc, #52]	@ (8009e4c <IKS4A1_ENV_SENSOR_Init+0x210>)
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	4798      	blx	r3
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d002      	beq.n	8009e2c <IKS4A1_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8009e26:	f06f 0304 	mvn.w	r3, #4
 8009e2a:	e009      	b.n	8009e40 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
    }
    function = function << 1;
 8009e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e2e:	005b      	lsls	r3, r3, #1
 8009e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 8009e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e34:	3301      	adds	r3, #1
 8009e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3a:	2b03      	cmp	r3, #3
 8009e3c:	d9d3      	bls.n	8009de6 <IKS4A1_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 8009e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3730      	adds	r7, #48	@ 0x30
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	20000450 	.word	0x20000450
 8009e4c:	20000414 	.word	0x20000414
 8009e50:	200001b0 	.word	0x200001b0
 8009e54:	20000420 	.word	0x20000420

08009e58 <IKS4A1_ENV_SENSOR_GetCapabilities>:
  * @param  Instance Environmental sensor instance
  * @param  Capabilities pointer to Environmental sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_ENV_SENSOR_Capabilities_t *Capabilities)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	d903      	bls.n	8009e70 <IKS4A1_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009e68:	f06f 0301 	mvn.w	r3, #1
 8009e6c:	60fb      	str	r3, [r7, #12]
 8009e6e:	e014      	b.n	8009e9a <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 8009e70:	4a0c      	ldr	r2, [pc, #48]	@ (8009ea4 <IKS4A1_ENV_SENSOR_GetCapabilities+0x4c>)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	490b      	ldr	r1, [pc, #44]	@ (8009ea8 <IKS4A1_ENV_SENSOR_GetCapabilities+0x50>)
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009e82:	6839      	ldr	r1, [r7, #0]
 8009e84:	4610      	mov	r0, r2
 8009e86:	4798      	blx	r3
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d003      	beq.n	8009e96 <IKS4A1_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009e8e:	f06f 0306 	mvn.w	r3, #6
 8009e92:	60fb      	str	r3, [r7, #12]
 8009e94:	e001      	b.n	8009e9a <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8009e96:	2300      	movs	r3, #0
 8009e98:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	20000450 	.word	0x20000450
 8009ea8:	20000414 	.word	0x20000414

08009eac <IKS4A1_ENV_SENSOR_ReadID>:
  * @param  Instance environmental sensor instance to be used
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d903      	bls.n	8009ec4 <IKS4A1_ENV_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009ebc:	f06f 0301 	mvn.w	r3, #1
 8009ec0:	60fb      	str	r3, [r7, #12]
 8009ec2:	e014      	b.n	8009eee <IKS4A1_ENV_SENSOR_ReadID+0x42>
  }
  else if (EnvDrv[Instance]->ReadID(EnvCompObj[Instance], Id) != BSP_ERROR_NONE)
 8009ec4:	4a0c      	ldr	r2, [pc, #48]	@ (8009ef8 <IKS4A1_ENV_SENSOR_ReadID+0x4c>)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	490b      	ldr	r1, [pc, #44]	@ (8009efc <IKS4A1_ENV_SENSOR_ReadID+0x50>)
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009ed6:	6839      	ldr	r1, [r7, #0]
 8009ed8:	4610      	mov	r0, r2
 8009eda:	4798      	blx	r3
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d003      	beq.n	8009eea <IKS4A1_ENV_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009ee2:	f06f 0306 	mvn.w	r3, #6
 8009ee6:	60fb      	str	r3, [r7, #12]
 8009ee8:	e001      	b.n	8009eee <IKS4A1_ENV_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8009eea:	2300      	movs	r3, #0
 8009eec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009eee:	68fb      	ldr	r3, [r7, #12]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	20000450 	.word	0x20000450
 8009efc:	20000414 	.word	0x20000414

08009f00 <IKS4A1_ENV_SENSOR_GetOutputDataRate>:
  *         - ENV_HUMIDITY
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d903      	bls.n	8009f1a <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009f12:	f06f 0301 	mvn.w	r3, #1
 8009f16:	617b      	str	r3, [r7, #20]
 8009f18:	e027      	b.n	8009f6a <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8009f1a:	4a16      	ldr	r2, [pc, #88]	@ (8009f74 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x74>)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	4013      	ands	r3, r2
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d11b      	bne.n	8009f64 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8009f2c:	4a12      	ldr	r2, [pc, #72]	@ (8009f78 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x78>)
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f34:	4911      	ldr	r1, [pc, #68]	@ (8009f7c <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x7c>)
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	0092      	lsls	r2, r2, #2
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	490f      	ldr	r1, [pc, #60]	@ (8009f80 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x80>)
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009f4a:	6879      	ldr	r1, [r7, #4]
 8009f4c:	4610      	mov	r0, r2
 8009f4e:	4798      	blx	r3
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d003      	beq.n	8009f5e <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009f56:	f06f 0304 	mvn.w	r3, #4
 8009f5a:	617b      	str	r3, [r7, #20]
 8009f5c:	e005      	b.n	8009f6a <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	617b      	str	r3, [r7, #20]
 8009f62:	e002      	b.n	8009f6a <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009f64:	f06f 0301 	mvn.w	r3, #1
 8009f68:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009f6a:	697b      	ldr	r3, [r7, #20]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3718      	adds	r7, #24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	2000045c 	.word	0x2000045c
 8009f78:	200001b0 	.word	0x200001b0
 8009f7c:	20000420 	.word	0x20000420
 8009f80:	20000414 	.word	0x20000414

08009f84 <IKS4A1_ENV_SENSOR_GetValue>:
  *         - ENV_HUMIDITY
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float_t *Value)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	d903      	bls.n	8009f9e <IKS4A1_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009f96:	f06f 0301 	mvn.w	r3, #1
 8009f9a:	617b      	str	r3, [r7, #20]
 8009f9c:	e027      	b.n	8009fee <IKS4A1_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8009f9e:	4a16      	ldr	r2, [pc, #88]	@ (8009ff8 <IKS4A1_ENV_SENSOR_GetValue+0x74>)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	4013      	ands	r3, r2
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d11b      	bne.n	8009fe8 <IKS4A1_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8009fb0:	4a12      	ldr	r2, [pc, #72]	@ (8009ffc <IKS4A1_ENV_SENSOR_GetValue+0x78>)
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fb8:	4911      	ldr	r1, [pc, #68]	@ (800a000 <IKS4A1_ENV_SENSOR_GetValue+0x7c>)
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	0092      	lsls	r2, r2, #2
 8009fbe:	4413      	add	r3, r2
 8009fc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	490f      	ldr	r1, [pc, #60]	@ (800a004 <IKS4A1_ENV_SENSOR_GetValue+0x80>)
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8009fce:	6879      	ldr	r1, [r7, #4]
 8009fd0:	4610      	mov	r0, r2
 8009fd2:	4798      	blx	r3
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d003      	beq.n	8009fe2 <IKS4A1_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009fda:	f06f 0304 	mvn.w	r3, #4
 8009fde:	617b      	str	r3, [r7, #20]
 8009fe0:	e005      	b.n	8009fee <IKS4A1_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	617b      	str	r3, [r7, #20]
 8009fe6:	e002      	b.n	8009fee <IKS4A1_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009fe8:	f06f 0301 	mvn.w	r3, #1
 8009fec:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009fee:	697b      	ldr	r3, [r7, #20]
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3718      	adds	r7, #24
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}
 8009ff8:	2000045c 	.word	0x2000045c
 8009ffc:	200001b0 	.word	0x200001b0
 800a000:	20000420 	.word	0x20000420
 800a004:	20000414 	.word	0x20000414

0800a008 <STTS22H_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS22H_0_Probe(uint32_t Functions)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b092      	sub	sp, #72	@ 0x48
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  STTS22H_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800a010:	2300      	movs	r3, #0
 800a012:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS22H_Object_t stts22h_obj_0;
  STTS22H_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = STTS22H_I2C_BUS; /* I2C */
 800a014:	2300      	movs	r3, #0
 800a016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS22H_I2C_ADD_H;
 800a018:	2371      	movs	r3, #113	@ 0x71
 800a01a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800a01e:	4b47      	ldr	r3, [pc, #284]	@ (800a13c <STTS22H_0_Probe+0x134>)
 800a020:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800a022:	4b47      	ldr	r3, [pc, #284]	@ (800a140 <STTS22H_0_Probe+0x138>)
 800a024:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800a026:	4b47      	ldr	r3, [pc, #284]	@ (800a144 <STTS22H_0_Probe+0x13c>)
 800a028:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800a02a:	4b47      	ldr	r3, [pc, #284]	@ (800a148 <STTS22H_0_Probe+0x140>)
 800a02c:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800a02e:	4b47      	ldr	r3, [pc, #284]	@ (800a14c <STTS22H_0_Probe+0x144>)
 800a030:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800a032:	4b47      	ldr	r3, [pc, #284]	@ (800a150 <STTS22H_0_Probe+0x148>)
 800a034:	643b      	str	r3, [r7, #64]	@ 0x40

  if (STTS22H_RegisterBusIO(&stts22h_obj_0, &io_ctx) != STTS22H_OK)
 800a036:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a03a:	4619      	mov	r1, r3
 800a03c:	4845      	ldr	r0, [pc, #276]	@ (800a154 <STTS22H_0_Probe+0x14c>)
 800a03e:	f7ff f973 	bl	8009328 <STTS22H_RegisterBusIO>
 800a042:	4603      	mov	r3, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d003      	beq.n	800a050 <STTS22H_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a048:	f06f 0306 	mvn.w	r3, #6
 800a04c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a04e:	e06f      	b.n	800a130 <STTS22H_0_Probe+0x128>
  }
  else if (STTS22H_ReadID(&stts22h_obj_0, &id) != STTS22H_OK)
 800a050:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800a054:	4619      	mov	r1, r3
 800a056:	483f      	ldr	r0, [pc, #252]	@ (800a154 <STTS22H_0_Probe+0x14c>)
 800a058:	f7ff fa05 	bl	8009466 <STTS22H_ReadID>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d003      	beq.n	800a06a <STTS22H_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a062:	f06f 0306 	mvn.w	r3, #6
 800a066:	647b      	str	r3, [r7, #68]	@ 0x44
 800a068:	e062      	b.n	800a130 <STTS22H_0_Probe+0x128>
  }
  else if (id != STTS22H_ID)
 800a06a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a06e:	2ba0      	cmp	r3, #160	@ 0xa0
 800a070:	d003      	beq.n	800a07a <STTS22H_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a072:	f06f 0306 	mvn.w	r3, #6
 800a076:	647b      	str	r3, [r7, #68]	@ 0x44
 800a078:	e05a      	b.n	800a130 <STTS22H_0_Probe+0x128>
  }
  else
  {
    (void)STTS22H_GetCapabilities(&stts22h_obj_0, &cap);
 800a07a:	f107 0308 	add.w	r3, r7, #8
 800a07e:	4619      	mov	r1, r3
 800a080:	4834      	ldr	r0, [pc, #208]	@ (800a154 <STTS22H_0_Probe+0x14c>)
 800a082:	f7ff fa0b 	bl	800949c <STTS22H_GetCapabilities>

    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800a086:	7a3b      	ldrb	r3, [r7, #8]
 800a088:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800a08a:	7a7b      	ldrb	r3, [r7, #9]
 800a08c:	005b      	lsls	r3, r3, #1
 800a08e:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800a090:	7abb      	ldrb	r3, [r7, #10]
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800a096:	7afb      	ldrb	r3, [r7, #11]
 800a098:	00db      	lsls	r3, r3, #3
 800a09a:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800a09c:	4a2e      	ldr	r2, [pc, #184]	@ (800a158 <STTS22H_0_Probe+0x150>)
 800a09e:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS4A1_STTS22H_0] = &stts22h_obj_0;
 800a0a0:	4b2e      	ldr	r3, [pc, #184]	@ (800a15c <STTS22H_0_Probe+0x154>)
 800a0a2:	4a2c      	ldr	r2, [pc, #176]	@ (800a154 <STTS22H_0_Probe+0x14c>)
 800a0a4:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_STTS22H_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS22H_COMMON_Driver;
 800a0a6:	4b2e      	ldr	r3, [pc, #184]	@ (800a160 <STTS22H_0_Probe+0x158>)
 800a0a8:	4a2e      	ldr	r2, [pc, #184]	@ (800a164 <STTS22H_0_Probe+0x15c>)
 800a0aa:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800a0ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d11d      	bne.n	800a0ee <STTS22H_0_Probe+0xe6>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f003 0301 	and.w	r3, r3, #1
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d018      	beq.n	800a0ee <STTS22H_0_Probe+0xe6>
 800a0bc:	7a3b      	ldrb	r3, [r7, #8]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d115      	bne.n	800a0ee <STTS22H_0_Probe+0xe6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_STTS22H_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS22H_TEMP_Driver;
 800a0c2:	4b29      	ldr	r3, [pc, #164]	@ (800a168 <STTS22H_0_Probe+0x160>)
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	4a29      	ldr	r2, [pc, #164]	@ (800a16c <STTS22H_0_Probe+0x164>)
 800a0c8:	4929      	ldr	r1, [pc, #164]	@ (800a170 <STTS22H_0_Probe+0x168>)
 800a0ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_STTS22H_0]->Init(EnvCompObj[IKS4A1_STTS22H_0]) != STTS22H_OK)
 800a0ce:	4b24      	ldr	r3, [pc, #144]	@ (800a160 <STTS22H_0_Probe+0x158>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a21      	ldr	r2, [pc, #132]	@ (800a15c <STTS22H_0_Probe+0x154>)
 800a0d6:	6812      	ldr	r2, [r2, #0]
 800a0d8:	4610      	mov	r0, r2
 800a0da:	4798      	blx	r3
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d003      	beq.n	800a0ea <STTS22H_0_Probe+0xe2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0e2:	f06f 0304 	mvn.w	r3, #4
 800a0e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0e8:	e001      	b.n	800a0ee <STTS22H_0_Probe+0xe6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800a0ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d107      	bne.n	800a104 <STTS22H_0_Probe+0xfc>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f003 0304 	and.w	r3, r3, #4
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d002      	beq.n	800a104 <STTS22H_0_Probe+0xfc>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a0fe:	f06f 0304 	mvn.w	r3, #4
 800a102:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800a104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a106:	2b00      	cmp	r3, #0
 800a108:	d107      	bne.n	800a11a <STTS22H_0_Probe+0x112>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f003 0302 	and.w	r3, r3, #2
 800a110:	2b00      	cmp	r3, #0
 800a112:	d002      	beq.n	800a11a <STTS22H_0_Probe+0x112>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a114:	f06f 0304 	mvn.w	r3, #4
 800a118:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800a11a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d107      	bne.n	800a130 <STTS22H_0_Probe+0x128>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f003 0308 	and.w	r3, r3, #8
 800a126:	2b00      	cmp	r3, #0
 800a128:	d002      	beq.n	800a130 <STTS22H_0_Probe+0x128>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a12a:	f06f 0304 	mvn.w	r3, #4
 800a12e:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800a130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800a132:	4618      	mov	r0, r3
 800a134:	3748      	adds	r7, #72	@ 0x48
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	08001425 	.word	0x08001425
 800a140:	08001489 	.word	0x08001489
 800a144:	0800153d 	.word	0x0800153d
 800a148:	080014d9 	.word	0x080014d9
 800a14c:	08001649 	.word	0x08001649
 800a150:	0800b3dd 	.word	0x0800b3dd
 800a154:	20000468 	.word	0x20000468
 800a158:	2000045c 	.word	0x2000045c
 800a15c:	20000414 	.word	0x20000414
 800a160:	20000450 	.word	0x20000450
 800a164:	2000018c 	.word	0x2000018c
 800a168:	200001b0 	.word	0x200001b0
 800a16c:	20000420 	.word	0x20000420
 800a170:	2000019c 	.word	0x2000019c

0800a174 <LPS22DF_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22DF_0_Probe(uint32_t Functions)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b092      	sub	sp, #72	@ 0x48
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  LPS22DF_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800a17c:	2300      	movs	r3, #0
 800a17e:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22DF_Object_t lps22df_obj_0;
  LPS22DF_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = LPS22DF_I2C_BUS; /* I2C */
 800a180:	2300      	movs	r3, #0
 800a182:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22DF_I2C_ADD_H;
 800a184:	23bb      	movs	r3, #187	@ 0xbb
 800a186:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800a18a:	4b53      	ldr	r3, [pc, #332]	@ (800a2d8 <LPS22DF_0_Probe+0x164>)
 800a18c:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800a18e:	4b53      	ldr	r3, [pc, #332]	@ (800a2dc <LPS22DF_0_Probe+0x168>)
 800a190:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800a192:	4b53      	ldr	r3, [pc, #332]	@ (800a2e0 <LPS22DF_0_Probe+0x16c>)
 800a194:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800a196:	4b53      	ldr	r3, [pc, #332]	@ (800a2e4 <LPS22DF_0_Probe+0x170>)
 800a198:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800a19a:	4b53      	ldr	r3, [pc, #332]	@ (800a2e8 <LPS22DF_0_Probe+0x174>)
 800a19c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800a19e:	4b53      	ldr	r3, [pc, #332]	@ (800a2ec <LPS22DF_0_Probe+0x178>)
 800a1a0:	643b      	str	r3, [r7, #64]	@ 0x40

  if (LPS22DF_RegisterBusIO(&lps22df_obj_0, &io_ctx) != LPS22DF_OK)
 800a1a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	4851      	ldr	r0, [pc, #324]	@ (800a2f0 <LPS22DF_0_Probe+0x17c>)
 800a1aa:	f7fa f8bd 	bl	8004328 <LPS22DF_RegisterBusIO>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d003      	beq.n	800a1bc <LPS22DF_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a1b4:	f06f 0306 	mvn.w	r3, #6
 800a1b8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1ba:	e087      	b.n	800a2cc <LPS22DF_0_Probe+0x158>
  }
  else if (LPS22DF_ReadID(&lps22df_obj_0, &id) != LPS22DF_OK)
 800a1bc:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	484b      	ldr	r0, [pc, #300]	@ (800a2f0 <LPS22DF_0_Probe+0x17c>)
 800a1c4:	f7fa f959 	bl	800447a <LPS22DF_ReadID>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d003      	beq.n	800a1d6 <LPS22DF_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a1ce:	f06f 0306 	mvn.w	r3, #6
 800a1d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1d4:	e07a      	b.n	800a2cc <LPS22DF_0_Probe+0x158>
  }
  else if (id != LPS22DF_ID)
 800a1d6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a1da:	2bb4      	cmp	r3, #180	@ 0xb4
 800a1dc:	d003      	beq.n	800a1e6 <LPS22DF_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a1de:	f06f 0306 	mvn.w	r3, #6
 800a1e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1e4:	e072      	b.n	800a2cc <LPS22DF_0_Probe+0x158>
  }
  else
  {
    (void)LPS22DF_GetCapabilities(&lps22df_obj_0, &cap);
 800a1e6:	f107 0308 	add.w	r3, r7, #8
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	4840      	ldr	r0, [pc, #256]	@ (800a2f0 <LPS22DF_0_Probe+0x17c>)
 800a1ee:	f7fa f95f 	bl	80044b0 <LPS22DF_GetCapabilities>

    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800a1f2:	7a3b      	ldrb	r3, [r7, #8]
 800a1f4:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800a1f6:	7a7b      	ldrb	r3, [r7, #9]
 800a1f8:	005b      	lsls	r3, r3, #1
 800a1fa:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800a1fc:	7abb      	ldrb	r3, [r7, #10]
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800a202:	7afb      	ldrb	r3, [r7, #11]
 800a204:	00db      	lsls	r3, r3, #3
 800a206:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800a208:	4a3a      	ldr	r2, [pc, #232]	@ (800a2f4 <LPS22DF_0_Probe+0x180>)
 800a20a:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS4A1_LPS22DF_0] = &lps22df_obj_0;
 800a20c:	4b3a      	ldr	r3, [pc, #232]	@ (800a2f8 <LPS22DF_0_Probe+0x184>)
 800a20e:	4a38      	ldr	r2, [pc, #224]	@ (800a2f0 <LPS22DF_0_Probe+0x17c>)
 800a210:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_LPS22DF_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22DF_COMMON_Driver;
 800a212:	4b3a      	ldr	r3, [pc, #232]	@ (800a2fc <LPS22DF_0_Probe+0x188>)
 800a214:	4a3a      	ldr	r2, [pc, #232]	@ (800a300 <LPS22DF_0_Probe+0x18c>)
 800a216:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800a218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d11e      	bne.n	800a25c <LPS22DF_0_Probe+0xe8>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f003 0301 	and.w	r3, r3, #1
 800a224:	2b00      	cmp	r3, #0
 800a226:	d019      	beq.n	800a25c <LPS22DF_0_Probe+0xe8>
 800a228:	7a3b      	ldrb	r3, [r7, #8]
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d116      	bne.n	800a25c <LPS22DF_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_TEMP_Driver;
 800a22e:	4b35      	ldr	r3, [pc, #212]	@ (800a304 <LPS22DF_0_Probe+0x190>)
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	4a35      	ldr	r2, [pc, #212]	@ (800a308 <LPS22DF_0_Probe+0x194>)
 800a234:	3304      	adds	r3, #4
 800a236:	4935      	ldr	r1, [pc, #212]	@ (800a30c <LPS22DF_0_Probe+0x198>)
 800a238:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800a23c:	4b2f      	ldr	r3, [pc, #188]	@ (800a2fc <LPS22DF_0_Probe+0x188>)
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a2d      	ldr	r2, [pc, #180]	@ (800a2f8 <LPS22DF_0_Probe+0x184>)
 800a244:	6852      	ldr	r2, [r2, #4]
 800a246:	4610      	mov	r0, r2
 800a248:	4798      	blx	r3
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d003      	beq.n	800a258 <LPS22DF_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a250:	f06f 0304 	mvn.w	r3, #4
 800a254:	647b      	str	r3, [r7, #68]	@ 0x44
 800a256:	e001      	b.n	800a25c <LPS22DF_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a258:	2300      	movs	r3, #0
 800a25a:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800a25c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d11e      	bne.n	800a2a0 <LPS22DF_0_Probe+0x12c>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f003 0302 	and.w	r3, r3, #2
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d019      	beq.n	800a2a0 <LPS22DF_0_Probe+0x12c>
 800a26c:	7a7b      	ldrb	r3, [r7, #9]
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d116      	bne.n	800a2a0 <LPS22DF_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_PRESS_Driver;
 800a272:	4b24      	ldr	r3, [pc, #144]	@ (800a304 <LPS22DF_0_Probe+0x190>)
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	4a24      	ldr	r2, [pc, #144]	@ (800a308 <LPS22DF_0_Probe+0x194>)
 800a278:	3304      	adds	r3, #4
 800a27a:	4925      	ldr	r1, [pc, #148]	@ (800a310 <LPS22DF_0_Probe+0x19c>)
 800a27c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800a280:	4b1e      	ldr	r3, [pc, #120]	@ (800a2fc <LPS22DF_0_Probe+0x188>)
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a1c      	ldr	r2, [pc, #112]	@ (800a2f8 <LPS22DF_0_Probe+0x184>)
 800a288:	6852      	ldr	r2, [r2, #4]
 800a28a:	4610      	mov	r0, r2
 800a28c:	4798      	blx	r3
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d003      	beq.n	800a29c <LPS22DF_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a294:	f06f 0304 	mvn.w	r3, #4
 800a298:	647b      	str	r3, [r7, #68]	@ 0x44
 800a29a:	e001      	b.n	800a2a0 <LPS22DF_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a29c:	2300      	movs	r3, #0
 800a29e:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800a2a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d107      	bne.n	800a2b6 <LPS22DF_0_Probe+0x142>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f003 0304 	and.w	r3, r3, #4
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d002      	beq.n	800a2b6 <LPS22DF_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a2b0:	f06f 0304 	mvn.w	r3, #4
 800a2b4:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800a2b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d107      	bne.n	800a2cc <LPS22DF_0_Probe+0x158>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f003 0308 	and.w	r3, r3, #8
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d002      	beq.n	800a2cc <LPS22DF_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a2c6:	f06f 0304 	mvn.w	r3, #4
 800a2ca:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800a2cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3748      	adds	r7, #72	@ 0x48
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	08001425 	.word	0x08001425
 800a2dc:	08001489 	.word	0x08001489
 800a2e0:	0800153d 	.word	0x0800153d
 800a2e4:	080014d9 	.word	0x080014d9
 800a2e8:	08001649 	.word	0x08001649
 800a2ec:	0800b3dd 	.word	0x0800b3dd
 800a2f0:	200004a0 	.word	0x200004a0
 800a2f4:	2000045c 	.word	0x2000045c
 800a2f8:	20000414 	.word	0x20000414
 800a2fc:	20000450 	.word	0x20000450
 800a300:	2000006c 	.word	0x2000006c
 800a304:	200001b0 	.word	0x200001b0
 800a308:	20000420 	.word	0x20000420
 800a30c:	20000090 	.word	0x20000090
 800a310:	2000007c 	.word	0x2000007c

0800a314 <SHT40AD1B_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t SHT40AD1B_0_Probe(uint32_t Functions)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b092      	sub	sp, #72	@ 0x48
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  SHT40AD1B_IO_t            io_ctx;
  uint8_t                   id;
  int32_t                   ret = BSP_ERROR_NONE;
 800a31c:	2300      	movs	r3, #0
 800a31e:	647b      	str	r3, [r7, #68]	@ 0x44
  static SHT40AD1B_Object_t sht40ad1b_obj_0;
  SHT40AD1B_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = SHT40AD1B_I2C_BUS; /* I2C */
 800a320:	2300      	movs	r3, #0
 800a322:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = SHT40AD1B_I2C_ADDRESS;
 800a324:	2389      	movs	r3, #137	@ 0x89
 800a326:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800a32a:	4b53      	ldr	r3, [pc, #332]	@ (800a478 <SHT40AD1B_0_Probe+0x164>)
 800a32c:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800a32e:	4b53      	ldr	r3, [pc, #332]	@ (800a47c <SHT40AD1B_0_Probe+0x168>)
 800a330:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.Read        = IKS4A1_I2C_READ;
 800a332:	4b53      	ldr	r3, [pc, #332]	@ (800a480 <SHT40AD1B_0_Probe+0x16c>)
 800a334:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.Write       = IKS4A1_I2C_WRITE;
 800a336:	4b53      	ldr	r3, [pc, #332]	@ (800a484 <SHT40AD1B_0_Probe+0x170>)
 800a338:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800a33a:	4b53      	ldr	r3, [pc, #332]	@ (800a488 <SHT40AD1B_0_Probe+0x174>)
 800a33c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800a33e:	4b53      	ldr	r3, [pc, #332]	@ (800a48c <SHT40AD1B_0_Probe+0x178>)
 800a340:	643b      	str	r3, [r7, #64]	@ 0x40

  if (SHT40AD1B_RegisterBusIO(&sht40ad1b_obj_0, &io_ctx) != SHT40AD1B_OK)
 800a342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a346:	4619      	mov	r1, r3
 800a348:	4851      	ldr	r0, [pc, #324]	@ (800a490 <SHT40AD1B_0_Probe+0x17c>)
 800a34a:	f7fe fce9 	bl	8008d20 <SHT40AD1B_RegisterBusIO>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d003      	beq.n	800a35c <SHT40AD1B_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a354:	f06f 0306 	mvn.w	r3, #6
 800a358:	647b      	str	r3, [r7, #68]	@ 0x44
 800a35a:	e087      	b.n	800a46c <SHT40AD1B_0_Probe+0x158>
  }
  else if (SHT40AD1B_ReadID(&sht40ad1b_obj_0, &id) != SHT40AD1B_OK)
 800a35c:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800a360:	4619      	mov	r1, r3
 800a362:	484b      	ldr	r0, [pc, #300]	@ (800a490 <SHT40AD1B_0_Probe+0x17c>)
 800a364:	f7fe fd4c 	bl	8008e00 <SHT40AD1B_ReadID>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d003      	beq.n	800a376 <SHT40AD1B_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a36e:	f06f 0306 	mvn.w	r3, #6
 800a372:	647b      	str	r3, [r7, #68]	@ 0x44
 800a374:	e07a      	b.n	800a46c <SHT40AD1B_0_Probe+0x158>
  }
  else if (id != SHT40AD1B_ID)
 800a376:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <SHT40AD1B_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a37e:	f06f 0306 	mvn.w	r3, #6
 800a382:	647b      	str	r3, [r7, #68]	@ 0x44
 800a384:	e072      	b.n	800a46c <SHT40AD1B_0_Probe+0x158>
  }
  else
  {
    (void)SHT40AD1B_GetCapabilities(&sht40ad1b_obj_0, &cap);
 800a386:	f107 0308 	add.w	r3, r7, #8
 800a38a:	4619      	mov	r1, r3
 800a38c:	4840      	ldr	r0, [pc, #256]	@ (800a490 <SHT40AD1B_0_Probe+0x17c>)
 800a38e:	f7fe fd47 	bl	8008e20 <SHT40AD1B_GetCapabilities>

    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800a392:	7a3b      	ldrb	r3, [r7, #8]
 800a394:	461a      	mov	r2, r3
                                         | ((uint32_t)cap.Pressure << 1)
 800a396:	7a7b      	ldrb	r3, [r7, #9]
 800a398:	005b      	lsls	r3, r3, #1
 800a39a:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Humidity << 2)
 800a39c:	7abb      	ldrb	r3, [r7, #10]
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Gas      << 3);
 800a3a2:	7afb      	ldrb	r3, [r7, #11]
 800a3a4:	00db      	lsls	r3, r3, #3
 800a3a6:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800a3a8:	4a3a      	ldr	r2, [pc, #232]	@ (800a494 <SHT40AD1B_0_Probe+0x180>)
 800a3aa:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS4A1_SHT40AD1B_0] = &sht40ad1b_obj_0;
 800a3ac:	4b3a      	ldr	r3, [pc, #232]	@ (800a498 <SHT40AD1B_0_Probe+0x184>)
 800a3ae:	4a38      	ldr	r2, [pc, #224]	@ (800a490 <SHT40AD1B_0_Probe+0x17c>)
 800a3b0:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_SHT40AD1B_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&SHT40AD1B_COMMON_Driver;
 800a3b2:	4b3a      	ldr	r3, [pc, #232]	@ (800a49c <SHT40AD1B_0_Probe+0x188>)
 800a3b4:	4a3a      	ldr	r2, [pc, #232]	@ (800a4a0 <SHT40AD1B_0_Probe+0x18c>)
 800a3b6:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800a3b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d11e      	bne.n	800a3fc <SHT40AD1B_0_Probe+0xe8>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f003 0301 	and.w	r3, r3, #1
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d019      	beq.n	800a3fc <SHT40AD1B_0_Probe+0xe8>
 800a3c8:	7a3b      	ldrb	r3, [r7, #8]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d116      	bne.n	800a3fc <SHT40AD1B_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_TEMP_Driver;
 800a3ce:	4b35      	ldr	r3, [pc, #212]	@ (800a4a4 <SHT40AD1B_0_Probe+0x190>)
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	4a35      	ldr	r2, [pc, #212]	@ (800a4a8 <SHT40AD1B_0_Probe+0x194>)
 800a3d4:	3308      	adds	r3, #8
 800a3d6:	4935      	ldr	r1, [pc, #212]	@ (800a4ac <SHT40AD1B_0_Probe+0x198>)
 800a3d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800a3dc:	4b2f      	ldr	r3, [pc, #188]	@ (800a49c <SHT40AD1B_0_Probe+0x188>)
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a2d      	ldr	r2, [pc, #180]	@ (800a498 <SHT40AD1B_0_Probe+0x184>)
 800a3e4:	6892      	ldr	r2, [r2, #8]
 800a3e6:	4610      	mov	r0, r2
 800a3e8:	4798      	blx	r3
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d003      	beq.n	800a3f8 <SHT40AD1B_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a3f0:	f06f 0304 	mvn.w	r3, #4
 800a3f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3f6:	e001      	b.n	800a3fc <SHT40AD1B_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800a3fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d11e      	bne.n	800a440 <SHT40AD1B_0_Probe+0x12c>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f003 0304 	and.w	r3, r3, #4
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d019      	beq.n	800a440 <SHT40AD1B_0_Probe+0x12c>
 800a40c:	7abb      	ldrb	r3, [r7, #10]
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d116      	bne.n	800a440 <SHT40AD1B_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_HUM_Driver;
 800a412:	4b24      	ldr	r3, [pc, #144]	@ (800a4a4 <SHT40AD1B_0_Probe+0x190>)
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	4a24      	ldr	r2, [pc, #144]	@ (800a4a8 <SHT40AD1B_0_Probe+0x194>)
 800a418:	3308      	adds	r3, #8
 800a41a:	4925      	ldr	r1, [pc, #148]	@ (800a4b0 <SHT40AD1B_0_Probe+0x19c>)
 800a41c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800a420:	4b1e      	ldr	r3, [pc, #120]	@ (800a49c <SHT40AD1B_0_Probe+0x188>)
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a1c      	ldr	r2, [pc, #112]	@ (800a498 <SHT40AD1B_0_Probe+0x184>)
 800a428:	6892      	ldr	r2, [r2, #8]
 800a42a:	4610      	mov	r0, r2
 800a42c:	4798      	blx	r3
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d003      	beq.n	800a43c <SHT40AD1B_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a434:	f06f 0304 	mvn.w	r3, #4
 800a438:	647b      	str	r3, [r7, #68]	@ 0x44
 800a43a:	e001      	b.n	800a440 <SHT40AD1B_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a43c:	2300      	movs	r3, #0
 800a43e:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800a440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a442:	2b00      	cmp	r3, #0
 800a444:	d107      	bne.n	800a456 <SHT40AD1B_0_Probe+0x142>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f003 0302 	and.w	r3, r3, #2
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d002      	beq.n	800a456 <SHT40AD1B_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a450:	f06f 0304 	mvn.w	r3, #4
 800a454:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800a456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d107      	bne.n	800a46c <SHT40AD1B_0_Probe+0x158>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f003 0308 	and.w	r3, r3, #8
 800a462:	2b00      	cmp	r3, #0
 800a464:	d002      	beq.n	800a46c <SHT40AD1B_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800a466:	f06f 0304 	mvn.w	r3, #4
 800a46a:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800a46c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3748      	adds	r7, #72	@ 0x48
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	08001425 	.word	0x08001425
 800a47c:	08001489 	.word	0x08001489
 800a480:	080015f5 	.word	0x080015f5
 800a484:	080015a1 	.word	0x080015a1
 800a488:	08001649 	.word	0x08001649
 800a48c:	0800b3dd 	.word	0x0800b3dd
 800a490:	200004d8 	.word	0x200004d8
 800a494:	2000045c 	.word	0x2000045c
 800a498:	20000414 	.word	0x20000414
 800a49c:	20000450 	.word	0x20000450
 800a4a0:	20000154 	.word	0x20000154
 800a4a4:	200001b0 	.word	0x200001b0
 800a4a8:	20000420 	.word	0x20000420
 800a4ac:	20000178 	.word	0x20000178
 800a4b0:	20000164 	.word	0x20000164

0800a4b4 <IKS4A1_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b08e      	sub	sp, #56	@ 0x38
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS4A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2b03      	cmp	r3, #3
 800a4ce:	f200 80d4 	bhi.w	800a67a <IKS4A1_MOTION_SENSOR_Init+0x1c6>
 800a4d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d8 <IKS4A1_MOTION_SENSOR_Init+0x24>)
 800a4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d8:	0800a4e9 	.word	0x0800a4e9
 800a4dc:	0800a54f 	.word	0x0800a54f
 800a4e0:	0800a5b3 	.word	0x0800a5b3
 800a4e4:	0800a617 	.word	0x0800a617
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS4A1_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800a4e8:	6838      	ldr	r0, [r7, #0]
 800a4ea:	f000 fa35 	bl	800a958 <LIS2MDL_0_Probe>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d002      	beq.n	800a4fa <IKS4A1_MOTION_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 800a4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f8:	e101      	b.n	800a6fe <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a4fa:	4a83      	ldr	r2, [pc, #524]	@ (800a708 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	4981      	ldr	r1, [pc, #516]	@ (800a70c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a50c:	f107 010c 	add.w	r1, r7, #12
 800a510:	4610      	mov	r0, r2
 800a512:	4798      	blx	r3
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d002      	beq.n	800a520 <IKS4A1_MOTION_SENSOR_Init+0x6c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a51a:	f06f 0306 	mvn.w	r3, #6
 800a51e:	e0ee      	b.n	800a6fe <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800a520:	7b3b      	ldrb	r3, [r7, #12]
 800a522:	2b01      	cmp	r3, #1
 800a524:	d103      	bne.n	800a52e <IKS4A1_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_ACCELERO;
 800a526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a528:	f043 0302 	orr.w	r3, r3, #2
 800a52c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800a52e:	7b7b      	ldrb	r3, [r7, #13]
 800a530:	2b01      	cmp	r3, #1
 800a532:	d103      	bne.n	800a53c <IKS4A1_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_GYRO;
 800a534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a536:	f043 0301 	orr.w	r3, r3, #1
 800a53a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800a53c:	7bbb      	ldrb	r3, [r7, #14]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	f040 809f 	bne.w	800a682 <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      {
        component_functions |= MOTION_MAGNETO;
 800a544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a546:	f043 0304 	orr.w	r3, r3, #4
 800a54a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800a54c:	e099      	b.n	800a682 <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case IKS4A1_LSM6DSV16X_0:
      if (LSM6DSV16X_0_Probe(Functions) != BSP_ERROR_NONE)
 800a54e:	6838      	ldr	r0, [r7, #0]
 800a550:	f000 faaa 	bl	800aaa8 <LSM6DSV16X_0_Probe>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d002      	beq.n	800a560 <IKS4A1_MOTION_SENSOR_Init+0xac>
      {
        return BSP_ERROR_NO_INIT;
 800a55a:	f04f 33ff 	mov.w	r3, #4294967295
 800a55e:	e0ce      	b.n	800a6fe <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a560:	4a69      	ldr	r2, [pc, #420]	@ (800a708 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	4968      	ldr	r1, [pc, #416]	@ (800a70c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a572:	f107 010c 	add.w	r1, r7, #12
 800a576:	4610      	mov	r0, r2
 800a578:	4798      	blx	r3
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d002      	beq.n	800a586 <IKS4A1_MOTION_SENSOR_Init+0xd2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a580:	f06f 0306 	mvn.w	r3, #6
 800a584:	e0bb      	b.n	800a6fe <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800a586:	7b3b      	ldrb	r3, [r7, #12]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d103      	bne.n	800a594 <IKS4A1_MOTION_SENSOR_Init+0xe0>
      {
        component_functions |= MOTION_ACCELERO;
 800a58c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58e:	f043 0302 	orr.w	r3, r3, #2
 800a592:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800a594:	7b7b      	ldrb	r3, [r7, #13]
 800a596:	2b01      	cmp	r3, #1
 800a598:	d103      	bne.n	800a5a2 <IKS4A1_MOTION_SENSOR_Init+0xee>
      {
        component_functions |= MOTION_GYRO;
 800a59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a59c:	f043 0301 	orr.w	r3, r3, #1
 800a5a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800a5a2:	7bbb      	ldrb	r3, [r7, #14]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d16e      	bne.n	800a686 <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      {
        component_functions |= MOTION_MAGNETO;
 800a5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5aa:	f043 0304 	orr.w	r3, r3, #4
 800a5ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800a5b0:	e069      	b.n	800a686 <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2DUXS12_0 == 1)
    case IKS4A1_LIS2DUXS12_0:
      if (LIS2DUXS12_0_Probe(Functions) != BSP_ERROR_NONE)
 800a5b2:	6838      	ldr	r0, [r7, #0]
 800a5b4:	f000 fb44 	bl	800ac40 <LIS2DUXS12_0_Probe>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d002      	beq.n	800a5c4 <IKS4A1_MOTION_SENSOR_Init+0x110>
      {
        return BSP_ERROR_NO_INIT;
 800a5be:	f04f 33ff 	mov.w	r3, #4294967295
 800a5c2:	e09c      	b.n	800a6fe <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a5c4:	4a50      	ldr	r2, [pc, #320]	@ (800a708 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	494f      	ldr	r1, [pc, #316]	@ (800a70c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a5d6:	f107 010c 	add.w	r1, r7, #12
 800a5da:	4610      	mov	r0, r2
 800a5dc:	4798      	blx	r3
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d002      	beq.n	800a5ea <IKS4A1_MOTION_SENSOR_Init+0x136>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a5e4:	f06f 0306 	mvn.w	r3, #6
 800a5e8:	e089      	b.n	800a6fe <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800a5ea:	7b3b      	ldrb	r3, [r7, #12]
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d103      	bne.n	800a5f8 <IKS4A1_MOTION_SENSOR_Init+0x144>
      {
        component_functions |= MOTION_ACCELERO;
 800a5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f2:	f043 0302 	orr.w	r3, r3, #2
 800a5f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800a5f8:	7b7b      	ldrb	r3, [r7, #13]
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d103      	bne.n	800a606 <IKS4A1_MOTION_SENSOR_Init+0x152>
      {
        component_functions |= MOTION_GYRO;
 800a5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a600:	f043 0301 	orr.w	r3, r3, #1
 800a604:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800a606:	7bbb      	ldrb	r3, [r7, #14]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d13e      	bne.n	800a68a <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      {
        component_functions |= MOTION_MAGNETO;
 800a60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a60e:	f043 0304 	orr.w	r3, r3, #4
 800a612:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800a614:	e039      	b.n	800a68a <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSO16IS_0 == 1)
    case IKS4A1_LSM6DSO16IS_0:
      if (LSM6DSO16IS_0_Probe(Functions) != BSP_ERROR_NONE)
 800a616:	6838      	ldr	r0, [r7, #0]
 800a618:	f000 fbc8 	bl	800adac <LSM6DSO16IS_0_Probe>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d002      	beq.n	800a628 <IKS4A1_MOTION_SENSOR_Init+0x174>
      {
        return BSP_ERROR_NO_INIT;
 800a622:	f04f 33ff 	mov.w	r3, #4294967295
 800a626:	e06a      	b.n	800a6fe <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800a628:	4a37      	ldr	r2, [pc, #220]	@ (800a708 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	4936      	ldr	r1, [pc, #216]	@ (800a70c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a63a:	f107 010c 	add.w	r1, r7, #12
 800a63e:	4610      	mov	r0, r2
 800a640:	4798      	blx	r3
 800a642:	4603      	mov	r3, r0
 800a644:	2b00      	cmp	r3, #0
 800a646:	d002      	beq.n	800a64e <IKS4A1_MOTION_SENSOR_Init+0x19a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800a648:	f06f 0306 	mvn.w	r3, #6
 800a64c:	e057      	b.n	800a6fe <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800a64e:	7b3b      	ldrb	r3, [r7, #12]
 800a650:	2b01      	cmp	r3, #1
 800a652:	d103      	bne.n	800a65c <IKS4A1_MOTION_SENSOR_Init+0x1a8>
      {
        component_functions |= MOTION_ACCELERO;
 800a654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a656:	f043 0302 	orr.w	r3, r3, #2
 800a65a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800a65c:	7b7b      	ldrb	r3, [r7, #13]
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d103      	bne.n	800a66a <IKS4A1_MOTION_SENSOR_Init+0x1b6>
      {
        component_functions |= MOTION_GYRO;
 800a662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a664:	f043 0301 	orr.w	r3, r3, #1
 800a668:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800a66a:	7bbb      	ldrb	r3, [r7, #14]
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d10e      	bne.n	800a68e <IKS4A1_MOTION_SENSOR_Init+0x1da>
      {
        component_functions |= MOTION_MAGNETO;
 800a670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a672:	f043 0304 	orr.w	r3, r3, #4
 800a676:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800a678:	e009      	b.n	800a68e <IKS4A1_MOTION_SENSOR_Init+0x1da>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800a67a:	f06f 0301 	mvn.w	r3, #1
 800a67e:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800a680:	e006      	b.n	800a690 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800a682:	bf00      	nop
 800a684:	e004      	b.n	800a690 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800a686:	bf00      	nop
 800a688:	e002      	b.n	800a690 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800a68a:	bf00      	nop
 800a68c:	e000      	b.n	800a690 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800a68e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800a690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a692:	2b00      	cmp	r3, #0
 800a694:	d001      	beq.n	800a69a <IKS4A1_MOTION_SENSOR_Init+0x1e6>
  {
    return ret;
 800a696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a698:	e031      	b.n	800a6fe <IKS4A1_MOTION_SENSOR_Init+0x24a>
  }

  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800a69a:	2300      	movs	r3, #0
 800a69c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a69e:	e02a      	b.n	800a6f6 <IKS4A1_MOTION_SENSOR_Init+0x242>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800a6a0:	683a      	ldr	r2, [r7, #0]
 800a6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d11e      	bne.n	800a6ea <IKS4A1_MOTION_SENSOR_Init+0x236>
 800a6ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b0:	4013      	ands	r3, r2
 800a6b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d118      	bne.n	800a6ea <IKS4A1_MOTION_SENSOR_Init+0x236>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800a6b8:	4a15      	ldr	r2, [pc, #84]	@ (800a710 <IKS4A1_MOTION_SENSOR_Init+0x25c>)
 800a6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a6c0:	4814      	ldr	r0, [pc, #80]	@ (800a714 <IKS4A1_MOTION_SENSOR_Init+0x260>)
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	4413      	add	r3, r2
 800a6ca:	440b      	add	r3, r1
 800a6cc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	490e      	ldr	r1, [pc, #56]	@ (800a70c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a6da:	4610      	mov	r0, r2
 800a6dc:	4798      	blx	r3
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d002      	beq.n	800a6ea <IKS4A1_MOTION_SENSOR_Init+0x236>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800a6e4:	f06f 0304 	mvn.w	r3, #4
 800a6e8:	e009      	b.n	800a6fe <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
    }
    function = function << 1;
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ec:	005b      	lsls	r3, r3, #1
 800a6ee:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800a6f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d9d1      	bls.n	800a6a0 <IKS4A1_MOTION_SENSOR_Init+0x1ec>
  }

  return ret;
 800a6fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3738      	adds	r7, #56	@ 0x38
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	2000055c 	.word	0x2000055c
 800a70c:	2000051c 	.word	0x2000051c
 800a710:	200001f0 	.word	0x200001f0
 800a714:	2000052c 	.word	0x2000052c

0800a718 <IKS4A1_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance
  * @param  Capabilities pointer to motion sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2b03      	cmp	r3, #3
 800a726:	d903      	bls.n	800a730 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a728:	f06f 0301 	mvn.w	r3, #1
 800a72c:	60fb      	str	r3, [r7, #12]
 800a72e:	e014      	b.n	800a75a <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800a730:	4a0c      	ldr	r2, [pc, #48]	@ (800a764 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x4c>)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	490b      	ldr	r1, [pc, #44]	@ (800a768 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x50>)
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a742:	6839      	ldr	r1, [r7, #0]
 800a744:	4610      	mov	r0, r2
 800a746:	4798      	blx	r3
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d003      	beq.n	800a756 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a74e:	f06f 0306 	mvn.w	r3, #6
 800a752:	60fb      	str	r3, [r7, #12]
 800a754:	e001      	b.n	800a75a <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800a756:	2300      	movs	r3, #0
 800a758:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a75a:	68fb      	ldr	r3, [r7, #12]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	2000055c 	.word	0x2000055c
 800a768:	2000051c 	.word	0x2000051c

0800a76c <IKS4A1_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2b03      	cmp	r3, #3
 800a77a:	d903      	bls.n	800a784 <IKS4A1_MOTION_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a77c:	f06f 0301 	mvn.w	r3, #1
 800a780:	60fb      	str	r3, [r7, #12]
 800a782:	e014      	b.n	800a7ae <IKS4A1_MOTION_SENSOR_ReadID+0x42>
  }
  else if (MotionDrv[Instance]->ReadID(MotionCompObj[Instance], Id) != BSP_ERROR_NONE)
 800a784:	4a0c      	ldr	r2, [pc, #48]	@ (800a7b8 <IKS4A1_MOTION_SENSOR_ReadID+0x4c>)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	490b      	ldr	r1, [pc, #44]	@ (800a7bc <IKS4A1_MOTION_SENSOR_ReadID+0x50>)
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a796:	6839      	ldr	r1, [r7, #0]
 800a798:	4610      	mov	r0, r2
 800a79a:	4798      	blx	r3
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d003      	beq.n	800a7aa <IKS4A1_MOTION_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a7a2:	f06f 0306 	mvn.w	r3, #6
 800a7a6:	60fb      	str	r3, [r7, #12]
 800a7a8:	e001      	b.n	800a7ae <IKS4A1_MOTION_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	2000055c 	.word	0x2000055c
 800a7bc:	2000051c 	.word	0x2000051c

0800a7c0 <IKS4A1_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS4A1_MOTION_SENSOR_Axes_t *Axes)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	2b03      	cmp	r3, #3
 800a7d0:	d903      	bls.n	800a7da <IKS4A1_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a7d2:	f06f 0301 	mvn.w	r3, #1
 800a7d6:	617b      	str	r3, [r7, #20]
 800a7d8:	e029      	b.n	800a82e <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a7da:	4a17      	ldr	r2, [pc, #92]	@ (800a838 <IKS4A1_MOTION_SENSOR_GetAxes+0x78>)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	4013      	ands	r3, r2
 800a7e6:	68ba      	ldr	r2, [r7, #8]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d11d      	bne.n	800a828 <IKS4A1_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800a7ec:	4a13      	ldr	r2, [pc, #76]	@ (800a83c <IKS4A1_MOTION_SENSOR_GetAxes+0x7c>)
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a7f4:	4812      	ldr	r0, [pc, #72]	@ (800a840 <IKS4A1_MOTION_SENSOR_GetAxes+0x80>)
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	005b      	lsls	r3, r3, #1
 800a7fc:	4413      	add	r3, r2
 800a7fe:	440b      	add	r3, r1
 800a800:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a804:	69db      	ldr	r3, [r3, #28]
 800a806:	490f      	ldr	r1, [pc, #60]	@ (800a844 <IKS4A1_MOTION_SENSOR_GetAxes+0x84>)
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a80e:	6879      	ldr	r1, [r7, #4]
 800a810:	4610      	mov	r0, r2
 800a812:	4798      	blx	r3
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d003      	beq.n	800a822 <IKS4A1_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a81a:	f06f 0304 	mvn.w	r3, #4
 800a81e:	617b      	str	r3, [r7, #20]
 800a820:	e005      	b.n	800a82e <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a822:	2300      	movs	r3, #0
 800a824:	617b      	str	r3, [r7, #20]
 800a826:	e002      	b.n	800a82e <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a828:	f06f 0301 	mvn.w	r3, #1
 800a82c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a82e:	697b      	ldr	r3, [r7, #20]
}
 800a830:	4618      	mov	r0, r3
 800a832:	3718      	adds	r7, #24
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}
 800a838:	2000056c 	.word	0x2000056c
 800a83c:	200001f0 	.word	0x200001f0
 800a840:	2000052c 	.word	0x2000052c
 800a844:	2000051c 	.word	0x2000051c

0800a848 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b086      	sub	sp, #24
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2b03      	cmp	r3, #3
 800a858:	d903      	bls.n	800a862 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a85a:	f06f 0301 	mvn.w	r3, #1
 800a85e:	617b      	str	r3, [r7, #20]
 800a860:	e029      	b.n	800a8b6 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a862:	4a17      	ldr	r2, [pc, #92]	@ (800a8c0 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x78>)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	4013      	ands	r3, r2
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	429a      	cmp	r2, r3
 800a872:	d11d      	bne.n	800a8b0 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800a874:	4a13      	ldr	r2, [pc, #76]	@ (800a8c4 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a87c:	4812      	ldr	r0, [pc, #72]	@ (800a8c8 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x80>)
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	4613      	mov	r3, r2
 800a882:	005b      	lsls	r3, r3, #1
 800a884:	4413      	add	r3, r2
 800a886:	440b      	add	r3, r1
 800a888:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	490f      	ldr	r1, [pc, #60]	@ (800a8cc <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x84>)
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a896:	6879      	ldr	r1, [r7, #4]
 800a898:	4610      	mov	r0, r2
 800a89a:	4798      	blx	r3
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d003      	beq.n	800a8aa <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a8a2:	f06f 0304 	mvn.w	r3, #4
 800a8a6:	617b      	str	r3, [r7, #20]
 800a8a8:	e005      	b.n	800a8b6 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	617b      	str	r3, [r7, #20]
 800a8ae:	e002      	b.n	800a8b6 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a8b0:	f06f 0301 	mvn.w	r3, #1
 800a8b4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a8b6:	697b      	ldr	r3, [r7, #20]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3718      	adds	r7, #24
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	2000056c 	.word	0x2000056c
 800a8c4:	200001f0 	.word	0x200001f0
 800a8c8:	2000052c 	.word	0x2000052c
 800a8cc:	2000051c 	.word	0x2000051c

0800a8d0 <IKS4A1_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale pointer to Fullscale read value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2b03      	cmp	r3, #3
 800a8e0:	d903      	bls.n	800a8ea <IKS4A1_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800a8e2:	f06f 0301 	mvn.w	r3, #1
 800a8e6:	617b      	str	r3, [r7, #20]
 800a8e8:	e029      	b.n	800a93e <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800a8ea:	4a17      	ldr	r2, [pc, #92]	@ (800a948 <IKS4A1_MOTION_SENSOR_GetFullScale+0x78>)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d11d      	bne.n	800a938 <IKS4A1_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 800a8fc:	4a13      	ldr	r2, [pc, #76]	@ (800a94c <IKS4A1_MOTION_SENSOR_GetFullScale+0x7c>)
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a904:	4812      	ldr	r0, [pc, #72]	@ (800a950 <IKS4A1_MOTION_SENSOR_GetFullScale+0x80>)
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	4613      	mov	r3, r2
 800a90a:	005b      	lsls	r3, r3, #1
 800a90c:	4413      	add	r3, r2
 800a90e:	440b      	add	r3, r1
 800a910:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800a914:	695b      	ldr	r3, [r3, #20]
 800a916:	490f      	ldr	r1, [pc, #60]	@ (800a954 <IKS4A1_MOTION_SENSOR_GetFullScale+0x84>)
 800a918:	68fa      	ldr	r2, [r7, #12]
 800a91a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800a91e:	6879      	ldr	r1, [r7, #4]
 800a920:	4610      	mov	r0, r2
 800a922:	4798      	blx	r3
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d003      	beq.n	800a932 <IKS4A1_MOTION_SENSOR_GetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800a92a:	f06f 0304 	mvn.w	r3, #4
 800a92e:	617b      	str	r3, [r7, #20]
 800a930:	e005      	b.n	800a93e <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800a932:	2300      	movs	r3, #0
 800a934:	617b      	str	r3, [r7, #20]
 800a936:	e002      	b.n	800a93e <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800a938:	f06f 0301 	mvn.w	r3, #1
 800a93c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800a93e:	697b      	ldr	r3, [r7, #20]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3718      	adds	r7, #24
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	2000056c 	.word	0x2000056c
 800a94c:	200001f0 	.word	0x200001f0
 800a950:	2000052c 	.word	0x2000052c
 800a954:	2000051c 	.word	0x2000051c

0800a958 <LIS2MDL_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b094      	sub	sp, #80	@ 0x50
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800a960:	2300      	movs	r3, #0
 800a962:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800a964:	2300      	movs	r3, #0
 800a966:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800a968:	233d      	movs	r3, #61	@ 0x3d
 800a96a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800a96e:	4b40      	ldr	r3, [pc, #256]	@ (800aa70 <LIS2MDL_0_Probe+0x118>)
 800a970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800a972:	4b40      	ldr	r3, [pc, #256]	@ (800aa74 <LIS2MDL_0_Probe+0x11c>)
 800a974:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800a976:	4b40      	ldr	r3, [pc, #256]	@ (800aa78 <LIS2MDL_0_Probe+0x120>)
 800a978:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800a97a:	4b40      	ldr	r3, [pc, #256]	@ (800aa7c <LIS2MDL_0_Probe+0x124>)
 800a97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800a97e:	4b40      	ldr	r3, [pc, #256]	@ (800aa80 <LIS2MDL_0_Probe+0x128>)
 800a980:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800a982:	4b40      	ldr	r3, [pc, #256]	@ (800aa84 <LIS2MDL_0_Probe+0x12c>)
 800a984:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800a986:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a98a:	4619      	mov	r1, r3
 800a98c:	483e      	ldr	r0, [pc, #248]	@ (800aa88 <LIS2MDL_0_Probe+0x130>)
 800a98e:	f7f8 fcbb 	bl	8003308 <LIS2MDL_RegisterBusIO>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d003      	beq.n	800a9a0 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a998:	f06f 0306 	mvn.w	r3, #6
 800a99c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a99e:	e061      	b.n	800aa64 <LIS2MDL_0_Probe+0x10c>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800a9a0:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	4838      	ldr	r0, [pc, #224]	@ (800aa88 <LIS2MDL_0_Probe+0x130>)
 800a9a8:	f7f8 fdca 	bl	8003540 <LIS2MDL_ReadID>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d003      	beq.n	800a9ba <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a9b2:	f06f 0306 	mvn.w	r3, #6
 800a9b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9b8:	e054      	b.n	800aa64 <LIS2MDL_0_Probe+0x10c>
  }
  else if (id != LIS2MDL_ID)
 800a9ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a9be:	2b40      	cmp	r3, #64	@ 0x40
 800a9c0:	d003      	beq.n	800a9ca <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800a9c2:	f06f 0306 	mvn.w	r3, #6
 800a9c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9c8:	e04c      	b.n	800aa64 <LIS2MDL_0_Probe+0x10c>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800a9ca:	f107 030c 	add.w	r3, r7, #12
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	482d      	ldr	r0, [pc, #180]	@ (800aa88 <LIS2MDL_0_Probe+0x130>)
 800a9d2:	f7f8 fddb 	bl	800358c <LIS2MDL_GetCapabilities>
    MotionCtx[IKS4A1_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800a9d6:	7b7b      	ldrb	r3, [r7, #13]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	7b3b      	ldrb	r3, [r7, #12]
 800a9dc:	005b      	lsls	r3, r3, #1
 800a9de:	431a      	orrs	r2, r3
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	4a29      	ldr	r2, [pc, #164]	@ (800aa8c <LIS2MDL_0_Probe+0x134>)
 800a9e8:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS4A1_LIS2MDL_0] = &lis2mdl_obj_0;
 800a9ea:	4b29      	ldr	r3, [pc, #164]	@ (800aa90 <LIS2MDL_0_Probe+0x138>)
 800a9ec:	4a26      	ldr	r2, [pc, #152]	@ (800aa88 <LIS2MDL_0_Probe+0x130>)
 800a9ee:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800a9f0:	4b28      	ldr	r3, [pc, #160]	@ (800aa94 <LIS2MDL_0_Probe+0x13c>)
 800a9f2:	4a29      	ldr	r2, [pc, #164]	@ (800aa98 <LIS2MDL_0_Probe+0x140>)
 800a9f4:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800a9f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d11d      	bne.n	800aa38 <LIS2MDL_0_Probe+0xe0>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f003 0304 	and.w	r3, r3, #4
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d018      	beq.n	800aa38 <LIS2MDL_0_Probe+0xe0>
 800aa06:	7bbb      	ldrb	r3, [r7, #14]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d115      	bne.n	800aa38 <LIS2MDL_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800aa0c:	4b23      	ldr	r3, [pc, #140]	@ (800aa9c <LIS2MDL_0_Probe+0x144>)
 800aa0e:	691b      	ldr	r3, [r3, #16]
 800aa10:	4a23      	ldr	r2, [pc, #140]	@ (800aaa0 <LIS2MDL_0_Probe+0x148>)
 800aa12:	4924      	ldr	r1, [pc, #144]	@ (800aaa4 <LIS2MDL_0_Probe+0x14c>)
 800aa14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS4A1_LIS2MDL_0]->Init(MotionCompObj[IKS4A1_LIS2MDL_0]) != LIS2MDL_OK)
 800aa18:	4b1e      	ldr	r3, [pc, #120]	@ (800aa94 <LIS2MDL_0_Probe+0x13c>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a1c      	ldr	r2, [pc, #112]	@ (800aa90 <LIS2MDL_0_Probe+0x138>)
 800aa20:	6812      	ldr	r2, [r2, #0]
 800aa22:	4610      	mov	r0, r2
 800aa24:	4798      	blx	r3
 800aa26:	4603      	mov	r3, r0
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d003      	beq.n	800aa34 <LIS2MDL_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa2c:	f06f 0304 	mvn.w	r3, #4
 800aa30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa32:	e001      	b.n	800aa38 <LIS2MDL_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800aa34:	2300      	movs	r3, #0
 800aa36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800aa38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d107      	bne.n	800aa4e <LIS2MDL_0_Probe+0xf6>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f003 0302 	and.w	r3, r3, #2
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d002      	beq.n	800aa4e <LIS2MDL_0_Probe+0xf6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa48:	f06f 0304 	mvn.w	r3, #4
 800aa4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800aa4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d107      	bne.n	800aa64 <LIS2MDL_0_Probe+0x10c>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f003 0301 	and.w	r3, r3, #1
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d002      	beq.n	800aa64 <LIS2MDL_0_Probe+0x10c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800aa5e:	f06f 0304 	mvn.w	r3, #4
 800aa62:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800aa64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3750      	adds	r7, #80	@ 0x50
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	08001425 	.word	0x08001425
 800aa74:	08001489 	.word	0x08001489
 800aa78:	0800153d 	.word	0x0800153d
 800aa7c:	080014d9 	.word	0x080014d9
 800aa80:	08001649 	.word	0x08001649
 800aa84:	0800b3dd 	.word	0x0800b3dd
 800aa88:	2000057c 	.word	0x2000057c
 800aa8c:	2000056c 	.word	0x2000056c
 800aa90:	2000051c 	.word	0x2000051c
 800aa94:	2000055c 	.word	0x2000055c
 800aa98:	20000038 	.word	0x20000038
 800aa9c:	200001f0 	.word	0x200001f0
 800aaa0:	2000052c 	.word	0x2000052c
 800aaa4:	20000048 	.word	0x20000048

0800aaa8 <LSM6DSV16X_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSV16X_0_Probe(uint32_t Functions)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b094      	sub	sp, #80	@ 0x50
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  LSM6DSV16X_IO_t            io_ctx;
  uint8_t                    id;
  static LSM6DSV16X_Object_t lsm6dsv16x_obj_0;
  LSM6DSV16X_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800aab0:	2300      	movs	r3, #0
 800aab2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSV16X_I2C_BUS; /* I2C */
 800aab4:	2300      	movs	r3, #0
 800aab6:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSV16X_I2C_ADD_H;
 800aab8:	23d7      	movs	r3, #215	@ 0xd7
 800aaba:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800aabe:	4b51      	ldr	r3, [pc, #324]	@ (800ac04 <LSM6DSV16X_0_Probe+0x15c>)
 800aac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800aac2:	4b51      	ldr	r3, [pc, #324]	@ (800ac08 <LSM6DSV16X_0_Probe+0x160>)
 800aac4:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800aac6:	4b51      	ldr	r3, [pc, #324]	@ (800ac0c <LSM6DSV16X_0_Probe+0x164>)
 800aac8:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800aaca:	4b51      	ldr	r3, [pc, #324]	@ (800ac10 <LSM6DSV16X_0_Probe+0x168>)
 800aacc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800aace:	4b51      	ldr	r3, [pc, #324]	@ (800ac14 <LSM6DSV16X_0_Probe+0x16c>)
 800aad0:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800aad2:	4b51      	ldr	r3, [pc, #324]	@ (800ac18 <LSM6DSV16X_0_Probe+0x170>)
 800aad4:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSV16X_RegisterBusIO(&lsm6dsv16x_obj_0, &io_ctx) != LSM6DSV16X_OK)
 800aad6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800aada:	4619      	mov	r1, r3
 800aadc:	484f      	ldr	r0, [pc, #316]	@ (800ac1c <LSM6DSV16X_0_Probe+0x174>)
 800aade:	f7fc f983 	bl	8006de8 <LSM6DSV16X_RegisterBusIO>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d003      	beq.n	800aaf0 <LSM6DSV16X_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800aae8:	f06f 0306 	mvn.w	r3, #6
 800aaec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aaee:	e084      	b.n	800abfa <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_Set_Mem_Bank(&lsm6dsv16x_obj_0, LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	484a      	ldr	r0, [pc, #296]	@ (800ac1c <LSM6DSV16X_0_Probe+0x174>)
 800aaf4:	f7fd f905 	bl	8007d02 <LSM6DSV16X_Set_Mem_Bank>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d003      	beq.n	800ab06 <LSM6DSV16X_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800aafe:	f06f 0306 	mvn.w	r3, #6
 800ab02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab04:	e079      	b.n	800abfa <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_ReadID(&lsm6dsv16x_obj_0, &id) != LSM6DSV16X_OK)
 800ab06:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	4843      	ldr	r0, [pc, #268]	@ (800ac1c <LSM6DSV16X_0_Probe+0x174>)
 800ab0e:	f7fc fa9b 	bl	8007048 <LSM6DSV16X_ReadID>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d003      	beq.n	800ab20 <LSM6DSV16X_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ab18:	f06f 0306 	mvn.w	r3, #6
 800ab1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab1e:	e06c      	b.n	800abfa <LSM6DSV16X_0_Probe+0x152>
  }
  else if (id != LSM6DSV16X_ID)
 800ab20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ab24:	2b70      	cmp	r3, #112	@ 0x70
 800ab26:	d003      	beq.n	800ab30 <LSM6DSV16X_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ab28:	f06f 0306 	mvn.w	r3, #6
 800ab2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab2e:	e064      	b.n	800abfa <LSM6DSV16X_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSV16X_GetCapabilities(&lsm6dsv16x_obj_0, &cap);
 800ab30:	f107 030c 	add.w	r3, r7, #12
 800ab34:	4619      	mov	r1, r3
 800ab36:	4839      	ldr	r0, [pc, #228]	@ (800ac1c <LSM6DSV16X_0_Probe+0x174>)
 800ab38:	f7fc fa9c 	bl	8007074 <LSM6DSV16X_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSV16X_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800ab3c:	7b7b      	ldrb	r3, [r7, #13]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	7b3b      	ldrb	r3, [r7, #12]
 800ab42:	005b      	lsls	r3, r3, #1
 800ab44:	431a      	orrs	r2, r3
 800ab46:	7bbb      	ldrb	r3, [r7, #14]
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	4a34      	ldr	r2, [pc, #208]	@ (800ac20 <LSM6DSV16X_0_Probe+0x178>)
 800ab4e:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS4A1_LSM6DSV16X_0] = &lsm6dsv16x_obj_0;
 800ab50:	4b34      	ldr	r3, [pc, #208]	@ (800ac24 <LSM6DSV16X_0_Probe+0x17c>)
 800ab52:	4a32      	ldr	r2, [pc, #200]	@ (800ac1c <LSM6DSV16X_0_Probe+0x174>)
 800ab54:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSV16X_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSV16X_COMMON_Driver;
 800ab56:	4b34      	ldr	r3, [pc, #208]	@ (800ac28 <LSM6DSV16X_0_Probe+0x180>)
 800ab58:	4a34      	ldr	r2, [pc, #208]	@ (800ac2c <LSM6DSV16X_0_Probe+0x184>)
 800ab5a:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800ab5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d11e      	bne.n	800aba0 <LSM6DSV16X_0_Probe+0xf8>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f003 0301 	and.w	r3, r3, #1
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d019      	beq.n	800aba0 <LSM6DSV16X_0_Probe+0xf8>
 800ab6c:	7b7b      	ldrb	r3, [r7, #13]
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d116      	bne.n	800aba0 <LSM6DSV16X_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800ab72:	4b2f      	ldr	r3, [pc, #188]	@ (800ac30 <LSM6DSV16X_0_Probe+0x188>)
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	4a2f      	ldr	r2, [pc, #188]	@ (800ac34 <LSM6DSV16X_0_Probe+0x18c>)
 800ab78:	3303      	adds	r3, #3
 800ab7a:	492f      	ldr	r1, [pc, #188]	@ (800ac38 <LSM6DSV16X_0_Probe+0x190>)
 800ab7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LSM6DSV16X_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800ab80:	4b29      	ldr	r3, [pc, #164]	@ (800ac28 <LSM6DSV16X_0_Probe+0x180>)
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a27      	ldr	r2, [pc, #156]	@ (800ac24 <LSM6DSV16X_0_Probe+0x17c>)
 800ab88:	6852      	ldr	r2, [r2, #4]
 800ab8a:	4610      	mov	r0, r2
 800ab8c:	4798      	blx	r3
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d003      	beq.n	800ab9c <LSM6DSV16X_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ab94:	f06f 0304 	mvn.w	r3, #4
 800ab98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab9a:	e001      	b.n	800aba0 <LSM6DSV16X_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800aba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d11e      	bne.n	800abe4 <LSM6DSV16X_0_Probe+0x13c>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f003 0302 	and.w	r3, r3, #2
 800abac:	2b00      	cmp	r3, #0
 800abae:	d019      	beq.n	800abe4 <LSM6DSV16X_0_Probe+0x13c>
 800abb0:	7b3b      	ldrb	r3, [r7, #12]
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d116      	bne.n	800abe4 <LSM6DSV16X_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800abb6:	4b1e      	ldr	r3, [pc, #120]	@ (800ac30 <LSM6DSV16X_0_Probe+0x188>)
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	4a1e      	ldr	r2, [pc, #120]	@ (800ac34 <LSM6DSV16X_0_Probe+0x18c>)
 800abbc:	3303      	adds	r3, #3
 800abbe:	491f      	ldr	r1, [pc, #124]	@ (800ac3c <LSM6DSV16X_0_Probe+0x194>)
 800abc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LSM6DSV16X_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800abc4:	4b18      	ldr	r3, [pc, #96]	@ (800ac28 <LSM6DSV16X_0_Probe+0x180>)
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a16      	ldr	r2, [pc, #88]	@ (800ac24 <LSM6DSV16X_0_Probe+0x17c>)
 800abcc:	6852      	ldr	r2, [r2, #4]
 800abce:	4610      	mov	r0, r2
 800abd0:	4798      	blx	r3
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d003      	beq.n	800abe0 <LSM6DSV16X_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800abd8:	f06f 0304 	mvn.w	r3, #4
 800abdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abde:	e001      	b.n	800abe4 <LSM6DSV16X_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800abe0:	2300      	movs	r3, #0
 800abe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800abe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d107      	bne.n	800abfa <LSM6DSV16X_0_Probe+0x152>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f003 0304 	and.w	r3, r3, #4
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d002      	beq.n	800abfa <LSM6DSV16X_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800abf4:	f06f 0304 	mvn.w	r3, #4
 800abf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800abfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3750      	adds	r7, #80	@ 0x50
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}
 800ac04:	08001425 	.word	0x08001425
 800ac08:	08001489 	.word	0x08001489
 800ac0c:	0800153d 	.word	0x0800153d
 800ac10:	080014d9 	.word	0x080014d9
 800ac14:	08001649 	.word	0x08001649
 800ac18:	0800b3dd 	.word	0x0800b3dd
 800ac1c:	200005b0 	.word	0x200005b0
 800ac20:	2000056c 	.word	0x2000056c
 800ac24:	2000051c 	.word	0x2000051c
 800ac28:	2000055c 	.word	0x2000055c
 800ac2c:	200000fc 	.word	0x200000fc
 800ac30:	200001f0 	.word	0x200001f0
 800ac34:	2000052c 	.word	0x2000052c
 800ac38:	20000130 	.word	0x20000130
 800ac3c:	2000010c 	.word	0x2000010c

0800ac40 <LIS2DUXS12_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LIS2DUXS12_0_Probe(uint32_t Functions)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b094      	sub	sp, #80	@ 0x50
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  LIS2DUXS12_IO_t            io_ctx;
  uint8_t                    id;
  static LIS2DUXS12_Object_t lis2duxs12_obj_0;
  LIS2DUXS12_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2DUXS12_I2C_BUS; /* I2C */
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DUXS12_I2C_ADD_H;
 800ac50:	2333      	movs	r3, #51	@ 0x33
 800ac52:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800ac56:	4b47      	ldr	r3, [pc, #284]	@ (800ad74 <LIS2DUXS12_0_Probe+0x134>)
 800ac58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800ac5a:	4b47      	ldr	r3, [pc, #284]	@ (800ad78 <LIS2DUXS12_0_Probe+0x138>)
 800ac5c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800ac5e:	4b47      	ldr	r3, [pc, #284]	@ (800ad7c <LIS2DUXS12_0_Probe+0x13c>)
 800ac60:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800ac62:	4b47      	ldr	r3, [pc, #284]	@ (800ad80 <LIS2DUXS12_0_Probe+0x140>)
 800ac64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800ac66:	4b47      	ldr	r3, [pc, #284]	@ (800ad84 <LIS2DUXS12_0_Probe+0x144>)
 800ac68:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800ac6a:	4b47      	ldr	r3, [pc, #284]	@ (800ad88 <LIS2DUXS12_0_Probe+0x148>)
 800ac6c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DUXS12_RegisterBusIO(&lis2duxs12_obj_0, &io_ctx) != LIS2DUXS12_OK)
 800ac6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ac72:	4619      	mov	r1, r3
 800ac74:	4845      	ldr	r0, [pc, #276]	@ (800ad8c <LIS2DUXS12_0_Probe+0x14c>)
 800ac76:	f7f6 fe65 	bl	8001944 <LIS2DUXS12_RegisterBusIO>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d003      	beq.n	800ac88 <LIS2DUXS12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ac80:	f06f 0306 	mvn.w	r3, #6
 800ac84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac86:	e070      	b.n	800ad6a <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_Set_Mem_Bank(&lis2duxs12_obj_0, LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 800ac88:	2100      	movs	r1, #0
 800ac8a:	4840      	ldr	r0, [pc, #256]	@ (800ad8c <LIS2DUXS12_0_Probe+0x14c>)
 800ac8c:	f7f7 fad2 	bl	8002234 <LIS2DUXS12_Set_Mem_Bank>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d003      	beq.n	800ac9e <LIS2DUXS12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ac96:	f06f 0306 	mvn.w	r3, #6
 800ac9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ac9c:	e065      	b.n	800ad6a <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_ReadID(&lis2duxs12_obj_0, &id) != LIS2DUXS12_OK)
 800ac9e:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800aca2:	4619      	mov	r1, r3
 800aca4:	4839      	ldr	r0, [pc, #228]	@ (800ad8c <LIS2DUXS12_0_Probe+0x14c>)
 800aca6:	f7f6 ffac 	bl	8001c02 <LIS2DUXS12_ReadID>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d003      	beq.n	800acb8 <LIS2DUXS12_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800acb0:	f06f 0306 	mvn.w	r3, #6
 800acb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acb6:	e058      	b.n	800ad6a <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (id != LIS2DUXS12_ID)
 800acb8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800acbc:	2b47      	cmp	r3, #71	@ 0x47
 800acbe:	d003      	beq.n	800acc8 <LIS2DUXS12_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800acc0:	f06f 0306 	mvn.w	r3, #6
 800acc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acc6:	e050      	b.n	800ad6a <LIS2DUXS12_0_Probe+0x12a>
  }
  else
  {
    (void)LIS2DUXS12_GetCapabilities(&lis2duxs12_obj_0, &cap);
 800acc8:	f107 030c 	add.w	r3, r7, #12
 800accc:	4619      	mov	r1, r3
 800acce:	482f      	ldr	r0, [pc, #188]	@ (800ad8c <LIS2DUXS12_0_Probe+0x14c>)
 800acd0:	f7f6 ffb2 	bl	8001c38 <LIS2DUXS12_GetCapabilities>
    MotionCtx[IKS4A1_LIS2DUXS12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800acd4:	7b7b      	ldrb	r3, [r7, #13]
 800acd6:	461a      	mov	r2, r3
 800acd8:	7b3b      	ldrb	r3, [r7, #12]
 800acda:	005b      	lsls	r3, r3, #1
 800acdc:	431a      	orrs	r2, r3
 800acde:	7bbb      	ldrb	r3, [r7, #14]
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	4313      	orrs	r3, r2
 800ace4:	4a2a      	ldr	r2, [pc, #168]	@ (800ad90 <LIS2DUXS12_0_Probe+0x150>)
 800ace6:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS4A1_LIS2DUXS12_0] = &lis2duxs12_obj_0;
 800ace8:	4b2a      	ldr	r3, [pc, #168]	@ (800ad94 <LIS2DUXS12_0_Probe+0x154>)
 800acea:	4a28      	ldr	r2, [pc, #160]	@ (800ad8c <LIS2DUXS12_0_Probe+0x14c>)
 800acec:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2DUXS12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DUXS12_COMMON_Driver;
 800acee:	4b2a      	ldr	r3, [pc, #168]	@ (800ad98 <LIS2DUXS12_0_Probe+0x158>)
 800acf0:	4a2a      	ldr	r2, [pc, #168]	@ (800ad9c <LIS2DUXS12_0_Probe+0x15c>)
 800acf2:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800acf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d10a      	bne.n	800ad10 <LIS2DUXS12_0_Probe+0xd0>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f003 0301 	and.w	r3, r3, #1
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d005      	beq.n	800ad10 <LIS2DUXS12_0_Probe+0xd0>
 800ad04:	7b7b      	ldrb	r3, [r7, #13]
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d102      	bne.n	800ad10 <LIS2DUXS12_0_Probe+0xd0>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad0a:	f06f 0304 	mvn.w	r3, #4
 800ad0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800ad10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d11e      	bne.n	800ad54 <LIS2DUXS12_0_Probe+0x114>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f003 0302 	and.w	r3, r3, #2
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d019      	beq.n	800ad54 <LIS2DUXS12_0_Probe+0x114>
 800ad20:	7b3b      	ldrb	r3, [r7, #12]
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d116      	bne.n	800ad54 <LIS2DUXS12_0_Probe+0x114>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2DUXS12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800ad26:	4b1e      	ldr	r3, [pc, #120]	@ (800ada0 <LIS2DUXS12_0_Probe+0x160>)
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	4a1e      	ldr	r2, [pc, #120]	@ (800ada4 <LIS2DUXS12_0_Probe+0x164>)
 800ad2c:	3306      	adds	r3, #6
 800ad2e:	491e      	ldr	r1, [pc, #120]	@ (800ada8 <LIS2DUXS12_0_Probe+0x168>)
 800ad30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DUXS12_ACC_Driver;

      if (MotionDrv[IKS4A1_LIS2DUXS12_0]->Init(MotionCompObj[IKS4A1_LIS2DUXS12_0]) != LIS2DUXS12_OK)
 800ad34:	4b18      	ldr	r3, [pc, #96]	@ (800ad98 <LIS2DUXS12_0_Probe+0x158>)
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a16      	ldr	r2, [pc, #88]	@ (800ad94 <LIS2DUXS12_0_Probe+0x154>)
 800ad3c:	6892      	ldr	r2, [r2, #8]
 800ad3e:	4610      	mov	r0, r2
 800ad40:	4798      	blx	r3
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d003      	beq.n	800ad50 <LIS2DUXS12_0_Probe+0x110>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad48:	f06f 0304 	mvn.w	r3, #4
 800ad4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad4e:	e001      	b.n	800ad54 <LIS2DUXS12_0_Probe+0x114>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ad50:	2300      	movs	r3, #0
 800ad52:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800ad54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d107      	bne.n	800ad6a <LIS2DUXS12_0_Probe+0x12a>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f003 0304 	and.w	r3, r3, #4
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d002      	beq.n	800ad6a <LIS2DUXS12_0_Probe+0x12a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ad64:	f06f 0304 	mvn.w	r3, #4
 800ad68:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800ad6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3750      	adds	r7, #80	@ 0x50
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	08001425 	.word	0x08001425
 800ad78:	08001489 	.word	0x08001489
 800ad7c:	0800153d 	.word	0x0800153d
 800ad80:	080014d9 	.word	0x080014d9
 800ad84:	08001649 	.word	0x08001649
 800ad88:	0800b3dd 	.word	0x0800b3dd
 800ad8c:	200005e8 	.word	0x200005e8
 800ad90:	2000056c 	.word	0x2000056c
 800ad94:	2000051c 	.word	0x2000051c
 800ad98:	2000055c 	.word	0x2000055c
 800ad9c:	20000004 	.word	0x20000004
 800ada0:	200001f0 	.word	0x200001f0
 800ada4:	2000052c 	.word	0x2000052c
 800ada8:	20000014 	.word	0x20000014

0800adac <LSM6DSO16IS_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSO16IS_0_Probe(uint32_t Functions)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b094      	sub	sp, #80	@ 0x50
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  LSM6DSO16IS_IO_t            io_ctx;
  uint8_t                     id;
  static LSM6DSO16IS_Object_t lsm6dso16is_obj_0;
  LSM6DSO16IS_Capabilities_t  cap;
  int32_t                     ret = BSP_ERROR_NONE;
 800adb4:	2300      	movs	r3, #0
 800adb6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSO16IS_I2C_BUS; /* I2C */
 800adb8:	2300      	movs	r3, #0
 800adba:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO16IS_I2C_ADD_L;
 800adbc:	23d5      	movs	r3, #213	@ 0xd5
 800adbe:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800adc2:	4b51      	ldr	r3, [pc, #324]	@ (800af08 <LSM6DSO16IS_0_Probe+0x15c>)
 800adc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800adc6:	4b51      	ldr	r3, [pc, #324]	@ (800af0c <LSM6DSO16IS_0_Probe+0x160>)
 800adc8:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800adca:	4b51      	ldr	r3, [pc, #324]	@ (800af10 <LSM6DSO16IS_0_Probe+0x164>)
 800adcc:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800adce:	4b51      	ldr	r3, [pc, #324]	@ (800af14 <LSM6DSO16IS_0_Probe+0x168>)
 800add0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800add2:	4b51      	ldr	r3, [pc, #324]	@ (800af18 <LSM6DSO16IS_0_Probe+0x16c>)
 800add4:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800add6:	4b51      	ldr	r3, [pc, #324]	@ (800af1c <LSM6DSO16IS_0_Probe+0x170>)
 800add8:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO16IS_RegisterBusIO(&lsm6dso16is_obj_0, &io_ctx) != LSM6DSO16IS_OK)
 800adda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800adde:	4619      	mov	r1, r3
 800ade0:	484f      	ldr	r0, [pc, #316]	@ (800af20 <LSM6DSO16IS_0_Probe+0x174>)
 800ade2:	f7fa facd 	bl	8005380 <LSM6DSO16IS_RegisterBusIO>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d003      	beq.n	800adf4 <LSM6DSO16IS_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800adec:	f06f 0306 	mvn.w	r3, #6
 800adf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adf2:	e084      	b.n	800aefe <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_Set_Mem_Bank(&lsm6dso16is_obj_0, LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 800adf4:	2100      	movs	r1, #0
 800adf6:	484a      	ldr	r0, [pc, #296]	@ (800af20 <LSM6DSO16IS_0_Probe+0x174>)
 800adf8:	f7fb f8f3 	bl	8005fe2 <LSM6DSO16IS_Set_Mem_Bank>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d003      	beq.n	800ae0a <LSM6DSO16IS_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ae02:	f06f 0306 	mvn.w	r3, #6
 800ae06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae08:	e079      	b.n	800aefe <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_ReadID(&lsm6dso16is_obj_0, &id) != LSM6DSO16IS_OK)
 800ae0a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800ae0e:	4619      	mov	r1, r3
 800ae10:	4843      	ldr	r0, [pc, #268]	@ (800af20 <LSM6DSO16IS_0_Probe+0x174>)
 800ae12:	f7fa fbb3 	bl	800557c <LSM6DSO16IS_ReadID>
 800ae16:	4603      	mov	r3, r0
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d003      	beq.n	800ae24 <LSM6DSO16IS_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ae1c:	f06f 0306 	mvn.w	r3, #6
 800ae20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae22:	e06c      	b.n	800aefe <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (id != LSM6DSO16IS_ID)
 800ae24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae28:	2b22      	cmp	r3, #34	@ 0x22
 800ae2a:	d003      	beq.n	800ae34 <LSM6DSO16IS_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ae2c:	f06f 0306 	mvn.w	r3, #6
 800ae30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae32:	e064      	b.n	800aefe <LSM6DSO16IS_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSO16IS_GetCapabilities(&lsm6dso16is_obj_0, &cap);
 800ae34:	f107 030c 	add.w	r3, r7, #12
 800ae38:	4619      	mov	r1, r3
 800ae3a:	4839      	ldr	r0, [pc, #228]	@ (800af20 <LSM6DSO16IS_0_Probe+0x174>)
 800ae3c:	f7fa fbb6 	bl	80055ac <LSM6DSO16IS_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSO16IS_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800ae40:	7b7b      	ldrb	r3, [r7, #13]
 800ae42:	461a      	mov	r2, r3
 800ae44:	7b3b      	ldrb	r3, [r7, #12]
 800ae46:	005b      	lsls	r3, r3, #1
 800ae48:	431a      	orrs	r2, r3
 800ae4a:	7bbb      	ldrb	r3, [r7, #14]
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	4a34      	ldr	r2, [pc, #208]	@ (800af24 <LSM6DSO16IS_0_Probe+0x178>)
 800ae52:	60d3      	str	r3, [r2, #12]

    MotionCompObj[IKS4A1_LSM6DSO16IS_0] = &lsm6dso16is_obj_0;
 800ae54:	4b34      	ldr	r3, [pc, #208]	@ (800af28 <LSM6DSO16IS_0_Probe+0x17c>)
 800ae56:	4a32      	ldr	r2, [pc, #200]	@ (800af20 <LSM6DSO16IS_0_Probe+0x174>)
 800ae58:	60da      	str	r2, [r3, #12]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSO16IS_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO16IS_COMMON_Driver;
 800ae5a:	4b34      	ldr	r3, [pc, #208]	@ (800af2c <LSM6DSO16IS_0_Probe+0x180>)
 800ae5c:	4a34      	ldr	r2, [pc, #208]	@ (800af30 <LSM6DSO16IS_0_Probe+0x184>)
 800ae5e:	60da      	str	r2, [r3, #12]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800ae60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d11e      	bne.n	800aea4 <LSM6DSO16IS_0_Probe+0xf8>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f003 0301 	and.w	r3, r3, #1
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d019      	beq.n	800aea4 <LSM6DSO16IS_0_Probe+0xf8>
 800ae70:	7b7b      	ldrb	r3, [r7, #13]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d116      	bne.n	800aea4 <LSM6DSO16IS_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800ae76:	4b2f      	ldr	r3, [pc, #188]	@ (800af34 <LSM6DSO16IS_0_Probe+0x188>)
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	4a2f      	ldr	r2, [pc, #188]	@ (800af38 <LSM6DSO16IS_0_Probe+0x18c>)
 800ae7c:	3309      	adds	r3, #9
 800ae7e:	492f      	ldr	r1, [pc, #188]	@ (800af3c <LSM6DSO16IS_0_Probe+0x190>)
 800ae80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                         void *)&LSM6DSO16IS_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800ae84:	4b29      	ldr	r3, [pc, #164]	@ (800af2c <LSM6DSO16IS_0_Probe+0x180>)
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a27      	ldr	r2, [pc, #156]	@ (800af28 <LSM6DSO16IS_0_Probe+0x17c>)
 800ae8c:	68d2      	ldr	r2, [r2, #12]
 800ae8e:	4610      	mov	r0, r2
 800ae90:	4798      	blx	r3
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d003      	beq.n	800aea0 <LSM6DSO16IS_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ae98:	f06f 0304 	mvn.w	r3, #4
 800ae9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae9e:	e001      	b.n	800aea4 <LSM6DSO16IS_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800aea0:	2300      	movs	r3, #0
 800aea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800aea4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d11e      	bne.n	800aee8 <LSM6DSO16IS_0_Probe+0x13c>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f003 0302 	and.w	r3, r3, #2
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d019      	beq.n	800aee8 <LSM6DSO16IS_0_Probe+0x13c>
 800aeb4:	7b3b      	ldrb	r3, [r7, #12]
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d116      	bne.n	800aee8 <LSM6DSO16IS_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800aeba:	4b1e      	ldr	r3, [pc, #120]	@ (800af34 <LSM6DSO16IS_0_Probe+0x188>)
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	4a1e      	ldr	r2, [pc, #120]	@ (800af38 <LSM6DSO16IS_0_Probe+0x18c>)
 800aec0:	3309      	adds	r3, #9
 800aec2:	491f      	ldr	r1, [pc, #124]	@ (800af40 <LSM6DSO16IS_0_Probe+0x194>)
 800aec4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                             void *)&LSM6DSO16IS_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800aec8:	4b18      	ldr	r3, [pc, #96]	@ (800af2c <LSM6DSO16IS_0_Probe+0x180>)
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a16      	ldr	r2, [pc, #88]	@ (800af28 <LSM6DSO16IS_0_Probe+0x17c>)
 800aed0:	68d2      	ldr	r2, [r2, #12]
 800aed2:	4610      	mov	r0, r2
 800aed4:	4798      	blx	r3
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d003      	beq.n	800aee4 <LSM6DSO16IS_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800aedc:	f06f 0304 	mvn.w	r3, #4
 800aee0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aee2:	e001      	b.n	800aee8 <LSM6DSO16IS_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800aee4:	2300      	movs	r3, #0
 800aee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800aee8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d107      	bne.n	800aefe <LSM6DSO16IS_0_Probe+0x152>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f003 0304 	and.w	r3, r3, #4
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d002      	beq.n	800aefe <LSM6DSO16IS_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800aef8:	f06f 0304 	mvn.w	r3, #4
 800aefc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800aefe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800af00:	4618      	mov	r0, r3
 800af02:	3750      	adds	r7, #80	@ 0x50
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	08001425 	.word	0x08001425
 800af0c:	08001489 	.word	0x08001489
 800af10:	0800153d 	.word	0x0800153d
 800af14:	080014d9 	.word	0x080014d9
 800af18:	08001649 	.word	0x08001649
 800af1c:	0800b3dd 	.word	0x0800b3dd
 800af20:	20000624 	.word	0x20000624
 800af24:	2000056c 	.word	0x2000056c
 800af28:	2000051c 	.word	0x2000051c
 800af2c:	2000055c 	.word	0x2000055c
 800af30:	200000a4 	.word	0x200000a4
 800af34:	200001f0 	.word	0x200001f0
 800af38:	2000052c 	.word	0x2000052c
 800af3c:	200000d8 	.word	0x200000d8
 800af40:	200000b4 	.word	0x200000b4

0800af44 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b082      	sub	sp, #8
 800af48:	af00      	add	r7, sp, #0
 800af4a:	4603      	mov	r3, r0
 800af4c:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800af4e:	79fb      	ldrb	r3, [r7, #7]
 800af50:	4a04      	ldr	r2, [pc, #16]	@ (800af64 <BSP_LED_Init+0x20>)
 800af52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af56:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3708      	adds	r7, #8
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	080122e8 	.word	0x080122e8

0800af68 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 800af68:	b580      	push	{r7, lr}
 800af6a:	b088      	sub	sp, #32
 800af6c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800af6e:	2300      	movs	r3, #0
 800af70:	60bb      	str	r3, [r7, #8]
 800af72:	4b1c      	ldr	r3, [pc, #112]	@ (800afe4 <LED_USER_GPIO_Init+0x7c>)
 800af74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af76:	4a1b      	ldr	r2, [pc, #108]	@ (800afe4 <LED_USER_GPIO_Init+0x7c>)
 800af78:	f043 0301 	orr.w	r3, r3, #1
 800af7c:	6313      	str	r3, [r2, #48]	@ 0x30
 800af7e:	4b19      	ldr	r3, [pc, #100]	@ (800afe4 <LED_USER_GPIO_Init+0x7c>)
 800af80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af82:	f003 0301 	and.w	r3, r3, #1
 800af86:	60bb      	str	r3, [r7, #8]
 800af88:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af8a:	f107 030c 	add.w	r3, r7, #12
 800af8e:	2200      	movs	r2, #0
 800af90:	601a      	str	r2, [r3, #0]
 800af92:	605a      	str	r2, [r3, #4]
 800af94:	609a      	str	r2, [r3, #8]
 800af96:	60da      	str	r2, [r3, #12]
 800af98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800af9a:	2300      	movs	r3, #0
 800af9c:	607b      	str	r3, [r7, #4]
 800af9e:	4b11      	ldr	r3, [pc, #68]	@ (800afe4 <LED_USER_GPIO_Init+0x7c>)
 800afa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afa2:	4a10      	ldr	r2, [pc, #64]	@ (800afe4 <LED_USER_GPIO_Init+0x7c>)
 800afa4:	f043 0301 	orr.w	r3, r3, #1
 800afa8:	6313      	str	r3, [r2, #48]	@ 0x30
 800afaa:	4b0e      	ldr	r3, [pc, #56]	@ (800afe4 <LED_USER_GPIO_Init+0x7c>)
 800afac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	607b      	str	r3, [r7, #4]
 800afb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800afb6:	2200      	movs	r2, #0
 800afb8:	2120      	movs	r1, #32
 800afba:	480b      	ldr	r0, [pc, #44]	@ (800afe8 <LED_USER_GPIO_Init+0x80>)
 800afbc:	f001 f8dc 	bl	800c178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800afc0:	2320      	movs	r3, #32
 800afc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800afc4:	2301      	movs	r3, #1
 800afc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afc8:	2300      	movs	r3, #0
 800afca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afcc:	2300      	movs	r3, #0
 800afce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800afd0:	f107 030c 	add.w	r3, r7, #12
 800afd4:	4619      	mov	r1, r3
 800afd6:	4804      	ldr	r0, [pc, #16]	@ (800afe8 <LED_USER_GPIO_Init+0x80>)
 800afd8:	f000 fe4e 	bl	800bc78 <HAL_GPIO_Init>

}
 800afdc:	bf00      	nop
 800afde:	3720      	adds	r7, #32
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	40023800 	.word	0x40023800
 800afe8:	40020000 	.word	0x40020000

0800afec <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	4603      	mov	r3, r0
 800aff4:	460a      	mov	r2, r1
 800aff6:	71fb      	strb	r3, [r7, #7]
 800aff8:	4613      	mov	r3, r2
 800affa:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800affc:	2300      	movs	r3, #0
 800affe:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800b000:	79fb      	ldrb	r3, [r7, #7]
 800b002:	4a1f      	ldr	r2, [pc, #124]	@ (800b080 <BSP_PB_Init+0x94>)
 800b004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b008:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800b00a:	79bb      	ldrb	r3, [r7, #6]
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d132      	bne.n	800b076 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800b010:	79fb      	ldrb	r3, [r7, #7]
 800b012:	00db      	lsls	r3, r3, #3
 800b014:	4a1b      	ldr	r2, [pc, #108]	@ (800b084 <BSP_PB_Init+0x98>)
 800b016:	441a      	add	r2, r3
 800b018:	79fb      	ldrb	r3, [r7, #7]
 800b01a:	491b      	ldr	r1, [pc, #108]	@ (800b088 <BSP_PB_Init+0x9c>)
 800b01c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b020:	4619      	mov	r1, r3
 800b022:	4610      	mov	r0, r2
 800b024:	f000 fe14 	bl	800bc50 <HAL_EXTI_GetHandle>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d003      	beq.n	800b036 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b02e:	f06f 0303 	mvn.w	r3, #3
 800b032:	60fb      	str	r3, [r7, #12]
 800b034:	e01f      	b.n	800b076 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800b036:	79fb      	ldrb	r3, [r7, #7]
 800b038:	00db      	lsls	r3, r3, #3
 800b03a:	4a12      	ldr	r2, [pc, #72]	@ (800b084 <BSP_PB_Init+0x98>)
 800b03c:	1898      	adds	r0, r3, r2
 800b03e:	79fb      	ldrb	r3, [r7, #7]
 800b040:	4a12      	ldr	r2, [pc, #72]	@ (800b08c <BSP_PB_Init+0xa0>)
 800b042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b046:	461a      	mov	r2, r3
 800b048:	2100      	movs	r1, #0
 800b04a:	f000 fde7 	bl	800bc1c <HAL_EXTI_RegisterCallback>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d003      	beq.n	800b05c <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b054:	f06f 0303 	mvn.w	r3, #3
 800b058:	60fb      	str	r3, [r7, #12]
 800b05a:	e00c      	b.n	800b076 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800b05c:	2028      	movs	r0, #40	@ 0x28
 800b05e:	79fb      	ldrb	r3, [r7, #7]
 800b060:	4a0b      	ldr	r2, [pc, #44]	@ (800b090 <BSP_PB_Init+0xa4>)
 800b062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b066:	2200      	movs	r2, #0
 800b068:	4619      	mov	r1, r3
 800b06a:	f000 fab6 	bl	800b5da <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800b06e:	2328      	movs	r3, #40	@ 0x28
 800b070:	4618      	mov	r0, r3
 800b072:	f000 face 	bl	800b612 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800b076:	68fb      	ldr	r3, [r7, #12]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	080122ec 	.word	0x080122ec
 800b084:	20000214 	.word	0x20000214
 800b088:	080122f0 	.word	0x080122f0
 800b08c:	080122f4 	.word	0x080122f4
 800b090:	080122f8 	.word	0x080122f8

0800b094 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	4603      	mov	r3, r0
 800b09c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800b09e:	79fb      	ldrb	r3, [r7, #7]
 800b0a0:	4a09      	ldr	r2, [pc, #36]	@ (800b0c8 <BSP_PB_GetState+0x34>)
 800b0a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800b0aa:	4611      	mov	r1, r2
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f001 f84b 	bl	800c148 <HAL_GPIO_ReadPin>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	bf0c      	ite	eq
 800b0b8:	2301      	moveq	r3, #1
 800b0ba:	2300      	movne	r3, #0
 800b0bc:	b2db      	uxtb	r3, r3
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	20000210 	.word	0x20000210

0800b0cc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800b0d0:	2000      	movs	r0, #0
 800b0d2:	f004 f8a7 	bl	800f224 <BSP_PB_Callback>
}
 800b0d6:	bf00      	nop
 800b0d8:	bd80      	pop	{r7, pc}
	...

0800b0dc <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b088      	sub	sp, #32
 800b0e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	60bb      	str	r3, [r7, #8]
 800b0e6:	4b1a      	ldr	r3, [pc, #104]	@ (800b150 <BUTTON_USER_GPIO_Init+0x74>)
 800b0e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ea:	4a19      	ldr	r2, [pc, #100]	@ (800b150 <BUTTON_USER_GPIO_Init+0x74>)
 800b0ec:	f043 0304 	orr.w	r3, r3, #4
 800b0f0:	6313      	str	r3, [r2, #48]	@ 0x30
 800b0f2:	4b17      	ldr	r3, [pc, #92]	@ (800b150 <BUTTON_USER_GPIO_Init+0x74>)
 800b0f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0f6:	f003 0304 	and.w	r3, r3, #4
 800b0fa:	60bb      	str	r3, [r7, #8]
 800b0fc:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0fe:	f107 030c 	add.w	r3, r7, #12
 800b102:	2200      	movs	r2, #0
 800b104:	601a      	str	r2, [r3, #0]
 800b106:	605a      	str	r2, [r3, #4]
 800b108:	609a      	str	r2, [r3, #8]
 800b10a:	60da      	str	r2, [r3, #12]
 800b10c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b10e:	2300      	movs	r3, #0
 800b110:	607b      	str	r3, [r7, #4]
 800b112:	4b0f      	ldr	r3, [pc, #60]	@ (800b150 <BUTTON_USER_GPIO_Init+0x74>)
 800b114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b116:	4a0e      	ldr	r2, [pc, #56]	@ (800b150 <BUTTON_USER_GPIO_Init+0x74>)
 800b118:	f043 0304 	orr.w	r3, r3, #4
 800b11c:	6313      	str	r3, [r2, #48]	@ 0x30
 800b11e:	4b0c      	ldr	r3, [pc, #48]	@ (800b150 <BUTTON_USER_GPIO_Init+0x74>)
 800b120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b122:	f003 0304 	and.w	r3, r3, #4
 800b126:	607b      	str	r3, [r7, #4]
 800b128:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800b12a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b12e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800b130:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800b134:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b136:	2300      	movs	r3, #0
 800b138:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800b13a:	f107 030c 	add.w	r3, r7, #12
 800b13e:	4619      	mov	r1, r3
 800b140:	4804      	ldr	r0, [pc, #16]	@ (800b154 <BUTTON_USER_GPIO_Init+0x78>)
 800b142:	f000 fd99 	bl	800bc78 <HAL_GPIO_Init>

}
 800b146:	bf00      	nop
 800b148:	3720      	adds	r7, #32
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	40023800 	.word	0x40023800
 800b154:	40020800 	.word	0x40020800

0800b158 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	4603      	mov	r3, r0
 800b160:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800b162:	2300      	movs	r3, #0
 800b164:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800b166:	79fb      	ldrb	r3, [r7, #7]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d903      	bls.n	800b174 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b16c:	f06f 0301 	mvn.w	r3, #1
 800b170:	60fb      	str	r3, [r7, #12]
 800b172:	e025      	b.n	800b1c0 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800b174:	79fb      	ldrb	r3, [r7, #7]
 800b176:	79fa      	ldrb	r2, [r7, #7]
 800b178:	4914      	ldr	r1, [pc, #80]	@ (800b1cc <BSP_COM_Init+0x74>)
 800b17a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b17e:	4814      	ldr	r0, [pc, #80]	@ (800b1d0 <BSP_COM_Init+0x78>)
 800b180:	4613      	mov	r3, r2
 800b182:	00db      	lsls	r3, r3, #3
 800b184:	4413      	add	r3, r2
 800b186:	00db      	lsls	r3, r3, #3
 800b188:	4403      	add	r3, r0
 800b18a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800b18c:	79fa      	ldrb	r2, [r7, #7]
 800b18e:	4613      	mov	r3, r2
 800b190:	00db      	lsls	r3, r3, #3
 800b192:	4413      	add	r3, r2
 800b194:	00db      	lsls	r3, r3, #3
 800b196:	4a0e      	ldr	r2, [pc, #56]	@ (800b1d0 <BSP_COM_Init+0x78>)
 800b198:	4413      	add	r3, r2
 800b19a:	4618      	mov	r0, r3
 800b19c:	f000 f864 	bl	800b268 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800b1a0:	79fa      	ldrb	r2, [r7, #7]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	00db      	lsls	r3, r3, #3
 800b1a6:	4413      	add	r3, r2
 800b1a8:	00db      	lsls	r3, r3, #3
 800b1aa:	4a09      	ldr	r2, [pc, #36]	@ (800b1d0 <BSP_COM_Init+0x78>)
 800b1ac:	4413      	add	r3, r2
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f000 f810 	bl	800b1d4 <MX_USART2_UART_Init>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d002      	beq.n	800b1c0 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800b1ba:	f06f 0303 	mvn.w	r3, #3
 800b1be:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	2000021c 	.word	0x2000021c
 800b1d0:	2000065c 	.word	0x2000065c

0800b1d4 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4a12      	ldr	r2, [pc, #72]	@ (800b22c <MX_USART2_UART_Init+0x58>)
 800b1e4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800b1ec:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	220c      	movs	r2, #12
 800b204:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f003 f9ed 	bl	800e5f2 <HAL_UART_Init>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d001      	beq.n	800b222 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b222:	7bfb      	ldrb	r3, [r7, #15]
}
 800b224:	4618      	mov	r0, r3
 800b226:	3710      	adds	r7, #16
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}
 800b22c:	40004400 	.word	0x40004400

0800b230 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 800b238:	4b09      	ldr	r3, [pc, #36]	@ (800b260 <__io_putchar+0x30>)
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	461a      	mov	r2, r3
 800b23e:	4613      	mov	r3, r2
 800b240:	00db      	lsls	r3, r3, #3
 800b242:	4413      	add	r3, r2
 800b244:	00db      	lsls	r3, r3, #3
 800b246:	4a07      	ldr	r2, [pc, #28]	@ (800b264 <__io_putchar+0x34>)
 800b248:	1898      	adds	r0, r3, r2
 800b24a:	1d39      	adds	r1, r7, #4
 800b24c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b250:	2201      	movs	r2, #1
 800b252:	f003 fa28 	bl	800e6a6 <HAL_UART_Transmit>
  return ch;
 800b256:	687b      	ldr	r3, [r7, #4]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	200006a4 	.word	0x200006a4
 800b264:	2000065c 	.word	0x2000065c

0800b268 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b08a      	sub	sp, #40	@ 0x28
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800b270:	2300      	movs	r3, #0
 800b272:	613b      	str	r3, [r7, #16]
 800b274:	4b1e      	ldr	r3, [pc, #120]	@ (800b2f0 <USART2_MspInit+0x88>)
 800b276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b278:	4a1d      	ldr	r2, [pc, #116]	@ (800b2f0 <USART2_MspInit+0x88>)
 800b27a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b27e:	6413      	str	r3, [r2, #64]	@ 0x40
 800b280:	4b1b      	ldr	r3, [pc, #108]	@ (800b2f0 <USART2_MspInit+0x88>)
 800b282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b288:	613b      	str	r3, [r7, #16]
 800b28a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b28c:	2300      	movs	r3, #0
 800b28e:	60fb      	str	r3, [r7, #12]
 800b290:	4b17      	ldr	r3, [pc, #92]	@ (800b2f0 <USART2_MspInit+0x88>)
 800b292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b294:	4a16      	ldr	r2, [pc, #88]	@ (800b2f0 <USART2_MspInit+0x88>)
 800b296:	f043 0301 	orr.w	r3, r3, #1
 800b29a:	6313      	str	r3, [r2, #48]	@ 0x30
 800b29c:	4b14      	ldr	r3, [pc, #80]	@ (800b2f0 <USART2_MspInit+0x88>)
 800b29e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2a0:	f003 0301 	and.w	r3, r3, #1
 800b2a4:	60fb      	str	r3, [r7, #12]
 800b2a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800b2a8:	2304      	movs	r3, #4
 800b2aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2ac:	2302      	movs	r3, #2
 800b2ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800b2b8:	2307      	movs	r3, #7
 800b2ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800b2bc:	f107 0314 	add.w	r3, r7, #20
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	480c      	ldr	r0, [pc, #48]	@ (800b2f4 <USART2_MspInit+0x8c>)
 800b2c4:	f000 fcd8 	bl	800bc78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800b2c8:	2308      	movs	r3, #8
 800b2ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2cc:	2302      	movs	r3, #2
 800b2ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800b2d8:	2307      	movs	r3, #7
 800b2da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800b2dc:	f107 0314 	add.w	r3, r7, #20
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	4804      	ldr	r0, [pc, #16]	@ (800b2f4 <USART2_MspInit+0x8c>)
 800b2e4:	f000 fcc8 	bl	800bc78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800b2e8:	bf00      	nop
 800b2ea:	3728      	adds	r7, #40	@ 0x28
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	40023800 	.word	0x40023800
 800b2f4:	40020000 	.word	0x40020000

0800b2f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b2fc:	4b0e      	ldr	r3, [pc, #56]	@ (800b338 <HAL_Init+0x40>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a0d      	ldr	r2, [pc, #52]	@ (800b338 <HAL_Init+0x40>)
 800b302:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b306:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b308:	4b0b      	ldr	r3, [pc, #44]	@ (800b338 <HAL_Init+0x40>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a0a      	ldr	r2, [pc, #40]	@ (800b338 <HAL_Init+0x40>)
 800b30e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b312:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b314:	4b08      	ldr	r3, [pc, #32]	@ (800b338 <HAL_Init+0x40>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a07      	ldr	r2, [pc, #28]	@ (800b338 <HAL_Init+0x40>)
 800b31a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b31e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b320:	2003      	movs	r0, #3
 800b322:	f000 f94f 	bl	800b5c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b326:	2000      	movs	r0, #0
 800b328:	f000 f808 	bl	800b33c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b32c:	f7f5 ff62 	bl	80011f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	40023c00 	.word	0x40023c00

0800b33c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b344:	4b12      	ldr	r3, [pc, #72]	@ (800b390 <HAL_InitTick+0x54>)
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	4b12      	ldr	r3, [pc, #72]	@ (800b394 <HAL_InitTick+0x58>)
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	4619      	mov	r1, r3
 800b34e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b352:	fbb3 f3f1 	udiv	r3, r3, r1
 800b356:	fbb2 f3f3 	udiv	r3, r2, r3
 800b35a:	4618      	mov	r0, r3
 800b35c:	f000 f967 	bl	800b62e <HAL_SYSTICK_Config>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d001      	beq.n	800b36a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e00e      	b.n	800b388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2b0f      	cmp	r3, #15
 800b36e:	d80a      	bhi.n	800b386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b370:	2200      	movs	r2, #0
 800b372:	6879      	ldr	r1, [r7, #4]
 800b374:	f04f 30ff 	mov.w	r0, #4294967295
 800b378:	f000 f92f 	bl	800b5da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b37c:	4a06      	ldr	r2, [pc, #24]	@ (800b398 <HAL_InitTick+0x5c>)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	e000      	b.n	800b388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b386:	2301      	movs	r3, #1
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	20000000 	.word	0x20000000
 800b394:	20000224 	.word	0x20000224
 800b398:	20000220 	.word	0x20000220

0800b39c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b39c:	b480      	push	{r7}
 800b39e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b3a0:	4b06      	ldr	r3, [pc, #24]	@ (800b3bc <HAL_IncTick+0x20>)
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	4b06      	ldr	r3, [pc, #24]	@ (800b3c0 <HAL_IncTick+0x24>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4413      	add	r3, r2
 800b3ac:	4a04      	ldr	r2, [pc, #16]	@ (800b3c0 <HAL_IncTick+0x24>)
 800b3ae:	6013      	str	r3, [r2, #0]
}
 800b3b0:	bf00      	nop
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	20000224 	.word	0x20000224
 800b3c0:	200006a8 	.word	0x200006a8

0800b3c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	af00      	add	r7, sp, #0
  return uwTick;
 800b3c8:	4b03      	ldr	r3, [pc, #12]	@ (800b3d8 <HAL_GetTick+0x14>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	200006a8 	.word	0x200006a8

0800b3dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b3e4:	f7ff ffee 	bl	800b3c4 <HAL_GetTick>
 800b3e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f4:	d005      	beq.n	800b402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b3f6:	4b0a      	ldr	r3, [pc, #40]	@ (800b420 <HAL_Delay+0x44>)
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	4413      	add	r3, r2
 800b400:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b402:	bf00      	nop
 800b404:	f7ff ffde 	bl	800b3c4 <HAL_GetTick>
 800b408:	4602      	mov	r2, r0
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	429a      	cmp	r2, r3
 800b412:	d8f7      	bhi.n	800b404 <HAL_Delay+0x28>
  {
  }
}
 800b414:	bf00      	nop
 800b416:	bf00      	nop
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	20000224 	.word	0x20000224

0800b424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f003 0307 	and.w	r3, r3, #7
 800b432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b434:	4b0c      	ldr	r3, [pc, #48]	@ (800b468 <__NVIC_SetPriorityGrouping+0x44>)
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b440:	4013      	ands	r3, r2
 800b442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b44c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800b450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b456:	4a04      	ldr	r2, [pc, #16]	@ (800b468 <__NVIC_SetPriorityGrouping+0x44>)
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	60d3      	str	r3, [r2, #12]
}
 800b45c:	bf00      	nop
 800b45e:	3714      	adds	r7, #20
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr
 800b468:	e000ed00 	.word	0xe000ed00

0800b46c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b46c:	b480      	push	{r7}
 800b46e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b470:	4b04      	ldr	r3, [pc, #16]	@ (800b484 <__NVIC_GetPriorityGrouping+0x18>)
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	0a1b      	lsrs	r3, r3, #8
 800b476:	f003 0307 	and.w	r3, r3, #7
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr
 800b484:	e000ed00 	.word	0xe000ed00

0800b488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	4603      	mov	r3, r0
 800b490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b496:	2b00      	cmp	r3, #0
 800b498:	db0b      	blt.n	800b4b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b49a:	79fb      	ldrb	r3, [r7, #7]
 800b49c:	f003 021f 	and.w	r2, r3, #31
 800b4a0:	4907      	ldr	r1, [pc, #28]	@ (800b4c0 <__NVIC_EnableIRQ+0x38>)
 800b4a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4a6:	095b      	lsrs	r3, r3, #5
 800b4a8:	2001      	movs	r0, #1
 800b4aa:	fa00 f202 	lsl.w	r2, r0, r2
 800b4ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b4b2:	bf00      	nop
 800b4b4:	370c      	adds	r7, #12
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	e000e100 	.word	0xe000e100

0800b4c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	6039      	str	r1, [r7, #0]
 800b4ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b4d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	db0a      	blt.n	800b4ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	b2da      	uxtb	r2, r3
 800b4dc:	490c      	ldr	r1, [pc, #48]	@ (800b510 <__NVIC_SetPriority+0x4c>)
 800b4de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4e2:	0112      	lsls	r2, r2, #4
 800b4e4:	b2d2      	uxtb	r2, r2
 800b4e6:	440b      	add	r3, r1
 800b4e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b4ec:	e00a      	b.n	800b504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	b2da      	uxtb	r2, r3
 800b4f2:	4908      	ldr	r1, [pc, #32]	@ (800b514 <__NVIC_SetPriority+0x50>)
 800b4f4:	79fb      	ldrb	r3, [r7, #7]
 800b4f6:	f003 030f 	and.w	r3, r3, #15
 800b4fa:	3b04      	subs	r3, #4
 800b4fc:	0112      	lsls	r2, r2, #4
 800b4fe:	b2d2      	uxtb	r2, r2
 800b500:	440b      	add	r3, r1
 800b502:	761a      	strb	r2, [r3, #24]
}
 800b504:	bf00      	nop
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr
 800b510:	e000e100 	.word	0xe000e100
 800b514:	e000ed00 	.word	0xe000ed00

0800b518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b518:	b480      	push	{r7}
 800b51a:	b089      	sub	sp, #36	@ 0x24
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f003 0307 	and.w	r3, r3, #7
 800b52a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	f1c3 0307 	rsb	r3, r3, #7
 800b532:	2b04      	cmp	r3, #4
 800b534:	bf28      	it	cs
 800b536:	2304      	movcs	r3, #4
 800b538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	3304      	adds	r3, #4
 800b53e:	2b06      	cmp	r3, #6
 800b540:	d902      	bls.n	800b548 <NVIC_EncodePriority+0x30>
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	3b03      	subs	r3, #3
 800b546:	e000      	b.n	800b54a <NVIC_EncodePriority+0x32>
 800b548:	2300      	movs	r3, #0
 800b54a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b54c:	f04f 32ff 	mov.w	r2, #4294967295
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	fa02 f303 	lsl.w	r3, r2, r3
 800b556:	43da      	mvns	r2, r3
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	401a      	ands	r2, r3
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b560:	f04f 31ff 	mov.w	r1, #4294967295
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	fa01 f303 	lsl.w	r3, r1, r3
 800b56a:	43d9      	mvns	r1, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b570:	4313      	orrs	r3, r2
         );
}
 800b572:	4618      	mov	r0, r3
 800b574:	3724      	adds	r7, #36	@ 0x24
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr
	...

0800b580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	3b01      	subs	r3, #1
 800b58c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b590:	d301      	bcc.n	800b596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b592:	2301      	movs	r3, #1
 800b594:	e00f      	b.n	800b5b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b596:	4a0a      	ldr	r2, [pc, #40]	@ (800b5c0 <SysTick_Config+0x40>)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	3b01      	subs	r3, #1
 800b59c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b59e:	210f      	movs	r1, #15
 800b5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a4:	f7ff ff8e 	bl	800b4c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b5a8:	4b05      	ldr	r3, [pc, #20]	@ (800b5c0 <SysTick_Config+0x40>)
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b5ae:	4b04      	ldr	r3, [pc, #16]	@ (800b5c0 <SysTick_Config+0x40>)
 800b5b0:	2207      	movs	r2, #7
 800b5b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	e000e010 	.word	0xe000e010

0800b5c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f7ff ff29 	bl	800b424 <__NVIC_SetPriorityGrouping>
}
 800b5d2:	bf00      	nop
 800b5d4:	3708      	adds	r7, #8
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b086      	sub	sp, #24
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	60b9      	str	r1, [r7, #8]
 800b5e4:	607a      	str	r2, [r7, #4]
 800b5e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b5ec:	f7ff ff3e 	bl	800b46c <__NVIC_GetPriorityGrouping>
 800b5f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	68b9      	ldr	r1, [r7, #8]
 800b5f6:	6978      	ldr	r0, [r7, #20]
 800b5f8:	f7ff ff8e 	bl	800b518 <NVIC_EncodePriority>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b602:	4611      	mov	r1, r2
 800b604:	4618      	mov	r0, r3
 800b606:	f7ff ff5d 	bl	800b4c4 <__NVIC_SetPriority>
}
 800b60a:	bf00      	nop
 800b60c:	3718      	adds	r7, #24
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b082      	sub	sp, #8
 800b616:	af00      	add	r7, sp, #0
 800b618:	4603      	mov	r3, r0
 800b61a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b61c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b620:	4618      	mov	r0, r3
 800b622:	f7ff ff31 	bl	800b488 <__NVIC_EnableIRQ>
}
 800b626:	bf00      	nop
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b082      	sub	sp, #8
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7ff ffa2 	bl	800b580 <SysTick_Config>
 800b63c:	4603      	mov	r3, r0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
	...

0800b648 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b086      	sub	sp, #24
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b650:	2300      	movs	r3, #0
 800b652:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b654:	f7ff feb6 	bl	800b3c4 <HAL_GetTick>
 800b658:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d101      	bne.n	800b664 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b660:	2301      	movs	r3, #1
 800b662:	e099      	b.n	800b798 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2202      	movs	r2, #2
 800b668:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f022 0201 	bic.w	r2, r2, #1
 800b682:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b684:	e00f      	b.n	800b6a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b686:	f7ff fe9d 	bl	800b3c4 <HAL_GetTick>
 800b68a:	4602      	mov	r2, r0
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	1ad3      	subs	r3, r2, r3
 800b690:	2b05      	cmp	r3, #5
 800b692:	d908      	bls.n	800b6a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2220      	movs	r2, #32
 800b698:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2203      	movs	r2, #3
 800b69e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800b6a2:	2303      	movs	r3, #3
 800b6a4:	e078      	b.n	800b798 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f003 0301 	and.w	r3, r3, #1
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d1e8      	bne.n	800b686 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b6bc:	697a      	ldr	r2, [r7, #20]
 800b6be:	4b38      	ldr	r3, [pc, #224]	@ (800b7a0 <HAL_DMA_Init+0x158>)
 800b6c0:	4013      	ands	r3, r2
 800b6c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	685a      	ldr	r2, [r3, #4]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b6d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	691b      	ldr	r3, [r3, #16]
 800b6d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b6de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b6ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6a1b      	ldr	r3, [r3, #32]
 800b6f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b6f2:	697a      	ldr	r2, [r7, #20]
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6fc:	2b04      	cmp	r3, #4
 800b6fe:	d107      	bne.n	800b710 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b708:	4313      	orrs	r3, r2
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	697a      	ldr	r2, [r7, #20]
 800b716:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	695b      	ldr	r3, [r3, #20]
 800b71e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	f023 0307 	bic.w	r3, r3, #7
 800b726:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b72c:	697a      	ldr	r2, [r7, #20]
 800b72e:	4313      	orrs	r3, r2
 800b730:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b736:	2b04      	cmp	r3, #4
 800b738:	d117      	bne.n	800b76a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b73e:	697a      	ldr	r2, [r7, #20]
 800b740:	4313      	orrs	r3, r2
 800b742:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00e      	beq.n	800b76a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 f9e9 	bl	800bb24 <DMA_CheckFifoParam>
 800b752:	4603      	mov	r3, r0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d008      	beq.n	800b76a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2240      	movs	r2, #64	@ 0x40
 800b75c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2201      	movs	r2, #1
 800b762:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800b766:	2301      	movs	r3, #1
 800b768:	e016      	b.n	800b798 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	697a      	ldr	r2, [r7, #20]
 800b770:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 f9a0 	bl	800bab8 <DMA_CalcBaseAndBitshift>
 800b778:	4603      	mov	r3, r0
 800b77a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b780:	223f      	movs	r2, #63	@ 0x3f
 800b782:	409a      	lsls	r2, r3
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2201      	movs	r2, #1
 800b792:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3718      	adds	r7, #24
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	f010803f 	.word	0xf010803f

0800b7a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b086      	sub	sp, #24
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b7b0:	4b8e      	ldr	r3, [pc, #568]	@ (800b9ec <HAL_DMA_IRQHandler+0x248>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a8e      	ldr	r2, [pc, #568]	@ (800b9f0 <HAL_DMA_IRQHandler+0x24c>)
 800b7b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b7ba:	0a9b      	lsrs	r3, r3, #10
 800b7bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7ce:	2208      	movs	r2, #8
 800b7d0:	409a      	lsls	r2, r3
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	4013      	ands	r3, r2
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d01a      	beq.n	800b810 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f003 0304 	and.w	r3, r3, #4
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d013      	beq.n	800b810 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f022 0204 	bic.w	r2, r2, #4
 800b7f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7fc:	2208      	movs	r2, #8
 800b7fe:	409a      	lsls	r2, r3
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b808:	f043 0201 	orr.w	r2, r3, #1
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b814:	2201      	movs	r2, #1
 800b816:	409a      	lsls	r2, r3
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	4013      	ands	r3, r2
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d012      	beq.n	800b846 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	695b      	ldr	r3, [r3, #20]
 800b826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00b      	beq.n	800b846 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b832:	2201      	movs	r2, #1
 800b834:	409a      	lsls	r2, r3
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b83e:	f043 0202 	orr.w	r2, r3, #2
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b84a:	2204      	movs	r2, #4
 800b84c:	409a      	lsls	r2, r3
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	4013      	ands	r3, r2
 800b852:	2b00      	cmp	r3, #0
 800b854:	d012      	beq.n	800b87c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 0302 	and.w	r3, r3, #2
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00b      	beq.n	800b87c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b868:	2204      	movs	r2, #4
 800b86a:	409a      	lsls	r2, r3
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b874:	f043 0204 	orr.w	r2, r3, #4
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b880:	2210      	movs	r2, #16
 800b882:	409a      	lsls	r2, r3
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	4013      	ands	r3, r2
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d043      	beq.n	800b914 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f003 0308 	and.w	r3, r3, #8
 800b896:	2b00      	cmp	r3, #0
 800b898:	d03c      	beq.n	800b914 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b89e:	2210      	movs	r2, #16
 800b8a0:	409a      	lsls	r2, r3
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d018      	beq.n	800b8e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d108      	bne.n	800b8d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d024      	beq.n	800b914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	4798      	blx	r3
 800b8d2:	e01f      	b.n	800b914 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d01b      	beq.n	800b914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	4798      	blx	r3
 800b8e4:	e016      	b.n	800b914 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d107      	bne.n	800b904 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f022 0208 	bic.w	r2, r2, #8
 800b902:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d003      	beq.n	800b914 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b918:	2220      	movs	r2, #32
 800b91a:	409a      	lsls	r2, r3
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	4013      	ands	r3, r2
 800b920:	2b00      	cmp	r3, #0
 800b922:	f000 808f 	beq.w	800ba44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f003 0310 	and.w	r3, r3, #16
 800b930:	2b00      	cmp	r3, #0
 800b932:	f000 8087 	beq.w	800ba44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b93a:	2220      	movs	r2, #32
 800b93c:	409a      	lsls	r2, r3
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	2b05      	cmp	r3, #5
 800b94c:	d136      	bne.n	800b9bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f022 0216 	bic.w	r2, r2, #22
 800b95c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	695a      	ldr	r2, [r3, #20]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b96c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b972:	2b00      	cmp	r3, #0
 800b974:	d103      	bne.n	800b97e <HAL_DMA_IRQHandler+0x1da>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d007      	beq.n	800b98e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f022 0208 	bic.w	r2, r2, #8
 800b98c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b992:	223f      	movs	r2, #63	@ 0x3f
 800b994:	409a      	lsls	r2, r3
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2201      	movs	r2, #1
 800b99e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d07e      	beq.n	800bab0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	4798      	blx	r3
        }
        return;
 800b9ba:	e079      	b.n	800bab0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d01d      	beq.n	800ba06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d10d      	bne.n	800b9f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d031      	beq.n	800ba44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	4798      	blx	r3
 800b9e8:	e02c      	b.n	800ba44 <HAL_DMA_IRQHandler+0x2a0>
 800b9ea:	bf00      	nop
 800b9ec:	20000000 	.word	0x20000000
 800b9f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d023      	beq.n	800ba44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	4798      	blx	r3
 800ba04:	e01e      	b.n	800ba44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d10f      	bne.n	800ba34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f022 0210 	bic.w	r2, r2, #16
 800ba22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d003      	beq.n	800ba44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d032      	beq.n	800bab2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba50:	f003 0301 	and.w	r3, r3, #1
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d022      	beq.n	800ba9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2205      	movs	r2, #5
 800ba5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f022 0201 	bic.w	r2, r2, #1
 800ba6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	3301      	adds	r3, #1
 800ba74:	60bb      	str	r3, [r7, #8]
 800ba76:	697a      	ldr	r2, [r7, #20]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d307      	bcc.n	800ba8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f003 0301 	and.w	r3, r3, #1
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1f2      	bne.n	800ba70 <HAL_DMA_IRQHandler+0x2cc>
 800ba8a:	e000      	b.n	800ba8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800ba8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2201      	movs	r2, #1
 800ba92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d005      	beq.n	800bab2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	4798      	blx	r3
 800baae:	e000      	b.n	800bab2 <HAL_DMA_IRQHandler+0x30e>
        return;
 800bab0:	bf00      	nop
    }
  }
}
 800bab2:	3718      	adds	r7, #24
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	3b10      	subs	r3, #16
 800bac8:	4a14      	ldr	r2, [pc, #80]	@ (800bb1c <DMA_CalcBaseAndBitshift+0x64>)
 800baca:	fba2 2303 	umull	r2, r3, r2, r3
 800bace:	091b      	lsrs	r3, r3, #4
 800bad0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bad2:	4a13      	ldr	r2, [pc, #76]	@ (800bb20 <DMA_CalcBaseAndBitshift+0x68>)
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	4413      	add	r3, r2
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	461a      	mov	r2, r3
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2b03      	cmp	r3, #3
 800bae4:	d909      	bls.n	800bafa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800baee:	f023 0303 	bic.w	r3, r3, #3
 800baf2:	1d1a      	adds	r2, r3, #4
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	659a      	str	r2, [r3, #88]	@ 0x58
 800baf8:	e007      	b.n	800bb0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800bb02:	f023 0303 	bic.w	r3, r3, #3
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	aaaaaaab 	.word	0xaaaaaaab
 800bb20:	080122fc 	.word	0x080122fc

0800bb24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	699b      	ldr	r3, [r3, #24]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d11f      	bne.n	800bb7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	2b03      	cmp	r3, #3
 800bb42:	d856      	bhi.n	800bbf2 <DMA_CheckFifoParam+0xce>
 800bb44:	a201      	add	r2, pc, #4	@ (adr r2, 800bb4c <DMA_CheckFifoParam+0x28>)
 800bb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb4a:	bf00      	nop
 800bb4c:	0800bb5d 	.word	0x0800bb5d
 800bb50:	0800bb6f 	.word	0x0800bb6f
 800bb54:	0800bb5d 	.word	0x0800bb5d
 800bb58:	0800bbf3 	.word	0x0800bbf3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d046      	beq.n	800bbf6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bb6c:	e043      	b.n	800bbf6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb72:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800bb76:	d140      	bne.n	800bbfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bb7c:	e03d      	b.n	800bbfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	699b      	ldr	r3, [r3, #24]
 800bb82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb86:	d121      	bne.n	800bbcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	2b03      	cmp	r3, #3
 800bb8c:	d837      	bhi.n	800bbfe <DMA_CheckFifoParam+0xda>
 800bb8e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb94 <DMA_CheckFifoParam+0x70>)
 800bb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb94:	0800bba5 	.word	0x0800bba5
 800bb98:	0800bbab 	.word	0x0800bbab
 800bb9c:	0800bba5 	.word	0x0800bba5
 800bba0:	0800bbbd 	.word	0x0800bbbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	73fb      	strb	r3, [r7, #15]
      break;
 800bba8:	e030      	b.n	800bc0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d025      	beq.n	800bc02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bbba:	e022      	b.n	800bc02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800bbc4:	d11f      	bne.n	800bc06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bbca:	e01c      	b.n	800bc06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	2b02      	cmp	r3, #2
 800bbd0:	d903      	bls.n	800bbda <DMA_CheckFifoParam+0xb6>
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	2b03      	cmp	r3, #3
 800bbd6:	d003      	beq.n	800bbe0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bbd8:	e018      	b.n	800bc0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	73fb      	strb	r3, [r7, #15]
      break;
 800bbde:	e015      	b.n	800bc0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbe4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d00e      	beq.n	800bc0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800bbec:	2301      	movs	r3, #1
 800bbee:	73fb      	strb	r3, [r7, #15]
      break;
 800bbf0:	e00b      	b.n	800bc0a <DMA_CheckFifoParam+0xe6>
      break;
 800bbf2:	bf00      	nop
 800bbf4:	e00a      	b.n	800bc0c <DMA_CheckFifoParam+0xe8>
      break;
 800bbf6:	bf00      	nop
 800bbf8:	e008      	b.n	800bc0c <DMA_CheckFifoParam+0xe8>
      break;
 800bbfa:	bf00      	nop
 800bbfc:	e006      	b.n	800bc0c <DMA_CheckFifoParam+0xe8>
      break;
 800bbfe:	bf00      	nop
 800bc00:	e004      	b.n	800bc0c <DMA_CheckFifoParam+0xe8>
      break;
 800bc02:	bf00      	nop
 800bc04:	e002      	b.n	800bc0c <DMA_CheckFifoParam+0xe8>
      break;   
 800bc06:	bf00      	nop
 800bc08:	e000      	b.n	800bc0c <DMA_CheckFifoParam+0xe8>
      break;
 800bc0a:	bf00      	nop
    }
  } 
  
  return status; 
 800bc0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3714      	adds	r7, #20
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop

0800bc1c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b087      	sub	sp, #28
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	460b      	mov	r3, r1
 800bc26:	607a      	str	r2, [r7, #4]
 800bc28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800bc2e:	7afb      	ldrb	r3, [r7, #11]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d103      	bne.n	800bc3c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	605a      	str	r2, [r3, #4]
      break;
 800bc3a:	e002      	b.n	800bc42 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	75fb      	strb	r3, [r7, #23]
      break;
 800bc40:	bf00      	nop
  }

  return status;
 800bc42:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	371c      	adds	r7, #28
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d101      	bne.n	800bc64 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	e003      	b.n	800bc6c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800bc6a:	2300      	movs	r3, #0
  }
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b089      	sub	sp, #36	@ 0x24
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bc82:	2300      	movs	r3, #0
 800bc84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bc86:	2300      	movs	r3, #0
 800bc88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bc8e:	2300      	movs	r3, #0
 800bc90:	61fb      	str	r3, [r7, #28]
 800bc92:	e159      	b.n	800bf48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bc94:	2201      	movs	r2, #1
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	fa02 f303 	lsl.w	r3, r2, r3
 800bc9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	697a      	ldr	r2, [r7, #20]
 800bca4:	4013      	ands	r3, r2
 800bca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bca8:	693a      	ldr	r2, [r7, #16]
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	f040 8148 	bne.w	800bf42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	f003 0303 	and.w	r3, r3, #3
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d005      	beq.n	800bcca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d130      	bne.n	800bd2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	005b      	lsls	r3, r3, #1
 800bcd4:	2203      	movs	r2, #3
 800bcd6:	fa02 f303 	lsl.w	r3, r2, r3
 800bcda:	43db      	mvns	r3, r3
 800bcdc:	69ba      	ldr	r2, [r7, #24]
 800bcde:	4013      	ands	r3, r2
 800bce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	68da      	ldr	r2, [r3, #12]
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	005b      	lsls	r3, r3, #1
 800bcea:	fa02 f303 	lsl.w	r3, r2, r3
 800bcee:	69ba      	ldr	r2, [r7, #24]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	69ba      	ldr	r2, [r7, #24]
 800bcf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bd00:	2201      	movs	r2, #1
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	fa02 f303 	lsl.w	r3, r2, r3
 800bd08:	43db      	mvns	r3, r3
 800bd0a:	69ba      	ldr	r2, [r7, #24]
 800bd0c:	4013      	ands	r3, r2
 800bd0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	091b      	lsrs	r3, r3, #4
 800bd16:	f003 0201 	and.w	r2, r3, #1
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd20:	69ba      	ldr	r2, [r7, #24]
 800bd22:	4313      	orrs	r3, r2
 800bd24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	69ba      	ldr	r2, [r7, #24]
 800bd2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	f003 0303 	and.w	r3, r3, #3
 800bd34:	2b03      	cmp	r3, #3
 800bd36:	d017      	beq.n	800bd68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	005b      	lsls	r3, r3, #1
 800bd42:	2203      	movs	r2, #3
 800bd44:	fa02 f303 	lsl.w	r3, r2, r3
 800bd48:	43db      	mvns	r3, r3
 800bd4a:	69ba      	ldr	r2, [r7, #24]
 800bd4c:	4013      	ands	r3, r2
 800bd4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	689a      	ldr	r2, [r3, #8]
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	005b      	lsls	r3, r3, #1
 800bd58:	fa02 f303 	lsl.w	r3, r2, r3
 800bd5c:	69ba      	ldr	r2, [r7, #24]
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	69ba      	ldr	r2, [r7, #24]
 800bd66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	685b      	ldr	r3, [r3, #4]
 800bd6c:	f003 0303 	and.w	r3, r3, #3
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	d123      	bne.n	800bdbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	08da      	lsrs	r2, r3, #3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	3208      	adds	r2, #8
 800bd7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	f003 0307 	and.w	r3, r3, #7
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	220f      	movs	r2, #15
 800bd8c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd90:	43db      	mvns	r3, r3
 800bd92:	69ba      	ldr	r2, [r7, #24]
 800bd94:	4013      	ands	r3, r2
 800bd96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	691a      	ldr	r2, [r3, #16]
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	f003 0307 	and.w	r3, r3, #7
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	fa02 f303 	lsl.w	r3, r2, r3
 800bda8:	69ba      	ldr	r2, [r7, #24]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	08da      	lsrs	r2, r3, #3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	3208      	adds	r2, #8
 800bdb6:	69b9      	ldr	r1, [r7, #24]
 800bdb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	005b      	lsls	r3, r3, #1
 800bdc6:	2203      	movs	r2, #3
 800bdc8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdcc:	43db      	mvns	r3, r3
 800bdce:	69ba      	ldr	r2, [r7, #24]
 800bdd0:	4013      	ands	r3, r2
 800bdd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	f003 0203 	and.w	r2, r3, #3
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	005b      	lsls	r3, r3, #1
 800bde0:	fa02 f303 	lsl.w	r3, r2, r3
 800bde4:	69ba      	ldr	r2, [r7, #24]
 800bde6:	4313      	orrs	r3, r2
 800bde8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	69ba      	ldr	r2, [r7, #24]
 800bdee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f000 80a2 	beq.w	800bf42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bdfe:	2300      	movs	r3, #0
 800be00:	60fb      	str	r3, [r7, #12]
 800be02:	4b57      	ldr	r3, [pc, #348]	@ (800bf60 <HAL_GPIO_Init+0x2e8>)
 800be04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be06:	4a56      	ldr	r2, [pc, #344]	@ (800bf60 <HAL_GPIO_Init+0x2e8>)
 800be08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800be0c:	6453      	str	r3, [r2, #68]	@ 0x44
 800be0e:	4b54      	ldr	r3, [pc, #336]	@ (800bf60 <HAL_GPIO_Init+0x2e8>)
 800be10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800be16:	60fb      	str	r3, [r7, #12]
 800be18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800be1a:	4a52      	ldr	r2, [pc, #328]	@ (800bf64 <HAL_GPIO_Init+0x2ec>)
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	089b      	lsrs	r3, r3, #2
 800be20:	3302      	adds	r3, #2
 800be22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	f003 0303 	and.w	r3, r3, #3
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	220f      	movs	r2, #15
 800be32:	fa02 f303 	lsl.w	r3, r2, r3
 800be36:	43db      	mvns	r3, r3
 800be38:	69ba      	ldr	r2, [r7, #24]
 800be3a:	4013      	ands	r3, r2
 800be3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4a49      	ldr	r2, [pc, #292]	@ (800bf68 <HAL_GPIO_Init+0x2f0>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d019      	beq.n	800be7a <HAL_GPIO_Init+0x202>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4a48      	ldr	r2, [pc, #288]	@ (800bf6c <HAL_GPIO_Init+0x2f4>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d013      	beq.n	800be76 <HAL_GPIO_Init+0x1fe>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	4a47      	ldr	r2, [pc, #284]	@ (800bf70 <HAL_GPIO_Init+0x2f8>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d00d      	beq.n	800be72 <HAL_GPIO_Init+0x1fa>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4a46      	ldr	r2, [pc, #280]	@ (800bf74 <HAL_GPIO_Init+0x2fc>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d007      	beq.n	800be6e <HAL_GPIO_Init+0x1f6>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a45      	ldr	r2, [pc, #276]	@ (800bf78 <HAL_GPIO_Init+0x300>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d101      	bne.n	800be6a <HAL_GPIO_Init+0x1f2>
 800be66:	2304      	movs	r3, #4
 800be68:	e008      	b.n	800be7c <HAL_GPIO_Init+0x204>
 800be6a:	2307      	movs	r3, #7
 800be6c:	e006      	b.n	800be7c <HAL_GPIO_Init+0x204>
 800be6e:	2303      	movs	r3, #3
 800be70:	e004      	b.n	800be7c <HAL_GPIO_Init+0x204>
 800be72:	2302      	movs	r3, #2
 800be74:	e002      	b.n	800be7c <HAL_GPIO_Init+0x204>
 800be76:	2301      	movs	r3, #1
 800be78:	e000      	b.n	800be7c <HAL_GPIO_Init+0x204>
 800be7a:	2300      	movs	r3, #0
 800be7c:	69fa      	ldr	r2, [r7, #28]
 800be7e:	f002 0203 	and.w	r2, r2, #3
 800be82:	0092      	lsls	r2, r2, #2
 800be84:	4093      	lsls	r3, r2
 800be86:	69ba      	ldr	r2, [r7, #24]
 800be88:	4313      	orrs	r3, r2
 800be8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800be8c:	4935      	ldr	r1, [pc, #212]	@ (800bf64 <HAL_GPIO_Init+0x2ec>)
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	089b      	lsrs	r3, r3, #2
 800be92:	3302      	adds	r3, #2
 800be94:	69ba      	ldr	r2, [r7, #24]
 800be96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800be9a:	4b38      	ldr	r3, [pc, #224]	@ (800bf7c <HAL_GPIO_Init+0x304>)
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	43db      	mvns	r3, r3
 800bea4:	69ba      	ldr	r2, [r7, #24]
 800bea6:	4013      	ands	r3, r2
 800bea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d003      	beq.n	800bebe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800beb6:	69ba      	ldr	r2, [r7, #24]
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	4313      	orrs	r3, r2
 800bebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bebe:	4a2f      	ldr	r2, [pc, #188]	@ (800bf7c <HAL_GPIO_Init+0x304>)
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bec4:	4b2d      	ldr	r3, [pc, #180]	@ (800bf7c <HAL_GPIO_Init+0x304>)
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	43db      	mvns	r3, r3
 800bece:	69ba      	ldr	r2, [r7, #24]
 800bed0:	4013      	ands	r3, r2
 800bed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d003      	beq.n	800bee8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800bee0:	69ba      	ldr	r2, [r7, #24]
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	4313      	orrs	r3, r2
 800bee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bee8:	4a24      	ldr	r2, [pc, #144]	@ (800bf7c <HAL_GPIO_Init+0x304>)
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800beee:	4b23      	ldr	r3, [pc, #140]	@ (800bf7c <HAL_GPIO_Init+0x304>)
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	43db      	mvns	r3, r3
 800bef8:	69ba      	ldr	r2, [r7, #24]
 800befa:	4013      	ands	r3, r2
 800befc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800bf0a:	69ba      	ldr	r2, [r7, #24]
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bf12:	4a1a      	ldr	r2, [pc, #104]	@ (800bf7c <HAL_GPIO_Init+0x304>)
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bf18:	4b18      	ldr	r3, [pc, #96]	@ (800bf7c <HAL_GPIO_Init+0x304>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	43db      	mvns	r3, r3
 800bf22:	69ba      	ldr	r2, [r7, #24]
 800bf24:	4013      	ands	r3, r2
 800bf26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d003      	beq.n	800bf3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800bf34:	69ba      	ldr	r2, [r7, #24]
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bf3c:	4a0f      	ldr	r2, [pc, #60]	@ (800bf7c <HAL_GPIO_Init+0x304>)
 800bf3e:	69bb      	ldr	r3, [r7, #24]
 800bf40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	3301      	adds	r3, #1
 800bf46:	61fb      	str	r3, [r7, #28]
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	2b0f      	cmp	r3, #15
 800bf4c:	f67f aea2 	bls.w	800bc94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800bf50:	bf00      	nop
 800bf52:	bf00      	nop
 800bf54:	3724      	adds	r7, #36	@ 0x24
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	40023800 	.word	0x40023800
 800bf64:	40013800 	.word	0x40013800
 800bf68:	40020000 	.word	0x40020000
 800bf6c:	40020400 	.word	0x40020400
 800bf70:	40020800 	.word	0x40020800
 800bf74:	40020c00 	.word	0x40020c00
 800bf78:	40021000 	.word	0x40021000
 800bf7c:	40013c00 	.word	0x40013c00

0800bf80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b087      	sub	sp, #28
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800bf92:	2300      	movs	r3, #0
 800bf94:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bf96:	2300      	movs	r3, #0
 800bf98:	617b      	str	r3, [r7, #20]
 800bf9a:	e0bb      	b.n	800c114 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfa4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800bfa6:	683a      	ldr	r2, [r7, #0]
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	4013      	ands	r3, r2
 800bfac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800bfae:	68fa      	ldr	r2, [r7, #12]
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	f040 80ab 	bne.w	800c10e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800bfb8:	4a5c      	ldr	r2, [pc, #368]	@ (800c12c <HAL_GPIO_DeInit+0x1ac>)
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	089b      	lsrs	r3, r3, #2
 800bfbe:	3302      	adds	r3, #2
 800bfc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfc4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	f003 0303 	and.w	r3, r3, #3
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	220f      	movs	r2, #15
 800bfd0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfd4:	68ba      	ldr	r2, [r7, #8]
 800bfd6:	4013      	ands	r3, r2
 800bfd8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4a54      	ldr	r2, [pc, #336]	@ (800c130 <HAL_GPIO_DeInit+0x1b0>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d019      	beq.n	800c016 <HAL_GPIO_DeInit+0x96>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	4a53      	ldr	r2, [pc, #332]	@ (800c134 <HAL_GPIO_DeInit+0x1b4>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d013      	beq.n	800c012 <HAL_GPIO_DeInit+0x92>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4a52      	ldr	r2, [pc, #328]	@ (800c138 <HAL_GPIO_DeInit+0x1b8>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d00d      	beq.n	800c00e <HAL_GPIO_DeInit+0x8e>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	4a51      	ldr	r2, [pc, #324]	@ (800c13c <HAL_GPIO_DeInit+0x1bc>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d007      	beq.n	800c00a <HAL_GPIO_DeInit+0x8a>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	4a50      	ldr	r2, [pc, #320]	@ (800c140 <HAL_GPIO_DeInit+0x1c0>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d101      	bne.n	800c006 <HAL_GPIO_DeInit+0x86>
 800c002:	2304      	movs	r3, #4
 800c004:	e008      	b.n	800c018 <HAL_GPIO_DeInit+0x98>
 800c006:	2307      	movs	r3, #7
 800c008:	e006      	b.n	800c018 <HAL_GPIO_DeInit+0x98>
 800c00a:	2303      	movs	r3, #3
 800c00c:	e004      	b.n	800c018 <HAL_GPIO_DeInit+0x98>
 800c00e:	2302      	movs	r3, #2
 800c010:	e002      	b.n	800c018 <HAL_GPIO_DeInit+0x98>
 800c012:	2301      	movs	r3, #1
 800c014:	e000      	b.n	800c018 <HAL_GPIO_DeInit+0x98>
 800c016:	2300      	movs	r3, #0
 800c018:	697a      	ldr	r2, [r7, #20]
 800c01a:	f002 0203 	and.w	r2, r2, #3
 800c01e:	0092      	lsls	r2, r2, #2
 800c020:	4093      	lsls	r3, r2
 800c022:	68ba      	ldr	r2, [r7, #8]
 800c024:	429a      	cmp	r2, r3
 800c026:	d132      	bne.n	800c08e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800c028:	4b46      	ldr	r3, [pc, #280]	@ (800c144 <HAL_GPIO_DeInit+0x1c4>)
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	43db      	mvns	r3, r3
 800c030:	4944      	ldr	r1, [pc, #272]	@ (800c144 <HAL_GPIO_DeInit+0x1c4>)
 800c032:	4013      	ands	r3, r2
 800c034:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800c036:	4b43      	ldr	r3, [pc, #268]	@ (800c144 <HAL_GPIO_DeInit+0x1c4>)
 800c038:	685a      	ldr	r2, [r3, #4]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	43db      	mvns	r3, r3
 800c03e:	4941      	ldr	r1, [pc, #260]	@ (800c144 <HAL_GPIO_DeInit+0x1c4>)
 800c040:	4013      	ands	r3, r2
 800c042:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800c044:	4b3f      	ldr	r3, [pc, #252]	@ (800c144 <HAL_GPIO_DeInit+0x1c4>)
 800c046:	68da      	ldr	r2, [r3, #12]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	43db      	mvns	r3, r3
 800c04c:	493d      	ldr	r1, [pc, #244]	@ (800c144 <HAL_GPIO_DeInit+0x1c4>)
 800c04e:	4013      	ands	r3, r2
 800c050:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800c052:	4b3c      	ldr	r3, [pc, #240]	@ (800c144 <HAL_GPIO_DeInit+0x1c4>)
 800c054:	689a      	ldr	r2, [r3, #8]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	43db      	mvns	r3, r3
 800c05a:	493a      	ldr	r1, [pc, #232]	@ (800c144 <HAL_GPIO_DeInit+0x1c4>)
 800c05c:	4013      	ands	r3, r2
 800c05e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	f003 0303 	and.w	r3, r3, #3
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	220f      	movs	r2, #15
 800c06a:	fa02 f303 	lsl.w	r3, r2, r3
 800c06e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c070:	4a2e      	ldr	r2, [pc, #184]	@ (800c12c <HAL_GPIO_DeInit+0x1ac>)
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	089b      	lsrs	r3, r3, #2
 800c076:	3302      	adds	r3, #2
 800c078:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	43da      	mvns	r2, r3
 800c080:	482a      	ldr	r0, [pc, #168]	@ (800c12c <HAL_GPIO_DeInit+0x1ac>)
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	089b      	lsrs	r3, r3, #2
 800c086:	400a      	ands	r2, r1
 800c088:	3302      	adds	r3, #2
 800c08a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	005b      	lsls	r3, r3, #1
 800c096:	2103      	movs	r1, #3
 800c098:	fa01 f303 	lsl.w	r3, r1, r3
 800c09c:	43db      	mvns	r3, r3
 800c09e:	401a      	ands	r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	08da      	lsrs	r2, r3, #3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	3208      	adds	r2, #8
 800c0ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	f003 0307 	and.w	r3, r3, #7
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	220f      	movs	r2, #15
 800c0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c0be:	43db      	mvns	r3, r3
 800c0c0:	697a      	ldr	r2, [r7, #20]
 800c0c2:	08d2      	lsrs	r2, r2, #3
 800c0c4:	4019      	ands	r1, r3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	3208      	adds	r2, #8
 800c0ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	68da      	ldr	r2, [r3, #12]
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	005b      	lsls	r3, r3, #1
 800c0d6:	2103      	movs	r1, #3
 800c0d8:	fa01 f303 	lsl.w	r3, r1, r3
 800c0dc:	43db      	mvns	r3, r3
 800c0de:	401a      	ands	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	685a      	ldr	r2, [r3, #4]
 800c0e8:	2101      	movs	r1, #1
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	fa01 f303 	lsl.w	r3, r1, r3
 800c0f0:	43db      	mvns	r3, r3
 800c0f2:	401a      	ands	r2, r3
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	689a      	ldr	r2, [r3, #8]
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	005b      	lsls	r3, r3, #1
 800c100:	2103      	movs	r1, #3
 800c102:	fa01 f303 	lsl.w	r3, r1, r3
 800c106:	43db      	mvns	r3, r3
 800c108:	401a      	ands	r2, r3
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	3301      	adds	r3, #1
 800c112:	617b      	str	r3, [r7, #20]
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	2b0f      	cmp	r3, #15
 800c118:	f67f af40 	bls.w	800bf9c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800c11c:	bf00      	nop
 800c11e:	bf00      	nop
 800c120:	371c      	adds	r7, #28
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop
 800c12c:	40013800 	.word	0x40013800
 800c130:	40020000 	.word	0x40020000
 800c134:	40020400 	.word	0x40020400
 800c138:	40020800 	.word	0x40020800
 800c13c:	40020c00 	.word	0x40020c00
 800c140:	40021000 	.word	0x40021000
 800c144:	40013c00 	.word	0x40013c00

0800c148 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c148:	b480      	push	{r7}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	460b      	mov	r3, r1
 800c152:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	691a      	ldr	r2, [r3, #16]
 800c158:	887b      	ldrh	r3, [r7, #2]
 800c15a:	4013      	ands	r3, r2
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d002      	beq.n	800c166 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c160:	2301      	movs	r3, #1
 800c162:	73fb      	strb	r3, [r7, #15]
 800c164:	e001      	b.n	800c16a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c166:	2300      	movs	r3, #0
 800c168:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3714      	adds	r7, #20
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	460b      	mov	r3, r1
 800c182:	807b      	strh	r3, [r7, #2]
 800c184:	4613      	mov	r3, r2
 800c186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c188:	787b      	ldrb	r3, [r7, #1]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d003      	beq.n	800c196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c18e:	887a      	ldrh	r2, [r7, #2]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c194:	e003      	b.n	800c19e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c196:	887b      	ldrh	r3, [r7, #2]
 800c198:	041a      	lsls	r2, r3, #16
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	619a      	str	r2, [r3, #24]
}
 800c19e:	bf00      	nop
 800c1a0:	370c      	adds	r7, #12
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr
	...

0800c1ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b084      	sub	sp, #16
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d101      	bne.n	800c1be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	e12b      	b.n	800c416 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d106      	bne.n	800c1d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 f95d 	bl	800c492 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2224      	movs	r2, #36	@ 0x24
 800c1dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f022 0201 	bic.w	r2, r2, #1
 800c1ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	681a      	ldr	r2, [r3, #0]
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c1fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c20e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c210:	f002 f93e 	bl	800e490 <HAL_RCC_GetPCLK1Freq>
 800c214:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	4a81      	ldr	r2, [pc, #516]	@ (800c420 <HAL_I2C_Init+0x274>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d807      	bhi.n	800c230 <HAL_I2C_Init+0x84>
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	4a80      	ldr	r2, [pc, #512]	@ (800c424 <HAL_I2C_Init+0x278>)
 800c224:	4293      	cmp	r3, r2
 800c226:	bf94      	ite	ls
 800c228:	2301      	movls	r3, #1
 800c22a:	2300      	movhi	r3, #0
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	e006      	b.n	800c23e <HAL_I2C_Init+0x92>
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	4a7d      	ldr	r2, [pc, #500]	@ (800c428 <HAL_I2C_Init+0x27c>)
 800c234:	4293      	cmp	r3, r2
 800c236:	bf94      	ite	ls
 800c238:	2301      	movls	r3, #1
 800c23a:	2300      	movhi	r3, #0
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d001      	beq.n	800c246 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c242:	2301      	movs	r3, #1
 800c244:	e0e7      	b.n	800c416 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	4a78      	ldr	r2, [pc, #480]	@ (800c42c <HAL_I2C_Init+0x280>)
 800c24a:	fba2 2303 	umull	r2, r3, r2, r3
 800c24e:	0c9b      	lsrs	r3, r3, #18
 800c250:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	68ba      	ldr	r2, [r7, #8]
 800c262:	430a      	orrs	r2, r1
 800c264:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	6a1b      	ldr	r3, [r3, #32]
 800c26c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	4a6a      	ldr	r2, [pc, #424]	@ (800c420 <HAL_I2C_Init+0x274>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d802      	bhi.n	800c280 <HAL_I2C_Init+0xd4>
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	3301      	adds	r3, #1
 800c27e:	e009      	b.n	800c294 <HAL_I2C_Init+0xe8>
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800c286:	fb02 f303 	mul.w	r3, r2, r3
 800c28a:	4a69      	ldr	r2, [pc, #420]	@ (800c430 <HAL_I2C_Init+0x284>)
 800c28c:	fba2 2303 	umull	r2, r3, r2, r3
 800c290:	099b      	lsrs	r3, r3, #6
 800c292:	3301      	adds	r3, #1
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	6812      	ldr	r2, [r2, #0]
 800c298:	430b      	orrs	r3, r1
 800c29a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	69db      	ldr	r3, [r3, #28]
 800c2a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800c2a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	495c      	ldr	r1, [pc, #368]	@ (800c420 <HAL_I2C_Init+0x274>)
 800c2b0:	428b      	cmp	r3, r1
 800c2b2:	d819      	bhi.n	800c2e8 <HAL_I2C_Init+0x13c>
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	1e59      	subs	r1, r3, #1
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	005b      	lsls	r3, r3, #1
 800c2be:	fbb1 f3f3 	udiv	r3, r1, r3
 800c2c2:	1c59      	adds	r1, r3, #1
 800c2c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c2c8:	400b      	ands	r3, r1
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d00a      	beq.n	800c2e4 <HAL_I2C_Init+0x138>
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	1e59      	subs	r1, r3, #1
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	005b      	lsls	r3, r3, #1
 800c2d8:	fbb1 f3f3 	udiv	r3, r1, r3
 800c2dc:	3301      	adds	r3, #1
 800c2de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c2e2:	e051      	b.n	800c388 <HAL_I2C_Init+0x1dc>
 800c2e4:	2304      	movs	r3, #4
 800c2e6:	e04f      	b.n	800c388 <HAL_I2C_Init+0x1dc>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d111      	bne.n	800c314 <HAL_I2C_Init+0x168>
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	1e58      	subs	r0, r3, #1
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6859      	ldr	r1, [r3, #4]
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	005b      	lsls	r3, r3, #1
 800c2fc:	440b      	add	r3, r1
 800c2fe:	fbb0 f3f3 	udiv	r3, r0, r3
 800c302:	3301      	adds	r3, #1
 800c304:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c308:	2b00      	cmp	r3, #0
 800c30a:	bf0c      	ite	eq
 800c30c:	2301      	moveq	r3, #1
 800c30e:	2300      	movne	r3, #0
 800c310:	b2db      	uxtb	r3, r3
 800c312:	e012      	b.n	800c33a <HAL_I2C_Init+0x18e>
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	1e58      	subs	r0, r3, #1
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6859      	ldr	r1, [r3, #4]
 800c31c:	460b      	mov	r3, r1
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	440b      	add	r3, r1
 800c322:	0099      	lsls	r1, r3, #2
 800c324:	440b      	add	r3, r1
 800c326:	fbb0 f3f3 	udiv	r3, r0, r3
 800c32a:	3301      	adds	r3, #1
 800c32c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c330:	2b00      	cmp	r3, #0
 800c332:	bf0c      	ite	eq
 800c334:	2301      	moveq	r3, #1
 800c336:	2300      	movne	r3, #0
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d001      	beq.n	800c342 <HAL_I2C_Init+0x196>
 800c33e:	2301      	movs	r3, #1
 800c340:	e022      	b.n	800c388 <HAL_I2C_Init+0x1dc>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	689b      	ldr	r3, [r3, #8]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d10e      	bne.n	800c368 <HAL_I2C_Init+0x1bc>
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	1e58      	subs	r0, r3, #1
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6859      	ldr	r1, [r3, #4]
 800c352:	460b      	mov	r3, r1
 800c354:	005b      	lsls	r3, r3, #1
 800c356:	440b      	add	r3, r1
 800c358:	fbb0 f3f3 	udiv	r3, r0, r3
 800c35c:	3301      	adds	r3, #1
 800c35e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c362:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c366:	e00f      	b.n	800c388 <HAL_I2C_Init+0x1dc>
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	1e58      	subs	r0, r3, #1
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6859      	ldr	r1, [r3, #4]
 800c370:	460b      	mov	r3, r1
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	440b      	add	r3, r1
 800c376:	0099      	lsls	r1, r3, #2
 800c378:	440b      	add	r3, r1
 800c37a:	fbb0 f3f3 	udiv	r3, r0, r3
 800c37e:	3301      	adds	r3, #1
 800c380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c384:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c388:	6879      	ldr	r1, [r7, #4]
 800c38a:	6809      	ldr	r1, [r1, #0]
 800c38c:	4313      	orrs	r3, r2
 800c38e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	69da      	ldr	r2, [r3, #28]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6a1b      	ldr	r3, [r3, #32]
 800c3a2:	431a      	orrs	r2, r3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	430a      	orrs	r2, r1
 800c3aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800c3b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	6911      	ldr	r1, [r2, #16]
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	68d2      	ldr	r2, [r2, #12]
 800c3c2:	4311      	orrs	r1, r2
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	6812      	ldr	r2, [r2, #0]
 800c3c8:	430b      	orrs	r3, r1
 800c3ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	695a      	ldr	r2, [r3, #20]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	699b      	ldr	r3, [r3, #24]
 800c3de:	431a      	orrs	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	430a      	orrs	r2, r1
 800c3e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f042 0201 	orr.w	r2, r2, #1
 800c3f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2220      	movs	r2, #32
 800c402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2200      	movs	r2, #0
 800c410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	3710      	adds	r7, #16
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	000186a0 	.word	0x000186a0
 800c424:	001e847f 	.word	0x001e847f
 800c428:	003d08ff 	.word	0x003d08ff
 800c42c:	431bde83 	.word	0x431bde83
 800c430:	10624dd3 	.word	0x10624dd3

0800c434 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d101      	bne.n	800c446 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800c442:	2301      	movs	r3, #1
 800c444:	e021      	b.n	800c48a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2224      	movs	r2, #36	@ 0x24
 800c44a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	681a      	ldr	r2, [r3, #0]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f022 0201 	bic.w	r2, r2, #1
 800c45c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f000 f821 	bl	800c4a6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3708      	adds	r7, #8
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800c492:	b480      	push	{r7}
 800c494:	b083      	sub	sp, #12
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800c49a:	bf00      	nop
 800c49c:	370c      	adds	r7, #12
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr

0800c4a6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800c4a6:	b480      	push	{r7}
 800c4a8:	b083      	sub	sp, #12
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800c4ae:	bf00      	nop
 800c4b0:	370c      	adds	r7, #12
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr
	...

0800c4bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b088      	sub	sp, #32
 800c4c0:	af02      	add	r7, sp, #8
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	607a      	str	r2, [r7, #4]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	817b      	strh	r3, [r7, #10]
 800c4cc:	4613      	mov	r3, r2
 800c4ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c4d0:	f7fe ff78 	bl	800b3c4 <HAL_GetTick>
 800c4d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b20      	cmp	r3, #32
 800c4e0:	f040 80e0 	bne.w	800c6a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	2319      	movs	r3, #25
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	4970      	ldr	r1, [pc, #448]	@ (800c6b0 <HAL_I2C_Master_Transmit+0x1f4>)
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f001 f928 	bl	800d744 <I2C_WaitOnFlagUntilTimeout>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d001      	beq.n	800c4fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800c4fa:	2302      	movs	r3, #2
 800c4fc:	e0d3      	b.n	800c6a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c504:	2b01      	cmp	r3, #1
 800c506:	d101      	bne.n	800c50c <HAL_I2C_Master_Transmit+0x50>
 800c508:	2302      	movs	r3, #2
 800c50a:	e0cc      	b.n	800c6a6 <HAL_I2C_Master_Transmit+0x1ea>
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2201      	movs	r2, #1
 800c510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f003 0301 	and.w	r3, r3, #1
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d007      	beq.n	800c532 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f042 0201 	orr.w	r2, r2, #1
 800c530:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c540:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2221      	movs	r2, #33	@ 0x21
 800c546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2210      	movs	r2, #16
 800c54e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2200      	movs	r2, #0
 800c556:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	893a      	ldrh	r2, [r7, #8]
 800c562:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c568:	b29a      	uxth	r2, r3
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	4a50      	ldr	r2, [pc, #320]	@ (800c6b4 <HAL_I2C_Master_Transmit+0x1f8>)
 800c572:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c574:	8979      	ldrh	r1, [r7, #10]
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	6a3a      	ldr	r2, [r7, #32]
 800c57a:	68f8      	ldr	r0, [r7, #12]
 800c57c:	f000 fe14 	bl	800d1a8 <I2C_MasterRequestWrite>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d001      	beq.n	800c58a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800c586:	2301      	movs	r3, #1
 800c588:	e08d      	b.n	800c6a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c58a:	2300      	movs	r3, #0
 800c58c:	613b      	str	r3, [r7, #16]
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	695b      	ldr	r3, [r3, #20]
 800c594:	613b      	str	r3, [r7, #16]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	699b      	ldr	r3, [r3, #24]
 800c59c:	613b      	str	r3, [r7, #16]
 800c59e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800c5a0:	e066      	b.n	800c670 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c5a2:	697a      	ldr	r2, [r7, #20]
 800c5a4:	6a39      	ldr	r1, [r7, #32]
 800c5a6:	68f8      	ldr	r0, [r7, #12]
 800c5a8:	f001 f9e6 	bl	800d978 <I2C_WaitOnTXEFlagUntilTimeout>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00d      	beq.n	800c5ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5b6:	2b04      	cmp	r3, #4
 800c5b8:	d107      	bne.n	800c5ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c5c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e06b      	b.n	800c6a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5d2:	781a      	ldrb	r2, [r3, #0]
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5de:	1c5a      	adds	r2, r3, #1
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	b29a      	uxth	r2, r3
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	b29a      	uxth	r2, r3
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	695b      	ldr	r3, [r3, #20]
 800c604:	f003 0304 	and.w	r3, r3, #4
 800c608:	2b04      	cmp	r3, #4
 800c60a:	d11b      	bne.n	800c644 <HAL_I2C_Master_Transmit+0x188>
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c610:	2b00      	cmp	r3, #0
 800c612:	d017      	beq.n	800c644 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c618:	781a      	ldrb	r2, [r3, #0]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c624:	1c5a      	adds	r2, r3, #1
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c62e:	b29b      	uxth	r3, r3
 800c630:	3b01      	subs	r3, #1
 800c632:	b29a      	uxth	r2, r3
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c63c:	3b01      	subs	r3, #1
 800c63e:	b29a      	uxth	r2, r3
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c644:	697a      	ldr	r2, [r7, #20]
 800c646:	6a39      	ldr	r1, [r7, #32]
 800c648:	68f8      	ldr	r0, [r7, #12]
 800c64a:	f001 f9dd 	bl	800da08 <I2C_WaitOnBTFFlagUntilTimeout>
 800c64e:	4603      	mov	r3, r0
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00d      	beq.n	800c670 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c658:	2b04      	cmp	r3, #4
 800c65a:	d107      	bne.n	800c66c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c66a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c66c:	2301      	movs	r3, #1
 800c66e:	e01a      	b.n	800c6a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c674:	2b00      	cmp	r3, #0
 800c676:	d194      	bne.n	800c5a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2220      	movs	r2, #32
 800c68c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2200      	movs	r2, #0
 800c694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2200      	movs	r2, #0
 800c69c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	e000      	b.n	800c6a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800c6a4:	2302      	movs	r3, #2
  }
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3718      	adds	r7, #24
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	00100002 	.word	0x00100002
 800c6b4:	ffff0000 	.word	0xffff0000

0800c6b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b08c      	sub	sp, #48	@ 0x30
 800c6bc:	af02      	add	r7, sp, #8
 800c6be:	60f8      	str	r0, [r7, #12]
 800c6c0:	607a      	str	r2, [r7, #4]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	817b      	strh	r3, [r7, #10]
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c6cc:	f7fe fe7a 	bl	800b3c4 <HAL_GetTick>
 800c6d0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	2b20      	cmp	r3, #32
 800c6dc:	f040 8217 	bne.w	800cb0e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	2319      	movs	r3, #25
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	497c      	ldr	r1, [pc, #496]	@ (800c8dc <HAL_I2C_Master_Receive+0x224>)
 800c6ea:	68f8      	ldr	r0, [r7, #12]
 800c6ec:	f001 f82a 	bl	800d744 <I2C_WaitOnFlagUntilTimeout>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d001      	beq.n	800c6fa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800c6f6:	2302      	movs	r3, #2
 800c6f8:	e20a      	b.n	800cb10 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c700:	2b01      	cmp	r3, #1
 800c702:	d101      	bne.n	800c708 <HAL_I2C_Master_Receive+0x50>
 800c704:	2302      	movs	r3, #2
 800c706:	e203      	b.n	800cb10 <HAL_I2C_Master_Receive+0x458>
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2201      	movs	r2, #1
 800c70c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f003 0301 	and.w	r3, r3, #1
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d007      	beq.n	800c72e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f042 0201 	orr.w	r2, r2, #1
 800c72c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c73c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2222      	movs	r2, #34	@ 0x22
 800c742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2210      	movs	r2, #16
 800c74a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2200      	movs	r2, #0
 800c752:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	893a      	ldrh	r2, [r7, #8]
 800c75e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c764:	b29a      	uxth	r2, r3
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	4a5c      	ldr	r2, [pc, #368]	@ (800c8e0 <HAL_I2C_Master_Receive+0x228>)
 800c76e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800c770:	8979      	ldrh	r1, [r7, #10]
 800c772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c776:	68f8      	ldr	r0, [r7, #12]
 800c778:	f000 fd98 	bl	800d2ac <I2C_MasterRequestRead>
 800c77c:	4603      	mov	r3, r0
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d001      	beq.n	800c786 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800c782:	2301      	movs	r3, #1
 800c784:	e1c4      	b.n	800cb10 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d113      	bne.n	800c7b6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c78e:	2300      	movs	r3, #0
 800c790:	623b      	str	r3, [r7, #32]
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	695b      	ldr	r3, [r3, #20]
 800c798:	623b      	str	r3, [r7, #32]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	699b      	ldr	r3, [r3, #24]
 800c7a0:	623b      	str	r3, [r7, #32]
 800c7a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c7b2:	601a      	str	r2, [r3, #0]
 800c7b4:	e198      	b.n	800cae8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	d11b      	bne.n	800c7f6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c7cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	61fb      	str	r3, [r7, #28]
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	695b      	ldr	r3, [r3, #20]
 800c7d8:	61fb      	str	r3, [r7, #28]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	699b      	ldr	r3, [r3, #24]
 800c7e0:	61fb      	str	r3, [r7, #28]
 800c7e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c7f2:	601a      	str	r2, [r3, #0]
 800c7f4:	e178      	b.n	800cae8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c7fa:	2b02      	cmp	r3, #2
 800c7fc:	d11b      	bne.n	800c836 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c80c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c81c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c81e:	2300      	movs	r3, #0
 800c820:	61bb      	str	r3, [r7, #24]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	695b      	ldr	r3, [r3, #20]
 800c828:	61bb      	str	r3, [r7, #24]
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	699b      	ldr	r3, [r3, #24]
 800c830:	61bb      	str	r3, [r7, #24]
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	e158      	b.n	800cae8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c844:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c846:	2300      	movs	r3, #0
 800c848:	617b      	str	r3, [r7, #20]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	695b      	ldr	r3, [r3, #20]
 800c850:	617b      	str	r3, [r7, #20]
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	699b      	ldr	r3, [r3, #24]
 800c858:	617b      	str	r3, [r7, #20]
 800c85a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800c85c:	e144      	b.n	800cae8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c862:	2b03      	cmp	r3, #3
 800c864:	f200 80f1 	bhi.w	800ca4a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d123      	bne.n	800c8b8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c872:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f001 f90f 	bl	800da98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c87a:	4603      	mov	r3, r0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d001      	beq.n	800c884 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800c880:	2301      	movs	r3, #1
 800c882:	e145      	b.n	800cb10 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	691a      	ldr	r2, [r3, #16]
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c88e:	b2d2      	uxtb	r2, r2
 800c890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c896:	1c5a      	adds	r2, r3, #1
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c8a0:	3b01      	subs	r3, #1
 800c8a2:	b29a      	uxth	r2, r3
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	3b01      	subs	r3, #1
 800c8b0:	b29a      	uxth	r2, r3
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c8b6:	e117      	b.n	800cae8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c8bc:	2b02      	cmp	r3, #2
 800c8be:	d14e      	bne.n	800c95e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c2:	9300      	str	r3, [sp, #0]
 800c8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	4906      	ldr	r1, [pc, #24]	@ (800c8e4 <HAL_I2C_Master_Receive+0x22c>)
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	f000 ff3a 	bl	800d744 <I2C_WaitOnFlagUntilTimeout>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d008      	beq.n	800c8e8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e11a      	b.n	800cb10 <HAL_I2C_Master_Receive+0x458>
 800c8da:	bf00      	nop
 800c8dc:	00100002 	.word	0x00100002
 800c8e0:	ffff0000 	.word	0xffff0000
 800c8e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	681a      	ldr	r2, [r3, #0]
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c8f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	691a      	ldr	r2, [r3, #16]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c902:	b2d2      	uxtb	r2, r2
 800c904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c90a:	1c5a      	adds	r2, r3, #1
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c914:	3b01      	subs	r3, #1
 800c916:	b29a      	uxth	r2, r3
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c920:	b29b      	uxth	r3, r3
 800c922:	3b01      	subs	r3, #1
 800c924:	b29a      	uxth	r2, r3
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	691a      	ldr	r2, [r3, #16]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c934:	b2d2      	uxtb	r2, r2
 800c936:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c93c:	1c5a      	adds	r2, r3, #1
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c946:	3b01      	subs	r3, #1
 800c948:	b29a      	uxth	r2, r3
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c952:	b29b      	uxth	r3, r3
 800c954:	3b01      	subs	r3, #1
 800c956:	b29a      	uxth	r2, r3
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c95c:	e0c4      	b.n	800cae8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c964:	2200      	movs	r2, #0
 800c966:	496c      	ldr	r1, [pc, #432]	@ (800cb18 <HAL_I2C_Master_Receive+0x460>)
 800c968:	68f8      	ldr	r0, [r7, #12]
 800c96a:	f000 feeb 	bl	800d744 <I2C_WaitOnFlagUntilTimeout>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d001      	beq.n	800c978 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800c974:	2301      	movs	r3, #1
 800c976:	e0cb      	b.n	800cb10 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c986:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	691a      	ldr	r2, [r3, #16]
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c992:	b2d2      	uxtb	r2, r2
 800c994:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c99a:	1c5a      	adds	r2, r3, #1
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c9a4:	3b01      	subs	r3, #1
 800c9a6:	b29a      	uxth	r2, r3
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c9b0:	b29b      	uxth	r3, r3
 800c9b2:	3b01      	subs	r3, #1
 800c9b4:	b29a      	uxth	r2, r3
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	4955      	ldr	r1, [pc, #340]	@ (800cb18 <HAL_I2C_Master_Receive+0x460>)
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f000 febd 	bl	800d744 <I2C_WaitOnFlagUntilTimeout>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d001      	beq.n	800c9d4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	e09d      	b.n	800cb10 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c9e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	691a      	ldr	r2, [r3, #16]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ee:	b2d2      	uxtb	r2, r2
 800c9f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9f6:	1c5a      	adds	r2, r3, #1
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ca00:	3b01      	subs	r3, #1
 800ca02:	b29a      	uxth	r2, r3
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	3b01      	subs	r3, #1
 800ca10:	b29a      	uxth	r2, r3
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	691a      	ldr	r2, [r3, #16]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca20:	b2d2      	uxtb	r2, r2
 800ca22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca28:	1c5a      	adds	r2, r3, #1
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ca32:	3b01      	subs	r3, #1
 800ca34:	b29a      	uxth	r2, r3
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	3b01      	subs	r3, #1
 800ca42:	b29a      	uxth	r2, r3
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ca48:	e04e      	b.n	800cae8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ca4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ca4e:	68f8      	ldr	r0, [r7, #12]
 800ca50:	f001 f822 	bl	800da98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ca54:	4603      	mov	r3, r0
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d001      	beq.n	800ca5e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e058      	b.n	800cb10 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	691a      	ldr	r2, [r3, #16]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca68:	b2d2      	uxtb	r2, r2
 800ca6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca70:	1c5a      	adds	r2, r3, #1
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	3b01      	subs	r3, #1
 800ca8a:	b29a      	uxth	r2, r3
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	695b      	ldr	r3, [r3, #20]
 800ca96:	f003 0304 	and.w	r3, r3, #4
 800ca9a:	2b04      	cmp	r3, #4
 800ca9c:	d124      	bne.n	800cae8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800caa2:	2b03      	cmp	r3, #3
 800caa4:	d107      	bne.n	800cab6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cab4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	691a      	ldr	r2, [r3, #16]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cac0:	b2d2      	uxtb	r2, r2
 800cac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cac8:	1c5a      	adds	r2, r3, #1
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cad2:	3b01      	subs	r3, #1
 800cad4:	b29a      	uxth	r2, r3
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cade:	b29b      	uxth	r3, r3
 800cae0:	3b01      	subs	r3, #1
 800cae2:	b29a      	uxth	r2, r3
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800caec:	2b00      	cmp	r3, #0
 800caee:	f47f aeb6 	bne.w	800c85e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2220      	movs	r2, #32
 800caf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2200      	movs	r2, #0
 800cafe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2200      	movs	r2, #0
 800cb06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	e000      	b.n	800cb10 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800cb0e:	2302      	movs	r3, #2
  }
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3728      	adds	r7, #40	@ 0x28
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	00010004 	.word	0x00010004

0800cb1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b088      	sub	sp, #32
 800cb20:	af02      	add	r7, sp, #8
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	4608      	mov	r0, r1
 800cb26:	4611      	mov	r1, r2
 800cb28:	461a      	mov	r2, r3
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	817b      	strh	r3, [r7, #10]
 800cb2e:	460b      	mov	r3, r1
 800cb30:	813b      	strh	r3, [r7, #8]
 800cb32:	4613      	mov	r3, r2
 800cb34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cb36:	f7fe fc45 	bl	800b3c4 <HAL_GetTick>
 800cb3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cb42:	b2db      	uxtb	r3, r3
 800cb44:	2b20      	cmp	r3, #32
 800cb46:	f040 80d9 	bne.w	800ccfc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	9300      	str	r3, [sp, #0]
 800cb4e:	2319      	movs	r3, #25
 800cb50:	2201      	movs	r2, #1
 800cb52:	496d      	ldr	r1, [pc, #436]	@ (800cd08 <HAL_I2C_Mem_Write+0x1ec>)
 800cb54:	68f8      	ldr	r0, [r7, #12]
 800cb56:	f000 fdf5 	bl	800d744 <I2C_WaitOnFlagUntilTimeout>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d001      	beq.n	800cb64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800cb60:	2302      	movs	r3, #2
 800cb62:	e0cc      	b.n	800ccfe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d101      	bne.n	800cb72 <HAL_I2C_Mem_Write+0x56>
 800cb6e:	2302      	movs	r3, #2
 800cb70:	e0c5      	b.n	800ccfe <HAL_I2C_Mem_Write+0x1e2>
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2201      	movs	r2, #1
 800cb76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f003 0301 	and.w	r3, r3, #1
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d007      	beq.n	800cb98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f042 0201 	orr.w	r2, r2, #1
 800cb96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cba6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2221      	movs	r2, #33	@ 0x21
 800cbac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2240      	movs	r2, #64	@ 0x40
 800cbb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	6a3a      	ldr	r2, [r7, #32]
 800cbc2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cbc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cbce:	b29a      	uxth	r2, r3
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	4a4d      	ldr	r2, [pc, #308]	@ (800cd0c <HAL_I2C_Mem_Write+0x1f0>)
 800cbd8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cbda:	88f8      	ldrh	r0, [r7, #6]
 800cbdc:	893a      	ldrh	r2, [r7, #8]
 800cbde:	8979      	ldrh	r1, [r7, #10]
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	9301      	str	r3, [sp, #4]
 800cbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbe6:	9300      	str	r3, [sp, #0]
 800cbe8:	4603      	mov	r3, r0
 800cbea:	68f8      	ldr	r0, [r7, #12]
 800cbec:	f000 fc2c 	bl	800d448 <I2C_RequestMemoryWrite>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d052      	beq.n	800cc9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	e081      	b.n	800ccfe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cbfa:	697a      	ldr	r2, [r7, #20]
 800cbfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cbfe:	68f8      	ldr	r0, [r7, #12]
 800cc00:	f000 feba 	bl	800d978 <I2C_WaitOnTXEFlagUntilTimeout>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00d      	beq.n	800cc26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc0e:	2b04      	cmp	r3, #4
 800cc10:	d107      	bne.n	800cc22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	681a      	ldr	r2, [r3, #0]
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cc20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800cc22:	2301      	movs	r3, #1
 800cc24:	e06b      	b.n	800ccfe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc2a:	781a      	ldrb	r2, [r3, #0]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc36:	1c5a      	adds	r2, r3, #1
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc40:	3b01      	subs	r3, #1
 800cc42:	b29a      	uxth	r2, r3
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	3b01      	subs	r3, #1
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	695b      	ldr	r3, [r3, #20]
 800cc5c:	f003 0304 	and.w	r3, r3, #4
 800cc60:	2b04      	cmp	r3, #4
 800cc62:	d11b      	bne.n	800cc9c <HAL_I2C_Mem_Write+0x180>
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d017      	beq.n	800cc9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc70:	781a      	ldrb	r2, [r3, #0]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc7c:	1c5a      	adds	r2, r3, #1
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc86:	3b01      	subs	r3, #1
 800cc88:	b29a      	uxth	r2, r3
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	3b01      	subs	r3, #1
 800cc96:	b29a      	uxth	r2, r3
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d1aa      	bne.n	800cbfa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cca4:	697a      	ldr	r2, [r7, #20]
 800cca6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	f000 fead 	bl	800da08 <I2C_WaitOnBTFFlagUntilTimeout>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d00d      	beq.n	800ccd0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccb8:	2b04      	cmp	r3, #4
 800ccba:	d107      	bne.n	800cccc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ccca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cccc:	2301      	movs	r3, #1
 800ccce:	e016      	b.n	800ccfe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ccde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2220      	movs	r2, #32
 800cce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2200      	movs	r2, #0
 800ccec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	e000      	b.n	800ccfe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800ccfc:	2302      	movs	r3, #2
  }
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3718      	adds	r7, #24
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	00100002 	.word	0x00100002
 800cd0c:	ffff0000 	.word	0xffff0000

0800cd10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b08c      	sub	sp, #48	@ 0x30
 800cd14:	af02      	add	r7, sp, #8
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	4608      	mov	r0, r1
 800cd1a:	4611      	mov	r1, r2
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	4603      	mov	r3, r0
 800cd20:	817b      	strh	r3, [r7, #10]
 800cd22:	460b      	mov	r3, r1
 800cd24:	813b      	strh	r3, [r7, #8]
 800cd26:	4613      	mov	r3, r2
 800cd28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cd2a:	f7fe fb4b 	bl	800b3c4 <HAL_GetTick>
 800cd2e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cd36:	b2db      	uxtb	r3, r3
 800cd38:	2b20      	cmp	r3, #32
 800cd3a:	f040 8214 	bne.w	800d166 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cd3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd40:	9300      	str	r3, [sp, #0]
 800cd42:	2319      	movs	r3, #25
 800cd44:	2201      	movs	r2, #1
 800cd46:	497b      	ldr	r1, [pc, #492]	@ (800cf34 <HAL_I2C_Mem_Read+0x224>)
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f000 fcfb 	bl	800d744 <I2C_WaitOnFlagUntilTimeout>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d001      	beq.n	800cd58 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800cd54:	2302      	movs	r3, #2
 800cd56:	e207      	b.n	800d168 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d101      	bne.n	800cd66 <HAL_I2C_Mem_Read+0x56>
 800cd62:	2302      	movs	r3, #2
 800cd64:	e200      	b.n	800d168 <HAL_I2C_Mem_Read+0x458>
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2201      	movs	r2, #1
 800cd6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f003 0301 	and.w	r3, r3, #1
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d007      	beq.n	800cd8c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f042 0201 	orr.w	r2, r2, #1
 800cd8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cd9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2222      	movs	r2, #34	@ 0x22
 800cda0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2240      	movs	r2, #64	@ 0x40
 800cda8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdb6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800cdbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cdc2:	b29a      	uxth	r2, r3
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	4a5b      	ldr	r2, [pc, #364]	@ (800cf38 <HAL_I2C_Mem_Read+0x228>)
 800cdcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cdce:	88f8      	ldrh	r0, [r7, #6]
 800cdd0:	893a      	ldrh	r2, [r7, #8]
 800cdd2:	8979      	ldrh	r1, [r7, #10]
 800cdd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd6:	9301      	str	r3, [sp, #4]
 800cdd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdda:	9300      	str	r3, [sp, #0]
 800cddc:	4603      	mov	r3, r0
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f000 fbc8 	bl	800d574 <I2C_RequestMemoryRead>
 800cde4:	4603      	mov	r3, r0
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d001      	beq.n	800cdee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800cdea:	2301      	movs	r3, #1
 800cdec:	e1bc      	b.n	800d168 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d113      	bne.n	800ce1e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	623b      	str	r3, [r7, #32]
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	695b      	ldr	r3, [r3, #20]
 800ce00:	623b      	str	r3, [r7, #32]
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	699b      	ldr	r3, [r3, #24]
 800ce08:	623b      	str	r3, [r7, #32]
 800ce0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	681a      	ldr	r2, [r3, #0]
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ce1a:	601a      	str	r2, [r3, #0]
 800ce1c:	e190      	b.n	800d140 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d11b      	bne.n	800ce5e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ce34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce36:	2300      	movs	r3, #0
 800ce38:	61fb      	str	r3, [r7, #28]
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	695b      	ldr	r3, [r3, #20]
 800ce40:	61fb      	str	r3, [r7, #28]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	699b      	ldr	r3, [r3, #24]
 800ce48:	61fb      	str	r3, [r7, #28]
 800ce4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ce5a:	601a      	str	r2, [r3, #0]
 800ce5c:	e170      	b.n	800d140 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ce62:	2b02      	cmp	r3, #2
 800ce64:	d11b      	bne.n	800ce9e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ce74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	681a      	ldr	r2, [r3, #0]
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ce84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce86:	2300      	movs	r3, #0
 800ce88:	61bb      	str	r3, [r7, #24]
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	695b      	ldr	r3, [r3, #20]
 800ce90:	61bb      	str	r3, [r7, #24]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	699b      	ldr	r3, [r3, #24]
 800ce98:	61bb      	str	r3, [r7, #24]
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	e150      	b.n	800d140 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ce9e:	2300      	movs	r3, #0
 800cea0:	617b      	str	r3, [r7, #20]
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	695b      	ldr	r3, [r3, #20]
 800cea8:	617b      	str	r3, [r7, #20]
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	699b      	ldr	r3, [r3, #24]
 800ceb0:	617b      	str	r3, [r7, #20]
 800ceb2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ceb4:	e144      	b.n	800d140 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ceba:	2b03      	cmp	r3, #3
 800cebc:	f200 80f1 	bhi.w	800d0a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d123      	bne.n	800cf10 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ceca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cecc:	68f8      	ldr	r0, [r7, #12]
 800cece:	f000 fde3 	bl	800da98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ced2:	4603      	mov	r3, r0
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d001      	beq.n	800cedc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800ced8:	2301      	movs	r3, #1
 800ceda:	e145      	b.n	800d168 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	691a      	ldr	r2, [r3, #16]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cee6:	b2d2      	uxtb	r2, r2
 800cee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceee:	1c5a      	adds	r2, r3, #1
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cef8:	3b01      	subs	r3, #1
 800cefa:	b29a      	uxth	r2, r3
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	3b01      	subs	r3, #1
 800cf08:	b29a      	uxth	r2, r3
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800cf0e:	e117      	b.n	800d140 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf14:	2b02      	cmp	r3, #2
 800cf16:	d14e      	bne.n	800cfb6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cf18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf1a:	9300      	str	r3, [sp, #0]
 800cf1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf1e:	2200      	movs	r2, #0
 800cf20:	4906      	ldr	r1, [pc, #24]	@ (800cf3c <HAL_I2C_Mem_Read+0x22c>)
 800cf22:	68f8      	ldr	r0, [r7, #12]
 800cf24:	f000 fc0e 	bl	800d744 <I2C_WaitOnFlagUntilTimeout>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d008      	beq.n	800cf40 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	e11a      	b.n	800d168 <HAL_I2C_Mem_Read+0x458>
 800cf32:	bf00      	nop
 800cf34:	00100002 	.word	0x00100002
 800cf38:	ffff0000 	.word	0xffff0000
 800cf3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cf4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	691a      	ldr	r2, [r3, #16]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf5a:	b2d2      	uxtb	r2, r2
 800cf5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf62:	1c5a      	adds	r2, r3, #1
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	b29a      	uxth	r2, r3
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	b29a      	uxth	r2, r3
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	691a      	ldr	r2, [r3, #16]
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf8c:	b2d2      	uxtb	r2, r2
 800cf8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf94:	1c5a      	adds	r2, r3, #1
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cf9e:	3b01      	subs	r3, #1
 800cfa0:	b29a      	uxth	r2, r3
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	3b01      	subs	r3, #1
 800cfae:	b29a      	uxth	r2, r3
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800cfb4:	e0c4      	b.n	800d140 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cfb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb8:	9300      	str	r3, [sp, #0]
 800cfba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	496c      	ldr	r1, [pc, #432]	@ (800d170 <HAL_I2C_Mem_Read+0x460>)
 800cfc0:	68f8      	ldr	r0, [r7, #12]
 800cfc2:	f000 fbbf 	bl	800d744 <I2C_WaitOnFlagUntilTimeout>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d001      	beq.n	800cfd0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e0cb      	b.n	800d168 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cfde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	691a      	ldr	r2, [r3, #16]
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfea:	b2d2      	uxtb	r2, r2
 800cfec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cff2:	1c5a      	adds	r2, r3, #1
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cffc:	3b01      	subs	r3, #1
 800cffe:	b29a      	uxth	r2, r3
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d008:	b29b      	uxth	r3, r3
 800d00a:	3b01      	subs	r3, #1
 800d00c:	b29a      	uxth	r2, r3
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d014:	9300      	str	r3, [sp, #0]
 800d016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d018:	2200      	movs	r2, #0
 800d01a:	4955      	ldr	r1, [pc, #340]	@ (800d170 <HAL_I2C_Mem_Read+0x460>)
 800d01c:	68f8      	ldr	r0, [r7, #12]
 800d01e:	f000 fb91 	bl	800d744 <I2C_WaitOnFlagUntilTimeout>
 800d022:	4603      	mov	r3, r0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d001      	beq.n	800d02c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d028:	2301      	movs	r3, #1
 800d02a:	e09d      	b.n	800d168 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d03a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	691a      	ldr	r2, [r3, #16]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d046:	b2d2      	uxtb	r2, r2
 800d048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d04e:	1c5a      	adds	r2, r3, #1
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d058:	3b01      	subs	r3, #1
 800d05a:	b29a      	uxth	r2, r3
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d064:	b29b      	uxth	r3, r3
 800d066:	3b01      	subs	r3, #1
 800d068:	b29a      	uxth	r2, r3
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	691a      	ldr	r2, [r3, #16]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d078:	b2d2      	uxtb	r2, r2
 800d07a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d080:	1c5a      	adds	r2, r3, #1
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d08a:	3b01      	subs	r3, #1
 800d08c:	b29a      	uxth	r2, r3
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d096:	b29b      	uxth	r3, r3
 800d098:	3b01      	subs	r3, #1
 800d09a:	b29a      	uxth	r2, r3
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d0a0:	e04e      	b.n	800d140 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d0a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d0a6:	68f8      	ldr	r0, [r7, #12]
 800d0a8:	f000 fcf6 	bl	800da98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d001      	beq.n	800d0b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e058      	b.n	800d168 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	691a      	ldr	r2, [r3, #16]
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0c0:	b2d2      	uxtb	r2, r2
 800d0c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0c8:	1c5a      	adds	r2, r3, #1
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d0d2:	3b01      	subs	r3, #1
 800d0d4:	b29a      	uxth	r2, r3
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	3b01      	subs	r3, #1
 800d0e2:	b29a      	uxth	r2, r3
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	695b      	ldr	r3, [r3, #20]
 800d0ee:	f003 0304 	and.w	r3, r3, #4
 800d0f2:	2b04      	cmp	r3, #4
 800d0f4:	d124      	bne.n	800d140 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d0fa:	2b03      	cmp	r3, #3
 800d0fc:	d107      	bne.n	800d10e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d10c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	691a      	ldr	r2, [r3, #16]
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d118:	b2d2      	uxtb	r2, r2
 800d11a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d120:	1c5a      	adds	r2, r3, #1
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d12a:	3b01      	subs	r3, #1
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d136:	b29b      	uxth	r3, r3
 800d138:	3b01      	subs	r3, #1
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d144:	2b00      	cmp	r3, #0
 800d146:	f47f aeb6 	bne.w	800ceb6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2220      	movs	r2, #32
 800d14e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2200      	movs	r2, #0
 800d156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d162:	2300      	movs	r3, #0
 800d164:	e000      	b.n	800d168 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800d166:	2302      	movs	r3, #2
  }
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3728      	adds	r7, #40	@ 0x28
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	00010004 	.word	0x00010004

0800d174 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d182:	b2db      	uxtb	r3, r3
}
 800d184:	4618      	mov	r0, r3
 800d186:	370c      	adds	r7, #12
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	370c      	adds	r7, #12
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr

0800d1a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b088      	sub	sp, #32
 800d1ac:	af02      	add	r7, sp, #8
 800d1ae:	60f8      	str	r0, [r7, #12]
 800d1b0:	607a      	str	r2, [r7, #4]
 800d1b2:	603b      	str	r3, [r7, #0]
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	2b08      	cmp	r3, #8
 800d1c2:	d006      	beq.n	800d1d2 <I2C_MasterRequestWrite+0x2a>
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	2b01      	cmp	r3, #1
 800d1c8:	d003      	beq.n	800d1d2 <I2C_MasterRequestWrite+0x2a>
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800d1d0:	d108      	bne.n	800d1e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	681a      	ldr	r2, [r3, #0]
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d1e0:	601a      	str	r2, [r3, #0]
 800d1e2:	e00b      	b.n	800d1fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1e8:	2b12      	cmp	r3, #18
 800d1ea:	d107      	bne.n	800d1fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d1fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	9300      	str	r3, [sp, #0]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2200      	movs	r2, #0
 800d204:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800d208:	68f8      	ldr	r0, [r7, #12]
 800d20a:	f000 fa9b 	bl	800d744 <I2C_WaitOnFlagUntilTimeout>
 800d20e:	4603      	mov	r3, r0
 800d210:	2b00      	cmp	r3, #0
 800d212:	d00d      	beq.n	800d230 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d21e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d222:	d103      	bne.n	800d22c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d22a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800d22c:	2303      	movs	r3, #3
 800d22e:	e035      	b.n	800d29c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	691b      	ldr	r3, [r3, #16]
 800d234:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d238:	d108      	bne.n	800d24c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d23a:	897b      	ldrh	r3, [r7, #10]
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	461a      	mov	r2, r3
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800d248:	611a      	str	r2, [r3, #16]
 800d24a:	e01b      	b.n	800d284 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d24c:	897b      	ldrh	r3, [r7, #10]
 800d24e:	11db      	asrs	r3, r3, #7
 800d250:	b2db      	uxtb	r3, r3
 800d252:	f003 0306 	and.w	r3, r3, #6
 800d256:	b2db      	uxtb	r3, r3
 800d258:	f063 030f 	orn	r3, r3, #15
 800d25c:	b2da      	uxtb	r2, r3
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	490e      	ldr	r1, [pc, #56]	@ (800d2a4 <I2C_MasterRequestWrite+0xfc>)
 800d26a:	68f8      	ldr	r0, [r7, #12]
 800d26c:	f000 fae4 	bl	800d838 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d270:	4603      	mov	r3, r0
 800d272:	2b00      	cmp	r3, #0
 800d274:	d001      	beq.n	800d27a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800d276:	2301      	movs	r3, #1
 800d278:	e010      	b.n	800d29c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d27a:	897b      	ldrh	r3, [r7, #10]
 800d27c:	b2da      	uxtb	r2, r3
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	4907      	ldr	r1, [pc, #28]	@ (800d2a8 <I2C_MasterRequestWrite+0x100>)
 800d28a:	68f8      	ldr	r0, [r7, #12]
 800d28c:	f000 fad4 	bl	800d838 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d001      	beq.n	800d29a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800d296:	2301      	movs	r3, #1
 800d298:	e000      	b.n	800d29c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800d29a:	2300      	movs	r3, #0
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3718      	adds	r7, #24
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	00010008 	.word	0x00010008
 800d2a8:	00010002 	.word	0x00010002

0800d2ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b088      	sub	sp, #32
 800d2b0:	af02      	add	r7, sp, #8
 800d2b2:	60f8      	str	r0, [r7, #12]
 800d2b4:	607a      	str	r2, [r7, #4]
 800d2b6:	603b      	str	r3, [r7, #0]
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d2d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	2b08      	cmp	r3, #8
 800d2d6:	d006      	beq.n	800d2e6 <I2C_MasterRequestRead+0x3a>
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d003      	beq.n	800d2e6 <I2C_MasterRequestRead+0x3a>
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800d2e4:	d108      	bne.n	800d2f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d2f4:	601a      	str	r2, [r3, #0]
 800d2f6:	e00b      	b.n	800d310 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2fc:	2b11      	cmp	r3, #17
 800d2fe:	d107      	bne.n	800d310 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d30e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	9300      	str	r3, [sp, #0]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800d31c:	68f8      	ldr	r0, [r7, #12]
 800d31e:	f000 fa11 	bl	800d744 <I2C_WaitOnFlagUntilTimeout>
 800d322:	4603      	mov	r3, r0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d00d      	beq.n	800d344 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d336:	d103      	bne.n	800d340 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d33e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800d340:	2303      	movs	r3, #3
 800d342:	e079      	b.n	800d438 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	691b      	ldr	r3, [r3, #16]
 800d348:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d34c:	d108      	bne.n	800d360 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d34e:	897b      	ldrh	r3, [r7, #10]
 800d350:	b2db      	uxtb	r3, r3
 800d352:	f043 0301 	orr.w	r3, r3, #1
 800d356:	b2da      	uxtb	r2, r3
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	611a      	str	r2, [r3, #16]
 800d35e:	e05f      	b.n	800d420 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800d360:	897b      	ldrh	r3, [r7, #10]
 800d362:	11db      	asrs	r3, r3, #7
 800d364:	b2db      	uxtb	r3, r3
 800d366:	f003 0306 	and.w	r3, r3, #6
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	f063 030f 	orn	r3, r3, #15
 800d370:	b2da      	uxtb	r2, r3
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	4930      	ldr	r1, [pc, #192]	@ (800d440 <I2C_MasterRequestRead+0x194>)
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f000 fa5a 	bl	800d838 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d384:	4603      	mov	r3, r0
 800d386:	2b00      	cmp	r3, #0
 800d388:	d001      	beq.n	800d38e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800d38a:	2301      	movs	r3, #1
 800d38c:	e054      	b.n	800d438 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800d38e:	897b      	ldrh	r3, [r7, #10]
 800d390:	b2da      	uxtb	r2, r3
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	4929      	ldr	r1, [pc, #164]	@ (800d444 <I2C_MasterRequestRead+0x198>)
 800d39e:	68f8      	ldr	r0, [r7, #12]
 800d3a0:	f000 fa4a 	bl	800d838 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d001      	beq.n	800d3ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	e044      	b.n	800d438 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	613b      	str	r3, [r7, #16]
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	695b      	ldr	r3, [r3, #20]
 800d3b8:	613b      	str	r3, [r7, #16]
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	699b      	ldr	r3, [r3, #24]
 800d3c0:	613b      	str	r3, [r7, #16]
 800d3c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d3d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	9300      	str	r3, [sp, #0]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f000 f9af 	bl	800d744 <I2C_WaitOnFlagUntilTimeout>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d00d      	beq.n	800d408 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d3f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3fa:	d103      	bne.n	800d404 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d402:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800d404:	2303      	movs	r3, #3
 800d406:	e017      	b.n	800d438 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800d408:	897b      	ldrh	r3, [r7, #10]
 800d40a:	11db      	asrs	r3, r3, #7
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	f003 0306 	and.w	r3, r3, #6
 800d412:	b2db      	uxtb	r3, r3
 800d414:	f063 030e 	orn	r3, r3, #14
 800d418:	b2da      	uxtb	r2, r3
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	4907      	ldr	r1, [pc, #28]	@ (800d444 <I2C_MasterRequestRead+0x198>)
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f000 fa06 	bl	800d838 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d001      	beq.n	800d436 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800d432:	2301      	movs	r3, #1
 800d434:	e000      	b.n	800d438 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800d436:	2300      	movs	r3, #0
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3718      	adds	r7, #24
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	00010008 	.word	0x00010008
 800d444:	00010002 	.word	0x00010002

0800d448 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b088      	sub	sp, #32
 800d44c:	af02      	add	r7, sp, #8
 800d44e:	60f8      	str	r0, [r7, #12]
 800d450:	4608      	mov	r0, r1
 800d452:	4611      	mov	r1, r2
 800d454:	461a      	mov	r2, r3
 800d456:	4603      	mov	r3, r0
 800d458:	817b      	strh	r3, [r7, #10]
 800d45a:	460b      	mov	r3, r1
 800d45c:	813b      	strh	r3, [r7, #8]
 800d45e:	4613      	mov	r3, r2
 800d460:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d470:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d474:	9300      	str	r3, [sp, #0]
 800d476:	6a3b      	ldr	r3, [r7, #32]
 800d478:	2200      	movs	r2, #0
 800d47a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800d47e:	68f8      	ldr	r0, [r7, #12]
 800d480:	f000 f960 	bl	800d744 <I2C_WaitOnFlagUntilTimeout>
 800d484:	4603      	mov	r3, r0
 800d486:	2b00      	cmp	r3, #0
 800d488:	d00d      	beq.n	800d4a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d498:	d103      	bne.n	800d4a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800d4a2:	2303      	movs	r3, #3
 800d4a4:	e05f      	b.n	800d566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d4a6:	897b      	ldrh	r3, [r7, #10]
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800d4b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b8:	6a3a      	ldr	r2, [r7, #32]
 800d4ba:	492d      	ldr	r1, [pc, #180]	@ (800d570 <I2C_RequestMemoryWrite+0x128>)
 800d4bc:	68f8      	ldr	r0, [r7, #12]
 800d4be:	f000 f9bb 	bl	800d838 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d001      	beq.n	800d4cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	e04c      	b.n	800d566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	617b      	str	r3, [r7, #20]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	695b      	ldr	r3, [r3, #20]
 800d4d6:	617b      	str	r3, [r7, #20]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	699b      	ldr	r3, [r3, #24]
 800d4de:	617b      	str	r3, [r7, #20]
 800d4e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d4e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4e4:	6a39      	ldr	r1, [r7, #32]
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f000 fa46 	bl	800d978 <I2C_WaitOnTXEFlagUntilTimeout>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d00d      	beq.n	800d50e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4f6:	2b04      	cmp	r3, #4
 800d4f8:	d107      	bne.n	800d50a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	681a      	ldr	r2, [r3, #0]
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d508:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d50a:	2301      	movs	r3, #1
 800d50c:	e02b      	b.n	800d566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d50e:	88fb      	ldrh	r3, [r7, #6]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d105      	bne.n	800d520 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d514:	893b      	ldrh	r3, [r7, #8]
 800d516:	b2da      	uxtb	r2, r3
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	611a      	str	r2, [r3, #16]
 800d51e:	e021      	b.n	800d564 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d520:	893b      	ldrh	r3, [r7, #8]
 800d522:	0a1b      	lsrs	r3, r3, #8
 800d524:	b29b      	uxth	r3, r3
 800d526:	b2da      	uxtb	r2, r3
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d52e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d530:	6a39      	ldr	r1, [r7, #32]
 800d532:	68f8      	ldr	r0, [r7, #12]
 800d534:	f000 fa20 	bl	800d978 <I2C_WaitOnTXEFlagUntilTimeout>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d00d      	beq.n	800d55a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d542:	2b04      	cmp	r3, #4
 800d544:	d107      	bne.n	800d556 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d554:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d556:	2301      	movs	r3, #1
 800d558:	e005      	b.n	800d566 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d55a:	893b      	ldrh	r3, [r7, #8]
 800d55c:	b2da      	uxtb	r2, r3
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800d564:	2300      	movs	r3, #0
}
 800d566:	4618      	mov	r0, r3
 800d568:	3718      	adds	r7, #24
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	00010002 	.word	0x00010002

0800d574 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b088      	sub	sp, #32
 800d578:	af02      	add	r7, sp, #8
 800d57a:	60f8      	str	r0, [r7, #12]
 800d57c:	4608      	mov	r0, r1
 800d57e:	4611      	mov	r1, r2
 800d580:	461a      	mov	r2, r3
 800d582:	4603      	mov	r3, r0
 800d584:	817b      	strh	r3, [r7, #10]
 800d586:	460b      	mov	r3, r1
 800d588:	813b      	strh	r3, [r7, #8]
 800d58a:	4613      	mov	r3, r2
 800d58c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d59c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d5ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b0:	9300      	str	r3, [sp, #0]
 800d5b2:	6a3b      	ldr	r3, [r7, #32]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800d5ba:	68f8      	ldr	r0, [r7, #12]
 800d5bc:	f000 f8c2 	bl	800d744 <I2C_WaitOnFlagUntilTimeout>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d00d      	beq.n	800d5e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d5d4:	d103      	bne.n	800d5de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d5dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800d5de:	2303      	movs	r3, #3
 800d5e0:	e0aa      	b.n	800d738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d5e2:	897b      	ldrh	r3, [r7, #10]
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800d5f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f4:	6a3a      	ldr	r2, [r7, #32]
 800d5f6:	4952      	ldr	r1, [pc, #328]	@ (800d740 <I2C_RequestMemoryRead+0x1cc>)
 800d5f8:	68f8      	ldr	r0, [r7, #12]
 800d5fa:	f000 f91d 	bl	800d838 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d5fe:	4603      	mov	r3, r0
 800d600:	2b00      	cmp	r3, #0
 800d602:	d001      	beq.n	800d608 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800d604:	2301      	movs	r3, #1
 800d606:	e097      	b.n	800d738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d608:	2300      	movs	r3, #0
 800d60a:	617b      	str	r3, [r7, #20]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	695b      	ldr	r3, [r3, #20]
 800d612:	617b      	str	r3, [r7, #20]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	699b      	ldr	r3, [r3, #24]
 800d61a:	617b      	str	r3, [r7, #20]
 800d61c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d61e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d620:	6a39      	ldr	r1, [r7, #32]
 800d622:	68f8      	ldr	r0, [r7, #12]
 800d624:	f000 f9a8 	bl	800d978 <I2C_WaitOnTXEFlagUntilTimeout>
 800d628:	4603      	mov	r3, r0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d00d      	beq.n	800d64a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d632:	2b04      	cmp	r3, #4
 800d634:	d107      	bne.n	800d646 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d644:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d646:	2301      	movs	r3, #1
 800d648:	e076      	b.n	800d738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d64a:	88fb      	ldrh	r3, [r7, #6]
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d105      	bne.n	800d65c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d650:	893b      	ldrh	r3, [r7, #8]
 800d652:	b2da      	uxtb	r2, r3
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	611a      	str	r2, [r3, #16]
 800d65a:	e021      	b.n	800d6a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d65c:	893b      	ldrh	r3, [r7, #8]
 800d65e:	0a1b      	lsrs	r3, r3, #8
 800d660:	b29b      	uxth	r3, r3
 800d662:	b2da      	uxtb	r2, r3
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d66a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d66c:	6a39      	ldr	r1, [r7, #32]
 800d66e:	68f8      	ldr	r0, [r7, #12]
 800d670:	f000 f982 	bl	800d978 <I2C_WaitOnTXEFlagUntilTimeout>
 800d674:	4603      	mov	r3, r0
 800d676:	2b00      	cmp	r3, #0
 800d678:	d00d      	beq.n	800d696 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d67e:	2b04      	cmp	r3, #4
 800d680:	d107      	bne.n	800d692 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	681a      	ldr	r2, [r3, #0]
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d690:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d692:	2301      	movs	r3, #1
 800d694:	e050      	b.n	800d738 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d696:	893b      	ldrh	r3, [r7, #8]
 800d698:	b2da      	uxtb	r2, r3
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d6a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6a2:	6a39      	ldr	r1, [r7, #32]
 800d6a4:	68f8      	ldr	r0, [r7, #12]
 800d6a6:	f000 f967 	bl	800d978 <I2C_WaitOnTXEFlagUntilTimeout>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d00d      	beq.n	800d6cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6b4:	2b04      	cmp	r3, #4
 800d6b6:	d107      	bne.n	800d6c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	681a      	ldr	r2, [r3, #0]
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d6c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	e035      	b.n	800d738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d6da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6de:	9300      	str	r3, [sp, #0]
 800d6e0:	6a3b      	ldr	r3, [r7, #32]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f000 f82b 	bl	800d744 <I2C_WaitOnFlagUntilTimeout>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d00d      	beq.n	800d710 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d702:	d103      	bne.n	800d70c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d70a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800d70c:	2303      	movs	r3, #3
 800d70e:	e013      	b.n	800d738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d710:	897b      	ldrh	r3, [r7, #10]
 800d712:	b2db      	uxtb	r3, r3
 800d714:	f043 0301 	orr.w	r3, r3, #1
 800d718:	b2da      	uxtb	r2, r3
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d722:	6a3a      	ldr	r2, [r7, #32]
 800d724:	4906      	ldr	r1, [pc, #24]	@ (800d740 <I2C_RequestMemoryRead+0x1cc>)
 800d726:	68f8      	ldr	r0, [r7, #12]
 800d728:	f000 f886 	bl	800d838 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d72c:	4603      	mov	r3, r0
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d001      	beq.n	800d736 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800d732:	2301      	movs	r3, #1
 800d734:	e000      	b.n	800d738 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800d736:	2300      	movs	r3, #0
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3718      	adds	r7, #24
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	00010002 	.word	0x00010002

0800d744 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	603b      	str	r3, [r7, #0]
 800d750:	4613      	mov	r3, r2
 800d752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d754:	e048      	b.n	800d7e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d75c:	d044      	beq.n	800d7e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d75e:	f7fd fe31 	bl	800b3c4 <HAL_GetTick>
 800d762:	4602      	mov	r2, r0
 800d764:	69bb      	ldr	r3, [r7, #24]
 800d766:	1ad3      	subs	r3, r2, r3
 800d768:	683a      	ldr	r2, [r7, #0]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d302      	bcc.n	800d774 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d139      	bne.n	800d7e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	0c1b      	lsrs	r3, r3, #16
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d10d      	bne.n	800d79a <I2C_WaitOnFlagUntilTimeout+0x56>
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	695b      	ldr	r3, [r3, #20]
 800d784:	43da      	mvns	r2, r3
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	4013      	ands	r3, r2
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	bf0c      	ite	eq
 800d790:	2301      	moveq	r3, #1
 800d792:	2300      	movne	r3, #0
 800d794:	b2db      	uxtb	r3, r3
 800d796:	461a      	mov	r2, r3
 800d798:	e00c      	b.n	800d7b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	699b      	ldr	r3, [r3, #24]
 800d7a0:	43da      	mvns	r2, r3
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	4013      	ands	r3, r2
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	bf0c      	ite	eq
 800d7ac:	2301      	moveq	r3, #1
 800d7ae:	2300      	movne	r3, #0
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	79fb      	ldrb	r3, [r7, #7]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d116      	bne.n	800d7e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2220      	movs	r2, #32
 800d7c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7d4:	f043 0220 	orr.w	r2, r3, #32
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	e023      	b.n	800d830 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	0c1b      	lsrs	r3, r3, #16
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d10d      	bne.n	800d80e <I2C_WaitOnFlagUntilTimeout+0xca>
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	695b      	ldr	r3, [r3, #20]
 800d7f8:	43da      	mvns	r2, r3
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	4013      	ands	r3, r2
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	2b00      	cmp	r3, #0
 800d802:	bf0c      	ite	eq
 800d804:	2301      	moveq	r3, #1
 800d806:	2300      	movne	r3, #0
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	461a      	mov	r2, r3
 800d80c:	e00c      	b.n	800d828 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	699b      	ldr	r3, [r3, #24]
 800d814:	43da      	mvns	r2, r3
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	4013      	ands	r3, r2
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	bf0c      	ite	eq
 800d820:	2301      	moveq	r3, #1
 800d822:	2300      	movne	r3, #0
 800d824:	b2db      	uxtb	r3, r3
 800d826:	461a      	mov	r2, r3
 800d828:	79fb      	ldrb	r3, [r7, #7]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d093      	beq.n	800d756 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d82e:	2300      	movs	r3, #0
}
 800d830:	4618      	mov	r0, r3
 800d832:	3710      	adds	r7, #16
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	60f8      	str	r0, [r7, #12]
 800d840:	60b9      	str	r1, [r7, #8]
 800d842:	607a      	str	r2, [r7, #4]
 800d844:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d846:	e071      	b.n	800d92c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	695b      	ldr	r3, [r3, #20]
 800d84e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d856:	d123      	bne.n	800d8a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d866:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800d870:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2200      	movs	r2, #0
 800d876:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	2220      	movs	r2, #32
 800d87c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2200      	movs	r2, #0
 800d884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d88c:	f043 0204 	orr.w	r2, r3, #4
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2200      	movs	r2, #0
 800d898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800d89c:	2301      	movs	r3, #1
 800d89e:	e067      	b.n	800d970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8a6:	d041      	beq.n	800d92c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8a8:	f7fd fd8c 	bl	800b3c4 <HAL_GetTick>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	1ad3      	subs	r3, r2, r3
 800d8b2:	687a      	ldr	r2, [r7, #4]
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d302      	bcc.n	800d8be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d136      	bne.n	800d92c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	0c1b      	lsrs	r3, r3, #16
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d10c      	bne.n	800d8e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	695b      	ldr	r3, [r3, #20]
 800d8ce:	43da      	mvns	r2, r3
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	4013      	ands	r3, r2
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	bf14      	ite	ne
 800d8da:	2301      	movne	r3, #1
 800d8dc:	2300      	moveq	r3, #0
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	e00b      	b.n	800d8fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	699b      	ldr	r3, [r3, #24]
 800d8e8:	43da      	mvns	r2, r3
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	4013      	ands	r3, r2
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	bf14      	ite	ne
 800d8f4:	2301      	movne	r3, #1
 800d8f6:	2300      	moveq	r3, #0
 800d8f8:	b2db      	uxtb	r3, r3
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d016      	beq.n	800d92c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2200      	movs	r2, #0
 800d902:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2220      	movs	r2, #32
 800d908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2200      	movs	r2, #0
 800d910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d918:	f043 0220 	orr.w	r2, r3, #32
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2200      	movs	r2, #0
 800d924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800d928:	2301      	movs	r3, #1
 800d92a:	e021      	b.n	800d970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	0c1b      	lsrs	r3, r3, #16
 800d930:	b2db      	uxtb	r3, r3
 800d932:	2b01      	cmp	r3, #1
 800d934:	d10c      	bne.n	800d950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	695b      	ldr	r3, [r3, #20]
 800d93c:	43da      	mvns	r2, r3
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	4013      	ands	r3, r2
 800d942:	b29b      	uxth	r3, r3
 800d944:	2b00      	cmp	r3, #0
 800d946:	bf14      	ite	ne
 800d948:	2301      	movne	r3, #1
 800d94a:	2300      	moveq	r3, #0
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	e00b      	b.n	800d968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	699b      	ldr	r3, [r3, #24]
 800d956:	43da      	mvns	r2, r3
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	4013      	ands	r3, r2
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	2b00      	cmp	r3, #0
 800d960:	bf14      	ite	ne
 800d962:	2301      	movne	r3, #1
 800d964:	2300      	moveq	r3, #0
 800d966:	b2db      	uxtb	r3, r3
 800d968:	2b00      	cmp	r3, #0
 800d96a:	f47f af6d 	bne.w	800d848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800d96e:	2300      	movs	r3, #0
}
 800d970:	4618      	mov	r0, r3
 800d972:	3710      	adds	r7, #16
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}

0800d978 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b084      	sub	sp, #16
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	60f8      	str	r0, [r7, #12]
 800d980:	60b9      	str	r1, [r7, #8]
 800d982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d984:	e034      	b.n	800d9f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d986:	68f8      	ldr	r0, [r7, #12]
 800d988:	f000 f8e3 	bl	800db52 <I2C_IsAcknowledgeFailed>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d001      	beq.n	800d996 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d992:	2301      	movs	r3, #1
 800d994:	e034      	b.n	800da00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d99c:	d028      	beq.n	800d9f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d99e:	f7fd fd11 	bl	800b3c4 <HAL_GetTick>
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	1ad3      	subs	r3, r2, r3
 800d9a8:	68ba      	ldr	r2, [r7, #8]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d302      	bcc.n	800d9b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d11d      	bne.n	800d9f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	695b      	ldr	r3, [r3, #20]
 800d9ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9be:	2b80      	cmp	r3, #128	@ 0x80
 800d9c0:	d016      	beq.n	800d9f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2220      	movs	r2, #32
 800d9cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9dc:	f043 0220 	orr.w	r2, r3, #32
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	e007      	b.n	800da00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	695b      	ldr	r3, [r3, #20]
 800d9f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9fa:	2b80      	cmp	r3, #128	@ 0x80
 800d9fc:	d1c3      	bne.n	800d986 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800d9fe:	2300      	movs	r3, #0
}
 800da00:	4618      	mov	r0, r3
 800da02:	3710      	adds	r7, #16
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	60f8      	str	r0, [r7, #12]
 800da10:	60b9      	str	r1, [r7, #8]
 800da12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800da14:	e034      	b.n	800da80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	f000 f89b 	bl	800db52 <I2C_IsAcknowledgeFailed>
 800da1c:	4603      	mov	r3, r0
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d001      	beq.n	800da26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800da22:	2301      	movs	r3, #1
 800da24:	e034      	b.n	800da90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da2c:	d028      	beq.n	800da80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800da2e:	f7fd fcc9 	bl	800b3c4 <HAL_GetTick>
 800da32:	4602      	mov	r2, r0
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	1ad3      	subs	r3, r2, r3
 800da38:	68ba      	ldr	r2, [r7, #8]
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d302      	bcc.n	800da44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d11d      	bne.n	800da80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	695b      	ldr	r3, [r3, #20]
 800da4a:	f003 0304 	and.w	r3, r3, #4
 800da4e:	2b04      	cmp	r3, #4
 800da50:	d016      	beq.n	800da80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	2200      	movs	r2, #0
 800da56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2220      	movs	r2, #32
 800da5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2200      	movs	r2, #0
 800da64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da6c:	f043 0220 	orr.w	r2, r3, #32
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2200      	movs	r2, #0
 800da78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800da7c:	2301      	movs	r3, #1
 800da7e:	e007      	b.n	800da90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	695b      	ldr	r3, [r3, #20]
 800da86:	f003 0304 	and.w	r3, r3, #4
 800da8a:	2b04      	cmp	r3, #4
 800da8c:	d1c3      	bne.n	800da16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800da8e:	2300      	movs	r3, #0
}
 800da90:	4618      	mov	r0, r3
 800da92:	3710      	adds	r7, #16
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}

0800da98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	60f8      	str	r0, [r7, #12]
 800daa0:	60b9      	str	r1, [r7, #8]
 800daa2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800daa4:	e049      	b.n	800db3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	695b      	ldr	r3, [r3, #20]
 800daac:	f003 0310 	and.w	r3, r3, #16
 800dab0:	2b10      	cmp	r3, #16
 800dab2:	d119      	bne.n	800dae8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f06f 0210 	mvn.w	r2, #16
 800dabc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2200      	movs	r2, #0
 800dac2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2220      	movs	r2, #32
 800dac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2200      	movs	r2, #0
 800dad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2200      	movs	r2, #0
 800dae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800dae4:	2301      	movs	r3, #1
 800dae6:	e030      	b.n	800db4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dae8:	f7fd fc6c 	bl	800b3c4 <HAL_GetTick>
 800daec:	4602      	mov	r2, r0
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	1ad3      	subs	r3, r2, r3
 800daf2:	68ba      	ldr	r2, [r7, #8]
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d302      	bcc.n	800dafe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d11d      	bne.n	800db3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	695b      	ldr	r3, [r3, #20]
 800db04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db08:	2b40      	cmp	r3, #64	@ 0x40
 800db0a:	d016      	beq.n	800db3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2200      	movs	r2, #0
 800db10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2220      	movs	r2, #32
 800db16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db26:	f043 0220 	orr.w	r2, r3, #32
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2200      	movs	r2, #0
 800db32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800db36:	2301      	movs	r3, #1
 800db38:	e007      	b.n	800db4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	695b      	ldr	r3, [r3, #20]
 800db40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db44:	2b40      	cmp	r3, #64	@ 0x40
 800db46:	d1ae      	bne.n	800daa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800db48:	2300      	movs	r3, #0
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3710      	adds	r7, #16
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}

0800db52 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800db52:	b480      	push	{r7}
 800db54:	b083      	sub	sp, #12
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	695b      	ldr	r3, [r3, #20]
 800db60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db68:	d11b      	bne.n	800dba2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800db72:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2200      	movs	r2, #0
 800db78:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	2220      	movs	r2, #32
 800db7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2200      	movs	r2, #0
 800db86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db8e:	f043 0204 	orr.w	r2, r3, #4
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2200      	movs	r2, #0
 800db9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800db9e:	2301      	movs	r3, #1
 800dba0:	e000      	b.n	800dba4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800dba2:	2300      	movs	r3, #0
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	370c      	adds	r7, #12
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr

0800dbb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b086      	sub	sp, #24
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d101      	bne.n	800dbc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	e267      	b.n	800e092 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f003 0301 	and.w	r3, r3, #1
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d075      	beq.n	800dcba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800dbce:	4b88      	ldr	r3, [pc, #544]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dbd0:	689b      	ldr	r3, [r3, #8]
 800dbd2:	f003 030c 	and.w	r3, r3, #12
 800dbd6:	2b04      	cmp	r3, #4
 800dbd8:	d00c      	beq.n	800dbf4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dbda:	4b85      	ldr	r3, [pc, #532]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dbdc:	689b      	ldr	r3, [r3, #8]
 800dbde:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800dbe2:	2b08      	cmp	r3, #8
 800dbe4:	d112      	bne.n	800dc0c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dbe6:	4b82      	ldr	r3, [pc, #520]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dbee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dbf2:	d10b      	bne.n	800dc0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dbf4:	4b7e      	ldr	r3, [pc, #504]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d05b      	beq.n	800dcb8 <HAL_RCC_OscConfig+0x108>
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d157      	bne.n	800dcb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	e242      	b.n	800e092 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc14:	d106      	bne.n	800dc24 <HAL_RCC_OscConfig+0x74>
 800dc16:	4b76      	ldr	r3, [pc, #472]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4a75      	ldr	r2, [pc, #468]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dc1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dc20:	6013      	str	r3, [r2, #0]
 800dc22:	e01d      	b.n	800dc60 <HAL_RCC_OscConfig+0xb0>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dc2c:	d10c      	bne.n	800dc48 <HAL_RCC_OscConfig+0x98>
 800dc2e:	4b70      	ldr	r3, [pc, #448]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4a6f      	ldr	r2, [pc, #444]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dc34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800dc38:	6013      	str	r3, [r2, #0]
 800dc3a:	4b6d      	ldr	r3, [pc, #436]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	4a6c      	ldr	r2, [pc, #432]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dc40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dc44:	6013      	str	r3, [r2, #0]
 800dc46:	e00b      	b.n	800dc60 <HAL_RCC_OscConfig+0xb0>
 800dc48:	4b69      	ldr	r3, [pc, #420]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a68      	ldr	r2, [pc, #416]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dc4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dc52:	6013      	str	r3, [r2, #0]
 800dc54:	4b66      	ldr	r3, [pc, #408]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4a65      	ldr	r2, [pc, #404]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dc5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800dc5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d013      	beq.n	800dc90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dc68:	f7fd fbac 	bl	800b3c4 <HAL_GetTick>
 800dc6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dc6e:	e008      	b.n	800dc82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dc70:	f7fd fba8 	bl	800b3c4 <HAL_GetTick>
 800dc74:	4602      	mov	r2, r0
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	1ad3      	subs	r3, r2, r3
 800dc7a:	2b64      	cmp	r3, #100	@ 0x64
 800dc7c:	d901      	bls.n	800dc82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800dc7e:	2303      	movs	r3, #3
 800dc80:	e207      	b.n	800e092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dc82:	4b5b      	ldr	r3, [pc, #364]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d0f0      	beq.n	800dc70 <HAL_RCC_OscConfig+0xc0>
 800dc8e:	e014      	b.n	800dcba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dc90:	f7fd fb98 	bl	800b3c4 <HAL_GetTick>
 800dc94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dc96:	e008      	b.n	800dcaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dc98:	f7fd fb94 	bl	800b3c4 <HAL_GetTick>
 800dc9c:	4602      	mov	r2, r0
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	1ad3      	subs	r3, r2, r3
 800dca2:	2b64      	cmp	r3, #100	@ 0x64
 800dca4:	d901      	bls.n	800dcaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800dca6:	2303      	movs	r3, #3
 800dca8:	e1f3      	b.n	800e092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dcaa:	4b51      	ldr	r3, [pc, #324]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1f0      	bne.n	800dc98 <HAL_RCC_OscConfig+0xe8>
 800dcb6:	e000      	b.n	800dcba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dcb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f003 0302 	and.w	r3, r3, #2
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d063      	beq.n	800dd8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800dcc6:	4b4a      	ldr	r3, [pc, #296]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dcc8:	689b      	ldr	r3, [r3, #8]
 800dcca:	f003 030c 	and.w	r3, r3, #12
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00b      	beq.n	800dcea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dcd2:	4b47      	ldr	r3, [pc, #284]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dcd4:	689b      	ldr	r3, [r3, #8]
 800dcd6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800dcda:	2b08      	cmp	r3, #8
 800dcdc:	d11c      	bne.n	800dd18 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dcde:	4b44      	ldr	r3, [pc, #272]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d116      	bne.n	800dd18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dcea:	4b41      	ldr	r3, [pc, #260]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f003 0302 	and.w	r3, r3, #2
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d005      	beq.n	800dd02 <HAL_RCC_OscConfig+0x152>
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	68db      	ldr	r3, [r3, #12]
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d001      	beq.n	800dd02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e1c7      	b.n	800e092 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dd02:	4b3b      	ldr	r3, [pc, #236]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	691b      	ldr	r3, [r3, #16]
 800dd0e:	00db      	lsls	r3, r3, #3
 800dd10:	4937      	ldr	r1, [pc, #220]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dd12:	4313      	orrs	r3, r2
 800dd14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dd16:	e03a      	b.n	800dd8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	68db      	ldr	r3, [r3, #12]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d020      	beq.n	800dd62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800dd20:	4b34      	ldr	r3, [pc, #208]	@ (800ddf4 <HAL_RCC_OscConfig+0x244>)
 800dd22:	2201      	movs	r2, #1
 800dd24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd26:	f7fd fb4d 	bl	800b3c4 <HAL_GetTick>
 800dd2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dd2c:	e008      	b.n	800dd40 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dd2e:	f7fd fb49 	bl	800b3c4 <HAL_GetTick>
 800dd32:	4602      	mov	r2, r0
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	1ad3      	subs	r3, r2, r3
 800dd38:	2b02      	cmp	r3, #2
 800dd3a:	d901      	bls.n	800dd40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800dd3c:	2303      	movs	r3, #3
 800dd3e:	e1a8      	b.n	800e092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dd40:	4b2b      	ldr	r3, [pc, #172]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f003 0302 	and.w	r3, r3, #2
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d0f0      	beq.n	800dd2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dd4c:	4b28      	ldr	r3, [pc, #160]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	691b      	ldr	r3, [r3, #16]
 800dd58:	00db      	lsls	r3, r3, #3
 800dd5a:	4925      	ldr	r1, [pc, #148]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dd5c:	4313      	orrs	r3, r2
 800dd5e:	600b      	str	r3, [r1, #0]
 800dd60:	e015      	b.n	800dd8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dd62:	4b24      	ldr	r3, [pc, #144]	@ (800ddf4 <HAL_RCC_OscConfig+0x244>)
 800dd64:	2200      	movs	r2, #0
 800dd66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd68:	f7fd fb2c 	bl	800b3c4 <HAL_GetTick>
 800dd6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dd6e:	e008      	b.n	800dd82 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dd70:	f7fd fb28 	bl	800b3c4 <HAL_GetTick>
 800dd74:	4602      	mov	r2, r0
 800dd76:	693b      	ldr	r3, [r7, #16]
 800dd78:	1ad3      	subs	r3, r2, r3
 800dd7a:	2b02      	cmp	r3, #2
 800dd7c:	d901      	bls.n	800dd82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800dd7e:	2303      	movs	r3, #3
 800dd80:	e187      	b.n	800e092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800dd82:	4b1b      	ldr	r3, [pc, #108]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f003 0302 	and.w	r3, r3, #2
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d1f0      	bne.n	800dd70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f003 0308 	and.w	r3, r3, #8
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d036      	beq.n	800de08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	695b      	ldr	r3, [r3, #20]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d016      	beq.n	800ddd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dda2:	4b15      	ldr	r3, [pc, #84]	@ (800ddf8 <HAL_RCC_OscConfig+0x248>)
 800dda4:	2201      	movs	r2, #1
 800dda6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dda8:	f7fd fb0c 	bl	800b3c4 <HAL_GetTick>
 800ddac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ddae:	e008      	b.n	800ddc2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ddb0:	f7fd fb08 	bl	800b3c4 <HAL_GetTick>
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	1ad3      	subs	r3, r2, r3
 800ddba:	2b02      	cmp	r3, #2
 800ddbc:	d901      	bls.n	800ddc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ddbe:	2303      	movs	r3, #3
 800ddc0:	e167      	b.n	800e092 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ddc2:	4b0b      	ldr	r3, [pc, #44]	@ (800ddf0 <HAL_RCC_OscConfig+0x240>)
 800ddc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ddc6:	f003 0302 	and.w	r3, r3, #2
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d0f0      	beq.n	800ddb0 <HAL_RCC_OscConfig+0x200>
 800ddce:	e01b      	b.n	800de08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ddd0:	4b09      	ldr	r3, [pc, #36]	@ (800ddf8 <HAL_RCC_OscConfig+0x248>)
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ddd6:	f7fd faf5 	bl	800b3c4 <HAL_GetTick>
 800ddda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dddc:	e00e      	b.n	800ddfc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ddde:	f7fd faf1 	bl	800b3c4 <HAL_GetTick>
 800dde2:	4602      	mov	r2, r0
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	1ad3      	subs	r3, r2, r3
 800dde8:	2b02      	cmp	r3, #2
 800ddea:	d907      	bls.n	800ddfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ddec:	2303      	movs	r3, #3
 800ddee:	e150      	b.n	800e092 <HAL_RCC_OscConfig+0x4e2>
 800ddf0:	40023800 	.word	0x40023800
 800ddf4:	42470000 	.word	0x42470000
 800ddf8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ddfc:	4b88      	ldr	r3, [pc, #544]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800ddfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800de00:	f003 0302 	and.w	r3, r3, #2
 800de04:	2b00      	cmp	r3, #0
 800de06:	d1ea      	bne.n	800ddde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f003 0304 	and.w	r3, r3, #4
 800de10:	2b00      	cmp	r3, #0
 800de12:	f000 8097 	beq.w	800df44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800de16:	2300      	movs	r3, #0
 800de18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800de1a:	4b81      	ldr	r3, [pc, #516]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800de1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800de22:	2b00      	cmp	r3, #0
 800de24:	d10f      	bne.n	800de46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800de26:	2300      	movs	r3, #0
 800de28:	60bb      	str	r3, [r7, #8]
 800de2a:	4b7d      	ldr	r3, [pc, #500]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800de2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de2e:	4a7c      	ldr	r2, [pc, #496]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800de30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800de34:	6413      	str	r3, [r2, #64]	@ 0x40
 800de36:	4b7a      	ldr	r3, [pc, #488]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800de38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800de3e:	60bb      	str	r3, [r7, #8]
 800de40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800de42:	2301      	movs	r3, #1
 800de44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800de46:	4b77      	ldr	r3, [pc, #476]	@ (800e024 <HAL_RCC_OscConfig+0x474>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d118      	bne.n	800de84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800de52:	4b74      	ldr	r3, [pc, #464]	@ (800e024 <HAL_RCC_OscConfig+0x474>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4a73      	ldr	r2, [pc, #460]	@ (800e024 <HAL_RCC_OscConfig+0x474>)
 800de58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800de5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800de5e:	f7fd fab1 	bl	800b3c4 <HAL_GetTick>
 800de62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800de64:	e008      	b.n	800de78 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800de66:	f7fd faad 	bl	800b3c4 <HAL_GetTick>
 800de6a:	4602      	mov	r2, r0
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	1ad3      	subs	r3, r2, r3
 800de70:	2b02      	cmp	r3, #2
 800de72:	d901      	bls.n	800de78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800de74:	2303      	movs	r3, #3
 800de76:	e10c      	b.n	800e092 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800de78:	4b6a      	ldr	r3, [pc, #424]	@ (800e024 <HAL_RCC_OscConfig+0x474>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de80:	2b00      	cmp	r3, #0
 800de82:	d0f0      	beq.n	800de66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	689b      	ldr	r3, [r3, #8]
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d106      	bne.n	800de9a <HAL_RCC_OscConfig+0x2ea>
 800de8c:	4b64      	ldr	r3, [pc, #400]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800de8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de90:	4a63      	ldr	r2, [pc, #396]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800de92:	f043 0301 	orr.w	r3, r3, #1
 800de96:	6713      	str	r3, [r2, #112]	@ 0x70
 800de98:	e01c      	b.n	800ded4 <HAL_RCC_OscConfig+0x324>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	689b      	ldr	r3, [r3, #8]
 800de9e:	2b05      	cmp	r3, #5
 800dea0:	d10c      	bne.n	800debc <HAL_RCC_OscConfig+0x30c>
 800dea2:	4b5f      	ldr	r3, [pc, #380]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800dea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dea6:	4a5e      	ldr	r2, [pc, #376]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800dea8:	f043 0304 	orr.w	r3, r3, #4
 800deac:	6713      	str	r3, [r2, #112]	@ 0x70
 800deae:	4b5c      	ldr	r3, [pc, #368]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800deb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800deb2:	4a5b      	ldr	r2, [pc, #364]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800deb4:	f043 0301 	orr.w	r3, r3, #1
 800deb8:	6713      	str	r3, [r2, #112]	@ 0x70
 800deba:	e00b      	b.n	800ded4 <HAL_RCC_OscConfig+0x324>
 800debc:	4b58      	ldr	r3, [pc, #352]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800debe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dec0:	4a57      	ldr	r2, [pc, #348]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800dec2:	f023 0301 	bic.w	r3, r3, #1
 800dec6:	6713      	str	r3, [r2, #112]	@ 0x70
 800dec8:	4b55      	ldr	r3, [pc, #340]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800deca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800decc:	4a54      	ldr	r2, [pc, #336]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800dece:	f023 0304 	bic.w	r3, r3, #4
 800ded2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	689b      	ldr	r3, [r3, #8]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d015      	beq.n	800df08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dedc:	f7fd fa72 	bl	800b3c4 <HAL_GetTick>
 800dee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dee2:	e00a      	b.n	800defa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dee4:	f7fd fa6e 	bl	800b3c4 <HAL_GetTick>
 800dee8:	4602      	mov	r2, r0
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	1ad3      	subs	r3, r2, r3
 800deee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800def2:	4293      	cmp	r3, r2
 800def4:	d901      	bls.n	800defa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800def6:	2303      	movs	r3, #3
 800def8:	e0cb      	b.n	800e092 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800defa:	4b49      	ldr	r3, [pc, #292]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800defc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800defe:	f003 0302 	and.w	r3, r3, #2
 800df02:	2b00      	cmp	r3, #0
 800df04:	d0ee      	beq.n	800dee4 <HAL_RCC_OscConfig+0x334>
 800df06:	e014      	b.n	800df32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800df08:	f7fd fa5c 	bl	800b3c4 <HAL_GetTick>
 800df0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800df0e:	e00a      	b.n	800df26 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800df10:	f7fd fa58 	bl	800b3c4 <HAL_GetTick>
 800df14:	4602      	mov	r2, r0
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	1ad3      	subs	r3, r2, r3
 800df1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df1e:	4293      	cmp	r3, r2
 800df20:	d901      	bls.n	800df26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800df22:	2303      	movs	r3, #3
 800df24:	e0b5      	b.n	800e092 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800df26:	4b3e      	ldr	r3, [pc, #248]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800df28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df2a:	f003 0302 	and.w	r3, r3, #2
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1ee      	bne.n	800df10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800df32:	7dfb      	ldrb	r3, [r7, #23]
 800df34:	2b01      	cmp	r3, #1
 800df36:	d105      	bne.n	800df44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800df38:	4b39      	ldr	r3, [pc, #228]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800df3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df3c:	4a38      	ldr	r2, [pc, #224]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800df3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800df42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	699b      	ldr	r3, [r3, #24]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	f000 80a1 	beq.w	800e090 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800df4e:	4b34      	ldr	r3, [pc, #208]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800df50:	689b      	ldr	r3, [r3, #8]
 800df52:	f003 030c 	and.w	r3, r3, #12
 800df56:	2b08      	cmp	r3, #8
 800df58:	d05c      	beq.n	800e014 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	699b      	ldr	r3, [r3, #24]
 800df5e:	2b02      	cmp	r3, #2
 800df60:	d141      	bne.n	800dfe6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800df62:	4b31      	ldr	r3, [pc, #196]	@ (800e028 <HAL_RCC_OscConfig+0x478>)
 800df64:	2200      	movs	r2, #0
 800df66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800df68:	f7fd fa2c 	bl	800b3c4 <HAL_GetTick>
 800df6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800df6e:	e008      	b.n	800df82 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800df70:	f7fd fa28 	bl	800b3c4 <HAL_GetTick>
 800df74:	4602      	mov	r2, r0
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	1ad3      	subs	r3, r2, r3
 800df7a:	2b02      	cmp	r3, #2
 800df7c:	d901      	bls.n	800df82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800df7e:	2303      	movs	r3, #3
 800df80:	e087      	b.n	800e092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800df82:	4b27      	ldr	r3, [pc, #156]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d1f0      	bne.n	800df70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	69da      	ldr	r2, [r3, #28]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6a1b      	ldr	r3, [r3, #32]
 800df96:	431a      	orrs	r2, r3
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df9c:	019b      	lsls	r3, r3, #6
 800df9e:	431a      	orrs	r2, r3
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfa4:	085b      	lsrs	r3, r3, #1
 800dfa6:	3b01      	subs	r3, #1
 800dfa8:	041b      	lsls	r3, r3, #16
 800dfaa:	431a      	orrs	r2, r3
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfb0:	061b      	lsls	r3, r3, #24
 800dfb2:	491b      	ldr	r1, [pc, #108]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dfb8:	4b1b      	ldr	r3, [pc, #108]	@ (800e028 <HAL_RCC_OscConfig+0x478>)
 800dfba:	2201      	movs	r2, #1
 800dfbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dfbe:	f7fd fa01 	bl	800b3c4 <HAL_GetTick>
 800dfc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dfc4:	e008      	b.n	800dfd8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dfc6:	f7fd f9fd 	bl	800b3c4 <HAL_GetTick>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	1ad3      	subs	r3, r2, r3
 800dfd0:	2b02      	cmp	r3, #2
 800dfd2:	d901      	bls.n	800dfd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800dfd4:	2303      	movs	r3, #3
 800dfd6:	e05c      	b.n	800e092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dfd8:	4b11      	ldr	r3, [pc, #68]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d0f0      	beq.n	800dfc6 <HAL_RCC_OscConfig+0x416>
 800dfe4:	e054      	b.n	800e090 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dfe6:	4b10      	ldr	r3, [pc, #64]	@ (800e028 <HAL_RCC_OscConfig+0x478>)
 800dfe8:	2200      	movs	r2, #0
 800dfea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dfec:	f7fd f9ea 	bl	800b3c4 <HAL_GetTick>
 800dff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dff2:	e008      	b.n	800e006 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dff4:	f7fd f9e6 	bl	800b3c4 <HAL_GetTick>
 800dff8:	4602      	mov	r2, r0
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	1ad3      	subs	r3, r2, r3
 800dffe:	2b02      	cmp	r3, #2
 800e000:	d901      	bls.n	800e006 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800e002:	2303      	movs	r3, #3
 800e004:	e045      	b.n	800e092 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e006:	4b06      	ldr	r3, [pc, #24]	@ (800e020 <HAL_RCC_OscConfig+0x470>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d1f0      	bne.n	800dff4 <HAL_RCC_OscConfig+0x444>
 800e012:	e03d      	b.n	800e090 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	699b      	ldr	r3, [r3, #24]
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d107      	bne.n	800e02c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800e01c:	2301      	movs	r3, #1
 800e01e:	e038      	b.n	800e092 <HAL_RCC_OscConfig+0x4e2>
 800e020:	40023800 	.word	0x40023800
 800e024:	40007000 	.word	0x40007000
 800e028:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800e02c:	4b1b      	ldr	r3, [pc, #108]	@ (800e09c <HAL_RCC_OscConfig+0x4ec>)
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	699b      	ldr	r3, [r3, #24]
 800e036:	2b01      	cmp	r3, #1
 800e038:	d028      	beq.n	800e08c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e044:	429a      	cmp	r2, r3
 800e046:	d121      	bne.n	800e08c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e052:	429a      	cmp	r2, r3
 800e054:	d11a      	bne.n	800e08c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e056:	68fa      	ldr	r2, [r7, #12]
 800e058:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800e05c:	4013      	ands	r3, r2
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e062:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800e064:	4293      	cmp	r3, r2
 800e066:	d111      	bne.n	800e08c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e072:	085b      	lsrs	r3, r3, #1
 800e074:	3b01      	subs	r3, #1
 800e076:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800e078:	429a      	cmp	r2, r3
 800e07a:	d107      	bne.n	800e08c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e086:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800e088:	429a      	cmp	r2, r3
 800e08a:	d001      	beq.n	800e090 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800e08c:	2301      	movs	r3, #1
 800e08e:	e000      	b.n	800e092 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800e090:	2300      	movs	r3, #0
}
 800e092:	4618      	mov	r0, r3
 800e094:	3718      	adds	r7, #24
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	40023800 	.word	0x40023800

0800e0a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d101      	bne.n	800e0b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	e0cc      	b.n	800e24e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e0b4:	4b68      	ldr	r3, [pc, #416]	@ (800e258 <HAL_RCC_ClockConfig+0x1b8>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f003 0307 	and.w	r3, r3, #7
 800e0bc:	683a      	ldr	r2, [r7, #0]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d90c      	bls.n	800e0dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e0c2:	4b65      	ldr	r3, [pc, #404]	@ (800e258 <HAL_RCC_ClockConfig+0x1b8>)
 800e0c4:	683a      	ldr	r2, [r7, #0]
 800e0c6:	b2d2      	uxtb	r2, r2
 800e0c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e0ca:	4b63      	ldr	r3, [pc, #396]	@ (800e258 <HAL_RCC_ClockConfig+0x1b8>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	f003 0307 	and.w	r3, r3, #7
 800e0d2:	683a      	ldr	r2, [r7, #0]
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d001      	beq.n	800e0dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	e0b8      	b.n	800e24e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f003 0302 	and.w	r3, r3, #2
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d020      	beq.n	800e12a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f003 0304 	and.w	r3, r3, #4
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d005      	beq.n	800e100 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e0f4:	4b59      	ldr	r3, [pc, #356]	@ (800e25c <HAL_RCC_ClockConfig+0x1bc>)
 800e0f6:	689b      	ldr	r3, [r3, #8]
 800e0f8:	4a58      	ldr	r2, [pc, #352]	@ (800e25c <HAL_RCC_ClockConfig+0x1bc>)
 800e0fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800e0fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	f003 0308 	and.w	r3, r3, #8
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d005      	beq.n	800e118 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e10c:	4b53      	ldr	r3, [pc, #332]	@ (800e25c <HAL_RCC_ClockConfig+0x1bc>)
 800e10e:	689b      	ldr	r3, [r3, #8]
 800e110:	4a52      	ldr	r2, [pc, #328]	@ (800e25c <HAL_RCC_ClockConfig+0x1bc>)
 800e112:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800e116:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e118:	4b50      	ldr	r3, [pc, #320]	@ (800e25c <HAL_RCC_ClockConfig+0x1bc>)
 800e11a:	689b      	ldr	r3, [r3, #8]
 800e11c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	689b      	ldr	r3, [r3, #8]
 800e124:	494d      	ldr	r1, [pc, #308]	@ (800e25c <HAL_RCC_ClockConfig+0x1bc>)
 800e126:	4313      	orrs	r3, r2
 800e128:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f003 0301 	and.w	r3, r3, #1
 800e132:	2b00      	cmp	r3, #0
 800e134:	d044      	beq.n	800e1c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	685b      	ldr	r3, [r3, #4]
 800e13a:	2b01      	cmp	r3, #1
 800e13c:	d107      	bne.n	800e14e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e13e:	4b47      	ldr	r3, [pc, #284]	@ (800e25c <HAL_RCC_ClockConfig+0x1bc>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e146:	2b00      	cmp	r3, #0
 800e148:	d119      	bne.n	800e17e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e14a:	2301      	movs	r3, #1
 800e14c:	e07f      	b.n	800e24e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	2b02      	cmp	r3, #2
 800e154:	d003      	beq.n	800e15e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800e15a:	2b03      	cmp	r3, #3
 800e15c:	d107      	bne.n	800e16e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e15e:	4b3f      	ldr	r3, [pc, #252]	@ (800e25c <HAL_RCC_ClockConfig+0x1bc>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e166:	2b00      	cmp	r3, #0
 800e168:	d109      	bne.n	800e17e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e16a:	2301      	movs	r3, #1
 800e16c:	e06f      	b.n	800e24e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e16e:	4b3b      	ldr	r3, [pc, #236]	@ (800e25c <HAL_RCC_ClockConfig+0x1bc>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f003 0302 	and.w	r3, r3, #2
 800e176:	2b00      	cmp	r3, #0
 800e178:	d101      	bne.n	800e17e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800e17a:	2301      	movs	r3, #1
 800e17c:	e067      	b.n	800e24e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e17e:	4b37      	ldr	r3, [pc, #220]	@ (800e25c <HAL_RCC_ClockConfig+0x1bc>)
 800e180:	689b      	ldr	r3, [r3, #8]
 800e182:	f023 0203 	bic.w	r2, r3, #3
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	685b      	ldr	r3, [r3, #4]
 800e18a:	4934      	ldr	r1, [pc, #208]	@ (800e25c <HAL_RCC_ClockConfig+0x1bc>)
 800e18c:	4313      	orrs	r3, r2
 800e18e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800e190:	f7fd f918 	bl	800b3c4 <HAL_GetTick>
 800e194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e196:	e00a      	b.n	800e1ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e198:	f7fd f914 	bl	800b3c4 <HAL_GetTick>
 800e19c:	4602      	mov	r2, r0
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	1ad3      	subs	r3, r2, r3
 800e1a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	d901      	bls.n	800e1ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800e1aa:	2303      	movs	r3, #3
 800e1ac:	e04f      	b.n	800e24e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e1ae:	4b2b      	ldr	r3, [pc, #172]	@ (800e25c <HAL_RCC_ClockConfig+0x1bc>)
 800e1b0:	689b      	ldr	r3, [r3, #8]
 800e1b2:	f003 020c 	and.w	r2, r3, #12
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	009b      	lsls	r3, r3, #2
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d1eb      	bne.n	800e198 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e1c0:	4b25      	ldr	r3, [pc, #148]	@ (800e258 <HAL_RCC_ClockConfig+0x1b8>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f003 0307 	and.w	r3, r3, #7
 800e1c8:	683a      	ldr	r2, [r7, #0]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d20c      	bcs.n	800e1e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e1ce:	4b22      	ldr	r3, [pc, #136]	@ (800e258 <HAL_RCC_ClockConfig+0x1b8>)
 800e1d0:	683a      	ldr	r2, [r7, #0]
 800e1d2:	b2d2      	uxtb	r2, r2
 800e1d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e1d6:	4b20      	ldr	r3, [pc, #128]	@ (800e258 <HAL_RCC_ClockConfig+0x1b8>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f003 0307 	and.w	r3, r3, #7
 800e1de:	683a      	ldr	r2, [r7, #0]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d001      	beq.n	800e1e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	e032      	b.n	800e24e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	f003 0304 	and.w	r3, r3, #4
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d008      	beq.n	800e206 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e1f4:	4b19      	ldr	r3, [pc, #100]	@ (800e25c <HAL_RCC_ClockConfig+0x1bc>)
 800e1f6:	689b      	ldr	r3, [r3, #8]
 800e1f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	68db      	ldr	r3, [r3, #12]
 800e200:	4916      	ldr	r1, [pc, #88]	@ (800e25c <HAL_RCC_ClockConfig+0x1bc>)
 800e202:	4313      	orrs	r3, r2
 800e204:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f003 0308 	and.w	r3, r3, #8
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d009      	beq.n	800e226 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e212:	4b12      	ldr	r3, [pc, #72]	@ (800e25c <HAL_RCC_ClockConfig+0x1bc>)
 800e214:	689b      	ldr	r3, [r3, #8]
 800e216:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	691b      	ldr	r3, [r3, #16]
 800e21e:	00db      	lsls	r3, r3, #3
 800e220:	490e      	ldr	r1, [pc, #56]	@ (800e25c <HAL_RCC_ClockConfig+0x1bc>)
 800e222:	4313      	orrs	r3, r2
 800e224:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800e226:	f000 f821 	bl	800e26c <HAL_RCC_GetSysClockFreq>
 800e22a:	4602      	mov	r2, r0
 800e22c:	4b0b      	ldr	r3, [pc, #44]	@ (800e25c <HAL_RCC_ClockConfig+0x1bc>)
 800e22e:	689b      	ldr	r3, [r3, #8]
 800e230:	091b      	lsrs	r3, r3, #4
 800e232:	f003 030f 	and.w	r3, r3, #15
 800e236:	490a      	ldr	r1, [pc, #40]	@ (800e260 <HAL_RCC_ClockConfig+0x1c0>)
 800e238:	5ccb      	ldrb	r3, [r1, r3]
 800e23a:	fa22 f303 	lsr.w	r3, r2, r3
 800e23e:	4a09      	ldr	r2, [pc, #36]	@ (800e264 <HAL_RCC_ClockConfig+0x1c4>)
 800e240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800e242:	4b09      	ldr	r3, [pc, #36]	@ (800e268 <HAL_RCC_ClockConfig+0x1c8>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4618      	mov	r0, r3
 800e248:	f7fd f878 	bl	800b33c <HAL_InitTick>

  return HAL_OK;
 800e24c:	2300      	movs	r3, #0
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3710      	adds	r7, #16
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	40023c00 	.word	0x40023c00
 800e25c:	40023800 	.word	0x40023800
 800e260:	080122d0 	.word	0x080122d0
 800e264:	20000000 	.word	0x20000000
 800e268:	20000220 	.word	0x20000220

0800e26c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e26c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e270:	b094      	sub	sp, #80	@ 0x50
 800e272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800e274:	2300      	movs	r3, #0
 800e276:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800e278:	2300      	movs	r3, #0
 800e27a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800e27c:	2300      	movs	r3, #0
 800e27e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800e280:	2300      	movs	r3, #0
 800e282:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e284:	4b79      	ldr	r3, [pc, #484]	@ (800e46c <HAL_RCC_GetSysClockFreq+0x200>)
 800e286:	689b      	ldr	r3, [r3, #8]
 800e288:	f003 030c 	and.w	r3, r3, #12
 800e28c:	2b08      	cmp	r3, #8
 800e28e:	d00d      	beq.n	800e2ac <HAL_RCC_GetSysClockFreq+0x40>
 800e290:	2b08      	cmp	r3, #8
 800e292:	f200 80e1 	bhi.w	800e458 <HAL_RCC_GetSysClockFreq+0x1ec>
 800e296:	2b00      	cmp	r3, #0
 800e298:	d002      	beq.n	800e2a0 <HAL_RCC_GetSysClockFreq+0x34>
 800e29a:	2b04      	cmp	r3, #4
 800e29c:	d003      	beq.n	800e2a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800e29e:	e0db      	b.n	800e458 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e2a0:	4b73      	ldr	r3, [pc, #460]	@ (800e470 <HAL_RCC_GetSysClockFreq+0x204>)
 800e2a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e2a4:	e0db      	b.n	800e45e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e2a6:	4b73      	ldr	r3, [pc, #460]	@ (800e474 <HAL_RCC_GetSysClockFreq+0x208>)
 800e2a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e2aa:	e0d8      	b.n	800e45e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e2ac:	4b6f      	ldr	r3, [pc, #444]	@ (800e46c <HAL_RCC_GetSysClockFreq+0x200>)
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e2b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800e2b6:	4b6d      	ldr	r3, [pc, #436]	@ (800e46c <HAL_RCC_GetSysClockFreq+0x200>)
 800e2b8:	685b      	ldr	r3, [r3, #4]
 800e2ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d063      	beq.n	800e38a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e2c2:	4b6a      	ldr	r3, [pc, #424]	@ (800e46c <HAL_RCC_GetSysClockFreq+0x200>)
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	099b      	lsrs	r3, r3, #6
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e2cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800e2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e2de:	4622      	mov	r2, r4
 800e2e0:	462b      	mov	r3, r5
 800e2e2:	f04f 0000 	mov.w	r0, #0
 800e2e6:	f04f 0100 	mov.w	r1, #0
 800e2ea:	0159      	lsls	r1, r3, #5
 800e2ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e2f0:	0150      	lsls	r0, r2, #5
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	4621      	mov	r1, r4
 800e2f8:	1a51      	subs	r1, r2, r1
 800e2fa:	6139      	str	r1, [r7, #16]
 800e2fc:	4629      	mov	r1, r5
 800e2fe:	eb63 0301 	sbc.w	r3, r3, r1
 800e302:	617b      	str	r3, [r7, #20]
 800e304:	f04f 0200 	mov.w	r2, #0
 800e308:	f04f 0300 	mov.w	r3, #0
 800e30c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e310:	4659      	mov	r1, fp
 800e312:	018b      	lsls	r3, r1, #6
 800e314:	4651      	mov	r1, sl
 800e316:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800e31a:	4651      	mov	r1, sl
 800e31c:	018a      	lsls	r2, r1, #6
 800e31e:	4651      	mov	r1, sl
 800e320:	ebb2 0801 	subs.w	r8, r2, r1
 800e324:	4659      	mov	r1, fp
 800e326:	eb63 0901 	sbc.w	r9, r3, r1
 800e32a:	f04f 0200 	mov.w	r2, #0
 800e32e:	f04f 0300 	mov.w	r3, #0
 800e332:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e336:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e33a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e33e:	4690      	mov	r8, r2
 800e340:	4699      	mov	r9, r3
 800e342:	4623      	mov	r3, r4
 800e344:	eb18 0303 	adds.w	r3, r8, r3
 800e348:	60bb      	str	r3, [r7, #8]
 800e34a:	462b      	mov	r3, r5
 800e34c:	eb49 0303 	adc.w	r3, r9, r3
 800e350:	60fb      	str	r3, [r7, #12]
 800e352:	f04f 0200 	mov.w	r2, #0
 800e356:	f04f 0300 	mov.w	r3, #0
 800e35a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e35e:	4629      	mov	r1, r5
 800e360:	024b      	lsls	r3, r1, #9
 800e362:	4621      	mov	r1, r4
 800e364:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800e368:	4621      	mov	r1, r4
 800e36a:	024a      	lsls	r2, r1, #9
 800e36c:	4610      	mov	r0, r2
 800e36e:	4619      	mov	r1, r3
 800e370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e372:	2200      	movs	r2, #0
 800e374:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e376:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e378:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800e37c:	f7f2 fc64 	bl	8000c48 <__aeabi_uldivmod>
 800e380:	4602      	mov	r2, r0
 800e382:	460b      	mov	r3, r1
 800e384:	4613      	mov	r3, r2
 800e386:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e388:	e058      	b.n	800e43c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e38a:	4b38      	ldr	r3, [pc, #224]	@ (800e46c <HAL_RCC_GetSysClockFreq+0x200>)
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	099b      	lsrs	r3, r3, #6
 800e390:	2200      	movs	r2, #0
 800e392:	4618      	mov	r0, r3
 800e394:	4611      	mov	r1, r2
 800e396:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800e39a:	623b      	str	r3, [r7, #32]
 800e39c:	2300      	movs	r3, #0
 800e39e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800e3a4:	4642      	mov	r2, r8
 800e3a6:	464b      	mov	r3, r9
 800e3a8:	f04f 0000 	mov.w	r0, #0
 800e3ac:	f04f 0100 	mov.w	r1, #0
 800e3b0:	0159      	lsls	r1, r3, #5
 800e3b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e3b6:	0150      	lsls	r0, r2, #5
 800e3b8:	4602      	mov	r2, r0
 800e3ba:	460b      	mov	r3, r1
 800e3bc:	4641      	mov	r1, r8
 800e3be:	ebb2 0a01 	subs.w	sl, r2, r1
 800e3c2:	4649      	mov	r1, r9
 800e3c4:	eb63 0b01 	sbc.w	fp, r3, r1
 800e3c8:	f04f 0200 	mov.w	r2, #0
 800e3cc:	f04f 0300 	mov.w	r3, #0
 800e3d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800e3d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800e3d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800e3dc:	ebb2 040a 	subs.w	r4, r2, sl
 800e3e0:	eb63 050b 	sbc.w	r5, r3, fp
 800e3e4:	f04f 0200 	mov.w	r2, #0
 800e3e8:	f04f 0300 	mov.w	r3, #0
 800e3ec:	00eb      	lsls	r3, r5, #3
 800e3ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e3f2:	00e2      	lsls	r2, r4, #3
 800e3f4:	4614      	mov	r4, r2
 800e3f6:	461d      	mov	r5, r3
 800e3f8:	4643      	mov	r3, r8
 800e3fa:	18e3      	adds	r3, r4, r3
 800e3fc:	603b      	str	r3, [r7, #0]
 800e3fe:	464b      	mov	r3, r9
 800e400:	eb45 0303 	adc.w	r3, r5, r3
 800e404:	607b      	str	r3, [r7, #4]
 800e406:	f04f 0200 	mov.w	r2, #0
 800e40a:	f04f 0300 	mov.w	r3, #0
 800e40e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e412:	4629      	mov	r1, r5
 800e414:	028b      	lsls	r3, r1, #10
 800e416:	4621      	mov	r1, r4
 800e418:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e41c:	4621      	mov	r1, r4
 800e41e:	028a      	lsls	r2, r1, #10
 800e420:	4610      	mov	r0, r2
 800e422:	4619      	mov	r1, r3
 800e424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e426:	2200      	movs	r2, #0
 800e428:	61bb      	str	r3, [r7, #24]
 800e42a:	61fa      	str	r2, [r7, #28]
 800e42c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e430:	f7f2 fc0a 	bl	8000c48 <__aeabi_uldivmod>
 800e434:	4602      	mov	r2, r0
 800e436:	460b      	mov	r3, r1
 800e438:	4613      	mov	r3, r2
 800e43a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800e43c:	4b0b      	ldr	r3, [pc, #44]	@ (800e46c <HAL_RCC_GetSysClockFreq+0x200>)
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	0c1b      	lsrs	r3, r3, #16
 800e442:	f003 0303 	and.w	r3, r3, #3
 800e446:	3301      	adds	r3, #1
 800e448:	005b      	lsls	r3, r3, #1
 800e44a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800e44c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e44e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e450:	fbb2 f3f3 	udiv	r3, r2, r3
 800e454:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e456:	e002      	b.n	800e45e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e458:	4b05      	ldr	r3, [pc, #20]	@ (800e470 <HAL_RCC_GetSysClockFreq+0x204>)
 800e45a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800e45c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e45e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800e460:	4618      	mov	r0, r3
 800e462:	3750      	adds	r7, #80	@ 0x50
 800e464:	46bd      	mov	sp, r7
 800e466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e46a:	bf00      	nop
 800e46c:	40023800 	.word	0x40023800
 800e470:	00f42400 	.word	0x00f42400
 800e474:	007a1200 	.word	0x007a1200

0800e478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e478:	b480      	push	{r7}
 800e47a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e47c:	4b03      	ldr	r3, [pc, #12]	@ (800e48c <HAL_RCC_GetHCLKFreq+0x14>)
 800e47e:	681b      	ldr	r3, [r3, #0]
}
 800e480:	4618      	mov	r0, r3
 800e482:	46bd      	mov	sp, r7
 800e484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e488:	4770      	bx	lr
 800e48a:	bf00      	nop
 800e48c:	20000000 	.word	0x20000000

0800e490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e494:	f7ff fff0 	bl	800e478 <HAL_RCC_GetHCLKFreq>
 800e498:	4602      	mov	r2, r0
 800e49a:	4b05      	ldr	r3, [pc, #20]	@ (800e4b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e49c:	689b      	ldr	r3, [r3, #8]
 800e49e:	0a9b      	lsrs	r3, r3, #10
 800e4a0:	f003 0307 	and.w	r3, r3, #7
 800e4a4:	4903      	ldr	r1, [pc, #12]	@ (800e4b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e4a6:	5ccb      	ldrb	r3, [r1, r3]
 800e4a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	bd80      	pop	{r7, pc}
 800e4b0:	40023800 	.word	0x40023800
 800e4b4:	080122e0 	.word	0x080122e0

0800e4b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e4bc:	f7ff ffdc 	bl	800e478 <HAL_RCC_GetHCLKFreq>
 800e4c0:	4602      	mov	r2, r0
 800e4c2:	4b05      	ldr	r3, [pc, #20]	@ (800e4d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e4c4:	689b      	ldr	r3, [r3, #8]
 800e4c6:	0b5b      	lsrs	r3, r3, #13
 800e4c8:	f003 0307 	and.w	r3, r3, #7
 800e4cc:	4903      	ldr	r1, [pc, #12]	@ (800e4dc <HAL_RCC_GetPCLK2Freq+0x24>)
 800e4ce:	5ccb      	ldrb	r3, [r1, r3]
 800e4d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	40023800 	.word	0x40023800
 800e4dc:	080122e0 	.word	0x080122e0

0800e4e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d101      	bne.n	800e4f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	e07b      	b.n	800e5ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d108      	bne.n	800e50c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e502:	d009      	beq.n	800e518 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2200      	movs	r2, #0
 800e508:	61da      	str	r2, [r3, #28]
 800e50a:	e005      	b.n	800e518 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2200      	movs	r2, #0
 800e510:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2200      	movs	r2, #0
 800e516:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2200      	movs	r2, #0
 800e51c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e524:	b2db      	uxtb	r3, r3
 800e526:	2b00      	cmp	r3, #0
 800e528:	d106      	bne.n	800e538 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2200      	movs	r2, #0
 800e52e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f7f2 fe86 	bl	8001244 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2202      	movs	r2, #2
 800e53c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e54e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	689b      	ldr	r3, [r3, #8]
 800e55c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800e560:	431a      	orrs	r2, r3
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e56a:	431a      	orrs	r2, r3
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	691b      	ldr	r3, [r3, #16]
 800e570:	f003 0302 	and.w	r3, r3, #2
 800e574:	431a      	orrs	r2, r3
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	695b      	ldr	r3, [r3, #20]
 800e57a:	f003 0301 	and.w	r3, r3, #1
 800e57e:	431a      	orrs	r2, r3
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	699b      	ldr	r3, [r3, #24]
 800e584:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e588:	431a      	orrs	r2, r3
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	69db      	ldr	r3, [r3, #28]
 800e58e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e592:	431a      	orrs	r2, r3
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6a1b      	ldr	r3, [r3, #32]
 800e598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e59c:	ea42 0103 	orr.w	r1, r2, r3
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	430a      	orrs	r2, r1
 800e5ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	699b      	ldr	r3, [r3, #24]
 800e5b4:	0c1b      	lsrs	r3, r3, #16
 800e5b6:	f003 0104 	and.w	r1, r3, #4
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5be:	f003 0210 	and.w	r2, r3, #16
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	430a      	orrs	r2, r1
 800e5c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	69da      	ldr	r2, [r3, #28]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e5d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3708      	adds	r7, #8
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b082      	sub	sp, #8
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d101      	bne.n	800e604 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e600:	2301      	movs	r3, #1
 800e602:	e042      	b.n	800e68a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d106      	bne.n	800e61e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2200      	movs	r2, #0
 800e614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f000 f83a 	bl	800e692 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2224      	movs	r2, #36	@ 0x24
 800e622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	68da      	ldr	r2, [r3, #12]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e634:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f000 f97c 	bl	800e934 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	691a      	ldr	r2, [r3, #16]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e64a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	695a      	ldr	r2, [r3, #20]
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e65a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	68da      	ldr	r2, [r3, #12]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e66a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2200      	movs	r2, #0
 800e670:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2220      	movs	r2, #32
 800e676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2220      	movs	r2, #32
 800e67e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2200      	movs	r2, #0
 800e686:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800e688:	2300      	movs	r3, #0
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3708      	adds	r7, #8
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800e692:	b480      	push	{r7}
 800e694:	b083      	sub	sp, #12
 800e696:	af00      	add	r7, sp, #0
 800e698:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800e69a:	bf00      	nop
 800e69c:	370c      	adds	r7, #12
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a4:	4770      	bx	lr

0800e6a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e6a6:	b580      	push	{r7, lr}
 800e6a8:	b08a      	sub	sp, #40	@ 0x28
 800e6aa:	af02      	add	r7, sp, #8
 800e6ac:	60f8      	str	r0, [r7, #12]
 800e6ae:	60b9      	str	r1, [r7, #8]
 800e6b0:	603b      	str	r3, [r7, #0]
 800e6b2:	4613      	mov	r3, r2
 800e6b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	2b20      	cmp	r3, #32
 800e6c4:	d175      	bne.n	800e7b2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d002      	beq.n	800e6d2 <HAL_UART_Transmit+0x2c>
 800e6cc:	88fb      	ldrh	r3, [r7, #6]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d101      	bne.n	800e6d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	e06e      	b.n	800e7b4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2221      	movs	r2, #33	@ 0x21
 800e6e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e6e4:	f7fc fe6e 	bl	800b3c4 <HAL_GetTick>
 800e6e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	88fa      	ldrh	r2, [r7, #6]
 800e6ee:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	88fa      	ldrh	r2, [r7, #6]
 800e6f4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	689b      	ldr	r3, [r3, #8]
 800e6fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e6fe:	d108      	bne.n	800e712 <HAL_UART_Transmit+0x6c>
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	691b      	ldr	r3, [r3, #16]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d104      	bne.n	800e712 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e708:	2300      	movs	r3, #0
 800e70a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	61bb      	str	r3, [r7, #24]
 800e710:	e003      	b.n	800e71a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e716:	2300      	movs	r3, #0
 800e718:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e71a:	e02e      	b.n	800e77a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	9300      	str	r3, [sp, #0]
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	2200      	movs	r2, #0
 800e724:	2180      	movs	r1, #128	@ 0x80
 800e726:	68f8      	ldr	r0, [r7, #12]
 800e728:	f000 f848 	bl	800e7bc <UART_WaitOnFlagUntilTimeout>
 800e72c:	4603      	mov	r3, r0
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d005      	beq.n	800e73e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2220      	movs	r2, #32
 800e736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800e73a:	2303      	movs	r3, #3
 800e73c:	e03a      	b.n	800e7b4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800e73e:	69fb      	ldr	r3, [r7, #28]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d10b      	bne.n	800e75c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	881b      	ldrh	r3, [r3, #0]
 800e748:	461a      	mov	r2, r3
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e752:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e754:	69bb      	ldr	r3, [r7, #24]
 800e756:	3302      	adds	r3, #2
 800e758:	61bb      	str	r3, [r7, #24]
 800e75a:	e007      	b.n	800e76c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e75c:	69fb      	ldr	r3, [r7, #28]
 800e75e:	781a      	ldrb	r2, [r3, #0]
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e766:	69fb      	ldr	r3, [r7, #28]
 800e768:	3301      	adds	r3, #1
 800e76a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e770:	b29b      	uxth	r3, r3
 800e772:	3b01      	subs	r3, #1
 800e774:	b29a      	uxth	r2, r3
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e77e:	b29b      	uxth	r3, r3
 800e780:	2b00      	cmp	r3, #0
 800e782:	d1cb      	bne.n	800e71c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	2200      	movs	r2, #0
 800e78c:	2140      	movs	r1, #64	@ 0x40
 800e78e:	68f8      	ldr	r0, [r7, #12]
 800e790:	f000 f814 	bl	800e7bc <UART_WaitOnFlagUntilTimeout>
 800e794:	4603      	mov	r3, r0
 800e796:	2b00      	cmp	r3, #0
 800e798:	d005      	beq.n	800e7a6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2220      	movs	r2, #32
 800e79e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800e7a2:	2303      	movs	r3, #3
 800e7a4:	e006      	b.n	800e7b4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2220      	movs	r2, #32
 800e7aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	e000      	b.n	800e7b4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800e7b2:	2302      	movs	r3, #2
  }
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3720      	adds	r7, #32
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b086      	sub	sp, #24
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	60b9      	str	r1, [r7, #8]
 800e7c6:	603b      	str	r3, [r7, #0]
 800e7c8:	4613      	mov	r3, r2
 800e7ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e7cc:	e03b      	b.n	800e846 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e7ce:	6a3b      	ldr	r3, [r7, #32]
 800e7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7d4:	d037      	beq.n	800e846 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7d6:	f7fc fdf5 	bl	800b3c4 <HAL_GetTick>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	1ad3      	subs	r3, r2, r3
 800e7e0:	6a3a      	ldr	r2, [r7, #32]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d302      	bcc.n	800e7ec <UART_WaitOnFlagUntilTimeout+0x30>
 800e7e6:	6a3b      	ldr	r3, [r7, #32]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d101      	bne.n	800e7f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e7ec:	2303      	movs	r3, #3
 800e7ee:	e03a      	b.n	800e866 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	68db      	ldr	r3, [r3, #12]
 800e7f6:	f003 0304 	and.w	r3, r3, #4
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d023      	beq.n	800e846 <UART_WaitOnFlagUntilTimeout+0x8a>
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	2b80      	cmp	r3, #128	@ 0x80
 800e802:	d020      	beq.n	800e846 <UART_WaitOnFlagUntilTimeout+0x8a>
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	2b40      	cmp	r3, #64	@ 0x40
 800e808:	d01d      	beq.n	800e846 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f003 0308 	and.w	r3, r3, #8
 800e814:	2b08      	cmp	r3, #8
 800e816:	d116      	bne.n	800e846 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800e818:	2300      	movs	r3, #0
 800e81a:	617b      	str	r3, [r7, #20]
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	617b      	str	r3, [r7, #20]
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	685b      	ldr	r3, [r3, #4]
 800e82a:	617b      	str	r3, [r7, #20]
 800e82c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e82e:	68f8      	ldr	r0, [r7, #12]
 800e830:	f000 f81d 	bl	800e86e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	2208      	movs	r2, #8
 800e838:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2200      	movs	r2, #0
 800e83e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800e842:	2301      	movs	r3, #1
 800e844:	e00f      	b.n	800e866 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	681a      	ldr	r2, [r3, #0]
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	4013      	ands	r3, r2
 800e850:	68ba      	ldr	r2, [r7, #8]
 800e852:	429a      	cmp	r2, r3
 800e854:	bf0c      	ite	eq
 800e856:	2301      	moveq	r3, #1
 800e858:	2300      	movne	r3, #0
 800e85a:	b2db      	uxtb	r3, r3
 800e85c:	461a      	mov	r2, r3
 800e85e:	79fb      	ldrb	r3, [r7, #7]
 800e860:	429a      	cmp	r2, r3
 800e862:	d0b4      	beq.n	800e7ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e864:	2300      	movs	r3, #0
}
 800e866:	4618      	mov	r0, r3
 800e868:	3718      	adds	r7, #24
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}

0800e86e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e86e:	b480      	push	{r7}
 800e870:	b095      	sub	sp, #84	@ 0x54
 800e872:	af00      	add	r7, sp, #0
 800e874:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	330c      	adds	r3, #12
 800e87c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e87e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e880:	e853 3f00 	ldrex	r3, [r3]
 800e884:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e888:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e88c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	330c      	adds	r3, #12
 800e894:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e896:	643a      	str	r2, [r7, #64]	@ 0x40
 800e898:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e89a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e89c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e89e:	e841 2300 	strex	r3, r2, [r1]
 800e8a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d1e5      	bne.n	800e876 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	3314      	adds	r3, #20
 800e8b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b2:	6a3b      	ldr	r3, [r7, #32]
 800e8b4:	e853 3f00 	ldrex	r3, [r3]
 800e8b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e8ba:	69fb      	ldr	r3, [r7, #28]
 800e8bc:	f023 0301 	bic.w	r3, r3, #1
 800e8c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	3314      	adds	r3, #20
 800e8c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e8ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e8cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e8d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e8d2:	e841 2300 	strex	r3, r2, [r1]
 800e8d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d1e5      	bne.n	800e8aa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	d119      	bne.n	800e91a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	330c      	adds	r3, #12
 800e8ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	e853 3f00 	ldrex	r3, [r3]
 800e8f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	f023 0310 	bic.w	r3, r3, #16
 800e8fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	330c      	adds	r3, #12
 800e904:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e906:	61ba      	str	r2, [r7, #24]
 800e908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e90a:	6979      	ldr	r1, [r7, #20]
 800e90c:	69ba      	ldr	r2, [r7, #24]
 800e90e:	e841 2300 	strex	r3, r2, [r1]
 800e912:	613b      	str	r3, [r7, #16]
   return(result);
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d1e5      	bne.n	800e8e6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2220      	movs	r2, #32
 800e91e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2200      	movs	r2, #0
 800e926:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800e928:	bf00      	nop
 800e92a:	3754      	adds	r7, #84	@ 0x54
 800e92c:	46bd      	mov	sp, r7
 800e92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e932:	4770      	bx	lr

0800e934 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e938:	b0c0      	sub	sp, #256	@ 0x100
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	691b      	ldr	r3, [r3, #16]
 800e948:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800e94c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e950:	68d9      	ldr	r1, [r3, #12]
 800e952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	ea40 0301 	orr.w	r3, r0, r1
 800e95c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e95e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e962:	689a      	ldr	r2, [r3, #8]
 800e964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e968:	691b      	ldr	r3, [r3, #16]
 800e96a:	431a      	orrs	r2, r3
 800e96c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e970:	695b      	ldr	r3, [r3, #20]
 800e972:	431a      	orrs	r2, r3
 800e974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e978:	69db      	ldr	r3, [r3, #28]
 800e97a:	4313      	orrs	r3, r2
 800e97c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800e98c:	f021 010c 	bic.w	r1, r1, #12
 800e990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e994:	681a      	ldr	r2, [r3, #0]
 800e996:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e99a:	430b      	orrs	r3, r1
 800e99c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e99e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	695b      	ldr	r3, [r3, #20]
 800e9a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800e9aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e9ae:	6999      	ldr	r1, [r3, #24]
 800e9b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e9b4:	681a      	ldr	r2, [r3, #0]
 800e9b6:	ea40 0301 	orr.w	r3, r0, r1
 800e9ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e9bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	4b8f      	ldr	r3, [pc, #572]	@ (800ec00 <UART_SetConfig+0x2cc>)
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d005      	beq.n	800e9d4 <UART_SetConfig+0xa0>
 800e9c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e9cc:	681a      	ldr	r2, [r3, #0]
 800e9ce:	4b8d      	ldr	r3, [pc, #564]	@ (800ec04 <UART_SetConfig+0x2d0>)
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d104      	bne.n	800e9de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e9d4:	f7ff fd70 	bl	800e4b8 <HAL_RCC_GetPCLK2Freq>
 800e9d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800e9dc:	e003      	b.n	800e9e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e9de:	f7ff fd57 	bl	800e490 <HAL_RCC_GetPCLK1Freq>
 800e9e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e9e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e9ea:	69db      	ldr	r3, [r3, #28]
 800e9ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e9f0:	f040 810c 	bne.w	800ec0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e9f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e9fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ea02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ea06:	4622      	mov	r2, r4
 800ea08:	462b      	mov	r3, r5
 800ea0a:	1891      	adds	r1, r2, r2
 800ea0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ea0e:	415b      	adcs	r3, r3
 800ea10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ea12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ea16:	4621      	mov	r1, r4
 800ea18:	eb12 0801 	adds.w	r8, r2, r1
 800ea1c:	4629      	mov	r1, r5
 800ea1e:	eb43 0901 	adc.w	r9, r3, r1
 800ea22:	f04f 0200 	mov.w	r2, #0
 800ea26:	f04f 0300 	mov.w	r3, #0
 800ea2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ea2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ea32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ea36:	4690      	mov	r8, r2
 800ea38:	4699      	mov	r9, r3
 800ea3a:	4623      	mov	r3, r4
 800ea3c:	eb18 0303 	adds.w	r3, r8, r3
 800ea40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ea44:	462b      	mov	r3, r5
 800ea46:	eb49 0303 	adc.w	r3, r9, r3
 800ea4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ea4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	2200      	movs	r2, #0
 800ea56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ea5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ea5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ea62:	460b      	mov	r3, r1
 800ea64:	18db      	adds	r3, r3, r3
 800ea66:	653b      	str	r3, [r7, #80]	@ 0x50
 800ea68:	4613      	mov	r3, r2
 800ea6a:	eb42 0303 	adc.w	r3, r2, r3
 800ea6e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ea70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ea74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ea78:	f7f2 f8e6 	bl	8000c48 <__aeabi_uldivmod>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	460b      	mov	r3, r1
 800ea80:	4b61      	ldr	r3, [pc, #388]	@ (800ec08 <UART_SetConfig+0x2d4>)
 800ea82:	fba3 2302 	umull	r2, r3, r3, r2
 800ea86:	095b      	lsrs	r3, r3, #5
 800ea88:	011c      	lsls	r4, r3, #4
 800ea8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ea8e:	2200      	movs	r2, #0
 800ea90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ea94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ea98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ea9c:	4642      	mov	r2, r8
 800ea9e:	464b      	mov	r3, r9
 800eaa0:	1891      	adds	r1, r2, r2
 800eaa2:	64b9      	str	r1, [r7, #72]	@ 0x48
 800eaa4:	415b      	adcs	r3, r3
 800eaa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eaa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800eaac:	4641      	mov	r1, r8
 800eaae:	eb12 0a01 	adds.w	sl, r2, r1
 800eab2:	4649      	mov	r1, r9
 800eab4:	eb43 0b01 	adc.w	fp, r3, r1
 800eab8:	f04f 0200 	mov.w	r2, #0
 800eabc:	f04f 0300 	mov.w	r3, #0
 800eac0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800eac4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800eac8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eacc:	4692      	mov	sl, r2
 800eace:	469b      	mov	fp, r3
 800ead0:	4643      	mov	r3, r8
 800ead2:	eb1a 0303 	adds.w	r3, sl, r3
 800ead6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800eada:	464b      	mov	r3, r9
 800eadc:	eb4b 0303 	adc.w	r3, fp, r3
 800eae0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800eae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	2200      	movs	r2, #0
 800eaec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800eaf0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800eaf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800eaf8:	460b      	mov	r3, r1
 800eafa:	18db      	adds	r3, r3, r3
 800eafc:	643b      	str	r3, [r7, #64]	@ 0x40
 800eafe:	4613      	mov	r3, r2
 800eb00:	eb42 0303 	adc.w	r3, r2, r3
 800eb04:	647b      	str	r3, [r7, #68]	@ 0x44
 800eb06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800eb0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800eb0e:	f7f2 f89b 	bl	8000c48 <__aeabi_uldivmod>
 800eb12:	4602      	mov	r2, r0
 800eb14:	460b      	mov	r3, r1
 800eb16:	4611      	mov	r1, r2
 800eb18:	4b3b      	ldr	r3, [pc, #236]	@ (800ec08 <UART_SetConfig+0x2d4>)
 800eb1a:	fba3 2301 	umull	r2, r3, r3, r1
 800eb1e:	095b      	lsrs	r3, r3, #5
 800eb20:	2264      	movs	r2, #100	@ 0x64
 800eb22:	fb02 f303 	mul.w	r3, r2, r3
 800eb26:	1acb      	subs	r3, r1, r3
 800eb28:	00db      	lsls	r3, r3, #3
 800eb2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800eb2e:	4b36      	ldr	r3, [pc, #216]	@ (800ec08 <UART_SetConfig+0x2d4>)
 800eb30:	fba3 2302 	umull	r2, r3, r3, r2
 800eb34:	095b      	lsrs	r3, r3, #5
 800eb36:	005b      	lsls	r3, r3, #1
 800eb38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800eb3c:	441c      	add	r4, r3
 800eb3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eb42:	2200      	movs	r2, #0
 800eb44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800eb48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800eb4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800eb50:	4642      	mov	r2, r8
 800eb52:	464b      	mov	r3, r9
 800eb54:	1891      	adds	r1, r2, r2
 800eb56:	63b9      	str	r1, [r7, #56]	@ 0x38
 800eb58:	415b      	adcs	r3, r3
 800eb5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800eb60:	4641      	mov	r1, r8
 800eb62:	1851      	adds	r1, r2, r1
 800eb64:	6339      	str	r1, [r7, #48]	@ 0x30
 800eb66:	4649      	mov	r1, r9
 800eb68:	414b      	adcs	r3, r1
 800eb6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb6c:	f04f 0200 	mov.w	r2, #0
 800eb70:	f04f 0300 	mov.w	r3, #0
 800eb74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800eb78:	4659      	mov	r1, fp
 800eb7a:	00cb      	lsls	r3, r1, #3
 800eb7c:	4651      	mov	r1, sl
 800eb7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800eb82:	4651      	mov	r1, sl
 800eb84:	00ca      	lsls	r2, r1, #3
 800eb86:	4610      	mov	r0, r2
 800eb88:	4619      	mov	r1, r3
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	4642      	mov	r2, r8
 800eb8e:	189b      	adds	r3, r3, r2
 800eb90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800eb94:	464b      	mov	r3, r9
 800eb96:	460a      	mov	r2, r1
 800eb98:	eb42 0303 	adc.w	r3, r2, r3
 800eb9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eba4:	685b      	ldr	r3, [r3, #4]
 800eba6:	2200      	movs	r2, #0
 800eba8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ebac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ebb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	18db      	adds	r3, r3, r3
 800ebb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ebba:	4613      	mov	r3, r2
 800ebbc:	eb42 0303 	adc.w	r3, r2, r3
 800ebc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ebc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ebc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ebca:	f7f2 f83d 	bl	8000c48 <__aeabi_uldivmod>
 800ebce:	4602      	mov	r2, r0
 800ebd0:	460b      	mov	r3, r1
 800ebd2:	4b0d      	ldr	r3, [pc, #52]	@ (800ec08 <UART_SetConfig+0x2d4>)
 800ebd4:	fba3 1302 	umull	r1, r3, r3, r2
 800ebd8:	095b      	lsrs	r3, r3, #5
 800ebda:	2164      	movs	r1, #100	@ 0x64
 800ebdc:	fb01 f303 	mul.w	r3, r1, r3
 800ebe0:	1ad3      	subs	r3, r2, r3
 800ebe2:	00db      	lsls	r3, r3, #3
 800ebe4:	3332      	adds	r3, #50	@ 0x32
 800ebe6:	4a08      	ldr	r2, [pc, #32]	@ (800ec08 <UART_SetConfig+0x2d4>)
 800ebe8:	fba2 2303 	umull	r2, r3, r2, r3
 800ebec:	095b      	lsrs	r3, r3, #5
 800ebee:	f003 0207 	and.w	r2, r3, #7
 800ebf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	4422      	add	r2, r4
 800ebfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ebfc:	e106      	b.n	800ee0c <UART_SetConfig+0x4d8>
 800ebfe:	bf00      	nop
 800ec00:	40011000 	.word	0x40011000
 800ec04:	40011400 	.word	0x40011400
 800ec08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ec0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ec10:	2200      	movs	r2, #0
 800ec12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ec16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ec1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ec1e:	4642      	mov	r2, r8
 800ec20:	464b      	mov	r3, r9
 800ec22:	1891      	adds	r1, r2, r2
 800ec24:	6239      	str	r1, [r7, #32]
 800ec26:	415b      	adcs	r3, r3
 800ec28:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ec2e:	4641      	mov	r1, r8
 800ec30:	1854      	adds	r4, r2, r1
 800ec32:	4649      	mov	r1, r9
 800ec34:	eb43 0501 	adc.w	r5, r3, r1
 800ec38:	f04f 0200 	mov.w	r2, #0
 800ec3c:	f04f 0300 	mov.w	r3, #0
 800ec40:	00eb      	lsls	r3, r5, #3
 800ec42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ec46:	00e2      	lsls	r2, r4, #3
 800ec48:	4614      	mov	r4, r2
 800ec4a:	461d      	mov	r5, r3
 800ec4c:	4643      	mov	r3, r8
 800ec4e:	18e3      	adds	r3, r4, r3
 800ec50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ec54:	464b      	mov	r3, r9
 800ec56:	eb45 0303 	adc.w	r3, r5, r3
 800ec5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ec5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec62:	685b      	ldr	r3, [r3, #4]
 800ec64:	2200      	movs	r2, #0
 800ec66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ec6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ec6e:	f04f 0200 	mov.w	r2, #0
 800ec72:	f04f 0300 	mov.w	r3, #0
 800ec76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ec7a:	4629      	mov	r1, r5
 800ec7c:	008b      	lsls	r3, r1, #2
 800ec7e:	4621      	mov	r1, r4
 800ec80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ec84:	4621      	mov	r1, r4
 800ec86:	008a      	lsls	r2, r1, #2
 800ec88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ec8c:	f7f1 ffdc 	bl	8000c48 <__aeabi_uldivmod>
 800ec90:	4602      	mov	r2, r0
 800ec92:	460b      	mov	r3, r1
 800ec94:	4b60      	ldr	r3, [pc, #384]	@ (800ee18 <UART_SetConfig+0x4e4>)
 800ec96:	fba3 2302 	umull	r2, r3, r3, r2
 800ec9a:	095b      	lsrs	r3, r3, #5
 800ec9c:	011c      	lsls	r4, r3, #4
 800ec9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800eca2:	2200      	movs	r2, #0
 800eca4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800eca8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ecac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ecb0:	4642      	mov	r2, r8
 800ecb2:	464b      	mov	r3, r9
 800ecb4:	1891      	adds	r1, r2, r2
 800ecb6:	61b9      	str	r1, [r7, #24]
 800ecb8:	415b      	adcs	r3, r3
 800ecba:	61fb      	str	r3, [r7, #28]
 800ecbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ecc0:	4641      	mov	r1, r8
 800ecc2:	1851      	adds	r1, r2, r1
 800ecc4:	6139      	str	r1, [r7, #16]
 800ecc6:	4649      	mov	r1, r9
 800ecc8:	414b      	adcs	r3, r1
 800ecca:	617b      	str	r3, [r7, #20]
 800eccc:	f04f 0200 	mov.w	r2, #0
 800ecd0:	f04f 0300 	mov.w	r3, #0
 800ecd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ecd8:	4659      	mov	r1, fp
 800ecda:	00cb      	lsls	r3, r1, #3
 800ecdc:	4651      	mov	r1, sl
 800ecde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ece2:	4651      	mov	r1, sl
 800ece4:	00ca      	lsls	r2, r1, #3
 800ece6:	4610      	mov	r0, r2
 800ece8:	4619      	mov	r1, r3
 800ecea:	4603      	mov	r3, r0
 800ecec:	4642      	mov	r2, r8
 800ecee:	189b      	adds	r3, r3, r2
 800ecf0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ecf4:	464b      	mov	r3, r9
 800ecf6:	460a      	mov	r2, r1
 800ecf8:	eb42 0303 	adc.w	r3, r2, r3
 800ecfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ed00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	2200      	movs	r2, #0
 800ed08:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ed0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ed0c:	f04f 0200 	mov.w	r2, #0
 800ed10:	f04f 0300 	mov.w	r3, #0
 800ed14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ed18:	4649      	mov	r1, r9
 800ed1a:	008b      	lsls	r3, r1, #2
 800ed1c:	4641      	mov	r1, r8
 800ed1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ed22:	4641      	mov	r1, r8
 800ed24:	008a      	lsls	r2, r1, #2
 800ed26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ed2a:	f7f1 ff8d 	bl	8000c48 <__aeabi_uldivmod>
 800ed2e:	4602      	mov	r2, r0
 800ed30:	460b      	mov	r3, r1
 800ed32:	4611      	mov	r1, r2
 800ed34:	4b38      	ldr	r3, [pc, #224]	@ (800ee18 <UART_SetConfig+0x4e4>)
 800ed36:	fba3 2301 	umull	r2, r3, r3, r1
 800ed3a:	095b      	lsrs	r3, r3, #5
 800ed3c:	2264      	movs	r2, #100	@ 0x64
 800ed3e:	fb02 f303 	mul.w	r3, r2, r3
 800ed42:	1acb      	subs	r3, r1, r3
 800ed44:	011b      	lsls	r3, r3, #4
 800ed46:	3332      	adds	r3, #50	@ 0x32
 800ed48:	4a33      	ldr	r2, [pc, #204]	@ (800ee18 <UART_SetConfig+0x4e4>)
 800ed4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ed4e:	095b      	lsrs	r3, r3, #5
 800ed50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ed54:	441c      	add	r4, r3
 800ed56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	673b      	str	r3, [r7, #112]	@ 0x70
 800ed5e:	677a      	str	r2, [r7, #116]	@ 0x74
 800ed60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ed64:	4642      	mov	r2, r8
 800ed66:	464b      	mov	r3, r9
 800ed68:	1891      	adds	r1, r2, r2
 800ed6a:	60b9      	str	r1, [r7, #8]
 800ed6c:	415b      	adcs	r3, r3
 800ed6e:	60fb      	str	r3, [r7, #12]
 800ed70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ed74:	4641      	mov	r1, r8
 800ed76:	1851      	adds	r1, r2, r1
 800ed78:	6039      	str	r1, [r7, #0]
 800ed7a:	4649      	mov	r1, r9
 800ed7c:	414b      	adcs	r3, r1
 800ed7e:	607b      	str	r3, [r7, #4]
 800ed80:	f04f 0200 	mov.w	r2, #0
 800ed84:	f04f 0300 	mov.w	r3, #0
 800ed88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ed8c:	4659      	mov	r1, fp
 800ed8e:	00cb      	lsls	r3, r1, #3
 800ed90:	4651      	mov	r1, sl
 800ed92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ed96:	4651      	mov	r1, sl
 800ed98:	00ca      	lsls	r2, r1, #3
 800ed9a:	4610      	mov	r0, r2
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	4603      	mov	r3, r0
 800eda0:	4642      	mov	r2, r8
 800eda2:	189b      	adds	r3, r3, r2
 800eda4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eda6:	464b      	mov	r3, r9
 800eda8:	460a      	mov	r2, r1
 800edaa:	eb42 0303 	adc.w	r3, r2, r3
 800edae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800edb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800edb4:	685b      	ldr	r3, [r3, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	663b      	str	r3, [r7, #96]	@ 0x60
 800edba:	667a      	str	r2, [r7, #100]	@ 0x64
 800edbc:	f04f 0200 	mov.w	r2, #0
 800edc0:	f04f 0300 	mov.w	r3, #0
 800edc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800edc8:	4649      	mov	r1, r9
 800edca:	008b      	lsls	r3, r1, #2
 800edcc:	4641      	mov	r1, r8
 800edce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800edd2:	4641      	mov	r1, r8
 800edd4:	008a      	lsls	r2, r1, #2
 800edd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800edda:	f7f1 ff35 	bl	8000c48 <__aeabi_uldivmod>
 800edde:	4602      	mov	r2, r0
 800ede0:	460b      	mov	r3, r1
 800ede2:	4b0d      	ldr	r3, [pc, #52]	@ (800ee18 <UART_SetConfig+0x4e4>)
 800ede4:	fba3 1302 	umull	r1, r3, r3, r2
 800ede8:	095b      	lsrs	r3, r3, #5
 800edea:	2164      	movs	r1, #100	@ 0x64
 800edec:	fb01 f303 	mul.w	r3, r1, r3
 800edf0:	1ad3      	subs	r3, r2, r3
 800edf2:	011b      	lsls	r3, r3, #4
 800edf4:	3332      	adds	r3, #50	@ 0x32
 800edf6:	4a08      	ldr	r2, [pc, #32]	@ (800ee18 <UART_SetConfig+0x4e4>)
 800edf8:	fba2 2303 	umull	r2, r3, r2, r3
 800edfc:	095b      	lsrs	r3, r3, #5
 800edfe:	f003 020f 	and.w	r2, r3, #15
 800ee02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	4422      	add	r2, r4
 800ee0a:	609a      	str	r2, [r3, #8]
}
 800ee0c:	bf00      	nop
 800ee0e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ee12:	46bd      	mov	sp, r7
 800ee14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ee18:	51eb851f 	.word	0x51eb851f

0800ee1c <MX_MEMS_Init>:
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS4A1_DataLogTerminal_Init(void);
static void MX_IKS4A1_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_IKS4A1_DataLogTerminal_Init();
 800ee20:	f000 f808 	bl	800ee34 <MX_IKS4A1_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800ee24:	bf00      	nop
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_IKS4A1_DataLogTerminal_Process();
 800ee2c:	f000 fa0a 	bl	800f244 <MX_IKS4A1_DataLogTerminal_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 800ee30:	bf00      	nop
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <MX_IKS4A1_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS4A1_DataLogTerminal_Init(void)
{
 800ee34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee36:	b089      	sub	sp, #36	@ 0x24
 800ee38:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int16_t i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 800ee3a:	2000      	movs	r0, #0
 800ee3c:	f7fc f882 	bl	800af44 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800ee40:	2101      	movs	r1, #1
 800ee42:	2000      	movs	r0, #0
 800ee44:	f7fc f8d2 	bl	800afec <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 800ee48:	2000      	movs	r0, #0
 800ee4a:	f7fc f923 	bl	800b094 <BSP_PB_GetState>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	bf0c      	ite	eq
 800ee54:	2301      	moveq	r3, #1
 800ee56:	2300      	movne	r3, #0
 800ee58:	b2db      	uxtb	r3, r3
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	4b84      	ldr	r3, [pc, #528]	@ (800f070 <MX_IKS4A1_DataLogTerminal_Init+0x23c>)
 800ee5e:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800ee60:	2000      	movs	r0, #0
 800ee62:	f7fc f979 	bl	800b158 <BSP_COM_Init>

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 800ee66:	4a83      	ldr	r2, [pc, #524]	@ (800f074 <MX_IKS4A1_DataLogTerminal_Init+0x240>)
 800ee68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ee6c:	4882      	ldr	r0, [pc, #520]	@ (800f078 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 800ee6e:	f001 f8b9 	bl	800ffe4 <sniprintf>
  printf("%s", dataOut);
 800ee72:	4981      	ldr	r1, [pc, #516]	@ (800f078 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 800ee74:	4881      	ldr	r0, [pc, #516]	@ (800f07c <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 800ee76:	f001 f8a3 	bl	800ffc0 <iprintf>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO | MOTION_GYRO);
 800ee7a:	2103      	movs	r1, #3
 800ee7c:	2001      	movs	r0, #1
 800ee7e:	f7fb fb19 	bl	800a4b4 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSO16IS_0, MOTION_ACCELERO | MOTION_GYRO);
 800ee82:	2103      	movs	r1, #3
 800ee84:	2003      	movs	r0, #3
 800ee86:	f7fb fb15 	bl	800a4b4 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2DUXS12_0, MOTION_ACCELERO);
 800ee8a:	2102      	movs	r1, #2
 800ee8c:	2002      	movs	r0, #2
 800ee8e:	f7fb fb11 	bl	800a4b4 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2MDL_0, MOTION_MAGNETO);
 800ee92:	2104      	movs	r1, #4
 800ee94:	2000      	movs	r0, #0
 800ee96:	f7fb fb0d 	bl	800a4b4 <IKS4A1_MOTION_SENSOR_Init>

  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	81fb      	strh	r3, [r7, #14]
 800ee9e:	e0d4      	b.n	800f04a <MX_IKS4A1_DataLogTerminal_Init+0x216>
  {
    IKS4A1_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 800eea0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800eea4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800eea8:	4613      	mov	r3, r2
 800eeaa:	00db      	lsls	r3, r3, #3
 800eeac:	1a9b      	subs	r3, r3, r2
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	4a73      	ldr	r2, [pc, #460]	@ (800f080 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 800eeb2:	4413      	add	r3, r2
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	f7fb fc2f 	bl	800a718 <IKS4A1_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 800eeba:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800eebe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800eec2:	486f      	ldr	r0, [pc, #444]	@ (800f080 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 800eec4:	4613      	mov	r3, r2
 800eec6:	00db      	lsls	r3, r3, #3
 800eec8:	1a9b      	subs	r3, r3, r2
 800eeca:	009b      	lsls	r3, r3, #2
 800eecc:	4403      	add	r3, r0
 800eece:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800eed0:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800eed2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800eed6:	486a      	ldr	r0, [pc, #424]	@ (800f080 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 800eed8:	4613      	mov	r3, r2
 800eeda:	00db      	lsls	r3, r3, #3
 800eedc:	1a9b      	subs	r3, r3, r2
 800eede:	009b      	lsls	r3, r3, #2
 800eee0:	4403      	add	r3, r0
 800eee2:	3301      	adds	r3, #1
 800eee4:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800eee6:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800eee8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800eeec:	4864      	ldr	r0, [pc, #400]	@ (800f080 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 800eeee:	4613      	mov	r3, r2
 800eef0:	00db      	lsls	r3, r3, #3
 800eef2:	1a9b      	subs	r3, r3, r2
 800eef4:	009b      	lsls	r3, r3, #2
 800eef6:	4403      	add	r3, r0
 800eef8:	3302      	adds	r3, #2
 800eefa:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800eefc:	461e      	mov	r6, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 800eefe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ef02:	485f      	ldr	r0, [pc, #380]	@ (800f080 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 800ef04:	4613      	mov	r3, r2
 800ef06:	00db      	lsls	r3, r3, #3
 800ef08:	1a9b      	subs	r3, r3, r2
 800ef0a:	009b      	lsls	r3, r3, #2
 800ef0c:	4403      	add	r3, r0
 800ef0e:	3303      	adds	r3, #3
 800ef10:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800ef12:	9303      	str	r3, [sp, #12]
 800ef14:	9602      	str	r6, [sp, #8]
 800ef16:	9501      	str	r5, [sp, #4]
 800ef18:	9400      	str	r4, [sp, #0]
 800ef1a:	460b      	mov	r3, r1
 800ef1c:	4a59      	ldr	r2, [pc, #356]	@ (800f084 <MX_IKS4A1_DataLogTerminal_Init+0x250>)
 800ef1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ef22:	4855      	ldr	r0, [pc, #340]	@ (800f078 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 800ef24:	f001 f85e 	bl	800ffe4 <sniprintf>
    printf("%s", dataOut);
 800ef28:	4953      	ldr	r1, [pc, #332]	@ (800f078 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 800ef2a:	4854      	ldr	r0, [pc, #336]	@ (800f07c <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 800ef2c:	f001 f848 	bl	800ffc0 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 800ef30:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ef34:	4952      	ldr	r1, [pc, #328]	@ (800f080 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 800ef36:	4613      	mov	r3, r2
 800ef38:	00db      	lsls	r3, r3, #3
 800ef3a:	1a9b      	subs	r3, r3, r2
 800ef3c:	009b      	lsls	r3, r3, #2
 800ef3e:	440b      	add	r3, r1
 800ef40:	3314      	adds	r3, #20
 800ef42:	edd3 7a00 	vldr	s15, [r3]
 800ef46:	463b      	mov	r3, r7
 800ef48:	2103      	movs	r1, #3
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	eeb0 0a67 	vmov.f32	s0, s15
 800ef50:	f000 fa1e 	bl	800f390 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 800ef58:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800ef5a:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 800ef5c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ef60:	4947      	ldr	r1, [pc, #284]	@ (800f080 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 800ef62:	4613      	mov	r3, r2
 800ef64:	00db      	lsls	r3, r3, #3
 800ef66:	1a9b      	subs	r3, r3, r2
 800ef68:	009b      	lsls	r3, r3, #2
 800ef6a:	440b      	add	r3, r1
 800ef6c:	3308      	adds	r3, #8
 800ef6e:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 800ef70:	9301      	str	r3, [sp, #4]
 800ef72:	9000      	str	r0, [sp, #0]
 800ef74:	4623      	mov	r3, r4
 800ef76:	4a44      	ldr	r2, [pc, #272]	@ (800f088 <MX_IKS4A1_DataLogTerminal_Init+0x254>)
 800ef78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ef7c:	483e      	ldr	r0, [pc, #248]	@ (800f078 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 800ef7e:	f001 f831 	bl	800ffe4 <sniprintf>
    printf("%s", dataOut);
 800ef82:	493d      	ldr	r1, [pc, #244]	@ (800f078 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 800ef84:	483d      	ldr	r0, [pc, #244]	@ (800f07c <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 800ef86:	f001 f81b 	bl	800ffc0 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 800ef8a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ef8e:	493c      	ldr	r1, [pc, #240]	@ (800f080 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 800ef90:	4613      	mov	r3, r2
 800ef92:	00db      	lsls	r3, r3, #3
 800ef94:	1a9b      	subs	r3, r3, r2
 800ef96:	009b      	lsls	r3, r3, #2
 800ef98:	440b      	add	r3, r1
 800ef9a:	3310      	adds	r3, #16
 800ef9c:	edd3 7a00 	vldr	s15, [r3]
 800efa0:	463b      	mov	r3, r7
 800efa2:	2103      	movs	r1, #3
 800efa4:	4618      	mov	r0, r3
 800efa6:	eeb0 0a67 	vmov.f32	s0, s15
 800efaa:	f000 f9f1 	bl	800f390 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 800efb2:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800efb4:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 800efb6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800efba:	4931      	ldr	r1, [pc, #196]	@ (800f080 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 800efbc:	4613      	mov	r3, r2
 800efbe:	00db      	lsls	r3, r3, #3
 800efc0:	1a9b      	subs	r3, r3, r2
 800efc2:	009b      	lsls	r3, r3, #2
 800efc4:	440b      	add	r3, r1
 800efc6:	3304      	adds	r3, #4
 800efc8:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 800efca:	9301      	str	r3, [sp, #4]
 800efcc:	9000      	str	r0, [sp, #0]
 800efce:	4623      	mov	r3, r4
 800efd0:	4a2e      	ldr	r2, [pc, #184]	@ (800f08c <MX_IKS4A1_DataLogTerminal_Init+0x258>)
 800efd2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800efd6:	4828      	ldr	r0, [pc, #160]	@ (800f078 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 800efd8:	f001 f804 	bl	800ffe4 <sniprintf>
    printf("%s", dataOut);
 800efdc:	4926      	ldr	r1, [pc, #152]	@ (800f078 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 800efde:	4827      	ldr	r0, [pc, #156]	@ (800f07c <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 800efe0:	f000 ffee 	bl	800ffc0 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 800efe4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800efe8:	4925      	ldr	r1, [pc, #148]	@ (800f080 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 800efea:	4613      	mov	r3, r2
 800efec:	00db      	lsls	r3, r3, #3
 800efee:	1a9b      	subs	r3, r3, r2
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	440b      	add	r3, r1
 800eff4:	3318      	adds	r3, #24
 800eff6:	edd3 7a00 	vldr	s15, [r3]
 800effa:	463b      	mov	r3, r7
 800effc:	2103      	movs	r1, #3
 800effe:	4618      	mov	r0, r3
 800f000:	eeb0 0a67 	vmov.f32	s0, s15
 800f004:	f000 f9c4 	bl	800f390 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800f00c:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800f00e:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 800f010:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f014:	491a      	ldr	r1, [pc, #104]	@ (800f080 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 800f016:	4613      	mov	r3, r2
 800f018:	00db      	lsls	r3, r3, #3
 800f01a:	1a9b      	subs	r3, r3, r2
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	440b      	add	r3, r1
 800f020:	330c      	adds	r3, #12
 800f022:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 800f024:	9301      	str	r3, [sp, #4]
 800f026:	9000      	str	r0, [sp, #0]
 800f028:	4623      	mov	r3, r4
 800f02a:	4a19      	ldr	r2, [pc, #100]	@ (800f090 <MX_IKS4A1_DataLogTerminal_Init+0x25c>)
 800f02c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f030:	4811      	ldr	r0, [pc, #68]	@ (800f078 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 800f032:	f000 ffd7 	bl	800ffe4 <sniprintf>
    printf("%s", dataOut);
 800f036:	4910      	ldr	r1, [pc, #64]	@ (800f078 <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 800f038:	4810      	ldr	r0, [pc, #64]	@ (800f07c <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 800f03a:	f000 ffc1 	bl	800ffc0 <iprintf>
  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 800f03e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f042:	b29b      	uxth	r3, r3
 800f044:	3301      	adds	r3, #1
 800f046:	b29b      	uxth	r3, r3
 800f048:	81fb      	strh	r3, [r7, #14]
 800f04a:	89fb      	ldrh	r3, [r7, #14]
 800f04c:	2b03      	cmp	r3, #3
 800f04e:	f67f af27 	bls.w	800eea0 <MX_IKS4A1_DataLogTerminal_Init+0x6c>
  }

  IKS4A1_ENV_SENSOR_Init(IKS4A1_SHT40AD1B_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 800f052:	2105      	movs	r1, #5
 800f054:	2002      	movs	r0, #2
 800f056:	f7fa fdf1 	bl	8009c3c <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_LPS22DF_0, ENV_TEMPERATURE | ENV_PRESSURE);
 800f05a:	2103      	movs	r1, #3
 800f05c:	2001      	movs	r0, #1
 800f05e:	f7fa fded 	bl	8009c3c <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_STTS22H_0, ENV_TEMPERATURE);
 800f062:	2101      	movs	r1, #1
 800f064:	2000      	movs	r0, #0
 800f066:	f7fa fde9 	bl	8009c3c <IKS4A1_ENV_SENSOR_Init>

  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 800f06a:	2300      	movs	r3, #0
 800f06c:	81fb      	strh	r3, [r7, #14]
 800f06e:	e0c2      	b.n	800f1f6 <MX_IKS4A1_DataLogTerminal_Init+0x3c2>
 800f070:	20000868 	.word	0x20000868
 800f074:	08011e60 	.word	0x08011e60
 800f078:	20000768 	.word	0x20000768
 800f07c:	08011eb0 	.word	0x08011eb0
 800f080:	200006b0 	.word	0x200006b0
 800f084:	08011eb4 	.word	0x08011eb4
 800f088:	08011f28 	.word	0x08011f28
 800f08c:	08011f54 	.word	0x08011f54
 800f090:	08011f84 	.word	0x08011f84
  {
    IKS4A1_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 800f094:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800f098:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f09c:	4613      	mov	r3, r2
 800f09e:	005b      	lsls	r3, r3, #1
 800f0a0:	4413      	add	r3, r2
 800f0a2:	00db      	lsls	r3, r3, #3
 800f0a4:	4a58      	ldr	r2, [pc, #352]	@ (800f208 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 800f0a6:	4413      	add	r3, r2
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	f7fa fed5 	bl	8009e58 <IKS4A1_ENV_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 800f0ae:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800f0b2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f0b6:	4854      	ldr	r0, [pc, #336]	@ (800f208 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	005b      	lsls	r3, r3, #1
 800f0bc:	4413      	add	r3, r2
 800f0be:	00db      	lsls	r3, r3, #3
 800f0c0:	4403      	add	r3, r0
 800f0c2:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800f0c4:	461c      	mov	r4, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800f0c6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f0ca:	484f      	ldr	r0, [pc, #316]	@ (800f208 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 800f0cc:	4613      	mov	r3, r2
 800f0ce:	005b      	lsls	r3, r3, #1
 800f0d0:	4413      	add	r3, r2
 800f0d2:	00db      	lsls	r3, r3, #3
 800f0d4:	4403      	add	r3, r0
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800f0da:	461d      	mov	r5, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800f0dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f0e0:	4849      	ldr	r0, [pc, #292]	@ (800f208 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	005b      	lsls	r3, r3, #1
 800f0e6:	4413      	add	r3, r2
 800f0e8:	00db      	lsls	r3, r3, #3
 800f0ea:	4403      	add	r3, r0
 800f0ec:	3302      	adds	r3, #2
 800f0ee:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800f0f0:	461e      	mov	r6, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 800f0f2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f0f6:	4844      	ldr	r0, [pc, #272]	@ (800f208 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 800f0f8:	4613      	mov	r3, r2
 800f0fa:	005b      	lsls	r3, r3, #1
 800f0fc:	4413      	add	r3, r2
 800f0fe:	00db      	lsls	r3, r3, #3
 800f100:	4403      	add	r3, r0
 800f102:	3304      	adds	r3, #4
 800f104:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 800f106:	9303      	str	r3, [sp, #12]
 800f108:	9602      	str	r6, [sp, #8]
 800f10a:	9501      	str	r5, [sp, #4]
 800f10c:	9400      	str	r4, [sp, #0]
 800f10e:	460b      	mov	r3, r1
 800f110:	4a3e      	ldr	r2, [pc, #248]	@ (800f20c <MX_IKS4A1_DataLogTerminal_Init+0x3d8>)
 800f112:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f116:	483e      	ldr	r0, [pc, #248]	@ (800f210 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 800f118:	f000 ff64 	bl	800ffe4 <sniprintf>
    printf("%s", dataOut);
 800f11c:	493c      	ldr	r1, [pc, #240]	@ (800f210 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 800f11e:	483d      	ldr	r0, [pc, #244]	@ (800f214 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 800f120:	f000 ff4e 	bl	800ffc0 <iprintf>
    floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 800f124:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f128:	4937      	ldr	r1, [pc, #220]	@ (800f208 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 800f12a:	4613      	mov	r3, r2
 800f12c:	005b      	lsls	r3, r3, #1
 800f12e:	4413      	add	r3, r2
 800f130:	00db      	lsls	r3, r3, #3
 800f132:	440b      	add	r3, r1
 800f134:	330c      	adds	r3, #12
 800f136:	edd3 7a00 	vldr	s15, [r3]
 800f13a:	463b      	mov	r3, r7
 800f13c:	2103      	movs	r1, #3
 800f13e:	4618      	mov	r0, r3
 800f140:	eeb0 0a67 	vmov.f32	s0, s15
 800f144:	f000 f924 	bl	800f390 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 800f14c:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800f14e:	9300      	str	r3, [sp, #0]
 800f150:	4613      	mov	r3, r2
 800f152:	4a31      	ldr	r2, [pc, #196]	@ (800f218 <MX_IKS4A1_DataLogTerminal_Init+0x3e4>)
 800f154:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f158:	482d      	ldr	r0, [pc, #180]	@ (800f210 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 800f15a:	f000 ff43 	bl	800ffe4 <sniprintf>
    printf("%s", dataOut);
 800f15e:	492c      	ldr	r1, [pc, #176]	@ (800f210 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 800f160:	482c      	ldr	r0, [pc, #176]	@ (800f214 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 800f162:	f000 ff2d 	bl	800ffc0 <iprintf>
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 800f166:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f16a:	4927      	ldr	r1, [pc, #156]	@ (800f208 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 800f16c:	4613      	mov	r3, r2
 800f16e:	005b      	lsls	r3, r3, #1
 800f170:	4413      	add	r3, r2
 800f172:	00db      	lsls	r3, r3, #3
 800f174:	440b      	add	r3, r1
 800f176:	3310      	adds	r3, #16
 800f178:	edd3 7a00 	vldr	s15, [r3]
 800f17c:	463b      	mov	r3, r7
 800f17e:	2103      	movs	r1, #3
 800f180:	4618      	mov	r0, r3
 800f182:	eeb0 0a67 	vmov.f32	s0, s15
 800f186:	f000 f903 	bl	800f390 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 800f18e:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 800f190:	9300      	str	r3, [sp, #0]
 800f192:	4613      	mov	r3, r2
 800f194:	4a21      	ldr	r2, [pc, #132]	@ (800f21c <MX_IKS4A1_DataLogTerminal_Init+0x3e8>)
 800f196:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f19a:	481d      	ldr	r0, [pc, #116]	@ (800f210 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 800f19c:	f000 ff22 	bl	800ffe4 <sniprintf>
    printf("%s", dataOut);
 800f1a0:	491b      	ldr	r1, [pc, #108]	@ (800f210 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 800f1a2:	481c      	ldr	r0, [pc, #112]	@ (800f214 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 800f1a4:	f000 ff0c 	bl	800ffc0 <iprintf>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 800f1a8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f1ac:	4916      	ldr	r1, [pc, #88]	@ (800f208 <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 800f1ae:	4613      	mov	r3, r2
 800f1b0:	005b      	lsls	r3, r3, #1
 800f1b2:	4413      	add	r3, r2
 800f1b4:	00db      	lsls	r3, r3, #3
 800f1b6:	440b      	add	r3, r1
 800f1b8:	3308      	adds	r3, #8
 800f1ba:	edd3 7a00 	vldr	s15, [r3]
 800f1be:	463b      	mov	r3, r7
 800f1c0:	2103      	movs	r1, #3
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	eeb0 0a67 	vmov.f32	s0, s15
 800f1c8:	f000 f8e2 	bl	800f390 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	9300      	str	r3, [sp, #0]
 800f1d4:	4613      	mov	r3, r2
 800f1d6:	4a12      	ldr	r2, [pc, #72]	@ (800f220 <MX_IKS4A1_DataLogTerminal_Init+0x3ec>)
 800f1d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f1dc:	480c      	ldr	r0, [pc, #48]	@ (800f210 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 800f1de:	f000 ff01 	bl	800ffe4 <sniprintf>
    printf("%s", dataOut);
 800f1e2:	490b      	ldr	r1, [pc, #44]	@ (800f210 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 800f1e4:	480b      	ldr	r0, [pc, #44]	@ (800f214 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 800f1e6:	f000 feeb 	bl	800ffc0 <iprintf>
  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 800f1ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	b29b      	uxth	r3, r3
 800f1f4:	81fb      	strh	r3, [r7, #14]
 800f1f6:	89fb      	ldrh	r3, [r7, #14]
 800f1f8:	2b02      	cmp	r3, #2
 800f1fa:	f67f af4b 	bls.w	800f094 <MX_IKS4A1_DataLogTerminal_Init+0x260>
  }
}
 800f1fe:	bf00      	nop
 800f200:	bf00      	nop
 800f202:	3714      	adds	r7, #20
 800f204:	46bd      	mov	sp, r7
 800f206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f208:	20000720 	.word	0x20000720
 800f20c:	08011fb0 	.word	0x08011fb0
 800f210:	20000768 	.word	0x20000768
 800f214:	08011eb0 	.word	0x08011eb0
 800f218:	08012024 	.word	0x08012024
 800f21c:	08012040 	.word	0x08012040
 800f220:	08012060 	.word	0x08012060

0800f224 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800f224:	b480      	push	{r7}
 800f226:	b083      	sub	sp, #12
 800f228:	af00      	add	r7, sp, #0
 800f22a:	4603      	mov	r3, r0
 800f22c:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 800f22e:	4b04      	ldr	r3, [pc, #16]	@ (800f240 <BSP_PB_Callback+0x1c>)
 800f230:	2201      	movs	r2, #1
 800f232:	701a      	strb	r2, [r3, #0]
}
 800f234:	bf00      	nop
 800f236:	370c      	adds	r7, #12
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr
 800f240:	200006ac 	.word	0x200006ac

0800f244 <MX_IKS4A1_DataLogTerminal_Process>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_IKS4A1_DataLogTerminal_Process(void)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b082      	sub	sp, #8
 800f248:	af00      	add	r7, sp, #0
  int32_t i;

  if (PushButtonDetected != 0U)
 800f24a:	4b4a      	ldr	r3, [pc, #296]	@ (800f374 <MX_IKS4A1_DataLogTerminal_Process+0x130>)
 800f24c:	781b      	ldrb	r3, [r3, #0]
 800f24e:	b2db      	uxtb	r3, r3
 800f250:	2b00      	cmp	r3, #0
 800f252:	d013      	beq.n	800f27c <MX_IKS4A1_DataLogTerminal_Process+0x38>
  {
    /* Debouncing */
    HAL_Delay(50);
 800f254:	2032      	movs	r0, #50	@ 0x32
 800f256:	f7fc f8c1 	bl	800b3dc <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState(BUTTON_KEY) == PushButtonState));
 800f25a:	bf00      	nop
 800f25c:	2000      	movs	r0, #0
 800f25e:	f7fb ff19 	bl	800b094 <BSP_PB_GetState>
 800f262:	4602      	mov	r2, r0
 800f264:	4b44      	ldr	r3, [pc, #272]	@ (800f378 <MX_IKS4A1_DataLogTerminal_Process+0x134>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	429a      	cmp	r2, r3
 800f26a:	d0f7      	beq.n	800f25c <MX_IKS4A1_DataLogTerminal_Process+0x18>

    /* Debouncing */
    HAL_Delay(50);
 800f26c:	2032      	movs	r0, #50	@ 0x32
 800f26e:	f7fc f8b5 	bl	800b3dc <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 800f272:	4b40      	ldr	r3, [pc, #256]	@ (800f374 <MX_IKS4A1_DataLogTerminal_Process+0x130>)
 800f274:	2200      	movs	r2, #0
 800f276:	701a      	strb	r2, [r3, #0]

    MX_IKS4A1_DataLogTerminal_Init();
 800f278:	f7ff fddc 	bl	800ee34 <MX_IKS4A1_DataLogTerminal_Init>
  }

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 800f27c:	4a3f      	ldr	r2, [pc, #252]	@ (800f37c <MX_IKS4A1_DataLogTerminal_Process+0x138>)
 800f27e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f282:	483f      	ldr	r0, [pc, #252]	@ (800f380 <MX_IKS4A1_DataLogTerminal_Process+0x13c>)
 800f284:	f000 feae 	bl	800ffe4 <sniprintf>
  printf("%s", dataOut);
 800f288:	493d      	ldr	r1, [pc, #244]	@ (800f380 <MX_IKS4A1_DataLogTerminal_Process+0x13c>)
 800f28a:	483e      	ldr	r0, [pc, #248]	@ (800f384 <MX_IKS4A1_DataLogTerminal_Process+0x140>)
 800f28c:	f000 fe98 	bl	800ffc0 <iprintf>

  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 800f290:	2300      	movs	r3, #0
 800f292:	607b      	str	r3, [r7, #4]
 800f294:	e02e      	b.n	800f2f4 <MX_IKS4A1_DataLogTerminal_Process+0xb0>
  {
    if(MotionCapabilities[i].Acc)
 800f296:	493c      	ldr	r1, [pc, #240]	@ (800f388 <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 800f298:	687a      	ldr	r2, [r7, #4]
 800f29a:	4613      	mov	r3, r2
 800f29c:	00db      	lsls	r3, r3, #3
 800f29e:	1a9b      	subs	r3, r3, r2
 800f2a0:	009b      	lsls	r3, r3, #2
 800f2a2:	440b      	add	r3, r1
 800f2a4:	781b      	ldrb	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d003      	beq.n	800f2b2 <MX_IKS4A1_DataLogTerminal_Process+0x6e>
    {
      Accelero_Sensor_Handler(i);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f000 f8ef 	bl	800f490 <Accelero_Sensor_Handler>
    }
    if(MotionCapabilities[i].Gyro)
 800f2b2:	4935      	ldr	r1, [pc, #212]	@ (800f388 <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 800f2b4:	687a      	ldr	r2, [r7, #4]
 800f2b6:	4613      	mov	r3, r2
 800f2b8:	00db      	lsls	r3, r3, #3
 800f2ba:	1a9b      	subs	r3, r3, r2
 800f2bc:	009b      	lsls	r3, r3, #2
 800f2be:	440b      	add	r3, r1
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	781b      	ldrb	r3, [r3, #0]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d003      	beq.n	800f2d0 <MX_IKS4A1_DataLogTerminal_Process+0x8c>
    {
      Gyro_Sensor_Handler(i);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f000 f9a0 	bl	800f610 <Gyro_Sensor_Handler>
    }
    if(MotionCapabilities[i].Magneto)
 800f2d0:	492d      	ldr	r1, [pc, #180]	@ (800f388 <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	4613      	mov	r3, r2
 800f2d6:	00db      	lsls	r3, r3, #3
 800f2d8:	1a9b      	subs	r3, r3, r2
 800f2da:	009b      	lsls	r3, r3, #2
 800f2dc:	440b      	add	r3, r1
 800f2de:	3302      	adds	r3, #2
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d003      	beq.n	800f2ee <MX_IKS4A1_DataLogTerminal_Process+0xaa>
    {
      Magneto_Sensor_Handler(i);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f000 fa51 	bl	800f790 <Magneto_Sensor_Handler>
  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	607b      	str	r3, [r7, #4]
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2b03      	cmp	r3, #3
 800f2f8:	d9cd      	bls.n	800f296 <MX_IKS4A1_DataLogTerminal_Process+0x52>
    }
  }

  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	607b      	str	r3, [r7, #4]
 800f2fe:	e02e      	b.n	800f35e <MX_IKS4A1_DataLogTerminal_Process+0x11a>
  {
    if(EnvCapabilities[i].Humidity)
 800f300:	4922      	ldr	r1, [pc, #136]	@ (800f38c <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 800f302:	687a      	ldr	r2, [r7, #4]
 800f304:	4613      	mov	r3, r2
 800f306:	005b      	lsls	r3, r3, #1
 800f308:	4413      	add	r3, r2
 800f30a:	00db      	lsls	r3, r3, #3
 800f30c:	440b      	add	r3, r1
 800f30e:	3302      	adds	r3, #2
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d003      	beq.n	800f31e <MX_IKS4A1_DataLogTerminal_Process+0xda>
    {
      Hum_Sensor_Handler(i);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	4618      	mov	r0, r3
 800f31a:	f000 fc41 	bl	800fba0 <Hum_Sensor_Handler>
    }
    if(EnvCapabilities[i].Temperature)
 800f31e:	491b      	ldr	r1, [pc, #108]	@ (800f38c <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 800f320:	687a      	ldr	r2, [r7, #4]
 800f322:	4613      	mov	r3, r2
 800f324:	005b      	lsls	r3, r3, #1
 800f326:	4413      	add	r3, r2
 800f328:	00db      	lsls	r3, r3, #3
 800f32a:	440b      	add	r3, r1
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d003      	beq.n	800f33a <MX_IKS4A1_DataLogTerminal_Process+0xf6>
    {
      Temp_Sensor_Handler(i);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	4618      	mov	r0, r3
 800f336:	f000 faeb 	bl	800f910 <Temp_Sensor_Handler>
    }
    if(EnvCapabilities[i].Pressure)
 800f33a:	4914      	ldr	r1, [pc, #80]	@ (800f38c <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 800f33c:	687a      	ldr	r2, [r7, #4]
 800f33e:	4613      	mov	r3, r2
 800f340:	005b      	lsls	r3, r3, #1
 800f342:	4413      	add	r3, r2
 800f344:	00db      	lsls	r3, r3, #3
 800f346:	440b      	add	r3, r1
 800f348:	3301      	adds	r3, #1
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d003      	beq.n	800f358 <MX_IKS4A1_DataLogTerminal_Process+0x114>
    {
      Press_Sensor_Handler(i);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	4618      	mov	r0, r3
 800f354:	f000 fb84 	bl	800fa60 <Press_Sensor_Handler>
  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	3301      	adds	r3, #1
 800f35c:	607b      	str	r3, [r7, #4]
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2b02      	cmp	r3, #2
 800f362:	d9cd      	bls.n	800f300 <MX_IKS4A1_DataLogTerminal_Process+0xbc>
    }
  }

  HAL_Delay( 1000 );
 800f364:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800f368:	f7fc f838 	bl	800b3dc <HAL_Delay>
}
 800f36c:	bf00      	nop
 800f36e:	3708      	adds	r7, #8
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}
 800f374:	200006ac 	.word	0x200006ac
 800f378:	20000868 	.word	0x20000868
 800f37c:	08011e60 	.word	0x08011e60
 800f380:	20000768 	.word	0x20000768
 800f384:	08011eb0 	.word	0x08011eb0
 800f388:	200006b0 	.word	0x200006b0
 800f38c:	20000720 	.word	0x20000720

0800f390 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 800f390:	b5b0      	push	{r4, r5, r7, lr}
 800f392:	b084      	sub	sp, #16
 800f394:	af00      	add	r7, sp, #0
 800f396:	ed87 0a03 	vstr	s0, [r7, #12]
 800f39a:	60b8      	str	r0, [r7, #8]
 800f39c:	6079      	str	r1, [r7, #4]
  if (in >= 0.0f)
 800f39e:	edd7 7a03 	vldr	s15, [r7, #12]
 800f3a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3aa:	db03      	blt.n	800f3b4 <floatToInt+0x24>
  {
    out_value->sign = 0;
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	701a      	strb	r2, [r3, #0]
 800f3b2:	e008      	b.n	800f3c6 <floatToInt+0x36>
  }
  else
  {
    out_value->sign = 1;
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	2201      	movs	r2, #1
 800f3b8:	701a      	strb	r2, [r3, #0]
    in = -in;
 800f3ba:	edd7 7a03 	vldr	s15, [r7, #12]
 800f3be:	eef1 7a67 	vneg.f32	s15, s15
 800f3c2:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / (float)pow(10, (double)dec_prec));
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f7f1 f8ac 	bl	8000524 <__aeabi_i2d>
 800f3cc:	4602      	mov	r2, r0
 800f3ce:	460b      	mov	r3, r1
 800f3d0:	ec43 2b11 	vmov	d1, r2, r3
 800f3d4:	ed9f 0b2c 	vldr	d0, [pc, #176]	@ 800f488 <floatToInt+0xf8>
 800f3d8:	f001 fd9c 	bl	8010f14 <pow>
 800f3dc:	ec53 2b10 	vmov	r2, r3, d0
 800f3e0:	4610      	mov	r0, r2
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	f7f1 fbe0 	bl	8000ba8 <__aeabi_d2f>
 800f3e8:	ee06 0a90 	vmov	s13, r0
 800f3ec:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f3f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f3f4:	ed97 7a03 	vldr	s14, [r7, #12]
 800f3f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3fc:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_int = (int32_t)in;
 800f400:	edd7 7a03 	vldr	s15, [r7, #12]
 800f404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f408:	ee17 2a90 	vmov	r2, s15
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	685b      	ldr	r3, [r3, #4]
 800f414:	ee07 3a90 	vmov	s15, r3
 800f418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f41c:	ed97 7a03 	vldr	s14, [r7, #12]
 800f420:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f424:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc((double)in * pow(10, (double)dec_prec));
 800f428:	68f8      	ldr	r0, [r7, #12]
 800f42a:	f7f1 f88d 	bl	8000548 <__aeabi_f2d>
 800f42e:	4604      	mov	r4, r0
 800f430:	460d      	mov	r5, r1
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f7f1 f876 	bl	8000524 <__aeabi_i2d>
 800f438:	4602      	mov	r2, r0
 800f43a:	460b      	mov	r3, r1
 800f43c:	ec43 2b11 	vmov	d1, r2, r3
 800f440:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 800f488 <floatToInt+0xf8>
 800f444:	f001 fd66 	bl	8010f14 <pow>
 800f448:	ec53 2b10 	vmov	r2, r3, d0
 800f44c:	4620      	mov	r0, r4
 800f44e:	4629      	mov	r1, r5
 800f450:	f7f1 f8d2 	bl	80005f8 <__aeabi_dmul>
 800f454:	4602      	mov	r2, r0
 800f456:	460b      	mov	r3, r1
 800f458:	ec43 2b17 	vmov	d7, r2, r3
 800f45c:	eeb0 0a47 	vmov.f32	s0, s14
 800f460:	eef0 0a67 	vmov.f32	s1, s15
 800f464:	f001 fdd2 	bl	801100c <trunc>
 800f468:	ec53 2b10 	vmov	r2, r3, d0
 800f46c:	4610      	mov	r0, r2
 800f46e:	4619      	mov	r1, r3
 800f470:	f7f1 fb72 	bl	8000b58 <__aeabi_d2iz>
 800f474:	4603      	mov	r3, r0
 800f476:	461a      	mov	r2, r3
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	609a      	str	r2, [r3, #8]
}
 800f47c:	bf00      	nop
 800f47e:	3710      	adds	r7, #16
 800f480:	46bd      	mov	sp, r7
 800f482:	bdb0      	pop	{r4, r5, r7, pc}
 800f484:	f3af 8000 	nop.w
 800f488:	00000000 	.word	0x00000000
 800f48c:	40240000 	.word	0x40240000

0800f490 <Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Accelero_Sensor_Handler(uint32_t Instance)
{
 800f490:	b5b0      	push	{r4, r5, r7, lr}
 800f492:	b092      	sub	sp, #72	@ 0x48
 800f494:	af06      	add	r7, sp, #24
 800f496:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t acceleration;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	4a51      	ldr	r2, [pc, #324]	@ (800f5e0 <Accelero_Sensor_Handler+0x150>)
 800f49c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f4a0:	4850      	ldr	r0, [pc, #320]	@ (800f5e4 <Accelero_Sensor_Handler+0x154>)
 800f4a2:	f000 fd9f 	bl	800ffe4 <sniprintf>
  printf("%s", dataOut);
 800f4a6:	494f      	ldr	r1, [pc, #316]	@ (800f5e4 <Accelero_Sensor_Handler+0x154>)
 800f4a8:	484f      	ldr	r0, [pc, #316]	@ (800f5e8 <Accelero_Sensor_Handler+0x158>)
 800f4aa:	f000 fd89 	bl	800ffc0 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 800f4ae:	f107 031c 	add.w	r3, r7, #28
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	2102      	movs	r1, #2
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f7fb f982 	bl	800a7c0 <IKS4A1_MOTION_SENSOR_GetAxes>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d007      	beq.n	800f4d2 <Accelero_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	4a49      	ldr	r2, [pc, #292]	@ (800f5ec <Accelero_Sensor_Handler+0x15c>)
 800f4c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f4ca:	4846      	ldr	r0, [pc, #280]	@ (800f5e4 <Accelero_Sensor_Handler+0x154>)
 800f4cc:	f000 fd8a 	bl	800ffe4 <sniprintf>
 800f4d0:	e011      	b.n	800f4f6 <Accelero_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800f4d2:	687d      	ldr	r5, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 800f4d4:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800f4d6:	687a      	ldr	r2, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 800f4d8:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800f4da:	6878      	ldr	r0, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 800f4dc:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 800f4de:	9404      	str	r4, [sp, #16]
 800f4e0:	9003      	str	r0, [sp, #12]
 800f4e2:	9102      	str	r1, [sp, #8]
 800f4e4:	9201      	str	r2, [sp, #4]
 800f4e6:	9300      	str	r3, [sp, #0]
 800f4e8:	462b      	mov	r3, r5
 800f4ea:	4a41      	ldr	r2, [pc, #260]	@ (800f5f0 <Accelero_Sensor_Handler+0x160>)
 800f4ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f4f0:	483c      	ldr	r0, [pc, #240]	@ (800f5e4 <Accelero_Sensor_Handler+0x154>)
 800f4f2:	f000 fd77 	bl	800ffe4 <sniprintf>
  }

  printf("%s", dataOut);
 800f4f6:	493b      	ldr	r1, [pc, #236]	@ (800f5e4 <Accelero_Sensor_Handler+0x154>)
 800f4f8:	483b      	ldr	r0, [pc, #236]	@ (800f5e8 <Accelero_Sensor_Handler+0x158>)
 800f4fa:	f000 fd61 	bl	800ffc0 <iprintf>

  if (verbose == 1)
 800f4fe:	4b3d      	ldr	r3, [pc, #244]	@ (800f5f4 <Accelero_Sensor_Handler+0x164>)
 800f500:	781b      	ldrb	r3, [r3, #0]
 800f502:	2b01      	cmp	r3, #1
 800f504:	d168      	bne.n	800f5d8 <Accelero_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 800f506:	f107 030f 	add.w	r3, r7, #15
 800f50a:	4619      	mov	r1, r3
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f7fb f92d 	bl	800a76c <IKS4A1_MOTION_SENSOR_ReadID>
 800f512:	4603      	mov	r3, r0
 800f514:	2b00      	cmp	r3, #0
 800f516:	d007      	beq.n	800f528 <Accelero_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	4a37      	ldr	r2, [pc, #220]	@ (800f5f8 <Accelero_Sensor_Handler+0x168>)
 800f51c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f520:	4830      	ldr	r0, [pc, #192]	@ (800f5e4 <Accelero_Sensor_Handler+0x154>)
 800f522:	f000 fd5f 	bl	800ffe4 <sniprintf>
 800f526:	e008      	b.n	800f53a <Accelero_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	7bfa      	ldrb	r2, [r7, #15]
 800f52c:	9200      	str	r2, [sp, #0]
 800f52e:	4a33      	ldr	r2, [pc, #204]	@ (800f5fc <Accelero_Sensor_Handler+0x16c>)
 800f530:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f534:	482b      	ldr	r0, [pc, #172]	@ (800f5e4 <Accelero_Sensor_Handler+0x154>)
 800f536:	f000 fd55 	bl	800ffe4 <sniprintf>
    }

    printf("%s", dataOut);
 800f53a:	492a      	ldr	r1, [pc, #168]	@ (800f5e4 <Accelero_Sensor_Handler+0x154>)
 800f53c:	482a      	ldr	r0, [pc, #168]	@ (800f5e8 <Accelero_Sensor_Handler+0x158>)
 800f53e:	f000 fd3f 	bl	800ffc0 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_ACCELERO, &odr))
 800f542:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f546:	461a      	mov	r2, r3
 800f548:	2102      	movs	r1, #2
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f7fb f97c 	bl	800a848 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 800f550:	4603      	mov	r3, r0
 800f552:	2b00      	cmp	r3, #0
 800f554:	d007      	beq.n	800f566 <Accelero_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	4a29      	ldr	r2, [pc, #164]	@ (800f600 <Accelero_Sensor_Handler+0x170>)
 800f55a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f55e:	4821      	ldr	r0, [pc, #132]	@ (800f5e4 <Accelero_Sensor_Handler+0x154>)
 800f560:	f000 fd40 	bl	800ffe4 <sniprintf>
 800f564:	e014      	b.n	800f590 <Accelero_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800f566:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800f56a:	f107 0310 	add.w	r3, r7, #16
 800f56e:	2103      	movs	r1, #3
 800f570:	4618      	mov	r0, r3
 800f572:	eeb0 0a67 	vmov.f32	s0, s15
 800f576:	f7ff ff0b 	bl	800f390 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800f57e:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800f580:	9101      	str	r1, [sp, #4]
 800f582:	9200      	str	r2, [sp, #0]
 800f584:	4a1f      	ldr	r2, [pc, #124]	@ (800f604 <Accelero_Sensor_Handler+0x174>)
 800f586:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f58a:	4816      	ldr	r0, [pc, #88]	@ (800f5e4 <Accelero_Sensor_Handler+0x154>)
 800f58c:	f000 fd2a 	bl	800ffe4 <sniprintf>
    }

    printf("%s", dataOut);
 800f590:	4914      	ldr	r1, [pc, #80]	@ (800f5e4 <Accelero_Sensor_Handler+0x154>)
 800f592:	4815      	ldr	r0, [pc, #84]	@ (800f5e8 <Accelero_Sensor_Handler+0x158>)
 800f594:	f000 fd14 	bl	800ffc0 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_ACCELERO, &fullScale))
 800f598:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f59c:	461a      	mov	r2, r3
 800f59e:	2102      	movs	r1, #2
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f7fb f995 	bl	800a8d0 <IKS4A1_MOTION_SENSOR_GetFullScale>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d007      	beq.n	800f5bc <Accelero_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	4a16      	ldr	r2, [pc, #88]	@ (800f608 <Accelero_Sensor_Handler+0x178>)
 800f5b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f5b4:	480b      	ldr	r0, [pc, #44]	@ (800f5e4 <Accelero_Sensor_Handler+0x154>)
 800f5b6:	f000 fd15 	bl	800ffe4 <sniprintf>
 800f5ba:	e009      	b.n	800f5d0 <Accelero_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
 800f5bc:	687a      	ldr	r2, [r7, #4]
 800f5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5c0:	9300      	str	r3, [sp, #0]
 800f5c2:	4613      	mov	r3, r2
 800f5c4:	4a11      	ldr	r2, [pc, #68]	@ (800f60c <Accelero_Sensor_Handler+0x17c>)
 800f5c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f5ca:	4806      	ldr	r0, [pc, #24]	@ (800f5e4 <Accelero_Sensor_Handler+0x154>)
 800f5cc:	f000 fd0a 	bl	800ffe4 <sniprintf>
    }

    printf("%s", dataOut);
 800f5d0:	4904      	ldr	r1, [pc, #16]	@ (800f5e4 <Accelero_Sensor_Handler+0x154>)
 800f5d2:	4805      	ldr	r0, [pc, #20]	@ (800f5e8 <Accelero_Sensor_Handler+0x158>)
 800f5d4:	f000 fcf4 	bl	800ffc0 <iprintf>
  }
}
 800f5d8:	bf00      	nop
 800f5da:	3730      	adds	r7, #48	@ 0x30
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bdb0      	pop	{r4, r5, r7, pc}
 800f5e0:	0801207c 	.word	0x0801207c
 800f5e4:	20000768 	.word	0x20000768
 800f5e8:	08011eb0 	.word	0x08011eb0
 800f5ec:	0801209c 	.word	0x0801209c
 800f5f0:	080120b0 	.word	0x080120b0
 800f5f4:	20000225 	.word	0x20000225
 800f5f8:	080120e0 	.word	0x080120e0
 800f5fc:	080120f4 	.word	0x080120f4
 800f600:	08012108 	.word	0x08012108
 800f604:	0801211c 	.word	0x0801211c
 800f608:	08012134 	.word	0x08012134
 800f60c:	08012144 	.word	0x08012144

0800f610 <Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Gyro_Sensor_Handler(uint32_t Instance)
{
 800f610:	b5b0      	push	{r4, r5, r7, lr}
 800f612:	b092      	sub	sp, #72	@ 0x48
 800f614:	af06      	add	r7, sp, #24
 800f616:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t angular_velocity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	4a51      	ldr	r2, [pc, #324]	@ (800f760 <Gyro_Sensor_Handler+0x150>)
 800f61c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f620:	4850      	ldr	r0, [pc, #320]	@ (800f764 <Gyro_Sensor_Handler+0x154>)
 800f622:	f000 fcdf 	bl	800ffe4 <sniprintf>
  printf("%s", dataOut);
 800f626:	494f      	ldr	r1, [pc, #316]	@ (800f764 <Gyro_Sensor_Handler+0x154>)
 800f628:	484f      	ldr	r0, [pc, #316]	@ (800f768 <Gyro_Sensor_Handler+0x158>)
 800f62a:	f000 fcc9 	bl	800ffc0 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 800f62e:	f107 031c 	add.w	r3, r7, #28
 800f632:	461a      	mov	r2, r3
 800f634:	2101      	movs	r1, #1
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f7fb f8c2 	bl	800a7c0 <IKS4A1_MOTION_SENSOR_GetAxes>
 800f63c:	4603      	mov	r3, r0
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d007      	beq.n	800f652 <Gyro_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR[%d]: Error\r\n", (int)Instance);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	4a49      	ldr	r2, [pc, #292]	@ (800f76c <Gyro_Sensor_Handler+0x15c>)
 800f646:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f64a:	4846      	ldr	r0, [pc, #280]	@ (800f764 <Gyro_Sensor_Handler+0x154>)
 800f64c:	f000 fcca 	bl	800ffe4 <sniprintf>
 800f650:	e011      	b.n	800f676 <Gyro_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800f652:	687d      	ldr	r5, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 800f654:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800f656:	687a      	ldr	r2, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 800f658:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800f65a:	6878      	ldr	r0, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 800f65c:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 800f65e:	9404      	str	r4, [sp, #16]
 800f660:	9003      	str	r0, [sp, #12]
 800f662:	9102      	str	r1, [sp, #8]
 800f664:	9201      	str	r2, [sp, #4]
 800f666:	9300      	str	r3, [sp, #0]
 800f668:	462b      	mov	r3, r5
 800f66a:	4a41      	ldr	r2, [pc, #260]	@ (800f770 <Gyro_Sensor_Handler+0x160>)
 800f66c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f670:	483c      	ldr	r0, [pc, #240]	@ (800f764 <Gyro_Sensor_Handler+0x154>)
 800f672:	f000 fcb7 	bl	800ffe4 <sniprintf>
  }

  printf("%s", dataOut);
 800f676:	493b      	ldr	r1, [pc, #236]	@ (800f764 <Gyro_Sensor_Handler+0x154>)
 800f678:	483b      	ldr	r0, [pc, #236]	@ (800f768 <Gyro_Sensor_Handler+0x158>)
 800f67a:	f000 fca1 	bl	800ffc0 <iprintf>

  if (verbose == 1)
 800f67e:	4b3d      	ldr	r3, [pc, #244]	@ (800f774 <Gyro_Sensor_Handler+0x164>)
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	2b01      	cmp	r3, #1
 800f684:	d168      	bne.n	800f758 <Gyro_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 800f686:	f107 030f 	add.w	r3, r7, #15
 800f68a:	4619      	mov	r1, r3
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f7fb f86d 	bl	800a76c <IKS4A1_MOTION_SENSOR_ReadID>
 800f692:	4603      	mov	r3, r0
 800f694:	2b00      	cmp	r3, #0
 800f696:	d007      	beq.n	800f6a8 <Gyro_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	4a37      	ldr	r2, [pc, #220]	@ (800f778 <Gyro_Sensor_Handler+0x168>)
 800f69c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f6a0:	4830      	ldr	r0, [pc, #192]	@ (800f764 <Gyro_Sensor_Handler+0x154>)
 800f6a2:	f000 fc9f 	bl	800ffe4 <sniprintf>
 800f6a6:	e008      	b.n	800f6ba <Gyro_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	7bfa      	ldrb	r2, [r7, #15]
 800f6ac:	9200      	str	r2, [sp, #0]
 800f6ae:	4a33      	ldr	r2, [pc, #204]	@ (800f77c <Gyro_Sensor_Handler+0x16c>)
 800f6b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f6b4:	482b      	ldr	r0, [pc, #172]	@ (800f764 <Gyro_Sensor_Handler+0x154>)
 800f6b6:	f000 fc95 	bl	800ffe4 <sniprintf>
    }

    printf("%s", dataOut);
 800f6ba:	492a      	ldr	r1, [pc, #168]	@ (800f764 <Gyro_Sensor_Handler+0x154>)
 800f6bc:	482a      	ldr	r0, [pc, #168]	@ (800f768 <Gyro_Sensor_Handler+0x158>)
 800f6be:	f000 fc7f 	bl	800ffc0 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_GYRO, &odr))
 800f6c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f6c6:	461a      	mov	r2, r3
 800f6c8:	2101      	movs	r1, #1
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f7fb f8bc 	bl	800a848 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d007      	beq.n	800f6e6 <Gyro_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	4a29      	ldr	r2, [pc, #164]	@ (800f780 <Gyro_Sensor_Handler+0x170>)
 800f6da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f6de:	4821      	ldr	r0, [pc, #132]	@ (800f764 <Gyro_Sensor_Handler+0x154>)
 800f6e0:	f000 fc80 	bl	800ffe4 <sniprintf>
 800f6e4:	e014      	b.n	800f710 <Gyro_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800f6e6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800f6ea:	f107 0310 	add.w	r3, r7, #16
 800f6ee:	2103      	movs	r1, #3
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	eeb0 0a67 	vmov.f32	s0, s15
 800f6f6:	f7ff fe4b 	bl	800f390 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800f6fe:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800f700:	9101      	str	r1, [sp, #4]
 800f702:	9200      	str	r2, [sp, #0]
 800f704:	4a1f      	ldr	r2, [pc, #124]	@ (800f784 <Gyro_Sensor_Handler+0x174>)
 800f706:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f70a:	4816      	ldr	r0, [pc, #88]	@ (800f764 <Gyro_Sensor_Handler+0x154>)
 800f70c:	f000 fc6a 	bl	800ffe4 <sniprintf>
    }

    printf("%s", dataOut);
 800f710:	4914      	ldr	r1, [pc, #80]	@ (800f764 <Gyro_Sensor_Handler+0x154>)
 800f712:	4815      	ldr	r0, [pc, #84]	@ (800f768 <Gyro_Sensor_Handler+0x158>)
 800f714:	f000 fc54 	bl	800ffc0 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_GYRO, &fullScale))
 800f718:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f71c:	461a      	mov	r2, r3
 800f71e:	2101      	movs	r1, #1
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f7fb f8d5 	bl	800a8d0 <IKS4A1_MOTION_SENSOR_GetFullScale>
 800f726:	4603      	mov	r3, r0
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d007      	beq.n	800f73c <Gyro_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	4a16      	ldr	r2, [pc, #88]	@ (800f788 <Gyro_Sensor_Handler+0x178>)
 800f730:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f734:	480b      	ldr	r0, [pc, #44]	@ (800f764 <Gyro_Sensor_Handler+0x154>)
 800f736:	f000 fc55 	bl	800ffe4 <sniprintf>
 800f73a:	e009      	b.n	800f750 <Gyro_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
 800f73c:	687a      	ldr	r2, [r7, #4]
 800f73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f740:	9300      	str	r3, [sp, #0]
 800f742:	4613      	mov	r3, r2
 800f744:	4a11      	ldr	r2, [pc, #68]	@ (800f78c <Gyro_Sensor_Handler+0x17c>)
 800f746:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f74a:	4806      	ldr	r0, [pc, #24]	@ (800f764 <Gyro_Sensor_Handler+0x154>)
 800f74c:	f000 fc4a 	bl	800ffe4 <sniprintf>
    }

    printf("%s", dataOut);
 800f750:	4904      	ldr	r1, [pc, #16]	@ (800f764 <Gyro_Sensor_Handler+0x154>)
 800f752:	4805      	ldr	r0, [pc, #20]	@ (800f768 <Gyro_Sensor_Handler+0x158>)
 800f754:	f000 fc34 	bl	800ffc0 <iprintf>
  }
}
 800f758:	bf00      	nop
 800f75a:	3730      	adds	r7, #48	@ 0x30
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bdb0      	pop	{r4, r5, r7, pc}
 800f760:	0801207c 	.word	0x0801207c
 800f764:	20000768 	.word	0x20000768
 800f768:	08011eb0 	.word	0x08011eb0
 800f76c:	08012154 	.word	0x08012154
 800f770:	08012168 	.word	0x08012168
 800f774:	20000225 	.word	0x20000225
 800f778:	080120e0 	.word	0x080120e0
 800f77c:	080120f4 	.word	0x080120f4
 800f780:	08012108 	.word	0x08012108
 800f784:	0801211c 	.word	0x0801211c
 800f788:	08012134 	.word	0x08012134
 800f78c:	08012198 	.word	0x08012198

0800f790 <Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Magneto_Sensor_Handler(uint32_t Instance)
{
 800f790:	b5b0      	push	{r4, r5, r7, lr}
 800f792:	b092      	sub	sp, #72	@ 0x48
 800f794:	af06      	add	r7, sp, #24
 800f796:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t magnetic_field;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	4a51      	ldr	r2, [pc, #324]	@ (800f8e0 <Magneto_Sensor_Handler+0x150>)
 800f79c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f7a0:	4850      	ldr	r0, [pc, #320]	@ (800f8e4 <Magneto_Sensor_Handler+0x154>)
 800f7a2:	f000 fc1f 	bl	800ffe4 <sniprintf>
  printf("%s", dataOut);
 800f7a6:	494f      	ldr	r1, [pc, #316]	@ (800f8e4 <Magneto_Sensor_Handler+0x154>)
 800f7a8:	484f      	ldr	r0, [pc, #316]	@ (800f8e8 <Magneto_Sensor_Handler+0x158>)
 800f7aa:	f000 fc09 	bl	800ffc0 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 800f7ae:	f107 031c 	add.w	r3, r7, #28
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	2104      	movs	r1, #4
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f7fb f802 	bl	800a7c0 <IKS4A1_MOTION_SENSOR_GetAxes>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d007      	beq.n	800f7d2 <Magneto_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG[%d]: Error\r\n", (int)Instance);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	4a49      	ldr	r2, [pc, #292]	@ (800f8ec <Magneto_Sensor_Handler+0x15c>)
 800f7c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f7ca:	4846      	ldr	r0, [pc, #280]	@ (800f8e4 <Magneto_Sensor_Handler+0x154>)
 800f7cc:	f000 fc0a 	bl	800ffe4 <sniprintf>
 800f7d0:	e011      	b.n	800f7f6 <Magneto_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800f7d2:	687d      	ldr	r5, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 800f7d4:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800f7d6:	687a      	ldr	r2, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 800f7d8:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800f7da:	6878      	ldr	r0, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 800f7dc:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 800f7de:	9404      	str	r4, [sp, #16]
 800f7e0:	9003      	str	r0, [sp, #12]
 800f7e2:	9102      	str	r1, [sp, #8]
 800f7e4:	9201      	str	r2, [sp, #4]
 800f7e6:	9300      	str	r3, [sp, #0]
 800f7e8:	462b      	mov	r3, r5
 800f7ea:	4a41      	ldr	r2, [pc, #260]	@ (800f8f0 <Magneto_Sensor_Handler+0x160>)
 800f7ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f7f0:	483c      	ldr	r0, [pc, #240]	@ (800f8e4 <Magneto_Sensor_Handler+0x154>)
 800f7f2:	f000 fbf7 	bl	800ffe4 <sniprintf>
  }

  printf("%s", dataOut);
 800f7f6:	493b      	ldr	r1, [pc, #236]	@ (800f8e4 <Magneto_Sensor_Handler+0x154>)
 800f7f8:	483b      	ldr	r0, [pc, #236]	@ (800f8e8 <Magneto_Sensor_Handler+0x158>)
 800f7fa:	f000 fbe1 	bl	800ffc0 <iprintf>

  if (verbose == 1)
 800f7fe:	4b3d      	ldr	r3, [pc, #244]	@ (800f8f4 <Magneto_Sensor_Handler+0x164>)
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	2b01      	cmp	r3, #1
 800f804:	d168      	bne.n	800f8d8 <Magneto_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 800f806:	f107 030f 	add.w	r3, r7, #15
 800f80a:	4619      	mov	r1, r3
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f7fa ffad 	bl	800a76c <IKS4A1_MOTION_SENSOR_ReadID>
 800f812:	4603      	mov	r3, r0
 800f814:	2b00      	cmp	r3, #0
 800f816:	d007      	beq.n	800f828 <Magneto_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	4a37      	ldr	r2, [pc, #220]	@ (800f8f8 <Magneto_Sensor_Handler+0x168>)
 800f81c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f820:	4830      	ldr	r0, [pc, #192]	@ (800f8e4 <Magneto_Sensor_Handler+0x154>)
 800f822:	f000 fbdf 	bl	800ffe4 <sniprintf>
 800f826:	e008      	b.n	800f83a <Magneto_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	7bfa      	ldrb	r2, [r7, #15]
 800f82c:	9200      	str	r2, [sp, #0]
 800f82e:	4a33      	ldr	r2, [pc, #204]	@ (800f8fc <Magneto_Sensor_Handler+0x16c>)
 800f830:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f834:	482b      	ldr	r0, [pc, #172]	@ (800f8e4 <Magneto_Sensor_Handler+0x154>)
 800f836:	f000 fbd5 	bl	800ffe4 <sniprintf>
    }

    printf("%s", dataOut);
 800f83a:	492a      	ldr	r1, [pc, #168]	@ (800f8e4 <Magneto_Sensor_Handler+0x154>)
 800f83c:	482a      	ldr	r0, [pc, #168]	@ (800f8e8 <Magneto_Sensor_Handler+0x158>)
 800f83e:	f000 fbbf 	bl	800ffc0 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_MAGNETO, &odr))
 800f842:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f846:	461a      	mov	r2, r3
 800f848:	2104      	movs	r1, #4
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f7fa fffc 	bl	800a848 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 800f850:	4603      	mov	r3, r0
 800f852:	2b00      	cmp	r3, #0
 800f854:	d007      	beq.n	800f866 <Magneto_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	4a29      	ldr	r2, [pc, #164]	@ (800f900 <Magneto_Sensor_Handler+0x170>)
 800f85a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f85e:	4821      	ldr	r0, [pc, #132]	@ (800f8e4 <Magneto_Sensor_Handler+0x154>)
 800f860:	f000 fbc0 	bl	800ffe4 <sniprintf>
 800f864:	e014      	b.n	800f890 <Magneto_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800f866:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800f86a:	f107 0310 	add.w	r3, r7, #16
 800f86e:	2103      	movs	r1, #3
 800f870:	4618      	mov	r0, r3
 800f872:	eeb0 0a67 	vmov.f32	s0, s15
 800f876:	f7ff fd8b 	bl	800f390 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 800f87e:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800f880:	9101      	str	r1, [sp, #4]
 800f882:	9200      	str	r2, [sp, #0]
 800f884:	4a1f      	ldr	r2, [pc, #124]	@ (800f904 <Magneto_Sensor_Handler+0x174>)
 800f886:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f88a:	4816      	ldr	r0, [pc, #88]	@ (800f8e4 <Magneto_Sensor_Handler+0x154>)
 800f88c:	f000 fbaa 	bl	800ffe4 <sniprintf>
    }

    printf("%s", dataOut);
 800f890:	4914      	ldr	r1, [pc, #80]	@ (800f8e4 <Magneto_Sensor_Handler+0x154>)
 800f892:	4815      	ldr	r0, [pc, #84]	@ (800f8e8 <Magneto_Sensor_Handler+0x158>)
 800f894:	f000 fb94 	bl	800ffc0 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_MAGNETO, &fullScale))
 800f898:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f89c:	461a      	mov	r2, r3
 800f89e:	2104      	movs	r1, #4
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f7fb f815 	bl	800a8d0 <IKS4A1_MOTION_SENSOR_GetFullScale>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d007      	beq.n	800f8bc <Magneto_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	4a16      	ldr	r2, [pc, #88]	@ (800f908 <Magneto_Sensor_Handler+0x178>)
 800f8b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f8b4:	480b      	ldr	r0, [pc, #44]	@ (800f8e4 <Magneto_Sensor_Handler+0x154>)
 800f8b6:	f000 fb95 	bl	800ffe4 <sniprintf>
 800f8ba:	e009      	b.n	800f8d0 <Magneto_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
 800f8bc:	687a      	ldr	r2, [r7, #4]
 800f8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8c0:	9300      	str	r3, [sp, #0]
 800f8c2:	4613      	mov	r3, r2
 800f8c4:	4a11      	ldr	r2, [pc, #68]	@ (800f90c <Magneto_Sensor_Handler+0x17c>)
 800f8c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f8ca:	4806      	ldr	r0, [pc, #24]	@ (800f8e4 <Magneto_Sensor_Handler+0x154>)
 800f8cc:	f000 fb8a 	bl	800ffe4 <sniprintf>
    }

    printf("%s", dataOut);
 800f8d0:	4904      	ldr	r1, [pc, #16]	@ (800f8e4 <Magneto_Sensor_Handler+0x154>)
 800f8d2:	4805      	ldr	r0, [pc, #20]	@ (800f8e8 <Magneto_Sensor_Handler+0x158>)
 800f8d4:	f000 fb74 	bl	800ffc0 <iprintf>
  }
}
 800f8d8:	bf00      	nop
 800f8da:	3730      	adds	r7, #48	@ 0x30
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bdb0      	pop	{r4, r5, r7, pc}
 800f8e0:	0801207c 	.word	0x0801207c
 800f8e4:	20000768 	.word	0x20000768
 800f8e8:	08011eb0 	.word	0x08011eb0
 800f8ec:	080121ac 	.word	0x080121ac
 800f8f0:	080121c0 	.word	0x080121c0
 800f8f4:	20000225 	.word	0x20000225
 800f8f8:	080120e0 	.word	0x080120e0
 800f8fc:	080120f4 	.word	0x080120f4
 800f900:	08012108 	.word	0x08012108
 800f904:	0801211c 	.word	0x0801211c
 800f908:	08012134 	.word	0x08012134
 800f90c:	080121f0 	.word	0x080121f0

0800f910 <Temp_Sensor_Handler>:
  * @brief  Handles the temperature data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Temp_Sensor_Handler(uint32_t Instance)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b08c      	sub	sp, #48	@ 0x30
 800f914:	af04      	add	r7, sp, #16
 800f916:	6078      	str	r0, [r7, #4]
  float odr;
  float temperature;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	4a47      	ldr	r2, [pc, #284]	@ (800fa38 <Temp_Sensor_Handler+0x128>)
 800f91c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f920:	4846      	ldr	r0, [pc, #280]	@ (800fa3c <Temp_Sensor_Handler+0x12c>)
 800f922:	f000 fb5f 	bl	800ffe4 <sniprintf>
  printf("%s", dataOut);
 800f926:	4945      	ldr	r1, [pc, #276]	@ (800fa3c <Temp_Sensor_Handler+0x12c>)
 800f928:	4845      	ldr	r0, [pc, #276]	@ (800fa40 <Temp_Sensor_Handler+0x130>)
 800f92a:	f000 fb49 	bl	800ffc0 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temperature))
 800f92e:	f107 0318 	add.w	r3, r7, #24
 800f932:	461a      	mov	r2, r3
 800f934:	2101      	movs	r1, #1
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f7fa fb24 	bl	8009f84 <IKS4A1_ENV_SENSOR_GetValue>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d007      	beq.n	800f952 <Temp_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: Error\r\n", (int)Instance);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	4a3f      	ldr	r2, [pc, #252]	@ (800fa44 <Temp_Sensor_Handler+0x134>)
 800f946:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f94a:	483c      	ldr	r0, [pc, #240]	@ (800fa3c <Temp_Sensor_Handler+0x12c>)
 800f94c:	f000 fb4a 	bl	800ffe4 <sniprintf>
 800f950:	e01d      	b.n	800f98e <Temp_Sensor_Handler+0x7e>
  }
  else
  {
    floatToInt(temperature, &out_value, 2);
 800f952:	edd7 7a06 	vldr	s15, [r7, #24]
 800f956:	f107 030c 	add.w	r3, r7, #12
 800f95a:	2102      	movs	r1, #2
 800f95c:	4618      	mov	r0, r3
 800f95e:	eeb0 0a67 	vmov.f32	s0, s15
 800f962:	f7ff fd15 	bl	800f390 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 800f966:	687a      	ldr	r2, [r7, #4]
 800f968:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d001      	beq.n	800f974 <Temp_Sensor_Handler+0x64>
 800f970:	232d      	movs	r3, #45	@ 0x2d
 800f972:	e000      	b.n	800f976 <Temp_Sensor_Handler+0x66>
 800f974:	232b      	movs	r3, #43	@ 0x2b
 800f976:	6939      	ldr	r1, [r7, #16]
             (int)out_value.out_dec);
 800f978:	6978      	ldr	r0, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 800f97a:	9002      	str	r0, [sp, #8]
 800f97c:	9101      	str	r1, [sp, #4]
 800f97e:	9300      	str	r3, [sp, #0]
 800f980:	4613      	mov	r3, r2
 800f982:	4a31      	ldr	r2, [pc, #196]	@ (800fa48 <Temp_Sensor_Handler+0x138>)
 800f984:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f988:	482c      	ldr	r0, [pc, #176]	@ (800fa3c <Temp_Sensor_Handler+0x12c>)
 800f98a:	f000 fb2b 	bl	800ffe4 <sniprintf>
  }

  printf("%s", dataOut);
 800f98e:	492b      	ldr	r1, [pc, #172]	@ (800fa3c <Temp_Sensor_Handler+0x12c>)
 800f990:	482b      	ldr	r0, [pc, #172]	@ (800fa40 <Temp_Sensor_Handler+0x130>)
 800f992:	f000 fb15 	bl	800ffc0 <iprintf>

  if (verbose == 1)
 800f996:	4b2d      	ldr	r3, [pc, #180]	@ (800fa4c <Temp_Sensor_Handler+0x13c>)
 800f998:	781b      	ldrb	r3, [r3, #0]
 800f99a:	2b01      	cmp	r3, #1
 800f99c:	d148      	bne.n	800fa30 <Temp_Sensor_Handler+0x120>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 800f99e:	f107 030b 	add.w	r3, r7, #11
 800f9a2:	4619      	mov	r1, r3
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f7fa fa81 	bl	8009eac <IKS4A1_ENV_SENSOR_ReadID>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d007      	beq.n	800f9c0 <Temp_Sensor_Handler+0xb0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	4a27      	ldr	r2, [pc, #156]	@ (800fa50 <Temp_Sensor_Handler+0x140>)
 800f9b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f9b8:	4820      	ldr	r0, [pc, #128]	@ (800fa3c <Temp_Sensor_Handler+0x12c>)
 800f9ba:	f000 fb13 	bl	800ffe4 <sniprintf>
 800f9be:	e008      	b.n	800f9d2 <Temp_Sensor_Handler+0xc2>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	7afa      	ldrb	r2, [r7, #11]
 800f9c4:	9200      	str	r2, [sp, #0]
 800f9c6:	4a23      	ldr	r2, [pc, #140]	@ (800fa54 <Temp_Sensor_Handler+0x144>)
 800f9c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f9cc:	481b      	ldr	r0, [pc, #108]	@ (800fa3c <Temp_Sensor_Handler+0x12c>)
 800f9ce:	f000 fb09 	bl	800ffe4 <sniprintf>
    }

    printf("%s", dataOut);
 800f9d2:	491a      	ldr	r1, [pc, #104]	@ (800fa3c <Temp_Sensor_Handler+0x12c>)
 800f9d4:	481a      	ldr	r0, [pc, #104]	@ (800fa40 <Temp_Sensor_Handler+0x130>)
 800f9d6:	f000 faf3 	bl	800ffc0 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_TEMPERATURE, &odr))
 800f9da:	f107 031c 	add.w	r3, r7, #28
 800f9de:	461a      	mov	r2, r3
 800f9e0:	2101      	movs	r1, #1
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f7fa fa8c 	bl	8009f00 <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d007      	beq.n	800f9fe <Temp_Sensor_Handler+0xee>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	4a19      	ldr	r2, [pc, #100]	@ (800fa58 <Temp_Sensor_Handler+0x148>)
 800f9f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f9f6:	4811      	ldr	r0, [pc, #68]	@ (800fa3c <Temp_Sensor_Handler+0x12c>)
 800f9f8:	f000 faf4 	bl	800ffe4 <sniprintf>
 800f9fc:	e014      	b.n	800fa28 <Temp_Sensor_Handler+0x118>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800f9fe:	edd7 7a07 	vldr	s15, [r7, #28]
 800fa02:	f107 030c 	add.w	r3, r7, #12
 800fa06:	2103      	movs	r1, #3
 800fa08:	4618      	mov	r0, r3
 800fa0a:	eeb0 0a67 	vmov.f32	s0, s15
 800fa0e:	f7ff fcbf 	bl	800f390 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 800fa16:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800fa18:	9101      	str	r1, [sp, #4]
 800fa1a:	9200      	str	r2, [sp, #0]
 800fa1c:	4a0f      	ldr	r2, [pc, #60]	@ (800fa5c <Temp_Sensor_Handler+0x14c>)
 800fa1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fa22:	4806      	ldr	r0, [pc, #24]	@ (800fa3c <Temp_Sensor_Handler+0x12c>)
 800fa24:	f000 fade 	bl	800ffe4 <sniprintf>
    }

    printf("%s", dataOut);
 800fa28:	4904      	ldr	r1, [pc, #16]	@ (800fa3c <Temp_Sensor_Handler+0x12c>)
 800fa2a:	4805      	ldr	r0, [pc, #20]	@ (800fa40 <Temp_Sensor_Handler+0x130>)
 800fa2c:	f000 fac8 	bl	800ffc0 <iprintf>
  }
}
 800fa30:	bf00      	nop
 800fa32:	3720      	adds	r7, #32
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}
 800fa38:	08012204 	.word	0x08012204
 800fa3c:	20000768 	.word	0x20000768
 800fa40:	08011eb0 	.word	0x08011eb0
 800fa44:	08012228 	.word	0x08012228
 800fa48:	0801223c 	.word	0x0801223c
 800fa4c:	20000225 	.word	0x20000225
 800fa50:	080120e0 	.word	0x080120e0
 800fa54:	080120f4 	.word	0x080120f4
 800fa58:	0801225c 	.word	0x0801225c
 800fa5c:	0801211c 	.word	0x0801211c

0800fa60 <Press_Sensor_Handler>:
  * @brief  Handles the pressure sensor data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Press_Sensor_Handler(uint32_t Instance)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b08a      	sub	sp, #40	@ 0x28
 800fa64:	af02      	add	r7, sp, #8
 800fa66:	6078      	str	r0, [r7, #4]
  float odr;
  float pressure;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	4a43      	ldr	r2, [pc, #268]	@ (800fb78 <Press_Sensor_Handler+0x118>)
 800fa6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fa70:	4842      	ldr	r0, [pc, #264]	@ (800fb7c <Press_Sensor_Handler+0x11c>)
 800fa72:	f000 fab7 	bl	800ffe4 <sniprintf>
  printf("%s", dataOut);
 800fa76:	4941      	ldr	r1, [pc, #260]	@ (800fb7c <Press_Sensor_Handler+0x11c>)
 800fa78:	4841      	ldr	r0, [pc, #260]	@ (800fb80 <Press_Sensor_Handler+0x120>)
 800fa7a:	f000 faa1 	bl	800ffc0 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &pressure))
 800fa7e:	f107 0318 	add.w	r3, r7, #24
 800fa82:	461a      	mov	r2, r3
 800fa84:	2102      	movs	r1, #2
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f7fa fa7c 	bl	8009f84 <IKS4A1_ENV_SENSOR_GetValue>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d007      	beq.n	800faa2 <Press_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: Error\r\n", (int)Instance);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	4a3b      	ldr	r2, [pc, #236]	@ (800fb84 <Press_Sensor_Handler+0x124>)
 800fa96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fa9a:	4838      	ldr	r0, [pc, #224]	@ (800fb7c <Press_Sensor_Handler+0x11c>)
 800fa9c:	f000 faa2 	bl	800ffe4 <sniprintf>
 800faa0:	e014      	b.n	800facc <Press_Sensor_Handler+0x6c>
  }
  else
  {
    floatToInt(pressure, &out_value, 2);
 800faa2:	edd7 7a06 	vldr	s15, [r7, #24]
 800faa6:	f107 030c 	add.w	r3, r7, #12
 800faaa:	2102      	movs	r1, #2
 800faac:	4618      	mov	r0, r3
 800faae:	eeb0 0a67 	vmov.f32	s0, s15
 800fab2:	f7ff fc6d 	bl	800f390 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 800faba:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 800fabc:	9101      	str	r1, [sp, #4]
 800fabe:	9200      	str	r2, [sp, #0]
 800fac0:	4a31      	ldr	r2, [pc, #196]	@ (800fb88 <Press_Sensor_Handler+0x128>)
 800fac2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fac6:	482d      	ldr	r0, [pc, #180]	@ (800fb7c <Press_Sensor_Handler+0x11c>)
 800fac8:	f000 fa8c 	bl	800ffe4 <sniprintf>
  }

  printf("%s", dataOut);
 800facc:	492b      	ldr	r1, [pc, #172]	@ (800fb7c <Press_Sensor_Handler+0x11c>)
 800face:	482c      	ldr	r0, [pc, #176]	@ (800fb80 <Press_Sensor_Handler+0x120>)
 800fad0:	f000 fa76 	bl	800ffc0 <iprintf>

  if (verbose == 1)
 800fad4:	4b2d      	ldr	r3, [pc, #180]	@ (800fb8c <Press_Sensor_Handler+0x12c>)
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	2b01      	cmp	r3, #1
 800fada:	d148      	bne.n	800fb6e <Press_Sensor_Handler+0x10e>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 800fadc:	f107 030b 	add.w	r3, r7, #11
 800fae0:	4619      	mov	r1, r3
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f7fa f9e2 	bl	8009eac <IKS4A1_ENV_SENSOR_ReadID>
 800fae8:	4603      	mov	r3, r0
 800faea:	2b00      	cmp	r3, #0
 800faec:	d007      	beq.n	800fafe <Press_Sensor_Handler+0x9e>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	4a27      	ldr	r2, [pc, #156]	@ (800fb90 <Press_Sensor_Handler+0x130>)
 800faf2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800faf6:	4821      	ldr	r0, [pc, #132]	@ (800fb7c <Press_Sensor_Handler+0x11c>)
 800faf8:	f000 fa74 	bl	800ffe4 <sniprintf>
 800fafc:	e008      	b.n	800fb10 <Press_Sensor_Handler+0xb0>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	7afa      	ldrb	r2, [r7, #11]
 800fb02:	9200      	str	r2, [sp, #0]
 800fb04:	4a23      	ldr	r2, [pc, #140]	@ (800fb94 <Press_Sensor_Handler+0x134>)
 800fb06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fb0a:	481c      	ldr	r0, [pc, #112]	@ (800fb7c <Press_Sensor_Handler+0x11c>)
 800fb0c:	f000 fa6a 	bl	800ffe4 <sniprintf>
    }

    printf("%s", dataOut);
 800fb10:	491a      	ldr	r1, [pc, #104]	@ (800fb7c <Press_Sensor_Handler+0x11c>)
 800fb12:	481b      	ldr	r0, [pc, #108]	@ (800fb80 <Press_Sensor_Handler+0x120>)
 800fb14:	f000 fa54 	bl	800ffc0 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_PRESSURE, &odr))
 800fb18:	f107 031c 	add.w	r3, r7, #28
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	2102      	movs	r1, #2
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f7fa f9ed 	bl	8009f00 <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d007      	beq.n	800fb3c <Press_Sensor_Handler+0xdc>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	4a1a      	ldr	r2, [pc, #104]	@ (800fb98 <Press_Sensor_Handler+0x138>)
 800fb30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fb34:	4811      	ldr	r0, [pc, #68]	@ (800fb7c <Press_Sensor_Handler+0x11c>)
 800fb36:	f000 fa55 	bl	800ffe4 <sniprintf>
 800fb3a:	e014      	b.n	800fb66 <Press_Sensor_Handler+0x106>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800fb3c:	edd7 7a07 	vldr	s15, [r7, #28]
 800fb40:	f107 030c 	add.w	r3, r7, #12
 800fb44:	2103      	movs	r1, #3
 800fb46:	4618      	mov	r0, r3
 800fb48:	eeb0 0a67 	vmov.f32	s0, s15
 800fb4c:	f7ff fc20 	bl	800f390 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 800fb54:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800fb56:	9101      	str	r1, [sp, #4]
 800fb58:	9200      	str	r2, [sp, #0]
 800fb5a:	4a10      	ldr	r2, [pc, #64]	@ (800fb9c <Press_Sensor_Handler+0x13c>)
 800fb5c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fb60:	4806      	ldr	r0, [pc, #24]	@ (800fb7c <Press_Sensor_Handler+0x11c>)
 800fb62:	f000 fa3f 	bl	800ffe4 <sniprintf>
    }

    printf("%s", dataOut);
 800fb66:	4905      	ldr	r1, [pc, #20]	@ (800fb7c <Press_Sensor_Handler+0x11c>)
 800fb68:	4805      	ldr	r0, [pc, #20]	@ (800fb80 <Press_Sensor_Handler+0x120>)
 800fb6a:	f000 fa29 	bl	800ffc0 <iprintf>
  }
}
 800fb6e:	bf00      	nop
 800fb70:	3720      	adds	r7, #32
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop
 800fb78:	08012204 	.word	0x08012204
 800fb7c:	20000768 	.word	0x20000768
 800fb80:	08011eb0 	.word	0x08011eb0
 800fb84:	08012270 	.word	0x08012270
 800fb88:	08012288 	.word	0x08012288
 800fb8c:	20000225 	.word	0x20000225
 800fb90:	080120e0 	.word	0x080120e0
 800fb94:	080120f4 	.word	0x080120f4
 800fb98:	0801225c 	.word	0x0801225c
 800fb9c:	0801211c 	.word	0x0801211c

0800fba0 <Hum_Sensor_Handler>:
  * @brief  Handles the humidity data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Hum_Sensor_Handler(uint32_t Instance)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b08a      	sub	sp, #40	@ 0x28
 800fba4:	af02      	add	r7, sp, #8
 800fba6:	6078      	str	r0, [r7, #4]
  float odr;
  float humidity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	4a43      	ldr	r2, [pc, #268]	@ (800fcb8 <Hum_Sensor_Handler+0x118>)
 800fbac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fbb0:	4842      	ldr	r0, [pc, #264]	@ (800fcbc <Hum_Sensor_Handler+0x11c>)
 800fbb2:	f000 fa17 	bl	800ffe4 <sniprintf>
  printf("%s", dataOut);
 800fbb6:	4941      	ldr	r1, [pc, #260]	@ (800fcbc <Hum_Sensor_Handler+0x11c>)
 800fbb8:	4841      	ldr	r0, [pc, #260]	@ (800fcc0 <Hum_Sensor_Handler+0x120>)
 800fbba:	f000 fa01 	bl	800ffc0 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &humidity))
 800fbbe:	f107 0318 	add.w	r3, r7, #24
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	2104      	movs	r1, #4
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f7fa f9dc 	bl	8009f84 <IKS4A1_ENV_SENSOR_GetValue>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d007      	beq.n	800fbe2 <Hum_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: Error\r\n", (int)Instance);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	4a3b      	ldr	r2, [pc, #236]	@ (800fcc4 <Hum_Sensor_Handler+0x124>)
 800fbd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fbda:	4838      	ldr	r0, [pc, #224]	@ (800fcbc <Hum_Sensor_Handler+0x11c>)
 800fbdc:	f000 fa02 	bl	800ffe4 <sniprintf>
 800fbe0:	e014      	b.n	800fc0c <Hum_Sensor_Handler+0x6c>
  }
  else
  {
    floatToInt(humidity, &out_value, 2);
 800fbe2:	edd7 7a06 	vldr	s15, [r7, #24]
 800fbe6:	f107 030c 	add.w	r3, r7, #12
 800fbea:	2102      	movs	r1, #2
 800fbec:	4618      	mov	r0, r3
 800fbee:	eeb0 0a67 	vmov.f32	s0, s15
 800fbf2:	f7ff fbcd 	bl	800f390 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 800fbfa:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 800fbfc:	9101      	str	r1, [sp, #4]
 800fbfe:	9200      	str	r2, [sp, #0]
 800fc00:	4a31      	ldr	r2, [pc, #196]	@ (800fcc8 <Hum_Sensor_Handler+0x128>)
 800fc02:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fc06:	482d      	ldr	r0, [pc, #180]	@ (800fcbc <Hum_Sensor_Handler+0x11c>)
 800fc08:	f000 f9ec 	bl	800ffe4 <sniprintf>
  }

  printf("%s", dataOut);
 800fc0c:	492b      	ldr	r1, [pc, #172]	@ (800fcbc <Hum_Sensor_Handler+0x11c>)
 800fc0e:	482c      	ldr	r0, [pc, #176]	@ (800fcc0 <Hum_Sensor_Handler+0x120>)
 800fc10:	f000 f9d6 	bl	800ffc0 <iprintf>

  if (verbose == 1)
 800fc14:	4b2d      	ldr	r3, [pc, #180]	@ (800fccc <Hum_Sensor_Handler+0x12c>)
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	2b01      	cmp	r3, #1
 800fc1a:	d148      	bne.n	800fcae <Hum_Sensor_Handler+0x10e>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 800fc1c:	f107 030b 	add.w	r3, r7, #11
 800fc20:	4619      	mov	r1, r3
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f7fa f942 	bl	8009eac <IKS4A1_ENV_SENSOR_ReadID>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d007      	beq.n	800fc3e <Hum_Sensor_Handler+0x9e>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	4a27      	ldr	r2, [pc, #156]	@ (800fcd0 <Hum_Sensor_Handler+0x130>)
 800fc32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fc36:	4821      	ldr	r0, [pc, #132]	@ (800fcbc <Hum_Sensor_Handler+0x11c>)
 800fc38:	f000 f9d4 	bl	800ffe4 <sniprintf>
 800fc3c:	e008      	b.n	800fc50 <Hum_Sensor_Handler+0xb0>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	7afa      	ldrb	r2, [r7, #11]
 800fc42:	9200      	str	r2, [sp, #0]
 800fc44:	4a23      	ldr	r2, [pc, #140]	@ (800fcd4 <Hum_Sensor_Handler+0x134>)
 800fc46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fc4a:	481c      	ldr	r0, [pc, #112]	@ (800fcbc <Hum_Sensor_Handler+0x11c>)
 800fc4c:	f000 f9ca 	bl	800ffe4 <sniprintf>
    }

    printf("%s", dataOut);
 800fc50:	491a      	ldr	r1, [pc, #104]	@ (800fcbc <Hum_Sensor_Handler+0x11c>)
 800fc52:	481b      	ldr	r0, [pc, #108]	@ (800fcc0 <Hum_Sensor_Handler+0x120>)
 800fc54:	f000 f9b4 	bl	800ffc0 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_HUMIDITY, &odr))
 800fc58:	f107 031c 	add.w	r3, r7, #28
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	2104      	movs	r1, #4
 800fc60:	6878      	ldr	r0, [r7, #4]
 800fc62:	f7fa f94d 	bl	8009f00 <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 800fc66:	4603      	mov	r3, r0
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d007      	beq.n	800fc7c <Hum_Sensor_Handler+0xdc>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	4a1a      	ldr	r2, [pc, #104]	@ (800fcd8 <Hum_Sensor_Handler+0x138>)
 800fc70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fc74:	4811      	ldr	r0, [pc, #68]	@ (800fcbc <Hum_Sensor_Handler+0x11c>)
 800fc76:	f000 f9b5 	bl	800ffe4 <sniprintf>
 800fc7a:	e014      	b.n	800fca6 <Hum_Sensor_Handler+0x106>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 800fc7c:	edd7 7a07 	vldr	s15, [r7, #28]
 800fc80:	f107 030c 	add.w	r3, r7, #12
 800fc84:	2103      	movs	r1, #3
 800fc86:	4618      	mov	r0, r3
 800fc88:	eeb0 0a67 	vmov.f32	s0, s15
 800fc8c:	f7ff fb80 	bl	800f390 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 800fc94:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 800fc96:	9101      	str	r1, [sp, #4]
 800fc98:	9200      	str	r2, [sp, #0]
 800fc9a:	4a10      	ldr	r2, [pc, #64]	@ (800fcdc <Hum_Sensor_Handler+0x13c>)
 800fc9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800fca0:	4806      	ldr	r0, [pc, #24]	@ (800fcbc <Hum_Sensor_Handler+0x11c>)
 800fca2:	f000 f99f 	bl	800ffe4 <sniprintf>
    }

    printf("%s", dataOut);
 800fca6:	4905      	ldr	r1, [pc, #20]	@ (800fcbc <Hum_Sensor_Handler+0x11c>)
 800fca8:	4805      	ldr	r0, [pc, #20]	@ (800fcc0 <Hum_Sensor_Handler+0x120>)
 800fcaa:	f000 f989 	bl	800ffc0 <iprintf>
  }
}
 800fcae:	bf00      	nop
 800fcb0:	3720      	adds	r7, #32
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
 800fcb6:	bf00      	nop
 800fcb8:	08012204 	.word	0x08012204
 800fcbc:	20000768 	.word	0x20000768
 800fcc0:	08011eb0 	.word	0x08011eb0
 800fcc4:	080122a4 	.word	0x080122a4
 800fcc8:	080122b8 	.word	0x080122b8
 800fccc:	20000225 	.word	0x20000225
 800fcd0:	080120e0 	.word	0x080120e0
 800fcd4:	080120f4 	.word	0x080120f4
 800fcd8:	0801225c 	.word	0x0801225c
 800fcdc:	0801211c 	.word	0x0801211c

0800fce0 <sbrk_aligned>:
 800fce0:	b570      	push	{r4, r5, r6, lr}
 800fce2:	4e0f      	ldr	r6, [pc, #60]	@ (800fd20 <sbrk_aligned+0x40>)
 800fce4:	460c      	mov	r4, r1
 800fce6:	6831      	ldr	r1, [r6, #0]
 800fce8:	4605      	mov	r5, r0
 800fcea:	b911      	cbnz	r1, 800fcf2 <sbrk_aligned+0x12>
 800fcec:	f000 fa30 	bl	8010150 <_sbrk_r>
 800fcf0:	6030      	str	r0, [r6, #0]
 800fcf2:	4621      	mov	r1, r4
 800fcf4:	4628      	mov	r0, r5
 800fcf6:	f000 fa2b 	bl	8010150 <_sbrk_r>
 800fcfa:	1c43      	adds	r3, r0, #1
 800fcfc:	d103      	bne.n	800fd06 <sbrk_aligned+0x26>
 800fcfe:	f04f 34ff 	mov.w	r4, #4294967295
 800fd02:	4620      	mov	r0, r4
 800fd04:	bd70      	pop	{r4, r5, r6, pc}
 800fd06:	1cc4      	adds	r4, r0, #3
 800fd08:	f024 0403 	bic.w	r4, r4, #3
 800fd0c:	42a0      	cmp	r0, r4
 800fd0e:	d0f8      	beq.n	800fd02 <sbrk_aligned+0x22>
 800fd10:	1a21      	subs	r1, r4, r0
 800fd12:	4628      	mov	r0, r5
 800fd14:	f000 fa1c 	bl	8010150 <_sbrk_r>
 800fd18:	3001      	adds	r0, #1
 800fd1a:	d1f2      	bne.n	800fd02 <sbrk_aligned+0x22>
 800fd1c:	e7ef      	b.n	800fcfe <sbrk_aligned+0x1e>
 800fd1e:	bf00      	nop
 800fd20:	2000086c 	.word	0x2000086c

0800fd24 <_malloc_r>:
 800fd24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd28:	1ccd      	adds	r5, r1, #3
 800fd2a:	f025 0503 	bic.w	r5, r5, #3
 800fd2e:	3508      	adds	r5, #8
 800fd30:	2d0c      	cmp	r5, #12
 800fd32:	bf38      	it	cc
 800fd34:	250c      	movcc	r5, #12
 800fd36:	2d00      	cmp	r5, #0
 800fd38:	4606      	mov	r6, r0
 800fd3a:	db01      	blt.n	800fd40 <_malloc_r+0x1c>
 800fd3c:	42a9      	cmp	r1, r5
 800fd3e:	d904      	bls.n	800fd4a <_malloc_r+0x26>
 800fd40:	230c      	movs	r3, #12
 800fd42:	6033      	str	r3, [r6, #0]
 800fd44:	2000      	movs	r0, #0
 800fd46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fe20 <_malloc_r+0xfc>
 800fd4e:	f000 f869 	bl	800fe24 <__malloc_lock>
 800fd52:	f8d8 3000 	ldr.w	r3, [r8]
 800fd56:	461c      	mov	r4, r3
 800fd58:	bb44      	cbnz	r4, 800fdac <_malloc_r+0x88>
 800fd5a:	4629      	mov	r1, r5
 800fd5c:	4630      	mov	r0, r6
 800fd5e:	f7ff ffbf 	bl	800fce0 <sbrk_aligned>
 800fd62:	1c43      	adds	r3, r0, #1
 800fd64:	4604      	mov	r4, r0
 800fd66:	d158      	bne.n	800fe1a <_malloc_r+0xf6>
 800fd68:	f8d8 4000 	ldr.w	r4, [r8]
 800fd6c:	4627      	mov	r7, r4
 800fd6e:	2f00      	cmp	r7, #0
 800fd70:	d143      	bne.n	800fdfa <_malloc_r+0xd6>
 800fd72:	2c00      	cmp	r4, #0
 800fd74:	d04b      	beq.n	800fe0e <_malloc_r+0xea>
 800fd76:	6823      	ldr	r3, [r4, #0]
 800fd78:	4639      	mov	r1, r7
 800fd7a:	4630      	mov	r0, r6
 800fd7c:	eb04 0903 	add.w	r9, r4, r3
 800fd80:	f000 f9e6 	bl	8010150 <_sbrk_r>
 800fd84:	4581      	cmp	r9, r0
 800fd86:	d142      	bne.n	800fe0e <_malloc_r+0xea>
 800fd88:	6821      	ldr	r1, [r4, #0]
 800fd8a:	1a6d      	subs	r5, r5, r1
 800fd8c:	4629      	mov	r1, r5
 800fd8e:	4630      	mov	r0, r6
 800fd90:	f7ff ffa6 	bl	800fce0 <sbrk_aligned>
 800fd94:	3001      	adds	r0, #1
 800fd96:	d03a      	beq.n	800fe0e <_malloc_r+0xea>
 800fd98:	6823      	ldr	r3, [r4, #0]
 800fd9a:	442b      	add	r3, r5
 800fd9c:	6023      	str	r3, [r4, #0]
 800fd9e:	f8d8 3000 	ldr.w	r3, [r8]
 800fda2:	685a      	ldr	r2, [r3, #4]
 800fda4:	bb62      	cbnz	r2, 800fe00 <_malloc_r+0xdc>
 800fda6:	f8c8 7000 	str.w	r7, [r8]
 800fdaa:	e00f      	b.n	800fdcc <_malloc_r+0xa8>
 800fdac:	6822      	ldr	r2, [r4, #0]
 800fdae:	1b52      	subs	r2, r2, r5
 800fdb0:	d420      	bmi.n	800fdf4 <_malloc_r+0xd0>
 800fdb2:	2a0b      	cmp	r2, #11
 800fdb4:	d917      	bls.n	800fde6 <_malloc_r+0xc2>
 800fdb6:	1961      	adds	r1, r4, r5
 800fdb8:	42a3      	cmp	r3, r4
 800fdba:	6025      	str	r5, [r4, #0]
 800fdbc:	bf18      	it	ne
 800fdbe:	6059      	strne	r1, [r3, #4]
 800fdc0:	6863      	ldr	r3, [r4, #4]
 800fdc2:	bf08      	it	eq
 800fdc4:	f8c8 1000 	streq.w	r1, [r8]
 800fdc8:	5162      	str	r2, [r4, r5]
 800fdca:	604b      	str	r3, [r1, #4]
 800fdcc:	4630      	mov	r0, r6
 800fdce:	f000 f82f 	bl	800fe30 <__malloc_unlock>
 800fdd2:	f104 000b 	add.w	r0, r4, #11
 800fdd6:	1d23      	adds	r3, r4, #4
 800fdd8:	f020 0007 	bic.w	r0, r0, #7
 800fddc:	1ac2      	subs	r2, r0, r3
 800fdde:	bf1c      	itt	ne
 800fde0:	1a1b      	subne	r3, r3, r0
 800fde2:	50a3      	strne	r3, [r4, r2]
 800fde4:	e7af      	b.n	800fd46 <_malloc_r+0x22>
 800fde6:	6862      	ldr	r2, [r4, #4]
 800fde8:	42a3      	cmp	r3, r4
 800fdea:	bf0c      	ite	eq
 800fdec:	f8c8 2000 	streq.w	r2, [r8]
 800fdf0:	605a      	strne	r2, [r3, #4]
 800fdf2:	e7eb      	b.n	800fdcc <_malloc_r+0xa8>
 800fdf4:	4623      	mov	r3, r4
 800fdf6:	6864      	ldr	r4, [r4, #4]
 800fdf8:	e7ae      	b.n	800fd58 <_malloc_r+0x34>
 800fdfa:	463c      	mov	r4, r7
 800fdfc:	687f      	ldr	r7, [r7, #4]
 800fdfe:	e7b6      	b.n	800fd6e <_malloc_r+0x4a>
 800fe00:	461a      	mov	r2, r3
 800fe02:	685b      	ldr	r3, [r3, #4]
 800fe04:	42a3      	cmp	r3, r4
 800fe06:	d1fb      	bne.n	800fe00 <_malloc_r+0xdc>
 800fe08:	2300      	movs	r3, #0
 800fe0a:	6053      	str	r3, [r2, #4]
 800fe0c:	e7de      	b.n	800fdcc <_malloc_r+0xa8>
 800fe0e:	230c      	movs	r3, #12
 800fe10:	6033      	str	r3, [r6, #0]
 800fe12:	4630      	mov	r0, r6
 800fe14:	f000 f80c 	bl	800fe30 <__malloc_unlock>
 800fe18:	e794      	b.n	800fd44 <_malloc_r+0x20>
 800fe1a:	6005      	str	r5, [r0, #0]
 800fe1c:	e7d6      	b.n	800fdcc <_malloc_r+0xa8>
 800fe1e:	bf00      	nop
 800fe20:	20000870 	.word	0x20000870

0800fe24 <__malloc_lock>:
 800fe24:	4801      	ldr	r0, [pc, #4]	@ (800fe2c <__malloc_lock+0x8>)
 800fe26:	f000 b9e0 	b.w	80101ea <__retarget_lock_acquire_recursive>
 800fe2a:	bf00      	nop
 800fe2c:	200009b4 	.word	0x200009b4

0800fe30 <__malloc_unlock>:
 800fe30:	4801      	ldr	r0, [pc, #4]	@ (800fe38 <__malloc_unlock+0x8>)
 800fe32:	f000 b9db 	b.w	80101ec <__retarget_lock_release_recursive>
 800fe36:	bf00      	nop
 800fe38:	200009b4 	.word	0x200009b4

0800fe3c <std>:
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	b510      	push	{r4, lr}
 800fe40:	4604      	mov	r4, r0
 800fe42:	e9c0 3300 	strd	r3, r3, [r0]
 800fe46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe4a:	6083      	str	r3, [r0, #8]
 800fe4c:	8181      	strh	r1, [r0, #12]
 800fe4e:	6643      	str	r3, [r0, #100]	@ 0x64
 800fe50:	81c2      	strh	r2, [r0, #14]
 800fe52:	6183      	str	r3, [r0, #24]
 800fe54:	4619      	mov	r1, r3
 800fe56:	2208      	movs	r2, #8
 800fe58:	305c      	adds	r0, #92	@ 0x5c
 800fe5a:	f000 f93c 	bl	80100d6 <memset>
 800fe5e:	4b0d      	ldr	r3, [pc, #52]	@ (800fe94 <std+0x58>)
 800fe60:	6263      	str	r3, [r4, #36]	@ 0x24
 800fe62:	4b0d      	ldr	r3, [pc, #52]	@ (800fe98 <std+0x5c>)
 800fe64:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fe66:	4b0d      	ldr	r3, [pc, #52]	@ (800fe9c <std+0x60>)
 800fe68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fe6a:	4b0d      	ldr	r3, [pc, #52]	@ (800fea0 <std+0x64>)
 800fe6c:	6323      	str	r3, [r4, #48]	@ 0x30
 800fe6e:	4b0d      	ldr	r3, [pc, #52]	@ (800fea4 <std+0x68>)
 800fe70:	6224      	str	r4, [r4, #32]
 800fe72:	429c      	cmp	r4, r3
 800fe74:	d006      	beq.n	800fe84 <std+0x48>
 800fe76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fe7a:	4294      	cmp	r4, r2
 800fe7c:	d002      	beq.n	800fe84 <std+0x48>
 800fe7e:	33d0      	adds	r3, #208	@ 0xd0
 800fe80:	429c      	cmp	r4, r3
 800fe82:	d105      	bne.n	800fe90 <std+0x54>
 800fe84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fe88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe8c:	f000 b9ac 	b.w	80101e8 <__retarget_lock_init_recursive>
 800fe90:	bd10      	pop	{r4, pc}
 800fe92:	bf00      	nop
 800fe94:	08010051 	.word	0x08010051
 800fe98:	08010073 	.word	0x08010073
 800fe9c:	080100ab 	.word	0x080100ab
 800fea0:	080100cf 	.word	0x080100cf
 800fea4:	20000874 	.word	0x20000874

0800fea8 <stdio_exit_handler>:
 800fea8:	4a02      	ldr	r2, [pc, #8]	@ (800feb4 <stdio_exit_handler+0xc>)
 800feaa:	4903      	ldr	r1, [pc, #12]	@ (800feb8 <stdio_exit_handler+0x10>)
 800feac:	4803      	ldr	r0, [pc, #12]	@ (800febc <stdio_exit_handler+0x14>)
 800feae:	f000 b869 	b.w	800ff84 <_fwalk_sglue>
 800feb2:	bf00      	nop
 800feb4:	20000228 	.word	0x20000228
 800feb8:	08010bd9 	.word	0x08010bd9
 800febc:	20000238 	.word	0x20000238

0800fec0 <cleanup_stdio>:
 800fec0:	6841      	ldr	r1, [r0, #4]
 800fec2:	4b0c      	ldr	r3, [pc, #48]	@ (800fef4 <cleanup_stdio+0x34>)
 800fec4:	4299      	cmp	r1, r3
 800fec6:	b510      	push	{r4, lr}
 800fec8:	4604      	mov	r4, r0
 800feca:	d001      	beq.n	800fed0 <cleanup_stdio+0x10>
 800fecc:	f000 fe84 	bl	8010bd8 <_fflush_r>
 800fed0:	68a1      	ldr	r1, [r4, #8]
 800fed2:	4b09      	ldr	r3, [pc, #36]	@ (800fef8 <cleanup_stdio+0x38>)
 800fed4:	4299      	cmp	r1, r3
 800fed6:	d002      	beq.n	800fede <cleanup_stdio+0x1e>
 800fed8:	4620      	mov	r0, r4
 800feda:	f000 fe7d 	bl	8010bd8 <_fflush_r>
 800fede:	68e1      	ldr	r1, [r4, #12]
 800fee0:	4b06      	ldr	r3, [pc, #24]	@ (800fefc <cleanup_stdio+0x3c>)
 800fee2:	4299      	cmp	r1, r3
 800fee4:	d004      	beq.n	800fef0 <cleanup_stdio+0x30>
 800fee6:	4620      	mov	r0, r4
 800fee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800feec:	f000 be74 	b.w	8010bd8 <_fflush_r>
 800fef0:	bd10      	pop	{r4, pc}
 800fef2:	bf00      	nop
 800fef4:	20000874 	.word	0x20000874
 800fef8:	200008dc 	.word	0x200008dc
 800fefc:	20000944 	.word	0x20000944

0800ff00 <global_stdio_init.part.0>:
 800ff00:	b510      	push	{r4, lr}
 800ff02:	4b0b      	ldr	r3, [pc, #44]	@ (800ff30 <global_stdio_init.part.0+0x30>)
 800ff04:	4c0b      	ldr	r4, [pc, #44]	@ (800ff34 <global_stdio_init.part.0+0x34>)
 800ff06:	4a0c      	ldr	r2, [pc, #48]	@ (800ff38 <global_stdio_init.part.0+0x38>)
 800ff08:	601a      	str	r2, [r3, #0]
 800ff0a:	4620      	mov	r0, r4
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	2104      	movs	r1, #4
 800ff10:	f7ff ff94 	bl	800fe3c <std>
 800ff14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ff18:	2201      	movs	r2, #1
 800ff1a:	2109      	movs	r1, #9
 800ff1c:	f7ff ff8e 	bl	800fe3c <std>
 800ff20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ff24:	2202      	movs	r2, #2
 800ff26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff2a:	2112      	movs	r1, #18
 800ff2c:	f7ff bf86 	b.w	800fe3c <std>
 800ff30:	200009ac 	.word	0x200009ac
 800ff34:	20000874 	.word	0x20000874
 800ff38:	0800fea9 	.word	0x0800fea9

0800ff3c <__sfp_lock_acquire>:
 800ff3c:	4801      	ldr	r0, [pc, #4]	@ (800ff44 <__sfp_lock_acquire+0x8>)
 800ff3e:	f000 b954 	b.w	80101ea <__retarget_lock_acquire_recursive>
 800ff42:	bf00      	nop
 800ff44:	200009b5 	.word	0x200009b5

0800ff48 <__sfp_lock_release>:
 800ff48:	4801      	ldr	r0, [pc, #4]	@ (800ff50 <__sfp_lock_release+0x8>)
 800ff4a:	f000 b94f 	b.w	80101ec <__retarget_lock_release_recursive>
 800ff4e:	bf00      	nop
 800ff50:	200009b5 	.word	0x200009b5

0800ff54 <__sinit>:
 800ff54:	b510      	push	{r4, lr}
 800ff56:	4604      	mov	r4, r0
 800ff58:	f7ff fff0 	bl	800ff3c <__sfp_lock_acquire>
 800ff5c:	6a23      	ldr	r3, [r4, #32]
 800ff5e:	b11b      	cbz	r3, 800ff68 <__sinit+0x14>
 800ff60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ff64:	f7ff bff0 	b.w	800ff48 <__sfp_lock_release>
 800ff68:	4b04      	ldr	r3, [pc, #16]	@ (800ff7c <__sinit+0x28>)
 800ff6a:	6223      	str	r3, [r4, #32]
 800ff6c:	4b04      	ldr	r3, [pc, #16]	@ (800ff80 <__sinit+0x2c>)
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d1f5      	bne.n	800ff60 <__sinit+0xc>
 800ff74:	f7ff ffc4 	bl	800ff00 <global_stdio_init.part.0>
 800ff78:	e7f2      	b.n	800ff60 <__sinit+0xc>
 800ff7a:	bf00      	nop
 800ff7c:	0800fec1 	.word	0x0800fec1
 800ff80:	200009ac 	.word	0x200009ac

0800ff84 <_fwalk_sglue>:
 800ff84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff88:	4607      	mov	r7, r0
 800ff8a:	4688      	mov	r8, r1
 800ff8c:	4614      	mov	r4, r2
 800ff8e:	2600      	movs	r6, #0
 800ff90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ff94:	f1b9 0901 	subs.w	r9, r9, #1
 800ff98:	d505      	bpl.n	800ffa6 <_fwalk_sglue+0x22>
 800ff9a:	6824      	ldr	r4, [r4, #0]
 800ff9c:	2c00      	cmp	r4, #0
 800ff9e:	d1f7      	bne.n	800ff90 <_fwalk_sglue+0xc>
 800ffa0:	4630      	mov	r0, r6
 800ffa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffa6:	89ab      	ldrh	r3, [r5, #12]
 800ffa8:	2b01      	cmp	r3, #1
 800ffaa:	d907      	bls.n	800ffbc <_fwalk_sglue+0x38>
 800ffac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ffb0:	3301      	adds	r3, #1
 800ffb2:	d003      	beq.n	800ffbc <_fwalk_sglue+0x38>
 800ffb4:	4629      	mov	r1, r5
 800ffb6:	4638      	mov	r0, r7
 800ffb8:	47c0      	blx	r8
 800ffba:	4306      	orrs	r6, r0
 800ffbc:	3568      	adds	r5, #104	@ 0x68
 800ffbe:	e7e9      	b.n	800ff94 <_fwalk_sglue+0x10>

0800ffc0 <iprintf>:
 800ffc0:	b40f      	push	{r0, r1, r2, r3}
 800ffc2:	b507      	push	{r0, r1, r2, lr}
 800ffc4:	4906      	ldr	r1, [pc, #24]	@ (800ffe0 <iprintf+0x20>)
 800ffc6:	ab04      	add	r3, sp, #16
 800ffc8:	6808      	ldr	r0, [r1, #0]
 800ffca:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffce:	6881      	ldr	r1, [r0, #8]
 800ffd0:	9301      	str	r3, [sp, #4]
 800ffd2:	f000 fad9 	bl	8010588 <_vfiprintf_r>
 800ffd6:	b003      	add	sp, #12
 800ffd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ffdc:	b004      	add	sp, #16
 800ffde:	4770      	bx	lr
 800ffe0:	20000234 	.word	0x20000234

0800ffe4 <sniprintf>:
 800ffe4:	b40c      	push	{r2, r3}
 800ffe6:	b530      	push	{r4, r5, lr}
 800ffe8:	4b18      	ldr	r3, [pc, #96]	@ (801004c <sniprintf+0x68>)
 800ffea:	1e0c      	subs	r4, r1, #0
 800ffec:	681d      	ldr	r5, [r3, #0]
 800ffee:	b09d      	sub	sp, #116	@ 0x74
 800fff0:	da08      	bge.n	8010004 <sniprintf+0x20>
 800fff2:	238b      	movs	r3, #139	@ 0x8b
 800fff4:	602b      	str	r3, [r5, #0]
 800fff6:	f04f 30ff 	mov.w	r0, #4294967295
 800fffa:	b01d      	add	sp, #116	@ 0x74
 800fffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010000:	b002      	add	sp, #8
 8010002:	4770      	bx	lr
 8010004:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010008:	f8ad 3014 	strh.w	r3, [sp, #20]
 801000c:	f04f 0300 	mov.w	r3, #0
 8010010:	931b      	str	r3, [sp, #108]	@ 0x6c
 8010012:	bf14      	ite	ne
 8010014:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010018:	4623      	moveq	r3, r4
 801001a:	9304      	str	r3, [sp, #16]
 801001c:	9307      	str	r3, [sp, #28]
 801001e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010022:	9002      	str	r0, [sp, #8]
 8010024:	9006      	str	r0, [sp, #24]
 8010026:	f8ad 3016 	strh.w	r3, [sp, #22]
 801002a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801002c:	ab21      	add	r3, sp, #132	@ 0x84
 801002e:	a902      	add	r1, sp, #8
 8010030:	4628      	mov	r0, r5
 8010032:	9301      	str	r3, [sp, #4]
 8010034:	f000 f982 	bl	801033c <_svfiprintf_r>
 8010038:	1c43      	adds	r3, r0, #1
 801003a:	bfbc      	itt	lt
 801003c:	238b      	movlt	r3, #139	@ 0x8b
 801003e:	602b      	strlt	r3, [r5, #0]
 8010040:	2c00      	cmp	r4, #0
 8010042:	d0da      	beq.n	800fffa <sniprintf+0x16>
 8010044:	9b02      	ldr	r3, [sp, #8]
 8010046:	2200      	movs	r2, #0
 8010048:	701a      	strb	r2, [r3, #0]
 801004a:	e7d6      	b.n	800fffa <sniprintf+0x16>
 801004c:	20000234 	.word	0x20000234

08010050 <__sread>:
 8010050:	b510      	push	{r4, lr}
 8010052:	460c      	mov	r4, r1
 8010054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010058:	f000 f868 	bl	801012c <_read_r>
 801005c:	2800      	cmp	r0, #0
 801005e:	bfab      	itete	ge
 8010060:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010062:	89a3      	ldrhlt	r3, [r4, #12]
 8010064:	181b      	addge	r3, r3, r0
 8010066:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801006a:	bfac      	ite	ge
 801006c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801006e:	81a3      	strhlt	r3, [r4, #12]
 8010070:	bd10      	pop	{r4, pc}

08010072 <__swrite>:
 8010072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010076:	461f      	mov	r7, r3
 8010078:	898b      	ldrh	r3, [r1, #12]
 801007a:	05db      	lsls	r3, r3, #23
 801007c:	4605      	mov	r5, r0
 801007e:	460c      	mov	r4, r1
 8010080:	4616      	mov	r6, r2
 8010082:	d505      	bpl.n	8010090 <__swrite+0x1e>
 8010084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010088:	2302      	movs	r3, #2
 801008a:	2200      	movs	r2, #0
 801008c:	f000 f83c 	bl	8010108 <_lseek_r>
 8010090:	89a3      	ldrh	r3, [r4, #12]
 8010092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010096:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801009a:	81a3      	strh	r3, [r4, #12]
 801009c:	4632      	mov	r2, r6
 801009e:	463b      	mov	r3, r7
 80100a0:	4628      	mov	r0, r5
 80100a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100a6:	f000 b863 	b.w	8010170 <_write_r>

080100aa <__sseek>:
 80100aa:	b510      	push	{r4, lr}
 80100ac:	460c      	mov	r4, r1
 80100ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100b2:	f000 f829 	bl	8010108 <_lseek_r>
 80100b6:	1c43      	adds	r3, r0, #1
 80100b8:	89a3      	ldrh	r3, [r4, #12]
 80100ba:	bf15      	itete	ne
 80100bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80100be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80100c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80100c6:	81a3      	strheq	r3, [r4, #12]
 80100c8:	bf18      	it	ne
 80100ca:	81a3      	strhne	r3, [r4, #12]
 80100cc:	bd10      	pop	{r4, pc}

080100ce <__sclose>:
 80100ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100d2:	f000 b809 	b.w	80100e8 <_close_r>

080100d6 <memset>:
 80100d6:	4402      	add	r2, r0
 80100d8:	4603      	mov	r3, r0
 80100da:	4293      	cmp	r3, r2
 80100dc:	d100      	bne.n	80100e0 <memset+0xa>
 80100de:	4770      	bx	lr
 80100e0:	f803 1b01 	strb.w	r1, [r3], #1
 80100e4:	e7f9      	b.n	80100da <memset+0x4>
	...

080100e8 <_close_r>:
 80100e8:	b538      	push	{r3, r4, r5, lr}
 80100ea:	4d06      	ldr	r5, [pc, #24]	@ (8010104 <_close_r+0x1c>)
 80100ec:	2300      	movs	r3, #0
 80100ee:	4604      	mov	r4, r0
 80100f0:	4608      	mov	r0, r1
 80100f2:	602b      	str	r3, [r5, #0]
 80100f4:	f7f1 fb7f 	bl	80017f6 <_close>
 80100f8:	1c43      	adds	r3, r0, #1
 80100fa:	d102      	bne.n	8010102 <_close_r+0x1a>
 80100fc:	682b      	ldr	r3, [r5, #0]
 80100fe:	b103      	cbz	r3, 8010102 <_close_r+0x1a>
 8010100:	6023      	str	r3, [r4, #0]
 8010102:	bd38      	pop	{r3, r4, r5, pc}
 8010104:	200009b0 	.word	0x200009b0

08010108 <_lseek_r>:
 8010108:	b538      	push	{r3, r4, r5, lr}
 801010a:	4d07      	ldr	r5, [pc, #28]	@ (8010128 <_lseek_r+0x20>)
 801010c:	4604      	mov	r4, r0
 801010e:	4608      	mov	r0, r1
 8010110:	4611      	mov	r1, r2
 8010112:	2200      	movs	r2, #0
 8010114:	602a      	str	r2, [r5, #0]
 8010116:	461a      	mov	r2, r3
 8010118:	f7f1 fb94 	bl	8001844 <_lseek>
 801011c:	1c43      	adds	r3, r0, #1
 801011e:	d102      	bne.n	8010126 <_lseek_r+0x1e>
 8010120:	682b      	ldr	r3, [r5, #0]
 8010122:	b103      	cbz	r3, 8010126 <_lseek_r+0x1e>
 8010124:	6023      	str	r3, [r4, #0]
 8010126:	bd38      	pop	{r3, r4, r5, pc}
 8010128:	200009b0 	.word	0x200009b0

0801012c <_read_r>:
 801012c:	b538      	push	{r3, r4, r5, lr}
 801012e:	4d07      	ldr	r5, [pc, #28]	@ (801014c <_read_r+0x20>)
 8010130:	4604      	mov	r4, r0
 8010132:	4608      	mov	r0, r1
 8010134:	4611      	mov	r1, r2
 8010136:	2200      	movs	r2, #0
 8010138:	602a      	str	r2, [r5, #0]
 801013a:	461a      	mov	r2, r3
 801013c:	f7f1 fb22 	bl	8001784 <_read>
 8010140:	1c43      	adds	r3, r0, #1
 8010142:	d102      	bne.n	801014a <_read_r+0x1e>
 8010144:	682b      	ldr	r3, [r5, #0]
 8010146:	b103      	cbz	r3, 801014a <_read_r+0x1e>
 8010148:	6023      	str	r3, [r4, #0]
 801014a:	bd38      	pop	{r3, r4, r5, pc}
 801014c:	200009b0 	.word	0x200009b0

08010150 <_sbrk_r>:
 8010150:	b538      	push	{r3, r4, r5, lr}
 8010152:	4d06      	ldr	r5, [pc, #24]	@ (801016c <_sbrk_r+0x1c>)
 8010154:	2300      	movs	r3, #0
 8010156:	4604      	mov	r4, r0
 8010158:	4608      	mov	r0, r1
 801015a:	602b      	str	r3, [r5, #0]
 801015c:	f7f1 fb80 	bl	8001860 <_sbrk>
 8010160:	1c43      	adds	r3, r0, #1
 8010162:	d102      	bne.n	801016a <_sbrk_r+0x1a>
 8010164:	682b      	ldr	r3, [r5, #0]
 8010166:	b103      	cbz	r3, 801016a <_sbrk_r+0x1a>
 8010168:	6023      	str	r3, [r4, #0]
 801016a:	bd38      	pop	{r3, r4, r5, pc}
 801016c:	200009b0 	.word	0x200009b0

08010170 <_write_r>:
 8010170:	b538      	push	{r3, r4, r5, lr}
 8010172:	4d07      	ldr	r5, [pc, #28]	@ (8010190 <_write_r+0x20>)
 8010174:	4604      	mov	r4, r0
 8010176:	4608      	mov	r0, r1
 8010178:	4611      	mov	r1, r2
 801017a:	2200      	movs	r2, #0
 801017c:	602a      	str	r2, [r5, #0]
 801017e:	461a      	mov	r2, r3
 8010180:	f7f1 fb1d 	bl	80017be <_write>
 8010184:	1c43      	adds	r3, r0, #1
 8010186:	d102      	bne.n	801018e <_write_r+0x1e>
 8010188:	682b      	ldr	r3, [r5, #0]
 801018a:	b103      	cbz	r3, 801018e <_write_r+0x1e>
 801018c:	6023      	str	r3, [r4, #0]
 801018e:	bd38      	pop	{r3, r4, r5, pc}
 8010190:	200009b0 	.word	0x200009b0

08010194 <__errno>:
 8010194:	4b01      	ldr	r3, [pc, #4]	@ (801019c <__errno+0x8>)
 8010196:	6818      	ldr	r0, [r3, #0]
 8010198:	4770      	bx	lr
 801019a:	bf00      	nop
 801019c:	20000234 	.word	0x20000234

080101a0 <__libc_init_array>:
 80101a0:	b570      	push	{r4, r5, r6, lr}
 80101a2:	4d0d      	ldr	r5, [pc, #52]	@ (80101d8 <__libc_init_array+0x38>)
 80101a4:	4c0d      	ldr	r4, [pc, #52]	@ (80101dc <__libc_init_array+0x3c>)
 80101a6:	1b64      	subs	r4, r4, r5
 80101a8:	10a4      	asrs	r4, r4, #2
 80101aa:	2600      	movs	r6, #0
 80101ac:	42a6      	cmp	r6, r4
 80101ae:	d109      	bne.n	80101c4 <__libc_init_array+0x24>
 80101b0:	4d0b      	ldr	r5, [pc, #44]	@ (80101e0 <__libc_init_array+0x40>)
 80101b2:	4c0c      	ldr	r4, [pc, #48]	@ (80101e4 <__libc_init_array+0x44>)
 80101b4:	f001 fe46 	bl	8011e44 <_init>
 80101b8:	1b64      	subs	r4, r4, r5
 80101ba:	10a4      	asrs	r4, r4, #2
 80101bc:	2600      	movs	r6, #0
 80101be:	42a6      	cmp	r6, r4
 80101c0:	d105      	bne.n	80101ce <__libc_init_array+0x2e>
 80101c2:	bd70      	pop	{r4, r5, r6, pc}
 80101c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80101c8:	4798      	blx	r3
 80101ca:	3601      	adds	r6, #1
 80101cc:	e7ee      	b.n	80101ac <__libc_init_array+0xc>
 80101ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80101d2:	4798      	blx	r3
 80101d4:	3601      	adds	r6, #1
 80101d6:	e7f2      	b.n	80101be <__libc_init_array+0x1e>
 80101d8:	08012380 	.word	0x08012380
 80101dc:	08012380 	.word	0x08012380
 80101e0:	08012380 	.word	0x08012380
 80101e4:	08012384 	.word	0x08012384

080101e8 <__retarget_lock_init_recursive>:
 80101e8:	4770      	bx	lr

080101ea <__retarget_lock_acquire_recursive>:
 80101ea:	4770      	bx	lr

080101ec <__retarget_lock_release_recursive>:
 80101ec:	4770      	bx	lr
	...

080101f0 <_free_r>:
 80101f0:	b538      	push	{r3, r4, r5, lr}
 80101f2:	4605      	mov	r5, r0
 80101f4:	2900      	cmp	r1, #0
 80101f6:	d041      	beq.n	801027c <_free_r+0x8c>
 80101f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101fc:	1f0c      	subs	r4, r1, #4
 80101fe:	2b00      	cmp	r3, #0
 8010200:	bfb8      	it	lt
 8010202:	18e4      	addlt	r4, r4, r3
 8010204:	f7ff fe0e 	bl	800fe24 <__malloc_lock>
 8010208:	4a1d      	ldr	r2, [pc, #116]	@ (8010280 <_free_r+0x90>)
 801020a:	6813      	ldr	r3, [r2, #0]
 801020c:	b933      	cbnz	r3, 801021c <_free_r+0x2c>
 801020e:	6063      	str	r3, [r4, #4]
 8010210:	6014      	str	r4, [r2, #0]
 8010212:	4628      	mov	r0, r5
 8010214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010218:	f7ff be0a 	b.w	800fe30 <__malloc_unlock>
 801021c:	42a3      	cmp	r3, r4
 801021e:	d908      	bls.n	8010232 <_free_r+0x42>
 8010220:	6820      	ldr	r0, [r4, #0]
 8010222:	1821      	adds	r1, r4, r0
 8010224:	428b      	cmp	r3, r1
 8010226:	bf01      	itttt	eq
 8010228:	6819      	ldreq	r1, [r3, #0]
 801022a:	685b      	ldreq	r3, [r3, #4]
 801022c:	1809      	addeq	r1, r1, r0
 801022e:	6021      	streq	r1, [r4, #0]
 8010230:	e7ed      	b.n	801020e <_free_r+0x1e>
 8010232:	461a      	mov	r2, r3
 8010234:	685b      	ldr	r3, [r3, #4]
 8010236:	b10b      	cbz	r3, 801023c <_free_r+0x4c>
 8010238:	42a3      	cmp	r3, r4
 801023a:	d9fa      	bls.n	8010232 <_free_r+0x42>
 801023c:	6811      	ldr	r1, [r2, #0]
 801023e:	1850      	adds	r0, r2, r1
 8010240:	42a0      	cmp	r0, r4
 8010242:	d10b      	bne.n	801025c <_free_r+0x6c>
 8010244:	6820      	ldr	r0, [r4, #0]
 8010246:	4401      	add	r1, r0
 8010248:	1850      	adds	r0, r2, r1
 801024a:	4283      	cmp	r3, r0
 801024c:	6011      	str	r1, [r2, #0]
 801024e:	d1e0      	bne.n	8010212 <_free_r+0x22>
 8010250:	6818      	ldr	r0, [r3, #0]
 8010252:	685b      	ldr	r3, [r3, #4]
 8010254:	6053      	str	r3, [r2, #4]
 8010256:	4408      	add	r0, r1
 8010258:	6010      	str	r0, [r2, #0]
 801025a:	e7da      	b.n	8010212 <_free_r+0x22>
 801025c:	d902      	bls.n	8010264 <_free_r+0x74>
 801025e:	230c      	movs	r3, #12
 8010260:	602b      	str	r3, [r5, #0]
 8010262:	e7d6      	b.n	8010212 <_free_r+0x22>
 8010264:	6820      	ldr	r0, [r4, #0]
 8010266:	1821      	adds	r1, r4, r0
 8010268:	428b      	cmp	r3, r1
 801026a:	bf04      	itt	eq
 801026c:	6819      	ldreq	r1, [r3, #0]
 801026e:	685b      	ldreq	r3, [r3, #4]
 8010270:	6063      	str	r3, [r4, #4]
 8010272:	bf04      	itt	eq
 8010274:	1809      	addeq	r1, r1, r0
 8010276:	6021      	streq	r1, [r4, #0]
 8010278:	6054      	str	r4, [r2, #4]
 801027a:	e7ca      	b.n	8010212 <_free_r+0x22>
 801027c:	bd38      	pop	{r3, r4, r5, pc}
 801027e:	bf00      	nop
 8010280:	20000870 	.word	0x20000870

08010284 <__ssputs_r>:
 8010284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010288:	688e      	ldr	r6, [r1, #8]
 801028a:	461f      	mov	r7, r3
 801028c:	42be      	cmp	r6, r7
 801028e:	680b      	ldr	r3, [r1, #0]
 8010290:	4682      	mov	sl, r0
 8010292:	460c      	mov	r4, r1
 8010294:	4690      	mov	r8, r2
 8010296:	d82d      	bhi.n	80102f4 <__ssputs_r+0x70>
 8010298:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801029c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80102a0:	d026      	beq.n	80102f0 <__ssputs_r+0x6c>
 80102a2:	6965      	ldr	r5, [r4, #20]
 80102a4:	6909      	ldr	r1, [r1, #16]
 80102a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80102aa:	eba3 0901 	sub.w	r9, r3, r1
 80102ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80102b2:	1c7b      	adds	r3, r7, #1
 80102b4:	444b      	add	r3, r9
 80102b6:	106d      	asrs	r5, r5, #1
 80102b8:	429d      	cmp	r5, r3
 80102ba:	bf38      	it	cc
 80102bc:	461d      	movcc	r5, r3
 80102be:	0553      	lsls	r3, r2, #21
 80102c0:	d527      	bpl.n	8010312 <__ssputs_r+0x8e>
 80102c2:	4629      	mov	r1, r5
 80102c4:	f7ff fd2e 	bl	800fd24 <_malloc_r>
 80102c8:	4606      	mov	r6, r0
 80102ca:	b360      	cbz	r0, 8010326 <__ssputs_r+0xa2>
 80102cc:	6921      	ldr	r1, [r4, #16]
 80102ce:	464a      	mov	r2, r9
 80102d0:	f000 fd58 	bl	8010d84 <memcpy>
 80102d4:	89a3      	ldrh	r3, [r4, #12]
 80102d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80102da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102de:	81a3      	strh	r3, [r4, #12]
 80102e0:	6126      	str	r6, [r4, #16]
 80102e2:	6165      	str	r5, [r4, #20]
 80102e4:	444e      	add	r6, r9
 80102e6:	eba5 0509 	sub.w	r5, r5, r9
 80102ea:	6026      	str	r6, [r4, #0]
 80102ec:	60a5      	str	r5, [r4, #8]
 80102ee:	463e      	mov	r6, r7
 80102f0:	42be      	cmp	r6, r7
 80102f2:	d900      	bls.n	80102f6 <__ssputs_r+0x72>
 80102f4:	463e      	mov	r6, r7
 80102f6:	6820      	ldr	r0, [r4, #0]
 80102f8:	4632      	mov	r2, r6
 80102fa:	4641      	mov	r1, r8
 80102fc:	f000 fd28 	bl	8010d50 <memmove>
 8010300:	68a3      	ldr	r3, [r4, #8]
 8010302:	1b9b      	subs	r3, r3, r6
 8010304:	60a3      	str	r3, [r4, #8]
 8010306:	6823      	ldr	r3, [r4, #0]
 8010308:	4433      	add	r3, r6
 801030a:	6023      	str	r3, [r4, #0]
 801030c:	2000      	movs	r0, #0
 801030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010312:	462a      	mov	r2, r5
 8010314:	f000 fd44 	bl	8010da0 <_realloc_r>
 8010318:	4606      	mov	r6, r0
 801031a:	2800      	cmp	r0, #0
 801031c:	d1e0      	bne.n	80102e0 <__ssputs_r+0x5c>
 801031e:	6921      	ldr	r1, [r4, #16]
 8010320:	4650      	mov	r0, sl
 8010322:	f7ff ff65 	bl	80101f0 <_free_r>
 8010326:	230c      	movs	r3, #12
 8010328:	f8ca 3000 	str.w	r3, [sl]
 801032c:	89a3      	ldrh	r3, [r4, #12]
 801032e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010332:	81a3      	strh	r3, [r4, #12]
 8010334:	f04f 30ff 	mov.w	r0, #4294967295
 8010338:	e7e9      	b.n	801030e <__ssputs_r+0x8a>
	...

0801033c <_svfiprintf_r>:
 801033c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010340:	4698      	mov	r8, r3
 8010342:	898b      	ldrh	r3, [r1, #12]
 8010344:	061b      	lsls	r3, r3, #24
 8010346:	b09d      	sub	sp, #116	@ 0x74
 8010348:	4607      	mov	r7, r0
 801034a:	460d      	mov	r5, r1
 801034c:	4614      	mov	r4, r2
 801034e:	d510      	bpl.n	8010372 <_svfiprintf_r+0x36>
 8010350:	690b      	ldr	r3, [r1, #16]
 8010352:	b973      	cbnz	r3, 8010372 <_svfiprintf_r+0x36>
 8010354:	2140      	movs	r1, #64	@ 0x40
 8010356:	f7ff fce5 	bl	800fd24 <_malloc_r>
 801035a:	6028      	str	r0, [r5, #0]
 801035c:	6128      	str	r0, [r5, #16]
 801035e:	b930      	cbnz	r0, 801036e <_svfiprintf_r+0x32>
 8010360:	230c      	movs	r3, #12
 8010362:	603b      	str	r3, [r7, #0]
 8010364:	f04f 30ff 	mov.w	r0, #4294967295
 8010368:	b01d      	add	sp, #116	@ 0x74
 801036a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801036e:	2340      	movs	r3, #64	@ 0x40
 8010370:	616b      	str	r3, [r5, #20]
 8010372:	2300      	movs	r3, #0
 8010374:	9309      	str	r3, [sp, #36]	@ 0x24
 8010376:	2320      	movs	r3, #32
 8010378:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801037c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010380:	2330      	movs	r3, #48	@ 0x30
 8010382:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010520 <_svfiprintf_r+0x1e4>
 8010386:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801038a:	f04f 0901 	mov.w	r9, #1
 801038e:	4623      	mov	r3, r4
 8010390:	469a      	mov	sl, r3
 8010392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010396:	b10a      	cbz	r2, 801039c <_svfiprintf_r+0x60>
 8010398:	2a25      	cmp	r2, #37	@ 0x25
 801039a:	d1f9      	bne.n	8010390 <_svfiprintf_r+0x54>
 801039c:	ebba 0b04 	subs.w	fp, sl, r4
 80103a0:	d00b      	beq.n	80103ba <_svfiprintf_r+0x7e>
 80103a2:	465b      	mov	r3, fp
 80103a4:	4622      	mov	r2, r4
 80103a6:	4629      	mov	r1, r5
 80103a8:	4638      	mov	r0, r7
 80103aa:	f7ff ff6b 	bl	8010284 <__ssputs_r>
 80103ae:	3001      	adds	r0, #1
 80103b0:	f000 80a7 	beq.w	8010502 <_svfiprintf_r+0x1c6>
 80103b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80103b6:	445a      	add	r2, fp
 80103b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80103ba:	f89a 3000 	ldrb.w	r3, [sl]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	f000 809f 	beq.w	8010502 <_svfiprintf_r+0x1c6>
 80103c4:	2300      	movs	r3, #0
 80103c6:	f04f 32ff 	mov.w	r2, #4294967295
 80103ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103ce:	f10a 0a01 	add.w	sl, sl, #1
 80103d2:	9304      	str	r3, [sp, #16]
 80103d4:	9307      	str	r3, [sp, #28]
 80103d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80103da:	931a      	str	r3, [sp, #104]	@ 0x68
 80103dc:	4654      	mov	r4, sl
 80103de:	2205      	movs	r2, #5
 80103e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103e4:	484e      	ldr	r0, [pc, #312]	@ (8010520 <_svfiprintf_r+0x1e4>)
 80103e6:	f7ef fefb 	bl	80001e0 <memchr>
 80103ea:	9a04      	ldr	r2, [sp, #16]
 80103ec:	b9d8      	cbnz	r0, 8010426 <_svfiprintf_r+0xea>
 80103ee:	06d0      	lsls	r0, r2, #27
 80103f0:	bf44      	itt	mi
 80103f2:	2320      	movmi	r3, #32
 80103f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80103f8:	0711      	lsls	r1, r2, #28
 80103fa:	bf44      	itt	mi
 80103fc:	232b      	movmi	r3, #43	@ 0x2b
 80103fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010402:	f89a 3000 	ldrb.w	r3, [sl]
 8010406:	2b2a      	cmp	r3, #42	@ 0x2a
 8010408:	d015      	beq.n	8010436 <_svfiprintf_r+0xfa>
 801040a:	9a07      	ldr	r2, [sp, #28]
 801040c:	4654      	mov	r4, sl
 801040e:	2000      	movs	r0, #0
 8010410:	f04f 0c0a 	mov.w	ip, #10
 8010414:	4621      	mov	r1, r4
 8010416:	f811 3b01 	ldrb.w	r3, [r1], #1
 801041a:	3b30      	subs	r3, #48	@ 0x30
 801041c:	2b09      	cmp	r3, #9
 801041e:	d94b      	bls.n	80104b8 <_svfiprintf_r+0x17c>
 8010420:	b1b0      	cbz	r0, 8010450 <_svfiprintf_r+0x114>
 8010422:	9207      	str	r2, [sp, #28]
 8010424:	e014      	b.n	8010450 <_svfiprintf_r+0x114>
 8010426:	eba0 0308 	sub.w	r3, r0, r8
 801042a:	fa09 f303 	lsl.w	r3, r9, r3
 801042e:	4313      	orrs	r3, r2
 8010430:	9304      	str	r3, [sp, #16]
 8010432:	46a2      	mov	sl, r4
 8010434:	e7d2      	b.n	80103dc <_svfiprintf_r+0xa0>
 8010436:	9b03      	ldr	r3, [sp, #12]
 8010438:	1d19      	adds	r1, r3, #4
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	9103      	str	r1, [sp, #12]
 801043e:	2b00      	cmp	r3, #0
 8010440:	bfbb      	ittet	lt
 8010442:	425b      	neglt	r3, r3
 8010444:	f042 0202 	orrlt.w	r2, r2, #2
 8010448:	9307      	strge	r3, [sp, #28]
 801044a:	9307      	strlt	r3, [sp, #28]
 801044c:	bfb8      	it	lt
 801044e:	9204      	strlt	r2, [sp, #16]
 8010450:	7823      	ldrb	r3, [r4, #0]
 8010452:	2b2e      	cmp	r3, #46	@ 0x2e
 8010454:	d10a      	bne.n	801046c <_svfiprintf_r+0x130>
 8010456:	7863      	ldrb	r3, [r4, #1]
 8010458:	2b2a      	cmp	r3, #42	@ 0x2a
 801045a:	d132      	bne.n	80104c2 <_svfiprintf_r+0x186>
 801045c:	9b03      	ldr	r3, [sp, #12]
 801045e:	1d1a      	adds	r2, r3, #4
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	9203      	str	r2, [sp, #12]
 8010464:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010468:	3402      	adds	r4, #2
 801046a:	9305      	str	r3, [sp, #20]
 801046c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010530 <_svfiprintf_r+0x1f4>
 8010470:	7821      	ldrb	r1, [r4, #0]
 8010472:	2203      	movs	r2, #3
 8010474:	4650      	mov	r0, sl
 8010476:	f7ef feb3 	bl	80001e0 <memchr>
 801047a:	b138      	cbz	r0, 801048c <_svfiprintf_r+0x150>
 801047c:	9b04      	ldr	r3, [sp, #16]
 801047e:	eba0 000a 	sub.w	r0, r0, sl
 8010482:	2240      	movs	r2, #64	@ 0x40
 8010484:	4082      	lsls	r2, r0
 8010486:	4313      	orrs	r3, r2
 8010488:	3401      	adds	r4, #1
 801048a:	9304      	str	r3, [sp, #16]
 801048c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010490:	4824      	ldr	r0, [pc, #144]	@ (8010524 <_svfiprintf_r+0x1e8>)
 8010492:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010496:	2206      	movs	r2, #6
 8010498:	f7ef fea2 	bl	80001e0 <memchr>
 801049c:	2800      	cmp	r0, #0
 801049e:	d036      	beq.n	801050e <_svfiprintf_r+0x1d2>
 80104a0:	4b21      	ldr	r3, [pc, #132]	@ (8010528 <_svfiprintf_r+0x1ec>)
 80104a2:	bb1b      	cbnz	r3, 80104ec <_svfiprintf_r+0x1b0>
 80104a4:	9b03      	ldr	r3, [sp, #12]
 80104a6:	3307      	adds	r3, #7
 80104a8:	f023 0307 	bic.w	r3, r3, #7
 80104ac:	3308      	adds	r3, #8
 80104ae:	9303      	str	r3, [sp, #12]
 80104b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104b2:	4433      	add	r3, r6
 80104b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80104b6:	e76a      	b.n	801038e <_svfiprintf_r+0x52>
 80104b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80104bc:	460c      	mov	r4, r1
 80104be:	2001      	movs	r0, #1
 80104c0:	e7a8      	b.n	8010414 <_svfiprintf_r+0xd8>
 80104c2:	2300      	movs	r3, #0
 80104c4:	3401      	adds	r4, #1
 80104c6:	9305      	str	r3, [sp, #20]
 80104c8:	4619      	mov	r1, r3
 80104ca:	f04f 0c0a 	mov.w	ip, #10
 80104ce:	4620      	mov	r0, r4
 80104d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104d4:	3a30      	subs	r2, #48	@ 0x30
 80104d6:	2a09      	cmp	r2, #9
 80104d8:	d903      	bls.n	80104e2 <_svfiprintf_r+0x1a6>
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d0c6      	beq.n	801046c <_svfiprintf_r+0x130>
 80104de:	9105      	str	r1, [sp, #20]
 80104e0:	e7c4      	b.n	801046c <_svfiprintf_r+0x130>
 80104e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80104e6:	4604      	mov	r4, r0
 80104e8:	2301      	movs	r3, #1
 80104ea:	e7f0      	b.n	80104ce <_svfiprintf_r+0x192>
 80104ec:	ab03      	add	r3, sp, #12
 80104ee:	9300      	str	r3, [sp, #0]
 80104f0:	462a      	mov	r2, r5
 80104f2:	4b0e      	ldr	r3, [pc, #56]	@ (801052c <_svfiprintf_r+0x1f0>)
 80104f4:	a904      	add	r1, sp, #16
 80104f6:	4638      	mov	r0, r7
 80104f8:	f3af 8000 	nop.w
 80104fc:	1c42      	adds	r2, r0, #1
 80104fe:	4606      	mov	r6, r0
 8010500:	d1d6      	bne.n	80104b0 <_svfiprintf_r+0x174>
 8010502:	89ab      	ldrh	r3, [r5, #12]
 8010504:	065b      	lsls	r3, r3, #25
 8010506:	f53f af2d 	bmi.w	8010364 <_svfiprintf_r+0x28>
 801050a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801050c:	e72c      	b.n	8010368 <_svfiprintf_r+0x2c>
 801050e:	ab03      	add	r3, sp, #12
 8010510:	9300      	str	r3, [sp, #0]
 8010512:	462a      	mov	r2, r5
 8010514:	4b05      	ldr	r3, [pc, #20]	@ (801052c <_svfiprintf_r+0x1f0>)
 8010516:	a904      	add	r1, sp, #16
 8010518:	4638      	mov	r0, r7
 801051a:	f000 f9bb 	bl	8010894 <_printf_i>
 801051e:	e7ed      	b.n	80104fc <_svfiprintf_r+0x1c0>
 8010520:	08012304 	.word	0x08012304
 8010524:	0801230e 	.word	0x0801230e
 8010528:	00000000 	.word	0x00000000
 801052c:	08010285 	.word	0x08010285
 8010530:	0801230a 	.word	0x0801230a

08010534 <__sfputc_r>:
 8010534:	6893      	ldr	r3, [r2, #8]
 8010536:	3b01      	subs	r3, #1
 8010538:	2b00      	cmp	r3, #0
 801053a:	b410      	push	{r4}
 801053c:	6093      	str	r3, [r2, #8]
 801053e:	da08      	bge.n	8010552 <__sfputc_r+0x1e>
 8010540:	6994      	ldr	r4, [r2, #24]
 8010542:	42a3      	cmp	r3, r4
 8010544:	db01      	blt.n	801054a <__sfputc_r+0x16>
 8010546:	290a      	cmp	r1, #10
 8010548:	d103      	bne.n	8010552 <__sfputc_r+0x1e>
 801054a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801054e:	f000 bb6b 	b.w	8010c28 <__swbuf_r>
 8010552:	6813      	ldr	r3, [r2, #0]
 8010554:	1c58      	adds	r0, r3, #1
 8010556:	6010      	str	r0, [r2, #0]
 8010558:	7019      	strb	r1, [r3, #0]
 801055a:	4608      	mov	r0, r1
 801055c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010560:	4770      	bx	lr

08010562 <__sfputs_r>:
 8010562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010564:	4606      	mov	r6, r0
 8010566:	460f      	mov	r7, r1
 8010568:	4614      	mov	r4, r2
 801056a:	18d5      	adds	r5, r2, r3
 801056c:	42ac      	cmp	r4, r5
 801056e:	d101      	bne.n	8010574 <__sfputs_r+0x12>
 8010570:	2000      	movs	r0, #0
 8010572:	e007      	b.n	8010584 <__sfputs_r+0x22>
 8010574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010578:	463a      	mov	r2, r7
 801057a:	4630      	mov	r0, r6
 801057c:	f7ff ffda 	bl	8010534 <__sfputc_r>
 8010580:	1c43      	adds	r3, r0, #1
 8010582:	d1f3      	bne.n	801056c <__sfputs_r+0xa>
 8010584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010588 <_vfiprintf_r>:
 8010588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801058c:	460d      	mov	r5, r1
 801058e:	b09d      	sub	sp, #116	@ 0x74
 8010590:	4614      	mov	r4, r2
 8010592:	4698      	mov	r8, r3
 8010594:	4606      	mov	r6, r0
 8010596:	b118      	cbz	r0, 80105a0 <_vfiprintf_r+0x18>
 8010598:	6a03      	ldr	r3, [r0, #32]
 801059a:	b90b      	cbnz	r3, 80105a0 <_vfiprintf_r+0x18>
 801059c:	f7ff fcda 	bl	800ff54 <__sinit>
 80105a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105a2:	07d9      	lsls	r1, r3, #31
 80105a4:	d405      	bmi.n	80105b2 <_vfiprintf_r+0x2a>
 80105a6:	89ab      	ldrh	r3, [r5, #12]
 80105a8:	059a      	lsls	r2, r3, #22
 80105aa:	d402      	bmi.n	80105b2 <_vfiprintf_r+0x2a>
 80105ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80105ae:	f7ff fe1c 	bl	80101ea <__retarget_lock_acquire_recursive>
 80105b2:	89ab      	ldrh	r3, [r5, #12]
 80105b4:	071b      	lsls	r3, r3, #28
 80105b6:	d501      	bpl.n	80105bc <_vfiprintf_r+0x34>
 80105b8:	692b      	ldr	r3, [r5, #16]
 80105ba:	b99b      	cbnz	r3, 80105e4 <_vfiprintf_r+0x5c>
 80105bc:	4629      	mov	r1, r5
 80105be:	4630      	mov	r0, r6
 80105c0:	f000 fb70 	bl	8010ca4 <__swsetup_r>
 80105c4:	b170      	cbz	r0, 80105e4 <_vfiprintf_r+0x5c>
 80105c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105c8:	07dc      	lsls	r4, r3, #31
 80105ca:	d504      	bpl.n	80105d6 <_vfiprintf_r+0x4e>
 80105cc:	f04f 30ff 	mov.w	r0, #4294967295
 80105d0:	b01d      	add	sp, #116	@ 0x74
 80105d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105d6:	89ab      	ldrh	r3, [r5, #12]
 80105d8:	0598      	lsls	r0, r3, #22
 80105da:	d4f7      	bmi.n	80105cc <_vfiprintf_r+0x44>
 80105dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80105de:	f7ff fe05 	bl	80101ec <__retarget_lock_release_recursive>
 80105e2:	e7f3      	b.n	80105cc <_vfiprintf_r+0x44>
 80105e4:	2300      	movs	r3, #0
 80105e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80105e8:	2320      	movs	r3, #32
 80105ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80105ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80105f2:	2330      	movs	r3, #48	@ 0x30
 80105f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80107a4 <_vfiprintf_r+0x21c>
 80105f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80105fc:	f04f 0901 	mov.w	r9, #1
 8010600:	4623      	mov	r3, r4
 8010602:	469a      	mov	sl, r3
 8010604:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010608:	b10a      	cbz	r2, 801060e <_vfiprintf_r+0x86>
 801060a:	2a25      	cmp	r2, #37	@ 0x25
 801060c:	d1f9      	bne.n	8010602 <_vfiprintf_r+0x7a>
 801060e:	ebba 0b04 	subs.w	fp, sl, r4
 8010612:	d00b      	beq.n	801062c <_vfiprintf_r+0xa4>
 8010614:	465b      	mov	r3, fp
 8010616:	4622      	mov	r2, r4
 8010618:	4629      	mov	r1, r5
 801061a:	4630      	mov	r0, r6
 801061c:	f7ff ffa1 	bl	8010562 <__sfputs_r>
 8010620:	3001      	adds	r0, #1
 8010622:	f000 80a7 	beq.w	8010774 <_vfiprintf_r+0x1ec>
 8010626:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010628:	445a      	add	r2, fp
 801062a:	9209      	str	r2, [sp, #36]	@ 0x24
 801062c:	f89a 3000 	ldrb.w	r3, [sl]
 8010630:	2b00      	cmp	r3, #0
 8010632:	f000 809f 	beq.w	8010774 <_vfiprintf_r+0x1ec>
 8010636:	2300      	movs	r3, #0
 8010638:	f04f 32ff 	mov.w	r2, #4294967295
 801063c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010640:	f10a 0a01 	add.w	sl, sl, #1
 8010644:	9304      	str	r3, [sp, #16]
 8010646:	9307      	str	r3, [sp, #28]
 8010648:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801064c:	931a      	str	r3, [sp, #104]	@ 0x68
 801064e:	4654      	mov	r4, sl
 8010650:	2205      	movs	r2, #5
 8010652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010656:	4853      	ldr	r0, [pc, #332]	@ (80107a4 <_vfiprintf_r+0x21c>)
 8010658:	f7ef fdc2 	bl	80001e0 <memchr>
 801065c:	9a04      	ldr	r2, [sp, #16]
 801065e:	b9d8      	cbnz	r0, 8010698 <_vfiprintf_r+0x110>
 8010660:	06d1      	lsls	r1, r2, #27
 8010662:	bf44      	itt	mi
 8010664:	2320      	movmi	r3, #32
 8010666:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801066a:	0713      	lsls	r3, r2, #28
 801066c:	bf44      	itt	mi
 801066e:	232b      	movmi	r3, #43	@ 0x2b
 8010670:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010674:	f89a 3000 	ldrb.w	r3, [sl]
 8010678:	2b2a      	cmp	r3, #42	@ 0x2a
 801067a:	d015      	beq.n	80106a8 <_vfiprintf_r+0x120>
 801067c:	9a07      	ldr	r2, [sp, #28]
 801067e:	4654      	mov	r4, sl
 8010680:	2000      	movs	r0, #0
 8010682:	f04f 0c0a 	mov.w	ip, #10
 8010686:	4621      	mov	r1, r4
 8010688:	f811 3b01 	ldrb.w	r3, [r1], #1
 801068c:	3b30      	subs	r3, #48	@ 0x30
 801068e:	2b09      	cmp	r3, #9
 8010690:	d94b      	bls.n	801072a <_vfiprintf_r+0x1a2>
 8010692:	b1b0      	cbz	r0, 80106c2 <_vfiprintf_r+0x13a>
 8010694:	9207      	str	r2, [sp, #28]
 8010696:	e014      	b.n	80106c2 <_vfiprintf_r+0x13a>
 8010698:	eba0 0308 	sub.w	r3, r0, r8
 801069c:	fa09 f303 	lsl.w	r3, r9, r3
 80106a0:	4313      	orrs	r3, r2
 80106a2:	9304      	str	r3, [sp, #16]
 80106a4:	46a2      	mov	sl, r4
 80106a6:	e7d2      	b.n	801064e <_vfiprintf_r+0xc6>
 80106a8:	9b03      	ldr	r3, [sp, #12]
 80106aa:	1d19      	adds	r1, r3, #4
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	9103      	str	r1, [sp, #12]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	bfbb      	ittet	lt
 80106b4:	425b      	neglt	r3, r3
 80106b6:	f042 0202 	orrlt.w	r2, r2, #2
 80106ba:	9307      	strge	r3, [sp, #28]
 80106bc:	9307      	strlt	r3, [sp, #28]
 80106be:	bfb8      	it	lt
 80106c0:	9204      	strlt	r2, [sp, #16]
 80106c2:	7823      	ldrb	r3, [r4, #0]
 80106c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80106c6:	d10a      	bne.n	80106de <_vfiprintf_r+0x156>
 80106c8:	7863      	ldrb	r3, [r4, #1]
 80106ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80106cc:	d132      	bne.n	8010734 <_vfiprintf_r+0x1ac>
 80106ce:	9b03      	ldr	r3, [sp, #12]
 80106d0:	1d1a      	adds	r2, r3, #4
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	9203      	str	r2, [sp, #12]
 80106d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80106da:	3402      	adds	r4, #2
 80106dc:	9305      	str	r3, [sp, #20]
 80106de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80107b4 <_vfiprintf_r+0x22c>
 80106e2:	7821      	ldrb	r1, [r4, #0]
 80106e4:	2203      	movs	r2, #3
 80106e6:	4650      	mov	r0, sl
 80106e8:	f7ef fd7a 	bl	80001e0 <memchr>
 80106ec:	b138      	cbz	r0, 80106fe <_vfiprintf_r+0x176>
 80106ee:	9b04      	ldr	r3, [sp, #16]
 80106f0:	eba0 000a 	sub.w	r0, r0, sl
 80106f4:	2240      	movs	r2, #64	@ 0x40
 80106f6:	4082      	lsls	r2, r0
 80106f8:	4313      	orrs	r3, r2
 80106fa:	3401      	adds	r4, #1
 80106fc:	9304      	str	r3, [sp, #16]
 80106fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010702:	4829      	ldr	r0, [pc, #164]	@ (80107a8 <_vfiprintf_r+0x220>)
 8010704:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010708:	2206      	movs	r2, #6
 801070a:	f7ef fd69 	bl	80001e0 <memchr>
 801070e:	2800      	cmp	r0, #0
 8010710:	d03f      	beq.n	8010792 <_vfiprintf_r+0x20a>
 8010712:	4b26      	ldr	r3, [pc, #152]	@ (80107ac <_vfiprintf_r+0x224>)
 8010714:	bb1b      	cbnz	r3, 801075e <_vfiprintf_r+0x1d6>
 8010716:	9b03      	ldr	r3, [sp, #12]
 8010718:	3307      	adds	r3, #7
 801071a:	f023 0307 	bic.w	r3, r3, #7
 801071e:	3308      	adds	r3, #8
 8010720:	9303      	str	r3, [sp, #12]
 8010722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010724:	443b      	add	r3, r7
 8010726:	9309      	str	r3, [sp, #36]	@ 0x24
 8010728:	e76a      	b.n	8010600 <_vfiprintf_r+0x78>
 801072a:	fb0c 3202 	mla	r2, ip, r2, r3
 801072e:	460c      	mov	r4, r1
 8010730:	2001      	movs	r0, #1
 8010732:	e7a8      	b.n	8010686 <_vfiprintf_r+0xfe>
 8010734:	2300      	movs	r3, #0
 8010736:	3401      	adds	r4, #1
 8010738:	9305      	str	r3, [sp, #20]
 801073a:	4619      	mov	r1, r3
 801073c:	f04f 0c0a 	mov.w	ip, #10
 8010740:	4620      	mov	r0, r4
 8010742:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010746:	3a30      	subs	r2, #48	@ 0x30
 8010748:	2a09      	cmp	r2, #9
 801074a:	d903      	bls.n	8010754 <_vfiprintf_r+0x1cc>
 801074c:	2b00      	cmp	r3, #0
 801074e:	d0c6      	beq.n	80106de <_vfiprintf_r+0x156>
 8010750:	9105      	str	r1, [sp, #20]
 8010752:	e7c4      	b.n	80106de <_vfiprintf_r+0x156>
 8010754:	fb0c 2101 	mla	r1, ip, r1, r2
 8010758:	4604      	mov	r4, r0
 801075a:	2301      	movs	r3, #1
 801075c:	e7f0      	b.n	8010740 <_vfiprintf_r+0x1b8>
 801075e:	ab03      	add	r3, sp, #12
 8010760:	9300      	str	r3, [sp, #0]
 8010762:	462a      	mov	r2, r5
 8010764:	4b12      	ldr	r3, [pc, #72]	@ (80107b0 <_vfiprintf_r+0x228>)
 8010766:	a904      	add	r1, sp, #16
 8010768:	4630      	mov	r0, r6
 801076a:	f3af 8000 	nop.w
 801076e:	4607      	mov	r7, r0
 8010770:	1c78      	adds	r0, r7, #1
 8010772:	d1d6      	bne.n	8010722 <_vfiprintf_r+0x19a>
 8010774:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010776:	07d9      	lsls	r1, r3, #31
 8010778:	d405      	bmi.n	8010786 <_vfiprintf_r+0x1fe>
 801077a:	89ab      	ldrh	r3, [r5, #12]
 801077c:	059a      	lsls	r2, r3, #22
 801077e:	d402      	bmi.n	8010786 <_vfiprintf_r+0x1fe>
 8010780:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010782:	f7ff fd33 	bl	80101ec <__retarget_lock_release_recursive>
 8010786:	89ab      	ldrh	r3, [r5, #12]
 8010788:	065b      	lsls	r3, r3, #25
 801078a:	f53f af1f 	bmi.w	80105cc <_vfiprintf_r+0x44>
 801078e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010790:	e71e      	b.n	80105d0 <_vfiprintf_r+0x48>
 8010792:	ab03      	add	r3, sp, #12
 8010794:	9300      	str	r3, [sp, #0]
 8010796:	462a      	mov	r2, r5
 8010798:	4b05      	ldr	r3, [pc, #20]	@ (80107b0 <_vfiprintf_r+0x228>)
 801079a:	a904      	add	r1, sp, #16
 801079c:	4630      	mov	r0, r6
 801079e:	f000 f879 	bl	8010894 <_printf_i>
 80107a2:	e7e4      	b.n	801076e <_vfiprintf_r+0x1e6>
 80107a4:	08012304 	.word	0x08012304
 80107a8:	0801230e 	.word	0x0801230e
 80107ac:	00000000 	.word	0x00000000
 80107b0:	08010563 	.word	0x08010563
 80107b4:	0801230a 	.word	0x0801230a

080107b8 <_printf_common>:
 80107b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107bc:	4616      	mov	r6, r2
 80107be:	4698      	mov	r8, r3
 80107c0:	688a      	ldr	r2, [r1, #8]
 80107c2:	690b      	ldr	r3, [r1, #16]
 80107c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80107c8:	4293      	cmp	r3, r2
 80107ca:	bfb8      	it	lt
 80107cc:	4613      	movlt	r3, r2
 80107ce:	6033      	str	r3, [r6, #0]
 80107d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80107d4:	4607      	mov	r7, r0
 80107d6:	460c      	mov	r4, r1
 80107d8:	b10a      	cbz	r2, 80107de <_printf_common+0x26>
 80107da:	3301      	adds	r3, #1
 80107dc:	6033      	str	r3, [r6, #0]
 80107de:	6823      	ldr	r3, [r4, #0]
 80107e0:	0699      	lsls	r1, r3, #26
 80107e2:	bf42      	ittt	mi
 80107e4:	6833      	ldrmi	r3, [r6, #0]
 80107e6:	3302      	addmi	r3, #2
 80107e8:	6033      	strmi	r3, [r6, #0]
 80107ea:	6825      	ldr	r5, [r4, #0]
 80107ec:	f015 0506 	ands.w	r5, r5, #6
 80107f0:	d106      	bne.n	8010800 <_printf_common+0x48>
 80107f2:	f104 0a19 	add.w	sl, r4, #25
 80107f6:	68e3      	ldr	r3, [r4, #12]
 80107f8:	6832      	ldr	r2, [r6, #0]
 80107fa:	1a9b      	subs	r3, r3, r2
 80107fc:	42ab      	cmp	r3, r5
 80107fe:	dc26      	bgt.n	801084e <_printf_common+0x96>
 8010800:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010804:	6822      	ldr	r2, [r4, #0]
 8010806:	3b00      	subs	r3, #0
 8010808:	bf18      	it	ne
 801080a:	2301      	movne	r3, #1
 801080c:	0692      	lsls	r2, r2, #26
 801080e:	d42b      	bmi.n	8010868 <_printf_common+0xb0>
 8010810:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010814:	4641      	mov	r1, r8
 8010816:	4638      	mov	r0, r7
 8010818:	47c8      	blx	r9
 801081a:	3001      	adds	r0, #1
 801081c:	d01e      	beq.n	801085c <_printf_common+0xa4>
 801081e:	6823      	ldr	r3, [r4, #0]
 8010820:	6922      	ldr	r2, [r4, #16]
 8010822:	f003 0306 	and.w	r3, r3, #6
 8010826:	2b04      	cmp	r3, #4
 8010828:	bf02      	ittt	eq
 801082a:	68e5      	ldreq	r5, [r4, #12]
 801082c:	6833      	ldreq	r3, [r6, #0]
 801082e:	1aed      	subeq	r5, r5, r3
 8010830:	68a3      	ldr	r3, [r4, #8]
 8010832:	bf0c      	ite	eq
 8010834:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010838:	2500      	movne	r5, #0
 801083a:	4293      	cmp	r3, r2
 801083c:	bfc4      	itt	gt
 801083e:	1a9b      	subgt	r3, r3, r2
 8010840:	18ed      	addgt	r5, r5, r3
 8010842:	2600      	movs	r6, #0
 8010844:	341a      	adds	r4, #26
 8010846:	42b5      	cmp	r5, r6
 8010848:	d11a      	bne.n	8010880 <_printf_common+0xc8>
 801084a:	2000      	movs	r0, #0
 801084c:	e008      	b.n	8010860 <_printf_common+0xa8>
 801084e:	2301      	movs	r3, #1
 8010850:	4652      	mov	r2, sl
 8010852:	4641      	mov	r1, r8
 8010854:	4638      	mov	r0, r7
 8010856:	47c8      	blx	r9
 8010858:	3001      	adds	r0, #1
 801085a:	d103      	bne.n	8010864 <_printf_common+0xac>
 801085c:	f04f 30ff 	mov.w	r0, #4294967295
 8010860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010864:	3501      	adds	r5, #1
 8010866:	e7c6      	b.n	80107f6 <_printf_common+0x3e>
 8010868:	18e1      	adds	r1, r4, r3
 801086a:	1c5a      	adds	r2, r3, #1
 801086c:	2030      	movs	r0, #48	@ 0x30
 801086e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010872:	4422      	add	r2, r4
 8010874:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010878:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801087c:	3302      	adds	r3, #2
 801087e:	e7c7      	b.n	8010810 <_printf_common+0x58>
 8010880:	2301      	movs	r3, #1
 8010882:	4622      	mov	r2, r4
 8010884:	4641      	mov	r1, r8
 8010886:	4638      	mov	r0, r7
 8010888:	47c8      	blx	r9
 801088a:	3001      	adds	r0, #1
 801088c:	d0e6      	beq.n	801085c <_printf_common+0xa4>
 801088e:	3601      	adds	r6, #1
 8010890:	e7d9      	b.n	8010846 <_printf_common+0x8e>
	...

08010894 <_printf_i>:
 8010894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010898:	7e0f      	ldrb	r7, [r1, #24]
 801089a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801089c:	2f78      	cmp	r7, #120	@ 0x78
 801089e:	4691      	mov	r9, r2
 80108a0:	4680      	mov	r8, r0
 80108a2:	460c      	mov	r4, r1
 80108a4:	469a      	mov	sl, r3
 80108a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80108aa:	d807      	bhi.n	80108bc <_printf_i+0x28>
 80108ac:	2f62      	cmp	r7, #98	@ 0x62
 80108ae:	d80a      	bhi.n	80108c6 <_printf_i+0x32>
 80108b0:	2f00      	cmp	r7, #0
 80108b2:	f000 80d1 	beq.w	8010a58 <_printf_i+0x1c4>
 80108b6:	2f58      	cmp	r7, #88	@ 0x58
 80108b8:	f000 80b8 	beq.w	8010a2c <_printf_i+0x198>
 80108bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80108c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80108c4:	e03a      	b.n	801093c <_printf_i+0xa8>
 80108c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80108ca:	2b15      	cmp	r3, #21
 80108cc:	d8f6      	bhi.n	80108bc <_printf_i+0x28>
 80108ce:	a101      	add	r1, pc, #4	@ (adr r1, 80108d4 <_printf_i+0x40>)
 80108d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80108d4:	0801092d 	.word	0x0801092d
 80108d8:	08010941 	.word	0x08010941
 80108dc:	080108bd 	.word	0x080108bd
 80108e0:	080108bd 	.word	0x080108bd
 80108e4:	080108bd 	.word	0x080108bd
 80108e8:	080108bd 	.word	0x080108bd
 80108ec:	08010941 	.word	0x08010941
 80108f0:	080108bd 	.word	0x080108bd
 80108f4:	080108bd 	.word	0x080108bd
 80108f8:	080108bd 	.word	0x080108bd
 80108fc:	080108bd 	.word	0x080108bd
 8010900:	08010a3f 	.word	0x08010a3f
 8010904:	0801096b 	.word	0x0801096b
 8010908:	080109f9 	.word	0x080109f9
 801090c:	080108bd 	.word	0x080108bd
 8010910:	080108bd 	.word	0x080108bd
 8010914:	08010a61 	.word	0x08010a61
 8010918:	080108bd 	.word	0x080108bd
 801091c:	0801096b 	.word	0x0801096b
 8010920:	080108bd 	.word	0x080108bd
 8010924:	080108bd 	.word	0x080108bd
 8010928:	08010a01 	.word	0x08010a01
 801092c:	6833      	ldr	r3, [r6, #0]
 801092e:	1d1a      	adds	r2, r3, #4
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	6032      	str	r2, [r6, #0]
 8010934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010938:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801093c:	2301      	movs	r3, #1
 801093e:	e09c      	b.n	8010a7a <_printf_i+0x1e6>
 8010940:	6833      	ldr	r3, [r6, #0]
 8010942:	6820      	ldr	r0, [r4, #0]
 8010944:	1d19      	adds	r1, r3, #4
 8010946:	6031      	str	r1, [r6, #0]
 8010948:	0606      	lsls	r6, r0, #24
 801094a:	d501      	bpl.n	8010950 <_printf_i+0xbc>
 801094c:	681d      	ldr	r5, [r3, #0]
 801094e:	e003      	b.n	8010958 <_printf_i+0xc4>
 8010950:	0645      	lsls	r5, r0, #25
 8010952:	d5fb      	bpl.n	801094c <_printf_i+0xb8>
 8010954:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010958:	2d00      	cmp	r5, #0
 801095a:	da03      	bge.n	8010964 <_printf_i+0xd0>
 801095c:	232d      	movs	r3, #45	@ 0x2d
 801095e:	426d      	negs	r5, r5
 8010960:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010964:	4858      	ldr	r0, [pc, #352]	@ (8010ac8 <_printf_i+0x234>)
 8010966:	230a      	movs	r3, #10
 8010968:	e011      	b.n	801098e <_printf_i+0xfa>
 801096a:	6821      	ldr	r1, [r4, #0]
 801096c:	6833      	ldr	r3, [r6, #0]
 801096e:	0608      	lsls	r0, r1, #24
 8010970:	f853 5b04 	ldr.w	r5, [r3], #4
 8010974:	d402      	bmi.n	801097c <_printf_i+0xe8>
 8010976:	0649      	lsls	r1, r1, #25
 8010978:	bf48      	it	mi
 801097a:	b2ad      	uxthmi	r5, r5
 801097c:	2f6f      	cmp	r7, #111	@ 0x6f
 801097e:	4852      	ldr	r0, [pc, #328]	@ (8010ac8 <_printf_i+0x234>)
 8010980:	6033      	str	r3, [r6, #0]
 8010982:	bf14      	ite	ne
 8010984:	230a      	movne	r3, #10
 8010986:	2308      	moveq	r3, #8
 8010988:	2100      	movs	r1, #0
 801098a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801098e:	6866      	ldr	r6, [r4, #4]
 8010990:	60a6      	str	r6, [r4, #8]
 8010992:	2e00      	cmp	r6, #0
 8010994:	db05      	blt.n	80109a2 <_printf_i+0x10e>
 8010996:	6821      	ldr	r1, [r4, #0]
 8010998:	432e      	orrs	r6, r5
 801099a:	f021 0104 	bic.w	r1, r1, #4
 801099e:	6021      	str	r1, [r4, #0]
 80109a0:	d04b      	beq.n	8010a3a <_printf_i+0x1a6>
 80109a2:	4616      	mov	r6, r2
 80109a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80109a8:	fb03 5711 	mls	r7, r3, r1, r5
 80109ac:	5dc7      	ldrb	r7, [r0, r7]
 80109ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80109b2:	462f      	mov	r7, r5
 80109b4:	42bb      	cmp	r3, r7
 80109b6:	460d      	mov	r5, r1
 80109b8:	d9f4      	bls.n	80109a4 <_printf_i+0x110>
 80109ba:	2b08      	cmp	r3, #8
 80109bc:	d10b      	bne.n	80109d6 <_printf_i+0x142>
 80109be:	6823      	ldr	r3, [r4, #0]
 80109c0:	07df      	lsls	r7, r3, #31
 80109c2:	d508      	bpl.n	80109d6 <_printf_i+0x142>
 80109c4:	6923      	ldr	r3, [r4, #16]
 80109c6:	6861      	ldr	r1, [r4, #4]
 80109c8:	4299      	cmp	r1, r3
 80109ca:	bfde      	ittt	le
 80109cc:	2330      	movle	r3, #48	@ 0x30
 80109ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80109d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80109d6:	1b92      	subs	r2, r2, r6
 80109d8:	6122      	str	r2, [r4, #16]
 80109da:	f8cd a000 	str.w	sl, [sp]
 80109de:	464b      	mov	r3, r9
 80109e0:	aa03      	add	r2, sp, #12
 80109e2:	4621      	mov	r1, r4
 80109e4:	4640      	mov	r0, r8
 80109e6:	f7ff fee7 	bl	80107b8 <_printf_common>
 80109ea:	3001      	adds	r0, #1
 80109ec:	d14a      	bne.n	8010a84 <_printf_i+0x1f0>
 80109ee:	f04f 30ff 	mov.w	r0, #4294967295
 80109f2:	b004      	add	sp, #16
 80109f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109f8:	6823      	ldr	r3, [r4, #0]
 80109fa:	f043 0320 	orr.w	r3, r3, #32
 80109fe:	6023      	str	r3, [r4, #0]
 8010a00:	4832      	ldr	r0, [pc, #200]	@ (8010acc <_printf_i+0x238>)
 8010a02:	2778      	movs	r7, #120	@ 0x78
 8010a04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010a08:	6823      	ldr	r3, [r4, #0]
 8010a0a:	6831      	ldr	r1, [r6, #0]
 8010a0c:	061f      	lsls	r7, r3, #24
 8010a0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8010a12:	d402      	bmi.n	8010a1a <_printf_i+0x186>
 8010a14:	065f      	lsls	r7, r3, #25
 8010a16:	bf48      	it	mi
 8010a18:	b2ad      	uxthmi	r5, r5
 8010a1a:	6031      	str	r1, [r6, #0]
 8010a1c:	07d9      	lsls	r1, r3, #31
 8010a1e:	bf44      	itt	mi
 8010a20:	f043 0320 	orrmi.w	r3, r3, #32
 8010a24:	6023      	strmi	r3, [r4, #0]
 8010a26:	b11d      	cbz	r5, 8010a30 <_printf_i+0x19c>
 8010a28:	2310      	movs	r3, #16
 8010a2a:	e7ad      	b.n	8010988 <_printf_i+0xf4>
 8010a2c:	4826      	ldr	r0, [pc, #152]	@ (8010ac8 <_printf_i+0x234>)
 8010a2e:	e7e9      	b.n	8010a04 <_printf_i+0x170>
 8010a30:	6823      	ldr	r3, [r4, #0]
 8010a32:	f023 0320 	bic.w	r3, r3, #32
 8010a36:	6023      	str	r3, [r4, #0]
 8010a38:	e7f6      	b.n	8010a28 <_printf_i+0x194>
 8010a3a:	4616      	mov	r6, r2
 8010a3c:	e7bd      	b.n	80109ba <_printf_i+0x126>
 8010a3e:	6833      	ldr	r3, [r6, #0]
 8010a40:	6825      	ldr	r5, [r4, #0]
 8010a42:	6961      	ldr	r1, [r4, #20]
 8010a44:	1d18      	adds	r0, r3, #4
 8010a46:	6030      	str	r0, [r6, #0]
 8010a48:	062e      	lsls	r6, r5, #24
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	d501      	bpl.n	8010a52 <_printf_i+0x1be>
 8010a4e:	6019      	str	r1, [r3, #0]
 8010a50:	e002      	b.n	8010a58 <_printf_i+0x1c4>
 8010a52:	0668      	lsls	r0, r5, #25
 8010a54:	d5fb      	bpl.n	8010a4e <_printf_i+0x1ba>
 8010a56:	8019      	strh	r1, [r3, #0]
 8010a58:	2300      	movs	r3, #0
 8010a5a:	6123      	str	r3, [r4, #16]
 8010a5c:	4616      	mov	r6, r2
 8010a5e:	e7bc      	b.n	80109da <_printf_i+0x146>
 8010a60:	6833      	ldr	r3, [r6, #0]
 8010a62:	1d1a      	adds	r2, r3, #4
 8010a64:	6032      	str	r2, [r6, #0]
 8010a66:	681e      	ldr	r6, [r3, #0]
 8010a68:	6862      	ldr	r2, [r4, #4]
 8010a6a:	2100      	movs	r1, #0
 8010a6c:	4630      	mov	r0, r6
 8010a6e:	f7ef fbb7 	bl	80001e0 <memchr>
 8010a72:	b108      	cbz	r0, 8010a78 <_printf_i+0x1e4>
 8010a74:	1b80      	subs	r0, r0, r6
 8010a76:	6060      	str	r0, [r4, #4]
 8010a78:	6863      	ldr	r3, [r4, #4]
 8010a7a:	6123      	str	r3, [r4, #16]
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010a82:	e7aa      	b.n	80109da <_printf_i+0x146>
 8010a84:	6923      	ldr	r3, [r4, #16]
 8010a86:	4632      	mov	r2, r6
 8010a88:	4649      	mov	r1, r9
 8010a8a:	4640      	mov	r0, r8
 8010a8c:	47d0      	blx	sl
 8010a8e:	3001      	adds	r0, #1
 8010a90:	d0ad      	beq.n	80109ee <_printf_i+0x15a>
 8010a92:	6823      	ldr	r3, [r4, #0]
 8010a94:	079b      	lsls	r3, r3, #30
 8010a96:	d413      	bmi.n	8010ac0 <_printf_i+0x22c>
 8010a98:	68e0      	ldr	r0, [r4, #12]
 8010a9a:	9b03      	ldr	r3, [sp, #12]
 8010a9c:	4298      	cmp	r0, r3
 8010a9e:	bfb8      	it	lt
 8010aa0:	4618      	movlt	r0, r3
 8010aa2:	e7a6      	b.n	80109f2 <_printf_i+0x15e>
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	4632      	mov	r2, r6
 8010aa8:	4649      	mov	r1, r9
 8010aaa:	4640      	mov	r0, r8
 8010aac:	47d0      	blx	sl
 8010aae:	3001      	adds	r0, #1
 8010ab0:	d09d      	beq.n	80109ee <_printf_i+0x15a>
 8010ab2:	3501      	adds	r5, #1
 8010ab4:	68e3      	ldr	r3, [r4, #12]
 8010ab6:	9903      	ldr	r1, [sp, #12]
 8010ab8:	1a5b      	subs	r3, r3, r1
 8010aba:	42ab      	cmp	r3, r5
 8010abc:	dcf2      	bgt.n	8010aa4 <_printf_i+0x210>
 8010abe:	e7eb      	b.n	8010a98 <_printf_i+0x204>
 8010ac0:	2500      	movs	r5, #0
 8010ac2:	f104 0619 	add.w	r6, r4, #25
 8010ac6:	e7f5      	b.n	8010ab4 <_printf_i+0x220>
 8010ac8:	08012315 	.word	0x08012315
 8010acc:	08012326 	.word	0x08012326

08010ad0 <__sflush_r>:
 8010ad0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ad8:	0716      	lsls	r6, r2, #28
 8010ada:	4605      	mov	r5, r0
 8010adc:	460c      	mov	r4, r1
 8010ade:	d454      	bmi.n	8010b8a <__sflush_r+0xba>
 8010ae0:	684b      	ldr	r3, [r1, #4]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	dc02      	bgt.n	8010aec <__sflush_r+0x1c>
 8010ae6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	dd48      	ble.n	8010b7e <__sflush_r+0xae>
 8010aec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010aee:	2e00      	cmp	r6, #0
 8010af0:	d045      	beq.n	8010b7e <__sflush_r+0xae>
 8010af2:	2300      	movs	r3, #0
 8010af4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010af8:	682f      	ldr	r7, [r5, #0]
 8010afa:	6a21      	ldr	r1, [r4, #32]
 8010afc:	602b      	str	r3, [r5, #0]
 8010afe:	d030      	beq.n	8010b62 <__sflush_r+0x92>
 8010b00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010b02:	89a3      	ldrh	r3, [r4, #12]
 8010b04:	0759      	lsls	r1, r3, #29
 8010b06:	d505      	bpl.n	8010b14 <__sflush_r+0x44>
 8010b08:	6863      	ldr	r3, [r4, #4]
 8010b0a:	1ad2      	subs	r2, r2, r3
 8010b0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010b0e:	b10b      	cbz	r3, 8010b14 <__sflush_r+0x44>
 8010b10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010b12:	1ad2      	subs	r2, r2, r3
 8010b14:	2300      	movs	r3, #0
 8010b16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b18:	6a21      	ldr	r1, [r4, #32]
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	47b0      	blx	r6
 8010b1e:	1c43      	adds	r3, r0, #1
 8010b20:	89a3      	ldrh	r3, [r4, #12]
 8010b22:	d106      	bne.n	8010b32 <__sflush_r+0x62>
 8010b24:	6829      	ldr	r1, [r5, #0]
 8010b26:	291d      	cmp	r1, #29
 8010b28:	d82b      	bhi.n	8010b82 <__sflush_r+0xb2>
 8010b2a:	4a2a      	ldr	r2, [pc, #168]	@ (8010bd4 <__sflush_r+0x104>)
 8010b2c:	40ca      	lsrs	r2, r1
 8010b2e:	07d6      	lsls	r6, r2, #31
 8010b30:	d527      	bpl.n	8010b82 <__sflush_r+0xb2>
 8010b32:	2200      	movs	r2, #0
 8010b34:	6062      	str	r2, [r4, #4]
 8010b36:	04d9      	lsls	r1, r3, #19
 8010b38:	6922      	ldr	r2, [r4, #16]
 8010b3a:	6022      	str	r2, [r4, #0]
 8010b3c:	d504      	bpl.n	8010b48 <__sflush_r+0x78>
 8010b3e:	1c42      	adds	r2, r0, #1
 8010b40:	d101      	bne.n	8010b46 <__sflush_r+0x76>
 8010b42:	682b      	ldr	r3, [r5, #0]
 8010b44:	b903      	cbnz	r3, 8010b48 <__sflush_r+0x78>
 8010b46:	6560      	str	r0, [r4, #84]	@ 0x54
 8010b48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010b4a:	602f      	str	r7, [r5, #0]
 8010b4c:	b1b9      	cbz	r1, 8010b7e <__sflush_r+0xae>
 8010b4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010b52:	4299      	cmp	r1, r3
 8010b54:	d002      	beq.n	8010b5c <__sflush_r+0x8c>
 8010b56:	4628      	mov	r0, r5
 8010b58:	f7ff fb4a 	bl	80101f0 <_free_r>
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010b60:	e00d      	b.n	8010b7e <__sflush_r+0xae>
 8010b62:	2301      	movs	r3, #1
 8010b64:	4628      	mov	r0, r5
 8010b66:	47b0      	blx	r6
 8010b68:	4602      	mov	r2, r0
 8010b6a:	1c50      	adds	r0, r2, #1
 8010b6c:	d1c9      	bne.n	8010b02 <__sflush_r+0x32>
 8010b6e:	682b      	ldr	r3, [r5, #0]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d0c6      	beq.n	8010b02 <__sflush_r+0x32>
 8010b74:	2b1d      	cmp	r3, #29
 8010b76:	d001      	beq.n	8010b7c <__sflush_r+0xac>
 8010b78:	2b16      	cmp	r3, #22
 8010b7a:	d11e      	bne.n	8010bba <__sflush_r+0xea>
 8010b7c:	602f      	str	r7, [r5, #0]
 8010b7e:	2000      	movs	r0, #0
 8010b80:	e022      	b.n	8010bc8 <__sflush_r+0xf8>
 8010b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b86:	b21b      	sxth	r3, r3
 8010b88:	e01b      	b.n	8010bc2 <__sflush_r+0xf2>
 8010b8a:	690f      	ldr	r7, [r1, #16]
 8010b8c:	2f00      	cmp	r7, #0
 8010b8e:	d0f6      	beq.n	8010b7e <__sflush_r+0xae>
 8010b90:	0793      	lsls	r3, r2, #30
 8010b92:	680e      	ldr	r6, [r1, #0]
 8010b94:	bf08      	it	eq
 8010b96:	694b      	ldreq	r3, [r1, #20]
 8010b98:	600f      	str	r7, [r1, #0]
 8010b9a:	bf18      	it	ne
 8010b9c:	2300      	movne	r3, #0
 8010b9e:	eba6 0807 	sub.w	r8, r6, r7
 8010ba2:	608b      	str	r3, [r1, #8]
 8010ba4:	f1b8 0f00 	cmp.w	r8, #0
 8010ba8:	dde9      	ble.n	8010b7e <__sflush_r+0xae>
 8010baa:	6a21      	ldr	r1, [r4, #32]
 8010bac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010bae:	4643      	mov	r3, r8
 8010bb0:	463a      	mov	r2, r7
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	47b0      	blx	r6
 8010bb6:	2800      	cmp	r0, #0
 8010bb8:	dc08      	bgt.n	8010bcc <__sflush_r+0xfc>
 8010bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010bc2:	81a3      	strh	r3, [r4, #12]
 8010bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8010bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bcc:	4407      	add	r7, r0
 8010bce:	eba8 0800 	sub.w	r8, r8, r0
 8010bd2:	e7e7      	b.n	8010ba4 <__sflush_r+0xd4>
 8010bd4:	20400001 	.word	0x20400001

08010bd8 <_fflush_r>:
 8010bd8:	b538      	push	{r3, r4, r5, lr}
 8010bda:	690b      	ldr	r3, [r1, #16]
 8010bdc:	4605      	mov	r5, r0
 8010bde:	460c      	mov	r4, r1
 8010be0:	b913      	cbnz	r3, 8010be8 <_fflush_r+0x10>
 8010be2:	2500      	movs	r5, #0
 8010be4:	4628      	mov	r0, r5
 8010be6:	bd38      	pop	{r3, r4, r5, pc}
 8010be8:	b118      	cbz	r0, 8010bf2 <_fflush_r+0x1a>
 8010bea:	6a03      	ldr	r3, [r0, #32]
 8010bec:	b90b      	cbnz	r3, 8010bf2 <_fflush_r+0x1a>
 8010bee:	f7ff f9b1 	bl	800ff54 <__sinit>
 8010bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d0f3      	beq.n	8010be2 <_fflush_r+0xa>
 8010bfa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010bfc:	07d0      	lsls	r0, r2, #31
 8010bfe:	d404      	bmi.n	8010c0a <_fflush_r+0x32>
 8010c00:	0599      	lsls	r1, r3, #22
 8010c02:	d402      	bmi.n	8010c0a <_fflush_r+0x32>
 8010c04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c06:	f7ff faf0 	bl	80101ea <__retarget_lock_acquire_recursive>
 8010c0a:	4628      	mov	r0, r5
 8010c0c:	4621      	mov	r1, r4
 8010c0e:	f7ff ff5f 	bl	8010ad0 <__sflush_r>
 8010c12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010c14:	07da      	lsls	r2, r3, #31
 8010c16:	4605      	mov	r5, r0
 8010c18:	d4e4      	bmi.n	8010be4 <_fflush_r+0xc>
 8010c1a:	89a3      	ldrh	r3, [r4, #12]
 8010c1c:	059b      	lsls	r3, r3, #22
 8010c1e:	d4e1      	bmi.n	8010be4 <_fflush_r+0xc>
 8010c20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c22:	f7ff fae3 	bl	80101ec <__retarget_lock_release_recursive>
 8010c26:	e7dd      	b.n	8010be4 <_fflush_r+0xc>

08010c28 <__swbuf_r>:
 8010c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c2a:	460e      	mov	r6, r1
 8010c2c:	4614      	mov	r4, r2
 8010c2e:	4605      	mov	r5, r0
 8010c30:	b118      	cbz	r0, 8010c3a <__swbuf_r+0x12>
 8010c32:	6a03      	ldr	r3, [r0, #32]
 8010c34:	b90b      	cbnz	r3, 8010c3a <__swbuf_r+0x12>
 8010c36:	f7ff f98d 	bl	800ff54 <__sinit>
 8010c3a:	69a3      	ldr	r3, [r4, #24]
 8010c3c:	60a3      	str	r3, [r4, #8]
 8010c3e:	89a3      	ldrh	r3, [r4, #12]
 8010c40:	071a      	lsls	r2, r3, #28
 8010c42:	d501      	bpl.n	8010c48 <__swbuf_r+0x20>
 8010c44:	6923      	ldr	r3, [r4, #16]
 8010c46:	b943      	cbnz	r3, 8010c5a <__swbuf_r+0x32>
 8010c48:	4621      	mov	r1, r4
 8010c4a:	4628      	mov	r0, r5
 8010c4c:	f000 f82a 	bl	8010ca4 <__swsetup_r>
 8010c50:	b118      	cbz	r0, 8010c5a <__swbuf_r+0x32>
 8010c52:	f04f 37ff 	mov.w	r7, #4294967295
 8010c56:	4638      	mov	r0, r7
 8010c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c5a:	6823      	ldr	r3, [r4, #0]
 8010c5c:	6922      	ldr	r2, [r4, #16]
 8010c5e:	1a98      	subs	r0, r3, r2
 8010c60:	6963      	ldr	r3, [r4, #20]
 8010c62:	b2f6      	uxtb	r6, r6
 8010c64:	4283      	cmp	r3, r0
 8010c66:	4637      	mov	r7, r6
 8010c68:	dc05      	bgt.n	8010c76 <__swbuf_r+0x4e>
 8010c6a:	4621      	mov	r1, r4
 8010c6c:	4628      	mov	r0, r5
 8010c6e:	f7ff ffb3 	bl	8010bd8 <_fflush_r>
 8010c72:	2800      	cmp	r0, #0
 8010c74:	d1ed      	bne.n	8010c52 <__swbuf_r+0x2a>
 8010c76:	68a3      	ldr	r3, [r4, #8]
 8010c78:	3b01      	subs	r3, #1
 8010c7a:	60a3      	str	r3, [r4, #8]
 8010c7c:	6823      	ldr	r3, [r4, #0]
 8010c7e:	1c5a      	adds	r2, r3, #1
 8010c80:	6022      	str	r2, [r4, #0]
 8010c82:	701e      	strb	r6, [r3, #0]
 8010c84:	6962      	ldr	r2, [r4, #20]
 8010c86:	1c43      	adds	r3, r0, #1
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d004      	beq.n	8010c96 <__swbuf_r+0x6e>
 8010c8c:	89a3      	ldrh	r3, [r4, #12]
 8010c8e:	07db      	lsls	r3, r3, #31
 8010c90:	d5e1      	bpl.n	8010c56 <__swbuf_r+0x2e>
 8010c92:	2e0a      	cmp	r6, #10
 8010c94:	d1df      	bne.n	8010c56 <__swbuf_r+0x2e>
 8010c96:	4621      	mov	r1, r4
 8010c98:	4628      	mov	r0, r5
 8010c9a:	f7ff ff9d 	bl	8010bd8 <_fflush_r>
 8010c9e:	2800      	cmp	r0, #0
 8010ca0:	d0d9      	beq.n	8010c56 <__swbuf_r+0x2e>
 8010ca2:	e7d6      	b.n	8010c52 <__swbuf_r+0x2a>

08010ca4 <__swsetup_r>:
 8010ca4:	b538      	push	{r3, r4, r5, lr}
 8010ca6:	4b29      	ldr	r3, [pc, #164]	@ (8010d4c <__swsetup_r+0xa8>)
 8010ca8:	4605      	mov	r5, r0
 8010caa:	6818      	ldr	r0, [r3, #0]
 8010cac:	460c      	mov	r4, r1
 8010cae:	b118      	cbz	r0, 8010cb8 <__swsetup_r+0x14>
 8010cb0:	6a03      	ldr	r3, [r0, #32]
 8010cb2:	b90b      	cbnz	r3, 8010cb8 <__swsetup_r+0x14>
 8010cb4:	f7ff f94e 	bl	800ff54 <__sinit>
 8010cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cbc:	0719      	lsls	r1, r3, #28
 8010cbe:	d422      	bmi.n	8010d06 <__swsetup_r+0x62>
 8010cc0:	06da      	lsls	r2, r3, #27
 8010cc2:	d407      	bmi.n	8010cd4 <__swsetup_r+0x30>
 8010cc4:	2209      	movs	r2, #9
 8010cc6:	602a      	str	r2, [r5, #0]
 8010cc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ccc:	81a3      	strh	r3, [r4, #12]
 8010cce:	f04f 30ff 	mov.w	r0, #4294967295
 8010cd2:	e033      	b.n	8010d3c <__swsetup_r+0x98>
 8010cd4:	0758      	lsls	r0, r3, #29
 8010cd6:	d512      	bpl.n	8010cfe <__swsetup_r+0x5a>
 8010cd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010cda:	b141      	cbz	r1, 8010cee <__swsetup_r+0x4a>
 8010cdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010ce0:	4299      	cmp	r1, r3
 8010ce2:	d002      	beq.n	8010cea <__swsetup_r+0x46>
 8010ce4:	4628      	mov	r0, r5
 8010ce6:	f7ff fa83 	bl	80101f0 <_free_r>
 8010cea:	2300      	movs	r3, #0
 8010cec:	6363      	str	r3, [r4, #52]	@ 0x34
 8010cee:	89a3      	ldrh	r3, [r4, #12]
 8010cf0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010cf4:	81a3      	strh	r3, [r4, #12]
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	6063      	str	r3, [r4, #4]
 8010cfa:	6923      	ldr	r3, [r4, #16]
 8010cfc:	6023      	str	r3, [r4, #0]
 8010cfe:	89a3      	ldrh	r3, [r4, #12]
 8010d00:	f043 0308 	orr.w	r3, r3, #8
 8010d04:	81a3      	strh	r3, [r4, #12]
 8010d06:	6923      	ldr	r3, [r4, #16]
 8010d08:	b94b      	cbnz	r3, 8010d1e <__swsetup_r+0x7a>
 8010d0a:	89a3      	ldrh	r3, [r4, #12]
 8010d0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d14:	d003      	beq.n	8010d1e <__swsetup_r+0x7a>
 8010d16:	4621      	mov	r1, r4
 8010d18:	4628      	mov	r0, r5
 8010d1a:	f000 f895 	bl	8010e48 <__smakebuf_r>
 8010d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d22:	f013 0201 	ands.w	r2, r3, #1
 8010d26:	d00a      	beq.n	8010d3e <__swsetup_r+0x9a>
 8010d28:	2200      	movs	r2, #0
 8010d2a:	60a2      	str	r2, [r4, #8]
 8010d2c:	6962      	ldr	r2, [r4, #20]
 8010d2e:	4252      	negs	r2, r2
 8010d30:	61a2      	str	r2, [r4, #24]
 8010d32:	6922      	ldr	r2, [r4, #16]
 8010d34:	b942      	cbnz	r2, 8010d48 <__swsetup_r+0xa4>
 8010d36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010d3a:	d1c5      	bne.n	8010cc8 <__swsetup_r+0x24>
 8010d3c:	bd38      	pop	{r3, r4, r5, pc}
 8010d3e:	0799      	lsls	r1, r3, #30
 8010d40:	bf58      	it	pl
 8010d42:	6962      	ldrpl	r2, [r4, #20]
 8010d44:	60a2      	str	r2, [r4, #8]
 8010d46:	e7f4      	b.n	8010d32 <__swsetup_r+0x8e>
 8010d48:	2000      	movs	r0, #0
 8010d4a:	e7f7      	b.n	8010d3c <__swsetup_r+0x98>
 8010d4c:	20000234 	.word	0x20000234

08010d50 <memmove>:
 8010d50:	4288      	cmp	r0, r1
 8010d52:	b510      	push	{r4, lr}
 8010d54:	eb01 0402 	add.w	r4, r1, r2
 8010d58:	d902      	bls.n	8010d60 <memmove+0x10>
 8010d5a:	4284      	cmp	r4, r0
 8010d5c:	4623      	mov	r3, r4
 8010d5e:	d807      	bhi.n	8010d70 <memmove+0x20>
 8010d60:	1e43      	subs	r3, r0, #1
 8010d62:	42a1      	cmp	r1, r4
 8010d64:	d008      	beq.n	8010d78 <memmove+0x28>
 8010d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d6e:	e7f8      	b.n	8010d62 <memmove+0x12>
 8010d70:	4402      	add	r2, r0
 8010d72:	4601      	mov	r1, r0
 8010d74:	428a      	cmp	r2, r1
 8010d76:	d100      	bne.n	8010d7a <memmove+0x2a>
 8010d78:	bd10      	pop	{r4, pc}
 8010d7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d82:	e7f7      	b.n	8010d74 <memmove+0x24>

08010d84 <memcpy>:
 8010d84:	440a      	add	r2, r1
 8010d86:	4291      	cmp	r1, r2
 8010d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8010d8c:	d100      	bne.n	8010d90 <memcpy+0xc>
 8010d8e:	4770      	bx	lr
 8010d90:	b510      	push	{r4, lr}
 8010d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d9a:	4291      	cmp	r1, r2
 8010d9c:	d1f9      	bne.n	8010d92 <memcpy+0xe>
 8010d9e:	bd10      	pop	{r4, pc}

08010da0 <_realloc_r>:
 8010da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010da4:	4607      	mov	r7, r0
 8010da6:	4614      	mov	r4, r2
 8010da8:	460d      	mov	r5, r1
 8010daa:	b921      	cbnz	r1, 8010db6 <_realloc_r+0x16>
 8010dac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010db0:	4611      	mov	r1, r2
 8010db2:	f7fe bfb7 	b.w	800fd24 <_malloc_r>
 8010db6:	b92a      	cbnz	r2, 8010dc4 <_realloc_r+0x24>
 8010db8:	f7ff fa1a 	bl	80101f0 <_free_r>
 8010dbc:	4625      	mov	r5, r4
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dc4:	f000 f89e 	bl	8010f04 <_malloc_usable_size_r>
 8010dc8:	4284      	cmp	r4, r0
 8010dca:	4606      	mov	r6, r0
 8010dcc:	d802      	bhi.n	8010dd4 <_realloc_r+0x34>
 8010dce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010dd2:	d8f4      	bhi.n	8010dbe <_realloc_r+0x1e>
 8010dd4:	4621      	mov	r1, r4
 8010dd6:	4638      	mov	r0, r7
 8010dd8:	f7fe ffa4 	bl	800fd24 <_malloc_r>
 8010ddc:	4680      	mov	r8, r0
 8010dde:	b908      	cbnz	r0, 8010de4 <_realloc_r+0x44>
 8010de0:	4645      	mov	r5, r8
 8010de2:	e7ec      	b.n	8010dbe <_realloc_r+0x1e>
 8010de4:	42b4      	cmp	r4, r6
 8010de6:	4622      	mov	r2, r4
 8010de8:	4629      	mov	r1, r5
 8010dea:	bf28      	it	cs
 8010dec:	4632      	movcs	r2, r6
 8010dee:	f7ff ffc9 	bl	8010d84 <memcpy>
 8010df2:	4629      	mov	r1, r5
 8010df4:	4638      	mov	r0, r7
 8010df6:	f7ff f9fb 	bl	80101f0 <_free_r>
 8010dfa:	e7f1      	b.n	8010de0 <_realloc_r+0x40>

08010dfc <__swhatbuf_r>:
 8010dfc:	b570      	push	{r4, r5, r6, lr}
 8010dfe:	460c      	mov	r4, r1
 8010e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e04:	2900      	cmp	r1, #0
 8010e06:	b096      	sub	sp, #88	@ 0x58
 8010e08:	4615      	mov	r5, r2
 8010e0a:	461e      	mov	r6, r3
 8010e0c:	da0d      	bge.n	8010e2a <__swhatbuf_r+0x2e>
 8010e0e:	89a3      	ldrh	r3, [r4, #12]
 8010e10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010e14:	f04f 0100 	mov.w	r1, #0
 8010e18:	bf14      	ite	ne
 8010e1a:	2340      	movne	r3, #64	@ 0x40
 8010e1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010e20:	2000      	movs	r0, #0
 8010e22:	6031      	str	r1, [r6, #0]
 8010e24:	602b      	str	r3, [r5, #0]
 8010e26:	b016      	add	sp, #88	@ 0x58
 8010e28:	bd70      	pop	{r4, r5, r6, pc}
 8010e2a:	466a      	mov	r2, sp
 8010e2c:	f000 f848 	bl	8010ec0 <_fstat_r>
 8010e30:	2800      	cmp	r0, #0
 8010e32:	dbec      	blt.n	8010e0e <__swhatbuf_r+0x12>
 8010e34:	9901      	ldr	r1, [sp, #4]
 8010e36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010e3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010e3e:	4259      	negs	r1, r3
 8010e40:	4159      	adcs	r1, r3
 8010e42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e46:	e7eb      	b.n	8010e20 <__swhatbuf_r+0x24>

08010e48 <__smakebuf_r>:
 8010e48:	898b      	ldrh	r3, [r1, #12]
 8010e4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e4c:	079d      	lsls	r5, r3, #30
 8010e4e:	4606      	mov	r6, r0
 8010e50:	460c      	mov	r4, r1
 8010e52:	d507      	bpl.n	8010e64 <__smakebuf_r+0x1c>
 8010e54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010e58:	6023      	str	r3, [r4, #0]
 8010e5a:	6123      	str	r3, [r4, #16]
 8010e5c:	2301      	movs	r3, #1
 8010e5e:	6163      	str	r3, [r4, #20]
 8010e60:	b003      	add	sp, #12
 8010e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e64:	ab01      	add	r3, sp, #4
 8010e66:	466a      	mov	r2, sp
 8010e68:	f7ff ffc8 	bl	8010dfc <__swhatbuf_r>
 8010e6c:	9f00      	ldr	r7, [sp, #0]
 8010e6e:	4605      	mov	r5, r0
 8010e70:	4639      	mov	r1, r7
 8010e72:	4630      	mov	r0, r6
 8010e74:	f7fe ff56 	bl	800fd24 <_malloc_r>
 8010e78:	b948      	cbnz	r0, 8010e8e <__smakebuf_r+0x46>
 8010e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e7e:	059a      	lsls	r2, r3, #22
 8010e80:	d4ee      	bmi.n	8010e60 <__smakebuf_r+0x18>
 8010e82:	f023 0303 	bic.w	r3, r3, #3
 8010e86:	f043 0302 	orr.w	r3, r3, #2
 8010e8a:	81a3      	strh	r3, [r4, #12]
 8010e8c:	e7e2      	b.n	8010e54 <__smakebuf_r+0xc>
 8010e8e:	89a3      	ldrh	r3, [r4, #12]
 8010e90:	6020      	str	r0, [r4, #0]
 8010e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e96:	81a3      	strh	r3, [r4, #12]
 8010e98:	9b01      	ldr	r3, [sp, #4]
 8010e9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010e9e:	b15b      	cbz	r3, 8010eb8 <__smakebuf_r+0x70>
 8010ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ea4:	4630      	mov	r0, r6
 8010ea6:	f000 f81d 	bl	8010ee4 <_isatty_r>
 8010eaa:	b128      	cbz	r0, 8010eb8 <__smakebuf_r+0x70>
 8010eac:	89a3      	ldrh	r3, [r4, #12]
 8010eae:	f023 0303 	bic.w	r3, r3, #3
 8010eb2:	f043 0301 	orr.w	r3, r3, #1
 8010eb6:	81a3      	strh	r3, [r4, #12]
 8010eb8:	89a3      	ldrh	r3, [r4, #12]
 8010eba:	431d      	orrs	r5, r3
 8010ebc:	81a5      	strh	r5, [r4, #12]
 8010ebe:	e7cf      	b.n	8010e60 <__smakebuf_r+0x18>

08010ec0 <_fstat_r>:
 8010ec0:	b538      	push	{r3, r4, r5, lr}
 8010ec2:	4d07      	ldr	r5, [pc, #28]	@ (8010ee0 <_fstat_r+0x20>)
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	4604      	mov	r4, r0
 8010ec8:	4608      	mov	r0, r1
 8010eca:	4611      	mov	r1, r2
 8010ecc:	602b      	str	r3, [r5, #0]
 8010ece:	f7f0 fc9e 	bl	800180e <_fstat>
 8010ed2:	1c43      	adds	r3, r0, #1
 8010ed4:	d102      	bne.n	8010edc <_fstat_r+0x1c>
 8010ed6:	682b      	ldr	r3, [r5, #0]
 8010ed8:	b103      	cbz	r3, 8010edc <_fstat_r+0x1c>
 8010eda:	6023      	str	r3, [r4, #0]
 8010edc:	bd38      	pop	{r3, r4, r5, pc}
 8010ede:	bf00      	nop
 8010ee0:	200009b0 	.word	0x200009b0

08010ee4 <_isatty_r>:
 8010ee4:	b538      	push	{r3, r4, r5, lr}
 8010ee6:	4d06      	ldr	r5, [pc, #24]	@ (8010f00 <_isatty_r+0x1c>)
 8010ee8:	2300      	movs	r3, #0
 8010eea:	4604      	mov	r4, r0
 8010eec:	4608      	mov	r0, r1
 8010eee:	602b      	str	r3, [r5, #0]
 8010ef0:	f7f0 fc9d 	bl	800182e <_isatty>
 8010ef4:	1c43      	adds	r3, r0, #1
 8010ef6:	d102      	bne.n	8010efe <_isatty_r+0x1a>
 8010ef8:	682b      	ldr	r3, [r5, #0]
 8010efa:	b103      	cbz	r3, 8010efe <_isatty_r+0x1a>
 8010efc:	6023      	str	r3, [r4, #0]
 8010efe:	bd38      	pop	{r3, r4, r5, pc}
 8010f00:	200009b0 	.word	0x200009b0

08010f04 <_malloc_usable_size_r>:
 8010f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f08:	1f18      	subs	r0, r3, #4
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	bfbc      	itt	lt
 8010f0e:	580b      	ldrlt	r3, [r1, r0]
 8010f10:	18c0      	addlt	r0, r0, r3
 8010f12:	4770      	bx	lr

08010f14 <pow>:
 8010f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f16:	ed2d 8b02 	vpush	{d8}
 8010f1a:	eeb0 8a40 	vmov.f32	s16, s0
 8010f1e:	eef0 8a60 	vmov.f32	s17, s1
 8010f22:	ec55 4b11 	vmov	r4, r5, d1
 8010f26:	f000 f8ab 	bl	8011080 <__ieee754_pow>
 8010f2a:	4622      	mov	r2, r4
 8010f2c:	462b      	mov	r3, r5
 8010f2e:	4620      	mov	r0, r4
 8010f30:	4629      	mov	r1, r5
 8010f32:	ec57 6b10 	vmov	r6, r7, d0
 8010f36:	f7ef fdf9 	bl	8000b2c <__aeabi_dcmpun>
 8010f3a:	2800      	cmp	r0, #0
 8010f3c:	d13b      	bne.n	8010fb6 <pow+0xa2>
 8010f3e:	ec51 0b18 	vmov	r0, r1, d8
 8010f42:	2200      	movs	r2, #0
 8010f44:	2300      	movs	r3, #0
 8010f46:	f7ef fdbf 	bl	8000ac8 <__aeabi_dcmpeq>
 8010f4a:	b1b8      	cbz	r0, 8010f7c <pow+0x68>
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	2300      	movs	r3, #0
 8010f50:	4620      	mov	r0, r4
 8010f52:	4629      	mov	r1, r5
 8010f54:	f7ef fdb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	d146      	bne.n	8010fea <pow+0xd6>
 8010f5c:	ec45 4b10 	vmov	d0, r4, r5
 8010f60:	f000 f848 	bl	8010ff4 <finite>
 8010f64:	b338      	cbz	r0, 8010fb6 <pow+0xa2>
 8010f66:	2200      	movs	r2, #0
 8010f68:	2300      	movs	r3, #0
 8010f6a:	4620      	mov	r0, r4
 8010f6c:	4629      	mov	r1, r5
 8010f6e:	f7ef fdb5 	bl	8000adc <__aeabi_dcmplt>
 8010f72:	b300      	cbz	r0, 8010fb6 <pow+0xa2>
 8010f74:	f7ff f90e 	bl	8010194 <__errno>
 8010f78:	2322      	movs	r3, #34	@ 0x22
 8010f7a:	e01b      	b.n	8010fb4 <pow+0xa0>
 8010f7c:	ec47 6b10 	vmov	d0, r6, r7
 8010f80:	f000 f838 	bl	8010ff4 <finite>
 8010f84:	b9e0      	cbnz	r0, 8010fc0 <pow+0xac>
 8010f86:	eeb0 0a48 	vmov.f32	s0, s16
 8010f8a:	eef0 0a68 	vmov.f32	s1, s17
 8010f8e:	f000 f831 	bl	8010ff4 <finite>
 8010f92:	b1a8      	cbz	r0, 8010fc0 <pow+0xac>
 8010f94:	ec45 4b10 	vmov	d0, r4, r5
 8010f98:	f000 f82c 	bl	8010ff4 <finite>
 8010f9c:	b180      	cbz	r0, 8010fc0 <pow+0xac>
 8010f9e:	4632      	mov	r2, r6
 8010fa0:	463b      	mov	r3, r7
 8010fa2:	4630      	mov	r0, r6
 8010fa4:	4639      	mov	r1, r7
 8010fa6:	f7ef fdc1 	bl	8000b2c <__aeabi_dcmpun>
 8010faa:	2800      	cmp	r0, #0
 8010fac:	d0e2      	beq.n	8010f74 <pow+0x60>
 8010fae:	f7ff f8f1 	bl	8010194 <__errno>
 8010fb2:	2321      	movs	r3, #33	@ 0x21
 8010fb4:	6003      	str	r3, [r0, #0]
 8010fb6:	ecbd 8b02 	vpop	{d8}
 8010fba:	ec47 6b10 	vmov	d0, r6, r7
 8010fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	4630      	mov	r0, r6
 8010fc6:	4639      	mov	r1, r7
 8010fc8:	f7ef fd7e 	bl	8000ac8 <__aeabi_dcmpeq>
 8010fcc:	2800      	cmp	r0, #0
 8010fce:	d0f2      	beq.n	8010fb6 <pow+0xa2>
 8010fd0:	eeb0 0a48 	vmov.f32	s0, s16
 8010fd4:	eef0 0a68 	vmov.f32	s1, s17
 8010fd8:	f000 f80c 	bl	8010ff4 <finite>
 8010fdc:	2800      	cmp	r0, #0
 8010fde:	d0ea      	beq.n	8010fb6 <pow+0xa2>
 8010fe0:	ec45 4b10 	vmov	d0, r4, r5
 8010fe4:	f000 f806 	bl	8010ff4 <finite>
 8010fe8:	e7c3      	b.n	8010f72 <pow+0x5e>
 8010fea:	4f01      	ldr	r7, [pc, #4]	@ (8010ff0 <pow+0xdc>)
 8010fec:	2600      	movs	r6, #0
 8010fee:	e7e2      	b.n	8010fb6 <pow+0xa2>
 8010ff0:	3ff00000 	.word	0x3ff00000

08010ff4 <finite>:
 8010ff4:	b082      	sub	sp, #8
 8010ff6:	ed8d 0b00 	vstr	d0, [sp]
 8010ffa:	9801      	ldr	r0, [sp, #4]
 8010ffc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8011000:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8011004:	0fc0      	lsrs	r0, r0, #31
 8011006:	b002      	add	sp, #8
 8011008:	4770      	bx	lr
	...

0801100c <trunc>:
 801100c:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8011010:	ec5c bb10 	vmov	fp, ip, d0
 8011014:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8011018:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 801101c:	2913      	cmp	r1, #19
 801101e:	4664      	mov	r4, ip
 8011020:	dc14      	bgt.n	801104c <trunc+0x40>
 8011022:	2900      	cmp	r1, #0
 8011024:	bfa4      	itt	ge
 8011026:	4b15      	ldrge	r3, [pc, #84]	@ (801107c <trunc+0x70>)
 8011028:	fa43 f101 	asrge.w	r1, r3, r1
 801102c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8011030:	bfad      	iteet	ge
 8011032:	4021      	andge	r1, r4
 8011034:	2200      	movlt	r2, #0
 8011036:	4603      	movlt	r3, r0
 8011038:	2200      	movge	r2, #0
 801103a:	bfa8      	it	ge
 801103c:	ea41 0300 	orrge.w	r3, r1, r0
 8011040:	4693      	mov	fp, r2
 8011042:	469c      	mov	ip, r3
 8011044:	ec4c bb10 	vmov	d0, fp, ip
 8011048:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 801104c:	2933      	cmp	r1, #51	@ 0x33
 801104e:	dd0b      	ble.n	8011068 <trunc+0x5c>
 8011050:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011054:	d1f6      	bne.n	8011044 <trunc+0x38>
 8011056:	465a      	mov	r2, fp
 8011058:	4663      	mov	r3, ip
 801105a:	4658      	mov	r0, fp
 801105c:	4621      	mov	r1, r4
 801105e:	f7ef f915 	bl	800028c <__adddf3>
 8011062:	4683      	mov	fp, r0
 8011064:	468c      	mov	ip, r1
 8011066:	e7ed      	b.n	8011044 <trunc+0x38>
 8011068:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 801106c:	f04f 33ff 	mov.w	r3, #4294967295
 8011070:	40c3      	lsrs	r3, r0
 8011072:	ea2b 0603 	bic.w	r6, fp, r3
 8011076:	46b3      	mov	fp, r6
 8011078:	46a4      	mov	ip, r4
 801107a:	e7e3      	b.n	8011044 <trunc+0x38>
 801107c:	fff00000 	.word	0xfff00000

08011080 <__ieee754_pow>:
 8011080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011084:	b091      	sub	sp, #68	@ 0x44
 8011086:	ed8d 1b00 	vstr	d1, [sp]
 801108a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801108e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8011092:	ea5a 0001 	orrs.w	r0, sl, r1
 8011096:	ec57 6b10 	vmov	r6, r7, d0
 801109a:	d113      	bne.n	80110c4 <__ieee754_pow+0x44>
 801109c:	19b3      	adds	r3, r6, r6
 801109e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80110a2:	4152      	adcs	r2, r2
 80110a4:	4298      	cmp	r0, r3
 80110a6:	4b9a      	ldr	r3, [pc, #616]	@ (8011310 <__ieee754_pow+0x290>)
 80110a8:	4193      	sbcs	r3, r2
 80110aa:	f080 84ee 	bcs.w	8011a8a <__ieee754_pow+0xa0a>
 80110ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80110b2:	4630      	mov	r0, r6
 80110b4:	4639      	mov	r1, r7
 80110b6:	f7ef f8e9 	bl	800028c <__adddf3>
 80110ba:	ec41 0b10 	vmov	d0, r0, r1
 80110be:	b011      	add	sp, #68	@ 0x44
 80110c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110c4:	4a93      	ldr	r2, [pc, #588]	@ (8011314 <__ieee754_pow+0x294>)
 80110c6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 80110ca:	4295      	cmp	r5, r2
 80110cc:	46b8      	mov	r8, r7
 80110ce:	4633      	mov	r3, r6
 80110d0:	d80a      	bhi.n	80110e8 <__ieee754_pow+0x68>
 80110d2:	d104      	bne.n	80110de <__ieee754_pow+0x5e>
 80110d4:	2e00      	cmp	r6, #0
 80110d6:	d1ea      	bne.n	80110ae <__ieee754_pow+0x2e>
 80110d8:	45aa      	cmp	sl, r5
 80110da:	d8e8      	bhi.n	80110ae <__ieee754_pow+0x2e>
 80110dc:	e001      	b.n	80110e2 <__ieee754_pow+0x62>
 80110de:	4592      	cmp	sl, r2
 80110e0:	d802      	bhi.n	80110e8 <__ieee754_pow+0x68>
 80110e2:	4592      	cmp	sl, r2
 80110e4:	d10f      	bne.n	8011106 <__ieee754_pow+0x86>
 80110e6:	b171      	cbz	r1, 8011106 <__ieee754_pow+0x86>
 80110e8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80110ec:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80110f0:	ea58 0803 	orrs.w	r8, r8, r3
 80110f4:	d1db      	bne.n	80110ae <__ieee754_pow+0x2e>
 80110f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80110fa:	18db      	adds	r3, r3, r3
 80110fc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8011100:	4152      	adcs	r2, r2
 8011102:	4598      	cmp	r8, r3
 8011104:	e7cf      	b.n	80110a6 <__ieee754_pow+0x26>
 8011106:	f1b8 0f00 	cmp.w	r8, #0
 801110a:	46ab      	mov	fp, r5
 801110c:	da43      	bge.n	8011196 <__ieee754_pow+0x116>
 801110e:	4a82      	ldr	r2, [pc, #520]	@ (8011318 <__ieee754_pow+0x298>)
 8011110:	4592      	cmp	sl, r2
 8011112:	d856      	bhi.n	80111c2 <__ieee754_pow+0x142>
 8011114:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8011118:	4592      	cmp	sl, r2
 801111a:	f240 84c5 	bls.w	8011aa8 <__ieee754_pow+0xa28>
 801111e:	ea4f 522a 	mov.w	r2, sl, asr #20
 8011122:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8011126:	2a14      	cmp	r2, #20
 8011128:	dd18      	ble.n	801115c <__ieee754_pow+0xdc>
 801112a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801112e:	fa21 f402 	lsr.w	r4, r1, r2
 8011132:	fa04 f202 	lsl.w	r2, r4, r2
 8011136:	428a      	cmp	r2, r1
 8011138:	f040 84b6 	bne.w	8011aa8 <__ieee754_pow+0xa28>
 801113c:	f004 0401 	and.w	r4, r4, #1
 8011140:	f1c4 0402 	rsb	r4, r4, #2
 8011144:	2900      	cmp	r1, #0
 8011146:	d159      	bne.n	80111fc <__ieee754_pow+0x17c>
 8011148:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801114c:	d148      	bne.n	80111e0 <__ieee754_pow+0x160>
 801114e:	4632      	mov	r2, r6
 8011150:	463b      	mov	r3, r7
 8011152:	4630      	mov	r0, r6
 8011154:	4639      	mov	r1, r7
 8011156:	f7ef fa4f 	bl	80005f8 <__aeabi_dmul>
 801115a:	e7ae      	b.n	80110ba <__ieee754_pow+0x3a>
 801115c:	2900      	cmp	r1, #0
 801115e:	d14c      	bne.n	80111fa <__ieee754_pow+0x17a>
 8011160:	f1c2 0214 	rsb	r2, r2, #20
 8011164:	fa4a f402 	asr.w	r4, sl, r2
 8011168:	fa04 f202 	lsl.w	r2, r4, r2
 801116c:	4552      	cmp	r2, sl
 801116e:	f040 8498 	bne.w	8011aa2 <__ieee754_pow+0xa22>
 8011172:	f004 0401 	and.w	r4, r4, #1
 8011176:	f1c4 0402 	rsb	r4, r4, #2
 801117a:	4a68      	ldr	r2, [pc, #416]	@ (801131c <__ieee754_pow+0x29c>)
 801117c:	4592      	cmp	sl, r2
 801117e:	d1e3      	bne.n	8011148 <__ieee754_pow+0xc8>
 8011180:	f1b9 0f00 	cmp.w	r9, #0
 8011184:	f280 8489 	bge.w	8011a9a <__ieee754_pow+0xa1a>
 8011188:	4964      	ldr	r1, [pc, #400]	@ (801131c <__ieee754_pow+0x29c>)
 801118a:	4632      	mov	r2, r6
 801118c:	463b      	mov	r3, r7
 801118e:	2000      	movs	r0, #0
 8011190:	f7ef fb5c 	bl	800084c <__aeabi_ddiv>
 8011194:	e791      	b.n	80110ba <__ieee754_pow+0x3a>
 8011196:	2400      	movs	r4, #0
 8011198:	bb81      	cbnz	r1, 80111fc <__ieee754_pow+0x17c>
 801119a:	4a5e      	ldr	r2, [pc, #376]	@ (8011314 <__ieee754_pow+0x294>)
 801119c:	4592      	cmp	sl, r2
 801119e:	d1ec      	bne.n	801117a <__ieee754_pow+0xfa>
 80111a0:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 80111a4:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80111a8:	431a      	orrs	r2, r3
 80111aa:	f000 846e 	beq.w	8011a8a <__ieee754_pow+0xa0a>
 80111ae:	4b5c      	ldr	r3, [pc, #368]	@ (8011320 <__ieee754_pow+0x2a0>)
 80111b0:	429d      	cmp	r5, r3
 80111b2:	d908      	bls.n	80111c6 <__ieee754_pow+0x146>
 80111b4:	f1b9 0f00 	cmp.w	r9, #0
 80111b8:	f280 846b 	bge.w	8011a92 <__ieee754_pow+0xa12>
 80111bc:	2000      	movs	r0, #0
 80111be:	2100      	movs	r1, #0
 80111c0:	e77b      	b.n	80110ba <__ieee754_pow+0x3a>
 80111c2:	2402      	movs	r4, #2
 80111c4:	e7e8      	b.n	8011198 <__ieee754_pow+0x118>
 80111c6:	f1b9 0f00 	cmp.w	r9, #0
 80111ca:	f04f 0000 	mov.w	r0, #0
 80111ce:	f04f 0100 	mov.w	r1, #0
 80111d2:	f6bf af72 	bge.w	80110ba <__ieee754_pow+0x3a>
 80111d6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80111da:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80111de:	e76c      	b.n	80110ba <__ieee754_pow+0x3a>
 80111e0:	4a50      	ldr	r2, [pc, #320]	@ (8011324 <__ieee754_pow+0x2a4>)
 80111e2:	4591      	cmp	r9, r2
 80111e4:	d10a      	bne.n	80111fc <__ieee754_pow+0x17c>
 80111e6:	f1b8 0f00 	cmp.w	r8, #0
 80111ea:	db07      	blt.n	80111fc <__ieee754_pow+0x17c>
 80111ec:	ec47 6b10 	vmov	d0, r6, r7
 80111f0:	b011      	add	sp, #68	@ 0x44
 80111f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111f6:	f000 bd4f 	b.w	8011c98 <__ieee754_sqrt>
 80111fa:	2400      	movs	r4, #0
 80111fc:	ec47 6b10 	vmov	d0, r6, r7
 8011200:	9302      	str	r3, [sp, #8]
 8011202:	f000 fc87 	bl	8011b14 <fabs>
 8011206:	9b02      	ldr	r3, [sp, #8]
 8011208:	ec51 0b10 	vmov	r0, r1, d0
 801120c:	bb43      	cbnz	r3, 8011260 <__ieee754_pow+0x1e0>
 801120e:	4b43      	ldr	r3, [pc, #268]	@ (801131c <__ieee754_pow+0x29c>)
 8011210:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 8011214:	429a      	cmp	r2, r3
 8011216:	d000      	beq.n	801121a <__ieee754_pow+0x19a>
 8011218:	bb15      	cbnz	r5, 8011260 <__ieee754_pow+0x1e0>
 801121a:	f1b9 0f00 	cmp.w	r9, #0
 801121e:	da05      	bge.n	801122c <__ieee754_pow+0x1ac>
 8011220:	4602      	mov	r2, r0
 8011222:	460b      	mov	r3, r1
 8011224:	2000      	movs	r0, #0
 8011226:	493d      	ldr	r1, [pc, #244]	@ (801131c <__ieee754_pow+0x29c>)
 8011228:	f7ef fb10 	bl	800084c <__aeabi_ddiv>
 801122c:	f1b8 0f00 	cmp.w	r8, #0
 8011230:	f6bf af43 	bge.w	80110ba <__ieee754_pow+0x3a>
 8011234:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8011238:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 801123c:	4325      	orrs	r5, r4
 801123e:	d108      	bne.n	8011252 <__ieee754_pow+0x1d2>
 8011240:	4602      	mov	r2, r0
 8011242:	460b      	mov	r3, r1
 8011244:	4610      	mov	r0, r2
 8011246:	4619      	mov	r1, r3
 8011248:	f7ef f81e 	bl	8000288 <__aeabi_dsub>
 801124c:	4602      	mov	r2, r0
 801124e:	460b      	mov	r3, r1
 8011250:	e79e      	b.n	8011190 <__ieee754_pow+0x110>
 8011252:	2c01      	cmp	r4, #1
 8011254:	f47f af31 	bne.w	80110ba <__ieee754_pow+0x3a>
 8011258:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801125c:	4619      	mov	r1, r3
 801125e:	e72c      	b.n	80110ba <__ieee754_pow+0x3a>
 8011260:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8011264:	3b01      	subs	r3, #1
 8011266:	ea53 0204 	orrs.w	r2, r3, r4
 801126a:	d102      	bne.n	8011272 <__ieee754_pow+0x1f2>
 801126c:	4632      	mov	r2, r6
 801126e:	463b      	mov	r3, r7
 8011270:	e7e8      	b.n	8011244 <__ieee754_pow+0x1c4>
 8011272:	3c01      	subs	r4, #1
 8011274:	431c      	orrs	r4, r3
 8011276:	d016      	beq.n	80112a6 <__ieee754_pow+0x226>
 8011278:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8011300 <__ieee754_pow+0x280>
 801127c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8011280:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011284:	f240 8110 	bls.w	80114a8 <__ieee754_pow+0x428>
 8011288:	4b27      	ldr	r3, [pc, #156]	@ (8011328 <__ieee754_pow+0x2a8>)
 801128a:	459a      	cmp	sl, r3
 801128c:	4b24      	ldr	r3, [pc, #144]	@ (8011320 <__ieee754_pow+0x2a0>)
 801128e:	d916      	bls.n	80112be <__ieee754_pow+0x23e>
 8011290:	429d      	cmp	r5, r3
 8011292:	d80b      	bhi.n	80112ac <__ieee754_pow+0x22c>
 8011294:	f1b9 0f00 	cmp.w	r9, #0
 8011298:	da0b      	bge.n	80112b2 <__ieee754_pow+0x232>
 801129a:	2000      	movs	r0, #0
 801129c:	b011      	add	sp, #68	@ 0x44
 801129e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112a2:	f000 bcf1 	b.w	8011c88 <__math_oflow>
 80112a6:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8011308 <__ieee754_pow+0x288>
 80112aa:	e7e7      	b.n	801127c <__ieee754_pow+0x1fc>
 80112ac:	f1b9 0f00 	cmp.w	r9, #0
 80112b0:	dcf3      	bgt.n	801129a <__ieee754_pow+0x21a>
 80112b2:	2000      	movs	r0, #0
 80112b4:	b011      	add	sp, #68	@ 0x44
 80112b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112ba:	f000 bcdd 	b.w	8011c78 <__math_uflow>
 80112be:	429d      	cmp	r5, r3
 80112c0:	d20c      	bcs.n	80112dc <__ieee754_pow+0x25c>
 80112c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112c6:	2200      	movs	r2, #0
 80112c8:	2300      	movs	r3, #0
 80112ca:	f7ef fc07 	bl	8000adc <__aeabi_dcmplt>
 80112ce:	3800      	subs	r0, #0
 80112d0:	bf18      	it	ne
 80112d2:	2001      	movne	r0, #1
 80112d4:	f1b9 0f00 	cmp.w	r9, #0
 80112d8:	daec      	bge.n	80112b4 <__ieee754_pow+0x234>
 80112da:	e7df      	b.n	801129c <__ieee754_pow+0x21c>
 80112dc:	4b0f      	ldr	r3, [pc, #60]	@ (801131c <__ieee754_pow+0x29c>)
 80112de:	429d      	cmp	r5, r3
 80112e0:	f04f 0200 	mov.w	r2, #0
 80112e4:	d922      	bls.n	801132c <__ieee754_pow+0x2ac>
 80112e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112ea:	2300      	movs	r3, #0
 80112ec:	f7ef fbf6 	bl	8000adc <__aeabi_dcmplt>
 80112f0:	3800      	subs	r0, #0
 80112f2:	bf18      	it	ne
 80112f4:	2001      	movne	r0, #1
 80112f6:	f1b9 0f00 	cmp.w	r9, #0
 80112fa:	dccf      	bgt.n	801129c <__ieee754_pow+0x21c>
 80112fc:	e7da      	b.n	80112b4 <__ieee754_pow+0x234>
 80112fe:	bf00      	nop
 8011300:	00000000 	.word	0x00000000
 8011304:	3ff00000 	.word	0x3ff00000
 8011308:	00000000 	.word	0x00000000
 801130c:	bff00000 	.word	0xbff00000
 8011310:	fff00000 	.word	0xfff00000
 8011314:	7ff00000 	.word	0x7ff00000
 8011318:	433fffff 	.word	0x433fffff
 801131c:	3ff00000 	.word	0x3ff00000
 8011320:	3fefffff 	.word	0x3fefffff
 8011324:	3fe00000 	.word	0x3fe00000
 8011328:	43f00000 	.word	0x43f00000
 801132c:	4b5a      	ldr	r3, [pc, #360]	@ (8011498 <__ieee754_pow+0x418>)
 801132e:	f7ee ffab 	bl	8000288 <__aeabi_dsub>
 8011332:	a351      	add	r3, pc, #324	@ (adr r3, 8011478 <__ieee754_pow+0x3f8>)
 8011334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011338:	4604      	mov	r4, r0
 801133a:	460d      	mov	r5, r1
 801133c:	f7ef f95c 	bl	80005f8 <__aeabi_dmul>
 8011340:	a34f      	add	r3, pc, #316	@ (adr r3, 8011480 <__ieee754_pow+0x400>)
 8011342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011346:	4606      	mov	r6, r0
 8011348:	460f      	mov	r7, r1
 801134a:	4620      	mov	r0, r4
 801134c:	4629      	mov	r1, r5
 801134e:	f7ef f953 	bl	80005f8 <__aeabi_dmul>
 8011352:	4b52      	ldr	r3, [pc, #328]	@ (801149c <__ieee754_pow+0x41c>)
 8011354:	4682      	mov	sl, r0
 8011356:	468b      	mov	fp, r1
 8011358:	2200      	movs	r2, #0
 801135a:	4620      	mov	r0, r4
 801135c:	4629      	mov	r1, r5
 801135e:	f7ef f94b 	bl	80005f8 <__aeabi_dmul>
 8011362:	4602      	mov	r2, r0
 8011364:	460b      	mov	r3, r1
 8011366:	a148      	add	r1, pc, #288	@ (adr r1, 8011488 <__ieee754_pow+0x408>)
 8011368:	e9d1 0100 	ldrd	r0, r1, [r1]
 801136c:	f7ee ff8c 	bl	8000288 <__aeabi_dsub>
 8011370:	4622      	mov	r2, r4
 8011372:	462b      	mov	r3, r5
 8011374:	f7ef f940 	bl	80005f8 <__aeabi_dmul>
 8011378:	4602      	mov	r2, r0
 801137a:	460b      	mov	r3, r1
 801137c:	2000      	movs	r0, #0
 801137e:	4948      	ldr	r1, [pc, #288]	@ (80114a0 <__ieee754_pow+0x420>)
 8011380:	f7ee ff82 	bl	8000288 <__aeabi_dsub>
 8011384:	4622      	mov	r2, r4
 8011386:	4680      	mov	r8, r0
 8011388:	4689      	mov	r9, r1
 801138a:	462b      	mov	r3, r5
 801138c:	4620      	mov	r0, r4
 801138e:	4629      	mov	r1, r5
 8011390:	f7ef f932 	bl	80005f8 <__aeabi_dmul>
 8011394:	4602      	mov	r2, r0
 8011396:	460b      	mov	r3, r1
 8011398:	4640      	mov	r0, r8
 801139a:	4649      	mov	r1, r9
 801139c:	f7ef f92c 	bl	80005f8 <__aeabi_dmul>
 80113a0:	a33b      	add	r3, pc, #236	@ (adr r3, 8011490 <__ieee754_pow+0x410>)
 80113a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a6:	f7ef f927 	bl	80005f8 <__aeabi_dmul>
 80113aa:	4602      	mov	r2, r0
 80113ac:	460b      	mov	r3, r1
 80113ae:	4650      	mov	r0, sl
 80113b0:	4659      	mov	r1, fp
 80113b2:	f7ee ff69 	bl	8000288 <__aeabi_dsub>
 80113b6:	4602      	mov	r2, r0
 80113b8:	460b      	mov	r3, r1
 80113ba:	4680      	mov	r8, r0
 80113bc:	4689      	mov	r9, r1
 80113be:	4630      	mov	r0, r6
 80113c0:	4639      	mov	r1, r7
 80113c2:	f7ee ff63 	bl	800028c <__adddf3>
 80113c6:	2400      	movs	r4, #0
 80113c8:	4632      	mov	r2, r6
 80113ca:	463b      	mov	r3, r7
 80113cc:	4620      	mov	r0, r4
 80113ce:	460d      	mov	r5, r1
 80113d0:	f7ee ff5a 	bl	8000288 <__aeabi_dsub>
 80113d4:	4602      	mov	r2, r0
 80113d6:	460b      	mov	r3, r1
 80113d8:	4640      	mov	r0, r8
 80113da:	4649      	mov	r1, r9
 80113dc:	f7ee ff54 	bl	8000288 <__aeabi_dsub>
 80113e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80113e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80113e8:	2300      	movs	r3, #0
 80113ea:	9304      	str	r3, [sp, #16]
 80113ec:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80113f0:	4606      	mov	r6, r0
 80113f2:	460f      	mov	r7, r1
 80113f4:	465b      	mov	r3, fp
 80113f6:	4652      	mov	r2, sl
 80113f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80113fc:	f7ee ff44 	bl	8000288 <__aeabi_dsub>
 8011400:	4622      	mov	r2, r4
 8011402:	462b      	mov	r3, r5
 8011404:	f7ef f8f8 	bl	80005f8 <__aeabi_dmul>
 8011408:	e9dd 2300 	ldrd	r2, r3, [sp]
 801140c:	4680      	mov	r8, r0
 801140e:	4689      	mov	r9, r1
 8011410:	4630      	mov	r0, r6
 8011412:	4639      	mov	r1, r7
 8011414:	f7ef f8f0 	bl	80005f8 <__aeabi_dmul>
 8011418:	4602      	mov	r2, r0
 801141a:	460b      	mov	r3, r1
 801141c:	4640      	mov	r0, r8
 801141e:	4649      	mov	r1, r9
 8011420:	f7ee ff34 	bl	800028c <__adddf3>
 8011424:	465b      	mov	r3, fp
 8011426:	4606      	mov	r6, r0
 8011428:	460f      	mov	r7, r1
 801142a:	4652      	mov	r2, sl
 801142c:	4620      	mov	r0, r4
 801142e:	4629      	mov	r1, r5
 8011430:	f7ef f8e2 	bl	80005f8 <__aeabi_dmul>
 8011434:	460b      	mov	r3, r1
 8011436:	4602      	mov	r2, r0
 8011438:	4680      	mov	r8, r0
 801143a:	4689      	mov	r9, r1
 801143c:	4630      	mov	r0, r6
 801143e:	4639      	mov	r1, r7
 8011440:	f7ee ff24 	bl	800028c <__adddf3>
 8011444:	4b17      	ldr	r3, [pc, #92]	@ (80114a4 <__ieee754_pow+0x424>)
 8011446:	4299      	cmp	r1, r3
 8011448:	4604      	mov	r4, r0
 801144a:	460d      	mov	r5, r1
 801144c:	468b      	mov	fp, r1
 801144e:	f340 820b 	ble.w	8011868 <__ieee754_pow+0x7e8>
 8011452:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8011456:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801145a:	4303      	orrs	r3, r0
 801145c:	f000 81ea 	beq.w	8011834 <__ieee754_pow+0x7b4>
 8011460:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011464:	2200      	movs	r2, #0
 8011466:	2300      	movs	r3, #0
 8011468:	f7ef fb38 	bl	8000adc <__aeabi_dcmplt>
 801146c:	3800      	subs	r0, #0
 801146e:	bf18      	it	ne
 8011470:	2001      	movne	r0, #1
 8011472:	e713      	b.n	801129c <__ieee754_pow+0x21c>
 8011474:	f3af 8000 	nop.w
 8011478:	60000000 	.word	0x60000000
 801147c:	3ff71547 	.word	0x3ff71547
 8011480:	f85ddf44 	.word	0xf85ddf44
 8011484:	3e54ae0b 	.word	0x3e54ae0b
 8011488:	55555555 	.word	0x55555555
 801148c:	3fd55555 	.word	0x3fd55555
 8011490:	652b82fe 	.word	0x652b82fe
 8011494:	3ff71547 	.word	0x3ff71547
 8011498:	3ff00000 	.word	0x3ff00000
 801149c:	3fd00000 	.word	0x3fd00000
 80114a0:	3fe00000 	.word	0x3fe00000
 80114a4:	408fffff 	.word	0x408fffff
 80114a8:	4bd5      	ldr	r3, [pc, #852]	@ (8011800 <__ieee754_pow+0x780>)
 80114aa:	ea08 0303 	and.w	r3, r8, r3
 80114ae:	2200      	movs	r2, #0
 80114b0:	b92b      	cbnz	r3, 80114be <__ieee754_pow+0x43e>
 80114b2:	4bd4      	ldr	r3, [pc, #848]	@ (8011804 <__ieee754_pow+0x784>)
 80114b4:	f7ef f8a0 	bl	80005f8 <__aeabi_dmul>
 80114b8:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80114bc:	468b      	mov	fp, r1
 80114be:	ea4f 532b 	mov.w	r3, fp, asr #20
 80114c2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80114c6:	4413      	add	r3, r2
 80114c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80114ca:	4bcf      	ldr	r3, [pc, #828]	@ (8011808 <__ieee754_pow+0x788>)
 80114cc:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80114d0:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80114d4:	459b      	cmp	fp, r3
 80114d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80114da:	dd08      	ble.n	80114ee <__ieee754_pow+0x46e>
 80114dc:	4bcb      	ldr	r3, [pc, #812]	@ (801180c <__ieee754_pow+0x78c>)
 80114de:	459b      	cmp	fp, r3
 80114e0:	f340 81a5 	ble.w	801182e <__ieee754_pow+0x7ae>
 80114e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80114e6:	3301      	adds	r3, #1
 80114e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80114ea:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80114ee:	f04f 0a00 	mov.w	sl, #0
 80114f2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80114f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80114f8:	4bc5      	ldr	r3, [pc, #788]	@ (8011810 <__ieee754_pow+0x790>)
 80114fa:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80114fe:	ed93 7b00 	vldr	d7, [r3]
 8011502:	4629      	mov	r1, r5
 8011504:	ec53 2b17 	vmov	r2, r3, d7
 8011508:	ed8d 7b06 	vstr	d7, [sp, #24]
 801150c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011510:	f7ee feba 	bl	8000288 <__aeabi_dsub>
 8011514:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011518:	4606      	mov	r6, r0
 801151a:	460f      	mov	r7, r1
 801151c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011520:	f7ee feb4 	bl	800028c <__adddf3>
 8011524:	4602      	mov	r2, r0
 8011526:	460b      	mov	r3, r1
 8011528:	2000      	movs	r0, #0
 801152a:	49ba      	ldr	r1, [pc, #744]	@ (8011814 <__ieee754_pow+0x794>)
 801152c:	f7ef f98e 	bl	800084c <__aeabi_ddiv>
 8011530:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8011534:	4602      	mov	r2, r0
 8011536:	460b      	mov	r3, r1
 8011538:	4630      	mov	r0, r6
 801153a:	4639      	mov	r1, r7
 801153c:	f7ef f85c 	bl	80005f8 <__aeabi_dmul>
 8011540:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011544:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8011548:	106d      	asrs	r5, r5, #1
 801154a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801154e:	f04f 0b00 	mov.w	fp, #0
 8011552:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8011556:	4661      	mov	r1, ip
 8011558:	2200      	movs	r2, #0
 801155a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801155e:	4658      	mov	r0, fp
 8011560:	46e1      	mov	r9, ip
 8011562:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8011566:	4614      	mov	r4, r2
 8011568:	461d      	mov	r5, r3
 801156a:	f7ef f845 	bl	80005f8 <__aeabi_dmul>
 801156e:	4602      	mov	r2, r0
 8011570:	460b      	mov	r3, r1
 8011572:	4630      	mov	r0, r6
 8011574:	4639      	mov	r1, r7
 8011576:	f7ee fe87 	bl	8000288 <__aeabi_dsub>
 801157a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801157e:	4606      	mov	r6, r0
 8011580:	460f      	mov	r7, r1
 8011582:	4620      	mov	r0, r4
 8011584:	4629      	mov	r1, r5
 8011586:	f7ee fe7f 	bl	8000288 <__aeabi_dsub>
 801158a:	4602      	mov	r2, r0
 801158c:	460b      	mov	r3, r1
 801158e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011592:	f7ee fe79 	bl	8000288 <__aeabi_dsub>
 8011596:	465a      	mov	r2, fp
 8011598:	464b      	mov	r3, r9
 801159a:	f7ef f82d 	bl	80005f8 <__aeabi_dmul>
 801159e:	4602      	mov	r2, r0
 80115a0:	460b      	mov	r3, r1
 80115a2:	4630      	mov	r0, r6
 80115a4:	4639      	mov	r1, r7
 80115a6:	f7ee fe6f 	bl	8000288 <__aeabi_dsub>
 80115aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80115ae:	f7ef f823 	bl	80005f8 <__aeabi_dmul>
 80115b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80115b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80115ba:	4610      	mov	r0, r2
 80115bc:	4619      	mov	r1, r3
 80115be:	f7ef f81b 	bl	80005f8 <__aeabi_dmul>
 80115c2:	a37d      	add	r3, pc, #500	@ (adr r3, 80117b8 <__ieee754_pow+0x738>)
 80115c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c8:	4604      	mov	r4, r0
 80115ca:	460d      	mov	r5, r1
 80115cc:	f7ef f814 	bl	80005f8 <__aeabi_dmul>
 80115d0:	a37b      	add	r3, pc, #492	@ (adr r3, 80117c0 <__ieee754_pow+0x740>)
 80115d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d6:	f7ee fe59 	bl	800028c <__adddf3>
 80115da:	4622      	mov	r2, r4
 80115dc:	462b      	mov	r3, r5
 80115de:	f7ef f80b 	bl	80005f8 <__aeabi_dmul>
 80115e2:	a379      	add	r3, pc, #484	@ (adr r3, 80117c8 <__ieee754_pow+0x748>)
 80115e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115e8:	f7ee fe50 	bl	800028c <__adddf3>
 80115ec:	4622      	mov	r2, r4
 80115ee:	462b      	mov	r3, r5
 80115f0:	f7ef f802 	bl	80005f8 <__aeabi_dmul>
 80115f4:	a376      	add	r3, pc, #472	@ (adr r3, 80117d0 <__ieee754_pow+0x750>)
 80115f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115fa:	f7ee fe47 	bl	800028c <__adddf3>
 80115fe:	4622      	mov	r2, r4
 8011600:	462b      	mov	r3, r5
 8011602:	f7ee fff9 	bl	80005f8 <__aeabi_dmul>
 8011606:	a374      	add	r3, pc, #464	@ (adr r3, 80117d8 <__ieee754_pow+0x758>)
 8011608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801160c:	f7ee fe3e 	bl	800028c <__adddf3>
 8011610:	4622      	mov	r2, r4
 8011612:	462b      	mov	r3, r5
 8011614:	f7ee fff0 	bl	80005f8 <__aeabi_dmul>
 8011618:	a371      	add	r3, pc, #452	@ (adr r3, 80117e0 <__ieee754_pow+0x760>)
 801161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801161e:	f7ee fe35 	bl	800028c <__adddf3>
 8011622:	4622      	mov	r2, r4
 8011624:	4606      	mov	r6, r0
 8011626:	460f      	mov	r7, r1
 8011628:	462b      	mov	r3, r5
 801162a:	4620      	mov	r0, r4
 801162c:	4629      	mov	r1, r5
 801162e:	f7ee ffe3 	bl	80005f8 <__aeabi_dmul>
 8011632:	4602      	mov	r2, r0
 8011634:	460b      	mov	r3, r1
 8011636:	4630      	mov	r0, r6
 8011638:	4639      	mov	r1, r7
 801163a:	f7ee ffdd 	bl	80005f8 <__aeabi_dmul>
 801163e:	465a      	mov	r2, fp
 8011640:	4604      	mov	r4, r0
 8011642:	460d      	mov	r5, r1
 8011644:	464b      	mov	r3, r9
 8011646:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801164a:	f7ee fe1f 	bl	800028c <__adddf3>
 801164e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011652:	f7ee ffd1 	bl	80005f8 <__aeabi_dmul>
 8011656:	4622      	mov	r2, r4
 8011658:	462b      	mov	r3, r5
 801165a:	f7ee fe17 	bl	800028c <__adddf3>
 801165e:	465a      	mov	r2, fp
 8011660:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011664:	464b      	mov	r3, r9
 8011666:	4658      	mov	r0, fp
 8011668:	4649      	mov	r1, r9
 801166a:	f7ee ffc5 	bl	80005f8 <__aeabi_dmul>
 801166e:	4b6a      	ldr	r3, [pc, #424]	@ (8011818 <__ieee754_pow+0x798>)
 8011670:	2200      	movs	r2, #0
 8011672:	4606      	mov	r6, r0
 8011674:	460f      	mov	r7, r1
 8011676:	f7ee fe09 	bl	800028c <__adddf3>
 801167a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801167e:	f7ee fe05 	bl	800028c <__adddf3>
 8011682:	46d8      	mov	r8, fp
 8011684:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8011688:	460d      	mov	r5, r1
 801168a:	465a      	mov	r2, fp
 801168c:	460b      	mov	r3, r1
 801168e:	4640      	mov	r0, r8
 8011690:	4649      	mov	r1, r9
 8011692:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8011696:	f7ee ffaf 	bl	80005f8 <__aeabi_dmul>
 801169a:	465c      	mov	r4, fp
 801169c:	4680      	mov	r8, r0
 801169e:	4689      	mov	r9, r1
 80116a0:	4b5d      	ldr	r3, [pc, #372]	@ (8011818 <__ieee754_pow+0x798>)
 80116a2:	2200      	movs	r2, #0
 80116a4:	4620      	mov	r0, r4
 80116a6:	4629      	mov	r1, r5
 80116a8:	f7ee fdee 	bl	8000288 <__aeabi_dsub>
 80116ac:	4632      	mov	r2, r6
 80116ae:	463b      	mov	r3, r7
 80116b0:	f7ee fdea 	bl	8000288 <__aeabi_dsub>
 80116b4:	4602      	mov	r2, r0
 80116b6:	460b      	mov	r3, r1
 80116b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80116bc:	f7ee fde4 	bl	8000288 <__aeabi_dsub>
 80116c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80116c4:	f7ee ff98 	bl	80005f8 <__aeabi_dmul>
 80116c8:	4622      	mov	r2, r4
 80116ca:	4606      	mov	r6, r0
 80116cc:	460f      	mov	r7, r1
 80116ce:	462b      	mov	r3, r5
 80116d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80116d4:	f7ee ff90 	bl	80005f8 <__aeabi_dmul>
 80116d8:	4602      	mov	r2, r0
 80116da:	460b      	mov	r3, r1
 80116dc:	4630      	mov	r0, r6
 80116de:	4639      	mov	r1, r7
 80116e0:	f7ee fdd4 	bl	800028c <__adddf3>
 80116e4:	4606      	mov	r6, r0
 80116e6:	460f      	mov	r7, r1
 80116e8:	4602      	mov	r2, r0
 80116ea:	460b      	mov	r3, r1
 80116ec:	4640      	mov	r0, r8
 80116ee:	4649      	mov	r1, r9
 80116f0:	f7ee fdcc 	bl	800028c <__adddf3>
 80116f4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80116f8:	a33b      	add	r3, pc, #236	@ (adr r3, 80117e8 <__ieee754_pow+0x768>)
 80116fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116fe:	4658      	mov	r0, fp
 8011700:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8011704:	460d      	mov	r5, r1
 8011706:	f7ee ff77 	bl	80005f8 <__aeabi_dmul>
 801170a:	465c      	mov	r4, fp
 801170c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011710:	4642      	mov	r2, r8
 8011712:	464b      	mov	r3, r9
 8011714:	4620      	mov	r0, r4
 8011716:	4629      	mov	r1, r5
 8011718:	f7ee fdb6 	bl	8000288 <__aeabi_dsub>
 801171c:	4602      	mov	r2, r0
 801171e:	460b      	mov	r3, r1
 8011720:	4630      	mov	r0, r6
 8011722:	4639      	mov	r1, r7
 8011724:	f7ee fdb0 	bl	8000288 <__aeabi_dsub>
 8011728:	a331      	add	r3, pc, #196	@ (adr r3, 80117f0 <__ieee754_pow+0x770>)
 801172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801172e:	f7ee ff63 	bl	80005f8 <__aeabi_dmul>
 8011732:	a331      	add	r3, pc, #196	@ (adr r3, 80117f8 <__ieee754_pow+0x778>)
 8011734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011738:	4606      	mov	r6, r0
 801173a:	460f      	mov	r7, r1
 801173c:	4620      	mov	r0, r4
 801173e:	4629      	mov	r1, r5
 8011740:	f7ee ff5a 	bl	80005f8 <__aeabi_dmul>
 8011744:	4602      	mov	r2, r0
 8011746:	460b      	mov	r3, r1
 8011748:	4630      	mov	r0, r6
 801174a:	4639      	mov	r1, r7
 801174c:	f7ee fd9e 	bl	800028c <__adddf3>
 8011750:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011752:	4b32      	ldr	r3, [pc, #200]	@ (801181c <__ieee754_pow+0x79c>)
 8011754:	4413      	add	r3, r2
 8011756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801175a:	f7ee fd97 	bl	800028c <__adddf3>
 801175e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011762:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011764:	f7ee fede 	bl	8000524 <__aeabi_i2d>
 8011768:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801176a:	4b2d      	ldr	r3, [pc, #180]	@ (8011820 <__ieee754_pow+0x7a0>)
 801176c:	4413      	add	r3, r2
 801176e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011772:	4606      	mov	r6, r0
 8011774:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011778:	460f      	mov	r7, r1
 801177a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801177e:	f7ee fd85 	bl	800028c <__adddf3>
 8011782:	4642      	mov	r2, r8
 8011784:	464b      	mov	r3, r9
 8011786:	f7ee fd81 	bl	800028c <__adddf3>
 801178a:	4632      	mov	r2, r6
 801178c:	463b      	mov	r3, r7
 801178e:	f7ee fd7d 	bl	800028c <__adddf3>
 8011792:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8011796:	4632      	mov	r2, r6
 8011798:	463b      	mov	r3, r7
 801179a:	4658      	mov	r0, fp
 801179c:	460d      	mov	r5, r1
 801179e:	f7ee fd73 	bl	8000288 <__aeabi_dsub>
 80117a2:	4642      	mov	r2, r8
 80117a4:	464b      	mov	r3, r9
 80117a6:	f7ee fd6f 	bl	8000288 <__aeabi_dsub>
 80117aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80117ae:	f7ee fd6b 	bl	8000288 <__aeabi_dsub>
 80117b2:	465c      	mov	r4, fp
 80117b4:	e036      	b.n	8011824 <__ieee754_pow+0x7a4>
 80117b6:	bf00      	nop
 80117b8:	4a454eef 	.word	0x4a454eef
 80117bc:	3fca7e28 	.word	0x3fca7e28
 80117c0:	93c9db65 	.word	0x93c9db65
 80117c4:	3fcd864a 	.word	0x3fcd864a
 80117c8:	a91d4101 	.word	0xa91d4101
 80117cc:	3fd17460 	.word	0x3fd17460
 80117d0:	518f264d 	.word	0x518f264d
 80117d4:	3fd55555 	.word	0x3fd55555
 80117d8:	db6fabff 	.word	0xdb6fabff
 80117dc:	3fdb6db6 	.word	0x3fdb6db6
 80117e0:	33333303 	.word	0x33333303
 80117e4:	3fe33333 	.word	0x3fe33333
 80117e8:	e0000000 	.word	0xe0000000
 80117ec:	3feec709 	.word	0x3feec709
 80117f0:	dc3a03fd 	.word	0xdc3a03fd
 80117f4:	3feec709 	.word	0x3feec709
 80117f8:	145b01f5 	.word	0x145b01f5
 80117fc:	be3e2fe0 	.word	0xbe3e2fe0
 8011800:	7ff00000 	.word	0x7ff00000
 8011804:	43400000 	.word	0x43400000
 8011808:	0003988e 	.word	0x0003988e
 801180c:	000bb679 	.word	0x000bb679
 8011810:	08012358 	.word	0x08012358
 8011814:	3ff00000 	.word	0x3ff00000
 8011818:	40080000 	.word	0x40080000
 801181c:	08012338 	.word	0x08012338
 8011820:	08012348 	.word	0x08012348
 8011824:	4602      	mov	r2, r0
 8011826:	460b      	mov	r3, r1
 8011828:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801182c:	e5d6      	b.n	80113dc <__ieee754_pow+0x35c>
 801182e:	f04f 0a01 	mov.w	sl, #1
 8011832:	e65e      	b.n	80114f2 <__ieee754_pow+0x472>
 8011834:	a3b5      	add	r3, pc, #724	@ (adr r3, 8011b0c <__ieee754_pow+0xa8c>)
 8011836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801183a:	4630      	mov	r0, r6
 801183c:	4639      	mov	r1, r7
 801183e:	f7ee fd25 	bl	800028c <__adddf3>
 8011842:	4642      	mov	r2, r8
 8011844:	e9cd 0100 	strd	r0, r1, [sp]
 8011848:	464b      	mov	r3, r9
 801184a:	4620      	mov	r0, r4
 801184c:	4629      	mov	r1, r5
 801184e:	f7ee fd1b 	bl	8000288 <__aeabi_dsub>
 8011852:	4602      	mov	r2, r0
 8011854:	460b      	mov	r3, r1
 8011856:	e9dd 0100 	ldrd	r0, r1, [sp]
 801185a:	f7ef f95d 	bl	8000b18 <__aeabi_dcmpgt>
 801185e:	2800      	cmp	r0, #0
 8011860:	f47f adfe 	bne.w	8011460 <__ieee754_pow+0x3e0>
 8011864:	4ba2      	ldr	r3, [pc, #648]	@ (8011af0 <__ieee754_pow+0xa70>)
 8011866:	e022      	b.n	80118ae <__ieee754_pow+0x82e>
 8011868:	4ca2      	ldr	r4, [pc, #648]	@ (8011af4 <__ieee754_pow+0xa74>)
 801186a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801186e:	42a3      	cmp	r3, r4
 8011870:	d919      	bls.n	80118a6 <__ieee754_pow+0x826>
 8011872:	4ba1      	ldr	r3, [pc, #644]	@ (8011af8 <__ieee754_pow+0xa78>)
 8011874:	440b      	add	r3, r1
 8011876:	4303      	orrs	r3, r0
 8011878:	d009      	beq.n	801188e <__ieee754_pow+0x80e>
 801187a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801187e:	2200      	movs	r2, #0
 8011880:	2300      	movs	r3, #0
 8011882:	f7ef f92b 	bl	8000adc <__aeabi_dcmplt>
 8011886:	3800      	subs	r0, #0
 8011888:	bf18      	it	ne
 801188a:	2001      	movne	r0, #1
 801188c:	e512      	b.n	80112b4 <__ieee754_pow+0x234>
 801188e:	4642      	mov	r2, r8
 8011890:	464b      	mov	r3, r9
 8011892:	f7ee fcf9 	bl	8000288 <__aeabi_dsub>
 8011896:	4632      	mov	r2, r6
 8011898:	463b      	mov	r3, r7
 801189a:	f7ef f933 	bl	8000b04 <__aeabi_dcmpge>
 801189e:	2800      	cmp	r0, #0
 80118a0:	d1eb      	bne.n	801187a <__ieee754_pow+0x7fa>
 80118a2:	4b96      	ldr	r3, [pc, #600]	@ (8011afc <__ieee754_pow+0xa7c>)
 80118a4:	e003      	b.n	80118ae <__ieee754_pow+0x82e>
 80118a6:	4a96      	ldr	r2, [pc, #600]	@ (8011b00 <__ieee754_pow+0xa80>)
 80118a8:	4293      	cmp	r3, r2
 80118aa:	f240 80e7 	bls.w	8011a7c <__ieee754_pow+0x9fc>
 80118ae:	151b      	asrs	r3, r3, #20
 80118b0:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80118b4:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80118b8:	fa4a fa03 	asr.w	sl, sl, r3
 80118bc:	44da      	add	sl, fp
 80118be:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80118c2:	4890      	ldr	r0, [pc, #576]	@ (8011b04 <__ieee754_pow+0xa84>)
 80118c4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80118c8:	4108      	asrs	r0, r1
 80118ca:	ea00 030a 	and.w	r3, r0, sl
 80118ce:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80118d2:	f1c1 0114 	rsb	r1, r1, #20
 80118d6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80118da:	fa4a fa01 	asr.w	sl, sl, r1
 80118de:	f1bb 0f00 	cmp.w	fp, #0
 80118e2:	4640      	mov	r0, r8
 80118e4:	4649      	mov	r1, r9
 80118e6:	f04f 0200 	mov.w	r2, #0
 80118ea:	bfb8      	it	lt
 80118ec:	f1ca 0a00 	rsblt	sl, sl, #0
 80118f0:	f7ee fcca 	bl	8000288 <__aeabi_dsub>
 80118f4:	4680      	mov	r8, r0
 80118f6:	4689      	mov	r9, r1
 80118f8:	4632      	mov	r2, r6
 80118fa:	463b      	mov	r3, r7
 80118fc:	4640      	mov	r0, r8
 80118fe:	4649      	mov	r1, r9
 8011900:	f7ee fcc4 	bl	800028c <__adddf3>
 8011904:	2400      	movs	r4, #0
 8011906:	a36a      	add	r3, pc, #424	@ (adr r3, 8011ab0 <__ieee754_pow+0xa30>)
 8011908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801190c:	4620      	mov	r0, r4
 801190e:	460d      	mov	r5, r1
 8011910:	f7ee fe72 	bl	80005f8 <__aeabi_dmul>
 8011914:	4642      	mov	r2, r8
 8011916:	e9cd 0100 	strd	r0, r1, [sp]
 801191a:	464b      	mov	r3, r9
 801191c:	4620      	mov	r0, r4
 801191e:	4629      	mov	r1, r5
 8011920:	f7ee fcb2 	bl	8000288 <__aeabi_dsub>
 8011924:	4602      	mov	r2, r0
 8011926:	460b      	mov	r3, r1
 8011928:	4630      	mov	r0, r6
 801192a:	4639      	mov	r1, r7
 801192c:	f7ee fcac 	bl	8000288 <__aeabi_dsub>
 8011930:	a361      	add	r3, pc, #388	@ (adr r3, 8011ab8 <__ieee754_pow+0xa38>)
 8011932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011936:	f7ee fe5f 	bl	80005f8 <__aeabi_dmul>
 801193a:	a361      	add	r3, pc, #388	@ (adr r3, 8011ac0 <__ieee754_pow+0xa40>)
 801193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011940:	4680      	mov	r8, r0
 8011942:	4689      	mov	r9, r1
 8011944:	4620      	mov	r0, r4
 8011946:	4629      	mov	r1, r5
 8011948:	f7ee fe56 	bl	80005f8 <__aeabi_dmul>
 801194c:	4602      	mov	r2, r0
 801194e:	460b      	mov	r3, r1
 8011950:	4640      	mov	r0, r8
 8011952:	4649      	mov	r1, r9
 8011954:	f7ee fc9a 	bl	800028c <__adddf3>
 8011958:	4604      	mov	r4, r0
 801195a:	460d      	mov	r5, r1
 801195c:	4602      	mov	r2, r0
 801195e:	460b      	mov	r3, r1
 8011960:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011964:	f7ee fc92 	bl	800028c <__adddf3>
 8011968:	e9dd 2300 	ldrd	r2, r3, [sp]
 801196c:	4680      	mov	r8, r0
 801196e:	4689      	mov	r9, r1
 8011970:	f7ee fc8a 	bl	8000288 <__aeabi_dsub>
 8011974:	4602      	mov	r2, r0
 8011976:	460b      	mov	r3, r1
 8011978:	4620      	mov	r0, r4
 801197a:	4629      	mov	r1, r5
 801197c:	f7ee fc84 	bl	8000288 <__aeabi_dsub>
 8011980:	4642      	mov	r2, r8
 8011982:	4606      	mov	r6, r0
 8011984:	460f      	mov	r7, r1
 8011986:	464b      	mov	r3, r9
 8011988:	4640      	mov	r0, r8
 801198a:	4649      	mov	r1, r9
 801198c:	f7ee fe34 	bl	80005f8 <__aeabi_dmul>
 8011990:	a34d      	add	r3, pc, #308	@ (adr r3, 8011ac8 <__ieee754_pow+0xa48>)
 8011992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011996:	4604      	mov	r4, r0
 8011998:	460d      	mov	r5, r1
 801199a:	f7ee fe2d 	bl	80005f8 <__aeabi_dmul>
 801199e:	a34c      	add	r3, pc, #304	@ (adr r3, 8011ad0 <__ieee754_pow+0xa50>)
 80119a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a4:	f7ee fc70 	bl	8000288 <__aeabi_dsub>
 80119a8:	4622      	mov	r2, r4
 80119aa:	462b      	mov	r3, r5
 80119ac:	f7ee fe24 	bl	80005f8 <__aeabi_dmul>
 80119b0:	a349      	add	r3, pc, #292	@ (adr r3, 8011ad8 <__ieee754_pow+0xa58>)
 80119b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b6:	f7ee fc69 	bl	800028c <__adddf3>
 80119ba:	4622      	mov	r2, r4
 80119bc:	462b      	mov	r3, r5
 80119be:	f7ee fe1b 	bl	80005f8 <__aeabi_dmul>
 80119c2:	a347      	add	r3, pc, #284	@ (adr r3, 8011ae0 <__ieee754_pow+0xa60>)
 80119c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c8:	f7ee fc5e 	bl	8000288 <__aeabi_dsub>
 80119cc:	4622      	mov	r2, r4
 80119ce:	462b      	mov	r3, r5
 80119d0:	f7ee fe12 	bl	80005f8 <__aeabi_dmul>
 80119d4:	a344      	add	r3, pc, #272	@ (adr r3, 8011ae8 <__ieee754_pow+0xa68>)
 80119d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119da:	f7ee fc57 	bl	800028c <__adddf3>
 80119de:	4622      	mov	r2, r4
 80119e0:	462b      	mov	r3, r5
 80119e2:	f7ee fe09 	bl	80005f8 <__aeabi_dmul>
 80119e6:	4602      	mov	r2, r0
 80119e8:	460b      	mov	r3, r1
 80119ea:	4640      	mov	r0, r8
 80119ec:	4649      	mov	r1, r9
 80119ee:	f7ee fc4b 	bl	8000288 <__aeabi_dsub>
 80119f2:	4604      	mov	r4, r0
 80119f4:	460d      	mov	r5, r1
 80119f6:	4602      	mov	r2, r0
 80119f8:	460b      	mov	r3, r1
 80119fa:	4640      	mov	r0, r8
 80119fc:	4649      	mov	r1, r9
 80119fe:	f7ee fdfb 	bl	80005f8 <__aeabi_dmul>
 8011a02:	2200      	movs	r2, #0
 8011a04:	e9cd 0100 	strd	r0, r1, [sp]
 8011a08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	4629      	mov	r1, r5
 8011a10:	f7ee fc3a 	bl	8000288 <__aeabi_dsub>
 8011a14:	4602      	mov	r2, r0
 8011a16:	460b      	mov	r3, r1
 8011a18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011a1c:	f7ee ff16 	bl	800084c <__aeabi_ddiv>
 8011a20:	4632      	mov	r2, r6
 8011a22:	4604      	mov	r4, r0
 8011a24:	460d      	mov	r5, r1
 8011a26:	463b      	mov	r3, r7
 8011a28:	4640      	mov	r0, r8
 8011a2a:	4649      	mov	r1, r9
 8011a2c:	f7ee fde4 	bl	80005f8 <__aeabi_dmul>
 8011a30:	4632      	mov	r2, r6
 8011a32:	463b      	mov	r3, r7
 8011a34:	f7ee fc2a 	bl	800028c <__adddf3>
 8011a38:	4602      	mov	r2, r0
 8011a3a:	460b      	mov	r3, r1
 8011a3c:	4620      	mov	r0, r4
 8011a3e:	4629      	mov	r1, r5
 8011a40:	f7ee fc22 	bl	8000288 <__aeabi_dsub>
 8011a44:	4642      	mov	r2, r8
 8011a46:	464b      	mov	r3, r9
 8011a48:	f7ee fc1e 	bl	8000288 <__aeabi_dsub>
 8011a4c:	460b      	mov	r3, r1
 8011a4e:	4602      	mov	r2, r0
 8011a50:	492d      	ldr	r1, [pc, #180]	@ (8011b08 <__ieee754_pow+0xa88>)
 8011a52:	2000      	movs	r0, #0
 8011a54:	f7ee fc18 	bl	8000288 <__aeabi_dsub>
 8011a58:	ec41 0b10 	vmov	d0, r0, r1
 8011a5c:	ee10 3a90 	vmov	r3, s1
 8011a60:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011a64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011a68:	da0b      	bge.n	8011a82 <__ieee754_pow+0xa02>
 8011a6a:	4650      	mov	r0, sl
 8011a6c:	f000 f85c 	bl	8011b28 <scalbn>
 8011a70:	ec51 0b10 	vmov	r0, r1, d0
 8011a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011a78:	f7ff bb6d 	b.w	8011156 <__ieee754_pow+0xd6>
 8011a7c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8011a80:	e73a      	b.n	80118f8 <__ieee754_pow+0x878>
 8011a82:	ec51 0b10 	vmov	r0, r1, d0
 8011a86:	4619      	mov	r1, r3
 8011a88:	e7f4      	b.n	8011a74 <__ieee754_pow+0x9f4>
 8011a8a:	491f      	ldr	r1, [pc, #124]	@ (8011b08 <__ieee754_pow+0xa88>)
 8011a8c:	2000      	movs	r0, #0
 8011a8e:	f7ff bb14 	b.w	80110ba <__ieee754_pow+0x3a>
 8011a92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011a96:	f7ff bb10 	b.w	80110ba <__ieee754_pow+0x3a>
 8011a9a:	4630      	mov	r0, r6
 8011a9c:	4639      	mov	r1, r7
 8011a9e:	f7ff bb0c 	b.w	80110ba <__ieee754_pow+0x3a>
 8011aa2:	460c      	mov	r4, r1
 8011aa4:	f7ff bb69 	b.w	801117a <__ieee754_pow+0xfa>
 8011aa8:	2400      	movs	r4, #0
 8011aaa:	f7ff bb4b 	b.w	8011144 <__ieee754_pow+0xc4>
 8011aae:	bf00      	nop
 8011ab0:	00000000 	.word	0x00000000
 8011ab4:	3fe62e43 	.word	0x3fe62e43
 8011ab8:	fefa39ef 	.word	0xfefa39ef
 8011abc:	3fe62e42 	.word	0x3fe62e42
 8011ac0:	0ca86c39 	.word	0x0ca86c39
 8011ac4:	be205c61 	.word	0xbe205c61
 8011ac8:	72bea4d0 	.word	0x72bea4d0
 8011acc:	3e663769 	.word	0x3e663769
 8011ad0:	c5d26bf1 	.word	0xc5d26bf1
 8011ad4:	3ebbbd41 	.word	0x3ebbbd41
 8011ad8:	af25de2c 	.word	0xaf25de2c
 8011adc:	3f11566a 	.word	0x3f11566a
 8011ae0:	16bebd93 	.word	0x16bebd93
 8011ae4:	3f66c16c 	.word	0x3f66c16c
 8011ae8:	5555553e 	.word	0x5555553e
 8011aec:	3fc55555 	.word	0x3fc55555
 8011af0:	40900000 	.word	0x40900000
 8011af4:	4090cbff 	.word	0x4090cbff
 8011af8:	3f6f3400 	.word	0x3f6f3400
 8011afc:	4090cc00 	.word	0x4090cc00
 8011b00:	3fe00000 	.word	0x3fe00000
 8011b04:	fff00000 	.word	0xfff00000
 8011b08:	3ff00000 	.word	0x3ff00000
 8011b0c:	652b82fe 	.word	0x652b82fe
 8011b10:	3c971547 	.word	0x3c971547

08011b14 <fabs>:
 8011b14:	ec51 0b10 	vmov	r0, r1, d0
 8011b18:	4602      	mov	r2, r0
 8011b1a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011b1e:	ec43 2b10 	vmov	d0, r2, r3
 8011b22:	4770      	bx	lr
 8011b24:	0000      	movs	r0, r0
	...

08011b28 <scalbn>:
 8011b28:	b570      	push	{r4, r5, r6, lr}
 8011b2a:	ec55 4b10 	vmov	r4, r5, d0
 8011b2e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011b32:	4606      	mov	r6, r0
 8011b34:	462b      	mov	r3, r5
 8011b36:	b991      	cbnz	r1, 8011b5e <scalbn+0x36>
 8011b38:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011b3c:	4323      	orrs	r3, r4
 8011b3e:	d03b      	beq.n	8011bb8 <scalbn+0x90>
 8011b40:	4b33      	ldr	r3, [pc, #204]	@ (8011c10 <scalbn+0xe8>)
 8011b42:	4620      	mov	r0, r4
 8011b44:	4629      	mov	r1, r5
 8011b46:	2200      	movs	r2, #0
 8011b48:	f7ee fd56 	bl	80005f8 <__aeabi_dmul>
 8011b4c:	4b31      	ldr	r3, [pc, #196]	@ (8011c14 <scalbn+0xec>)
 8011b4e:	429e      	cmp	r6, r3
 8011b50:	4604      	mov	r4, r0
 8011b52:	460d      	mov	r5, r1
 8011b54:	da0f      	bge.n	8011b76 <scalbn+0x4e>
 8011b56:	a326      	add	r3, pc, #152	@ (adr r3, 8011bf0 <scalbn+0xc8>)
 8011b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b5c:	e01e      	b.n	8011b9c <scalbn+0x74>
 8011b5e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011b62:	4291      	cmp	r1, r2
 8011b64:	d10b      	bne.n	8011b7e <scalbn+0x56>
 8011b66:	4622      	mov	r2, r4
 8011b68:	4620      	mov	r0, r4
 8011b6a:	4629      	mov	r1, r5
 8011b6c:	f7ee fb8e 	bl	800028c <__adddf3>
 8011b70:	4604      	mov	r4, r0
 8011b72:	460d      	mov	r5, r1
 8011b74:	e020      	b.n	8011bb8 <scalbn+0x90>
 8011b76:	460b      	mov	r3, r1
 8011b78:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011b7c:	3936      	subs	r1, #54	@ 0x36
 8011b7e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011b82:	4296      	cmp	r6, r2
 8011b84:	dd0d      	ble.n	8011ba2 <scalbn+0x7a>
 8011b86:	2d00      	cmp	r5, #0
 8011b88:	a11b      	add	r1, pc, #108	@ (adr r1, 8011bf8 <scalbn+0xd0>)
 8011b8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b8e:	da02      	bge.n	8011b96 <scalbn+0x6e>
 8011b90:	a11b      	add	r1, pc, #108	@ (adr r1, 8011c00 <scalbn+0xd8>)
 8011b92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b96:	a318      	add	r3, pc, #96	@ (adr r3, 8011bf8 <scalbn+0xd0>)
 8011b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9c:	f7ee fd2c 	bl	80005f8 <__aeabi_dmul>
 8011ba0:	e7e6      	b.n	8011b70 <scalbn+0x48>
 8011ba2:	1872      	adds	r2, r6, r1
 8011ba4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011ba8:	428a      	cmp	r2, r1
 8011baa:	dcec      	bgt.n	8011b86 <scalbn+0x5e>
 8011bac:	2a00      	cmp	r2, #0
 8011bae:	dd06      	ble.n	8011bbe <scalbn+0x96>
 8011bb0:	f36f 531e 	bfc	r3, #20, #11
 8011bb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011bb8:	ec45 4b10 	vmov	d0, r4, r5
 8011bbc:	bd70      	pop	{r4, r5, r6, pc}
 8011bbe:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8011bc2:	da08      	bge.n	8011bd6 <scalbn+0xae>
 8011bc4:	2d00      	cmp	r5, #0
 8011bc6:	a10a      	add	r1, pc, #40	@ (adr r1, 8011bf0 <scalbn+0xc8>)
 8011bc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bcc:	dac3      	bge.n	8011b56 <scalbn+0x2e>
 8011bce:	a10e      	add	r1, pc, #56	@ (adr r1, 8011c08 <scalbn+0xe0>)
 8011bd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011bd4:	e7bf      	b.n	8011b56 <scalbn+0x2e>
 8011bd6:	3236      	adds	r2, #54	@ 0x36
 8011bd8:	f36f 531e 	bfc	r3, #20, #11
 8011bdc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011be0:	4620      	mov	r0, r4
 8011be2:	4b0d      	ldr	r3, [pc, #52]	@ (8011c18 <scalbn+0xf0>)
 8011be4:	4629      	mov	r1, r5
 8011be6:	2200      	movs	r2, #0
 8011be8:	e7d8      	b.n	8011b9c <scalbn+0x74>
 8011bea:	bf00      	nop
 8011bec:	f3af 8000 	nop.w
 8011bf0:	c2f8f359 	.word	0xc2f8f359
 8011bf4:	01a56e1f 	.word	0x01a56e1f
 8011bf8:	8800759c 	.word	0x8800759c
 8011bfc:	7e37e43c 	.word	0x7e37e43c
 8011c00:	8800759c 	.word	0x8800759c
 8011c04:	fe37e43c 	.word	0xfe37e43c
 8011c08:	c2f8f359 	.word	0xc2f8f359
 8011c0c:	81a56e1f 	.word	0x81a56e1f
 8011c10:	43500000 	.word	0x43500000
 8011c14:	ffff3cb0 	.word	0xffff3cb0
 8011c18:	3c900000 	.word	0x3c900000

08011c1c <with_errno>:
 8011c1c:	b510      	push	{r4, lr}
 8011c1e:	ed2d 8b02 	vpush	{d8}
 8011c22:	eeb0 8a40 	vmov.f32	s16, s0
 8011c26:	eef0 8a60 	vmov.f32	s17, s1
 8011c2a:	4604      	mov	r4, r0
 8011c2c:	f7fe fab2 	bl	8010194 <__errno>
 8011c30:	eeb0 0a48 	vmov.f32	s0, s16
 8011c34:	eef0 0a68 	vmov.f32	s1, s17
 8011c38:	ecbd 8b02 	vpop	{d8}
 8011c3c:	6004      	str	r4, [r0, #0]
 8011c3e:	bd10      	pop	{r4, pc}

08011c40 <xflow>:
 8011c40:	4603      	mov	r3, r0
 8011c42:	b507      	push	{r0, r1, r2, lr}
 8011c44:	ec51 0b10 	vmov	r0, r1, d0
 8011c48:	b183      	cbz	r3, 8011c6c <xflow+0x2c>
 8011c4a:	4602      	mov	r2, r0
 8011c4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011c50:	e9cd 2300 	strd	r2, r3, [sp]
 8011c54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c58:	f7ee fcce 	bl	80005f8 <__aeabi_dmul>
 8011c5c:	ec41 0b10 	vmov	d0, r0, r1
 8011c60:	2022      	movs	r0, #34	@ 0x22
 8011c62:	b003      	add	sp, #12
 8011c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c68:	f7ff bfd8 	b.w	8011c1c <with_errno>
 8011c6c:	4602      	mov	r2, r0
 8011c6e:	460b      	mov	r3, r1
 8011c70:	e7ee      	b.n	8011c50 <xflow+0x10>
 8011c72:	0000      	movs	r0, r0
 8011c74:	0000      	movs	r0, r0
	...

08011c78 <__math_uflow>:
 8011c78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011c80 <__math_uflow+0x8>
 8011c7c:	f7ff bfe0 	b.w	8011c40 <xflow>
 8011c80:	00000000 	.word	0x00000000
 8011c84:	10000000 	.word	0x10000000

08011c88 <__math_oflow>:
 8011c88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011c90 <__math_oflow+0x8>
 8011c8c:	f7ff bfd8 	b.w	8011c40 <xflow>
 8011c90:	00000000 	.word	0x00000000
 8011c94:	70000000 	.word	0x70000000

08011c98 <__ieee754_sqrt>:
 8011c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c9c:	4a66      	ldr	r2, [pc, #408]	@ (8011e38 <__ieee754_sqrt+0x1a0>)
 8011c9e:	ec55 4b10 	vmov	r4, r5, d0
 8011ca2:	43aa      	bics	r2, r5
 8011ca4:	462b      	mov	r3, r5
 8011ca6:	4621      	mov	r1, r4
 8011ca8:	d110      	bne.n	8011ccc <__ieee754_sqrt+0x34>
 8011caa:	4622      	mov	r2, r4
 8011cac:	4620      	mov	r0, r4
 8011cae:	4629      	mov	r1, r5
 8011cb0:	f7ee fca2 	bl	80005f8 <__aeabi_dmul>
 8011cb4:	4602      	mov	r2, r0
 8011cb6:	460b      	mov	r3, r1
 8011cb8:	4620      	mov	r0, r4
 8011cba:	4629      	mov	r1, r5
 8011cbc:	f7ee fae6 	bl	800028c <__adddf3>
 8011cc0:	4604      	mov	r4, r0
 8011cc2:	460d      	mov	r5, r1
 8011cc4:	ec45 4b10 	vmov	d0, r4, r5
 8011cc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ccc:	2d00      	cmp	r5, #0
 8011cce:	dc0e      	bgt.n	8011cee <__ieee754_sqrt+0x56>
 8011cd0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8011cd4:	4322      	orrs	r2, r4
 8011cd6:	d0f5      	beq.n	8011cc4 <__ieee754_sqrt+0x2c>
 8011cd8:	b19d      	cbz	r5, 8011d02 <__ieee754_sqrt+0x6a>
 8011cda:	4622      	mov	r2, r4
 8011cdc:	4620      	mov	r0, r4
 8011cde:	4629      	mov	r1, r5
 8011ce0:	f7ee fad2 	bl	8000288 <__aeabi_dsub>
 8011ce4:	4602      	mov	r2, r0
 8011ce6:	460b      	mov	r3, r1
 8011ce8:	f7ee fdb0 	bl	800084c <__aeabi_ddiv>
 8011cec:	e7e8      	b.n	8011cc0 <__ieee754_sqrt+0x28>
 8011cee:	152a      	asrs	r2, r5, #20
 8011cf0:	d115      	bne.n	8011d1e <__ieee754_sqrt+0x86>
 8011cf2:	2000      	movs	r0, #0
 8011cf4:	e009      	b.n	8011d0a <__ieee754_sqrt+0x72>
 8011cf6:	0acb      	lsrs	r3, r1, #11
 8011cf8:	3a15      	subs	r2, #21
 8011cfa:	0549      	lsls	r1, r1, #21
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d0fa      	beq.n	8011cf6 <__ieee754_sqrt+0x5e>
 8011d00:	e7f7      	b.n	8011cf2 <__ieee754_sqrt+0x5a>
 8011d02:	462a      	mov	r2, r5
 8011d04:	e7fa      	b.n	8011cfc <__ieee754_sqrt+0x64>
 8011d06:	005b      	lsls	r3, r3, #1
 8011d08:	3001      	adds	r0, #1
 8011d0a:	02dc      	lsls	r4, r3, #11
 8011d0c:	d5fb      	bpl.n	8011d06 <__ieee754_sqrt+0x6e>
 8011d0e:	1e44      	subs	r4, r0, #1
 8011d10:	1b12      	subs	r2, r2, r4
 8011d12:	f1c0 0420 	rsb	r4, r0, #32
 8011d16:	fa21 f404 	lsr.w	r4, r1, r4
 8011d1a:	4323      	orrs	r3, r4
 8011d1c:	4081      	lsls	r1, r0
 8011d1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011d22:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8011d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011d2a:	07d2      	lsls	r2, r2, #31
 8011d2c:	bf5c      	itt	pl
 8011d2e:	005b      	lslpl	r3, r3, #1
 8011d30:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8011d34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011d38:	bf58      	it	pl
 8011d3a:	0049      	lslpl	r1, r1, #1
 8011d3c:	2600      	movs	r6, #0
 8011d3e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8011d42:	107f      	asrs	r7, r7, #1
 8011d44:	0049      	lsls	r1, r1, #1
 8011d46:	2016      	movs	r0, #22
 8011d48:	4632      	mov	r2, r6
 8011d4a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8011d4e:	1915      	adds	r5, r2, r4
 8011d50:	429d      	cmp	r5, r3
 8011d52:	bfde      	ittt	le
 8011d54:	192a      	addle	r2, r5, r4
 8011d56:	1b5b      	suble	r3, r3, r5
 8011d58:	1936      	addle	r6, r6, r4
 8011d5a:	0fcd      	lsrs	r5, r1, #31
 8011d5c:	3801      	subs	r0, #1
 8011d5e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8011d62:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011d66:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8011d6a:	d1f0      	bne.n	8011d4e <__ieee754_sqrt+0xb6>
 8011d6c:	4605      	mov	r5, r0
 8011d6e:	2420      	movs	r4, #32
 8011d70:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8011d74:	4293      	cmp	r3, r2
 8011d76:	eb0c 0e00 	add.w	lr, ip, r0
 8011d7a:	dc02      	bgt.n	8011d82 <__ieee754_sqrt+0xea>
 8011d7c:	d113      	bne.n	8011da6 <__ieee754_sqrt+0x10e>
 8011d7e:	458e      	cmp	lr, r1
 8011d80:	d811      	bhi.n	8011da6 <__ieee754_sqrt+0x10e>
 8011d82:	f1be 0f00 	cmp.w	lr, #0
 8011d86:	eb0e 000c 	add.w	r0, lr, ip
 8011d8a:	da3f      	bge.n	8011e0c <__ieee754_sqrt+0x174>
 8011d8c:	2800      	cmp	r0, #0
 8011d8e:	db3d      	blt.n	8011e0c <__ieee754_sqrt+0x174>
 8011d90:	f102 0801 	add.w	r8, r2, #1
 8011d94:	1a9b      	subs	r3, r3, r2
 8011d96:	458e      	cmp	lr, r1
 8011d98:	bf88      	it	hi
 8011d9a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011d9e:	eba1 010e 	sub.w	r1, r1, lr
 8011da2:	4465      	add	r5, ip
 8011da4:	4642      	mov	r2, r8
 8011da6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8011daa:	3c01      	subs	r4, #1
 8011dac:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8011db0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011db4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8011db8:	d1dc      	bne.n	8011d74 <__ieee754_sqrt+0xdc>
 8011dba:	4319      	orrs	r1, r3
 8011dbc:	d01b      	beq.n	8011df6 <__ieee754_sqrt+0x15e>
 8011dbe:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8011e3c <__ieee754_sqrt+0x1a4>
 8011dc2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8011e40 <__ieee754_sqrt+0x1a8>
 8011dc6:	e9da 0100 	ldrd	r0, r1, [sl]
 8011dca:	e9db 2300 	ldrd	r2, r3, [fp]
 8011dce:	f7ee fa5b 	bl	8000288 <__aeabi_dsub>
 8011dd2:	e9da 8900 	ldrd	r8, r9, [sl]
 8011dd6:	4602      	mov	r2, r0
 8011dd8:	460b      	mov	r3, r1
 8011dda:	4640      	mov	r0, r8
 8011ddc:	4649      	mov	r1, r9
 8011dde:	f7ee fe87 	bl	8000af0 <__aeabi_dcmple>
 8011de2:	b140      	cbz	r0, 8011df6 <__ieee754_sqrt+0x15e>
 8011de4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8011de8:	e9da 0100 	ldrd	r0, r1, [sl]
 8011dec:	e9db 2300 	ldrd	r2, r3, [fp]
 8011df0:	d10e      	bne.n	8011e10 <__ieee754_sqrt+0x178>
 8011df2:	3601      	adds	r6, #1
 8011df4:	4625      	mov	r5, r4
 8011df6:	1073      	asrs	r3, r6, #1
 8011df8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8011dfc:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8011e00:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8011e04:	086b      	lsrs	r3, r5, #1
 8011e06:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8011e0a:	e759      	b.n	8011cc0 <__ieee754_sqrt+0x28>
 8011e0c:	4690      	mov	r8, r2
 8011e0e:	e7c1      	b.n	8011d94 <__ieee754_sqrt+0xfc>
 8011e10:	f7ee fa3c 	bl	800028c <__adddf3>
 8011e14:	e9da 8900 	ldrd	r8, r9, [sl]
 8011e18:	4602      	mov	r2, r0
 8011e1a:	460b      	mov	r3, r1
 8011e1c:	4640      	mov	r0, r8
 8011e1e:	4649      	mov	r1, r9
 8011e20:	f7ee fe5c 	bl	8000adc <__aeabi_dcmplt>
 8011e24:	b120      	cbz	r0, 8011e30 <__ieee754_sqrt+0x198>
 8011e26:	1cab      	adds	r3, r5, #2
 8011e28:	bf08      	it	eq
 8011e2a:	3601      	addeq	r6, #1
 8011e2c:	3502      	adds	r5, #2
 8011e2e:	e7e2      	b.n	8011df6 <__ieee754_sqrt+0x15e>
 8011e30:	1c6b      	adds	r3, r5, #1
 8011e32:	f023 0501 	bic.w	r5, r3, #1
 8011e36:	e7de      	b.n	8011df6 <__ieee754_sqrt+0x15e>
 8011e38:	7ff00000 	.word	0x7ff00000
 8011e3c:	08012370 	.word	0x08012370
 8011e40:	08012368 	.word	0x08012368

08011e44 <_init>:
 8011e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e46:	bf00      	nop
 8011e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e4a:	bc08      	pop	{r3}
 8011e4c:	469e      	mov	lr, r3
 8011e4e:	4770      	bx	lr

08011e50 <_fini>:
 8011e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e52:	bf00      	nop
 8011e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e56:	bc08      	pop	{r3}
 8011e58:	469e      	mov	lr, r3
 8011e5a:	4770      	bx	lr
