
fw_acquisition_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016dc4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e08  08016f68  08016f68  00017f68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017d70  08017d70  00019284  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08017d70  08017d70  00018d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017d78  08017d78  00019284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017d78  08017d78  00018d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017d7c  08017d7c  00018d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000284  20000000  08017d80  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a08  20000284  08018004  00019284  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c8c  08018004  00019c8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d468  00000000  00000000  000192b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062fe  00000000  00000000  0005671c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000036d0  00000000  00000000  0005ca20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002a99  00000000  00000000  000600f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f1ba  00000000  00000000  00062b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037417  00000000  00000000  00081d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af35d  00000000  00000000  000b915a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001684b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000faf4  00000000  00000000  001684fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00177ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000284 	.word	0x20000284
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08016f4c 	.word	0x08016f4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000288 	.word	0x20000288
 80001dc:	08016f4c 	.word	0x08016f4c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b988 	b.w	8000fa0 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	468e      	mov	lr, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d962      	bls.n	8000d84 <__udivmoddi4+0xdc>
 8000cbe:	fab2 f682 	clz	r6, r2
 8000cc2:	b14e      	cbz	r6, 8000cd8 <__udivmoddi4+0x30>
 8000cc4:	f1c6 0320 	rsb	r3, r6, #32
 8000cc8:	fa01 f806 	lsl.w	r8, r1, r6
 8000ccc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cd0:	40b7      	lsls	r7, r6
 8000cd2:	ea43 0808 	orr.w	r8, r3, r8
 8000cd6:	40b4      	lsls	r4, r6
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	fa1f fc87 	uxth.w	ip, r7
 8000ce0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ce4:	0c23      	lsrs	r3, r4, #16
 8000ce6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cee:	fb01 f20c 	mul.w	r2, r1, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cfc:	f080 80ea 	bcs.w	8000ed4 <__udivmoddi4+0x22c>
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f240 80e7 	bls.w	8000ed4 <__udivmoddi4+0x22c>
 8000d06:	3902      	subs	r1, #2
 8000d08:	443b      	add	r3, r7
 8000d0a:	1a9a      	subs	r2, r3, r2
 8000d0c:	b2a3      	uxth	r3, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1e:	459c      	cmp	ip, r3
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x8e>
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d28:	f080 80d6 	bcs.w	8000ed8 <__udivmoddi4+0x230>
 8000d2c:	459c      	cmp	ip, r3
 8000d2e:	f240 80d3 	bls.w	8000ed8 <__udivmoddi4+0x230>
 8000d32:	443b      	add	r3, r7
 8000d34:	3802      	subs	r0, #2
 8000d36:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3a:	eba3 030c 	sub.w	r3, r3, ip
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11d      	cbz	r5, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40f3      	lsrs	r3, r6
 8000d44:	2200      	movs	r2, #0
 8000d46:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d905      	bls.n	8000d5e <__udivmoddi4+0xb6>
 8000d52:	b10d      	cbz	r5, 8000d58 <__udivmoddi4+0xb0>
 8000d54:	e9c5 0100 	strd	r0, r1, [r5]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e7f5      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d5e:	fab3 f183 	clz	r1, r3
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d146      	bne.n	8000df4 <__udivmoddi4+0x14c>
 8000d66:	4573      	cmp	r3, lr
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xc8>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 8105 	bhi.w	8000f7a <__udivmoddi4+0x2d2>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	4690      	mov	r8, r2
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d0e5      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d7e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d82:	e7e2      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f000 8090 	beq.w	8000eaa <__udivmoddi4+0x202>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	f040 80a4 	bne.w	8000edc <__udivmoddi4+0x234>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9c:	b280      	uxth	r0, r0
 8000d9e:	b2bc      	uxth	r4, r7
 8000da0:	2101      	movs	r1, #1
 8000da2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000da6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dae:	fb04 f20c 	mul.w	r2, r4, ip
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x11e>
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x11c>
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	f200 80e0 	bhi.w	8000f84 <__udivmoddi4+0x2dc>
 8000dc4:	46c4      	mov	ip, r8
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dcc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dd0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dd4:	fb02 f404 	mul.w	r4, r2, r4
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x144>
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	f102 30ff 	add.w	r0, r2, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x142>
 8000de4:	429c      	cmp	r4, r3
 8000de6:	f200 80ca 	bhi.w	8000f7e <__udivmoddi4+0x2d6>
 8000dea:	4602      	mov	r2, r0
 8000dec:	1b1b      	subs	r3, r3, r4
 8000dee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000df2:	e7a5      	b.n	8000d40 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	fa0e f401 	lsl.w	r4, lr, r1
 8000e04:	fa20 f306 	lsr.w	r3, r0, r6
 8000e08:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e0c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e10:	4323      	orrs	r3, r4
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	fa1f fc87 	uxth.w	ip, r7
 8000e1a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e1e:	0c1c      	lsrs	r4, r3, #16
 8000e20:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e24:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e28:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	d909      	bls.n	8000e48 <__udivmoddi4+0x1a0>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e3a:	f080 809c 	bcs.w	8000f76 <__udivmoddi4+0x2ce>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f240 8099 	bls.w	8000f76 <__udivmoddi4+0x2ce>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	eba4 040e 	sub.w	r4, r4, lr
 8000e4c:	fa1f fe83 	uxth.w	lr, r3
 8000e50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e54:	fb09 4413 	mls	r4, r9, r3, r4
 8000e58:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e5c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e60:	45a4      	cmp	ip, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1ce>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e6a:	f080 8082 	bcs.w	8000f72 <__udivmoddi4+0x2ca>
 8000e6e:	45a4      	cmp	ip, r4
 8000e70:	d97f      	bls.n	8000f72 <__udivmoddi4+0x2ca>
 8000e72:	3b02      	subs	r3, #2
 8000e74:	443c      	add	r4, r7
 8000e76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e7a:	eba4 040c 	sub.w	r4, r4, ip
 8000e7e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e82:	4564      	cmp	r4, ip
 8000e84:	4673      	mov	r3, lr
 8000e86:	46e1      	mov	r9, ip
 8000e88:	d362      	bcc.n	8000f50 <__udivmoddi4+0x2a8>
 8000e8a:	d05f      	beq.n	8000f4c <__udivmoddi4+0x2a4>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x1fe>
 8000e8e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e92:	eb64 0409 	sbc.w	r4, r4, r9
 8000e96:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e9e:	431e      	orrs	r6, r3
 8000ea0:	40cc      	lsrs	r4, r1
 8000ea2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	e74f      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000eaa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eae:	0c01      	lsrs	r1, r0, #16
 8000eb0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000eb4:	b280      	uxth	r0, r0
 8000eb6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	463c      	mov	r4, r7
 8000ec0:	46b8      	mov	r8, r7
 8000ec2:	46be      	mov	lr, r7
 8000ec4:	2620      	movs	r6, #32
 8000ec6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eca:	eba2 0208 	sub.w	r2, r2, r8
 8000ece:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ed2:	e766      	b.n	8000da2 <__udivmoddi4+0xfa>
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	e718      	b.n	8000d0a <__udivmoddi4+0x62>
 8000ed8:	4610      	mov	r0, r2
 8000eda:	e72c      	b.n	8000d36 <__udivmoddi4+0x8e>
 8000edc:	f1c6 0220 	rsb	r2, r6, #32
 8000ee0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ee4:	40b7      	lsls	r7, r6
 8000ee6:	40b1      	lsls	r1, r6
 8000ee8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ef6:	b2bc      	uxth	r4, r7
 8000ef8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb08 f904 	mul.w	r9, r8, r4
 8000f06:	40b0      	lsls	r0, r6
 8000f08:	4589      	cmp	r9, r1
 8000f0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f0e:	b280      	uxth	r0, r0
 8000f10:	d93e      	bls.n	8000f90 <__udivmoddi4+0x2e8>
 8000f12:	1879      	adds	r1, r7, r1
 8000f14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f18:	d201      	bcs.n	8000f1e <__udivmoddi4+0x276>
 8000f1a:	4589      	cmp	r9, r1
 8000f1c:	d81f      	bhi.n	8000f5e <__udivmoddi4+0x2b6>
 8000f1e:	eba1 0109 	sub.w	r1, r1, r9
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fb09 f804 	mul.w	r8, r9, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	4542      	cmp	r2, r8
 8000f36:	d229      	bcs.n	8000f8c <__udivmoddi4+0x2e4>
 8000f38:	18ba      	adds	r2, r7, r2
 8000f3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f3e:	d2c4      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f40:	4542      	cmp	r2, r8
 8000f42:	d2c2      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f44:	f1a9 0102 	sub.w	r1, r9, #2
 8000f48:	443a      	add	r2, r7
 8000f4a:	e7be      	b.n	8000eca <__udivmoddi4+0x222>
 8000f4c:	45f0      	cmp	r8, lr
 8000f4e:	d29d      	bcs.n	8000e8c <__udivmoddi4+0x1e4>
 8000f50:	ebbe 0302 	subs.w	r3, lr, r2
 8000f54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f58:	3801      	subs	r0, #1
 8000f5a:	46e1      	mov	r9, ip
 8000f5c:	e796      	b.n	8000e8c <__udivmoddi4+0x1e4>
 8000f5e:	eba7 0909 	sub.w	r9, r7, r9
 8000f62:	4449      	add	r1, r9
 8000f64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6c:	fb09 f804 	mul.w	r8, r9, r4
 8000f70:	e7db      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f72:	4673      	mov	r3, lr
 8000f74:	e77f      	b.n	8000e76 <__udivmoddi4+0x1ce>
 8000f76:	4650      	mov	r0, sl
 8000f78:	e766      	b.n	8000e48 <__udivmoddi4+0x1a0>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e6fd      	b.n	8000d7a <__udivmoddi4+0xd2>
 8000f7e:	443b      	add	r3, r7
 8000f80:	3a02      	subs	r2, #2
 8000f82:	e733      	b.n	8000dec <__udivmoddi4+0x144>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	443b      	add	r3, r7
 8000f8a:	e71c      	b.n	8000dc6 <__udivmoddi4+0x11e>
 8000f8c:	4649      	mov	r1, r9
 8000f8e:	e79c      	b.n	8000eca <__udivmoddi4+0x222>
 8000f90:	eba1 0109 	sub.w	r1, r1, r9
 8000f94:	46c4      	mov	ip, r8
 8000f96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9a:	fb09 f804 	mul.w	r8, r9, r4
 8000f9e:	e7c4      	b.n	8000f2a <__udivmoddi4+0x282>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fb0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d013      	beq.n	8000fe4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fbc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fc0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000fc4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00b      	beq.n	8000fe4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fcc:	e000      	b.n	8000fd0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fd0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f9      	beq.n	8000fce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fda:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write( int file, char * ptr, int len )
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
    for( int i = 0; i < len; i++ )
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	e009      	b.n	8001018 <_write+0x26>
    {
        ITM_SendChar( *ptr++ );
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	60ba      	str	r2, [r7, #8]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ffc9 	bl	8000fa4 <ITM_SendChar>
    for( int i = 0; i < len; i++ )
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	dbf1      	blt.n	8001004 <_write+0x12>
    }
    return len;
 8001020:	687b      	ldr	r3, [r7, #4]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main( void )
{
 800102c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102e:	b0bd      	sub	sp, #244	@ 0xf4
 8001030:	af06      	add	r7, sp, #24
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001032:	f00b f965 	bl	800c300 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001036:	f000 f8b3 	bl	80011a0 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800103a:	f000 f9a5 	bl	8001388 <MX_GPIO_Init>
    MX_TIM1_Init();
 800103e:	f000 f951 	bl	80012e4 <MX_TIM1_Init>
    MX_SPI1_Init();
 8001042:	f000 f919 	bl	8001278 <MX_SPI1_Init>
    MX_MEMS_Init();
 8001046:	f00f fadb 	bl	8010600 <MX_MEMS_Init>
    /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start_IT( &htim1 );
 800104a:	484f      	ldr	r0, [pc, #316]	@ (8001188 <main+0x15c>)
 800104c:	f00e fc1e 	bl	800f88c <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN WHILE */
    while( 1 )
    {
        /* USER CODE END WHILE */

        MX_MEMS_Process();
 8001050:	f00f fadc 	bl	801060c <MX_MEMS_Process>
        /* USER CODE BEGIN 3 */
        if( data_ready )
 8001054:	4b4d      	ldr	r3, [pc, #308]	@ (800118c <main+0x160>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0f9      	beq.n	8001050 <main+0x24>
        {
            const char name_file[] = { "sensor_data.csv" };
 800105c:	4b4c      	ldr	r3, [pc, #304]	@ (8001190 <main+0x164>)
 800105e:	f107 04c4 	add.w	r4, r7, #196	@ 0xc4
 8001062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001064:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            const char header_csv[] = "Timestamp,Accel_X,Accel_Y,Accel_Z,Gyro_X,Gyro_Y,Gyro_Z\n";
 8001068:	4b4a      	ldr	r3, [pc, #296]	@ (8001194 <main+0x168>)
 800106a:	f107 040c 	add.w	r4, r7, #12
 800106e:	461d      	mov	r5, r3
 8001070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800107c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001080:	e884 0003 	stmia.w	r4, {r0, r1}
            // Save data to SD card
            sd_list_files();
 8001084:	f000 fdb0 	bl	8001be8 <sd_list_files>
            sd_mount();
 8001088:	f000 fb7a 	bl	8001780 <sd_mount>
            sd_write_file( name_file, header_csv ); // Write header
 800108c:	f107 020c 	add.w	r2, r7, #12
 8001090:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f000 fc08 	bl	80018ac <sd_write_file>

            for( size_t i = 0; i < AMOUNT_DATA; i++ )
 800109c:	2300      	movs	r3, #0
 800109e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80010a2:	e069      	b.n	8001178 <main+0x14c>
            {
                char line[128] = { 0 };
 80010a4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80010a8:	2280      	movs	r2, #128	@ 0x80
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f014 f929 	bl	8015304 <memset>
                snprintf( line, sizeof( line ), "%lu,%ld,%ld,%ld,%ld,%ld,%ld\n", (unsigned long) sensor_data[i].timestamp, (long) sensor_data[i].acceleration.x,
 80010b2:	4939      	ldr	r1, [pc, #228]	@ (8001198 <main+0x16c>)
 80010b4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80010b8:	4613      	mov	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	1a9b      	subs	r3, r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	4934      	ldr	r1, [pc, #208]	@ (8001198 <main+0x16c>)
 80010c8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80010cc:	4613      	mov	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	1a9b      	subs	r3, r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	440b      	add	r3, r1
 80010d6:	3304      	adds	r3, #4
 80010d8:	6819      	ldr	r1, [r3, #0]
                          (long) sensor_data[i].acceleration.y, (long) sensor_data[i].acceleration.z, (long) sensor_data[i].angular_velocity.x,
 80010da:	482f      	ldr	r0, [pc, #188]	@ (8001198 <main+0x16c>)
 80010dc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80010e0:	4613      	mov	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	1a9b      	subs	r3, r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4403      	add	r3, r0
 80010ea:	3308      	adds	r3, #8
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	4c2a      	ldr	r4, [pc, #168]	@ (8001198 <main+0x16c>)
 80010f0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80010f4:	4613      	mov	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4423      	add	r3, r4
 80010fe:	330c      	adds	r3, #12
 8001100:	681c      	ldr	r4, [r3, #0]
 8001102:	4d25      	ldr	r5, [pc, #148]	@ (8001198 <main+0x16c>)
 8001104:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001108:	4613      	mov	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	1a9b      	subs	r3, r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	442b      	add	r3, r5
 8001112:	3310      	adds	r3, #16
 8001114:	681d      	ldr	r5, [r3, #0]
                          (long) sensor_data[i].angular_velocity.y, (long) sensor_data[i].angular_velocity.z );
 8001116:	4e20      	ldr	r6, [pc, #128]	@ (8001198 <main+0x16c>)
 8001118:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800111c:	4613      	mov	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	1a9b      	subs	r3, r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4433      	add	r3, r6
 8001126:	3314      	adds	r3, #20
 8001128:	681e      	ldr	r6, [r3, #0]
 800112a:	4a1b      	ldr	r2, [pc, #108]	@ (8001198 <main+0x16c>)
 800112c:	603a      	str	r2, [r7, #0]
 800112e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001132:	4613      	mov	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	1a9b      	subs	r3, r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	4413      	add	r3, r2
 800113e:	3318      	adds	r3, #24
 8001140:	681b      	ldr	r3, [r3, #0]
                snprintf( line, sizeof( line ), "%lu,%ld,%ld,%ld,%ld,%ld,%ld\n", (unsigned long) sensor_data[i].timestamp, (long) sensor_data[i].acceleration.x,
 8001142:	f107 0c44 	add.w	ip, r7, #68	@ 0x44
 8001146:	9305      	str	r3, [sp, #20]
 8001148:	9604      	str	r6, [sp, #16]
 800114a:	9503      	str	r5, [sp, #12]
 800114c:	9402      	str	r4, [sp, #8]
 800114e:	9001      	str	r0, [sp, #4]
 8001150:	9100      	str	r1, [sp, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a11      	ldr	r2, [pc, #68]	@ (800119c <main+0x170>)
 8001156:	2180      	movs	r1, #128	@ 0x80
 8001158:	4660      	mov	r0, ip
 800115a:	f013 ffc5 	bl	80150e8 <sniprintf>
                sd_append_file( name_file, line );
 800115e:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001162:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f000 fc07 	bl	800197c <sd_append_file>
            for( size_t i = 0; i < AMOUNT_DATA; i++ )
 800116e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001172:	3301      	adds	r3, #1
 8001174:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001178:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800117c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001180:	d390      	bcc.n	80010a4 <main+0x78>
            }
            sd_unmount();
 8001182:	f000 fb71 	bl	8001868 <sd_unmount>
        MX_MEMS_Process();
 8001186:	e763      	b.n	8001050 <main+0x24>
 8001188:	200002f8 	.word	0x200002f8
 800118c:	20002410 	.word	0x20002410
 8001190:	08016f88 	.word	0x08016f88
 8001194:	08016f98 	.word	0x08016f98
 8001198:	20000340 	.word	0x20000340
 800119c:	08016f68 	.word	0x08016f68

080011a0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config( void )
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b094      	sub	sp, #80	@ 0x50
 80011a4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	2230      	movs	r2, #48	@ 0x30
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f014 f8a8 	bl	8015304 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE( );
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	4b29      	ldr	r3, [pc, #164]	@ (8001270 <SystemClock_Config+0xd0>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011cc:	4a28      	ldr	r2, [pc, #160]	@ (8001270 <SystemClock_Config+0xd0>)
 80011ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d4:	4b26      	ldr	r3, [pc, #152]	@ (8001270 <SystemClock_Config+0xd0>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG( PWR_REGULATOR_VOLTAGE_SCALE2 );
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	4b23      	ldr	r3, [pc, #140]	@ (8001274 <SystemClock_Config+0xd4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011ec:	4a21      	ldr	r2, [pc, #132]	@ (8001274 <SystemClock_Config+0xd4>)
 80011ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001274 <SystemClock_Config+0xd4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001200:	2302      	movs	r3, #2
 8001202:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001204:	2301      	movs	r3, #1
 8001206:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001208:	2310      	movs	r3, #16
 800120a:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120c:	2302      	movs	r3, #2
 800120e:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001210:	2300      	movs	r3, #0
 8001212:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 16;
 8001214:	2310      	movs	r3, #16
 8001216:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 8001218:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800121c:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800121e:	2304      	movs	r3, #4
 8001220:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8001222:	2307      	movs	r3, #7
 8001224:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if( HAL_RCC_OscConfig( &RCC_OscInitStruct ) != HAL_OK )
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	4618      	mov	r0, r3
 800122c:	f00d f9f4 	bl	800e618 <HAL_RCC_OscConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <SystemClock_Config+0x9a>
    {
        Error_Handler();
 8001236:	f000 f9bb 	bl	80015b0 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800123a:	230f      	movs	r3, #15
 800123c:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123e:	2302      	movs	r3, #2
 8001240:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001246:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800124a:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]

    if( HAL_RCC_ClockConfig( &RCC_ClkInitStruct, FLASH_LATENCY_2 ) != HAL_OK )
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	2102      	movs	r1, #2
 8001256:	4618      	mov	r0, r3
 8001258:	f00d fc56 	bl	800eb08 <HAL_RCC_ClockConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0xc6>
    {
        Error_Handler();
 8001262:	f000 f9a5 	bl	80015b0 <Error_Handler>
    }
}
 8001266:	bf00      	nop
 8001268:	3750      	adds	r7, #80	@ 0x50
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40007000 	.word	0x40007000

08001278 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init( void )
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 800127c:	4b17      	ldr	r3, [pc, #92]	@ (80012dc <MX_SPI1_Init+0x64>)
 800127e:	4a18      	ldr	r2, [pc, #96]	@ (80012e0 <MX_SPI1_Init+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8001282:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <MX_SPI1_Init+0x64>)
 8001284:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001288:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800128a:	4b14      	ldr	r3, [pc, #80]	@ (80012dc <MX_SPI1_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001290:	4b12      	ldr	r3, [pc, #72]	@ (80012dc <MX_SPI1_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001296:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <MX_SPI1_Init+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800129c:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <MX_SPI1_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <MX_SPI1_Init+0x64>)
 80012a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012a8:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80012aa:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <MX_SPI1_Init+0x64>)
 80012ac:	2228      	movs	r2, #40	@ 0x28
 80012ae:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <MX_SPI1_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b6:	4b09      	ldr	r3, [pc, #36]	@ (80012dc <MX_SPI1_Init+0x64>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012bc:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <MX_SPI1_Init+0x64>)
 80012be:	2200      	movs	r2, #0
 80012c0:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <MX_SPI1_Init+0x64>)
 80012c4:	220a      	movs	r2, #10
 80012c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    if( HAL_SPI_Init( &hspi1 ) != HAL_OK )
 80012c8:	4804      	ldr	r0, [pc, #16]	@ (80012dc <MX_SPI1_Init+0x64>)
 80012ca:	f00d fe3d 	bl	800ef48 <HAL_SPI_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_SPI1_Init+0x60>
    {
        Error_Handler();
 80012d4:	f000 f96c 	bl	80015b0 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200002a0 	.word	0x200002a0
 80012e0:	40013000 	.word	0x40013000

080012e4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init( void )
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80012ea:	f107 0308 	add.w	r3, r7, #8
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012f8:	463b      	mov	r3, r7
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 8001300:	4b1f      	ldr	r3, [pc, #124]	@ (8001380 <MX_TIM1_Init+0x9c>)
 8001302:	4a20      	ldr	r2, [pc, #128]	@ (8001384 <MX_TIM1_Init+0xa0>)
 8001304:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 8399;
 8001306:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <MX_TIM1_Init+0x9c>)
 8001308:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800130c:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b1c      	ldr	r3, [pc, #112]	@ (8001380 <MX_TIM1_Init+0x9c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 999;
 8001314:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <MX_TIM1_Init+0x9c>)
 8001316:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800131a:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <MX_TIM1_Init+0x9c>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8001322:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <MX_TIM1_Init+0x9c>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001328:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <MX_TIM1_Init+0x9c>)
 800132a:	2280      	movs	r2, #128	@ 0x80
 800132c:	619a      	str	r2, [r3, #24]
    if( HAL_TIM_Base_Init( &htim1 ) != HAL_OK )
 800132e:	4814      	ldr	r0, [pc, #80]	@ (8001380 <MX_TIM1_Init+0x9c>)
 8001330:	f00e fa5c 	bl	800f7ec <HAL_TIM_Base_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM1_Init+0x5a>
    {
        Error_Handler();
 800133a:	f000 f939 	bl	80015b0 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001342:	60bb      	str	r3, [r7, #8]
    if( HAL_TIM_ConfigClockSource( &htim1, &sClockSourceConfig ) != HAL_OK )
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	4619      	mov	r1, r3
 800134a:	480d      	ldr	r0, [pc, #52]	@ (8001380 <MX_TIM1_Init+0x9c>)
 800134c:	f00e fbf0 	bl	800fb30 <HAL_TIM_ConfigClockSource>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0x76>
    {
        Error_Handler();
 8001356:	f000 f92b 	bl	80015b0 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
    if( HAL_TIMEx_MasterConfigSynchronization( &htim1, &sMasterConfig ) != HAL_OK )
 8001362:	463b      	mov	r3, r7
 8001364:	4619      	mov	r1, r3
 8001366:	4806      	ldr	r0, [pc, #24]	@ (8001380 <MX_TIM1_Init+0x9c>)
 8001368:	f00e fdf2 	bl	800ff50 <HAL_TIMEx_MasterConfigSynchronization>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM1_Init+0x92>
    {
        Error_Handler();
 8001372:	f000 f91d 	bl	80015b0 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200002f8 	.word	0x200002f8
 8001384:	40010000 	.word	0x40010000

08001388 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init( void )
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	@ 0x28
 800138c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE( );
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b37      	ldr	r3, [pc, #220]	@ (8001480 <MX_GPIO_Init+0xf8>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a36      	ldr	r2, [pc, #216]	@ (8001480 <MX_GPIO_Init+0xf8>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b34      	ldr	r3, [pc, #208]	@ (8001480 <MX_GPIO_Init+0xf8>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE( );
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b30      	ldr	r3, [pc, #192]	@ (8001480 <MX_GPIO_Init+0xf8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001480 <MX_GPIO_Init+0xf8>)
 80013c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001480 <MX_GPIO_Init+0xf8>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE( );
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	4b29      	ldr	r3, [pc, #164]	@ (8001480 <MX_GPIO_Init+0xf8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a28      	ldr	r2, [pc, #160]	@ (8001480 <MX_GPIO_Init+0xf8>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b26      	ldr	r3, [pc, #152]	@ (8001480 <MX_GPIO_Init+0xf8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE( );
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b22      	ldr	r3, [pc, #136]	@ (8001480 <MX_GPIO_Init+0xf8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a21      	ldr	r2, [pc, #132]	@ (8001480 <MX_GPIO_Init+0xf8>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b1f      	ldr	r3, [pc, #124]	@ (8001480 <MX_GPIO_Init+0xf8>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin( LED_STATUS_D7_GPIO_Port, LED_STATUS_D7_Pin, GPIO_PIN_RESET );
 800140e:	2200      	movs	r2, #0
 8001410:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001414:	481b      	ldr	r0, [pc, #108]	@ (8001484 <MX_GPIO_Init+0xfc>)
 8001416:	f00b fbc9 	bl	800cbac <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin( SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET );
 800141a:	2201      	movs	r2, #1
 800141c:	2120      	movs	r1, #32
 800141e:	481a      	ldr	r0, [pc, #104]	@ (8001488 <MX_GPIO_Init+0x100>)
 8001420:	f00b fbc4 	bl	800cbac <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_STATUS_D7_Pin */
    GPIO_InitStruct.Pin = LED_STATUS_D7_Pin;
 8001424:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142a:	2301      	movs	r3, #1
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init( LED_STATUS_D7_GPIO_Port, &GPIO_InitStruct );
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4811      	ldr	r0, [pc, #68]	@ (8001484 <MX_GPIO_Init+0xfc>)
 800143e:	f00b f935 	bl	800c6ac <HAL_GPIO_Init>

    /*Configure GPIO pin : BUTTON_D8_Pin */
    GPIO_InitStruct.Pin = BUTTON_D8_Pin;
 8001442:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800144c:	2301      	movs	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init( BUTTON_D8_GPIO_Port, &GPIO_InitStruct );
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	480b      	ldr	r0, [pc, #44]	@ (8001484 <MX_GPIO_Init+0xfc>)
 8001458:	f00b f928 	bl	800c6ac <HAL_GPIO_Init>

    /*Configure GPIO pin : SD_CS_Pin */
    GPIO_InitStruct.Pin = SD_CS_Pin;
 800145c:	2320      	movs	r3, #32
 800145e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001460:	2301      	movs	r3, #1
 8001462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001468:	2302      	movs	r3, #2
 800146a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init( SD_CS_GPIO_Port, &GPIO_InitStruct );
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4619      	mov	r1, r3
 8001472:	4805      	ldr	r0, [pc, #20]	@ (8001488 <MX_GPIO_Init+0x100>)
 8001474:	f00b f91a 	bl	800c6ac <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */

    /* USER CODE END MX_GPIO_Init_2 */
}
 8001478:	bf00      	nop
 800147a:	3728      	adds	r7, #40	@ 0x28
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40023800 	.word	0x40023800
 8001484:	40020000 	.word	0x40020000
 8001488:	40020400 	.word	0x40020400

0800148c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef * htim )
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

    if( htim->Instance == TIM1 )  // Check if the interrupt comes from TIM1
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a3d      	ldr	r2, [pc, #244]	@ (8001590 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d174      	bne.n	8001588 <HAL_TIM_PeriodElapsedCallback+0xfc>
    {
        // Your code to be executed every second
        if( count_data < AMOUNT_DATA )
 800149e:	4b3d      	ldr	r3, [pc, #244]	@ (8001594 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80014a6:	d23c      	bcs.n	8001522 <HAL_TIM_PeriodElapsedCallback+0x96>
        {
            if( IKS4A1_MOTION_SENSOR_GetAxes(
            IKS4A1_LSM6DSV16X_0,
                                              MOTION_ACCELERO, &sensor_data[count_data].acceleration ) != 0 )
 80014a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001594 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014aa:	681a      	ldr	r2, [r3, #0]
            if( IKS4A1_MOTION_SENSOR_GetAxes(
 80014ac:	4613      	mov	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	1a9b      	subs	r3, r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4a38      	ldr	r2, [pc, #224]	@ (8001598 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80014b6:	4413      	add	r3, r2
 80014b8:	3304      	adds	r3, #4
 80014ba:	461a      	mov	r2, r3
 80014bc:	2102      	movs	r1, #2
 80014be:	2001      	movs	r0, #1
 80014c0:	f00a f99e 	bl	800b800 <IKS4A1_MOTION_SENSOR_GetAxes>
            {
                // Handle error
            }
            if( IKS4A1_MOTION_SENSOR_GetAxes(
            IKS4A1_LSM6DSV16X_0,
                                              MOTION_GYRO, &sensor_data[count_data].angular_velocity ) != 0 )
 80014c4:	4b33      	ldr	r3, [pc, #204]	@ (8001594 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014c6:	681a      	ldr	r2, [r3, #0]
            if( IKS4A1_MOTION_SENSOR_GetAxes(
 80014c8:	4613      	mov	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	1a9b      	subs	r3, r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	3310      	adds	r3, #16
 80014d2:	4a31      	ldr	r2, [pc, #196]	@ (8001598 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80014d4:	4413      	add	r3, r2
 80014d6:	461a      	mov	r2, r3
 80014d8:	2101      	movs	r1, #1
 80014da:	2001      	movs	r0, #1
 80014dc:	f00a f990 	bl	800b800 <IKS4A1_MOTION_SENSOR_GetAxes>
            {
                // Handle error
            }

            sensor_data[count_data].timestamp = count_data * BASE_TIME_TIM1; //now - prev;
 80014e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001594 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001594 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	2164      	movs	r1, #100	@ 0x64
 80014ea:	fb03 f101 	mul.w	r1, r3, r1
 80014ee:	482a      	ldr	r0, [pc, #168]	@ (8001598 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80014f0:	4613      	mov	r3, r2
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	1a9b      	subs	r3, r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4403      	add	r3, r0
 80014fa:	6019      	str	r1, [r3, #0]
            printf( "Timestamp: %lu ms\n", (unsigned long) sensor_data[count_data].timestamp );
 80014fc:	4b25      	ldr	r3, [pc, #148]	@ (8001594 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4925      	ldr	r1, [pc, #148]	@ (8001598 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001502:	4613      	mov	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	1a9b      	subs	r3, r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4619      	mov	r1, r3
 8001510:	4822      	ldr	r0, [pc, #136]	@ (800159c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001512:	f013 fd79 	bl	8015008 <iprintf>
            count_data++;
 8001516:	4b1f      	ldr	r3, [pc, #124]	@ (8001594 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3301      	adds	r3, #1
 800151c:	4a1d      	ldr	r2, [pc, #116]	@ (8001594 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	e002      	b.n	8001528 <HAL_TIM_PeriodElapsedCallback+0x9c>

        }
        else
        {
            data_ready = 1;           // avisa a thread principal
 8001522:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001524:	2201      	movs	r2, #1
 8001526:	601a      	str	r2, [r3, #0]
        }

        count_led_status++;
 8001528:	4b1e      	ldr	r3, [pc, #120]	@ (80015a4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	4a1d      	ldr	r2, [pc, #116]	@ (80015a4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001530:	6013      	str	r3, [r2, #0]
        switch( led_status )
 8001532:	4b1d      	ldr	r3, [pc, #116]	@ (80015a8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d016      	beq.n	8001568 <HAL_TIM_PeriodElapsedCallback+0xdc>
 800153a:	2b02      	cmp	r3, #2
 800153c:	dc1b      	bgt.n	8001576 <HAL_TIM_PeriodElapsedCallback+0xea>
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001542:	2b01      	cmp	r3, #1
 8001544:	d008      	beq.n	8001558 <HAL_TIM_PeriodElapsedCallback+0xcc>
 8001546:	e016      	b.n	8001576 <HAL_TIM_PeriodElapsedCallback+0xea>
        {
            case READY:
            {
                if( count_led_status >= 10 ) // toggle every second
 8001548:	4b16      	ldr	r3, [pc, #88]	@ (80015a4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b09      	cmp	r3, #9
 800154e:	d90f      	bls.n	8001570 <HAL_TIM_PeriodElapsedCallback+0xe4>
                {
                    count_led_status = 0;
 8001550:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
                }
            }
                break;
 8001556:	e00b      	b.n	8001570 <HAL_TIM_PeriodElapsedCallback+0xe4>
            case ACQUIRING:
            {
                if( count_led_status >= 5 ) // toggle every second
 8001558:	4b12      	ldr	r3, [pc, #72]	@ (80015a4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b04      	cmp	r3, #4
 800155e:	d909      	bls.n	8001574 <HAL_TIM_PeriodElapsedCallback+0xe8>
                {
                    count_led_status = 0;
 8001560:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
                }

            }
                break;
 8001566:	e005      	b.n	8001574 <HAL_TIM_PeriodElapsedCallback+0xe8>
            case COMPLETE:
            {
                count_led_status = 0;
 8001568:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
            }
                break;
 800156e:	e002      	b.n	8001576 <HAL_TIM_PeriodElapsedCallback+0xea>
                break;
 8001570:	bf00      	nop
 8001572:	e000      	b.n	8001576 <HAL_TIM_PeriodElapsedCallback+0xea>
                break;
 8001574:	bf00      	nop

        }

        if( count_led_status == 0 )
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d104      	bne.n	8001588 <HAL_TIM_PeriodElapsedCallback+0xfc>
        {
            HAL_GPIO_TogglePin( LED_STATUS_D7_GPIO_Port, LED_STATUS_D7_Pin );
 800157e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001582:	480a      	ldr	r0, [pc, #40]	@ (80015ac <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001584:	f00b fb2b 	bl	800cbde <HAL_GPIO_TogglePin>
        }

    }
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40010000 	.word	0x40010000
 8001594:	20002414 	.word	0x20002414
 8001598:	20000340 	.word	0x20000340
 800159c:	08016fd0 	.word	0x08016fd0
 80015a0:	20002410 	.word	0x20002410
 80015a4:	20002418 	.word	0x20002418
 80015a8:	2000241c 	.word	0x2000241c
 80015ac:	40020000 	.word	0x40020000

080015b0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler( void )
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b4:	b672      	cpsid	i
}
 80015b6:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while( 1 )
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <Error_Handler+0x8>

080015bc <SD_disk_status>:
#include "diskio.h"
#include "sd_spi.h"
#include "ff_gen_drv.h"


DSTATUS SD_disk_status(BYTE drv) {
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SD_disk_status+0x14>
        return STA_NOINIT;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <SD_disk_status+0x16>
    return 0;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <SD_disk_initialize>:

DSTATUS SD_disk_initialize(BYTE drv) {
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SD_disk_initialize+0x14>
        return STA_NOINIT;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e007      	b.n	8001602 <SD_disk_initialize+0x24>

    return (SD_SPI_Init() == SD_OK) ? 0 : STA_NOINIT;
 80015f2:	f000 fbd1 	bl	8001d98 <SD_SPI_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf14      	ite	ne
 80015fc:	2301      	movne	r3, #1
 80015fe:	2300      	moveq	r3, #0
 8001600:	b2db      	uxtb	r3, r3
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]
    if (pdrv != 0 || count == 0)
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <SD_disk_read+0x1c>
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <SD_disk_read+0x20>
        return RES_PARERR;
 8001628:	2304      	movs	r3, #4
 800162a:	e010      	b.n	800164e <SD_disk_read+0x42>
    if (!card_initialized) return RES_NOTRDY;
 800162c:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <SD_disk_read+0x4c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <SD_disk_read+0x2c>
 8001634:	2303      	movs	r3, #3
 8001636:	e00a      	b.n	800164e <SD_disk_read+0x42>
    return (SD_ReadBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	68b8      	ldr	r0, [r7, #8]
 800163e:	f000 fc9d 	bl	8001f7c <SD_ReadBlocks>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	bf14      	ite	ne
 8001648:	2301      	movne	r3, #1
 800164a:	2300      	moveq	r3, #0
 800164c:	b2db      	uxtb	r3, r3
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20002659 	.word	0x20002659

0800165c <SD_disk_write>:

DRESULT SD_disk_write(BYTE pdrv,  BYTE *buff, DWORD sector, UINT count) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	4603      	mov	r3, r0
 800166a:	73fb      	strb	r3, [r7, #15]
    if (pdrv || !count) return RES_PARERR;
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <SD_disk_write+0x1c>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <SD_disk_write+0x20>
 8001678:	2304      	movs	r3, #4
 800167a:	e010      	b.n	800169e <SD_disk_write+0x42>
    if (!card_initialized) return RES_NOTRDY;
 800167c:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <SD_disk_write+0x4c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <SD_disk_write+0x2c>
 8001684:	2303      	movs	r3, #3
 8001686:	e00a      	b.n	800169e <SD_disk_write+0x42>
    return (SD_WriteBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	68b8      	ldr	r0, [r7, #8]
 800168e:	f000 fd49 	bl	8002124 <SD_WriteBlocks>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf14      	ite	ne
 8001698:	2301      	movne	r3, #1
 800169a:	2300      	moveq	r3, #0
 800169c:	b2db      	uxtb	r3, r3
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20002659 	.word	0x20002659

080016ac <SD_disk_ioctl>:

DRESULT SD_disk_ioctl(BYTE pdrv, BYTE cmd, void *buff) {
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	603a      	str	r2, [r7, #0]
 80016b6:	71fb      	strb	r3, [r7, #7]
 80016b8:	460b      	mov	r3, r1
 80016ba:	71bb      	strb	r3, [r7, #6]
    if (pdrv != 0)
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SD_disk_ioctl+0x1a>
        return RES_PARERR;
 80016c2:	2304      	movs	r3, #4
 80016c4:	e022      	b.n	800170c <SD_disk_ioctl+0x60>

    switch (cmd) {
 80016c6:	79bb      	ldrb	r3, [r7, #6]
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d81e      	bhi.n	800170a <SD_disk_ioctl+0x5e>
 80016cc:	a201      	add	r2, pc, #4	@ (adr r2, 80016d4 <SD_disk_ioctl+0x28>)
 80016ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d2:	bf00      	nop
 80016d4:	080016e5 	.word	0x080016e5
 80016d8:	080016f5 	.word	0x080016f5
 80016dc:	080016e9 	.word	0x080016e9
 80016e0:	08001701 	.word	0x08001701
    case CTRL_SYNC:
        return RES_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e011      	b.n	800170c <SD_disk_ioctl+0x60>
    case GET_SECTOR_SIZE:
        *(WORD *)buff = 512;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ee:	801a      	strh	r2, [r3, #0]
        return RES_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	e00b      	b.n	800170c <SD_disk_ioctl+0x60>
    case GET_SECTOR_COUNT:
        *(DWORD *)buff = 0x10000; // Example: 32MB SD card (65536 * 512)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016fa:	601a      	str	r2, [r3, #0]
        return RES_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	e005      	b.n	800170c <SD_disk_ioctl+0x60>
    case GET_BLOCK_SIZE:
        *(DWORD *)buff = 1;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <SD_disk_ioctl+0x60>
    default:
        return RES_PARERR;
 800170a:	2304      	movs	r3, #4
    }
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <sd_get_space_kb>:
//		printf("Format failed: f_mkfs returned %d\r\n", res);
//	}
//		return res;
//}

int sd_get_space_kb(void) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
	FATFS *pfs;
	DWORD fre_clust, tot_sect, fre_sect, total_kb, free_kb;
	FRESULT res = f_getfree(sd_path, &fre_clust, &pfs);
 800171e:	f107 0208 	add.w	r2, r7, #8
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	4619      	mov	r1, r3
 8001726:	4814      	ldr	r0, [pc, #80]	@ (8001778 <sd_get_space_kb+0x60>)
 8001728:	f013 f8fe 	bl	8014928 <f_getfree>
 800172c:	4603      	mov	r3, r0
 800172e:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8001730:	7ffb      	ldrb	r3, [r7, #31]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <sd_get_space_kb+0x22>
 8001736:	7ffb      	ldrb	r3, [r7, #31]
 8001738:	e01a      	b.n	8001770 <sd_get_space_kb+0x58>

	tot_sect = (pfs->n_fatent - 2) * pfs->csize;
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	3b02      	subs	r3, #2
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	8952      	ldrh	r2, [r2, #10]
 8001744:	fb02 f303 	mul.w	r3, r2, r3
 8001748:	61bb      	str	r3, [r7, #24]
	fre_sect = fre_clust * pfs->csize;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	895b      	ldrh	r3, [r3, #10]
 800174e:	461a      	mov	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	fb02 f303 	mul.w	r3, r2, r3
 8001756:	617b      	str	r3, [r7, #20]
	total_kb = tot_sect / 2;
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	085b      	lsrs	r3, r3, #1
 800175c:	613b      	str	r3, [r7, #16]
	free_kb = fre_sect / 2;
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	085b      	lsrs	r3, r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
	printf("💾 Total: %lu KB, Free: %lu KB\r\n", total_kb, free_kb);
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	6939      	ldr	r1, [r7, #16]
 8001768:	4804      	ldr	r0, [pc, #16]	@ (800177c <sd_get_space_kb+0x64>)
 800176a:	f013 fc4d 	bl	8015008 <iprintf>
	return FR_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3720      	adds	r7, #32
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20002420 	.word	0x20002420
 800177c:	08016fe4 	.word	0x08016fe4

08001780 <sd_mount>:

int sd_mount(void) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
	FRESULT res;
	extern uint8_t sd_is_sdhc(void);

	printf("Linking SD driver...\r\n");
 8001786:	4829      	ldr	r0, [pc, #164]	@ (800182c <sd_mount+0xac>)
 8001788:	f013 fca6 	bl	80150d8 <puts>
	if (FATFS_LinkDriver(&SD_Driver, sd_path) != 0) {
 800178c:	4928      	ldr	r1, [pc, #160]	@ (8001830 <sd_mount+0xb0>)
 800178e:	4829      	ldr	r0, [pc, #164]	@ (8001834 <sd_mount+0xb4>)
 8001790:	f013 f9cc 	bl	8014b2c <FATFS_LinkDriver>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d004      	beq.n	80017a4 <sd_mount+0x24>
		printf("FATFS_LinkDriver failed\n");
 800179a:	4827      	ldr	r0, [pc, #156]	@ (8001838 <sd_mount+0xb8>)
 800179c:	f013 fc9c 	bl	80150d8 <puts>
		return FR_DISK_ERR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e03f      	b.n	8001824 <sd_mount+0xa4>
	}

	printf("Initializing disk...\r\n");
 80017a4:	4825      	ldr	r0, [pc, #148]	@ (800183c <sd_mount+0xbc>)
 80017a6:	f013 fc97 	bl	80150d8 <puts>
	DSTATUS stat = disk_initialize(0);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f00f fea6 	bl	80114fc <disk_initialize>
 80017b0:	4603      	mov	r3, r0
 80017b2:	71fb      	strb	r3, [r7, #7]
	if (stat != 0) {
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00c      	beq.n	80017d4 <sd_mount+0x54>
		printf("disk_initialize failed: 0x%02X\n", stat);
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	4619      	mov	r1, r3
 80017be:	4820      	ldr	r0, [pc, #128]	@ (8001840 <sd_mount+0xc0>)
 80017c0:	f013 fc22 	bl	8015008 <iprintf>
		printf("FR_NOT_READY\tTry Hard Reset or Check Connection/Power\r\n");
 80017c4:	481f      	ldr	r0, [pc, #124]	@ (8001844 <sd_mount+0xc4>)
 80017c6:	f013 fc87 	bl	80150d8 <puts>
		printf("Make sure \"MX_FATFS_Init\" is not being called in the main function\n"\
 80017ca:	481f      	ldr	r0, [pc, #124]	@ (8001848 <sd_mount+0xc8>)
 80017cc:	f013 fc84 	bl	80150d8 <puts>
				"You need to disable its call in CubeMX->Project Manager->Advance Settings->Uncheck Generate code for MX_FATFS_Init\r\n");
		return FR_NOT_READY;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e027      	b.n	8001824 <sd_mount+0xa4>
	}

	printf("Attempting mount at %s...\r\n", sd_path);
 80017d4:	4916      	ldr	r1, [pc, #88]	@ (8001830 <sd_mount+0xb0>)
 80017d6:	481d      	ldr	r0, [pc, #116]	@ (800184c <sd_mount+0xcc>)
 80017d8:	f013 fc16 	bl	8015008 <iprintf>
	res = f_mount(&fs, sd_path, 1);
 80017dc:	2201      	movs	r2, #1
 80017de:	4914      	ldr	r1, [pc, #80]	@ (8001830 <sd_mount+0xb0>)
 80017e0:	481b      	ldr	r0, [pc, #108]	@ (8001850 <sd_mount+0xd0>)
 80017e2:	f012 f975 	bl	8013ad0 <f_mount>
 80017e6:	4603      	mov	r3, r0
 80017e8:	71bb      	strb	r3, [r7, #6]
	if (res == FR_OK)
 80017ea:	79bb      	ldrb	r3, [r7, #6]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d113      	bne.n	8001818 <sd_mount+0x98>
	{
		printf("SD card mounted successfully at %s\r\n", sd_path);
 80017f0:	490f      	ldr	r1, [pc, #60]	@ (8001830 <sd_mount+0xb0>)
 80017f2:	4818      	ldr	r0, [pc, #96]	@ (8001854 <sd_mount+0xd4>)
 80017f4:	f013 fc08 	bl	8015008 <iprintf>
		printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 80017f8:	f000 fac2 	bl	8001d80 <sd_is_sdhc>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <sd_mount+0x86>
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <sd_mount+0xd8>)
 8001804:	e000      	b.n	8001808 <sd_mount+0x88>
 8001806:	4b15      	ldr	r3, [pc, #84]	@ (800185c <sd_mount+0xdc>)
 8001808:	4619      	mov	r1, r3
 800180a:	4815      	ldr	r0, [pc, #84]	@ (8001860 <sd_mount+0xe0>)
 800180c:	f013 fbfc 	bl	8015008 <iprintf>

		// Capacity and free space reporting
		sd_get_space_kb();
 8001810:	f7ff ff82 	bl	8001718 <sd_get_space_kb>
		return FR_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	e005      	b.n	8001824 <sd_mount+0xa4>
//		}
//		return res;
//	}

	// Any other mount error
	printf("Mount failed with code: %d\r\n", res);
 8001818:	79bb      	ldrb	r3, [r7, #6]
 800181a:	4619      	mov	r1, r3
 800181c:	4811      	ldr	r0, [pc, #68]	@ (8001864 <sd_mount+0xe4>)
 800181e:	f013 fbf3 	bl	8015008 <iprintf>
	return res;
 8001822:	79bb      	ldrb	r3, [r7, #6]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	08017008 	.word	0x08017008
 8001830:	20002420 	.word	0x20002420
 8001834:	08017878 	.word	0x08017878
 8001838:	08017020 	.word	0x08017020
 800183c:	08017038 	.word	0x08017038
 8001840:	08017050 	.word	0x08017050
 8001844:	08017070 	.word	0x08017070
 8001848:	080170a8 	.word	0x080170a8
 800184c:	08017160 	.word	0x08017160
 8001850:	20002424 	.word	0x20002424
 8001854:	0801717c 	.word	0x0801717c
 8001858:	080171a4 	.word	0x080171a4
 800185c:	080171b0 	.word	0x080171b0
 8001860:	080171b8 	.word	0x080171b8
 8001864:	080171c8 	.word	0x080171c8

08001868 <sd_unmount>:


int sd_unmount(void) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
	FRESULT res = f_mount(NULL, sd_path, 1);
 800186e:	2201      	movs	r2, #1
 8001870:	490a      	ldr	r1, [pc, #40]	@ (800189c <sd_unmount+0x34>)
 8001872:	2000      	movs	r0, #0
 8001874:	f012 f92c 	bl	8013ad0 <f_mount>
 8001878:	4603      	mov	r3, r0
 800187a:	71fb      	strb	r3, [r7, #7]
	printf("SD card unmounted: %s\r\n", (res == FR_OK) ? "OK" : "Failed");
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <sd_unmount+0x1e>
 8001882:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <sd_unmount+0x38>)
 8001884:	e000      	b.n	8001888 <sd_unmount+0x20>
 8001886:	4b07      	ldr	r3, [pc, #28]	@ (80018a4 <sd_unmount+0x3c>)
 8001888:	4619      	mov	r1, r3
 800188a:	4807      	ldr	r0, [pc, #28]	@ (80018a8 <sd_unmount+0x40>)
 800188c:	f013 fbbc 	bl	8015008 <iprintf>
	return res;
 8001890:	79fb      	ldrb	r3, [r7, #7]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20002420 	.word	0x20002420
 80018a0:	080171e8 	.word	0x080171e8
 80018a4:	080171ec 	.word	0x080171ec
 80018a8:	080171f4 	.word	0x080171f4

080018ac <sd_write_file>:

int sd_write_file(const char *filename, const char *text) {
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80018b8:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80018bc:	6018      	str	r0, [r3, #0]
 80018be:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80018c2:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80018c6:	6019      	str	r1, [r3, #0]
	FIL file;
	UINT bw;
	FRESULT res = f_open(&file, filename, FA_CREATE_ALWAYS | FA_WRITE);
 80018c8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80018cc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80018d0:	f107 000c 	add.w	r0, r7, #12
 80018d4:	220a      	movs	r2, #10
 80018d6:	6819      	ldr	r1, [r3, #0]
 80018d8:	f012 f940 	bl	8013b5c <f_open>
 80018dc:	4603      	mov	r3, r0
 80018de:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	if (res != FR_OK) return res;
 80018e2:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d002      	beq.n	80018f0 <sd_write_file+0x44>
 80018ea:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80018ee:	e03e      	b.n	800196e <sd_write_file+0xc2>

	res = f_write(&file, text, strlen(text), &bw);
 80018f0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80018f4:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	f7fe fc7b 	bl	80001f4 <strlen>
 80018fe:	4604      	mov	r4, r0
 8001900:	f107 0308 	add.w	r3, r7, #8
 8001904:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8001908:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 800190c:	f107 000c 	add.w	r0, r7, #12
 8001910:	4622      	mov	r2, r4
 8001912:	6809      	ldr	r1, [r1, #0]
 8001914:	f012 faec 	bl	8013ef0 <f_write>
 8001918:	4603      	mov	r3, r0
 800191a:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	f_close(&file);
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	4618      	mov	r0, r3
 8001924:	f012 fcd7 	bl	80142d6 <f_close>
	printf("Write %u bytes to %s\r\n", bw, filename);
 8001928:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800192c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001930:	6819      	ldr	r1, [r3, #0]
 8001932:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001936:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	480e      	ldr	r0, [pc, #56]	@ (8001978 <sd_write_file+0xcc>)
 800193e:	f013 fb63 	bl	8015008 <iprintf>
	return (res == FR_OK && bw == strlen(text)) ? FR_OK : FR_DISK_ERR;
 8001942:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10e      	bne.n	8001968 <sd_write_file+0xbc>
 800194a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800194e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	f7fe fc4e 	bl	80001f4 <strlen>
 8001958:	4602      	mov	r2, r0
 800195a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800195e:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d001      	beq.n	800196c <sd_write_file+0xc0>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <sd_write_file+0xc2>
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8001974:	46bd      	mov	sp, r7
 8001976:	bd90      	pop	{r4, r7, pc}
 8001978:	0801720c 	.word	0x0801720c

0800197c <sd_append_file>:

int sd_append_file(const char *filename, const char *text) {
 800197c:	b590      	push	{r4, r7, lr}
 800197e:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8001982:	af00      	add	r7, sp, #0
 8001984:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001988:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800198c:	6018      	str	r0, [r3, #0]
 800198e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001992:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001996:	6019      	str	r1, [r3, #0]
	FIL file;
	UINT bw;
	FRESULT res = f_open(&file, filename, FA_OPEN_ALWAYS | FA_WRITE);
 8001998:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800199c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80019a0:	f107 000c 	add.w	r0, r7, #12
 80019a4:	2212      	movs	r2, #18
 80019a6:	6819      	ldr	r1, [r3, #0]
 80019a8:	f012 f8d8 	bl	8013b5c <f_open>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	if (res != FR_OK) return res;
 80019b2:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <sd_append_file+0x44>
 80019ba:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80019be:	e058      	b.n	8001a72 <sd_append_file+0xf6>

	res = f_lseek(&file, f_size(&file));
 80019c0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80019c4:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f012 fcaa 	bl	801432a <f_lseek>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	if (res != FR_OK) {
 80019dc:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d007      	beq.n	80019f4 <sd_append_file+0x78>
		f_close(&file);
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	4618      	mov	r0, r3
 80019ea:	f012 fc74 	bl	80142d6 <f_close>
		return res;
 80019ee:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80019f2:	e03e      	b.n	8001a72 <sd_append_file+0xf6>
	}

	res = f_write(&file, text, strlen(text), &bw);
 80019f4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80019f8:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80019fc:	6818      	ldr	r0, [r3, #0]
 80019fe:	f7fe fbf9 	bl	80001f4 <strlen>
 8001a02:	4604      	mov	r4, r0
 8001a04:	f107 0308 	add.w	r3, r7, #8
 8001a08:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8001a0c:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8001a10:	f107 000c 	add.w	r0, r7, #12
 8001a14:	4622      	mov	r2, r4
 8001a16:	6809      	ldr	r1, [r1, #0]
 8001a18:	f012 fa6a 	bl	8013ef0 <f_write>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	f_close(&file);
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	4618      	mov	r0, r3
 8001a28:	f012 fc55 	bl	80142d6 <f_close>
	printf("Appended %u bytes to %s\r\n", bw, filename);
 8001a2c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001a30:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001a34:	6819      	ldr	r1, [r3, #0]
 8001a36:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001a3a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	480e      	ldr	r0, [pc, #56]	@ (8001a7c <sd_append_file+0x100>)
 8001a42:	f013 fae1 	bl	8015008 <iprintf>
	return (res == FR_OK && bw == strlen(text)) ? FR_OK : FR_DISK_ERR;
 8001a46:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10e      	bne.n	8001a6c <sd_append_file+0xf0>
 8001a4e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001a52:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	f7fe fbcc 	bl	80001f4 <strlen>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001a62:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <sd_append_file+0xf4>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e000      	b.n	8001a72 <sd_append_file+0xf6>
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd90      	pop	{r4, r7, pc}
 8001a7c:	08017224 	.word	0x08017224

08001a80 <sd_list_directory_recursive>:
	FRESULT res = f_mkdir(path);
	printf("Create directory %s: %s\r\n", path, (res == FR_OK ? "OK" : "Failed"));
	return res;
}

void sd_list_directory_recursive(const char *path, int depth) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b0fa      	sub	sp, #488	@ 0x1e8
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001a8a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001a8e:	6018      	str	r0, [r3, #0]
 8001a90:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001a94:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001a98:	6019      	str	r1, [r3, #0]
	DIR dir;
	FILINFO fno;
	FRESULT res = f_opendir(&dir, path);
 8001a9a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001a9e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001aa2:	f507 72d2 	add.w	r2, r7, #420	@ 0x1a4
 8001aa6:	6819      	ldr	r1, [r3, #0]
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	f012 fe47 	bl	801473c <f_opendir>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df
	if (res != FR_OK) {
 8001ab4:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00f      	beq.n	8001adc <sd_list_directory_recursive+0x5c>
		printf("%*s[ERR] Cannot open: %s\r\n", depth * 2, "", path);
 8001abc:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001ac0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	0059      	lsls	r1, r3, #1
 8001ac8:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001acc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a3e      	ldr	r2, [pc, #248]	@ (8001bcc <sd_list_directory_recursive+0x14c>)
 8001ad4:	483e      	ldr	r0, [pc, #248]	@ (8001bd0 <sd_list_directory_recursive+0x150>)
 8001ad6:	f013 fa97 	bl	8015008 <iprintf>
 8001ada:	e072      	b.n	8001bc2 <sd_list_directory_recursive+0x142>
		return;
	}

	while (1) {
		res = f_readdir(&dir, &fno);
 8001adc:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001ae0:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8001ae4:	4611      	mov	r1, r2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f012 fed1 	bl	801488e <f_readdir>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df
		if (res != FR_OK || fno.fname[0] == 0) break;
 8001af2:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d15e      	bne.n	8001bb8 <sd_list_directory_recursive+0x138>
 8001afa:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001afe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001b02:	7d9b      	ldrb	r3, [r3, #22]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d057      	beq.n	8001bb8 <sd_list_directory_recursive+0x138>

		const char *name = (*fno.fname) ? fno.fname : fno.fname;
 8001b08:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001b0c:	3316      	adds	r3, #22
 8001b0e:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8

		if (fno.fattrib & AM_DIR) {
 8001b12:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001b16:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001b1a:	7a1b      	ldrb	r3, [r3, #8]
 8001b1c:	f003 0310 	and.w	r3, r3, #16
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d036      	beq.n	8001b92 <sd_list_directory_recursive+0x112>
			if (strcmp(name, ".") && strcmp(name, "..")) {
 8001b24:	492b      	ldr	r1, [pc, #172]	@ (8001bd4 <sd_list_directory_recursive+0x154>)
 8001b26:	f8d7 01d8 	ldr.w	r0, [r7, #472]	@ 0x1d8
 8001b2a:	f7fe fb59 	bl	80001e0 <strcmp>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0d3      	beq.n	8001adc <sd_list_directory_recursive+0x5c>
 8001b34:	4928      	ldr	r1, [pc, #160]	@ (8001bd8 <sd_list_directory_recursive+0x158>)
 8001b36:	f8d7 01d8 	ldr.w	r0, [r7, #472]	@ 0x1d8
 8001b3a:	f7fe fb51 	bl	80001e0 <strcmp>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0cb      	beq.n	8001adc <sd_list_directory_recursive+0x5c>
				printf("%*s📁 %s\r\n", depth * 2, "", name);
 8001b44:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001b48:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	0059      	lsls	r1, r3, #1
 8001b50:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8001b54:	4a1d      	ldr	r2, [pc, #116]	@ (8001bcc <sd_list_directory_recursive+0x14c>)
 8001b56:	4821      	ldr	r0, [pc, #132]	@ (8001bdc <sd_list_directory_recursive+0x15c>)
 8001b58:	f013 fa56 	bl	8015008 <iprintf>
				char newpath[128];
				snprintf(newpath, sizeof(newpath), "%s/%s", path, name);
 8001b5c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001b60:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001b64:	f107 000c 	add.w	r0, r7, #12
 8001b68:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001b6c:	9200      	str	r2, [sp, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a1b      	ldr	r2, [pc, #108]	@ (8001be0 <sd_list_directory_recursive+0x160>)
 8001b72:	2180      	movs	r1, #128	@ 0x80
 8001b74:	f013 fab8 	bl	80150e8 <sniprintf>
				sd_list_directory_recursive(newpath, depth + 1);
 8001b78:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001b7c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	f107 030c 	add.w	r3, r7, #12
 8001b88:	4611      	mov	r1, r2
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff78 	bl	8001a80 <sd_list_directory_recursive>
 8001b90:	e7a4      	b.n	8001adc <sd_list_directory_recursive+0x5c>
			}
		} else {
			printf("%*s📄 %s (%lu bytes)\r\n", depth * 2, "", name, (unsigned long)fno.fsize);
 8001b92:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001b96:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0059      	lsls	r1, r3, #1
 8001b9e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8001ba2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8001bae:	4a07      	ldr	r2, [pc, #28]	@ (8001bcc <sd_list_directory_recursive+0x14c>)
 8001bb0:	480c      	ldr	r0, [pc, #48]	@ (8001be4 <sd_list_directory_recursive+0x164>)
 8001bb2:	f013 fa29 	bl	8015008 <iprintf>
	while (1) {
 8001bb6:	e791      	b.n	8001adc <sd_list_directory_recursive+0x5c>
		}
	}
	f_closedir(&dir);
 8001bb8:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f012 fe40 	bl	8014842 <f_closedir>
}
 8001bc2:	f507 77f0 	add.w	r7, r7, #480	@ 0x1e0
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	08017348 	.word	0x08017348
 8001bd0:	0801734c 	.word	0x0801734c
 8001bd4:	08017368 	.word	0x08017368
 8001bd8:	0801736c 	.word	0x0801736c
 8001bdc:	08017370 	.word	0x08017370
 8001be0:	08017380 	.word	0x08017380
 8001be4:	08017388 	.word	0x08017388

08001be8 <sd_list_files>:

void sd_list_files(void) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	printf("📂 Files on SD Card:\r\n");
 8001bec:	4805      	ldr	r0, [pc, #20]	@ (8001c04 <sd_list_files+0x1c>)
 8001bee:	f013 fa73 	bl	80150d8 <puts>
	sd_list_directory_recursive(sd_path, 0);
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4804      	ldr	r0, [pc, #16]	@ (8001c08 <sd_list_files+0x20>)
 8001bf6:	f7ff ff43 	bl	8001a80 <sd_list_directory_recursive>
	printf("\r\n\r\n");
 8001bfa:	4804      	ldr	r0, [pc, #16]	@ (8001c0c <sd_list_files+0x24>)
 8001bfc:	f013 fa6c 	bl	80150d8 <puts>
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	080173a4 	.word	0x080173a4
 8001c08:	20002420 	.word	0x20002420
 8001c0c:	080173bc 	.word	0x080173bc

08001c10 <SD_TransmitByte>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
	if (hspi == &hspi1) dma_rx_done = 1;
}
#endif

static void SD_TransmitByte(uint8_t data) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&SD_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 8001c1a:	1df9      	adds	r1, r7, #7
 8001c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c20:	2201      	movs	r2, #1
 8001c22:	4803      	ldr	r0, [pc, #12]	@ (8001c30 <SD_TransmitByte+0x20>)
 8001c24:	f00d fa19 	bl	800f05a <HAL_SPI_Transmit>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	200002a0 	.word	0x200002a0

08001c34 <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af02      	add	r7, sp, #8
    uint8_t dummy = 0xFF, data = 0;
 8001c3a:	23ff      	movs	r3, #255	@ 0xff
 8001c3c:	71fb      	strb	r3, [r7, #7]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	71bb      	strb	r3, [r7, #6]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dummy, &data, 1, HAL_MAX_DELAY);
 8001c42:	1dba      	adds	r2, r7, #6
 8001c44:	1df9      	adds	r1, r7, #7
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	4804      	ldr	r0, [pc, #16]	@ (8001c60 <SD_ReceiveByte+0x2c>)
 8001c50:	f00d fb47 	bl	800f2e2 <HAL_SPI_TransmitReceive>
    return data;
 8001c54:	79bb      	ldrb	r3, [r7, #6]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200002a0 	.word	0x200002a0

08001c64 <SD_TransmitBuffer>:

static void SD_TransmitBuffer(const uint8_t *buffer, uint16_t len) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	807b      	strh	r3, [r7, #2]
#if USE_DMA
    dma_tx_done = 0;
    HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t *)buffer, len);
    while (!dma_tx_done);
#else
    HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 8001c70:	887a      	ldrh	r2, [r7, #2]
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4803      	ldr	r0, [pc, #12]	@ (8001c88 <SD_TransmitBuffer+0x24>)
 8001c7a:	f00d f9ee 	bl	800f05a <HAL_SPI_Transmit>
#endif
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200002a0 	.word	0x200002a0

08001c8c <SD_ReceiveBuffer>:

static void SD_ReceiveBuffer(uint8_t *buffer, uint16_t len) {
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < len; i++) tx_dummy[i] = 0xFF;  // Fill with 0xFF
    dma_rx_done = 0;
    HAL_SPI_TransmitReceive_DMA(&hspi1, tx_dummy, buffer, len);
    while (!dma_rx_done);
#else
    for (uint16_t i = 0; i < len; i++) {
 8001c98:	2300      	movs	r3, #0
 8001c9a:	81fb      	strh	r3, [r7, #14]
 8001c9c:	e009      	b.n	8001cb2 <SD_ReceiveBuffer+0x26>
        buffer[i] = SD_ReceiveByte();
 8001c9e:	89fb      	ldrh	r3, [r7, #14]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	18d4      	adds	r4, r2, r3
 8001ca4:	f7ff ffc6 	bl	8001c34 <SD_ReceiveByte>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < len; i++) {
 8001cac:	89fb      	ldrh	r3, [r7, #14]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	81fb      	strh	r3, [r7, #14]
 8001cb2:	89fa      	ldrh	r2, [r7, #14]
 8001cb4:	887b      	ldrh	r3, [r7, #2]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d3f1      	bcc.n	8001c9e <SD_ReceiveBuffer+0x12>
    }
#endif
}
 8001cba:	bf00      	nop
 8001cbc:	bf00      	nop
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd90      	pop	{r4, r7, pc}

08001cc4 <SD_WaitReady>:

static SD_Status SD_WaitReady(void) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
    uint32_t timeout = HAL_GetTick() + 500;
 8001cca:	f00a fb7f 	bl	800c3cc <HAL_GetTick>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001cd4:	607b      	str	r3, [r7, #4]
    uint8_t resp;
    do {
        resp = SD_ReceiveByte();
 8001cd6:	f7ff ffad 	bl	8001c34 <SD_ReceiveByte>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	70fb      	strb	r3, [r7, #3]
        if (resp == 0xFF) return SD_OK;
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	2bff      	cmp	r3, #255	@ 0xff
 8001ce2:	d101      	bne.n	8001ce8 <SD_WaitReady+0x24>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e006      	b.n	8001cf6 <SD_WaitReady+0x32>
    } while (HAL_GetTick() < timeout);
 8001ce8:	f00a fb70 	bl	800c3cc <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d8f0      	bhi.n	8001cd6 <SD_WaitReady+0x12>
    return SD_ERROR;
 8001cf4:	2301      	movs	r3, #1
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	6039      	str	r1, [r7, #0]
 8001d08:	71fb      	strb	r3, [r7, #7]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	71bb      	strb	r3, [r7, #6]
    uint8_t response, retry = 0xFF;
 8001d0e:	23ff      	movs	r3, #255	@ 0xff
 8001d10:	73fb      	strb	r3, [r7, #15]

    SD_WaitReady();
 8001d12:	f7ff ffd7 	bl	8001cc4 <SD_WaitReady>
    SD_TransmitByte(0x40 | cmd);
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff76 	bl	8001c10 <SD_TransmitByte>
    SD_TransmitByte(arg >> 24);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	0e1b      	lsrs	r3, r3, #24
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ff70 	bl	8001c10 <SD_TransmitByte>
    SD_TransmitByte(arg >> 16);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	0c1b      	lsrs	r3, r3, #16
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff6a 	bl	8001c10 <SD_TransmitByte>
    SD_TransmitByte(arg >> 8);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ff64 	bl	8001c10 <SD_TransmitByte>
    SD_TransmitByte(arg);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff5f 	bl	8001c10 <SD_TransmitByte>
    SD_TransmitByte(crc);
 8001d52:	79bb      	ldrb	r3, [r7, #6]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff5b 	bl	8001c10 <SD_TransmitByte>

    do {
        response = SD_ReceiveByte();
 8001d5a:	f7ff ff6b 	bl	8001c34 <SD_ReceiveByte>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	73bb      	strb	r3, [r7, #14]
    } while ((response & 0x80) && --retry);
 8001d62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	da05      	bge.n	8001d76 <SD_SendCommand+0x78>
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f1      	bne.n	8001d5a <SD_SendCommand+0x5c>

    return response;
 8001d76:	7bbb      	ldrb	r3, [r7, #14]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <sd_is_sdhc>:

static uint8_t sdhc = 0;
uint8_t sd_is_sdhc(void) {
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
    return sdhc;
 8001d84:	4b03      	ldr	r3, [pc, #12]	@ (8001d94 <sd_is_sdhc+0x14>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20002658 	.word	0x20002658

08001d98 <SD_SPI_Init>:
uint8_t card_initialized = 0;

SD_Status SD_SPI_Init(void) {
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
    uint8_t i, response;
    uint8_t r7[4];
    uint32_t retry;

    SD_CS_HIGH();
 8001d9e:	2201      	movs	r2, #1
 8001da0:	2120      	movs	r1, #32
 8001da2:	4873      	ldr	r0, [pc, #460]	@ (8001f70 <SD_SPI_Init+0x1d8>)
 8001da4:	f00a ff02 	bl	800cbac <HAL_GPIO_WritePin>
    for (i = 0; i < 10; i++) SD_TransmitByte(0xFF);
 8001da8:	2300      	movs	r3, #0
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e005      	b.n	8001dba <SD_SPI_Init+0x22>
 8001dae:	20ff      	movs	r0, #255	@ 0xff
 8001db0:	f7ff ff2e 	bl	8001c10 <SD_TransmitByte>
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	3301      	adds	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	2b09      	cmp	r3, #9
 8001dbe:	d9f6      	bls.n	8001dae <SD_SPI_Init+0x16>

    SD_CS_LOW();
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2120      	movs	r1, #32
 8001dc4:	486a      	ldr	r0, [pc, #424]	@ (8001f70 <SD_SPI_Init+0x1d8>)
 8001dc6:	f00a fef1 	bl	800cbac <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD0, 0, 0x95);
 8001dca:	2295      	movs	r2, #149	@ 0x95
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f7ff ff95 	bl	8001cfe <SD_SendCommand>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	73bb      	strb	r3, [r7, #14]
    SD_CS_HIGH();
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2120      	movs	r1, #32
 8001ddc:	4864      	ldr	r0, [pc, #400]	@ (8001f70 <SD_SPI_Init+0x1d8>)
 8001dde:	f00a fee5 	bl	800cbac <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8001de2:	20ff      	movs	r0, #255	@ 0xff
 8001de4:	f7ff ff14 	bl	8001c10 <SD_TransmitByte>
    if (response != 0x01) return SD_ERROR;
 8001de8:	7bbb      	ldrb	r3, [r7, #14]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d001      	beq.n	8001df2 <SD_SPI_Init+0x5a>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e0ba      	b.n	8001f68 <SD_SPI_Init+0x1d0>

    SD_CS_LOW();
 8001df2:	2200      	movs	r2, #0
 8001df4:	2120      	movs	r1, #32
 8001df6:	485e      	ldr	r0, [pc, #376]	@ (8001f70 <SD_SPI_Init+0x1d8>)
 8001df8:	f00a fed8 	bl	800cbac <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD8, 0x000001AA, 0x87);
 8001dfc:	2287      	movs	r2, #135	@ 0x87
 8001dfe:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001e02:	2008      	movs	r0, #8
 8001e04:	f7ff ff7b 	bl	8001cfe <SD_SendCommand>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 4; i++) r7[i] = SD_ReceiveByte();
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e00c      	b.n	8001e2c <SD_SPI_Init+0x94>
 8001e12:	7bfc      	ldrb	r4, [r7, #15]
 8001e14:	f7ff ff0e 	bl	8001c34 <SD_ReceiveByte>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	f104 0310 	add.w	r3, r4, #16
 8001e20:	443b      	add	r3, r7
 8001e22:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001e26:	7bfb      	ldrb	r3, [r7, #15]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d9ef      	bls.n	8001e12 <SD_SPI_Init+0x7a>
    SD_CS_HIGH();
 8001e32:	2201      	movs	r2, #1
 8001e34:	2120      	movs	r1, #32
 8001e36:	484e      	ldr	r0, [pc, #312]	@ (8001f70 <SD_SPI_Init+0x1d8>)
 8001e38:	f00a feb8 	bl	800cbac <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8001e3c:	20ff      	movs	r0, #255	@ 0xff
 8001e3e:	f7ff fee7 	bl	8001c10 <SD_TransmitByte>

    sdhc = 0;
 8001e42:	4b4c      	ldr	r3, [pc, #304]	@ (8001f74 <SD_SPI_Init+0x1dc>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
    retry = HAL_GetTick() + 1000;
 8001e48:	f00a fac0 	bl	800c3cc <HAL_GetTick>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001e52:	60bb      	str	r3, [r7, #8]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001e54:	7bbb      	ldrb	r3, [r7, #14]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d15a      	bne.n	8001f10 <SD_SPI_Init+0x178>
 8001e5a:	79bb      	ldrb	r3, [r7, #6]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d157      	bne.n	8001f10 <SD_SPI_Init+0x178>
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	2baa      	cmp	r3, #170	@ 0xaa
 8001e64:	d154      	bne.n	8001f10 <SD_SPI_Init+0x178>
        do {
            SD_CS_LOW();
 8001e66:	2200      	movs	r2, #0
 8001e68:	2120      	movs	r1, #32
 8001e6a:	4841      	ldr	r0, [pc, #260]	@ (8001f70 <SD_SPI_Init+0x1d8>)
 8001e6c:	f00a fe9e 	bl	800cbac <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8001e70:	22ff      	movs	r2, #255	@ 0xff
 8001e72:	2100      	movs	r1, #0
 8001e74:	2037      	movs	r0, #55	@ 0x37
 8001e76:	f7ff ff42 	bl	8001cfe <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0x40000000, 0xFF);
 8001e7a:	22ff      	movs	r2, #255	@ 0xff
 8001e7c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e80:	2029      	movs	r0, #41	@ 0x29
 8001e82:	f7ff ff3c 	bl	8001cfe <SD_SendCommand>
 8001e86:	4603      	mov	r3, r0
 8001e88:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	2120      	movs	r1, #32
 8001e8e:	4838      	ldr	r0, [pc, #224]	@ (8001f70 <SD_SPI_Init+0x1d8>)
 8001e90:	f00a fe8c 	bl	800cbac <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8001e94:	20ff      	movs	r0, #255	@ 0xff
 8001e96:	f7ff febb 	bl	8001c10 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8001e9a:	7bbb      	ldrb	r3, [r7, #14]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <SD_SPI_Init+0x114>
 8001ea0:	f00a fa94 	bl	800c3cc <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d8dc      	bhi.n	8001e66 <SD_SPI_Init+0xce>

        if (response != 0x00) return SD_ERROR;
 8001eac:	7bbb      	ldrb	r3, [r7, #14]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <SD_SPI_Init+0x11e>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e058      	b.n	8001f68 <SD_SPI_Init+0x1d0>

        SD_CS_LOW();
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2120      	movs	r1, #32
 8001eba:	482d      	ldr	r0, [pc, #180]	@ (8001f70 <SD_SPI_Init+0x1d8>)
 8001ebc:	f00a fe76 	bl	800cbac <HAL_GPIO_WritePin>
        response = SD_SendCommand(CMD58, 0, 0xFF);
 8001ec0:	22ff      	movs	r2, #255	@ 0xff
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	203a      	movs	r0, #58	@ 0x3a
 8001ec6:	f7ff ff1a 	bl	8001cfe <SD_SendCommand>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	73bb      	strb	r3, [r7, #14]
        uint8_t ocr[4];
        for (i = 0; i < 4; i++) ocr[i] = SD_ReceiveByte();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]
 8001ed2:	e00c      	b.n	8001eee <SD_SPI_Init+0x156>
 8001ed4:	7bfc      	ldrb	r4, [r7, #15]
 8001ed6:	f7ff fead 	bl	8001c34 <SD_ReceiveByte>
 8001eda:	4603      	mov	r3, r0
 8001edc:	461a      	mov	r2, r3
 8001ede:	f104 0310 	add.w	r3, r4, #16
 8001ee2:	443b      	add	r3, r7
 8001ee4:	f803 2c10 	strb.w	r2, [r3, #-16]
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	3301      	adds	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d9ef      	bls.n	8001ed4 <SD_SPI_Init+0x13c>
        SD_CS_HIGH();
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	2120      	movs	r1, #32
 8001ef8:	481d      	ldr	r0, [pc, #116]	@ (8001f70 <SD_SPI_Init+0x1d8>)
 8001efa:	f00a fe57 	bl	800cbac <HAL_GPIO_WritePin>
        if (ocr[0] & 0x40) sdhc = 1;
 8001efe:	783b      	ldrb	r3, [r7, #0]
 8001f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d02a      	beq.n	8001f5e <SD_SPI_Init+0x1c6>
 8001f08:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <SD_SPI_Init+0x1dc>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001f0e:	e026      	b.n	8001f5e <SD_SPI_Init+0x1c6>
    } else {
        do {
            SD_CS_LOW();
 8001f10:	2200      	movs	r2, #0
 8001f12:	2120      	movs	r1, #32
 8001f14:	4816      	ldr	r0, [pc, #88]	@ (8001f70 <SD_SPI_Init+0x1d8>)
 8001f16:	f00a fe49 	bl	800cbac <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 8001f1a:	22ff      	movs	r2, #255	@ 0xff
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2037      	movs	r0, #55	@ 0x37
 8001f20:	f7ff feed 	bl	8001cfe <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0, 0xFF);
 8001f24:	22ff      	movs	r2, #255	@ 0xff
 8001f26:	2100      	movs	r1, #0
 8001f28:	2029      	movs	r0, #41	@ 0x29
 8001f2a:	f7ff fee8 	bl	8001cfe <SD_SendCommand>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 8001f32:	2201      	movs	r2, #1
 8001f34:	2120      	movs	r1, #32
 8001f36:	480e      	ldr	r0, [pc, #56]	@ (8001f70 <SD_SPI_Init+0x1d8>)
 8001f38:	f00a fe38 	bl	800cbac <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8001f3c:	20ff      	movs	r0, #255	@ 0xff
 8001f3e:	f7ff fe67 	bl	8001c10 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8001f42:	7bbb      	ldrb	r3, [r7, #14]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <SD_SPI_Init+0x1bc>
 8001f48:	f00a fa40 	bl	800c3cc <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d8dd      	bhi.n	8001f10 <SD_SPI_Init+0x178>
        if (response != 0x00) return SD_ERROR;
 8001f54:	7bbb      	ldrb	r3, [r7, #14]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <SD_SPI_Init+0x1c8>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e004      	b.n	8001f68 <SD_SPI_Init+0x1d0>
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8001f5e:	bf00      	nop
    }

    card_initialized = 1;
 8001f60:	4b05      	ldr	r3, [pc, #20]	@ (8001f78 <SD_SPI_Init+0x1e0>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
    return SD_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3714      	adds	r7, #20
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd90      	pop	{r4, r7, pc}
 8001f70:	40020400 	.word	0x40020400
 8001f74:	20002658 	.word	0x20002658
 8001f78:	20002659 	.word	0x20002659

08001f7c <SD_ReadBlocks>:

SD_Status SD_ReadBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <SD_ReadBlocks+0x16>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e054      	b.n	800203c <SD_ReadBlocks+0xc0>

    if (count == 1) {
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d14b      	bne.n	8002030 <SD_ReadBlocks+0xb4>
    	if (!sdhc) sector *= 512;
 8001f98:	4b2a      	ldr	r3, [pc, #168]	@ (8002044 <SD_ReadBlocks+0xc8>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <SD_ReadBlocks+0x2a>
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	025b      	lsls	r3, r3, #9
 8001fa4:	60bb      	str	r3, [r7, #8]
        SD_CS_LOW();
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2120      	movs	r1, #32
 8001faa:	4827      	ldr	r0, [pc, #156]	@ (8002048 <SD_ReadBlocks+0xcc>)
 8001fac:	f00a fdfe 	bl	800cbac <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD17, sector, 0xFF) != 0x00) {
 8001fb0:	22ff      	movs	r2, #255	@ 0xff
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	2011      	movs	r0, #17
 8001fb6:	f7ff fea2 	bl	8001cfe <SD_SendCommand>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d006      	beq.n	8001fce <SD_ReadBlocks+0x52>
            SD_CS_HIGH();
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	2120      	movs	r1, #32
 8001fc4:	4820      	ldr	r0, [pc, #128]	@ (8002048 <SD_ReadBlocks+0xcc>)
 8001fc6:	f00a fdf1 	bl	800cbac <HAL_GPIO_WritePin>
            return SD_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e036      	b.n	800203c <SD_ReadBlocks+0xc0>
        }

        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8001fce:	f00a f9fd 	bl	800c3cc <HAL_GetTick>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	33c8      	adds	r3, #200	@ 0xc8
 8001fd6:	617b      	str	r3, [r7, #20]
        do {
            token = SD_ReceiveByte();
 8001fd8:	f7ff fe2c 	bl	8001c34 <SD_ReceiveByte>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	2bfe      	cmp	r3, #254	@ 0xfe
 8001fe4:	d006      	beq.n	8001ff4 <SD_ReadBlocks+0x78>
        } while (HAL_GetTick() < timeout);
 8001fe6:	f00a f9f1 	bl	800c3cc <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d8f2      	bhi.n	8001fd8 <SD_ReadBlocks+0x5c>
 8001ff2:	e000      	b.n	8001ff6 <SD_ReadBlocks+0x7a>
            if (token == 0xFE) break;
 8001ff4:	bf00      	nop
        if (token != 0xFE) {
 8001ff6:	7cfb      	ldrb	r3, [r7, #19]
 8001ff8:	2bfe      	cmp	r3, #254	@ 0xfe
 8001ffa:	d006      	beq.n	800200a <SD_ReadBlocks+0x8e>
            SD_CS_HIGH();
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2120      	movs	r1, #32
 8002000:	4811      	ldr	r0, [pc, #68]	@ (8002048 <SD_ReadBlocks+0xcc>)
 8002002:	f00a fdd3 	bl	800cbac <HAL_GPIO_WritePin>
            return SD_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e018      	b.n	800203c <SD_ReadBlocks+0xc0>
        }

        SD_ReceiveBuffer(buff, 512);
 800200a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f7ff fe3c 	bl	8001c8c <SD_ReceiveBuffer>
        SD_ReceiveByte();  // CRC
 8002014:	f7ff fe0e 	bl	8001c34 <SD_ReceiveByte>
        SD_ReceiveByte();
 8002018:	f7ff fe0c 	bl	8001c34 <SD_ReceiveByte>
        SD_CS_HIGH();
 800201c:	2201      	movs	r2, #1
 800201e:	2120      	movs	r1, #32
 8002020:	4809      	ldr	r0, [pc, #36]	@ (8002048 <SD_ReadBlocks+0xcc>)
 8002022:	f00a fdc3 	bl	800cbac <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8002026:	20ff      	movs	r0, #255	@ 0xff
 8002028:	f7ff fdf2 	bl	8001c10 <SD_TransmitByte>
        return SD_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e005      	b.n	800203c <SD_ReadBlocks+0xc0>
    } else {
        return SD_ReadMultiBlocks(buff, sector, count);
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68b9      	ldr	r1, [r7, #8]
 8002034:	68f8      	ldr	r0, [r7, #12]
 8002036:	f000 f809 	bl	800204c <SD_ReadMultiBlocks>
 800203a:	4603      	mov	r3, r0
    }
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20002658 	.word	0x20002658
 8002048:	40020400 	.word	0x40020400

0800204c <SD_ReadMultiBlocks>:

SD_Status SD_ReadMultiBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <SD_ReadMultiBlocks+0x16>
 800205e:	2301      	movs	r3, #1
 8002060:	e058      	b.n	8002114 <SD_ReadMultiBlocks+0xc8>
    if (!sdhc) sector *= 512;
 8002062:	4b2e      	ldr	r3, [pc, #184]	@ (800211c <SD_ReadMultiBlocks+0xd0>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d102      	bne.n	8002070 <SD_ReadMultiBlocks+0x24>
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	025b      	lsls	r3, r3, #9
 800206e:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8002070:	2200      	movs	r2, #0
 8002072:	2120      	movs	r1, #32
 8002074:	482a      	ldr	r0, [pc, #168]	@ (8002120 <SD_ReadMultiBlocks+0xd4>)
 8002076:	f00a fd99 	bl	800cbac <HAL_GPIO_WritePin>
    if (SD_SendCommand(18, sector, 0xFF) != 0x00) {
 800207a:	22ff      	movs	r2, #255	@ 0xff
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	2012      	movs	r0, #18
 8002080:	f7ff fe3d 	bl	8001cfe <SD_SendCommand>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d031      	beq.n	80020ee <SD_ReadMultiBlocks+0xa2>
        SD_CS_HIGH();
 800208a:	2201      	movs	r2, #1
 800208c:	2120      	movs	r1, #32
 800208e:	4824      	ldr	r0, [pc, #144]	@ (8002120 <SD_ReadMultiBlocks+0xd4>)
 8002090:	f00a fd8c 	bl	800cbac <HAL_GPIO_WritePin>
        return SD_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e03d      	b.n	8002114 <SD_ReadMultiBlocks+0xc8>
    }

    while (count--) {
        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 8002098:	f00a f998 	bl	800c3cc <HAL_GetTick>
 800209c:	4603      	mov	r3, r0
 800209e:	33c8      	adds	r3, #200	@ 0xc8
 80020a0:	617b      	str	r3, [r7, #20]

        do {
            token = SD_ReceiveByte();
 80020a2:	f7ff fdc7 	bl	8001c34 <SD_ReceiveByte>
 80020a6:	4603      	mov	r3, r0
 80020a8:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 80020aa:	7cfb      	ldrb	r3, [r7, #19]
 80020ac:	2bfe      	cmp	r3, #254	@ 0xfe
 80020ae:	d006      	beq.n	80020be <SD_ReadMultiBlocks+0x72>
        } while (HAL_GetTick() < timeout);
 80020b0:	f00a f98c 	bl	800c3cc <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d8f2      	bhi.n	80020a2 <SD_ReadMultiBlocks+0x56>
 80020bc:	e000      	b.n	80020c0 <SD_ReadMultiBlocks+0x74>
            if (token == 0xFE) break;
 80020be:	bf00      	nop

        if (token != 0xFE) {
 80020c0:	7cfb      	ldrb	r3, [r7, #19]
 80020c2:	2bfe      	cmp	r3, #254	@ 0xfe
 80020c4:	d006      	beq.n	80020d4 <SD_ReadMultiBlocks+0x88>
            SD_CS_HIGH();
 80020c6:	2201      	movs	r2, #1
 80020c8:	2120      	movs	r1, #32
 80020ca:	4815      	ldr	r0, [pc, #84]	@ (8002120 <SD_ReadMultiBlocks+0xd4>)
 80020cc:	f00a fd6e 	bl	800cbac <HAL_GPIO_WritePin>
            return SD_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e01f      	b.n	8002114 <SD_ReadMultiBlocks+0xc8>
        }

        SD_ReceiveBuffer(buff, 512);
 80020d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f7ff fdd7 	bl	8001c8c <SD_ReceiveBuffer>
        SD_ReceiveByte();  // discard CRC
 80020de:	f7ff fda9 	bl	8001c34 <SD_ReceiveByte>
        SD_ReceiveByte();
 80020e2:	f7ff fda7 	bl	8001c34 <SD_ReceiveByte>

        buff += 512;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80020ec:	60fb      	str	r3, [r7, #12]
    while (count--) {
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	1e5a      	subs	r2, r3, #1
 80020f2:	607a      	str	r2, [r7, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1cf      	bne.n	8002098 <SD_ReadMultiBlocks+0x4c>
    }

    SD_SendCommand(12, 0, 0xFF);  // STOP_TRANSMISSION
 80020f8:	22ff      	movs	r2, #255	@ 0xff
 80020fa:	2100      	movs	r1, #0
 80020fc:	200c      	movs	r0, #12
 80020fe:	f7ff fdfe 	bl	8001cfe <SD_SendCommand>
    SD_CS_HIGH();
 8002102:	2201      	movs	r2, #1
 8002104:	2120      	movs	r1, #32
 8002106:	4806      	ldr	r0, [pc, #24]	@ (8002120 <SD_ReadMultiBlocks+0xd4>)
 8002108:	f00a fd50 	bl	800cbac <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF); // Extra 8 clocks
 800210c:	20ff      	movs	r0, #255	@ 0xff
 800210e:	f7ff fd7f 	bl	8001c10 <SD_TransmitByte>

    return SD_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20002658 	.word	0x20002658
 8002120:	40020400 	.word	0x40020400

08002124 <SD_WriteBlocks>:

SD_Status SD_WriteBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <SD_WriteBlocks+0x16>
 8002136:	2301      	movs	r3, #1
 8002138:	e051      	b.n	80021de <SD_WriteBlocks+0xba>

    if (count == 1) {
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d148      	bne.n	80021d2 <SD_WriteBlocks+0xae>
    	if (!sdhc) sector *= 512;
 8002140:	4b29      	ldr	r3, [pc, #164]	@ (80021e8 <SD_WriteBlocks+0xc4>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d102      	bne.n	800214e <SD_WriteBlocks+0x2a>
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	025b      	lsls	r3, r3, #9
 800214c:	60bb      	str	r3, [r7, #8]
        SD_CS_LOW();
 800214e:	2200      	movs	r2, #0
 8002150:	2120      	movs	r1, #32
 8002152:	4826      	ldr	r0, [pc, #152]	@ (80021ec <SD_WriteBlocks+0xc8>)
 8002154:	f00a fd2a 	bl	800cbac <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD24, sector, 0xFF) != 0x00) {
 8002158:	22ff      	movs	r2, #255	@ 0xff
 800215a:	68b9      	ldr	r1, [r7, #8]
 800215c:	2018      	movs	r0, #24
 800215e:	f7ff fdce 	bl	8001cfe <SD_SendCommand>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d006      	beq.n	8002176 <SD_WriteBlocks+0x52>
            SD_CS_HIGH();
 8002168:	2201      	movs	r2, #1
 800216a:	2120      	movs	r1, #32
 800216c:	481f      	ldr	r0, [pc, #124]	@ (80021ec <SD_WriteBlocks+0xc8>)
 800216e:	f00a fd1d 	bl	800cbac <HAL_GPIO_WritePin>
            return SD_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e033      	b.n	80021de <SD_WriteBlocks+0xba>
        }

        SD_TransmitByte(0xFE);
 8002176:	20fe      	movs	r0, #254	@ 0xfe
 8002178:	f7ff fd4a 	bl	8001c10 <SD_TransmitByte>
        SD_TransmitBuffer(buff, 512);
 800217c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f7ff fd6f 	bl	8001c64 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);
 8002186:	20ff      	movs	r0, #255	@ 0xff
 8002188:	f7ff fd42 	bl	8001c10 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 800218c:	20ff      	movs	r0, #255	@ 0xff
 800218e:	f7ff fd3f 	bl	8001c10 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 8002192:	f7ff fd4f 	bl	8001c34 <SD_ReceiveByte>
 8002196:	4603      	mov	r3, r0
 8002198:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 800219a:	7dfb      	ldrb	r3, [r7, #23]
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	2b05      	cmp	r3, #5
 80021a2:	d006      	beq.n	80021b2 <SD_WriteBlocks+0x8e>
            SD_CS_HIGH();
 80021a4:	2201      	movs	r2, #1
 80021a6:	2120      	movs	r1, #32
 80021a8:	4810      	ldr	r0, [pc, #64]	@ (80021ec <SD_WriteBlocks+0xc8>)
 80021aa:	f00a fcff 	bl	800cbac <HAL_GPIO_WritePin>
            return SD_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e015      	b.n	80021de <SD_WriteBlocks+0xba>
        }

        while (SD_ReceiveByte() == 0);
 80021b2:	bf00      	nop
 80021b4:	f7ff fd3e 	bl	8001c34 <SD_ReceiveByte>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0fa      	beq.n	80021b4 <SD_WriteBlocks+0x90>
        SD_CS_HIGH();
 80021be:	2201      	movs	r2, #1
 80021c0:	2120      	movs	r1, #32
 80021c2:	480a      	ldr	r0, [pc, #40]	@ (80021ec <SD_WriteBlocks+0xc8>)
 80021c4:	f00a fcf2 	bl	800cbac <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 80021c8:	20ff      	movs	r0, #255	@ 0xff
 80021ca:	f7ff fd21 	bl	8001c10 <SD_TransmitByte>

        return SD_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e005      	b.n	80021de <SD_WriteBlocks+0xba>
    } else {
        return SD_WriteMultiBlocks(buff, sector, count);
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f80a 	bl	80021f0 <SD_WriteMultiBlocks>
 80021dc:	4603      	mov	r3, r0
    }
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20002658 	.word	0x20002658
 80021ec:	40020400 	.word	0x40020400

080021f0 <SD_WriteMultiBlocks>:

SD_Status SD_WriteMultiBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <SD_WriteMultiBlocks+0x16>
 8002202:	2301      	movs	r3, #1
 8002204:	e059      	b.n	80022ba <SD_WriteMultiBlocks+0xca>
    if (!sdhc) sector *= 512;
 8002206:	4b2f      	ldr	r3, [pc, #188]	@ (80022c4 <SD_WriteMultiBlocks+0xd4>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d102      	bne.n	8002214 <SD_WriteMultiBlocks+0x24>
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	025b      	lsls	r3, r3, #9
 8002212:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8002214:	2200      	movs	r2, #0
 8002216:	2120      	movs	r1, #32
 8002218:	482b      	ldr	r0, [pc, #172]	@ (80022c8 <SD_WriteMultiBlocks+0xd8>)
 800221a:	f00a fcc7 	bl	800cbac <HAL_GPIO_WritePin>
    if (SD_SendCommand(25, sector, 0xFF) != 0x00) {
 800221e:	22ff      	movs	r2, #255	@ 0xff
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	2019      	movs	r0, #25
 8002224:	f7ff fd6b 	bl	8001cfe <SD_SendCommand>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d02e      	beq.n	800228c <SD_WriteMultiBlocks+0x9c>
        SD_CS_HIGH();
 800222e:	2201      	movs	r2, #1
 8002230:	2120      	movs	r1, #32
 8002232:	4825      	ldr	r0, [pc, #148]	@ (80022c8 <SD_WriteMultiBlocks+0xd8>)
 8002234:	f00a fcba 	bl	800cbac <HAL_GPIO_WritePin>
        return SD_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e03e      	b.n	80022ba <SD_WriteMultiBlocks+0xca>
    }

    while (count--) {
        SD_TransmitByte(0xFC);  // Start multi-block write token
 800223c:	20fc      	movs	r0, #252	@ 0xfc
 800223e:	f7ff fce7 	bl	8001c10 <SD_TransmitByte>

        SD_TransmitBuffer((uint8_t *)buff, 512);
 8002242:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f7ff fd0c 	bl	8001c64 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);  // dummy CRC
 800224c:	20ff      	movs	r0, #255	@ 0xff
 800224e:	f7ff fcdf 	bl	8001c10 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 8002252:	20ff      	movs	r0, #255	@ 0xff
 8002254:	f7ff fcdc 	bl	8001c10 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 8002258:	f7ff fcec 	bl	8001c34 <SD_ReceiveByte>
 800225c:	4603      	mov	r3, r0
 800225e:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 8002260:	7dfb      	ldrb	r3, [r7, #23]
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	2b05      	cmp	r3, #5
 8002268:	d006      	beq.n	8002278 <SD_WriteMultiBlocks+0x88>
            SD_CS_HIGH();
 800226a:	2201      	movs	r2, #1
 800226c:	2120      	movs	r1, #32
 800226e:	4816      	ldr	r0, [pc, #88]	@ (80022c8 <SD_WriteMultiBlocks+0xd8>)
 8002270:	f00a fc9c 	bl	800cbac <HAL_GPIO_WritePin>
            return SD_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e020      	b.n	80022ba <SD_WriteMultiBlocks+0xca>
        }

        while (SD_ReceiveByte() == 0);  // busy wait
 8002278:	bf00      	nop
 800227a:	f7ff fcdb 	bl	8001c34 <SD_ReceiveByte>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0fa      	beq.n	800227a <SD_WriteMultiBlocks+0x8a>
        buff += 512;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800228a:	60fb      	str	r3, [r7, #12]
    while (count--) {
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	1e5a      	subs	r2, r3, #1
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1d2      	bne.n	800223c <SD_WriteMultiBlocks+0x4c>
    }

    SD_TransmitByte(0xFD);  // STOP_TRAN token
 8002296:	20fd      	movs	r0, #253	@ 0xfd
 8002298:	f7ff fcba 	bl	8001c10 <SD_TransmitByte>
    while (SD_ReceiveByte() == 0);  // busy wait
 800229c:	bf00      	nop
 800229e:	f7ff fcc9 	bl	8001c34 <SD_ReceiveByte>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0fa      	beq.n	800229e <SD_WriteMultiBlocks+0xae>

    SD_CS_HIGH();
 80022a8:	2201      	movs	r2, #1
 80022aa:	2120      	movs	r1, #32
 80022ac:	4806      	ldr	r0, [pc, #24]	@ (80022c8 <SD_WriteMultiBlocks+0xd8>)
 80022ae:	f00a fc7d 	bl	800cbac <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 80022b2:	20ff      	movs	r0, #255	@ 0xff
 80022b4:	f7ff fcac 	bl	8001c10 <SD_TransmitByte>

    return SD_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20002658 	.word	0x20002658
 80022c8:	40020400 	.word	0x40020400

080022cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <HAL_MspInit+0x4c>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	4a0f      	ldr	r2, [pc, #60]	@ (8002318 <HAL_MspInit+0x4c>)
 80022dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002318 <HAL_MspInit+0x4c>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ea:	607b      	str	r3, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <HAL_MspInit+0x4c>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f6:	4a08      	ldr	r2, [pc, #32]	@ (8002318 <HAL_MspInit+0x4c>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022fe:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <HAL_MspInit+0x4c>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800

0800231c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	@ 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a19      	ldr	r2, [pc, #100]	@ (80023a0 <HAL_SPI_MspInit+0x84>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d12b      	bne.n	8002396 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b18      	ldr	r3, [pc, #96]	@ (80023a4 <HAL_SPI_MspInit+0x88>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	4a17      	ldr	r2, [pc, #92]	@ (80023a4 <HAL_SPI_MspInit+0x88>)
 8002348:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800234c:	6453      	str	r3, [r2, #68]	@ 0x44
 800234e:	4b15      	ldr	r3, [pc, #84]	@ (80023a4 <HAL_SPI_MspInit+0x88>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002352:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b11      	ldr	r3, [pc, #68]	@ (80023a4 <HAL_SPI_MspInit+0x88>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	4a10      	ldr	r2, [pc, #64]	@ (80023a4 <HAL_SPI_MspInit+0x88>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6313      	str	r3, [r2, #48]	@ 0x30
 800236a:	4b0e      	ldr	r3, [pc, #56]	@ (80023a4 <HAL_SPI_MspInit+0x88>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002376:	23e0      	movs	r3, #224	@ 0xe0
 8002378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002386:	2305      	movs	r3, #5
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238a:	f107 0314 	add.w	r3, r7, #20
 800238e:	4619      	mov	r1, r3
 8002390:	4805      	ldr	r0, [pc, #20]	@ (80023a8 <HAL_SPI_MspInit+0x8c>)
 8002392:	f00a f98b 	bl	800c6ac <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002396:	bf00      	nop
 8002398:	3728      	adds	r7, #40	@ 0x28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40013000 	.word	0x40013000
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40020000 	.word	0x40020000

080023ac <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a12      	ldr	r2, [pc, #72]	@ (8002404 <HAL_TIM_Base_MspInit+0x58>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d11d      	bne.n	80023fa <HAL_TIM_Base_MspInit+0x4e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	4b11      	ldr	r3, [pc, #68]	@ (8002408 <HAL_TIM_Base_MspInit+0x5c>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	4a10      	ldr	r2, [pc, #64]	@ (8002408 <HAL_TIM_Base_MspInit+0x5c>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002408 <HAL_TIM_Base_MspInit+0x5c>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80023da:	2200      	movs	r2, #0
 80023dc:	2100      	movs	r1, #0
 80023de:	2018      	movs	r0, #24
 80023e0:	f00a f8ff 	bl	800c5e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80023e4:	2018      	movs	r0, #24
 80023e6:	f00a f918 	bl	800c61a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2100      	movs	r1, #0
 80023ee:	2019      	movs	r0, #25
 80023f0:	f00a f8f7 	bl	800c5e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023f4:	2019      	movs	r0, #25
 80023f6:	f00a f910 	bl	800c61a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40010000 	.word	0x40010000
 8002408:	40023800 	.word	0x40023800

0800240c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <NMI_Handler+0x4>

08002414 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002418:	bf00      	nop
 800241a:	e7fd      	b.n	8002418 <HardFault_Handler+0x4>

0800241c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002420:	bf00      	nop
 8002422:	e7fd      	b.n	8002420 <MemManage_Handler+0x4>

08002424 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <BusFault_Handler+0x4>

0800242c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <UsageFault_Handler+0x4>

08002434 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002462:	f009 ff9f 	bl	800c3a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002470:	4802      	ldr	r0, [pc, #8]	@ (800247c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002472:	f00d fa6d 	bl	800f950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200002f8 	.word	0x200002f8

08002480 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002484:	4802      	ldr	r0, [pc, #8]	@ (8002490 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002486:	f00d fa63 	bl	800f950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200002f8 	.word	0x200002f8

08002494 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800249e:	4b13      	ldr	r3, [pc, #76]	@ (80024ec <BSP_I2C1_Init+0x58>)
 80024a0:	4a13      	ldr	r2, [pc, #76]	@ (80024f0 <BSP_I2C1_Init+0x5c>)
 80024a2:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80024a4:	4b13      	ldr	r3, [pc, #76]	@ (80024f4 <BSP_I2C1_Init+0x60>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	4912      	ldr	r1, [pc, #72]	@ (80024f4 <BSP_I2C1_Init+0x60>)
 80024ac:	600a      	str	r2, [r1, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d117      	bne.n	80024e2 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80024b2:	480e      	ldr	r0, [pc, #56]	@ (80024ec <BSP_I2C1_Init+0x58>)
 80024b4:	f00b fb92 	bl	800dbdc <HAL_I2C_GetState>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d111      	bne.n	80024e2 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80024be:	480b      	ldr	r0, [pc, #44]	@ (80024ec <BSP_I2C1_Init+0x58>)
 80024c0:	f000 f936 	bl	8002730 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10b      	bne.n	80024e2 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80024ca:	4808      	ldr	r0, [pc, #32]	@ (80024ec <BSP_I2C1_Init+0x58>)
 80024cc:	f000 f8fc 	bl	80026c8 <MX_I2C1_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80024d6:	f06f 0307 	mvn.w	r3, #7
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	e001      	b.n	80024e2 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80024de:	2300      	movs	r3, #0
 80024e0:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80024e2:	687b      	ldr	r3, [r7, #4]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	2000265c 	.word	0x2000265c
 80024f0:	40005400 	.word	0x40005400
 80024f4:	200026b0 	.word	0x200026b0

080024f8 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80024fe:	2300      	movs	r3, #0
 8002500:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8002502:	4b0f      	ldr	r3, [pc, #60]	@ (8002540 <BSP_I2C1_DeInit+0x48>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d014      	beq.n	8002534 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800250a:	4b0d      	ldr	r3, [pc, #52]	@ (8002540 <BSP_I2C1_DeInit+0x48>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3b01      	subs	r3, #1
 8002510:	4a0b      	ldr	r2, [pc, #44]	@ (8002540 <BSP_I2C1_DeInit+0x48>)
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	4b0a      	ldr	r3, [pc, #40]	@ (8002540 <BSP_I2C1_DeInit+0x48>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10b      	bne.n	8002534 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800251c:	4809      	ldr	r0, [pc, #36]	@ (8002544 <BSP_I2C1_DeInit+0x4c>)
 800251e:	f000 f951 	bl	80027c4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002522:	4808      	ldr	r0, [pc, #32]	@ (8002544 <BSP_I2C1_DeInit+0x4c>)
 8002524:	f00a fcba 	bl	800ce9c <HAL_I2C_DeInit>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800252e:	f06f 0307 	mvn.w	r3, #7
 8002532:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002534:	687b      	ldr	r3, [r7, #4]
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	200026b0 	.word	0x200026b0
 8002544:	2000265c 	.word	0x2000265c

08002548 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	@ 0x28
 800254c:	af04      	add	r7, sp, #16
 800254e:	60ba      	str	r2, [r7, #8]
 8002550:	461a      	mov	r2, r3
 8002552:	4603      	mov	r3, r0
 8002554:	81fb      	strh	r3, [r7, #14]
 8002556:	460b      	mov	r3, r1
 8002558:	81bb      	strh	r3, [r7, #12]
 800255a:	4613      	mov	r3, r2
 800255c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002562:	89ba      	ldrh	r2, [r7, #12]
 8002564:	89f9      	ldrh	r1, [r7, #14]
 8002566:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800256a:	9302      	str	r3, [sp, #8]
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2301      	movs	r3, #1
 8002576:	480c      	ldr	r0, [pc, #48]	@ (80025a8 <BSP_I2C1_WriteReg+0x60>)
 8002578:	f00b f804 	bl	800d584 <HAL_I2C_Mem_Write>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00c      	beq.n	800259c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002582:	4809      	ldr	r0, [pc, #36]	@ (80025a8 <BSP_I2C1_WriteReg+0x60>)
 8002584:	f00b fb38 	bl	800dbf8 <HAL_I2C_GetError>
 8002588:	4603      	mov	r3, r0
 800258a:	2b04      	cmp	r3, #4
 800258c:	d103      	bne.n	8002596 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800258e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	e002      	b.n	800259c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002596:	f06f 0303 	mvn.w	r3, #3
 800259a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800259c:	697b      	ldr	r3, [r7, #20]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	2000265c 	.word	0x2000265c

080025ac <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	@ 0x28
 80025b0:	af04      	add	r7, sp, #16
 80025b2:	60ba      	str	r2, [r7, #8]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	81fb      	strh	r3, [r7, #14]
 80025ba:	460b      	mov	r3, r1
 80025bc:	81bb      	strh	r3, [r7, #12]
 80025be:	4613      	mov	r3, r2
 80025c0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80025c6:	89ba      	ldrh	r2, [r7, #12]
 80025c8:	89f9      	ldrh	r1, [r7, #14]
 80025ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025ce:	9302      	str	r3, [sp, #8]
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	2301      	movs	r3, #1
 80025da:	480c      	ldr	r0, [pc, #48]	@ (800260c <BSP_I2C1_ReadReg+0x60>)
 80025dc:	f00b f8cc 	bl	800d778 <HAL_I2C_Mem_Read>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00c      	beq.n	8002600 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80025e6:	4809      	ldr	r0, [pc, #36]	@ (800260c <BSP_I2C1_ReadReg+0x60>)
 80025e8:	f00b fb06 	bl	800dbf8 <HAL_I2C_GetError>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d103      	bne.n	80025fa <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80025f2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	e002      	b.n	8002600 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80025fa:	f06f 0303 	mvn.w	r3, #3
 80025fe:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002600:	697b      	ldr	r3, [r7, #20]
}
 8002602:	4618      	mov	r0, r3
 8002604:	3718      	adds	r7, #24
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	2000265c 	.word	0x2000265c

08002610 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af02      	add	r7, sp, #8
 8002616:	4603      	mov	r3, r0
 8002618:	6039      	str	r1, [r7, #0]
 800261a:	80fb      	strh	r3, [r7, #6]
 800261c:	4613      	mov	r3, r2
 800261e:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002624:	88bb      	ldrh	r3, [r7, #4]
 8002626:	88f9      	ldrh	r1, [r7, #6]
 8002628:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800262c:	9200      	str	r2, [sp, #0]
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	480b      	ldr	r0, [pc, #44]	@ (8002660 <BSP_I2C1_Send+0x50>)
 8002632:	f00a fc77 	bl	800cf24 <HAL_I2C_Master_Transmit>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00c      	beq.n	8002656 <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 800263c:	4808      	ldr	r0, [pc, #32]	@ (8002660 <BSP_I2C1_Send+0x50>)
 800263e:	f00b fadb 	bl	800dbf8 <HAL_I2C_GetError>
 8002642:	4603      	mov	r3, r0
 8002644:	2b04      	cmp	r3, #4
 8002646:	d003      	beq.n	8002650 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002648:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	e002      	b.n	8002656 <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002650:	f06f 0303 	mvn.w	r3, #3
 8002654:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002656:	68fb      	ldr	r3, [r7, #12]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	2000265c 	.word	0x2000265c

08002664 <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af02      	add	r7, sp, #8
 800266a:	4603      	mov	r3, r0
 800266c:	6039      	str	r1, [r7, #0]
 800266e:	80fb      	strh	r3, [r7, #6]
 8002670:	4613      	mov	r3, r2
 8002672:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002678:	88bb      	ldrh	r3, [r7, #4]
 800267a:	88f9      	ldrh	r1, [r7, #6]
 800267c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002680:	9200      	str	r2, [sp, #0]
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	480b      	ldr	r0, [pc, #44]	@ (80026b4 <BSP_I2C1_Recv+0x50>)
 8002686:	f00a fd4b 	bl	800d120 <HAL_I2C_Master_Receive>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00c      	beq.n	80026aa <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8002690:	4808      	ldr	r0, [pc, #32]	@ (80026b4 <BSP_I2C1_Recv+0x50>)
 8002692:	f00b fab1 	bl	800dbf8 <HAL_I2C_GetError>
 8002696:	4603      	mov	r3, r0
 8002698:	2b04      	cmp	r3, #4
 800269a:	d003      	beq.n	80026a4 <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800269c:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	e002      	b.n	80026aa <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80026a4:	f06f 0303 	mvn.w	r3, #3
 80026a8:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 80026aa:	68fb      	ldr	r3, [r7, #12]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	2000265c 	.word	0x2000265c

080026b8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80026bc:	f009 fe86 	bl	800c3cc <HAL_GetTick>
 80026c0:	4603      	mov	r3, r0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a14      	ldr	r2, [pc, #80]	@ (8002728 <MX_I2C1_Init+0x60>)
 80026d8:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a13      	ldr	r2, [pc, #76]	@ (800272c <MX_I2C1_Init+0x64>)
 80026de:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026f2:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f00a fa81 	bl	800cc14 <HAL_I2C_Init>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40005400 	.word	0x40005400
 800272c:	000186a0 	.word	0x000186a0

08002730 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	@ 0x28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002738:	2300      	movs	r3, #0
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	4b1f      	ldr	r3, [pc, #124]	@ (80027bc <I2C1_MspInit+0x8c>)
 800273e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002740:	4a1e      	ldr	r2, [pc, #120]	@ (80027bc <I2C1_MspInit+0x8c>)
 8002742:	f043 0302 	orr.w	r3, r3, #2
 8002746:	6313      	str	r3, [r2, #48]	@ 0x30
 8002748:	4b1c      	ldr	r3, [pc, #112]	@ (80027bc <I2C1_MspInit+0x8c>)
 800274a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	613b      	str	r3, [r7, #16]
 8002752:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002754:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002758:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800275a:	2312      	movs	r3, #18
 800275c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002762:	2303      	movs	r3, #3
 8002764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8002766:	2304      	movs	r3, #4
 8002768:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 800276a:	f107 0314 	add.w	r3, r7, #20
 800276e:	4619      	mov	r1, r3
 8002770:	4813      	ldr	r0, [pc, #76]	@ (80027c0 <I2C1_MspInit+0x90>)
 8002772:	f009 ff9b 	bl	800c6ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002776:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800277a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800277c:	2312      	movs	r3, #18
 800277e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002784:	2303      	movs	r3, #3
 8002786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002788:	2304      	movs	r3, #4
 800278a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 800278c:	f107 0314 	add.w	r3, r7, #20
 8002790:	4619      	mov	r1, r3
 8002792:	480b      	ldr	r0, [pc, #44]	@ (80027c0 <I2C1_MspInit+0x90>)
 8002794:	f009 ff8a 	bl	800c6ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	4b07      	ldr	r3, [pc, #28]	@ (80027bc <I2C1_MspInit+0x8c>)
 800279e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a0:	4a06      	ldr	r2, [pc, #24]	@ (80027bc <I2C1_MspInit+0x8c>)
 80027a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a8:	4b04      	ldr	r3, [pc, #16]	@ (80027bc <I2C1_MspInit+0x8c>)
 80027aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80027b4:	bf00      	nop
 80027b6:	3728      	adds	r7, #40	@ 0x28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40020400 	.word	0x40020400

080027c4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80027cc:	4b09      	ldr	r3, [pc, #36]	@ (80027f4 <I2C1_MspDeInit+0x30>)
 80027ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d0:	4a08      	ldr	r2, [pc, #32]	@ (80027f4 <I2C1_MspDeInit+0x30>)
 80027d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027d6:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80027d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027dc:	4806      	ldr	r0, [pc, #24]	@ (80027f8 <I2C1_MspDeInit+0x34>)
 80027de:	f00a f8e9 	bl	800c9b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80027e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027e6:	4804      	ldr	r0, [pc, #16]	@ (80027f8 <I2C1_MspDeInit+0x34>)
 80027e8:	f00a f8e4 	bl	800c9b4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40020400 	.word	0x40020400

080027fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	e00a      	b.n	8002824 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800280e:	f3af 8000 	nop.w
 8002812:	4601      	mov	r1, r0
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	60ba      	str	r2, [r7, #8]
 800281a:	b2ca      	uxtb	r2, r1
 800281c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	3301      	adds	r3, #1
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	429a      	cmp	r2, r3
 800282a:	dbf0      	blt.n	800280e <_read+0x12>
  }

  return len;
 800282c:	687b      	ldr	r3, [r7, #4]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800283e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800285e:	605a      	str	r2, [r3, #4]
  return 0;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <_isatty>:

int _isatty(int file)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002876:	2301      	movs	r3, #1
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a8:	4a14      	ldr	r2, [pc, #80]	@ (80028fc <_sbrk+0x5c>)
 80028aa:	4b15      	ldr	r3, [pc, #84]	@ (8002900 <_sbrk+0x60>)
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b4:	4b13      	ldr	r3, [pc, #76]	@ (8002904 <_sbrk+0x64>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028bc:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <_sbrk+0x64>)
 80028be:	4a12      	ldr	r2, [pc, #72]	@ (8002908 <_sbrk+0x68>)
 80028c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028c2:	4b10      	ldr	r3, [pc, #64]	@ (8002904 <_sbrk+0x64>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d207      	bcs.n	80028e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028d0:	f012 fd76 	bl	80153c0 <__errno>
 80028d4:	4603      	mov	r3, r0
 80028d6:	220c      	movs	r2, #12
 80028d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028da:	f04f 33ff 	mov.w	r3, #4294967295
 80028de:	e009      	b.n	80028f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028e0:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <_sbrk+0x64>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028e6:	4b07      	ldr	r3, [pc, #28]	@ (8002904 <_sbrk+0x64>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4413      	add	r3, r2
 80028ee:	4a05      	ldr	r2, [pc, #20]	@ (8002904 <_sbrk+0x64>)
 80028f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028f2:	68fb      	ldr	r3, [r7, #12]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20018000 	.word	0x20018000
 8002900:	00000400 	.word	0x00000400
 8002904:	200026b4 	.word	0x200026b4
 8002908:	20002c90 	.word	0x20002c90

0800290c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002910:	4b06      	ldr	r3, [pc, #24]	@ (800292c <SystemInit+0x20>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002916:	4a05      	ldr	r2, [pc, #20]	@ (800292c <SystemInit+0x20>)
 8002918:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800291c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002930:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002968 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002934:	f7ff ffea 	bl	800290c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002938:	480c      	ldr	r0, [pc, #48]	@ (800296c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800293a:	490d      	ldr	r1, [pc, #52]	@ (8002970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800293c:	4a0d      	ldr	r2, [pc, #52]	@ (8002974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800293e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002940:	e002      	b.n	8002948 <LoopCopyDataInit>

08002942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002946:	3304      	adds	r3, #4

08002948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800294a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800294c:	d3f9      	bcc.n	8002942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800294e:	4a0a      	ldr	r2, [pc, #40]	@ (8002978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002950:	4c0a      	ldr	r4, [pc, #40]	@ (800297c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002954:	e001      	b.n	800295a <LoopFillZerobss>

08002956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002958:	3204      	adds	r2, #4

0800295a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800295a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800295c:	d3fb      	bcc.n	8002956 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800295e:	f012 fd35 	bl	80153cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002962:	f7fe fb63 	bl	800102c <main>
  bx  lr    
 8002966:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002968:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800296c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002970:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 8002974:	08017d80 	.word	0x08017d80
  ldr r2, =_sbss
 8002978:	20000284 	.word	0x20000284
  ldr r4, =_ebss
 800297c:	20002c8c 	.word	0x20002c8c

08002980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002980:	e7fe      	b.n	8002980 <ADC_IRQHandler>
	...

08002984 <LIS2DUXS12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_RegisterBusIO(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_IO_t *pIO)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d103      	bne.n	80029a0 <LIS2DUXS12_RegisterBusIO+0x1c>
  {
    ret = LIS2DUXS12_ERROR;
 8002998:	f04f 33ff 	mov.w	r3, #4294967295
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	e088      	b.n	8002ab2 <LIS2DUXS12_RegisterBusIO+0x12e>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	7b1a      	ldrb	r2, [r3, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	699a      	ldr	r2, [r3, #24]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	619a      	str	r2, [r3, #24]
    pObj->IO.Delay     = pIO->Delay;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	69da      	ldr	r2, [r3, #28]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	61da      	str	r2, [r3, #28]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a36      	ldr	r2, [pc, #216]	@ (8002abc <LIS2DUXS12_RegisterBusIO+0x138>)
 80029e4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a35      	ldr	r2, [pc, #212]	@ (8002ac0 <LIS2DUXS12_RegisterBusIO+0x13c>)
 80029ea:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	69da      	ldr	r2, [r3, #28]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d103      	bne.n	8002a0a <LIS2DUXS12_RegisterBusIO+0x86>
    {
      ret = LIS2DUXS12_ERROR;
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e053      	b.n	8002ab2 <LIS2DUXS12_RegisterBusIO+0x12e>
    }
    else if (pObj->IO.Init() != LIS2DUXS12_OK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4798      	blx	r3
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <LIS2DUXS12_RegisterBusIO+0x9a>
    {
      ret = LIS2DUXS12_ERROR;
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	e049      	b.n	8002ab2 <LIS2DUXS12_RegisterBusIO+0x12e>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DUXS12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d11c      	bne.n	8002a60 <LIS2DUXS12_RegisterBusIO+0xdc>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d140      	bne.n	8002ab2 <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          /* Exit from deep power down only the first time in SPI mode */
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f8f4 	bl	8002c1e <LIS2DUXS12_ExitDeepPowerDownSPI>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <LIS2DUXS12_RegisterBusIO+0xbe>
          {
            ret = LIS2DUXS12_ERROR;
 8002a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a40:	60fb      	str	r3, [r7, #12]
          }
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x50;
 8002a42:	2350      	movs	r3, #80	@ 0x50
 8002a44:	72fb      	strb	r3, [r7, #11]

          if (LIS2DUXS12_Write_Reg(pObj, LIS2DUXS12_CTRL1, data) != LIS2DUXS12_OK)
 8002a46:	7afb      	ldrb	r3, [r7, #11]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2110      	movs	r1, #16
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fbf6 	bl	800323e <LIS2DUXS12_Write_Reg>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d02c      	beq.n	8002ab2 <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 8002a58:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	e028      	b.n	8002ab2 <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_SPI_4WIRES_BUS)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d10e      	bne.n	8002a86 <LIS2DUXS12_RegisterBusIO+0x102>
      {
        /* Exit from deep power down only the first time in SPI mode */
        if (pObj->is_initialized == 0U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d11f      	bne.n	8002ab2 <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          if (LIS2DUXS12_ExitDeepPowerDownSPI(pObj) != LIS2DUXS12_OK)
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f8d3 	bl	8002c1e <LIS2DUXS12_ExitDeepPowerDownSPI>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d019      	beq.n	8002ab2 <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	e015      	b.n	8002ab2 <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else if (pObj->IO.BusType == LIS2DUXS12_I2C_BUS)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10e      	bne.n	8002aac <LIS2DUXS12_RegisterBusIO+0x128>
      {
        /* Exit from deep power down only the first time in I2C mode */
        if (pObj->is_initialized == 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10c      	bne.n	8002ab2 <LIS2DUXS12_RegisterBusIO+0x12e>
        {
          if (LIS2DUXS12_ExitDeepPowerDownI2C(pObj) != LIS2DUXS12_OK)
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 f8ab 	bl	8002bf4 <LIS2DUXS12_ExitDeepPowerDownI2C>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d006      	beq.n	8002ab2 <LIS2DUXS12_RegisterBusIO+0x12e>
          {
            ret = LIS2DUXS12_ERROR;
 8002aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	e002      	b.n	8002ab2 <LIS2DUXS12_RegisterBusIO+0x12e>
          }
        }
      }
      else
      {
        ret = LIS2DUXS12_ERROR;
 8002aac:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab0:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	080036f9 	.word	0x080036f9
 8002ac0:	0800372f 	.word	0x0800372f

08002ac4 <LIS2DUXS12_Init>:
  * @brief  Initialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Init(LIS2DUXS12_Object_t *pObj)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  lis2duxs12_i3c_cfg_t val;

  if(pObj->IO.BusType != LIS2DUXS12_I3C_BUS)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d01f      	beq.n	8002b14 <LIS2DUXS12_Init+0x50>
  {
    /* Disable I3C */
    if (lis2duxs12_i3c_configure_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3320      	adds	r3, #32
 8002ad8:	f107 0214 	add.w	r2, r7, #20
 8002adc:	4611      	mov	r1, r2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f001 fb0a 	bl	80040f8 <lis2duxs12_i3c_configure_get>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <LIS2DUXS12_Init+0x2c>
    {
      return LIS2DUXS12_ERROR;
 8002aea:	f04f 33ff 	mov.w	r3, #4294967295
 8002aee:	e05c      	b.n	8002baa <LIS2DUXS12_Init+0xe6>
    }
    val.asf_on = PROPERTY_ENABLE;
 8002af0:	7d7b      	ldrb	r3, [r7, #21]
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	757b      	strb	r3, [r7, #21]
    if (lis2duxs12_i3c_configure_set(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3320      	adds	r3, #32
 8002afc:	f107 0214 	add.w	r2, r7, #20
 8002b00:	4611      	mov	r1, r2
 8002b02:	4618      	mov	r0, r3
 8002b04:	f001 fac0 	bl	8004088 <lis2duxs12_i3c_configure_set>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <LIS2DUXS12_Init+0x50>
    {
      return LIS2DUXS12_ERROR;
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b12:	e04a      	b.n	8002baa <LIS2DUXS12_Init+0xe6>
    }
  }

  /* Set main memory bank */
  if (LIS2DUXS12_Set_Mem_Bank(pObj, (uint8_t)LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 8002b14:	2100      	movs	r1, #0
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fbac 	bl	8003274 <LIS2DUXS12_Set_Mem_Bank>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <LIS2DUXS12_Init+0x64>
  {
    return LIS2DUXS12_ERROR;
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295
 8002b26:	e040      	b.n	8002baa <LIS2DUXS12_Init+0xe6>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. Enable BDU. */
  if (lis2duxs12_init_set(&(pObj->Ctx), LIS2DUXS12_SENSOR_ONLY_ON) != LIS2DUXS12_OK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3320      	adds	r3, #32
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fec4 	bl	80038bc <lis2duxs12_init_set>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <LIS2DUXS12_Init+0x7c>
  {
    return LIS2DUXS12_ERROR;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3e:	e034      	b.n	8002baa <LIS2DUXS12_Init+0xe6>
  }

  /* FIFO mode selection */
  lis2duxs12_fifo_mode_t fifo_mode =
 8002b40:	f107 030c 	add.w	r3, r7, #12
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	809a      	strh	r2, [r3, #4]
    .operation = LIS2DUXS12_BYPASS_MODE,
    .store     = LIS2DUXS12_FIFO_1X,
    .watermark = 0,
  };

  if (lis2duxs12_fifo_mode_set(&(pObj->Ctx), fifo_mode) != LIS2DUXS12_OK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f103 0020 	add.w	r0, r3, #32
 8002b50:	f107 030c 	add.w	r3, r7, #12
 8002b54:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b58:	f001 fb33 	bl	80041c2 <lis2duxs12_fifo_mode_set>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <LIS2DUXS12_Init+0xa4>
  {
    return LIS2DUXS12_ERROR;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
 8002b66:	e020      	b.n	8002baa <LIS2DUXS12_Init+0xe6>
  }

  /* Select default output data rate */
  pObj->acc_odr = 100.0f;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a12      	ldr	r2, [pc, #72]	@ (8002bb4 <LIS2DUXS12_Init+0xf0>)
 8002b6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Select default high performance mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_HIGH_PERFORMANCE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Output data rate: power down, full scale: 2g */
  lis2duxs12_md_t mode =
 8002b76:	f107 0308 	add.w	r3, r7, #8
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	460a      	mov	r2, r1
 8002b7e:	801a      	strh	r2, [r3, #0]
 8002b80:	460a      	mov	r2, r1
 8002b82:	709a      	strb	r2, [r3, #2]
  {
    .odr = LIS2DUXS12_OFF,
    .fs  = LIS2DUXS12_2g,
  };

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3320      	adds	r3, #32
 8002b88:	f107 0208 	add.w	r2, r7, #8
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 ffe2 	bl	8003b58 <lis2duxs12_mode_set>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <LIS2DUXS12_Init+0xdc>
  {
    return LIS2DUXS12_ERROR;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9e:	e004      	b.n	8002baa <LIS2DUXS12_Init+0xe6>
  }

  pObj->is_initialized = 1;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	42c80000 	.word	0x42c80000

08002bb8 <LIS2DUXS12_DeInit>:
  * @brief  Deinitialize the LIS2DUXS12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_DeInit(LIS2DUXS12_Object_t *pObj)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DUXS12_ACC_Disable(pObj) != LIS2DUXS12_OK)
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f8ad 	bl	8002d20 <LIS2DUXS12_ACC_Disable>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <LIS2DUXS12_DeInit+0x1a>
  {
    return LIS2DUXS12_ERROR;
 8002bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd0:	e00c      	b.n	8002bec <LIS2DUXS12_DeInit+0x34>
  }

  /* Reset output data rate */
  pObj->acc_odr = 0.0f;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set low power mode (when disabled) */
  pObj->power_mode = LIS2DUXS12_LOW_POWER;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 0;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DUXS12_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <LIS2DUXS12_ExitDeepPowerDownI2C>:
  * @brief  Exit from deep power down in I2C
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownI2C(LIS2DUXS12_Object_t *pObj)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint8_t val;

  /* Perform dummy read in order to exit from deep power down in I2C mode.
   * NOTE: No return value check - expected first read fail. */
  (void)lis2duxs12_device_id_get(&(pObj->Ctx), &val);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3320      	adds	r3, #32
 8002c00:	f107 020f 	add.w	r2, r7, #15
 8002c04:	4611      	mov	r1, r2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fe46 	bl	8003898 <lis2duxs12_device_id_get>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c10:	2019      	movs	r0, #25
 8002c12:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <LIS2DUXS12_ExitDeepPowerDownSPI>:
  * @brief  Exit from deep power down in SPI
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ExitDeepPowerDownSPI(LIS2DUXS12_Object_t *pObj)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  /* Write IF_WAKE_UP register to exit from deep power down in SPI mode*/
  (void)lis2duxs12_exit_deep_power_down(&(pObj->Ctx));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3320      	adds	r3, #32
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f001 f960 	bl	8003ef0 <lis2duxs12_exit_deep_power_down>

  /* Wait for 25 ms based on datasheet */
  pObj->Ctx.mdelay(25);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c34:	2019      	movs	r0, #25
 8002c36:	4798      	blx	r3

  return LIS2DUXS12_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <LIS2DUXS12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ReadID(LIS2DUXS12_Object_t *pObj, uint8_t *Id)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	6039      	str	r1, [r7, #0]
  uint8_t val;

  if (lis2duxs12_device_id_get(&(pObj->Ctx), &val) != LIS2DUXS12_OK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3320      	adds	r3, #32
 8002c50:	f107 020f 	add.w	r2, r7, #15
 8002c54:	4611      	mov	r1, r2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fe1e 	bl	8003898 <lis2duxs12_device_id_get>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <LIS2DUXS12_ReadID+0x26>
  {
    return LIS2DUXS12_ERROR;
 8002c62:	f04f 33ff 	mov.w	r3, #4294967295
 8002c66:	e003      	b.n	8002c70 <LIS2DUXS12_ReadID+0x2e>
  }

  *Id = val;
 8002c68:	7bfa      	ldrb	r2, [r7, #15]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	701a      	strb	r2, [r3, #0]

  return LIS2DUXS12_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <LIS2DUXS12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DUXS12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_GetCapabilities(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Capabilities_t *Capabilities)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc        = 1;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro       = 0;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto    = 0;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2200      	movs	r2, #0
 8002c92:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower   = 1;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2201      	movs	r2, #1
 8002c98:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS  = 0;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS   = 16;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2210      	movs	r2, #16
 8002ca4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS   = 0;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr = 0.0f;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr  = 800.0f;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	4a06      	ldr	r2, [pc, #24]	@ (8002cd0 <LIS2DUXS12_GetCapabilities+0x58>)
 8002cb8:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr  = 0.0f;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	619a      	str	r2, [r3, #24]
  return LIS2DUXS12_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	44480000 	.word	0x44480000

08002cd4 <LIS2DUXS12_ACC_Enable>:
  * @brief  Enable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Enable(LIS2DUXS12_Object_t *pObj)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <LIS2DUXS12_ACC_Enable+0x16>
  {
    return LIS2DUXS12_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	e016      	b.n	8002d18 <LIS2DUXS12_ACC_Enable+0x44>
  }

  /* Output data rate selection. */
  if (LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->power_mode) != LIS2DUXS12_OK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fadb 	bl	80032b8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <LIS2DUXS12_ACC_Enable+0x3a>
  {
    return LIS2DUXS12_ERROR;
 8002d08:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0c:	e004      	b.n	8002d18 <LIS2DUXS12_ACC_Enable+0x44>
  }

  pObj->acc_is_enabled = 1;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <LIS2DUXS12_ACC_Disable>:
  * @brief  Disable the LIS2DUXS12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_Disable(LIS2DUXS12_Object_t *pObj)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  float_t Odr;
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <LIS2DUXS12_ACC_Disable+0x16>
  {
    return LIS2DUXS12_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e046      	b.n	8002dc4 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (LIS2DUXS12_ACC_GetOutputDataRate(pObj, &Odr) != LIS2DUXS12_OK)
 8002d36:	f107 030c 	add.w	r3, r7, #12
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f893 	bl	8002e68 <LIS2DUXS12_ACC_GetOutputDataRate>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <LIS2DUXS12_ACC_Disable+0x2e>
  {
    return LIS2DUXS12_ERROR;
 8002d48:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4c:	e03a      	b.n	8002dc4 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  if (Odr == 800.0f)
 8002d4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d52:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002dcc <LIS2DUXS12_ACC_Disable+0xac>
 8002d56:	eef4 7a47 	vcmp.f32	s15, s14
 8002d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5e:	d10e      	bne.n	8002d7e <LIS2DUXS12_ACC_Disable+0x5e>
  {
    if (LIS2DUXS12_ACC_SetOutputDataRate(pObj, 400.0f) != LIS2DUXS12_OK)
 8002d60:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8002dd0 <LIS2DUXS12_ACC_Disable+0xb0>
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f94b 	bl	8003000 <LIS2DUXS12_ACC_SetOutputDataRate>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <LIS2DUXS12_ACC_Disable+0x56>
    {
      return LIS2DUXS12_ERROR;
 8002d70:	f04f 33ff 	mov.w	r3, #4294967295
 8002d74:	e026      	b.n	8002dc4 <LIS2DUXS12_ACC_Disable+0xa4>
    }

    /* Wait for 3 ms based on datasheet */
    pObj->Ctx.mdelay(3);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7a:	2003      	movs	r0, #3
 8002d7c:	4798      	blx	r3
  }

  /* Output data rate selection - power down. */
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3320      	adds	r3, #32
 8002d82:	f107 0208 	add.w	r2, r7, #8
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 ffa1 	bl	8003cd0 <lis2duxs12_mode_get>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <LIS2DUXS12_ACC_Disable+0x7a>
  {
    return LIS2DUXS12_ERROR;
 8002d94:	f04f 33ff 	mov.w	r3, #4294967295
 8002d98:	e014      	b.n	8002dc4 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  mode.odr = LIS2DUXS12_OFF;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	723b      	strb	r3, [r7, #8]

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3320      	adds	r3, #32
 8002da2:	f107 0208 	add.w	r2, r7, #8
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fed5 	bl	8003b58 <lis2duxs12_mode_set>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <LIS2DUXS12_ACC_Disable+0x9a>
  {
    return LIS2DUXS12_ERROR;
 8002db4:	f04f 33ff 	mov.w	r3, #4294967295
 8002db8:	e004      	b.n	8002dc4 <LIS2DUXS12_ACC_Disable+0xa4>
  }

  pObj->acc_is_enabled = 0;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DUXS12_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	44480000 	.word	0x44480000
 8002dd0:	43c80000 	.word	0x43c80000

08002dd4 <LIS2DUXS12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetSensitivity(LIS2DUXS12_Object_t *pObj, float_t *Sensitivity)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3320      	adds	r3, #32
 8002de6:	f107 0208 	add.w	r2, r7, #8
 8002dea:	4611      	mov	r1, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 ff6f 	bl	8003cd0 <lis2duxs12_mode_get>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <LIS2DUXS12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8002df8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfc:	e026      	b.n	8002e4c <LIS2DUXS12_ACC_GetSensitivity+0x78>
  }

  switch (mode.fs)
 8002dfe:	7a7b      	ldrb	r3, [r7, #9]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d81b      	bhi.n	8002e3c <LIS2DUXS12_ACC_GetSensitivity+0x68>
 8002e04:	a201      	add	r2, pc, #4	@ (adr r2, 8002e0c <LIS2DUXS12_ACC_GetSensitivity+0x38>)
 8002e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0a:	bf00      	nop
 8002e0c:	08002e1d 	.word	0x08002e1d
 8002e10:	08002e25 	.word	0x08002e25
 8002e14:	08002e2d 	.word	0x08002e2d
 8002e18:	08002e35 	.word	0x08002e35
  {
    case LIS2DUXS12_2g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_2G;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	4a0d      	ldr	r2, [pc, #52]	@ (8002e54 <LIS2DUXS12_ACC_GetSensitivity+0x80>)
 8002e20:	601a      	str	r2, [r3, #0]
      break;
 8002e22:	e012      	b.n	8002e4a <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_4g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_4G;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	4a0c      	ldr	r2, [pc, #48]	@ (8002e58 <LIS2DUXS12_ACC_GetSensitivity+0x84>)
 8002e28:	601a      	str	r2, [r3, #0]
      break;
 8002e2a:	e00e      	b.n	8002e4a <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_8g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_8G;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e5c <LIS2DUXS12_ACC_GetSensitivity+0x88>)
 8002e30:	601a      	str	r2, [r3, #0]
      break;
 8002e32:	e00a      	b.n	8002e4a <LIS2DUXS12_ACC_GetSensitivity+0x76>

    case LIS2DUXS12_16g:
      *Sensitivity = LIS2DUXS12_ACC_SENSITIVITY_FOR_FS_16G;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	4a0a      	ldr	r2, [pc, #40]	@ (8002e60 <LIS2DUXS12_ACC_GetSensitivity+0x8c>)
 8002e38:	601a      	str	r2, [r3, #0]
      break;
 8002e3a:	e006      	b.n	8002e4a <LIS2DUXS12_ACC_GetSensitivity+0x76>

    default:
      *Sensitivity = -1.0f;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	4a09      	ldr	r2, [pc, #36]	@ (8002e64 <LIS2DUXS12_ACC_GetSensitivity+0x90>)
 8002e40:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295
 8002e46:	60fb      	str	r3, [r7, #12]
      break;
 8002e48:	bf00      	nop
  }

  return ret;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	3d79db23 	.word	0x3d79db23
 8002e58:	3df9db23 	.word	0x3df9db23
 8002e5c:	3e79db23 	.word	0x3e79db23
 8002e60:	3ef9db23 	.word	0x3ef9db23
 8002e64:	bf800000 	.word	0xbf800000

08002e68 <LIS2DUXS12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t *Odr)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual output data rate from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3320      	adds	r3, #32
 8002e7a:	f107 0208 	add.w	r2, r7, #8
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 ff25 	bl	8003cd0 <lis2duxs12_mode_get>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <LIS2DUXS12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DUXS12_ERROR;
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e90:	e09b      	b.n	8002fca <LIS2DUXS12_ACC_GetOutputDataRate+0x162>
  }

  switch (mode.odr)
 8002e92:	7a3b      	ldrb	r3, [r7, #8]
 8002e94:	2b2f      	cmp	r3, #47	@ 0x2f
 8002e96:	f200 8090 	bhi.w	8002fba <LIS2DUXS12_ACC_GetOutputDataRate+0x152>
 8002e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea0 <LIS2DUXS12_ACC_GetOutputDataRate+0x38>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002f61 	.word	0x08002f61
 8002ea4:	08002f6b 	.word	0x08002f6b
 8002ea8:	08002f73 	.word	0x08002f73
 8002eac:	08002f8b 	.word	0x08002f8b
 8002eb0:	08002f7b 	.word	0x08002f7b
 8002eb4:	08002f83 	.word	0x08002f83
 8002eb8:	08002f8b 	.word	0x08002f8b
 8002ebc:	08002f93 	.word	0x08002f93
 8002ec0:	08002f9b 	.word	0x08002f9b
 8002ec4:	08002fa3 	.word	0x08002fa3
 8002ec8:	08002fab 	.word	0x08002fab
 8002ecc:	08002fb3 	.word	0x08002fb3
 8002ed0:	08002fbb 	.word	0x08002fbb
 8002ed4:	08002fbb 	.word	0x08002fbb
 8002ed8:	08002fbb 	.word	0x08002fbb
 8002edc:	08002fbb 	.word	0x08002fbb
 8002ee0:	08002fbb 	.word	0x08002fbb
 8002ee4:	08002fbb 	.word	0x08002fbb
 8002ee8:	08002fbb 	.word	0x08002fbb
 8002eec:	08002fbb 	.word	0x08002fbb
 8002ef0:	08002f7b 	.word	0x08002f7b
 8002ef4:	08002f83 	.word	0x08002f83
 8002ef8:	08002f8b 	.word	0x08002f8b
 8002efc:	08002f93 	.word	0x08002f93
 8002f00:	08002f9b 	.word	0x08002f9b
 8002f04:	08002fa3 	.word	0x08002fa3
 8002f08:	08002fab 	.word	0x08002fab
 8002f0c:	08002fb3 	.word	0x08002fb3
 8002f10:	08002fbb 	.word	0x08002fbb
 8002f14:	08002fbb 	.word	0x08002fbb
 8002f18:	08002fbb 	.word	0x08002fbb
 8002f1c:	08002fbb 	.word	0x08002fbb
 8002f20:	08002fbb 	.word	0x08002fbb
 8002f24:	08002fbb 	.word	0x08002fbb
 8002f28:	08002fbb 	.word	0x08002fbb
 8002f2c:	08002fbb 	.word	0x08002fbb
 8002f30:	08002fbb 	.word	0x08002fbb
 8002f34:	08002fbb 	.word	0x08002fbb
 8002f38:	08002fbb 	.word	0x08002fbb
 8002f3c:	08002fbb 	.word	0x08002fbb
 8002f40:	08002fbb 	.word	0x08002fbb
 8002f44:	08002fbb 	.word	0x08002fbb
 8002f48:	08002fbb 	.word	0x08002fbb
 8002f4c:	08002fbb 	.word	0x08002fbb
 8002f50:	08002fbb 	.word	0x08002fbb
 8002f54:	08002fbb 	.word	0x08002fbb
 8002f58:	08002f61 	.word	0x08002f61
 8002f5c:	08002f61 	.word	0x08002f61
  {
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_TRIG_PIN:
    case LIS2DUXS12_TRIG_SW:
      *Odr = 0.0f;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
      break;
 8002f68:	e02e      	b.n	8002fc8 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_1Hz6_ULP:
      *Odr = 1.6f;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	4a19      	ldr	r2, [pc, #100]	@ (8002fd4 <LIS2DUXS12_ACC_GetOutputDataRate+0x16c>)
 8002f6e:	601a      	str	r2, [r3, #0]
      break;
 8002f70:	e02a      	b.n	8002fc8 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_3Hz_ULP:
      *Odr = 3.0f;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	4a18      	ldr	r2, [pc, #96]	@ (8002fd8 <LIS2DUXS12_ACC_GetOutputDataRate+0x170>)
 8002f76:	601a      	str	r2, [r3, #0]
      break;
 8002f78:	e026      	b.n	8002fc8 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_6Hz_LP:
    case LIS2DUXS12_6Hz_HP:
      *Odr = 6.0f;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	4a17      	ldr	r2, [pc, #92]	@ (8002fdc <LIS2DUXS12_ACC_GetOutputDataRate+0x174>)
 8002f7e:	601a      	str	r2, [r3, #0]
      break;
 8002f80:	e022      	b.n	8002fc8 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_12Hz5_LP:
    case LIS2DUXS12_12Hz5_HP:
      *Odr = 12.5f;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	4a16      	ldr	r2, [pc, #88]	@ (8002fe0 <LIS2DUXS12_ACC_GetOutputDataRate+0x178>)
 8002f86:	601a      	str	r2, [r3, #0]
      break;
 8002f88:	e01e      	b.n	8002fc8 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_25Hz_ULP:
    case LIS2DUXS12_25Hz_LP:
    case LIS2DUXS12_25Hz_HP:
      *Odr = 25.0f;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	4a15      	ldr	r2, [pc, #84]	@ (8002fe4 <LIS2DUXS12_ACC_GetOutputDataRate+0x17c>)
 8002f8e:	601a      	str	r2, [r3, #0]
      break;
 8002f90:	e01a      	b.n	8002fc8 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_50Hz_LP:
    case LIS2DUXS12_50Hz_HP:
      *Odr = 50.0f;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	4a14      	ldr	r2, [pc, #80]	@ (8002fe8 <LIS2DUXS12_ACC_GetOutputDataRate+0x180>)
 8002f96:	601a      	str	r2, [r3, #0]
      break;
 8002f98:	e016      	b.n	8002fc8 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_100Hz_LP:
    case LIS2DUXS12_100Hz_HP:
      *Odr = 100.0f;
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	4a13      	ldr	r2, [pc, #76]	@ (8002fec <LIS2DUXS12_ACC_GetOutputDataRate+0x184>)
 8002f9e:	601a      	str	r2, [r3, #0]
      break;
 8002fa0:	e012      	b.n	8002fc8 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_200Hz_LP:
    case LIS2DUXS12_200Hz_HP:
      *Odr = 200.0f;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	4a12      	ldr	r2, [pc, #72]	@ (8002ff0 <LIS2DUXS12_ACC_GetOutputDataRate+0x188>)
 8002fa6:	601a      	str	r2, [r3, #0]
      break;
 8002fa8:	e00e      	b.n	8002fc8 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_400Hz_LP:
    case LIS2DUXS12_400Hz_HP:
      *Odr = 400.0f;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	4a11      	ldr	r2, [pc, #68]	@ (8002ff4 <LIS2DUXS12_ACC_GetOutputDataRate+0x18c>)
 8002fae:	601a      	str	r2, [r3, #0]
      break;
 8002fb0:	e00a      	b.n	8002fc8 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    case LIS2DUXS12_800Hz_LP:
    case LIS2DUXS12_800Hz_HP:
      *Odr = 800.0f;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	4a10      	ldr	r2, [pc, #64]	@ (8002ff8 <LIS2DUXS12_ACC_GetOutputDataRate+0x190>)
 8002fb6:	601a      	str	r2, [r3, #0]
      break;
 8002fb8:	e006      	b.n	8002fc8 <LIS2DUXS12_ACC_GetOutputDataRate+0x160>

    default:
      *Odr = -1.0f;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	4a0f      	ldr	r2, [pc, #60]	@ (8002ffc <LIS2DUXS12_ACC_GetOutputDataRate+0x194>)
 8002fbe:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 8002fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc4:	60fb      	str	r3, [r7, #12]
      break;
 8002fc6:	bf00      	nop
  }

  return ret;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	3fcccccd 	.word	0x3fcccccd
 8002fd8:	40400000 	.word	0x40400000
 8002fdc:	40c00000 	.word	0x40c00000
 8002fe0:	41480000 	.word	0x41480000
 8002fe4:	41c80000 	.word	0x41c80000
 8002fe8:	42480000 	.word	0x42480000
 8002fec:	42c80000 	.word	0x42c80000
 8002ff0:	43480000 	.word	0x43480000
 8002ff4:	43c80000 	.word	0x43c80000
 8002ff8:	44480000 	.word	0x44480000
 8002ffc:	bf800000 	.word	0xbf800000

08003000 <LIS2DUXS12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate(LIS2DUXS12_Object_t *pObj, float_t Odr)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use high performance mode */
  return LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DUXS12_HIGH_PERFORMANCE);
 800300c:	2102      	movs	r1, #2
 800300e:	ed97 0a00 	vldr	s0, [r7]
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f805 	bl	8003022 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>
 8003018:	4603      	mov	r3, r0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Odr the output data rate value to be set
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetOutputDataRate_With_Mode(LIS2DUXS12_Object_t *pObj, float_t Odr, LIS2DUXS12_Power_Mode_t Power)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	ed87 0a02 	vstr	s0, [r7, #8]
 800302e:	460b      	mov	r3, r1
 8003030:	71fb      	strb	r3, [r7, #7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003038:	2b01      	cmp	r3, #1
 800303a:	d108      	bne.n	800304e <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x2c>
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Power);
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	4619      	mov	r1, r3
 8003040:	ed97 0a02 	vldr	s0, [r7, #8]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f937 	bl	80032b8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>
 800304a:	4603      	mov	r3, r0
 800304c:	e007      	b.n	800305e <LIS2DUXS12_ACC_SetOutputDataRate_With_Mode+0x3c>
  }
  else
  {
    return LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Power);
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	4619      	mov	r1, r3
 8003052:	ed97 0a02 	vldr	s0, [r7, #8]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 faac 	bl	80035b4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>
 800305c:	4603      	mov	r3, r0
  }
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <LIS2DUXS12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetFullScale(LIS2DUXS12_Object_t *pObj, int32_t *FullScale)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DUXS12_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	60fb      	str	r3, [r7, #12]
  lis2duxs12_md_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3320      	adds	r3, #32
 800307a:	f107 0208 	add.w	r2, r7, #8
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f000 fe25 	bl	8003cd0 <lis2duxs12_mode_get>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <LIS2DUXS12_ACC_GetFullScale+0x2a>
  {
    return LIS2DUXS12_ERROR;
 800308c:	f04f 33ff 	mov.w	r3, #4294967295
 8003090:	e027      	b.n	80030e2 <LIS2DUXS12_ACC_GetFullScale+0x7a>
  }

  switch (mode.fs)
 8003092:	7a7b      	ldrb	r3, [r7, #9]
 8003094:	2b03      	cmp	r3, #3
 8003096:	d81b      	bhi.n	80030d0 <LIS2DUXS12_ACC_GetFullScale+0x68>
 8003098:	a201      	add	r2, pc, #4	@ (adr r2, 80030a0 <LIS2DUXS12_ACC_GetFullScale+0x38>)
 800309a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309e:	bf00      	nop
 80030a0:	080030b1 	.word	0x080030b1
 80030a4:	080030b9 	.word	0x080030b9
 80030a8:	080030c1 	.word	0x080030c1
 80030ac:	080030c9 	.word	0x080030c9
  {
    case LIS2DUXS12_2g:
      *FullScale =  2;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2202      	movs	r2, #2
 80030b4:	601a      	str	r2, [r3, #0]
      break;
 80030b6:	e013      	b.n	80030e0 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_4g:
      *FullScale =  4;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2204      	movs	r2, #4
 80030bc:	601a      	str	r2, [r3, #0]
      break;
 80030be:	e00f      	b.n	80030e0 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_8g:
      *FullScale =  8;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2208      	movs	r2, #8
 80030c4:	601a      	str	r2, [r3, #0]
      break;
 80030c6:	e00b      	b.n	80030e0 <LIS2DUXS12_ACC_GetFullScale+0x78>

    case LIS2DUXS12_16g:
      *FullScale = 16;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2210      	movs	r2, #16
 80030cc:	601a      	str	r2, [r3, #0]
      break;
 80030ce:	e007      	b.n	80030e0 <LIS2DUXS12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	f04f 32ff 	mov.w	r2, #4294967295
 80030d6:	601a      	str	r2, [r3, #0]
      ret = LIS2DUXS12_ERROR;
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295
 80030dc:	60fb      	str	r3, [r7, #12]
      break;
 80030de:	bf00      	nop
  }

  return ret;
 80030e0:	68fb      	ldr	r3, [r7, #12]
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop

080030ec <LIS2DUXS12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_SetFullScale(LIS2DUXS12_Object_t *pObj, int32_t FullScale)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3320      	adds	r3, #32
 80030fa:	f107 020c 	add.w	r2, r7, #12
 80030fe:	4611      	mov	r1, r2
 8003100:	4618      	mov	r0, r3
 8003102:	f000 fde5 	bl	8003cd0 <lis2duxs12_mode_get>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <LIS2DUXS12_ACC_SetFullScale+0x26>
  {
    return LIS2DUXS12_ERROR;
 800310c:	f04f 33ff 	mov.w	r3, #4294967295
 8003110:	e01f      	b.n	8003152 <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
            : (FullScale <= 4) ? LIS2DUXS12_4g
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b02      	cmp	r3, #2
 8003116:	dd0b      	ble.n	8003130 <LIS2DUXS12_ACC_SetFullScale+0x44>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b04      	cmp	r3, #4
 800311c:	dd06      	ble.n	800312c <LIS2DUXS12_ACC_SetFullScale+0x40>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b08      	cmp	r3, #8
 8003122:	dc01      	bgt.n	8003128 <LIS2DUXS12_ACC_SetFullScale+0x3c>
 8003124:	2302      	movs	r3, #2
 8003126:	e004      	b.n	8003132 <LIS2DUXS12_ACC_SetFullScale+0x46>
 8003128:	2303      	movs	r3, #3
 800312a:	e002      	b.n	8003132 <LIS2DUXS12_ACC_SetFullScale+0x46>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <LIS2DUXS12_ACC_SetFullScale+0x46>
 8003130:	2300      	movs	r3, #0
  mode.fs = (FullScale <= 2) ? LIS2DUXS12_2g
 8003132:	737b      	strb	r3, [r7, #13]
            : (FullScale <= 8) ? LIS2DUXS12_8g
            :                    LIS2DUXS12_16g;

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3320      	adds	r3, #32
 8003138:	f107 020c 	add.w	r2, r7, #12
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fd0a 	bl	8003b58 <lis2duxs12_mode_set>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <LIS2DUXS12_ACC_SetFullScale+0x64>
  {
    return LIS2DUXS12_ERROR;
 800314a:	f04f 33ff 	mov.w	r3, #4294967295
 800314e:	e000      	b.n	8003152 <LIS2DUXS12_ACC_SetFullScale+0x66>
  }

  return LIS2DUXS12_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <LIS2DUXS12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxesRaw(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_AxesRaw_t *Value)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b088      	sub	sp, #32
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3320      	adds	r3, #32
 8003168:	f107 021c 	add.w	r2, r7, #28
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f000 fdae 	bl	8003cd0 <lis2duxs12_mode_get>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <LIS2DUXS12_ACC_GetAxesRaw+0x26>
  {
    return LIS2DUXS12_ERROR;
 800317a:	f04f 33ff 	mov.w	r3, #4294967295
 800317e:	e01b      	b.n	80031b8 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	3320      	adds	r3, #32
 8003184:	f107 0208 	add.w	r2, r7, #8
 8003188:	f107 011c 	add.w	r1, r7, #28
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fecf 	bl	8003f30 <lis2duxs12_xl_data_get>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <LIS2DUXS12_ACC_GetAxesRaw+0x44>
  {
    return LIS2DUXS12_ERROR;
 8003198:	f04f 33ff 	mov.w	r3, #4294967295
 800319c:	e00c      	b.n	80031b8 <LIS2DUXS12_ACC_GetAxesRaw+0x5e>
  }

  Value->x = data.raw[0];
 800319e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	801a      	strh	r2, [r3, #0]
  Value->y = data.raw[1];
 80031a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	805a      	strh	r2, [r3, #2]
  Value->z = data.raw[2];
 80031ae:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	809a      	strh	r2, [r3, #4]

  return LIS2DUXS12_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <LIS2DUXS12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_ACC_GetAxes(LIS2DUXS12_Object_t *pObj, LIS2DUXS12_Axes_t *Acceleration)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  lis2duxs12_md_t mode;
  lis2duxs12_xl_data_t data;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3320      	adds	r3, #32
 80031ce:	f107 021c 	add.w	r2, r7, #28
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fd7b 	bl	8003cd0 <lis2duxs12_mode_get>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <LIS2DUXS12_ACC_GetAxes+0x26>
  {
    return LIS2DUXS12_ERROR;
 80031e0:	f04f 33ff 	mov.w	r3, #4294967295
 80031e4:	e027      	b.n	8003236 <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  if (lis2duxs12_xl_data_get(&(pObj->Ctx), &mode, &data) != LIS2DUXS12_OK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3320      	adds	r3, #32
 80031ea:	f107 0208 	add.w	r2, r7, #8
 80031ee:	f107 011c 	add.w	r1, r7, #28
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 fe9c 	bl	8003f30 <lis2duxs12_xl_data_get>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <LIS2DUXS12_ACC_GetAxes+0x44>
  {
    return LIS2DUXS12_ERROR;
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003202:	e018      	b.n	8003236 <LIS2DUXS12_ACC_GetAxes+0x76>
  }

  Acceleration->x = (int32_t)data.mg[0];
 8003204:	edd7 7a02 	vldr	s15, [r7, #8]
 8003208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800320c:	ee17 2a90 	vmov	r2, s15
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)data.mg[1];
 8003214:	edd7 7a03 	vldr	s15, [r7, #12]
 8003218:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800321c:	ee17 2a90 	vmov	r2, s15
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)data.mg[2];
 8003224:	edd7 7a04 	vldr	s15, [r7, #16]
 8003228:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800322c:	ee17 2a90 	vmov	r2, s15
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	609a      	str	r2, [r3, #8]

  return LIS2DUXS12_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <LIS2DUXS12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Write_Reg(LIS2DUXS12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	460b      	mov	r3, r1
 8003248:	70fb      	strb	r3, [r7, #3]
 800324a:	4613      	mov	r3, r2
 800324c:	70bb      	strb	r3, [r7, #2]
  if (lis2duxs12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DUXS12_OK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f103 0020 	add.w	r0, r3, #32
 8003254:	1cba      	adds	r2, r7, #2
 8003256:	78f9      	ldrb	r1, [r7, #3]
 8003258:	2301      	movs	r3, #1
 800325a:	f000 faa0 	bl	800379e <lis2duxs12_write_reg>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <LIS2DUXS12_Write_Reg+0x2c>
  {
    return LIS2DUXS12_ERROR;
 8003264:	f04f 33ff 	mov.w	r3, #4294967295
 8003268:	e000      	b.n	800326c <LIS2DUXS12_Write_Reg+0x2e>
  }

  return LIS2DUXS12_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <LIS2DUXS12_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LIS2DUXS12_MAIN_MEM_BANK, 1 - LIS2DUXS12_EMBED_FUNC_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DUXS12_Set_Mem_Bank(LIS2DUXS12_Object_t *pObj, uint8_t Val)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LIS2DUXS12_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]
  lis2duxs12_mem_bank_t reg;

  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
        :               LIS2DUXS12_MAIN_MEM_BANK;
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	2b01      	cmp	r3, #1
 8003288:	bf0c      	ite	eq
 800328a:	2301      	moveq	r3, #1
 800328c:	2300      	movne	r3, #0
 800328e:	b2db      	uxtb	r3, r3
  reg = (Val == 1U) ? LIS2DUXS12_EMBED_FUNC_MEM_BANK
 8003290:	72fb      	strb	r3, [r7, #11]

  if (lis2duxs12_mem_bank_set(&(pObj->Ctx), reg) != LIS2DUXS12_OK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3320      	adds	r3, #32
 8003296:	7afa      	ldrb	r2, [r7, #11]
 8003298:	4611      	mov	r1, r2
 800329a:	4618      	mov	r0, r3
 800329c:	f000 ff6b 	bl	8004176 <lis2duxs12_mem_bank_set>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <LIS2DUXS12_Set_Mem_Bank+0x38>
  {
    ret = LIS2DUXS12_ERROR;
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295
 80032aa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80032ac:	68fb      	ldr	r3, [r7, #12]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80032c4:	460b      	mov	r3, r1
 80032c6:	71fb      	strb	r3, [r7, #7]
  lis2duxs12_md_t mode;

  if (lis2duxs12_mode_get(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	3320      	adds	r3, #32
 80032cc:	f107 0214 	add.w	r2, r7, #20
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fcfc 	bl	8003cd0 <lis2duxs12_mode_get>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c>
  {
    return LIS2DUXS12_ERROR;
 80032de:	f04f 33ff 	mov.w	r3, #4294967295
 80032e2:	e142      	b.n	800356a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d118      	bne.n	800331c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x64>
  {
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
               : (Odr <= 3.0f) ? LIS2DUXS12_3Hz_ULP
 80032ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80032ee:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8003574 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2bc>
 80032f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fa:	d801      	bhi.n	8003300 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x48>
 80032fc:	2301      	movs	r3, #1
 80032fe:	e00b      	b.n	8003318 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 8003300:	edd7 7a02 	vldr	s15, [r7, #8]
 8003304:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003308:	eef4 7ac7 	vcmpe.f32	s15, s14
 800330c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003310:	d801      	bhi.n	8003316 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x5e>
 8003312:	2302      	movs	r3, #2
 8003314:	e000      	b.n	8003318 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x60>
 8003316:	2303      	movs	r3, #3
    mode.odr = (Odr <= 1.6f) ? LIS2DUXS12_1Hz6_ULP
 8003318:	753b      	strb	r3, [r7, #20]
 800331a:	e0a4      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               :                 LIS2DUXS12_25Hz_ULP;
  }
  else if (Power == LIS2DUXS12_LOW_POWER)
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d14f      	bne.n	80033c2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x10a>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_LP
 8003322:	edd7 7a02 	vldr	s15, [r7, #8]
 8003326:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800332a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800332e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003332:	d801      	bhi.n	8003338 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x80>
 8003334:	2304      	movs	r3, #4
 8003336:	e042      	b.n	80033be <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8003338:	edd7 7a02 	vldr	s15, [r7, #8]
 800333c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8003340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003348:	d801      	bhi.n	800334e <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x96>
 800334a:	2305      	movs	r3, #5
 800334c:	e037      	b.n	80033be <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 800334e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003352:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8003356:	eef4 7ac7 	vcmpe.f32	s15, s14
 800335a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335e:	d801      	bhi.n	8003364 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xac>
 8003360:	2306      	movs	r3, #6
 8003362:	e02c      	b.n	80033be <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8003364:	edd7 7a02 	vldr	s15, [r7, #8]
 8003368:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8003578 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 800336c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003374:	d801      	bhi.n	800337a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xc2>
 8003376:	2307      	movs	r3, #7
 8003378:	e021      	b.n	80033be <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 800337a:	edd7 7a02 	vldr	s15, [r7, #8]
 800337e:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 800357c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 8003382:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338a:	d801      	bhi.n	8003390 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800338c:	2308      	movs	r3, #8
 800338e:	e016      	b.n	80033be <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 8003390:	edd7 7a02 	vldr	s15, [r7, #8]
 8003394:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8003580 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 8003398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800339c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a0:	d801      	bhi.n	80033a6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0xee>
 80033a2:	2309      	movs	r3, #9
 80033a4:	e00b      	b.n	80033be <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80033a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80033aa:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8003584 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 80033ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	d801      	bhi.n	80033bc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x104>
 80033b8:	230a      	movs	r3, #10
 80033ba:	e000      	b.n	80033be <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x106>
 80033bc:	230b      	movs	r3, #11
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_LP
 80033be:	753b      	strb	r3, [r7, #20]
 80033c0:	e051      	b.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
               : (Odr <= 100.0f) ? LIS2DUXS12_100Hz_LP
               : (Odr <= 200.0f) ? LIS2DUXS12_200Hz_LP
               : (Odr <= 400.0f) ? LIS2DUXS12_400Hz_LP
               :                   LIS2DUXS12_800Hz_LP;
  }
  else if (Power == LIS2DUXS12_HIGH_PERFORMANCE)
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d14e      	bne.n	8003466 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ae>
  {
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
               : (Odr <=  12.5f) ? LIS2DUXS12_12Hz5_HP
 80033c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80033cc:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80033d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d8:	d801      	bhi.n	80033de <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x126>
 80033da:	2314      	movs	r3, #20
 80033dc:	e042      	b.n	8003464 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80033de:	edd7 7a02 	vldr	s15, [r7, #8]
 80033e2:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80033e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ee:	d801      	bhi.n	80033f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80033f0:	2315      	movs	r3, #21
 80033f2:	e037      	b.n	8003464 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 80033f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80033f8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80033fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003404:	d801      	bhi.n	800340a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x152>
 8003406:	2316      	movs	r3, #22
 8003408:	e02c      	b.n	8003464 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800340a:	edd7 7a02 	vldr	s15, [r7, #8]
 800340e:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8003578 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c0>
 8003412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341a:	d801      	bhi.n	8003420 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x168>
 800341c:	2317      	movs	r3, #23
 800341e:	e021      	b.n	8003464 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003420:	edd7 7a02 	vldr	s15, [r7, #8]
 8003424:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800357c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c4>
 8003428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800342c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003430:	d801      	bhi.n	8003436 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8003432:	2318      	movs	r3, #24
 8003434:	e016      	b.n	8003464 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003436:	edd7 7a02 	vldr	s15, [r7, #8]
 800343a:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8003580 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2c8>
 800343e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003446:	d801      	bhi.n	800344c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8003448:	2319      	movs	r3, #25
 800344a:	e00b      	b.n	8003464 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 800344c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003450:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8003584 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2cc>
 8003454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345c:	d801      	bhi.n	8003462 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 800345e:	231a      	movs	r3, #26
 8003460:	e000      	b.n	8003464 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ac>
 8003462:	231b      	movs	r3, #27
    mode.odr = (Odr <=   6.0f) ? LIS2DUXS12_6Hz_HP
 8003464:	753b      	strb	r3, [r7, #20]
  else
  {
    /* Do nothing */
  }

  if (lis2duxs12_mode_set(&(pObj->Ctx), &mode) != LIS2DUXS12_OK)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3320      	adds	r3, #32
 800346a:	f107 0214 	add.w	r2, r7, #20
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fb71 	bl	8003b58 <lis2duxs12_mode_set>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x1ca>
  {
    return LIS2DUXS12_ERROR;
 800347c:	f04f 33ff 	mov.w	r3, #4294967295
 8003480:	e073      	b.n	800356a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Odr value */
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 8003482:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 8003484:	2b01      	cmp	r3, #1
 8003486:	d05b      	beq.n	8003540 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x288>
 8003488:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 800348a:	2b02      	cmp	r3, #2
 800348c:	d056      	beq.n	800353c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x284>
 800348e:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 8003490:	2b04      	cmp	r3, #4
 8003492:	d051      	beq.n	8003538 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x280>
 8003494:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 8003496:	2b14      	cmp	r3, #20
 8003498:	d04c      	beq.n	8003534 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x27c>
 800349a:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 800349c:	2b05      	cmp	r3, #5
 800349e:	d047      	beq.n	8003530 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x278>
 80034a0:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 80034a2:	2b15      	cmp	r3, #21
 80034a4:	d042      	beq.n	800352c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x274>
 80034a6:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d03d      	beq.n	8003528 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x270>
 80034ac:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d038      	beq.n	8003524 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x26c>
 80034b2:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 80034b4:	2b16      	cmp	r3, #22
 80034b6:	d033      	beq.n	8003520 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x268>
 80034b8:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 80034ba:	2b07      	cmp	r3, #7
 80034bc:	d02e      	beq.n	800351c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x264>
 80034be:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 80034c0:	2b17      	cmp	r3, #23
 80034c2:	d029      	beq.n	8003518 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x260>
 80034c4:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d024      	beq.n	8003514 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x25c>
 80034ca:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 80034cc:	2b18      	cmp	r3, #24
 80034ce:	d01f      	beq.n	8003510 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x258>
 80034d0:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 80034d2:	2b09      	cmp	r3, #9
 80034d4:	d01a      	beq.n	800350c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x254>
 80034d6:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 80034d8:	2b19      	cmp	r3, #25
 80034da:	d015      	beq.n	8003508 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x250>
 80034dc:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 80034de:	2b0a      	cmp	r3, #10
 80034e0:	d010      	beq.n	8003504 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x24c>
 80034e2:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 80034e4:	2b1a      	cmp	r3, #26
 80034e6:	d00b      	beq.n	8003500 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x248>
 80034e8:	7d3b      	ldrb	r3, [r7, #20]
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 80034ea:	2b0b      	cmp	r3, #11
 80034ec:	d006      	beq.n	80034fc <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x244>
 80034ee:	7d3b      	ldrb	r3, [r7, #20]
                  :                                     -1.0f;
 80034f0:	2b1b      	cmp	r3, #27
 80034f2:	d101      	bne.n	80034f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x240>
 80034f4:	4b24      	ldr	r3, [pc, #144]	@ (8003588 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 80034f6:	e024      	b.n	8003542 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
 80034f8:	4b24      	ldr	r3, [pc, #144]	@ (800358c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d4>)
 80034fa:	e022      	b.n	8003542 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_HP) ? 800.0f
 80034fc:	4b22      	ldr	r3, [pc, #136]	@ (8003588 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d0>)
 80034fe:	e020      	b.n	8003542 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_800Hz_LP) ? 800.0f
 8003500:	4b23      	ldr	r3, [pc, #140]	@ (8003590 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 8003502:	e01e      	b.n	8003542 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_HP) ? 400.0f
 8003504:	4b22      	ldr	r3, [pc, #136]	@ (8003590 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2d8>)
 8003506:	e01c      	b.n	8003542 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_400Hz_LP) ? 400.0f
 8003508:	4b22      	ldr	r3, [pc, #136]	@ (8003594 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 800350a:	e01a      	b.n	8003542 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_HP) ? 200.0f
 800350c:	4b21      	ldr	r3, [pc, #132]	@ (8003594 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2dc>)
 800350e:	e018      	b.n	8003542 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_200Hz_LP) ? 200.0f
 8003510:	4b21      	ldr	r3, [pc, #132]	@ (8003598 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 8003512:	e016      	b.n	8003542 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_HP) ? 100.0f
 8003514:	4b20      	ldr	r3, [pc, #128]	@ (8003598 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e0>)
 8003516:	e014      	b.n	8003542 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_100Hz_LP) ? 100.0f
 8003518:	4b20      	ldr	r3, [pc, #128]	@ (800359c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 800351a:	e012      	b.n	8003542 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_HP)  ?  50.0f
 800351c:	4b1f      	ldr	r3, [pc, #124]	@ (800359c <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e4>)
 800351e:	e010      	b.n	8003542 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_50Hz_LP)  ?  50.0f
 8003520:	4b1f      	ldr	r3, [pc, #124]	@ (80035a0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 8003522:	e00e      	b.n	8003542 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_HP)  ?  25.0f
 8003524:	4b1e      	ldr	r3, [pc, #120]	@ (80035a0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 8003526:	e00c      	b.n	8003542 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_LP)  ?  25.0f
 8003528:	4b1d      	ldr	r3, [pc, #116]	@ (80035a0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2e8>)
 800352a:	e00a      	b.n	8003542 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_25Hz_ULP) ?  25.0f
 800352c:	4b1d      	ldr	r3, [pc, #116]	@ (80035a4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 800352e:	e008      	b.n	8003542 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_HP) ?  12.5f
 8003530:	4b1c      	ldr	r3, [pc, #112]	@ (80035a4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2ec>)
 8003532:	e006      	b.n	8003542 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_12Hz5_LP) ?  12.5f
 8003534:	4b1c      	ldr	r3, [pc, #112]	@ (80035a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 8003536:	e004      	b.n	8003542 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_HP)   ?   6.0f
 8003538:	4b1b      	ldr	r3, [pc, #108]	@ (80035a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f0>)
 800353a:	e002      	b.n	8003542 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_6Hz_LP)   ?   6.0f
 800353c:	4b1b      	ldr	r3, [pc, #108]	@ (80035ac <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f4>)
 800353e:	e000      	b.n	8003542 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x28a>
                  : (mode.odr == LIS2DUXS12_3Hz_ULP)  ?   3.0f
 8003540:	4b1b      	ldr	r3, [pc, #108]	@ (80035b0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2f8>)
  pObj->acc_odr = (mode.odr == LIS2DUXS12_1Hz6_ULP) ?   1.6f
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	6353      	str	r3, [r2, #52]	@ 0x34

  if (pObj->acc_odr == -1.0f)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800354c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8003550:	eef4 7a47 	vcmp.f32	s15, s14
 8003554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003558:	d102      	bne.n	8003560 <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2a8>
  {
    return LIS2DUXS12_ERROR;
 800355a:	f04f 33ff 	mov.w	r3, #4294967295
 800355e:	e004      	b.n	800356a <LIS2DUXS12_ACC_SetOutputDataRate_When_Enabled+0x2b2>
  }

  /* Store the current Power value */
  pObj->power_mode = Power;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	79fa      	ldrb	r2, [r7, #7]
 8003564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	3fcccccd 	.word	0x3fcccccd
 8003578:	42480000 	.word	0x42480000
 800357c:	42c80000 	.word	0x42c80000
 8003580:	43480000 	.word	0x43480000
 8003584:	43c80000 	.word	0x43c80000
 8003588:	44480000 	.word	0x44480000
 800358c:	bf800000 	.word	0xbf800000
 8003590:	43c80000 	.word	0x43c80000
 8003594:	43480000 	.word	0x43480000
 8003598:	42c80000 	.word	0x42c80000
 800359c:	42480000 	.word	0x42480000
 80035a0:	41c80000 	.word	0x41c80000
 80035a4:	41480000 	.word	0x41480000
 80035a8:	40c00000 	.word	0x40c00000
 80035ac:	40400000 	.word	0x40400000
 80035b0:	3fcccccd 	.word	0x3fcccccd

080035b4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Power the ultra low power option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled(LIS2DUXS12_Object_t *pObj, float_t Odr,
    LIS2DUXS12_Power_Mode_t Power)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80035c0:	460b      	mov	r3, r1
 80035c2:	71fb      	strb	r3, [r7, #7]
  /* Store the new Odr value */
  if (Power == LIS2DUXS12_ULTRA_LOW_POWER)
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d11a      	bne.n	8003600 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x4c>
  {
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
                    : (Odr <= 3.0f) ? 3.0f
 80035ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80035ce:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80035d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035da:	d802      	bhi.n	80035e2 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x2e>
 80035dc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80035e0:	e00b      	b.n	80035fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
                    :                25.0f;
 80035e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80035e6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80035ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f2:	d801      	bhi.n	80035f8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x44>
 80035f4:	4b33      	ldr	r3, [pc, #204]	@ (80036c4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x110>)
 80035f6:	e000      	b.n	80035fa <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x46>
 80035f8:	4b33      	ldr	r3, [pc, #204]	@ (80036c8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
    pObj->acc_odr = (Odr <= 1.5f) ? 1.5f
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	6353      	str	r3, [r2, #52]	@ 0x34
 80035fe:	e055      	b.n	80036ac <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  }
  else if ((Power == LIS2DUXS12_LOW_POWER) || (Power == LIS2DUXS12_HIGH_PERFORMANCE))
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d002      	beq.n	800360c <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x58>
 8003606:	79fb      	ldrb	r3, [r7, #7]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d14f      	bne.n	80036ac <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf8>
  {
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
                    : (Odr <=  12.5f) ?  12.5f
 800360c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003610:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8003614:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361c:	d801      	bhi.n	8003622 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x6e>
 800361e:	4b2b      	ldr	r3, [pc, #172]	@ (80036cc <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x118>)
 8003620:	e042      	b.n	80036a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  25.0f) ?  25.0f
 8003622:	edd7 7a02 	vldr	s15, [r7, #8]
 8003626:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800362a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800362e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003632:	d801      	bhi.n	8003638 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x84>
 8003634:	4b26      	ldr	r3, [pc, #152]	@ (80036d0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8003636:	e037      	b.n	80036a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <=  50.0f) ?  50.0f
 8003638:	edd7 7a02 	vldr	s15, [r7, #8]
 800363c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8003640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003648:	d801      	bhi.n	800364e <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x9a>
 800364a:	4b1f      	ldr	r3, [pc, #124]	@ (80036c8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 800364c:	e02c      	b.n	80036a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 100.0f) ? 100.0f
 800364e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003652:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80036d4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x120>
 8003656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800365a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365e:	d801      	bhi.n	8003664 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xb0>
 8003660:	4b1d      	ldr	r3, [pc, #116]	@ (80036d8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x124>)
 8003662:	e021      	b.n	80036a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 200.0f) ? 200.0f
 8003664:	edd7 7a02 	vldr	s15, [r7, #8]
 8003668:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80036dc <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x128>
 800366c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003674:	d801      	bhi.n	800367a <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xc6>
 8003676:	4b1a      	ldr	r3, [pc, #104]	@ (80036e0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x12c>)
 8003678:	e016      	b.n	80036a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    : (Odr <= 400.0f) ? 400.0f
 800367a:	edd7 7a02 	vldr	s15, [r7, #8]
 800367e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80036e4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x130>
 8003682:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368a:	d801      	bhi.n	8003690 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xdc>
 800368c:	4b16      	ldr	r3, [pc, #88]	@ (80036e8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x134>)
 800368e:	e00b      	b.n	80036a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
                    :                   800.0f;
 8003690:	edd7 7a02 	vldr	s15, [r7, #8]
 8003694:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80036ec <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x138>
 8003698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800369c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a0:	d801      	bhi.n	80036a6 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf2>
 80036a2:	4b13      	ldr	r3, [pc, #76]	@ (80036f0 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x13c>)
 80036a4:	e000      	b.n	80036a8 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0xf4>
 80036a6:	4b13      	ldr	r3, [pc, #76]	@ (80036f4 <LIS2DUXS12_ACC_SetOutputDataRate_When_Disabled+0x140>)
    pObj->acc_odr = (Odr <=   6.0f) ?   6.0f
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	6353      	str	r3, [r2, #52]	@ 0x34
  {
    /* Do nothing */
  }

  /* Store the new Power value */
  pObj->power_mode = Power;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	79fa      	ldrb	r2, [r7, #7]
 80036b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return LIS2DUXS12_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40400000 	.word	0x40400000
 80036c8:	41c80000 	.word	0x41c80000
 80036cc:	40c00000 	.word	0x40c00000
 80036d0:	41480000 	.word	0x41480000
 80036d4:	42480000 	.word	0x42480000
 80036d8:	42480000 	.word	0x42480000
 80036dc:	42c80000 	.word	0x42c80000
 80036e0:	42c80000 	.word	0x42c80000
 80036e4:	43480000 	.word	0x43480000
 80036e8:	43480000 	.word	0x43480000
 80036ec:	43c80000 	.word	0x43c80000
 80036f0:	43c80000 	.word	0x43c80000
 80036f4:	44480000 	.word	0x44480000

080036f8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	607a      	str	r2, [r7, #4]
 8003702:	461a      	mov	r2, r3
 8003704:	460b      	mov	r3, r1
 8003706:	72fb      	strb	r3, [r7, #11]
 8003708:	4613      	mov	r3, r2
 800370a:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	695c      	ldr	r4, [r3, #20]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	7b1b      	ldrb	r3, [r3, #12]
 8003718:	4618      	mov	r0, r3
 800371a:	7afb      	ldrb	r3, [r7, #11]
 800371c:	b299      	uxth	r1, r3
 800371e:	893b      	ldrh	r3, [r7, #8]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	47a0      	blx	r4
 8003724:	4603      	mov	r3, r0
}
 8003726:	4618      	mov	r0, r3
 8003728:	371c      	adds	r7, #28
 800372a:	46bd      	mov	sp, r7
 800372c:	bd90      	pop	{r4, r7, pc}

0800372e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800372e:	b590      	push	{r4, r7, lr}
 8003730:	b087      	sub	sp, #28
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	461a      	mov	r2, r3
 800373a:	460b      	mov	r3, r1
 800373c:	72fb      	strb	r3, [r7, #11]
 800373e:	4613      	mov	r3, r2
 8003740:	813b      	strh	r3, [r7, #8]
  LIS2DUXS12_Object_t *pObj = (LIS2DUXS12_Object_t *)Handle;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	691c      	ldr	r4, [r3, #16]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	7b1b      	ldrb	r3, [r3, #12]
 800374e:	4618      	mov	r0, r3
 8003750:	7afb      	ldrb	r3, [r7, #11]
 8003752:	b299      	uxth	r1, r3
 8003754:	893b      	ldrh	r3, [r7, #8]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	47a0      	blx	r4
 800375a:	4603      	mov	r3, r0
}
 800375c:	4618      	mov	r0, r3
 800375e:	371c      	adds	r7, #28
 8003760:	46bd      	mov	sp, r7
 8003762:	bd90      	pop	{r4, r7, pc}

08003764 <lis2duxs12_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                   uint16_t len)
{
 8003764:	b590      	push	{r4, r7, lr}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	461a      	mov	r2, r3
 8003770:	460b      	mov	r3, r1
 8003772:	72fb      	strb	r3, [r7, #11]
 8003774:	4613      	mov	r3, r2
 8003776:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d102      	bne.n	8003784 <lis2duxs12_read_reg+0x20>
  {
    return -1;
 800377e:	f04f 33ff 	mov.w	r3, #4294967295
 8003782:	e008      	b.n	8003796 <lis2duxs12_read_reg+0x32>
  }

  return ctx->read_reg(ctx->handle, reg, data, len);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	685c      	ldr	r4, [r3, #4]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	68d8      	ldr	r0, [r3, #12]
 800378c:	893b      	ldrh	r3, [r7, #8]
 800378e:	7af9      	ldrb	r1, [r7, #11]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	47a0      	blx	r4
 8003794:	4603      	mov	r3, r0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	bd90      	pop	{r4, r7, pc}

0800379e <lis2duxs12_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lis2duxs12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                    uint16_t len)
{
 800379e:	b590      	push	{r4, r7, lr}
 80037a0:	b085      	sub	sp, #20
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	607a      	str	r2, [r7, #4]
 80037a8:	461a      	mov	r2, r3
 80037aa:	460b      	mov	r3, r1
 80037ac:	72fb      	strb	r3, [r7, #11]
 80037ae:	4613      	mov	r3, r2
 80037b0:	813b      	strh	r3, [r7, #8]
  if (ctx == NULL)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d102      	bne.n	80037be <lis2duxs12_write_reg+0x20>
  {
    return -1;
 80037b8:	f04f 33ff 	mov.w	r3, #4294967295
 80037bc:	e008      	b.n	80037d0 <lis2duxs12_write_reg+0x32>
  }

  return ctx->write_reg(ctx->handle, reg, data, len);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681c      	ldr	r4, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	68d8      	ldr	r0, [r3, #12]
 80037c6:	893b      	ldrh	r3, [r7, #8]
 80037c8:	7af9      	ldrb	r1, [r7, #11]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	47a0      	blx	r4
 80037ce:	4603      	mov	r3, r0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd90      	pop	{r4, r7, pc}

080037d8 <lis2duxs12_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lis2duxs12_from_fs2g_to_mg(int16_t lsb)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.061f;
 80037e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037e6:	ee07 3a90 	vmov	s15, r3
 80037ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ee:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003804 <lis2duxs12_from_fs2g_to_mg+0x2c>
 80037f2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80037f6:	eeb0 0a67 	vmov.f32	s0, s15
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	3d79db23 	.word	0x3d79db23

08003808 <lis2duxs12_from_fs4g_to_mg>:

float_t lis2duxs12_from_fs4g_to_mg(int16_t lsb)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.122f;
 8003812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800381e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003834 <lis2duxs12_from_fs4g_to_mg+0x2c>
 8003822:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003826:	eeb0 0a67 	vmov.f32	s0, s15
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	3df9db23 	.word	0x3df9db23

08003838 <lis2duxs12_from_fs8g_to_mg>:

float_t lis2duxs12_from_fs8g_to_mg(int16_t lsb)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.244f;
 8003842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003846:	ee07 3a90 	vmov	s15, r3
 800384a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800384e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003864 <lis2duxs12_from_fs8g_to_mg+0x2c>
 8003852:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003856:	eeb0 0a67 	vmov.f32	s0, s15
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	3e79db23 	.word	0x3e79db23

08003868 <lis2duxs12_from_fs16g_to_mg>:

float_t lis2duxs12_from_fs16g_to_mg(int16_t lsb)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	80fb      	strh	r3, [r7, #6]
  return (float_t)lsb * 0.488f;
 8003872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800387e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003894 <lis2duxs12_from_fs16g_to_mg+0x2c>
 8003882:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003886:	eeb0 0a67 	vmov.f32	s0, s15
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	3ef9db23 	.word	0x3ef9db23

08003898 <lis2duxs12_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_WHO_AM_I, val, 1);
 80038a2:	2301      	movs	r3, #1
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	210f      	movs	r1, #15
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7ff ff5b 	bl	8003764 <lis2duxs12_read_reg>
 80038ae:	60f8      	str	r0, [r7, #12]

  return ret;
 80038b0:	68fb      	ldr	r3, [r7, #12]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <lis2duxs12_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_init_set(const stmdev_ctx_t *ctx, lis2duxs12_init_t val)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  lis2duxs12_status_t status;
  uint8_t cnt = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	77fb      	strb	r3, [r7, #31]
  int32_t ret = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]

  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 80038d0:	f107 0214 	add.w	r2, r7, #20
 80038d4:	2301      	movs	r3, #1
 80038d6:	2110      	movs	r1, #16
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff ff43 	bl	8003764 <lis2duxs12_read_reg>
 80038de:	4602      	mov	r2, r0
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	4413      	add	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 80038e6:	f107 0210 	add.w	r2, r7, #16
 80038ea:	2301      	movs	r3, #1
 80038ec:	2113      	movs	r1, #19
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff ff38 	bl	8003764 <lis2duxs12_read_reg>
 80038f4:	4602      	mov	r2, r0
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	4413      	add	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
  switch (val)
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	2b03      	cmp	r3, #3
 8003900:	f200 80ca 	bhi.w	8003a98 <lis2duxs12_init_set+0x1dc>
 8003904:	a201      	add	r2, pc, #4	@ (adr r2, 800390c <lis2duxs12_init_set+0x50>)
 8003906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390a:	bf00      	nop
 800390c:	08003a0d 	.word	0x08003a0d
 8003910:	0800391d 	.word	0x0800391d
 8003914:	08003997 	.word	0x08003997
 8003918:	08003a53 	.word	0x08003a53
  {
    case LIS2DUXS12_BOOT:
      ctrl4.boot = PROPERTY_ENABLE;
 800391c:	7c3b      	ldrb	r3, [r7, #16]
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	743b      	strb	r3, [r7, #16]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003924:	f107 0210 	add.w	r2, r7, #16
 8003928:	2301      	movs	r3, #1
 800392a:	2113      	movs	r1, #19
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff ff36 	bl	800379e <lis2duxs12_write_reg>
 8003932:	4602      	mov	r2, r0
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	4413      	add	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b00      	cmp	r3, #0
 800393e:	f040 80bb 	bne.w	8003ab8 <lis2duxs12_init_set+0x1fc>
        break;
      }

      do
      {
        ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003942:	f107 0210 	add.w	r2, r7, #16
 8003946:	2301      	movs	r3, #1
 8003948:	2113      	movs	r1, #19
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff ff0a 	bl	8003764 <lis2duxs12_read_reg>
 8003950:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d113      	bne.n	8003980 <lis2duxs12_init_set+0xc4>
        {
          break;
        }

        /* boot procedure ended correctly */
        if (ctrl4.boot == 0U)
 8003958:	7c3b      	ldrb	r3, [r7, #16]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00f      	beq.n	8003984 <lis2duxs12_init_set+0xc8>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <lis2duxs12_init_set+0xb8>
        {
          ctx->mdelay(25); /* 25 ms of boot time */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2019      	movs	r0, #25
 8003972:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 8003974:	7ffb      	ldrb	r3, [r7, #31]
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	77fa      	strb	r2, [r7, #31]
 800397a:	2b04      	cmp	r3, #4
 800397c:	d9e1      	bls.n	8003942 <lis2duxs12_init_set+0x86>
 800397e:	e002      	b.n	8003986 <lis2duxs12_init_set+0xca>
          break;
 8003980:	bf00      	nop
 8003982:	e000      	b.n	8003986 <lis2duxs12_init_set+0xca>
          break;
 8003984:	bf00      	nop

      if (cnt >= 5U)
 8003986:	7ffb      	ldrb	r3, [r7, #31]
 8003988:	2b04      	cmp	r3, #4
 800398a:	f240 8097 	bls.w	8003abc <lis2duxs12_init_set+0x200>
      {
        ret = -1;  /* boot procedure failed */
 800398e:	f04f 33ff 	mov.w	r3, #4294967295
 8003992:	61bb      	str	r3, [r7, #24]
      }
      break;
 8003994:	e092      	b.n	8003abc <lis2duxs12_init_set+0x200>
    case LIS2DUXS12_RESET:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 8003996:	7d3b      	ldrb	r3, [r7, #20]
 8003998:	f043 0320 	orr.w	r3, r3, #32
 800399c:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 800399e:	f107 0214 	add.w	r2, r7, #20
 80039a2:	2301      	movs	r3, #1
 80039a4:	2110      	movs	r1, #16
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff fef9 	bl	800379e <lis2duxs12_write_reg>
 80039ac:	4602      	mov	r2, r0
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	4413      	add	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
      if (ret != 0)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f040 8082 	bne.w	8003ac0 <lis2duxs12_init_set+0x204>
        break;
      }

      do
      {
        ret = lis2duxs12_status_get(ctx, &status);
 80039bc:	f107 030c 	add.w	r3, r7, #12
 80039c0:	4619      	mov	r1, r3
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f884 	bl	8003ad0 <lis2duxs12_status_get>
 80039c8:	61b8      	str	r0, [r7, #24]
        if (ret != 0)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d113      	bne.n	80039f8 <lis2duxs12_init_set+0x13c>
        {
          break;
        }

        /* sw-reset procedure ended correctly */
        if (status.sw_reset == 0U)
 80039d0:	7b3b      	ldrb	r3, [r7, #12]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00f      	beq.n	80039fc <lis2duxs12_init_set+0x140>
        {
          break;
        }

        if (ctx->mdelay != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <lis2duxs12_init_set+0x130>
        {
          ctx->mdelay(1); /* should be 50 us */
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2001      	movs	r0, #1
 80039ea:	4798      	blx	r3
        }
      } while (cnt++ < 5U);
 80039ec:	7ffb      	ldrb	r3, [r7, #31]
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	77fa      	strb	r2, [r7, #31]
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d9e2      	bls.n	80039bc <lis2duxs12_init_set+0x100>
 80039f6:	e002      	b.n	80039fe <lis2duxs12_init_set+0x142>
          break;
 80039f8:	bf00      	nop
 80039fa:	e000      	b.n	80039fe <lis2duxs12_init_set+0x142>
          break;
 80039fc:	bf00      	nop

      if (cnt >= 5U)
 80039fe:	7ffb      	ldrb	r3, [r7, #31]
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d95f      	bls.n	8003ac4 <lis2duxs12_init_set+0x208>
      {
        ret = -1;  /* sw-reset procedure failed */
 8003a04:	f04f 33ff 	mov.w	r3, #4294967295
 8003a08:	61bb      	str	r3, [r7, #24]
      }
      break;
 8003a0a:	e05b      	b.n	8003ac4 <lis2duxs12_init_set+0x208>
    case LIS2DUXS12_SENSOR_ONLY_ON:
      /* no embedded funcs are used */
      ctrl4.emb_func_en = PROPERTY_DISABLE;
 8003a0c:	7c3b      	ldrb	r3, [r7, #16]
 8003a0e:	f023 0310 	bic.w	r3, r3, #16
 8003a12:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 8003a14:	7c3b      	ldrb	r3, [r7, #16]
 8003a16:	f043 0320 	orr.w	r3, r3, #32
 8003a1a:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 8003a1c:	7d3b      	ldrb	r3, [r7, #20]
 8003a1e:	f043 0310 	orr.w	r3, r3, #16
 8003a22:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003a24:	f107 0210 	add.w	r2, r7, #16
 8003a28:	2301      	movs	r3, #1
 8003a2a:	2113      	movs	r1, #19
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff feb6 	bl	800379e <lis2duxs12_write_reg>
 8003a32:	4602      	mov	r2, r0
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	4413      	add	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003a3a:	f107 0214 	add.w	r2, r7, #20
 8003a3e:	2301      	movs	r3, #1
 8003a40:	2110      	movs	r1, #16
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff feab 	bl	800379e <lis2duxs12_write_reg>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
      break;
 8003a50:	e039      	b.n	8003ac6 <lis2duxs12_init_set+0x20a>
    case LIS2DUXS12_SENSOR_EMB_FUNC_ON:
      /* complete configuration is used */
      ctrl4.emb_func_en = PROPERTY_ENABLE;
 8003a52:	7c3b      	ldrb	r3, [r7, #16]
 8003a54:	f043 0310 	orr.w	r3, r3, #16
 8003a58:	743b      	strb	r3, [r7, #16]
      ctrl4.bdu = PROPERTY_ENABLE;
 8003a5a:	7c3b      	ldrb	r3, [r7, #16]
 8003a5c:	f043 0320 	orr.w	r3, r3, #32
 8003a60:	743b      	strb	r3, [r7, #16]
      ctrl1.if_add_inc = PROPERTY_ENABLE;
 8003a62:	7d3b      	ldrb	r3, [r7, #20]
 8003a64:	f043 0310 	orr.w	r3, r3, #16
 8003a68:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003a6a:	f107 0210 	add.w	r2, r7, #16
 8003a6e:	2301      	movs	r3, #1
 8003a70:	2113      	movs	r1, #19
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff fe93 	bl	800379e <lis2duxs12_write_reg>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	61bb      	str	r3, [r7, #24]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003a80:	f107 0214 	add.w	r2, r7, #20
 8003a84:	2301      	movs	r3, #1
 8003a86:	2110      	movs	r1, #16
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff fe88 	bl	800379e <lis2duxs12_write_reg>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	4413      	add	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
      break;
 8003a96:	e016      	b.n	8003ac6 <lis2duxs12_init_set+0x20a>
    default:
      ctrl1.sw_reset = PROPERTY_ENABLE;
 8003a98:	7d3b      	ldrb	r3, [r7, #20]
 8003a9a:	f043 0320 	orr.w	r3, r3, #32
 8003a9e:	753b      	strb	r3, [r7, #20]
      ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003aa0:	f107 0214 	add.w	r2, r7, #20
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	2110      	movs	r1, #16
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff fe78 	bl	800379e <lis2duxs12_write_reg>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
      break;
 8003ab6:	e006      	b.n	8003ac6 <lis2duxs12_init_set+0x20a>
        break;
 8003ab8:	bf00      	nop
 8003aba:	e004      	b.n	8003ac6 <lis2duxs12_init_set+0x20a>
      break;
 8003abc:	bf00      	nop
 8003abe:	e002      	b.n	8003ac6 <lis2duxs12_init_set+0x20a>
        break;
 8003ac0:	bf00      	nop
 8003ac2:	e000      	b.n	8003ac6 <lis2duxs12_init_set+0x20a>
      break;
 8003ac4:	bf00      	nop
  }
  return ret;
 8003ac6:	69bb      	ldr	r3, [r7, #24]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3720      	adds	r7, #32
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <lis2duxs12_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_status_get(const stmdev_ctx_t *ctx, lis2duxs12_status_t *val)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  lis2duxs12_status_register_t status_register;
  lis2duxs12_ctrl1_t ctrl1;
  lis2duxs12_ctrl4_t ctrl4;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_STATUS,
 8003ada:	f107 0210 	add.w	r2, r7, #16
 8003ade:	2301      	movs	r3, #1
 8003ae0:	2125      	movs	r1, #37	@ 0x25
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7ff fe3e 	bl	8003764 <lis2duxs12_read_reg>
 8003ae8:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&status_register, 1);
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL1, (uint8_t *)&ctrl1, 1);
 8003aea:	f107 020c 	add.w	r2, r7, #12
 8003aee:	2301      	movs	r3, #1
 8003af0:	2110      	movs	r1, #16
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff fe36 	bl	8003764 <lis2duxs12_read_reg>
 8003af8:	4602      	mov	r2, r0
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	4413      	add	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8003b00:	f107 0208 	add.w	r2, r7, #8
 8003b04:	2301      	movs	r3, #1
 8003b06:	2113      	movs	r1, #19
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff fe2b 	bl	8003764 <lis2duxs12_read_reg>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	4413      	add	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

  val->sw_reset = ctrl1.sw_reset;
 8003b16:	7b3b      	ldrb	r3, [r7, #12]
 8003b18:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003b1c:	b2d9      	uxtb	r1, r3
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	7813      	ldrb	r3, [r2, #0]
 8003b22:	f361 0300 	bfi	r3, r1, #0, #1
 8003b26:	7013      	strb	r3, [r2, #0]
  val->boot     = ctrl4.boot;
 8003b28:	7a3b      	ldrb	r3, [r7, #8]
 8003b2a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003b2e:	b2d9      	uxtb	r1, r3
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	7813      	ldrb	r3, [r2, #0]
 8003b34:	f361 0341 	bfi	r3, r1, #1, #1
 8003b38:	7013      	strb	r3, [r2, #0]
  val->drdy     = status_register.drdy;
 8003b3a:	7c3b      	ldrb	r3, [r7, #16]
 8003b3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003b40:	b2d9      	uxtb	r1, r3
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	7813      	ldrb	r3, [r2, #0]
 8003b46:	f361 0382 	bfi	r3, r1, #2, #1
 8003b4a:	7013      	strb	r3, [r2, #0]

  return ret;
 8003b4c:	697b      	ldr	r3, [r7, #20]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <lis2duxs12_mode_set>:
  * @param  val   set the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_set(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *val)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003b62:	f107 020c 	add.w	r2, r7, #12
 8003b66:	2301      	movs	r3, #1
 8003b68:	2114      	movs	r1, #20
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7ff fdfa 	bl	8003764 <lis2duxs12_read_reg>
 8003b70:	6178      	str	r0, [r7, #20]

  ctrl5.odr = (uint8_t)val->odr & 0xFU;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	7b3b      	ldrb	r3, [r7, #12]
 8003b7e:	f362 1307 	bfi	r3, r2, #4, #4
 8003b82:	733b      	strb	r3, [r7, #12]
  ctrl5.fs = (uint8_t)val->fs;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	785b      	ldrb	r3, [r3, #1]
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	7b3b      	ldrb	r3, [r7, #12]
 8003b90:	f362 0301 	bfi	r3, r2, #0, #2
 8003b94:	733b      	strb	r3, [r7, #12]

  /* set the bandwidth */
  switch (val->odr)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b06      	cmp	r3, #6
 8003b9c:	d859      	bhi.n	8003c52 <lis2duxs12_mode_set+0xfa>
 8003b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba4 <lis2duxs12_mode_set+0x4c>)
 8003ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba4:	08003bc1 	.word	0x08003bc1
 8003ba8:	08003bc1 	.word	0x08003bc1
 8003bac:	08003bc1 	.word	0x08003bc1
 8003bb0:	08003bc1 	.word	0x08003bc1
 8003bb4:	08003bcb 	.word	0x08003bcb
 8003bb8:	08003be7 	.word	0x08003be7
 8003bbc:	08003c13 	.word	0x08003c13
    /* no anti-aliasing filter present */
    case LIS2DUXS12_OFF:
    case LIS2DUXS12_1Hz6_ULP:
    case LIS2DUXS12_3Hz_ULP:
    case LIS2DUXS12_25Hz_ULP:
      ctrl5.bw = 0x0;
 8003bc0:	7b3b      	ldrb	r3, [r7, #12]
 8003bc2:	f023 030c 	bic.w	r3, r3, #12
 8003bc6:	733b      	strb	r3, [r7, #12]
      break;
 8003bc8:	e04d      	b.n	8003c66 <lis2duxs12_mode_set+0x10e>

    /* low-power mode with ODR < 50 Hz */
    case LIS2DUXS12_6Hz_LP:
      switch (val->bw)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	789b      	ldrb	r3, [r3, #2]
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d003      	beq.n	8003bda <lis2duxs12_mode_set+0x82>
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
        case LIS2DUXS12_ODR_div_8:
          /* value not allowed */
          ret = -1;
 8003bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd6:	617b      	str	r3, [r7, #20]
          break;
 8003bd8:	e004      	b.n	8003be4 <lis2duxs12_mode_set+0x8c>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003bda:	7b3b      	ldrb	r3, [r7, #12]
 8003bdc:	f043 030c 	orr.w	r3, r3, #12
 8003be0:	733b      	strb	r3, [r7, #12]
          break;
 8003be2:	bf00      	nop
      }
      break;
 8003be4:	e03f      	b.n	8003c66 <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_12Hz5_LP:
      switch (val->bw)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	789b      	ldrb	r3, [r3, #2]
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d005      	beq.n	8003bfa <lis2duxs12_mode_set+0xa2>
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d009      	beq.n	8003c06 <lis2duxs12_mode_set+0xae>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
        case LIS2DUXS12_ODR_div_4:
          /* value not allowed */
          ret = -1;
 8003bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf6:	617b      	str	r3, [r7, #20]
          break;
 8003bf8:	e00a      	b.n	8003c10 <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 8003bfa:	7b3b      	ldrb	r3, [r7, #12]
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	f362 0383 	bfi	r3, r2, #2, #2
 8003c02:	733b      	strb	r3, [r7, #12]
          break;
 8003c04:	e004      	b.n	8003c10 <lis2duxs12_mode_set+0xb8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003c06:	7b3b      	ldrb	r3, [r7, #12]
 8003c08:	f043 030c 	orr.w	r3, r3, #12
 8003c0c:	733b      	strb	r3, [r7, #12]
          break;
 8003c0e:	bf00      	nop
      }
      break;
 8003c10:	e029      	b.n	8003c66 <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_25Hz_LP:
      switch (val->bw)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	789b      	ldrb	r3, [r3, #2]
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d015      	beq.n	8003c46 <lis2duxs12_mode_set+0xee>
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	dc03      	bgt.n	8003c26 <lis2duxs12_mode_set+0xce>
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d005      	beq.n	8003c2e <lis2duxs12_mode_set+0xd6>
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d009      	beq.n	8003c3a <lis2duxs12_mode_set+0xe2>
      {
        default:
        case LIS2DUXS12_ODR_div_2:
          /* value not allowed */
          ret = -1;
 8003c26:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2a:	617b      	str	r3, [r7, #20]
          break;
 8003c2c:	e010      	b.n	8003c50 <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_4:
          ctrl5.bw = 0x1;
 8003c2e:	7b3b      	ldrb	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f362 0383 	bfi	r3, r2, #2, #2
 8003c36:	733b      	strb	r3, [r7, #12]
          break;
 8003c38:	e00a      	b.n	8003c50 <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_8:
          ctrl5.bw = 0x2;
 8003c3a:	7b3b      	ldrb	r3, [r7, #12]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	f362 0383 	bfi	r3, r2, #2, #2
 8003c42:	733b      	strb	r3, [r7, #12]
          break;
 8003c44:	e004      	b.n	8003c50 <lis2duxs12_mode_set+0xf8>
        case LIS2DUXS12_ODR_div_16:
          ctrl5.bw = 0x3;
 8003c46:	7b3b      	ldrb	r3, [r7, #12]
 8003c48:	f043 030c 	orr.w	r3, r3, #12
 8003c4c:	733b      	strb	r3, [r7, #12]
          break;
 8003c4e:	bf00      	nop
      }
      break;
 8003c50:	e009      	b.n	8003c66 <lis2duxs12_mode_set+0x10e>
    case LIS2DUXS12_100Hz_HP:
    case LIS2DUXS12_200Hz_HP:
    case LIS2DUXS12_400Hz_HP:
    case LIS2DUXS12_800Hz_HP:
    default:
      ctrl5.bw = (uint8_t)val->bw;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	789b      	ldrb	r3, [r3, #2]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	7b3b      	ldrb	r3, [r7, #12]
 8003c5e:	f362 0383 	bfi	r3, r2, #2, #2
 8003c62:	733b      	strb	r3, [r7, #12]
      break;
 8003c64:	bf00      	nop
  }

  if (ret != 0)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <lis2duxs12_mode_set+0x118>
  {
    return ret;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	e02b      	b.n	8003cc8 <lis2duxs12_mode_set+0x170>
  }

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8003c70:	f107 0210 	add.w	r2, r7, #16
 8003c74:	2301      	movs	r3, #1
 8003c76:	2112      	movs	r1, #18
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff fd73 	bl	8003764 <lis2duxs12_read_reg>
 8003c7e:	6178      	str	r0, [r7, #20]

  ctrl3.hp_en = (((uint8_t)val->odr & 0x30U) == 0x10U) ? 1U : 0U;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c88:	2b10      	cmp	r3, #16
 8003c8a:	d101      	bne.n	8003c90 <lis2duxs12_mode_set+0x138>
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	e000      	b.n	8003c92 <lis2duxs12_mode_set+0x13a>
 8003c90:	2200      	movs	r2, #0
 8003c92:	7c3b      	ldrb	r3, [r7, #16]
 8003c94:	f362 0382 	bfi	r3, r2, #2, #1
 8003c98:	743b      	strb	r3, [r7, #16]

  if (ret == 0)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d112      	bne.n	8003cc6 <lis2duxs12_mode_set+0x16e>
  {
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003ca0:	f107 020c 	add.w	r2, r7, #12
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	2114      	movs	r1, #20
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff fd78 	bl	800379e <lis2duxs12_write_reg>
 8003cae:	6178      	str	r0, [r7, #20]
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8003cb0:	f107 0210 	add.w	r2, r7, #16
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	2112      	movs	r1, #18
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff fd70 	bl	800379e <lis2duxs12_write_reg>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003cc6:	697b      	ldr	r3, [r7, #20]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <lis2duxs12_mode_get>:
  * @param  val   get the sensor FS and ODR.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mode_get(const stmdev_ctx_t *ctx, lis2duxs12_md_t *val)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  lis2duxs12_ctrl3_t ctrl3;
  lis2duxs12_ctrl5_t ctrl5;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL5, (uint8_t *)&ctrl5, 1);
 8003cda:	f107 020c 	add.w	r2, r7, #12
 8003cde:	2301      	movs	r3, #1
 8003ce0:	2114      	movs	r1, #20
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff fd3e 	bl	8003764 <lis2duxs12_read_reg>
 8003ce8:	6178      	str	r0, [r7, #20]
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL3, (uint8_t *)&ctrl3, 1);
 8003cea:	f107 0210 	add.w	r2, r7, #16
 8003cee:	2301      	movs	r3, #1
 8003cf0:	2112      	movs	r1, #18
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff fd36 	bl	8003764 <lis2duxs12_read_reg>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]

  switch (ctrl5.odr)
 8003d00:	7b3b      	ldrb	r3, [r7, #12]
 8003d02:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b0f      	cmp	r3, #15
 8003d0a:	f200 809b 	bhi.w	8003e44 <lis2duxs12_mode_get+0x174>
 8003d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d14 <lis2duxs12_mode_get+0x44>)
 8003d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d14:	08003d55 	.word	0x08003d55
 8003d18:	08003d5d 	.word	0x08003d5d
 8003d1c:	08003d65 	.word	0x08003d65
 8003d20:	08003d6d 	.word	0x08003d6d
 8003d24:	08003d75 	.word	0x08003d75
 8003d28:	08003d8d 	.word	0x08003d8d
 8003d2c:	08003da5 	.word	0x08003da5
 8003d30:	08003dbd 	.word	0x08003dbd
 8003d34:	08003dd5 	.word	0x08003dd5
 8003d38:	08003ded 	.word	0x08003ded
 8003d3c:	08003e05 	.word	0x08003e05
 8003d40:	08003e1d 	.word	0x08003e1d
 8003d44:	08003e45 	.word	0x08003e45
 8003d48:	08003e45 	.word	0x08003e45
 8003d4c:	08003e35 	.word	0x08003e35
 8003d50:	08003e3d 	.word	0x08003e3d
  {
    case 0x00:
      val->odr = LIS2DUXS12_OFF;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2200      	movs	r2, #0
 8003d58:	701a      	strb	r2, [r3, #0]
      break;
 8003d5a:	e077      	b.n	8003e4c <lis2duxs12_mode_get+0x17c>
    case 0x01:
      val->odr = LIS2DUXS12_1Hz6_ULP;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	701a      	strb	r2, [r3, #0]
      break;
 8003d62:	e073      	b.n	8003e4c <lis2duxs12_mode_get+0x17c>
    case 0x02:
      val->odr = LIS2DUXS12_3Hz_ULP;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2202      	movs	r2, #2
 8003d68:	701a      	strb	r2, [r3, #0]
      break;
 8003d6a:	e06f      	b.n	8003e4c <lis2duxs12_mode_get+0x17c>
    case 0x03:
      val->odr = LIS2DUXS12_25Hz_ULP;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2203      	movs	r2, #3
 8003d70:	701a      	strb	r2, [r3, #0]
      break;
 8003d72:	e06b      	b.n	8003e4c <lis2duxs12_mode_get+0x17c>
    case 0x04:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_6Hz_HP : LIS2DUXS12_6Hz_LP;
 8003d74:	7c3b      	ldrb	r3, [r7, #16]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <lis2duxs12_mode_get+0xb4>
 8003d80:	2214      	movs	r2, #20
 8003d82:	e000      	b.n	8003d86 <lis2duxs12_mode_get+0xb6>
 8003d84:	2204      	movs	r2, #4
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	701a      	strb	r2, [r3, #0]
      break;
 8003d8a:	e05f      	b.n	8003e4c <lis2duxs12_mode_get+0x17c>
    case 0x05:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_12Hz5_HP : LIS2DUXS12_12Hz5_LP;
 8003d8c:	7c3b      	ldrb	r3, [r7, #16]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <lis2duxs12_mode_get+0xcc>
 8003d98:	2215      	movs	r2, #21
 8003d9a:	e000      	b.n	8003d9e <lis2duxs12_mode_get+0xce>
 8003d9c:	2205      	movs	r2, #5
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	701a      	strb	r2, [r3, #0]
      break;
 8003da2:	e053      	b.n	8003e4c <lis2duxs12_mode_get+0x17c>
    case 0x06:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_25Hz_HP : LIS2DUXS12_25Hz_LP;
 8003da4:	7c3b      	ldrb	r3, [r7, #16]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <lis2duxs12_mode_get+0xe4>
 8003db0:	2216      	movs	r2, #22
 8003db2:	e000      	b.n	8003db6 <lis2duxs12_mode_get+0xe6>
 8003db4:	2206      	movs	r2, #6
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	701a      	strb	r2, [r3, #0]
      break;
 8003dba:	e047      	b.n	8003e4c <lis2duxs12_mode_get+0x17c>
    case 0x07:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_50Hz_HP : LIS2DUXS12_50Hz_LP;
 8003dbc:	7c3b      	ldrb	r3, [r7, #16]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <lis2duxs12_mode_get+0xfc>
 8003dc8:	2217      	movs	r2, #23
 8003dca:	e000      	b.n	8003dce <lis2duxs12_mode_get+0xfe>
 8003dcc:	2207      	movs	r2, #7
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	701a      	strb	r2, [r3, #0]
      break;
 8003dd2:	e03b      	b.n	8003e4c <lis2duxs12_mode_get+0x17c>
    case 0x08:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_100Hz_HP : LIS2DUXS12_100Hz_LP;
 8003dd4:	7c3b      	ldrb	r3, [r7, #16]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <lis2duxs12_mode_get+0x114>
 8003de0:	2218      	movs	r2, #24
 8003de2:	e000      	b.n	8003de6 <lis2duxs12_mode_get+0x116>
 8003de4:	2208      	movs	r2, #8
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	701a      	strb	r2, [r3, #0]
      break;
 8003dea:	e02f      	b.n	8003e4c <lis2duxs12_mode_get+0x17c>
    case 0x09:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_200Hz_HP : LIS2DUXS12_200Hz_LP;
 8003dec:	7c3b      	ldrb	r3, [r7, #16]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <lis2duxs12_mode_get+0x12c>
 8003df8:	2219      	movs	r2, #25
 8003dfa:	e000      	b.n	8003dfe <lis2duxs12_mode_get+0x12e>
 8003dfc:	2209      	movs	r2, #9
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	701a      	strb	r2, [r3, #0]
      break;
 8003e02:	e023      	b.n	8003e4c <lis2duxs12_mode_get+0x17c>
    case 0x0A:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_400Hz_HP : LIS2DUXS12_400Hz_LP;
 8003e04:	7c3b      	ldrb	r3, [r7, #16]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <lis2duxs12_mode_get+0x144>
 8003e10:	221a      	movs	r2, #26
 8003e12:	e000      	b.n	8003e16 <lis2duxs12_mode_get+0x146>
 8003e14:	220a      	movs	r2, #10
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	701a      	strb	r2, [r3, #0]
      break;
 8003e1a:	e017      	b.n	8003e4c <lis2duxs12_mode_get+0x17c>
    case 0x0B:
      val->odr = (ctrl3.hp_en == 0x1U) ? LIS2DUXS12_800Hz_HP : LIS2DUXS12_800Hz_LP;
 8003e1c:	7c3b      	ldrb	r3, [r7, #16]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <lis2duxs12_mode_get+0x15c>
 8003e28:	221b      	movs	r2, #27
 8003e2a:	e000      	b.n	8003e2e <lis2duxs12_mode_get+0x15e>
 8003e2c:	220b      	movs	r2, #11
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	701a      	strb	r2, [r3, #0]
      break;
 8003e32:	e00b      	b.n	8003e4c <lis2duxs12_mode_get+0x17c>
    case 0xe:
      val->odr = LIS2DUXS12_TRIG_PIN;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	222e      	movs	r2, #46	@ 0x2e
 8003e38:	701a      	strb	r2, [r3, #0]
      break;
 8003e3a:	e007      	b.n	8003e4c <lis2duxs12_mode_get+0x17c>
    case 0xf:
      val->odr = LIS2DUXS12_TRIG_SW;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	222f      	movs	r2, #47	@ 0x2f
 8003e40:	701a      	strb	r2, [r3, #0]
      break;
 8003e42:	e003      	b.n	8003e4c <lis2duxs12_mode_get+0x17c>
    default:
      val->odr = LIS2DUXS12_OFF;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2200      	movs	r2, #0
 8003e48:	701a      	strb	r2, [r3, #0]
      break;
 8003e4a:	bf00      	nop
  }

  switch (ctrl5.fs)
 8003e4c:	7b3b      	ldrb	r3, [r7, #12]
 8003e4e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b03      	cmp	r3, #3
 8003e56:	d81b      	bhi.n	8003e90 <lis2duxs12_mode_get+0x1c0>
 8003e58:	a201      	add	r2, pc, #4	@ (adr r2, 8003e60 <lis2duxs12_mode_get+0x190>)
 8003e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5e:	bf00      	nop
 8003e60:	08003e71 	.word	0x08003e71
 8003e64:	08003e79 	.word	0x08003e79
 8003e68:	08003e81 	.word	0x08003e81
 8003e6c:	08003e89 	.word	0x08003e89
  {
    case 0:
      val->fs = LIS2DUXS12_2g;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2200      	movs	r2, #0
 8003e74:	705a      	strb	r2, [r3, #1]
      break;
 8003e76:	e00f      	b.n	8003e98 <lis2duxs12_mode_get+0x1c8>
    case 1:
      val->fs = LIS2DUXS12_4g;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	705a      	strb	r2, [r3, #1]
      break;
 8003e7e:	e00b      	b.n	8003e98 <lis2duxs12_mode_get+0x1c8>
    case 2:
      val->fs = LIS2DUXS12_8g;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	2202      	movs	r2, #2
 8003e84:	705a      	strb	r2, [r3, #1]
      break;
 8003e86:	e007      	b.n	8003e98 <lis2duxs12_mode_get+0x1c8>
    case 3:
      val->fs = LIS2DUXS12_16g;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	705a      	strb	r2, [r3, #1]
      break;
 8003e8e:	e003      	b.n	8003e98 <lis2duxs12_mode_get+0x1c8>
    default:
      val->fs = LIS2DUXS12_2g;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2200      	movs	r2, #0
 8003e94:	705a      	strb	r2, [r3, #1]
      break;
 8003e96:	bf00      	nop
  }

  switch (ctrl5.bw)
 8003e98:	7b3b      	ldrb	r3, [r7, #12]
 8003e9a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d81b      	bhi.n	8003edc <lis2duxs12_mode_get+0x20c>
 8003ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8003eac <lis2duxs12_mode_get+0x1dc>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ebd 	.word	0x08003ebd
 8003eb0:	08003ec5 	.word	0x08003ec5
 8003eb4:	08003ecd 	.word	0x08003ecd
 8003eb8:	08003ed5 	.word	0x08003ed5
  {
    case 0:
      val->bw = LIS2DUXS12_ODR_div_2;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	709a      	strb	r2, [r3, #2]
      break;
 8003ec2:	e00f      	b.n	8003ee4 <lis2duxs12_mode_get+0x214>
    case 1:
      val->bw = LIS2DUXS12_ODR_div_4;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	709a      	strb	r2, [r3, #2]
      break;
 8003eca:	e00b      	b.n	8003ee4 <lis2duxs12_mode_get+0x214>
    case 2:
      val->bw = LIS2DUXS12_ODR_div_8;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	709a      	strb	r2, [r3, #2]
      break;
 8003ed2:	e007      	b.n	8003ee4 <lis2duxs12_mode_get+0x214>
    case 3:
      val->bw = LIS2DUXS12_ODR_div_16;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	709a      	strb	r2, [r3, #2]
      break;
 8003eda:	e003      	b.n	8003ee4 <lis2duxs12_mode_get+0x214>
    default:
      val->bw = LIS2DUXS12_ODR_div_2;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	709a      	strb	r2, [r3, #2]
      break;
 8003ee2:	bf00      	nop
  }

  return ret;
 8003ee4:	697b      	ldr	r3, [r7, #20]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop

08003ef0 <lis2duxs12_exit_deep_power_down>:
  * @param  val      Enter soft power down in SPI case
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_exit_deep_power_down(const stmdev_ctx_t *ctx)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  lis2duxs12_en_device_config_t en_device_config = {0};
 8003ef8:	2300      	movs	r3, #0
 8003efa:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  en_device_config.soft_pd = PROPERTY_ENABLE;
 8003efc:	7a3b      	ldrb	r3, [r7, #8]
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	723b      	strb	r3, [r7, #8]
  ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_EN_DEVICE_CONFIG, (uint8_t *)&en_device_config, 1);
 8003f04:	f107 0208 	add.w	r2, r7, #8
 8003f08:	2301      	movs	r3, #1
 8003f0a:	213e      	movs	r1, #62	@ 0x3e
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff fc46 	bl	800379e <lis2duxs12_write_reg>
 8003f12:	60f8      	str	r0, [r7, #12]

  if (ctx->mdelay != NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <lis2duxs12_exit_deep_power_down+0x34>
  {
    ctx->mdelay(25); /* See AN5812 - paragraphs 3.1.1.1 and 3.1.1.2 */
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2019      	movs	r0, #25
 8003f22:	4798      	blx	r3
  }

  return ret;
 8003f24:	68fb      	ldr	r3, [r7, #12]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
	...

08003f30 <lis2duxs12_xl_data_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_xl_data_get(const stmdev_ctx_t *ctx, const lis2duxs12_md_t *md,
                               lis2duxs12_xl_data_t *data)
{
 8003f30:	b590      	push	{r4, r7, lr}
 8003f32:	b089      	sub	sp, #36	@ 0x24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  uint8_t buff[6];
  int32_t ret;
  uint8_t i;
  uint8_t j;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_OUT_X_L, buff, 6);
 8003f3c:	f107 0210 	add.w	r2, r7, #16
 8003f40:	2306      	movs	r3, #6
 8003f42:	2128      	movs	r1, #40	@ 0x28
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f7ff fc0d 	bl	8003764 <lis2duxs12_read_reg>
 8003f4a:	61b8      	str	r0, [r7, #24]

  /* acceleration conversion */
  j = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	77bb      	strb	r3, [r7, #30]
  for (i = 0U; i < 3U; i++)
 8003f50:	2300      	movs	r3, #0
 8003f52:	77fb      	strb	r3, [r7, #31]
 8003f54:	e08f      	b.n	8004076 <lis2duxs12_xl_data_get+0x146>
  {
    data->raw[i] = (int16_t)buff[j + 1U];
 8003f56:	7fbb      	ldrb	r3, [r7, #30]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	3320      	adds	r3, #32
 8003f5c:	443b      	add	r3, r7
 8003f5e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003f62:	7ffb      	ldrb	r3, [r7, #31]
 8003f64:	b211      	sxth	r1, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	4413      	add	r3, r2
 8003f6e:	460a      	mov	r2, r1
 8003f70:	809a      	strh	r2, [r3, #4]
    data->raw[i] = (data->raw[i] * 256) + (int16_t) buff[j];
 8003f72:	7ffb      	ldrb	r3, [r7, #31]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	3304      	adds	r3, #4
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	7fba      	ldrb	r2, [r7, #30]
 8003f88:	3220      	adds	r2, #32
 8003f8a:	443a      	add	r2, r7
 8003f8c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8003f90:	4413      	add	r3, r2
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	7ffb      	ldrb	r3, [r7, #31]
 8003f96:	b211      	sxth	r1, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	4413      	add	r3, r2
 8003fa0:	460a      	mov	r2, r1
 8003fa2:	809a      	strh	r2, [r3, #4]
    j += 2U;
 8003fa4:	7fbb      	ldrb	r3, [r7, #30]
 8003fa6:	3302      	adds	r3, #2
 8003fa8:	77bb      	strb	r3, [r7, #30]
    switch (md->fs)
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	785b      	ldrb	r3, [r3, #1]
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d856      	bhi.n	8004060 <lis2duxs12_xl_data_get+0x130>
 8003fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb8 <lis2duxs12_xl_data_get+0x88>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08003fc9 	.word	0x08003fc9
 8003fbc:	08003fef 	.word	0x08003fef
 8003fc0:	08004015 	.word	0x08004015
 8003fc4:	0800403b 	.word	0x0800403b
    {
      case LIS2DUXS12_2g:
        data->mg[i] = lis2duxs12_from_fs2g_to_mg(data->raw[i]);
 8003fc8:	7ffb      	ldrb	r3, [r7, #31]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003fd6:	7ffc      	ldrb	r4, [r7, #31]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fbfd 	bl	80037d8 <lis2duxs12_from_fs2g_to_mg>
 8003fde:	eef0 7a40 	vmov.f32	s15, s0
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	00a3      	lsls	r3, r4, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003fec:	e040      	b.n	8004070 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_4g:
        data->mg[i] = lis2duxs12_from_fs4g_to_mg(data->raw[i]);
 8003fee:	7ffb      	ldrb	r3, [r7, #31]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ffc:	7ffc      	ldrb	r4, [r7, #31]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff fc02 	bl	8003808 <lis2duxs12_from_fs4g_to_mg>
 8004004:	eef0 7a40 	vmov.f32	s15, s0
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	00a3      	lsls	r3, r4, #2
 800400c:	4413      	add	r3, r2
 800400e:	edc3 7a00 	vstr	s15, [r3]
        break;
 8004012:	e02d      	b.n	8004070 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_8g:
        data->mg[i] = lis2duxs12_from_fs8g_to_mg(data->raw[i]);
 8004014:	7ffb      	ldrb	r3, [r7, #31]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	3304      	adds	r3, #4
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	4413      	add	r3, r2
 800401e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004022:	7ffc      	ldrb	r4, [r7, #31]
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fc07 	bl	8003838 <lis2duxs12_from_fs8g_to_mg>
 800402a:	eef0 7a40 	vmov.f32	s15, s0
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	00a3      	lsls	r3, r4, #2
 8004032:	4413      	add	r3, r2
 8004034:	edc3 7a00 	vstr	s15, [r3]
        break;
 8004038:	e01a      	b.n	8004070 <lis2duxs12_xl_data_get+0x140>
      case LIS2DUXS12_16g:
        data->mg[i] = lis2duxs12_from_fs16g_to_mg(data->raw[i]);
 800403a:	7ffb      	ldrb	r3, [r7, #31]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	3304      	adds	r3, #4
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	4413      	add	r3, r2
 8004044:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004048:	7ffc      	ldrb	r4, [r7, #31]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fc0c 	bl	8003868 <lis2duxs12_from_fs16g_to_mg>
 8004050:	eef0 7a40 	vmov.f32	s15, s0
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	00a3      	lsls	r3, r4, #2
 8004058:	4413      	add	r3, r2
 800405a:	edc3 7a00 	vstr	s15, [r3]
        break;
 800405e:	e007      	b.n	8004070 <lis2duxs12_xl_data_get+0x140>
      default:
        data->mg[i] = 0.0f;
 8004060:	7ffb      	ldrb	r3, [r7, #31]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	601a      	str	r2, [r3, #0]
        break;
 800406e:	bf00      	nop
  for (i = 0U; i < 3U; i++)
 8004070:	7ffb      	ldrb	r3, [r7, #31]
 8004072:	3301      	adds	r3, #1
 8004074:	77fb      	strb	r3, [r7, #31]
 8004076:	7ffb      	ldrb	r3, [r7, #31]
 8004078:	2b02      	cmp	r3, #2
 800407a:	f67f af6c 	bls.w	8003f56 <lis2duxs12_xl_data_get+0x26>
    }
  }

  return ret;
 800407e:	69bb      	ldr	r3, [r7, #24]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3724      	adds	r7, #36	@ 0x24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd90      	pop	{r4, r7, pc}

08004088 <lis2duxs12_i3c_configure_set>:
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_i3c_configure_set(const stmdev_ctx_t *ctx, const lis2duxs12_i3c_cfg_t *val)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 8004092:	f107 0208 	add.w	r2, r7, #8
 8004096:	2301      	movs	r3, #1
 8004098:	2133      	movs	r1, #51	@ 0x33
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff fb62 	bl	8003764 <lis2duxs12_read_reg>
 80040a0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d122      	bne.n	80040ee <lis2duxs12_i3c_configure_set+0x66>
  {
    i3c_cfg.bus_act_sel = (uint8_t)val->bus_act_sel;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	7a3b      	ldrb	r3, [r7, #8]
 80040b4:	f362 0301 	bfi	r3, r2, #0, #2
 80040b8:	723b      	strb	r3, [r7, #8]
    i3c_cfg.dis_drstdaa = val->drstdaa_en;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	785b      	ldrb	r3, [r3, #1]
 80040be:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	7a3b      	ldrb	r3, [r7, #8]
 80040c6:	f362 1386 	bfi	r3, r2, #6, #1
 80040ca:	723b      	strb	r3, [r7, #8]
    i3c_cfg.asf_on = val->asf_on;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	785b      	ldrb	r3, [r3, #1]
 80040d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	7a3b      	ldrb	r3, [r7, #8]
 80040d8:	f362 1345 	bfi	r3, r2, #5, #1
 80040dc:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 80040de:	f107 0208 	add.w	r2, r7, #8
 80040e2:	2301      	movs	r3, #1
 80040e4:	2133      	movs	r1, #51	@ 0x33
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff fb59 	bl	800379e <lis2duxs12_write_reg>
 80040ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80040ee:	68fb      	ldr	r3, [r7, #12]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <lis2duxs12_i3c_configure_get>:
  * @param  ctx   communication interface handler.(ptr)
  * @param  val   configuration params
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */int32_t lis2duxs12_i3c_configure_get(const stmdev_ctx_t *ctx, lis2duxs12_i3c_cfg_t *val)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  lis2duxs12_i3c_if_ctrl_t i3c_cfg;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_I3C_IF_CTRL, (uint8_t *)&i3c_cfg, 1);
 8004102:	f107 0208 	add.w	r2, r7, #8
 8004106:	2301      	movs	r3, #1
 8004108:	2133      	movs	r1, #51	@ 0x33
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff fb2a 	bl	8003764 <lis2duxs12_read_reg>
 8004110:	60f8      	str	r0, [r7, #12]

  val->drstdaa_en = i3c_cfg.dis_drstdaa;
 8004112:	7a3b      	ldrb	r3, [r7, #8]
 8004114:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004118:	b2d9      	uxtb	r1, r3
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	7853      	ldrb	r3, [r2, #1]
 800411e:	f361 0341 	bfi	r3, r1, #1, #1
 8004122:	7053      	strb	r3, [r2, #1]
  val->asf_on = i3c_cfg.asf_on;
 8004124:	7a3b      	ldrb	r3, [r7, #8]
 8004126:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800412a:	b2d9      	uxtb	r1, r3
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	7853      	ldrb	r3, [r2, #1]
 8004130:	f361 0300 	bfi	r3, r1, #0, #1
 8004134:	7053      	strb	r3, [r2, #1]

  switch (val->bus_act_sel)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d00e      	beq.n	800415c <lis2duxs12_i3c_configure_get+0x64>
 800413e:	2b02      	cmp	r3, #2
 8004140:	dc10      	bgt.n	8004164 <lis2duxs12_i3c_configure_get+0x6c>
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <lis2duxs12_i3c_configure_get+0x54>
 8004146:	2b01      	cmp	r3, #1
 8004148:	d004      	beq.n	8004154 <lis2duxs12_i3c_configure_get+0x5c>
 800414a:	e00b      	b.n	8004164 <lis2duxs12_i3c_configure_get+0x6c>
  {
    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_20US;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2200      	movs	r2, #0
 8004150:	701a      	strb	r2, [r3, #0]
      break;
 8004152:	e00b      	b.n	800416c <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_50US;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2201      	movs	r2, #1
 8004158:	701a      	strb	r2, [r3, #0]
      break;
 800415a:	e007      	b.n	800416c <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_1MS;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2202      	movs	r2, #2
 8004160:	701a      	strb	r2, [r3, #0]
      break;
 8004162:	e003      	b.n	800416c <lis2duxs12_i3c_configure_get+0x74>

    case LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS:
    default:
      val->bus_act_sel = LIS2DUXS12_I3C_BUS_AVAIL_TIME_25MS;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2203      	movs	r2, #3
 8004168:	701a      	strb	r2, [r3, #0]
      break;
 800416a:	bf00      	nop
  }

  return ret;
 800416c:	68fb      	ldr	r3, [r7, #12]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <lis2duxs12_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, STRED_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_mem_bank_set(const stmdev_ctx_t *ctx, lis2duxs12_mem_bank_t val)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	460b      	mov	r3, r1
 8004180:	70fb      	strb	r3, [r7, #3]
  lis2duxs12_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8004182:	f107 0208 	add.w	r2, r7, #8
 8004186:	2301      	movs	r3, #1
 8004188:	213f      	movs	r1, #63	@ 0x3f
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff faea 	bl	8003764 <lis2duxs12_read_reg>
 8004190:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10f      	bne.n	80041b8 <lis2duxs12_mem_bank_set+0x42>
  {
    func_cfg_access.emb_func_reg_access = ((uint8_t)val & 0x1U);
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	7a3b      	ldrb	r3, [r7, #8]
 80041a2:	f362 13c7 	bfi	r3, r2, #7, #1
 80041a6:	723b      	strb	r3, [r7, #8]
    ret = lis2duxs12_write_reg(ctx, LIS2DUXS12_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80041a8:	f107 0208 	add.w	r2, r7, #8
 80041ac:	2301      	movs	r3, #1
 80041ae:	213f      	movs	r1, #63	@ 0x3f
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff faf4 	bl	800379e <lis2duxs12_write_reg>
 80041b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80041b8:	68fb      	ldr	r3, [r7, #12]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <lis2duxs12_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2duxs12_fifo_mode_set(const stmdev_ctx_t *ctx, lis2duxs12_fifo_mode_t val)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b08a      	sub	sp, #40	@ 0x28
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	1d3b      	adds	r3, r7, #4
 80041cc:	e883 0006 	stmia.w	r3, {r1, r2}
  lis2duxs12_fifo_ctrl_t fifo_ctrl;
  lis2duxs12_fifo_wtm_t fifo_wtm;
  lis2duxs12_fifo_batch_dec_t fifo_batch;
  int32_t ret;

  ret = lis2duxs12_read_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 80041d0:	f107 0220 	add.w	r2, r7, #32
 80041d4:	2301      	movs	r3, #1
 80041d6:	2113      	movs	r1, #19
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7ff fac3 	bl	8003764 <lis2duxs12_read_reg>
 80041de:	6278      	str	r0, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 80041e0:	f107 021c 	add.w	r2, r7, #28
 80041e4:	2301      	movs	r3, #1
 80041e6:	2115      	movs	r1, #21
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f7ff fabb 	bl	8003764 <lis2duxs12_read_reg>
 80041ee:	4602      	mov	r2, r0
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	4413      	add	r3, r2
 80041f4:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 80041f6:	f107 0214 	add.w	r2, r7, #20
 80041fa:	2301      	movs	r3, #1
 80041fc:	2147      	movs	r1, #71	@ 0x47
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f7ff fab0 	bl	8003764 <lis2duxs12_read_reg>
 8004204:	4602      	mov	r2, r0
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004208:	4413      	add	r3, r2
 800420a:	627b      	str	r3, [r7, #36]	@ 0x24
  ret += lis2duxs12_read_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 800420c:	f107 0218 	add.w	r2, r7, #24
 8004210:	2301      	movs	r3, #1
 8004212:	2116      	movs	r1, #22
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f7ff faa5 	bl	8003764 <lis2duxs12_read_reg>
 800421a:	4602      	mov	r2, r0
 800421c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421e:	4413      	add	r3, r2
 8004220:	627b      	str	r3, [r7, #36]	@ 0x24

  if (ret == 0)
 8004222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004224:	2b00      	cmp	r3, #0
 8004226:	f040 808a 	bne.w	800433e <lis2duxs12_fifo_mode_set+0x17c>
  {
    /* set FIFO mode */
    if (val.operation != LIS2DUXS12_FIFO_OFF)
 800422a:	793b      	ldrb	r3, [r7, #4]
 800422c:	2b08      	cmp	r3, #8
 800422e:	d00e      	beq.n	800424e <lis2duxs12_fifo_mode_set+0x8c>
    {
      ctrl4.fifo_en = 1;
 8004230:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004234:	f043 0308 	orr.w	r3, r3, #8
 8004238:	f887 3020 	strb.w	r3, [r7, #32]
      fifo_ctrl.fifo_mode = ((uint8_t)val.operation & 0x7U);
 800423c:	793b      	ldrb	r3, [r7, #4]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	b2da      	uxtb	r2, r3
 8004244:	7f3b      	ldrb	r3, [r7, #28]
 8004246:	f362 0302 	bfi	r3, r2, #0, #3
 800424a:	773b      	strb	r3, [r7, #28]
 800424c:	e005      	b.n	800425a <lis2duxs12_fifo_mode_set+0x98>
    }
    else
    {
      ctrl4.fifo_en = 0;
 800424e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004252:	f023 0308 	bic.w	r3, r3, #8
 8004256:	f887 3020 	strb.w	r3, [r7, #32]
    }

    /* set fifo depth (1X/2X) */
    fifo_ctrl.fifo_depth = (uint8_t)val.store;
 800425a:	797b      	ldrb	r3, [r7, #5]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	b2da      	uxtb	r2, r3
 8004262:	7f3b      	ldrb	r3, [r7, #28]
 8004264:	f362 1386 	bfi	r3, r2, #6, #1
 8004268:	773b      	strb	r3, [r7, #28]

    /* Set xl_only_fifo */
    fifo_wtm.xl_only_fifo = val.xl_only;
 800426a:	79bb      	ldrb	r3, [r7, #6]
 800426c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004270:	b2da      	uxtb	r2, r3
 8004272:	7e3b      	ldrb	r3, [r7, #24]
 8004274:	f362 13c7 	bfi	r3, r2, #7, #1
 8004278:	763b      	strb	r3, [r7, #24]

    /* set batching info */
    if (val.batch.dec_ts != LIS2DUXS12_DEC_TS_OFF)
 800427a:	7a3b      	ldrb	r3, [r7, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00f      	beq.n	80042a0 <lis2duxs12_fifo_mode_set+0xde>
    {
      fifo_batch.dec_ts_batch = (uint8_t)val.batch.dec_ts;
 8004280:	7a3b      	ldrb	r3, [r7, #8]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	b2da      	uxtb	r2, r3
 8004288:	7d3b      	ldrb	r3, [r7, #20]
 800428a:	f362 03c4 	bfi	r3, r2, #3, #2
 800428e:	753b      	strb	r3, [r7, #20]
      fifo_batch.bdr_xl = (uint8_t)val.batch.bdr_xl;
 8004290:	7a7b      	ldrb	r3, [r7, #9]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	b2da      	uxtb	r2, r3
 8004298:	7d3b      	ldrb	r3, [r7, #20]
 800429a:	f362 0302 	bfi	r3, r2, #0, #3
 800429e:	753b      	strb	r3, [r7, #20]
    }

    fifo_ctrl.cfg_chg_en = val.cfg_change_in_fifo;
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	7f3b      	ldrb	r3, [r7, #28]
 80042aa:	f362 13c7 	bfi	r3, r2, #7, #1
 80042ae:	773b      	strb	r3, [r7, #28]

    /* set watermark */
    if (val.watermark > 0U)
 80042b0:	79bb      	ldrb	r3, [r7, #6]
 80042b2:	f023 0301 	bic.w	r3, r3, #1
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d014      	beq.n	80042e6 <lis2duxs12_fifo_mode_set+0x124>
    {
      fifo_ctrl.stop_on_fth = (val.fifo_event == LIS2DUXS12_FIFO_EV_WTM) ? 1 : 0;
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	bf0c      	ite	eq
 80042c8:	2301      	moveq	r3, #1
 80042ca:	2300      	movne	r3, #0
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	7f3b      	ldrb	r3, [r7, #28]
 80042d0:	f362 03c3 	bfi	r3, r2, #3, #1
 80042d4:	773b      	strb	r3, [r7, #28]
      fifo_wtm.fth = val.watermark;
 80042d6:	79bb      	ldrb	r3, [r7, #6]
 80042d8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	7e3b      	ldrb	r3, [r7, #24]
 80042e0:	f362 0306 	bfi	r3, r2, #0, #7
 80042e4:	763b      	strb	r3, [r7, #24]
    }

    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_BATCH_DEC, (uint8_t *)&fifo_batch, 1);
 80042e6:	f107 0214 	add.w	r2, r7, #20
 80042ea:	2301      	movs	r3, #1
 80042ec:	2147      	movs	r1, #71	@ 0x47
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f7ff fa55 	bl	800379e <lis2duxs12_write_reg>
 80042f4:	4602      	mov	r2, r0
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	4413      	add	r3, r2
 80042fa:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_WTM, (uint8_t *)&fifo_wtm, 1);
 80042fc:	f107 0218 	add.w	r2, r7, #24
 8004300:	2301      	movs	r3, #1
 8004302:	2116      	movs	r1, #22
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f7ff fa4a 	bl	800379e <lis2duxs12_write_reg>
 800430a:	4602      	mov	r2, r0
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	4413      	add	r3, r2
 8004310:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_FIFO_CTRL, (uint8_t *)&fifo_ctrl, 1);
 8004312:	f107 021c 	add.w	r2, r7, #28
 8004316:	2301      	movs	r3, #1
 8004318:	2115      	movs	r1, #21
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7ff fa3f 	bl	800379e <lis2duxs12_write_reg>
 8004320:	4602      	mov	r2, r0
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	4413      	add	r3, r2
 8004326:	627b      	str	r3, [r7, #36]	@ 0x24
    ret += lis2duxs12_write_reg(ctx, LIS2DUXS12_CTRL4, (uint8_t *)&ctrl4, 1);
 8004328:	f107 0220 	add.w	r2, r7, #32
 800432c:	2301      	movs	r3, #1
 800432e:	2113      	movs	r1, #19
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f7ff fa34 	bl	800379e <lis2duxs12_write_reg>
 8004336:	4602      	mov	r2, r0
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	4413      	add	r3, r2
 800433c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  return ret;
 800433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004340:	4618      	mov	r0, r3
 8004342:	3728      	adds	r7, #40	@ 0x28
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d103      	bne.n	8004364 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 800435c:	f04f 33ff 	mov.w	r3, #4294967295
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	e067      	b.n	8004434 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	7b1a      	ldrb	r2, [r3, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	699a      	ldr	r2, [r3, #24]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a28      	ldr	r2, [pc, #160]	@ (8004440 <LIS2MDL_RegisterBusIO+0xf8>)
 80043a0:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a27      	ldr	r2, [pc, #156]	@ (8004444 <LIS2MDL_RegisterBusIO+0xfc>)
 80043a6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	69da      	ldr	r2, [r3, #28]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d103      	bne.n	80043c6 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 80043be:	f04f 33ff 	mov.w	r3, #4294967295
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	e036      	b.n	8004434 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4798      	blx	r3
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 80043d2:	f04f 33ff 	mov.w	r3, #4294967295
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	e02c      	b.n	8004434 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d028      	beq.n	8004434 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d123      	bne.n	8004434 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d10d      	bne.n	8004410 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 80043f4:	2334      	movs	r3, #52	@ 0x34
 80043f6:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 80043f8:	7afb      	ldrb	r3, [r7, #11]
 80043fa:	461a      	mov	r2, r3
 80043fc:	2162      	movs	r1, #98	@ 0x62
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fb1b 	bl	8004a3a <LIS2MDL_Write_Reg>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d014      	beq.n	8004434 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800440a:	f04f 33ff 	mov.w	r3, #4294967295
 800440e:	e012      	b.n	8004436 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b03      	cmp	r3, #3
 8004416:	d101      	bne.n	800441c <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	e00c      	b.n	8004436 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3320      	adds	r3, #32
 8004420:	2101      	movs	r1, #1
 8004422:	4618      	mov	r0, r3
 8004424:	f000 ff79 	bl	800531a <lis2mdl_i2c_interface_set>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800442e:	f04f 33ff 	mov.w	r3, #4294967295
 8004432:	e000      	b.n	8004436 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8004434:	68fb      	ldr	r3, [r7, #12]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	08004a91 	.word	0x08004a91
 8004444:	08004b13 	.word	0x08004b13

08004448 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	2b03      	cmp	r3, #3
 8004456:	d144      	bne.n	80044e2 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004458:	f107 0208 	add.w	r2, r7, #8
 800445c:	2301      	movs	r3, #1
 800445e:	2162      	movs	r1, #98	@ 0x62
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fb97 	bl	8004b94 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 800446c:	f04f 33ff 	mov.w	r3, #4294967295
 8004470:	e06c      	b.n	800454c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004472:	f107 020c 	add.w	r2, r7, #12
 8004476:	2301      	movs	r3, #1
 8004478:	2160      	movs	r1, #96	@ 0x60
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fb8a 	bl	8004b94 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8004486:	f04f 33ff 	mov.w	r3, #4294967295
 800448a:	e05f      	b.n	800454c <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 800448c:	7a3b      	ldrb	r3, [r7, #8]
 800448e:	f043 0310 	orr.w	r3, r3, #16
 8004492:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8004494:	7a3b      	ldrb	r3, [r7, #8]
 8004496:	f023 0302 	bic.w	r3, r3, #2
 800449a:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 800449c:	7b3b      	ldrb	r3, [r7, #12]
 800449e:	2202      	movs	r2, #2
 80044a0:	f362 0301 	bfi	r3, r2, #0, #2
 80044a4:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80044a6:	7b3b      	ldrb	r3, [r7, #12]
 80044a8:	f043 030c 	orr.w	r3, r3, #12
 80044ac:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80044ae:	f107 0208 	add.w	r2, r7, #8
 80044b2:	2301      	movs	r3, #1
 80044b4:	2162      	movs	r1, #98	@ 0x62
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fcab 	bl	8004e12 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 80044c2:	f04f 33ff 	mov.w	r3, #4294967295
 80044c6:	e041      	b.n	800454c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80044c8:	f107 020c 	add.w	r2, r7, #12
 80044cc:	2301      	movs	r3, #1
 80044ce:	2160      	movs	r1, #96	@ 0x60
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fc9e 	bl	8004e12 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d032      	beq.n	8004542 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 80044dc:	f04f 33ff 	mov.w	r3, #4294967295
 80044e0:	e034      	b.n	800454c <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	3320      	adds	r3, #32
 80044e6:	2101      	movs	r1, #1
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 fe71 	bl	80051d0 <lis2mdl_block_data_update_set>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 80044f4:	f04f 33ff 	mov.w	r3, #4294967295
 80044f8:	e028      	b.n	800454c <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3320      	adds	r3, #32
 80044fe:	2102      	movs	r1, #2
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fde0 	bl	80050c6 <lis2mdl_operating_mode_set>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 800450c:	f04f 33ff 	mov.w	r3, #4294967295
 8004510:	e01c      	b.n	800454c <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3320      	adds	r3, #32
 8004516:	2103      	movs	r1, #3
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fdfa 	bl	8005112 <lis2mdl_data_rate_set>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8004524:	f04f 33ff 	mov.w	r3, #4294967295
 8004528:	e010      	b.n	800454c <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	3320      	adds	r3, #32
 800452e:	2100      	movs	r1, #0
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fecc 	bl	80052ce <lis2mdl_self_test_set>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 800453c:	f04f 33ff 	mov.w	r3, #4294967295
 8004540:	e004      	b.n	800454c <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f8a5 	bl	80046ac <LIS2MDL_MAG_Disable>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8004568:	f04f 33ff 	mov.w	r3, #4294967295
 800456c:	e004      	b.n	8004578 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2b03      	cmp	r3, #3
 8004590:	d10b      	bne.n	80045aa <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8004592:	2301      	movs	r3, #1
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	214f      	movs	r1, #79	@ 0x4f
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 fafb 	bl	8004b94 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00e      	beq.n	80045c2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80045a4:	f04f 33ff 	mov.w	r3, #4294967295
 80045a8:	e00c      	b.n	80045c4 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3320      	adds	r3, #32
 80045ae:	6839      	ldr	r1, [r7, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fe7b 	bl	80052ac <lis2mdl_device_id_get>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80045bc:	f04f 33ff 	mov.w	r3, #4294967295
 80045c0:	e000      	b.n	80045c4 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2200      	movs	r2, #0
 80045da:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2200      	movs	r2, #0
 80045e0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2201      	movs	r2, #1
 80045e6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2200      	movs	r2, #0
 80045ec:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2200      	movs	r2, #0
 80045f2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	2200      	movs	r2, #0
 80045f8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2232      	movs	r2, #50	@ 0x32
 80045fe:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	4a04      	ldr	r2, [pc, #16]	@ (8004624 <LIS2MDL_GetCapabilities+0x58>)
 8004614:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	42c80000 	.word	0x42c80000

08004628 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	e032      	b.n	80046a4 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b03      	cmp	r3, #3
 8004644:	d11d      	bne.n	8004682 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004646:	f107 020c 	add.w	r2, r7, #12
 800464a:	2301      	movs	r3, #1
 800464c:	2160      	movs	r1, #96	@ 0x60
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 faa0 	bl	8004b94 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800465a:	f04f 33ff 	mov.w	r3, #4294967295
 800465e:	e021      	b.n	80046a4 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8004660:	7b3b      	ldrb	r3, [r7, #12]
 8004662:	f023 0303 	bic.w	r3, r3, #3
 8004666:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004668:	f107 020c 	add.w	r2, r7, #12
 800466c:	2301      	movs	r3, #1
 800466e:	2160      	movs	r1, #96	@ 0x60
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fbce 	bl	8004e12 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00e      	beq.n	800469a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 800467c:	f04f 33ff 	mov.w	r3, #4294967295
 8004680:	e010      	b.n	80046a4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3320      	adds	r3, #32
 8004686:	2100      	movs	r1, #0
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fd1c 	bl	80050c6 <lis2mdl_operating_mode_set>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004694:	f04f 33ff 	mov.w	r3, #4294967295
 8004698:	e004      	b.n	80046a4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	e033      	b.n	800472a <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d11e      	bne.n	8004708 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80046ca:	f107 020c 	add.w	r2, r7, #12
 80046ce:	2301      	movs	r3, #1
 80046d0:	2160      	movs	r1, #96	@ 0x60
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fa5e 	bl	8004b94 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 80046de:	f04f 33ff 	mov.w	r3, #4294967295
 80046e2:	e022      	b.n	800472a <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80046e4:	7b3b      	ldrb	r3, [r7, #12]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f362 0301 	bfi	r3, r2, #0, #2
 80046ec:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80046ee:	f107 020c 	add.w	r2, r7, #12
 80046f2:	2301      	movs	r3, #1
 80046f4:	2160      	movs	r1, #96	@ 0x60
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fb8b 	bl	8004e12 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00e      	beq.n	8004720 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004702:	f04f 33ff 	mov.w	r3, #4294967295
 8004706:	e010      	b.n	800472a <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3320      	adds	r3, #32
 800470c:	2102      	movs	r1, #2
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fcd9 	bl	80050c6 <lis2mdl_operating_mode_set>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800471a:	f04f 33ff 	mov.w	r3, #4294967295
 800471e:	e004      	b.n	800472a <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float_t *Sensitivity)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8004742:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
	...

08004754 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float_t *Odr)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3320      	adds	r3, #32
 8004766:	f107 020b 	add.w	r2, r7, #11
 800476a:	4611      	mov	r1, r2
 800476c:	4618      	mov	r0, r3
 800476e:	f000 fcf7 	bl	8005160 <lis2mdl_data_rate_get>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8004778:	f04f 33ff 	mov.w	r3, #4294967295
 800477c:	e023      	b.n	80047c6 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800477e:	7afb      	ldrb	r3, [r7, #11]
 8004780:	2b03      	cmp	r3, #3
 8004782:	d81b      	bhi.n	80047bc <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8004784:	a201      	add	r2, pc, #4	@ (adr r2, 800478c <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8004786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478a:	bf00      	nop
 800478c:	0800479d 	.word	0x0800479d
 8004790:	080047a5 	.word	0x080047a5
 8004794:	080047ad 	.word	0x080047ad
 8004798:	080047b5 	.word	0x080047b5
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	4a0c      	ldr	r2, [pc, #48]	@ (80047d0 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80047a0:	601a      	str	r2, [r3, #0]
      break;
 80047a2:	e00f      	b.n	80047c4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	4a0b      	ldr	r2, [pc, #44]	@ (80047d4 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80047a8:	601a      	str	r2, [r3, #0]
      break;
 80047aa:	e00b      	b.n	80047c4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	4a0a      	ldr	r2, [pc, #40]	@ (80047d8 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80047b0:	601a      	str	r2, [r3, #0]
      break;
 80047b2:	e007      	b.n	80047c4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	4a09      	ldr	r2, [pc, #36]	@ (80047dc <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80047b8:	601a      	str	r2, [r3, #0]
      break;
 80047ba:	e003      	b.n	80047c4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80047bc:	f04f 33ff 	mov.w	r3, #4294967295
 80047c0:	60fb      	str	r3, [r7, #12]
      break;
 80047c2:	bf00      	nop
  }

  return ret;
 80047c4:	68fb      	ldr	r3, [r7, #12]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	41200000 	.word	0x41200000
 80047d4:	41a00000 	.word	0x41a00000
 80047d8:	42480000 	.word	0x42480000
 80047dc:	42c80000 	.word	0x42c80000

080047e0 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float_t Odr)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80047ec:	edd7 7a00 	vldr	s15, [r7]
 80047f0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80047f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fc:	d801      	bhi.n	8004802 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 80047fe:	2300      	movs	r3, #0
 8004800:	e016      	b.n	8004830 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004802:	edd7 7a00 	vldr	s15, [r7]
 8004806:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800480a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800480e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004812:	d801      	bhi.n	8004818 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8004814:	2301      	movs	r3, #1
 8004816:	e00b      	b.n	8004830 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8004818:	edd7 7a00 	vldr	s15, [r7]
 800481c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80048a4 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8004820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004828:	d801      	bhi.n	800482e <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 800482a:	2302      	movs	r3, #2
 800482c:	e000      	b.n	8004830 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800482e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8004830:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	2b03      	cmp	r3, #3
 8004838:	d121      	bne.n	800487e <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800483a:	f107 020c 	add.w	r2, r7, #12
 800483e:	2301      	movs	r3, #1
 8004840:	2160      	movs	r1, #96	@ 0x60
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f9a6 	bl	8004b94 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 800484e:	f04f 33ff 	mov.w	r3, #4294967295
 8004852:	e022      	b.n	800489a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	b2da      	uxtb	r2, r3
 800485c:	7b3b      	ldrb	r3, [r7, #12]
 800485e:	f362 0383 	bfi	r3, r2, #2, #2
 8004862:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004864:	f107 020c 	add.w	r2, r7, #12
 8004868:	2301      	movs	r3, #1
 800486a:	2160      	movs	r1, #96	@ 0x60
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fad0 	bl	8004e12 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00f      	beq.n	8004898 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8004878:	f04f 33ff 	mov.w	r3, #4294967295
 800487c:	e00d      	b.n	800489a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3320      	adds	r3, #32
 8004882:	7bfa      	ldrb	r2, [r7, #15]
 8004884:	4611      	mov	r1, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fc43 	bl	8005112 <lis2mdl_data_rate_set>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8004892:	f04f 33ff 	mov.w	r3, #4294967295
 8004896:	e000      	b.n	800489a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	42480000 	.word	0x42480000

080048a8 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *FullScale = 50;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2232      	movs	r2, #50	@ 0x32
 80048b6:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
  (void)pObj;
  (void)FullScale;

  return LIS2MDL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3320      	adds	r3, #32
 80048ec:	f107 0208 	add.w	r2, r7, #8
 80048f0:	4611      	mov	r1, r2
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fc92 	bl	800521c <lis2mdl_magnetic_raw_get>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80048fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004902:	e00c      	b.n	800491e <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004904:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800490c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004914:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b088      	sub	sp, #32
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	2b03      	cmp	r3, #3
 800493c:	d134      	bne.n	80049a8 <LIS2MDL_MAG_GetAxes+0x82>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 800493e:	f107 0218 	add.w	r2, r7, #24
 8004942:	2306      	movs	r3, #6
 8004944:	2168      	movs	r1, #104	@ 0x68
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f924 	bl	8004b94 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <LIS2MDL_MAG_GetAxes+0x32>
    {
      return LIS2MDL_ERROR;
 8004952:	f04f 33ff 	mov.w	r3, #4294967295
 8004956:	e06c      	b.n	8004a32 <LIS2MDL_MAG_GetAxes+0x10c>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8004958:	7e7b      	ldrb	r3, [r7, #25]
 800495a:	b21b      	sxth	r3, r3
 800495c:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 800495e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004962:	b29b      	uxth	r3, r3
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	b29b      	uxth	r3, r3
 8004968:	7e3a      	ldrb	r2, [r7, #24]
 800496a:	4413      	add	r3, r2
 800496c:	b29b      	uxth	r3, r3
 800496e:	b21b      	sxth	r3, r3
 8004970:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8004972:	7efb      	ldrb	r3, [r7, #27]
 8004974:	b21b      	sxth	r3, r3
 8004976:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8004978:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800497c:	b29b      	uxth	r3, r3
 800497e:	021b      	lsls	r3, r3, #8
 8004980:	b29b      	uxth	r3, r3
 8004982:	7eba      	ldrb	r2, [r7, #26]
 8004984:	4413      	add	r3, r2
 8004986:	b29b      	uxth	r3, r3
 8004988:	b21b      	sxth	r3, r3
 800498a:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 800498c:	7f7b      	ldrb	r3, [r7, #29]
 800498e:	b21b      	sxth	r3, r3
 8004990:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8004992:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004996:	b29b      	uxth	r3, r3
 8004998:	021b      	lsls	r3, r3, #8
 800499a:	b29b      	uxth	r3, r3
 800499c:	7f3a      	ldrb	r2, [r7, #28]
 800499e:	4413      	add	r3, r2
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	b21b      	sxth	r3, r3
 80049a4:	82bb      	strh	r3, [r7, #20]
 80049a6:	e00d      	b.n	80049c4 <LIS2MDL_MAG_GetAxes+0x9e>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3320      	adds	r3, #32
 80049ac:	f107 0210 	add.w	r2, r7, #16
 80049b0:	4611      	mov	r1, r2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fc32 	bl	800521c <lis2mdl_magnetic_raw_get>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <LIS2MDL_MAG_GetAxes+0x9e>
    {
      return LIS2MDL_ERROR;
 80049be:	f04f 33ff 	mov.w	r3, #4294967295
 80049c2:	e036      	b.n	8004a32 <LIS2MDL_MAG_GetAxes+0x10c>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 80049c4:	f107 030c 	add.w	r3, r7, #12
 80049c8:	4619      	mov	r1, r3
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff feb1 	bl	8004732 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80049d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80049d4:	ee07 3a90 	vmov	s15, r3
 80049d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80049e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049e8:	ee17 2a90 	vmov	r2, s15
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80049f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80049f4:	ee07 3a90 	vmov	s15, r3
 80049f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a08:	ee17 2a90 	vmov	r2, s15
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8004a10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a14:	ee07 3a90 	vmov	s15, r3
 8004a18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a28:	ee17 2a90 	vmov	r2, s15
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3720      	adds	r7, #32
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b082      	sub	sp, #8
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	460b      	mov	r3, r1
 8004a44:	70fb      	strb	r3, [r7, #3]
 8004a46:	4613      	mov	r3, r2
 8004a48:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d10b      	bne.n	8004a6a <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8004a52:	1cba      	adds	r2, r7, #2
 8004a54:	78f9      	ldrb	r1, [r7, #3]
 8004a56:	2301      	movs	r3, #1
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f9da 	bl	8004e12 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d010      	beq.n	8004a86 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8004a64:	f04f 33ff 	mov.w	r3, #4294967295
 8004a68:	e00e      	b.n	8004a88 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f103 0020 	add.w	r0, r3, #32
 8004a70:	1cba      	adds	r2, r7, #2
 8004a72:	78f9      	ldrb	r1, [r7, #3]
 8004a74:	2301      	movs	r3, #1
 8004a76:	f000 fb08 	bl	800508a <lis2mdl_write_reg>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8004a80:	f04f 33ff 	mov.w	r3, #4294967295
 8004a84:	e000      	b.n	8004a88 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a90:	b590      	push	{r4, r7, lr}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	607a      	str	r2, [r7, #4]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	72fb      	strb	r3, [r7, #11]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10e      	bne.n	8004ace <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	695c      	ldr	r4, [r3, #20]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	7b1b      	ldrb	r3, [r3, #12]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	7afb      	ldrb	r3, [r7, #11]
 8004abc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	893b      	ldrh	r3, [r7, #8]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	47a0      	blx	r4
 8004aca:	4603      	mov	r3, r0
 8004acc:	e01d      	b.n	8004b0a <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d10b      	bne.n	8004aee <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	695c      	ldr	r4, [r3, #20]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	7b1b      	ldrb	r3, [r3, #12]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	7afb      	ldrb	r3, [r7, #11]
 8004ae2:	b299      	uxth	r1, r3
 8004ae4:	893b      	ldrh	r3, [r7, #8]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	47a0      	blx	r4
 8004aea:	4603      	mov	r3, r0
 8004aec:	e00d      	b.n	8004b0a <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	695c      	ldr	r4, [r3, #20]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	7b1b      	ldrb	r3, [r3, #12]
 8004af6:	4618      	mov	r0, r3
 8004af8:	7afb      	ldrb	r3, [r7, #11]
 8004afa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	4619      	mov	r1, r3
 8004b02:	893b      	ldrh	r3, [r7, #8]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	47a0      	blx	r4
 8004b08:	4603      	mov	r3, r0
  }
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd90      	pop	{r4, r7, pc}

08004b12 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b12:	b590      	push	{r4, r7, lr}
 8004b14:	b087      	sub	sp, #28
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	607a      	str	r2, [r7, #4]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	460b      	mov	r3, r1
 8004b20:	72fb      	strb	r3, [r7, #11]
 8004b22:	4613      	mov	r3, r2
 8004b24:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10e      	bne.n	8004b50 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	691c      	ldr	r4, [r3, #16]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	7b1b      	ldrb	r3, [r3, #12]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	7afb      	ldrb	r3, [r7, #11]
 8004b3e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	4619      	mov	r1, r3
 8004b46:	893b      	ldrh	r3, [r7, #8]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	47a0      	blx	r4
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	e01d      	b.n	8004b8c <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d10b      	bne.n	8004b70 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	691c      	ldr	r4, [r3, #16]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	7b1b      	ldrb	r3, [r3, #12]
 8004b60:	4618      	mov	r0, r3
 8004b62:	7afb      	ldrb	r3, [r7, #11]
 8004b64:	b299      	uxth	r1, r3
 8004b66:	893b      	ldrh	r3, [r7, #8]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	47a0      	blx	r4
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	e00d      	b.n	8004b8c <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	691c      	ldr	r4, [r3, #16]
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	7b1b      	ldrb	r3, [r3, #12]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	7afb      	ldrb	r3, [r7, #11]
 8004b7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	4619      	mov	r1, r3
 8004b84:	893b      	ldrh	r3, [r7, #8]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	47a0      	blx	r4
 8004b8a:	4603      	mov	r3, r0
  }
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd90      	pop	{r4, r7, pc}

08004b94 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08c      	sub	sp, #48	@ 0x30
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	607a      	str	r2, [r7, #4]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	72fb      	strb	r3, [r7, #11]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004bae:	2340      	movs	r3, #64	@ 0x40
 8004bb0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8004bba:	233d      	movs	r3, #61	@ 0x3d
 8004bbc:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004bbe:	2315      	movs	r3, #21
 8004bc0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004bc4:	2316      	movs	r3, #22
 8004bc6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8004bca:	2317      	movs	r3, #23
 8004bcc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 8004bd0:	2314      	movs	r3, #20
 8004bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004bd6:	2344      	movs	r3, #68	@ 0x44
 8004bd8:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8004bda:	2302      	movs	r3, #2
 8004bdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 8004be0:	2339      	movs	r3, #57	@ 0x39
 8004be2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8004be6:	2301      	movs	r3, #1
 8004be8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004bec:	2329      	movs	r3, #41	@ 0x29
 8004bee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004bf2:	231e      	movs	r3, #30
 8004bf4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 8004bfe:	893b      	ldrh	r3, [r7, #8]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004c04:	2310      	movs	r3, #16
 8004c06:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004c10:	2340      	movs	r3, #64	@ 0x40
 8004c12:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f103 0020 	add.w	r0, r3, #32
 8004c1c:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8004c20:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004c24:	2301      	movs	r3, #1
 8004c26:	f000 fa30 	bl	800508a <lis2mdl_write_reg>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8004c30:	f04f 33ff 	mov.w	r3, #4294967295
 8004c34:	e0e9      	b.n	8004e0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f103 0020 	add.w	r0, r3, #32
 8004c3c:	f107 021f 	add.w	r2, r7, #31
 8004c40:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8004c44:	2301      	movs	r3, #1
 8004c46:	f000 fa20 	bl	800508a <lis2mdl_write_reg>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8004c50:	f04f 33ff 	mov.w	r3, #4294967295
 8004c54:	e0d9      	b.n	8004e0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f103 0020 	add.w	r0, r3, #32
 8004c5c:	f107 020b 	add.w	r2, r7, #11
 8004c60:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8004c64:	2301      	movs	r3, #1
 8004c66:	f000 fa10 	bl	800508a <lis2mdl_write_reg>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d002      	beq.n	8004c76 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8004c70:	f04f 33ff 	mov.w	r3, #4294967295
 8004c74:	e0c9      	b.n	8004e0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f103 0020 	add.w	r0, r3, #32
 8004c7c:	f107 021d 	add.w	r2, r7, #29
 8004c80:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8004c84:	2301      	movs	r3, #1
 8004c86:	f000 fa00 	bl	800508a <lis2mdl_write_reg>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8004c90:	f04f 33ff 	mov.w	r3, #4294967295
 8004c94:	e0b9      	b.n	8004e0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f103 0020 	add.w	r0, r3, #32
 8004c9c:	f107 021e 	add.w	r2, r7, #30
 8004ca0:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	f000 f9f0 	bl	800508a <lis2mdl_write_reg>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8004cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb4:	e0a9      	b.n	8004e0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f103 0020 	add.w	r0, r3, #32
 8004cbc:	f107 0220 	add.w	r2, r7, #32
 8004cc0:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	f000 f9e0 	bl	800508a <lis2mdl_write_reg>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 8004cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd4:	e099      	b.n	8004e0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f103 0020 	add.w	r0, r3, #32
 8004cdc:	f107 021c 	add.w	r2, r7, #28
 8004ce0:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	f000 f9b2 	bl	800504e <lis2mdl_read_reg>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 8004cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf4:	e089      	b.n	8004e0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004cf6:	7f3b      	ldrb	r3, [r7, #28]
 8004cf8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d102      	bne.n	8004d06 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004d00:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004d04:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f103 0020 	add.w	r0, r3, #32
 8004d0c:	f107 021c 	add.w	r2, r7, #28
 8004d10:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8004d14:	2301      	movs	r3, #1
 8004d16:	f000 f9b8 	bl	800508a <lis2mdl_write_reg>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8004d20:	f04f 33ff 	mov.w	r3, #4294967295
 8004d24:	e071      	b.n	8004e0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f103 0020 	add.w	r0, r3, #32
 8004d2c:	f107 0214 	add.w	r2, r7, #20
 8004d30:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8004d34:	2306      	movs	r3, #6
 8004d36:	f000 f98a 	bl	800504e <lis2mdl_read_reg>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8004d40:	f04f 33ff 	mov.w	r3, #4294967295
 8004d44:	e061      	b.n	8004e0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f103 0020 	add.w	r0, r3, #32
 8004d4c:	f107 021b 	add.w	r2, r7, #27
 8004d50:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8004d54:	2301      	movs	r3, #1
 8004d56:	f000 f97a 	bl	800504e <lis2mdl_read_reg>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d002      	beq.n	8004d66 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8004d60:	f04f 33ff 	mov.w	r3, #4294967295
 8004d64:	e051      	b.n	8004e0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8004d66:	7efa      	ldrb	r2, [r7, #27]
 8004d68:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d1e6      	bne.n	8004d46 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f103 0020 	add.w	r0, r3, #32
 8004d7e:	f107 021b 	add.w	r2, r7, #27
 8004d82:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8004d86:	2301      	movs	r3, #1
 8004d88:	f000 f961 	bl	800504e <lis2mdl_read_reg>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8004d92:	f04f 33ff 	mov.w	r3, #4294967295
 8004d96:	e038      	b.n	8004e0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8004d98:	7efa      	ldrb	r2, [r7, #27]
 8004d9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d9e:	4013      	ands	r3, r2
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d1e6      	bne.n	8004d78 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f103 0020 	add.w	r0, r3, #32
 8004db0:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8004db4:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004db8:	2301      	movs	r3, #1
 8004dba:	f000 f966 	bl	800508a <lis2mdl_write_reg>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 8004dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc8:	e01f      	b.n	8004e0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f103 0020 	add.w	r0, r3, #32
 8004dd0:	893b      	ldrh	r3, [r7, #8]
 8004dd2:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	f000 f939 	bl	800504e <lis2mdl_read_reg>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8004de2:	f04f 33ff 	mov.w	r3, #4294967295
 8004de6:	e010      	b.n	8004e0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f103 0020 	add.w	r0, r3, #32
 8004dee:	f107 0220 	add.w	r2, r7, #32
 8004df2:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004df6:	2301      	movs	r3, #1
 8004df8:	f000 f947 	bl	800508a <lis2mdl_write_reg>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8004e02:	f04f 33ff 	mov.w	r3, #4294967295
 8004e06:	e000      	b.n	8004e0a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3730      	adds	r7, #48	@ 0x30
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b08c      	sub	sp, #48	@ 0x30
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	460b      	mov	r3, r1
 8004e20:	72fb      	strb	r3, [r7, #11]
 8004e22:	4613      	mov	r3, r2
 8004e24:	813b      	strh	r3, [r7, #8]
  (void)Length;
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004e26:	2301      	movs	r3, #1
 8004e28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8004e2c:	2340      	movs	r3, #64	@ 0x40
 8004e2e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8004e38:	233c      	movs	r3, #60	@ 0x3c
 8004e3a:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8004e3c:	2315      	movs	r3, #21
 8004e3e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8004e42:	2316      	movs	r3, #22
 8004e44:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8004e48:	2317      	movs	r3, #23
 8004e4a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8004e52:	2314      	movs	r3, #20
 8004e54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8004e58:	2344      	movs	r3, #68	@ 0x44
 8004e5a:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8004e5c:	2339      	movs	r3, #57	@ 0x39
 8004e5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 8004e62:	2380      	movs	r3, #128	@ 0x80
 8004e64:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004e68:	2329      	movs	r3, #41	@ 0x29
 8004e6a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004e6e:	231e      	movs	r3, #30
 8004e70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 8004e74:	2301      	movs	r3, #1
 8004e76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004e7a:	2310      	movs	r3, #16
 8004e7c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004e86:	2340      	movs	r3, #64	@ 0x40
 8004e88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8004e8c:	230e      	movs	r3, #14
 8004e8e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f103 0020 	add.w	r0, r3, #32
 8004e98:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8004e9c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f000 f8f2 	bl	800508a <lis2mdl_write_reg>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8004eac:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb0:	e0c9      	b.n	8005046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f103 0020 	add.w	r0, r3, #32
 8004eb8:	f107 021f 	add.w	r2, r7, #31
 8004ebc:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	f000 f8e2 	bl	800508a <lis2mdl_write_reg>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8004ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed0:	e0b9      	b.n	8005046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f103 0020 	add.w	r0, r3, #32
 8004ed8:	f107 020b 	add.w	r2, r7, #11
 8004edc:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	f000 f8d2 	bl	800508a <lis2mdl_write_reg>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8004eec:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef0:	e0a9      	b.n	8005046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f103 0020 	add.w	r0, r3, #32
 8004ef8:	f107 021e 	add.w	r2, r7, #30
 8004efc:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8004f00:	2301      	movs	r3, #1
 8004f02:	f000 f8c2 	bl	800508a <lis2mdl_write_reg>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8004f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f10:	e099      	b.n	8005046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f103 0020 	add.w	r0, r3, #32
 8004f18:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	f000 f8b3 	bl	800508a <lis2mdl_write_reg>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8004f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2e:	e08a      	b.n	8005046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f103 0020 	add.w	r0, r3, #32
 8004f36:	f107 021d 	add.w	r2, r7, #29
 8004f3a:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f000 f8a3 	bl	800508a <lis2mdl_write_reg>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8004f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4e:	e07a      	b.n	8005046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f103 0020 	add.w	r0, r3, #32
 8004f56:	f107 0220 	add.w	r2, r7, #32
 8004f5a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8004f5e:	2301      	movs	r3, #1
 8004f60:	f000 f893 	bl	800508a <lis2mdl_write_reg>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8004f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f6e:	e06a      	b.n	8005046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f103 0020 	add.w	r0, r3, #32
 8004f76:	f107 021c 	add.w	r2, r7, #28
 8004f7a:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f000 f865 	bl	800504e <lis2mdl_read_reg>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8004f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f8e:	e05a      	b.n	8005046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004f90:	7f3b      	ldrb	r3, [r7, #28]
 8004f92:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d102      	bne.n	8004fa0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f9e:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f103 0020 	add.w	r0, r3, #32
 8004fa6:	f107 021c 	add.w	r2, r7, #28
 8004faa:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f000 f86b 	bl	800508a <lis2mdl_write_reg>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8004fba:	f04f 33ff 	mov.w	r3, #4294967295
 8004fbe:	e042      	b.n	8005046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f103 0020 	add.w	r0, r3, #32
 8004fc6:	f107 0214 	add.w	r2, r7, #20
 8004fca:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8004fce:	2306      	movs	r3, #6
 8004fd0:	f000 f83d 	bl	800504e <lis2mdl_read_reg>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8004fda:	f04f 33ff 	mov.w	r3, #4294967295
 8004fde:	e032      	b.n	8005046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f103 0020 	add.w	r0, r3, #32
 8004fe6:	f107 021b 	add.w	r2, r7, #27
 8004fea:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8004fee:	2301      	movs	r3, #1
 8004ff0:	f000 f82d 	bl	800504e <lis2mdl_read_reg>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8004ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8004ffe:	e022      	b.n	8005046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8005000:	7efa      	ldrb	r2, [r7, #27]
 8005002:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005006:	4013      	ands	r3, r2
 8005008:	b2db      	uxtb	r3, r3
 800500a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800500e:	429a      	cmp	r2, r3
 8005010:	d1e6      	bne.n	8004fe0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f103 0020 	add.w	r0, r3, #32
 8005018:	f107 021b 	add.w	r2, r7, #27
 800501c:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8005020:	2301      	movs	r3, #1
 8005022:	f000 f814 	bl	800504e <lis2mdl_read_reg>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 800502c:	f04f 33ff 	mov.w	r3, #4294967295
 8005030:	e009      	b.n	8005046 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8005032:	7efa      	ldrb	r2, [r7, #27]
 8005034:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005038:	4013      	ands	r3, r2
 800503a:	b2db      	uxtb	r3, r3
 800503c:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005040:	429a      	cmp	r2, r3
 8005042:	d1e6      	bne.n	8005012 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3730      	adds	r7, #48	@ 0x30
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <lis2mdl_read_reg>:
  *
  */
int32_t __weak lis2mdl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800504e:	b590      	push	{r4, r7, lr}
 8005050:	b087      	sub	sp, #28
 8005052:	af00      	add	r7, sp, #0
 8005054:	60f8      	str	r0, [r7, #12]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	461a      	mov	r2, r3
 800505a:	460b      	mov	r3, r1
 800505c:	72fb      	strb	r3, [r7, #11]
 800505e:	4613      	mov	r3, r2
 8005060:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d102      	bne.n	800506e <lis2mdl_read_reg+0x20>
  {
    return -1;
 8005068:	f04f 33ff 	mov.w	r3, #4294967295
 800506c:	e009      	b.n	8005082 <lis2mdl_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	685c      	ldr	r4, [r3, #4]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	68d8      	ldr	r0, [r3, #12]
 8005076:	893b      	ldrh	r3, [r7, #8]
 8005078:	7af9      	ldrb	r1, [r7, #11]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	47a0      	blx	r4
 800507e:	6178      	str	r0, [r7, #20]

  return ret;
 8005080:	697b      	ldr	r3, [r7, #20]
}
 8005082:	4618      	mov	r0, r3
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	bd90      	pop	{r4, r7, pc}

0800508a <lis2mdl_write_reg>:
  *
  */
int32_t __weak lis2mdl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800508a:	b590      	push	{r4, r7, lr}
 800508c:	b087      	sub	sp, #28
 800508e:	af00      	add	r7, sp, #0
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	461a      	mov	r2, r3
 8005096:	460b      	mov	r3, r1
 8005098:	72fb      	strb	r3, [r7, #11]
 800509a:	4613      	mov	r3, r2
 800509c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d102      	bne.n	80050aa <lis2mdl_write_reg+0x20>
  {
    return -1;
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295
 80050a8:	e009      	b.n	80050be <lis2mdl_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681c      	ldr	r4, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	68d8      	ldr	r0, [r3, #12]
 80050b2:	893b      	ldrh	r3, [r7, #8]
 80050b4:	7af9      	ldrb	r1, [r7, #11]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	47a0      	blx	r4
 80050ba:	6178      	str	r0, [r7, #20]

  return ret;
 80050bc:	697b      	ldr	r3, [r7, #20]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	371c      	adds	r7, #28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd90      	pop	{r4, r7, pc}

080050c6 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(const stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	460b      	mov	r3, r1
 80050d0:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80050d2:	f107 0208 	add.w	r2, r7, #8
 80050d6:	2301      	movs	r3, #1
 80050d8:	2160      	movs	r1, #96	@ 0x60
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff ffb7 	bl	800504e <lis2mdl_read_reg>
 80050e0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10f      	bne.n	8005108 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	7a3b      	ldrb	r3, [r7, #8]
 80050f2:	f362 0301 	bfi	r3, r2, #0, #2
 80050f6:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80050f8:	f107 0208 	add.w	r2, r7, #8
 80050fc:	2301      	movs	r3, #1
 80050fe:	2160      	movs	r1, #96	@ 0x60
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff ffc2 	bl	800508a <lis2mdl_write_reg>
 8005106:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005108:	68fb      	ldr	r3, [r7, #12]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(const stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	460b      	mov	r3, r1
 800511c:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800511e:	f107 0208 	add.w	r2, r7, #8
 8005122:	2301      	movs	r3, #1
 8005124:	2160      	movs	r1, #96	@ 0x60
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff ff91 	bl	800504e <lis2mdl_read_reg>
 800512c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10f      	bne.n	8005154 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	b2da      	uxtb	r2, r3
 800513c:	7a3b      	ldrb	r3, [r7, #8]
 800513e:	f362 0383 	bfi	r3, r2, #2, #2
 8005142:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005144:	f107 0208 	add.w	r2, r7, #8
 8005148:	2301      	movs	r3, #1
 800514a:	2160      	movs	r1, #96	@ 0x60
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7ff ff9c 	bl	800508a <lis2mdl_write_reg>
 8005152:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005154:	68fb      	ldr	r3, [r7, #12]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(const stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 800516a:	f107 0208 	add.w	r2, r7, #8
 800516e:	2301      	movs	r3, #1
 8005170:	2160      	movs	r1, #96	@ 0x60
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff ff6b 	bl	800504e <lis2mdl_read_reg>
 8005178:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 800517a:	7a3b      	ldrb	r3, [r7, #8]
 800517c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b03      	cmp	r3, #3
 8005184:	d81a      	bhi.n	80051bc <lis2mdl_data_rate_get+0x5c>
 8005186:	a201      	add	r2, pc, #4	@ (adr r2, 800518c <lis2mdl_data_rate_get+0x2c>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	0800519d 	.word	0x0800519d
 8005190:	080051a5 	.word	0x080051a5
 8005194:	080051ad 	.word	0x080051ad
 8005198:	080051b5 	.word	0x080051b5
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2200      	movs	r2, #0
 80051a0:	701a      	strb	r2, [r3, #0]
      break;
 80051a2:	e00f      	b.n	80051c4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2201      	movs	r2, #1
 80051a8:	701a      	strb	r2, [r3, #0]
      break;
 80051aa:	e00b      	b.n	80051c4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	2202      	movs	r2, #2
 80051b0:	701a      	strb	r2, [r3, #0]
      break;
 80051b2:	e007      	b.n	80051c4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2203      	movs	r2, #3
 80051b8:	701a      	strb	r2, [r3, #0]
      break;
 80051ba:	e003      	b.n	80051c4 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2200      	movs	r2, #0
 80051c0:	701a      	strb	r2, [r3, #0]
      break;
 80051c2:	bf00      	nop
  }

  return ret;
 80051c4:	68fb      	ldr	r3, [r7, #12]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop

080051d0 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80051dc:	f107 0208 	add.w	r2, r7, #8
 80051e0:	2301      	movs	r3, #1
 80051e2:	2162      	movs	r1, #98	@ 0x62
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7ff ff32 	bl	800504e <lis2mdl_read_reg>
 80051ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10f      	bne.n	8005212 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80051f2:	78fb      	ldrb	r3, [r7, #3]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	7a3b      	ldrb	r3, [r7, #8]
 80051fc:	f362 1304 	bfi	r3, r2, #4, #1
 8005200:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005202:	f107 0208 	add.w	r2, r7, #8
 8005206:	2301      	movs	r3, #1
 8005208:	2162      	movs	r1, #98	@ 0x62
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff ff3d 	bl	800508a <lis2mdl_write_reg>
 8005210:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005212:	68fb      	ldr	r3, [r7, #12]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8005226:	f107 020c 	add.w	r2, r7, #12
 800522a:	2306      	movs	r3, #6
 800522c:	2168      	movs	r1, #104	@ 0x68
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7ff ff0d 	bl	800504e <lis2mdl_read_reg>
 8005234:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005236:	7b7b      	ldrb	r3, [r7, #13]
 8005238:	b21a      	sxth	r2, r3
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005244:	b29b      	uxth	r3, r3
 8005246:	021b      	lsls	r3, r3, #8
 8005248:	b29b      	uxth	r3, r3
 800524a:	7b3a      	ldrb	r2, [r7, #12]
 800524c:	4413      	add	r3, r2
 800524e:	b29b      	uxth	r3, r3
 8005250:	b21a      	sxth	r2, r3
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005256:	7bfa      	ldrb	r2, [r7, #15]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	3302      	adds	r3, #2
 800525c:	b212      	sxth	r2, r2
 800525e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	3302      	adds	r3, #2
 8005264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005268:	b29b      	uxth	r3, r3
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	b29b      	uxth	r3, r3
 800526e:	7bba      	ldrb	r2, [r7, #14]
 8005270:	4413      	add	r3, r2
 8005272:	b29a      	uxth	r2, r3
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	3302      	adds	r3, #2
 8005278:	b212      	sxth	r2, r2
 800527a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800527c:	7c7a      	ldrb	r2, [r7, #17]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	3304      	adds	r3, #4
 8005282:	b212      	sxth	r2, r2
 8005284:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	3304      	adds	r3, #4
 800528a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800528e:	b29b      	uxth	r3, r3
 8005290:	021b      	lsls	r3, r3, #8
 8005292:	b29b      	uxth	r3, r3
 8005294:	7c3a      	ldrb	r2, [r7, #16]
 8005296:	4413      	add	r3, r2
 8005298:	b29a      	uxth	r2, r3
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	3304      	adds	r3, #4
 800529e:	b212      	sxth	r2, r2
 80052a0:	801a      	strh	r2, [r3, #0]

  return ret;
 80052a2:	697b      	ldr	r3, [r7, #20]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 80052b6:	2301      	movs	r3, #1
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	214f      	movs	r1, #79	@ 0x4f
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff fec6 	bl	800504e <lis2mdl_read_reg>
 80052c2:	60f8      	str	r0, [r7, #12]

  return ret;
 80052c4:	68fb      	ldr	r3, [r7, #12]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	460b      	mov	r3, r1
 80052d8:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 80052da:	f107 0208 	add.w	r2, r7, #8
 80052de:	2301      	movs	r3, #1
 80052e0:	2162      	movs	r1, #98	@ 0x62
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff feb3 	bl	800504e <lis2mdl_read_reg>
 80052e8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10f      	bne.n	8005310 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	7a3b      	ldrb	r3, [r7, #8]
 80052fa:	f362 0341 	bfi	r3, r2, #1, #1
 80052fe:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005300:	f107 0208 	add.w	r2, r7, #8
 8005304:	2301      	movs	r3, #1
 8005306:	2162      	movs	r1, #98	@ 0x62
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff febe 	bl	800508a <lis2mdl_write_reg>
 800530e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005310:	68fb      	ldr	r3, [r7, #12]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(const stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	460b      	mov	r3, r1
 8005324:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005326:	f107 0208 	add.w	r2, r7, #8
 800532a:	2301      	movs	r3, #1
 800532c:	2162      	movs	r1, #98	@ 0x62
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff fe8d 	bl	800504e <lis2mdl_read_reg>
 8005334:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10f      	bne.n	800535c <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	b2da      	uxtb	r2, r3
 8005344:	7a3b      	ldrb	r3, [r7, #8]
 8005346:	f362 1345 	bfi	r3, r2, #5, #1
 800534a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 800534c:	f107 0208 	add.w	r2, r7, #8
 8005350:	2301      	movs	r3, #1
 8005352:	2162      	movs	r1, #98	@ 0x62
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff fe98 	bl	800508a <lis2mdl_write_reg>
 800535a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800535c:	68fb      	ldr	r3, [r7, #12]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <LPS22DF_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_RegisterBusIO(LPS22DF_Object_t *pObj, LPS22DF_IO_t *pIO)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d103      	bne.n	8005384 <LPS22DF_RegisterBusIO+0x1c>
  {
    ret = LPS22DF_ERROR;
 800537c:	f04f 33ff 	mov.w	r3, #4294967295
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	e051      	b.n	8005428 <LPS22DF_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	7b1a      	ldrb	r2, [r3, #12]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	699a      	ldr	r2, [r3, #24]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a1d      	ldr	r2, [pc, #116]	@ (8005434 <LPS22DF_RegisterBusIO+0xcc>)
 80053c0:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005438 <LPS22DF_RegisterBusIO+0xd0>)
 80053c6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	69da      	ldr	r2, [r3, #28]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d103      	bne.n	80053e6 <LPS22DF_RegisterBusIO+0x7e>
    {
      ret = LPS22DF_ERROR;
 80053de:	f04f 33ff 	mov.w	r3, #4294967295
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	e020      	b.n	8005428 <LPS22DF_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22DF_OK)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4798      	blx	r3
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <LPS22DF_RegisterBusIO+0x92>
    {
      ret = LPS22DF_ERROR;
 80053f2:	f04f 33ff 	mov.w	r3, #4294967295
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	e016      	b.n	8005428 <LPS22DF_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d112      	bne.n	8005428 <LPS22DF_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10d      	bne.n	8005428 <LPS22DF_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x20;
 800540c:	2320      	movs	r3, #32
 800540e:	72fb      	strb	r3, [r7, #11]

          if (LPS22DF_Write_Reg(pObj, LPS22DF_IF_CTRL, data) != LPS22DF_OK)
 8005410:	7afb      	ldrb	r3, [r7, #11]
 8005412:	461a      	mov	r2, r3
 8005414:	210e      	movs	r1, #14
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f9f3 	bl	8005802 <LPS22DF_Write_Reg>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <LPS22DF_RegisterBusIO+0xc0>
          {
            ret = LPS22DF_ERROR;
 8005422:	f04f 33ff 	mov.w	r3, #4294967295
 8005426:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005428:	68fb      	ldr	r3, [r7, #12]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	08005ba5 	.word	0x08005ba5
 8005438:	08005bdb 	.word	0x08005bdb

0800543c <LPS22DF_Init>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Init(LPS22DF_Object_t *pObj)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800544a:	2b00      	cmp	r3, #0
 800544c:	d108      	bne.n	8005460 <LPS22DF_Init+0x24>
  {
    if (LPS22DF_Initialize(pObj) != LPS22DF_OK)
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fb4c 	bl	8005aec <LPS22DF_Initialize>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <LPS22DF_Init+0x24>
    {
      return LPS22DF_ERROR;
 800545a:	f04f 33ff 	mov.w	r3, #4294967295
 800545e:	e004      	b.n	800546a <LPS22DF_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <LPS22DF_DeInit>:
  * @brief  Deinitialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_DeInit(LPS22DF_Object_t *pObj)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005480:	2b01      	cmp	r3, #1
 8005482:	d111      	bne.n	80054a8 <LPS22DF_DeInit+0x36>
  {
    if (LPS22DF_PRESS_Disable(pObj) != LPS22DF_OK)
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f882 	bl	800558e <LPS22DF_PRESS_Disable>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <LPS22DF_DeInit+0x24>
    {
      return LPS22DF_ERROR;
 8005490:	f04f 33ff 	mov.w	r3, #4294967295
 8005494:	e00d      	b.n	80054b2 <LPS22DF_DeInit+0x40>
    }

    if (LPS22DF_TEMP_Disable(pObj) != LPS22DF_OK)
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f927 	bl	80056ea <LPS22DF_TEMP_Disable>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <LPS22DF_DeInit+0x36>
    {
      return LPS22DF_ERROR;
 80054a2:	f04f 33ff 	mov.w	r3, #4294967295
 80054a6:	e004      	b.n	80054b2 <LPS22DF_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LPS22DF_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <LPS22DF_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_ReadID(LPS22DF_Object_t *pObj, uint8_t *Id)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b084      	sub	sp, #16
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	6039      	str	r1, [r7, #0]
  lps22df_id_t val;
  if (lps22df_id_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3320      	adds	r3, #32
 80054c8:	f107 020c 	add.w	r2, r7, #12
 80054cc:	4611      	mov	r1, r2
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fc22 	bl	8005d18 <lps22df_id_get>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <LPS22DF_ReadID+0x26>
  {
    return LPS22DF_ERROR;
 80054da:	f04f 33ff 	mov.w	r3, #4294967295
 80054de:	e003      	b.n	80054e8 <LPS22DF_ReadID+0x2e>
  }

  *Id = val.whoami;
 80054e0:	7b3a      	ldrb	r2, [r7, #12]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	701a      	strb	r2, [r3, #0]

  return LPS22DF_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <LPS22DF_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22DF sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_GetCapabilities(LPS22DF_Object_t *pObj, LPS22DF_Capabilities_t *Capabilities)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2200      	movs	r2, #0
 80054fe:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2201      	movs	r2, #1
 8005504:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2201      	movs	r2, #1
 800550a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2200      	movs	r2, #0
 8005510:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2200      	movs	r2, #0
 8005516:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	4a08      	ldr	r2, [pc, #32]	@ (8005544 <LPS22DF_GetCapabilities+0x54>)
 8005524:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 200.0f;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	4a06      	ldr	r2, [pc, #24]	@ (8005544 <LPS22DF_GetCapabilities+0x54>)
 800552a:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	615a      	str	r2, [r3, #20]
  return LPS22DF_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	43480000 	.word	0x43480000

08005548 <LPS22DF_PRESS_Enable>:
  * @brief  Enable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Enable(LPS22DF_Object_t *pObj)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005556:	2b01      	cmp	r3, #1
 8005558:	d101      	bne.n	800555e <LPS22DF_PRESS_Enable+0x16>
  {
    return LPS22DF_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	e013      	b.n	8005586 <LPS22DF_PRESS_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f103 0220 	add.w	r2, r3, #32
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3333      	adds	r3, #51	@ 0x33
 8005568:	4619      	mov	r1, r3
 800556a:	4610      	mov	r0, r2
 800556c:	f000 fdb2 	bl	80060d4 <lps22df_mode_set>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <LPS22DF_PRESS_Enable+0x34>
  {
    return LPS22DF_ERROR;
 8005576:	f04f 33ff 	mov.w	r3, #4294967295
 800557a:	e004      	b.n	8005586 <LPS22DF_PRESS_Enable+0x3e>
  }

  pObj->press_is_enabled = 1;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <LPS22DF_PRESS_Disable>:
  * @brief  Disable the LPS22DF pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_Disable(LPS22DF_Object_t *pObj)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <LPS22DF_PRESS_Disable+0x16>
  {
    return LPS22DF_OK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	e030      	b.n	8005606 <LPS22DF_PRESS_Disable+0x78>
  }

  /* Check if the LPS22DF temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d126      	bne.n	80055fc <LPS22DF_PRESS_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3320      	adds	r3, #32
 80055b2:	f107 020c 	add.w	r2, r7, #12
 80055b6:	4611      	mov	r1, r2
 80055b8:	4618      	mov	r0, r3
 80055ba:	f000 fde9 	bl	8006190 <lps22df_mode_get>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <LPS22DF_PRESS_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 80055c4:	f04f 33ff 	mov.w	r3, #4294967295
 80055c8:	e01d      	b.n	8005606 <LPS22DF_PRESS_Disable+0x78>
    }

    (void)memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3333      	adds	r3, #51	@ 0x33
 80055ce:	461a      	mov	r2, r3
 80055d0:	f107 030c 	add.w	r3, r7, #12
 80055d4:	8819      	ldrh	r1, [r3, #0]
 80055d6:	789b      	ldrb	r3, [r3, #2]
 80055d8:	8011      	strh	r1, [r2, #0]
 80055da:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 80055dc:	2300      	movs	r3, #0
 80055de:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3320      	adds	r3, #32
 80055e4:	f107 020c 	add.w	r2, r7, #12
 80055e8:	4611      	mov	r1, r2
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fd72 	bl	80060d4 <lps22df_mode_set>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <LPS22DF_PRESS_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 80055f6:	f04f 33ff 	mov.w	r3, #4294967295
 80055fa:	e004      	b.n	8005606 <LPS22DF_PRESS_Disable+0x78>
    }
  }

  pObj->press_is_enabled = 0;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LPS22DF_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <LPS22DF_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 8005618:	6839      	ldr	r1, [r7, #0]
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f90c 	bl	8005838 <LPS22DF_GetOutputDataRate>
 8005620:	4603      	mov	r3, r0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <LPS22DF_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_SetOutputDataRate(LPS22DF_Object_t *pObj, float_t Odr)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b082      	sub	sp, #8
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800563c:	2b01      	cmp	r3, #1
 800563e:	d106      	bne.n	800564e <LPS22DF_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005640:	ed97 0a00 	vldr	s0, [r7]
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f961 	bl	800590c <LPS22DF_SetOutputDataRate_When_Enabled>
 800564a:	4603      	mov	r3, r0
 800564c:	e005      	b.n	800565a <LPS22DF_PRESS_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 800564e:	ed97 0a00 	vldr	s0, [r7]
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f9e6 	bl	8005a24 <LPS22DF_SetOutputDataRate_When_Disabled>
 8005658:	4603      	mov	r3, r0
  }
}
 800565a:	4618      	mov	r0, r3
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <LPS22DF_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_PRESS_GetPressure(LPS22DF_Object_t *pObj, float_t *Value)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b084      	sub	sp, #16
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]
  uint32_t pressure_raw;

  if (lps22df_pressure_raw_get(&(pObj->Ctx), &pressure_raw) != LPS22DF_OK)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3320      	adds	r3, #32
 8005670:	f107 020c 	add.w	r2, r7, #12
 8005674:	4611      	mov	r1, r2
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fe56 	bl	8006328 <lps22df_pressure_raw_get>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <LPS22DF_PRESS_GetPressure+0x26>
  {
    return LPS22DF_ERROR;
 8005682:	f04f 33ff 	mov.w	r3, #4294967295
 8005686:	e009      	b.n	800569c <LPS22DF_PRESS_GetPressure+0x3a>
  }

  *Value = lps22df_from_lsb_to_hPa((int32_t)pressure_raw);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fb12 	bl	8005cb4 <lps22df_from_lsb_to_hPa>
 8005690:	eef0 7a40 	vmov.f32	s15, s0
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	edc3 7a00 	vstr	s15, [r3]

  return LPS22DF_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <LPS22DF_TEMP_Enable>:
  * @brief  Enable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Enable(LPS22DF_Object_t *pObj)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d101      	bne.n	80056ba <LPS22DF_TEMP_Enable+0x16>
  {
    return LPS22DF_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	e013      	b.n	80056e2 <LPS22DF_TEMP_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22df_mode_set(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f103 0220 	add.w	r2, r3, #32
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3333      	adds	r3, #51	@ 0x33
 80056c4:	4619      	mov	r1, r3
 80056c6:	4610      	mov	r0, r2
 80056c8:	f000 fd04 	bl	80060d4 <lps22df_mode_set>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d002      	beq.n	80056d8 <LPS22DF_TEMP_Enable+0x34>
  {
    return LPS22DF_ERROR;
 80056d2:	f04f 33ff 	mov.w	r3, #4294967295
 80056d6:	e004      	b.n	80056e2 <LPS22DF_TEMP_Enable+0x3e>
  }

  pObj->temp_is_enabled = 1;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <LPS22DF_TEMP_Disable>:
  * @brief  Disable the LPS22DF temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_Disable(LPS22DF_Object_t *pObj)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b084      	sub	sp, #16
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <LPS22DF_TEMP_Disable+0x16>
  {
    return LPS22DF_OK;
 80056fc:	2300      	movs	r3, #0
 80056fe:	e030      	b.n	8005762 <LPS22DF_TEMP_Disable+0x78>
  }

  /* Check if the LPS22DF pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005706:	2b00      	cmp	r3, #0
 8005708:	d126      	bne.n	8005758 <LPS22DF_TEMP_Disable+0x6e>
  {
    lps22df_md_t val;

    /* Get current output data rate. */
    if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3320      	adds	r3, #32
 800570e:	f107 020c 	add.w	r2, r7, #12
 8005712:	4611      	mov	r1, r2
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fd3b 	bl	8006190 <lps22df_mode_get>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <LPS22DF_TEMP_Disable+0x3c>
    {
      return LPS22DF_ERROR;
 8005720:	f04f 33ff 	mov.w	r3, #4294967295
 8005724:	e01d      	b.n	8005762 <LPS22DF_TEMP_Disable+0x78>
    }

    (void)memcpy(&pObj->last_odr, &val, sizeof(lps22df_md_t));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3333      	adds	r3, #51	@ 0x33
 800572a:	461a      	mov	r2, r3
 800572c:	f107 030c 	add.w	r3, r7, #12
 8005730:	8819      	ldrh	r1, [r3, #0]
 8005732:	789b      	ldrb	r3, [r3, #2]
 8005734:	8011      	strh	r1, [r2, #0]
 8005736:	7093      	strb	r3, [r2, #2]

    val.odr = LPS22DF_ONE_SHOT;
 8005738:	2300      	movs	r3, #0
 800573a:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection - power down. */
    if (lps22df_mode_set(&(pObj->Ctx), &val) != LPS22DF_OK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3320      	adds	r3, #32
 8005740:	f107 020c 	add.w	r2, r7, #12
 8005744:	4611      	mov	r1, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fcc4 	bl	80060d4 <lps22df_mode_set>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <LPS22DF_TEMP_Disable+0x6e>
    {
      return LPS22DF_ERROR;
 8005752:	f04f 33ff 	mov.w	r3, #4294967295
 8005756:	e004      	b.n	8005762 <LPS22DF_TEMP_Disable+0x78>
    }
  }

  pObj->temp_is_enabled = 0;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LPS22DF_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <LPS22DF_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	6039      	str	r1, [r7, #0]
  return LPS22DF_GetOutputDataRate(pObj, Odr);
 8005774:	6839      	ldr	r1, [r7, #0]
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f85e 	bl	8005838 <LPS22DF_GetOutputDataRate>
 800577c:	4603      	mov	r3, r0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <LPS22DF_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_SetOutputDataRate(LPS22DF_Object_t *pObj, float_t Odr)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b082      	sub	sp, #8
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
 800578e:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005798:	2b01      	cmp	r3, #1
 800579a:	d106      	bne.n	80057aa <LPS22DF_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22DF_SetOutputDataRate_When_Enabled(pObj, Odr);
 800579c:	ed97 0a00 	vldr	s0, [r7]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f8b3 	bl	800590c <LPS22DF_SetOutputDataRate_When_Enabled>
 80057a6:	4603      	mov	r3, r0
 80057a8:	e005      	b.n	80057b6 <LPS22DF_TEMP_SetOutputDataRate+0x30>
  }
  else
  {
    return LPS22DF_SetOutputDataRate_When_Disabled(pObj, Odr);
 80057aa:	ed97 0a00 	vldr	s0, [r7]
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f938 	bl	8005a24 <LPS22DF_SetOutputDataRate_When_Disabled>
 80057b4:	4603      	mov	r3, r0
  }
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <LPS22DF_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_TEMP_GetTemperature(LPS22DF_Object_t *pObj, float_t *Value)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	6039      	str	r1, [r7, #0]
  int16_t temperature_raw;

  if (lps22df_temperature_raw_get(&(pObj->Ctx), &temperature_raw) != LPS22DF_OK)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3320      	adds	r3, #32
 80057cc:	f107 020e 	add.w	r2, r7, #14
 80057d0:	4611      	mov	r1, r2
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 fdd1 	bl	800637a <lps22df_temperature_raw_get>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <LPS22DF_TEMP_GetTemperature+0x26>
  {
    return LPS22DF_ERROR;
 80057de:	f04f 33ff 	mov.w	r3, #4294967295
 80057e2:	e00a      	b.n	80057fa <LPS22DF_TEMP_GetTemperature+0x3c>
  }

  *Value = lps22df_from_lsb_to_celsius(temperature_raw);
 80057e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fa7b 	bl	8005ce4 <lps22df_from_lsb_to_celsius>
 80057ee:	eef0 7a40 	vmov.f32	s15, s0
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	edc3 7a00 	vstr	s15, [r3]

  return LPS22DF_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <LPS22DF_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22DF_Write_Reg(LPS22DF_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	460b      	mov	r3, r1
 800580c:	70fb      	strb	r3, [r7, #3]
 800580e:	4613      	mov	r3, r2
 8005810:	70bb      	strb	r3, [r7, #2]
  if (lps22df_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22DF_OK)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f103 0020 	add.w	r0, r3, #32
 8005818:	1cba      	adds	r2, r7, #2
 800581a:	78f9      	ldrb	r1, [r7, #3]
 800581c:	2301      	movs	r3, #1
 800581e:	f000 fa15 	bl	8005c4c <lps22df_write_reg>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <LPS22DF_Write_Reg+0x2c>
  {
    return LPS22DF_ERROR;
 8005828:	f04f 33ff 	mov.w	r3, #4294967295
 800582c:	e000      	b.n	8005830 <LPS22DF_Write_Reg+0x2e>
  }

  return LPS22DF_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <LPS22DF_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_GetOutputDataRate(LPS22DF_Object_t *pObj, float_t *Odr)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22DF_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]
  lps22df_md_t val;

  if (lps22df_mode_get(&(pObj->Ctx), &val) != LPS22DF_OK)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3320      	adds	r3, #32
 800584a:	f107 0208 	add.w	r2, r7, #8
 800584e:	4611      	mov	r1, r2
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fc9d 	bl	8006190 <lps22df_mode_get>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <LPS22DF_GetOutputDataRate+0x2a>
  {
    return LPS22DF_ERROR;
 800585c:	f04f 33ff 	mov.w	r3, #4294967295
 8005860:	e044      	b.n	80058ec <LPS22DF_GetOutputDataRate+0xb4>
  }

  switch (val.odr)
 8005862:	7a3b      	ldrb	r3, [r7, #8]
 8005864:	2b08      	cmp	r3, #8
 8005866:	d83c      	bhi.n	80058e2 <LPS22DF_GetOutputDataRate+0xaa>
 8005868:	a201      	add	r2, pc, #4	@ (adr r2, 8005870 <LPS22DF_GetOutputDataRate+0x38>)
 800586a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586e:	bf00      	nop
 8005870:	08005895 	.word	0x08005895
 8005874:	0800589f 	.word	0x0800589f
 8005878:	080058a9 	.word	0x080058a9
 800587c:	080058b3 	.word	0x080058b3
 8005880:	080058bb 	.word	0x080058bb
 8005884:	080058c3 	.word	0x080058c3
 8005888:	080058cb 	.word	0x080058cb
 800588c:	080058d3 	.word	0x080058d3
 8005890:	080058db 	.word	0x080058db
  {
    case LPS22DF_ONE_SHOT:
      *Odr = 0.0f;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	f04f 0200 	mov.w	r2, #0
 800589a:	601a      	str	r2, [r3, #0]
      break;
 800589c:	e025      	b.n	80058ea <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_1Hz:
      *Odr = 1.0f;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80058a4:	601a      	str	r2, [r3, #0]
      break;
 80058a6:	e020      	b.n	80058ea <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_4Hz:
      *Odr = 4.0f;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80058ae:	601a      	str	r2, [r3, #0]
      break;
 80058b0:	e01b      	b.n	80058ea <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_10Hz:
      *Odr = 10.0f;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	4a0f      	ldr	r2, [pc, #60]	@ (80058f4 <LPS22DF_GetOutputDataRate+0xbc>)
 80058b6:	601a      	str	r2, [r3, #0]
      break;
 80058b8:	e017      	b.n	80058ea <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_25Hz:
      *Odr = 25.0f;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	4a0e      	ldr	r2, [pc, #56]	@ (80058f8 <LPS22DF_GetOutputDataRate+0xc0>)
 80058be:	601a      	str	r2, [r3, #0]
      break;
 80058c0:	e013      	b.n	80058ea <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_50Hz:
      *Odr = 50.0f;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	4a0d      	ldr	r2, [pc, #52]	@ (80058fc <LPS22DF_GetOutputDataRate+0xc4>)
 80058c6:	601a      	str	r2, [r3, #0]
      break;
 80058c8:	e00f      	b.n	80058ea <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_75Hz:
      *Odr = 75.0f;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	4a0c      	ldr	r2, [pc, #48]	@ (8005900 <LPS22DF_GetOutputDataRate+0xc8>)
 80058ce:	601a      	str	r2, [r3, #0]
      break;
 80058d0:	e00b      	b.n	80058ea <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_100Hz:
      *Odr = 100.0f;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	4a0b      	ldr	r2, [pc, #44]	@ (8005904 <LPS22DF_GetOutputDataRate+0xcc>)
 80058d6:	601a      	str	r2, [r3, #0]
      break;
 80058d8:	e007      	b.n	80058ea <LPS22DF_GetOutputDataRate+0xb2>

    case LPS22DF_200Hz:
      *Odr = 200.0f;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005908 <LPS22DF_GetOutputDataRate+0xd0>)
 80058de:	601a      	str	r2, [r3, #0]
      break;
 80058e0:	e003      	b.n	80058ea <LPS22DF_GetOutputDataRate+0xb2>

    default:
      ret = LPS22DF_ERROR;
 80058e2:	f04f 33ff 	mov.w	r3, #4294967295
 80058e6:	60fb      	str	r3, [r7, #12]
      break;
 80058e8:	bf00      	nop
  }

  return ret;
 80058ea:	68fb      	ldr	r3, [r7, #12]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	41200000 	.word	0x41200000
 80058f8:	41c80000 	.word	0x41c80000
 80058fc:	42480000 	.word	0x42480000
 8005900:	42960000 	.word	0x42960000
 8005904:	42c80000 	.word	0x42c80000
 8005908:	43480000 	.word	0x43480000

0800590c <LPS22DF_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Enabled(LPS22DF_Object_t *pObj, float_t Odr)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	ed87 0a00 	vstr	s0, [r7]
  lps22df_md_t new_val;

  if (lps22df_mode_get(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3320      	adds	r3, #32
 800591c:	f107 020c 	add.w	r2, r7, #12
 8005920:	4611      	mov	r1, r2
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fc34 	bl	8006190 <lps22df_mode_get>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d002      	beq.n	8005934 <LPS22DF_SetOutputDataRate_When_Enabled+0x28>
  {
    return LPS22DF_ERROR;
 800592e:	f04f 33ff 	mov.w	r3, #4294967295
 8005932:	e06c      	b.n	8005a0e <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                : (Odr <=   4.0f) ? LPS22DF_4Hz
 8005934:	edd7 7a00 	vldr	s15, [r7]
 8005938:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800593c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005944:	d801      	bhi.n	800594a <LPS22DF_SetOutputDataRate_When_Enabled+0x3e>
 8005946:	2301      	movs	r3, #1
 8005948:	e042      	b.n	80059d0 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 800594a:	edd7 7a00 	vldr	s15, [r7]
 800594e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005952:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800595a:	d801      	bhi.n	8005960 <LPS22DF_SetOutputDataRate_When_Enabled+0x54>
 800595c:	2302      	movs	r3, #2
 800595e:	e037      	b.n	80059d0 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005960:	edd7 7a00 	vldr	s15, [r7]
 8005964:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800596c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005970:	d801      	bhi.n	8005976 <LPS22DF_SetOutputDataRate_When_Enabled+0x6a>
 8005972:	2303      	movs	r3, #3
 8005974:	e02c      	b.n	80059d0 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 8005976:	edd7 7a00 	vldr	s15, [r7]
 800597a:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800597e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005986:	d801      	bhi.n	800598c <LPS22DF_SetOutputDataRate_When_Enabled+0x80>
 8005988:	2304      	movs	r3, #4
 800598a:	e021      	b.n	80059d0 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 800598c:	edd7 7a00 	vldr	s15, [r7]
 8005990:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005a18 <LPS22DF_SetOutputDataRate_When_Enabled+0x10c>
 8005994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800599c:	d801      	bhi.n	80059a2 <LPS22DF_SetOutputDataRate_When_Enabled+0x96>
 800599e:	2305      	movs	r3, #5
 80059a0:	e016      	b.n	80059d0 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80059a2:	edd7 7a00 	vldr	s15, [r7]
 80059a6:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005a1c <LPS22DF_SetOutputDataRate_When_Enabled+0x110>
 80059aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059b2:	d801      	bhi.n	80059b8 <LPS22DF_SetOutputDataRate_When_Enabled+0xac>
 80059b4:	2306      	movs	r3, #6
 80059b6:	e00b      	b.n	80059d0 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80059b8:	edd7 7a00 	vldr	s15, [r7]
 80059bc:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8005a20 <LPS22DF_SetOutputDataRate_When_Enabled+0x114>
 80059c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c8:	d801      	bhi.n	80059ce <LPS22DF_SetOutputDataRate_When_Enabled+0xc2>
 80059ca:	2307      	movs	r3, #7
 80059cc:	e000      	b.n	80059d0 <LPS22DF_SetOutputDataRate_When_Enabled+0xc4>
 80059ce:	2308      	movs	r3, #8
  new_val.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 80059d0:	733b      	strb	r3, [r7, #12]
                : (Odr <=  50.0f) ? LPS22DF_50Hz
                : (Odr <=  75.0f) ? LPS22DF_75Hz
                : (Odr <= 100.0f) ? LPS22DF_100Hz
                :                   LPS22DF_200Hz;

  if (lps22df_mode_set(&(pObj->Ctx), &new_val) != LPS22DF_OK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3320      	adds	r3, #32
 80059d6:	f107 020c 	add.w	r2, r7, #12
 80059da:	4611      	mov	r1, r2
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fb79 	bl	80060d4 <lps22df_mode_set>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <LPS22DF_SetOutputDataRate_When_Enabled+0xe2>
  {
    return LPS22DF_ERROR;
 80059e8:	f04f 33ff 	mov.w	r3, #4294967295
 80059ec:	e00f      	b.n	8005a0e <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f103 0220 	add.w	r2, r3, #32
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3333      	adds	r3, #51	@ 0x33
 80059f8:	4619      	mov	r1, r3
 80059fa:	4610      	mov	r0, r2
 80059fc:	f000 fbc8 	bl	8006190 <lps22df_mode_get>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <LPS22DF_SetOutputDataRate_When_Enabled+0x100>
  {
    return LPS22DF_ERROR;
 8005a06:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0a:	e000      	b.n	8005a0e <LPS22DF_SetOutputDataRate_When_Enabled+0x102>
  }

  return LPS22DF_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	42480000 	.word	0x42480000
 8005a1c:	42960000 	.word	0x42960000
 8005a20:	42c80000 	.word	0x42c80000

08005a24 <LPS22DF_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_SetOutputDataRate_When_Disabled(LPS22DF_Object_t *pObj, float_t Odr)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	ed87 0a00 	vstr	s0, [r7]
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
                       : (Odr <=   4.0f) ? LPS22DF_4Hz
 8005a30:	edd7 7a00 	vldr	s15, [r7]
 8005a34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a40:	d801      	bhi.n	8005a46 <LPS22DF_SetOutputDataRate_When_Disabled+0x22>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e042      	b.n	8005acc <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005a46:	edd7 7a00 	vldr	s15, [r7]
 8005a4a:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a56:	d801      	bhi.n	8005a5c <LPS22DF_SetOutputDataRate_When_Disabled+0x38>
 8005a58:	2302      	movs	r3, #2
 8005a5a:	e037      	b.n	8005acc <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005a5c:	edd7 7a00 	vldr	s15, [r7]
 8005a60:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a6c:	d801      	bhi.n	8005a72 <LPS22DF_SetOutputDataRate_When_Disabled+0x4e>
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e02c      	b.n	8005acc <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005a72:	edd7 7a00 	vldr	s15, [r7]
 8005a76:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8005a7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a82:	d801      	bhi.n	8005a88 <LPS22DF_SetOutputDataRate_When_Disabled+0x64>
 8005a84:	2304      	movs	r3, #4
 8005a86:	e021      	b.n	8005acc <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005a88:	edd7 7a00 	vldr	s15, [r7]
 8005a8c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005ae0 <LPS22DF_SetOutputDataRate_When_Disabled+0xbc>
 8005a90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a98:	d801      	bhi.n	8005a9e <LPS22DF_SetOutputDataRate_When_Disabled+0x7a>
 8005a9a:	2305      	movs	r3, #5
 8005a9c:	e016      	b.n	8005acc <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005a9e:	edd7 7a00 	vldr	s15, [r7]
 8005aa2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8005ae4 <LPS22DF_SetOutputDataRate_When_Disabled+0xc0>
 8005aa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aae:	d801      	bhi.n	8005ab4 <LPS22DF_SetOutputDataRate_When_Disabled+0x90>
 8005ab0:	2306      	movs	r3, #6
 8005ab2:	e00b      	b.n	8005acc <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005ab4:	edd7 7a00 	vldr	s15, [r7]
 8005ab8:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8005ae8 <LPS22DF_SetOutputDataRate_When_Disabled+0xc4>
 8005abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac4:	d801      	bhi.n	8005aca <LPS22DF_SetOutputDataRate_When_Disabled+0xa6>
 8005ac6:	2307      	movs	r3, #7
 8005ac8:	e000      	b.n	8005acc <LPS22DF_SetOutputDataRate_When_Disabled+0xa8>
 8005aca:	2308      	movs	r3, #8
  pObj->last_odr.odr = (Odr <=   1.0f) ? LPS22DF_1Hz
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                       : (Odr <=  50.0f) ? LPS22DF_50Hz
                       : (Odr <=  75.0f) ? LPS22DF_75Hz
                       : (Odr <= 100.0f) ? LPS22DF_100Hz
                       :                   LPS22DF_200Hz;

  return LPS22DF_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	42480000 	.word	0x42480000
 8005ae4:	42960000 	.word	0x42960000
 8005ae8:	42c80000 	.word	0x42c80000

08005aec <LPS22DF_Initialize>:
  * @brief  Initialize the LPS22DF sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22DF_Initialize(LPS22DF_Object_t *pObj)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  lps22df_md_t md;
  lps22df_bus_mode_t bus_mode;

  /* Set bdu and if_inc recommended for driver usage */
  if (lps22df_init_set(&(pObj->Ctx), LPS22DF_DRV_RDY) != LPS22DF_OK)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3320      	adds	r3, #32
 8005af8:	2100      	movs	r1, #0
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 f983 	bl	8005e06 <lps22df_init_set>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <LPS22DF_Initialize+0x20>
  {
    return LPS22DF_ERROR;
 8005b06:	f04f 33ff 	mov.w	r3, #4294967295
 8005b0a:	e047      	b.n	8005b9c <LPS22DF_Initialize+0xb0>
  }

  /* Select bus interface */
  if (pObj->IO.BusType == LPS22DF_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d102      	bne.n	8005b1a <LPS22DF_Initialize+0x2e>
  {
    bus_mode.interface = LPS22DF_SPI_3W;
 8005b14:	2303      	movs	r3, #3
 8005b16:	723b      	strb	r3, [r7, #8]
 8005b18:	e008      	b.n	8005b2c <LPS22DF_Initialize+0x40>
  }
  else if (pObj->IO.BusType == LPS22DF_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d102      	bne.n	8005b28 <LPS22DF_Initialize+0x3c>
  {
    bus_mode.interface = LPS22DF_SPI_4W;
 8005b22:	2302      	movs	r3, #2
 8005b24:	723b      	strb	r3, [r7, #8]
 8005b26:	e001      	b.n	8005b2c <LPS22DF_Initialize+0x40>
  }
  else
  {
    bus_mode.interface = LPS22DF_SEL_BY_HW;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	723b      	strb	r3, [r7, #8]
  }

  bus_mode.filter = LPS22DF_FILTER_AUTO;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	727b      	strb	r3, [r7, #9]
  if (lps22df_bus_mode_set(&(pObj->Ctx), &bus_mode) != LPS22DF_OK)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3320      	adds	r3, #32
 8005b34:	f107 0208 	add.w	r2, r7, #8
 8005b38:	4611      	mov	r1, r2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 f901 	bl	8005d42 <lps22df_bus_mode_set>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <LPS22DF_Initialize+0x60>
  {
    return LPS22DF_ERROR;
 8005b46:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4a:	e027      	b.n	8005b9c <LPS22DF_Initialize+0xb0>
  }

  /* Set Output Data Rate in Power Down */
  md.odr = LPS22DF_ONE_SHOT;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	733b      	strb	r3, [r7, #12]
  md.avg = LPS22DF_4_AVG;
 8005b50:	2300      	movs	r3, #0
 8005b52:	737b      	strb	r3, [r7, #13]
  md.lpf = LPS22DF_LPF_ODR_DIV_4;
 8005b54:	2301      	movs	r3, #1
 8005b56:	73bb      	strb	r3, [r7, #14]

  /* Power down the device */
  if (lps22df_mode_set(&(pObj->Ctx), &md) != LPS22DF_OK)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3320      	adds	r3, #32
 8005b5c:	f107 020c 	add.w	r2, r7, #12
 8005b60:	4611      	mov	r1, r2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fab6 	bl	80060d4 <lps22df_mode_set>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <LPS22DF_Initialize+0x88>
  {
    return LPS22DF_ERROR;
 8005b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b72:	e013      	b.n	8005b9c <LPS22DF_Initialize+0xb0>
  }

  if (lps22df_mode_get(&(pObj->Ctx), &pObj->last_odr) != LPS22DF_OK)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f103 0220 	add.w	r2, r3, #32
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3333      	adds	r3, #51	@ 0x33
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4610      	mov	r0, r2
 8005b82:	f000 fb05 	bl	8006190 <lps22df_mode_get>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <LPS22DF_Initialize+0xa6>
  {
    return LPS22DF_ERROR;
 8005b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b90:	e004      	b.n	8005b9c <LPS22DF_Initialize+0xb0>
  }

  pObj->last_odr.odr = LPS22DF_25Hz;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2204      	movs	r2, #4
 8005b96:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  return LPS22DF_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005ba4:	b590      	push	{r4, r7, lr}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	60f8      	str	r0, [r7, #12]
 8005bac:	607a      	str	r2, [r7, #4]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	72fb      	strb	r3, [r7, #11]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	695c      	ldr	r4, [r3, #20]
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	7b1b      	ldrb	r3, [r3, #12]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	7afb      	ldrb	r3, [r7, #11]
 8005bc8:	b299      	uxth	r1, r3
 8005bca:	893b      	ldrh	r3, [r7, #8]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	47a0      	blx	r4
 8005bd0:	4603      	mov	r3, r0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd90      	pop	{r4, r7, pc}

08005bda <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005bda:	b590      	push	{r4, r7, lr}
 8005bdc:	b087      	sub	sp, #28
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	461a      	mov	r2, r3
 8005be6:	460b      	mov	r3, r1
 8005be8:	72fb      	strb	r3, [r7, #11]
 8005bea:	4613      	mov	r3, r2
 8005bec:	813b      	strh	r3, [r7, #8]
  LPS22DF_Object_t *pObj = (LPS22DF_Object_t *)Handle;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	691c      	ldr	r4, [r3, #16]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	7b1b      	ldrb	r3, [r3, #12]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	7afb      	ldrb	r3, [r7, #11]
 8005bfe:	b299      	uxth	r1, r3
 8005c00:	893b      	ldrh	r3, [r7, #8]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	47a0      	blx	r4
 8005c06:	4603      	mov	r3, r0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd90      	pop	{r4, r7, pc}

08005c10 <lps22df_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lps22df_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                uint16_t len)
{
 8005c10:	b590      	push	{r4, r7, lr}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	607a      	str	r2, [r7, #4]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	72fb      	strb	r3, [r7, #11]
 8005c20:	4613      	mov	r3, r2
 8005c22:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d102      	bne.n	8005c30 <lps22df_read_reg+0x20>
  {
    return -1;
 8005c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c2e:	e009      	b.n	8005c44 <lps22df_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	685c      	ldr	r4, [r3, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	68d8      	ldr	r0, [r3, #12]
 8005c38:	893b      	ldrh	r3, [r7, #8]
 8005c3a:	7af9      	ldrb	r1, [r7, #11]
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	47a0      	blx	r4
 8005c40:	6178      	str	r0, [r7, #20]

  return ret;
 8005c42:	697b      	ldr	r3, [r7, #20]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd90      	pop	{r4, r7, pc}

08005c4c <lps22df_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak lps22df_write_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                                 uint16_t len)
{
 8005c4c:	b590      	push	{r4, r7, lr}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	607a      	str	r2, [r7, #4]
 8005c56:	461a      	mov	r2, r3
 8005c58:	460b      	mov	r3, r1
 8005c5a:	72fb      	strb	r3, [r7, #11]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d102      	bne.n	8005c6c <lps22df_write_reg+0x20>
  {
    return -1;
 8005c66:	f04f 33ff 	mov.w	r3, #4294967295
 8005c6a:	e009      	b.n	8005c80 <lps22df_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681c      	ldr	r4, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	68d8      	ldr	r0, [r3, #12]
 8005c74:	893b      	ldrh	r3, [r7, #8]
 8005c76:	7af9      	ldrb	r1, [r7, #11]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	47a0      	blx	r4
 8005c7c:	6178      	str	r0, [r7, #20]

  return ret;
 8005c7e:	697b      	ldr	r3, [r7, #20]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd90      	pop	{r4, r7, pc}

08005c88 <bytecpy>:
  * @{
  *
  */

static void bytecpy(uint8_t *target, uint8_t *source)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  if ((target != NULL) && (source != NULL))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d006      	beq.n	8005ca6 <bytecpy+0x1e>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <bytecpy+0x1e>
  {
    *target = *source;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781a      	ldrb	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	701a      	strb	r2, [r3, #0]
  }
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
	...

08005cb4 <lps22df_from_lsb_to_hPa>:
  * @{
  *
  */

float_t lps22df_from_lsb_to_hPa(int32_t lsb)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);   /* 4096.0f * 256 */
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cc6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005ce0 <lps22df_from_lsb_to_hPa+0x2c>
 8005cca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005cce:	eef0 7a66 	vmov.f32	s15, s13
}
 8005cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	49800000 	.word	0x49800000

08005ce4 <lps22df_from_lsb_to_celsius>:

float_t lps22df_from_lsb_to_celsius(int16_t lsb)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	4603      	mov	r3, r0
 8005cec:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 8005cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cfa:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005d14 <lps22df_from_lsb_to_celsius+0x30>
 8005cfe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d02:	eef0 7a66 	vmov.f32	s15, s13
}
 8005d06:	eeb0 0a67 	vmov.f32	s0, s15
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	42c80000 	.word	0x42c80000

08005d18 <lps22df_id_get>:
  * @param  val   ID values.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_id_get(const stmdev_ctx_t *ctx, lps22df_id_t *val)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint8_t reg;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_WHO_AM_I, &reg, 1);
 8005d22:	f107 020b 	add.w	r2, r7, #11
 8005d26:	2301      	movs	r3, #1
 8005d28:	210f      	movs	r1, #15
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7ff ff70 	bl	8005c10 <lps22df_read_reg>
 8005d30:	60f8      	str	r0, [r7, #12]
  val->whoami = reg;
 8005d32:	7afa      	ldrb	r2, [r7, #11]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	701a      	strb	r2, [r3, #0]

  return ret;
 8005d38:	68fb      	ldr	r3, [r7, #12]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <lps22df_bus_mode_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_bus_mode_set(const stmdev_ctx_t *ctx, lps22df_bus_mode_t *val)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b086      	sub	sp, #24
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6039      	str	r1, [r7, #0]
  lps22df_i3c_if_ctrl_t i3c_if_ctrl;
  lps22df_if_ctrl_t if_ctrl;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8005d4c:	f107 020c 	add.w	r2, r7, #12
 8005d50:	2301      	movs	r3, #1
 8005d52:	210e      	movs	r1, #14
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff ff5b 	bl	8005c10 <lps22df_read_reg>
 8005d5a:	6178      	str	r0, [r7, #20]
  if (ret == 0)
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d124      	bne.n	8005dac <lps22df_bus_mode_set+0x6a>
  {
    if_ctrl.i2c_i3c_dis = ((uint8_t)val->interface & 0x02U) >> 1;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	085b      	lsrs	r3, r3, #1
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	7b3b      	ldrb	r3, [r7, #12]
 8005d70:	f362 1386 	bfi	r3, r2, #6, #1
 8005d74:	733b      	strb	r3, [r7, #12]
    if_ctrl.int_en_i3c = ((uint8_t)val->interface & 0x04U) >> 2;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	089b      	lsrs	r3, r3, #2
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	7b3b      	ldrb	r3, [r7, #12]
 8005d84:	f362 13c7 	bfi	r3, r2, #7, #1
 8005d88:	733b      	strb	r3, [r7, #12]
    if_ctrl.sim = ((uint8_t)val->interface & 0x01U);
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	7b3b      	ldrb	r3, [r7, #12]
 8005d96:	f362 1345 	bfi	r3, r2, #5, #1
 8005d9a:	733b      	strb	r3, [r7, #12]
    ret = lps22df_write_reg(ctx, LPS22DF_IF_CTRL, (uint8_t *)&if_ctrl, 1);
 8005d9c:	f107 020c 	add.w	r2, r7, #12
 8005da0:	2301      	movs	r3, #1
 8005da2:	210e      	movs	r1, #14
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7ff ff51 	bl	8005c4c <lps22df_write_reg>
 8005daa:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0)
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d107      	bne.n	8005dc2 <lps22df_bus_mode_set+0x80>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_I3C_IF_CTRL,
 8005db2:	f107 0210 	add.w	r2, r7, #16
 8005db6:	2301      	movs	r3, #1
 8005db8:	2119      	movs	r1, #25
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7ff ff28 	bl	8005c10 <lps22df_read_reg>
 8005dc0:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_if_ctrl, 1);
  }
  if (ret == 0)
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d119      	bne.n	8005dfc <lps22df_bus_mode_set+0xba>
  {
    i3c_if_ctrl.asf_on = (uint8_t)val->filter & 0x01U;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	785b      	ldrb	r3, [r3, #1]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	7c3b      	ldrb	r3, [r7, #16]
 8005dd4:	f362 1345 	bfi	r3, r2, #5, #1
 8005dd8:	743b      	strb	r3, [r7, #16]
    i3c_if_ctrl.i3c_bus_avb_sel = (uint8_t)val->i3c_ibi_time & 0x03U;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	789b      	ldrb	r3, [r3, #2]
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	7c3b      	ldrb	r3, [r7, #16]
 8005de6:	f362 0301 	bfi	r3, r2, #0, #2
 8005dea:	743b      	strb	r3, [r7, #16]
    ret = lps22df_write_reg(ctx, LPS22DF_I3C_IF_CTRL,
 8005dec:	f107 0210 	add.w	r2, r7, #16
 8005df0:	2301      	movs	r3, #1
 8005df2:	2119      	movs	r1, #25
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff ff29 	bl	8005c4c <lps22df_write_reg>
 8005dfa:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_if_ctrl, 1);
  }
  return ret;
 8005dfc:	697b      	ldr	r3, [r7, #20]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <lps22df_init_set>:
  * @param  val   configures the bus operating mode.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_init_set(const stmdev_ctx_t *ctx, lps22df_init_t val)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b08a      	sub	sp, #40	@ 0x28
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	70fb      	strb	r3, [r7, #3]
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_ctrl_reg3_t ctrl_reg3;
  lps22df_int_source_t int_src;
  lps22df_stat_t status;
  uint8_t reg[2], cnt = 0;
 8005e12:	2300      	movs	r3, #0
 8005e14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8005e18:	f107 020c 	add.w	r2, r7, #12
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	2111      	movs	r1, #17
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7ff fef5 	bl	8005c10 <lps22df_read_reg>
 8005e26:	6238      	str	r0, [r7, #32]
  if (ret == 0)
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f040 80c8 	bne.w	8005fc0 <lps22df_init_set+0x1ba>
  {
    bytecpy((uint8_t *)&ctrl_reg2, &reg[0]);
 8005e30:	f107 020c 	add.w	r2, r7, #12
 8005e34:	f107 031c 	add.w	r3, r7, #28
 8005e38:	4611      	mov	r1, r2
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7ff ff24 	bl	8005c88 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg3, &reg[1]);
 8005e40:	f107 030c 	add.w	r3, r7, #12
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	f107 0318 	add.w	r3, r7, #24
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff ff1b 	bl	8005c88 <bytecpy>

    switch (val)
 8005e52:	78fb      	ldrb	r3, [r7, #3]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d043      	beq.n	8005ee0 <lps22df_init_set+0xda>
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	f300 809d 	bgt.w	8005f98 <lps22df_init_set+0x192>
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d078      	beq.n	8005f54 <lps22df_init_set+0x14e>
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	f040 8098 	bne.w	8005f98 <lps22df_init_set+0x192>
    {
      case LPS22DF_BOOT:
        ctrl_reg2.boot = PROPERTY_ENABLE;
 8005e68:	7f3b      	ldrb	r3, [r7, #28]
 8005e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e6e:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8005e70:	f107 021c 	add.w	r2, r7, #28
 8005e74:	2301      	movs	r3, #1
 8005e76:	2111      	movs	r1, #17
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7ff fee7 	bl	8005c4c <lps22df_write_reg>
 8005e7e:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        if (ret != 0)
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f040 8095 	bne.w	8005fb2 <lps22df_init_set+0x1ac>
          break;
        }

        do
        {
          ret = lps22df_read_reg(ctx, LPS22DF_INT_SOURCE, (uint8_t *)&int_src, 1);
 8005e88:	f107 0214 	add.w	r2, r7, #20
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	2124      	movs	r1, #36	@ 0x24
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff febd 	bl	8005c10 <lps22df_read_reg>
 8005e96:	6238      	str	r0, [r7, #32]
          if (ret != 0)
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d115      	bne.n	8005eca <lps22df_init_set+0xc4>
          {
            break;
          }

          /* boot procedue ended correctly */
          if (int_src.boot_on == 0U)
 8005e9e:	7d3b      	ldrb	r3, [r7, #20]
 8005ea0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d011      	beq.n	8005ece <lps22df_init_set+0xc8>
          {
            break;
          }

          if (ctx->mdelay != NULL)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <lps22df_init_set+0xb4>
          {
            ctx->mdelay(10); /* 10ms of boot time */
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	200a      	movs	r0, #10
 8005eb8:	4798      	blx	r3
          }
        } while (cnt++ < 5U);
 8005eba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d9df      	bls.n	8005e88 <lps22df_init_set+0x82>
 8005ec8:	e002      	b.n	8005ed0 <lps22df_init_set+0xca>
            break;
 8005eca:	bf00      	nop
 8005ecc:	e000      	b.n	8005ed0 <lps22df_init_set+0xca>
            break;
 8005ece:	bf00      	nop

        if (cnt >= 5U)
 8005ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	d96e      	bls.n	8005fb6 <lps22df_init_set+0x1b0>
        {
          ret = -1;  /* boot procedure failed */
 8005ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8005edc:	623b      	str	r3, [r7, #32]
        }

        break;
 8005ede:	e06a      	b.n	8005fb6 <lps22df_init_set+0x1b0>
      case LPS22DF_RESET:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8005ee0:	7f3b      	ldrb	r3, [r7, #28]
 8005ee2:	f043 0304 	orr.w	r3, r3, #4
 8005ee6:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8005ee8:	f107 021c 	add.w	r2, r7, #28
 8005eec:	2301      	movs	r3, #1
 8005eee:	2111      	movs	r1, #17
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff feab 	bl	8005c4c <lps22df_write_reg>
 8005ef6:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        if (ret != 0)
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d15d      	bne.n	8005fba <lps22df_init_set+0x1b4>
          break;
        }

        do
        {
          ret = lps22df_status_get(ctx, &status);
 8005efe:	f107 0310 	add.w	r3, r7, #16
 8005f02:	4619      	mov	r1, r3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f860 	bl	8005fca <lps22df_status_get>
 8005f0a:	6238      	str	r0, [r7, #32]
          if (ret != 0)
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d115      	bne.n	8005f3e <lps22df_init_set+0x138>
          {
            break;
          }

          /* sw-reset procedue ended correctly */
          if (status.sw_reset == 0U)
 8005f12:	7c3b      	ldrb	r3, [r7, #16]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d011      	beq.n	8005f42 <lps22df_init_set+0x13c>
          {
            break;
          }

          if (ctx->mdelay != NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <lps22df_init_set+0x128>
          {
            ctx->mdelay(1); /* should be 50 us */
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	2001      	movs	r0, #1
 8005f2c:	4798      	blx	r3
          }
        } while (cnt++ < 5U);
 8005f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	d9e0      	bls.n	8005efe <lps22df_init_set+0xf8>
 8005f3c:	e002      	b.n	8005f44 <lps22df_init_set+0x13e>
            break;
 8005f3e:	bf00      	nop
 8005f40:	e000      	b.n	8005f44 <lps22df_init_set+0x13e>
            break;
 8005f42:	bf00      	nop

        if (cnt >= 5U)
 8005f44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f48:	2b04      	cmp	r3, #4
 8005f4a:	d938      	bls.n	8005fbe <lps22df_init_set+0x1b8>
        {
          ret = -1;  /* sw-reset procedure failed */
 8005f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005f50:	623b      	str	r3, [r7, #32]
        }

        break;
 8005f52:	e034      	b.n	8005fbe <lps22df_init_set+0x1b8>
      case LPS22DF_DRV_RDY:
        ctrl_reg2.bdu = PROPERTY_ENABLE;
 8005f54:	7f3b      	ldrb	r3, [r7, #28]
 8005f56:	f043 0308 	orr.w	r3, r3, #8
 8005f5a:	773b      	strb	r3, [r7, #28]
        ctrl_reg3.if_add_inc = PROPERTY_ENABLE;
 8005f5c:	7e3b      	ldrb	r3, [r7, #24]
 8005f5e:	f043 0301 	orr.w	r3, r3, #1
 8005f62:	763b      	strb	r3, [r7, #24]
        bytecpy(&reg[0], (uint8_t *)&ctrl_reg2);
 8005f64:	f107 021c 	add.w	r2, r7, #28
 8005f68:	f107 030c 	add.w	r3, r7, #12
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff fe8a 	bl	8005c88 <bytecpy>
        bytecpy(&reg[1], (uint8_t *)&ctrl_reg3);
 8005f74:	f107 0218 	add.w	r2, r7, #24
 8005f78:	f107 030c 	add.w	r3, r7, #12
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	4611      	mov	r1, r2
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff fe81 	bl	8005c88 <bytecpy>
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2, reg, 2);
 8005f86:	f107 020c 	add.w	r2, r7, #12
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	2111      	movs	r1, #17
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7ff fe5c 	bl	8005c4c <lps22df_write_reg>
 8005f94:	6238      	str	r0, [r7, #32]
        break;
 8005f96:	e013      	b.n	8005fc0 <lps22df_init_set+0x1ba>
      default:
        ctrl_reg2.swreset = PROPERTY_ENABLE;
 8005f98:	7f3b      	ldrb	r3, [r7, #28]
 8005f9a:	f043 0304 	orr.w	r3, r3, #4
 8005f9e:	773b      	strb	r3, [r7, #28]
        ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG2,
 8005fa0:	f107 021c 	add.w	r2, r7, #28
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	2111      	movs	r1, #17
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7ff fe4f 	bl	8005c4c <lps22df_write_reg>
 8005fae:	6238      	str	r0, [r7, #32]
                                (uint8_t *)&ctrl_reg2, 1);
        break;
 8005fb0:	e006      	b.n	8005fc0 <lps22df_init_set+0x1ba>
          break;
 8005fb2:	bf00      	nop
 8005fb4:	e004      	b.n	8005fc0 <lps22df_init_set+0x1ba>
        break;
 8005fb6:	bf00      	nop
 8005fb8:	e002      	b.n	8005fc0 <lps22df_init_set+0x1ba>
          break;
 8005fba:	bf00      	nop
 8005fbc:	e000      	b.n	8005fc0 <lps22df_init_set+0x1ba>
        break;
 8005fbe:	bf00      	nop
    }
  }

  return ret;
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3728      	adds	r7, #40	@ 0x28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <lps22df_status_get>:
  * @param  val   the status of the device.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_status_get(const stmdev_ctx_t *ctx, lps22df_stat_t *val)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b088      	sub	sp, #32
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	6039      	str	r1, [r7, #0]
  lps22df_int_source_t int_source;
  lps22df_ctrl_reg2_t ctrl_reg2;
  lps22df_status_t status;
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG2,
 8005fd4:	f107 0210 	add.w	r2, r7, #16
 8005fd8:	2301      	movs	r3, #1
 8005fda:	2111      	movs	r1, #17
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff fe17 	bl	8005c10 <lps22df_read_reg>
 8005fe2:	61f8      	str	r0, [r7, #28]
                         (uint8_t *)&ctrl_reg2, 1);
  if (ret == 0)
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d107      	bne.n	8005ffa <lps22df_status_get+0x30>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_INT_SOURCE, (uint8_t *)&int_source, 1);
 8005fea:	f107 0214 	add.w	r2, r7, #20
 8005fee:	2301      	movs	r3, #1
 8005ff0:	2124      	movs	r1, #36	@ 0x24
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7ff fe0c 	bl	8005c10 <lps22df_read_reg>
 8005ff8:	61f8      	str	r0, [r7, #28]
  }
  if (ret == 0)
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d107      	bne.n	8006010 <lps22df_status_get+0x46>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_STATUS, (uint8_t *)&status, 1);
 8006000:	f107 020c 	add.w	r2, r7, #12
 8006004:	2301      	movs	r3, #1
 8006006:	2127      	movs	r1, #39	@ 0x27
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff fe01 	bl	8005c10 <lps22df_read_reg>
 800600e:	61f8      	str	r0, [r7, #28]
  }
  if (ret == 0)
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d107      	bne.n	8006026 <lps22df_status_get+0x5c>
  {
    ret = lps22df_read_reg(ctx, LPS22DF_INTERRUPT_CFG,
 8006016:	f107 0218 	add.w	r2, r7, #24
 800601a:	2301      	movs	r3, #1
 800601c:	210b      	movs	r1, #11
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7ff fdf6 	bl	8005c10 <lps22df_read_reg>
 8006024:	61f8      	str	r0, [r7, #28]
                           (uint8_t *)&interrupt_cfg, 1);
  }
  val->sw_reset  = ctrl_reg2.swreset;
 8006026:	7c3b      	ldrb	r3, [r7, #16]
 8006028:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800602c:	b2d9      	uxtb	r1, r3
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	7813      	ldrb	r3, [r2, #0]
 8006032:	f361 0300 	bfi	r3, r1, #0, #1
 8006036:	7013      	strb	r3, [r2, #0]
  val->boot      = int_source.boot_on;
 8006038:	7d3b      	ldrb	r3, [r7, #20]
 800603a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800603e:	b2d9      	uxtb	r1, r3
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	7813      	ldrb	r3, [r2, #0]
 8006044:	f361 0341 	bfi	r3, r1, #1, #1
 8006048:	7013      	strb	r3, [r2, #0]
  val->drdy_pres = status.p_da;
 800604a:	7b3b      	ldrb	r3, [r7, #12]
 800604c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006050:	b2d9      	uxtb	r1, r3
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	7813      	ldrb	r3, [r2, #0]
 8006056:	f361 0382 	bfi	r3, r1, #2, #1
 800605a:	7013      	strb	r3, [r2, #0]
  val->drdy_temp = status.t_da;
 800605c:	7b3b      	ldrb	r3, [r7, #12]
 800605e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006062:	b2d9      	uxtb	r1, r3
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	7813      	ldrb	r3, [r2, #0]
 8006068:	f361 03c3 	bfi	r3, r1, #3, #1
 800606c:	7013      	strb	r3, [r2, #0]
  val->ovr_pres  = status.p_or;
 800606e:	7b3b      	ldrb	r3, [r7, #12]
 8006070:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006074:	b2d9      	uxtb	r1, r3
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	7813      	ldrb	r3, [r2, #0]
 800607a:	f361 1304 	bfi	r3, r1, #4, #1
 800607e:	7013      	strb	r3, [r2, #0]
  val->ovr_temp  = status.t_or;
 8006080:	7b3b      	ldrb	r3, [r7, #12]
 8006082:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006086:	b2d9      	uxtb	r1, r3
 8006088:	683a      	ldr	r2, [r7, #0]
 800608a:	7813      	ldrb	r3, [r2, #0]
 800608c:	f361 1345 	bfi	r3, r1, #5, #1
 8006090:	7013      	strb	r3, [r2, #0]
  val->end_meas  = ~ctrl_reg2.oneshot;
 8006092:	7c3b      	ldrb	r3, [r7, #16]
 8006094:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006098:	b2db      	uxtb	r3, r3
 800609a:	43db      	mvns	r3, r3
 800609c:	b2db      	uxtb	r3, r3
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	b2d9      	uxtb	r1, r3
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	7813      	ldrb	r3, [r2, #0]
 80060a8:	f361 1386 	bfi	r3, r1, #6, #1
 80060ac:	7013      	strb	r3, [r2, #0]
  val->ref_done = ~interrupt_cfg.autozero;
 80060ae:	7e3b      	ldrb	r3, [r7, #24]
 80060b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	43db      	mvns	r3, r3
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	b2d9      	uxtb	r1, r3
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	7813      	ldrb	r3, [r2, #0]
 80060c4:	f361 13c7 	bfi	r3, r1, #7, #1
 80060c8:	7013      	strb	r3, [r2, #0]

  return ret;
 80060ca:	69fb      	ldr	r3, [r7, #28]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3720      	adds	r7, #32
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <lps22df_mode_set>:
  * @param  val   set the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_set(const stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 80060de:	f107 0208 	add.w	r2, r7, #8
 80060e2:	2302      	movs	r3, #2
 80060e4:	2110      	movs	r1, #16
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7ff fd92 	bl	8005c10 <lps22df_read_reg>
 80060ec:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d148      	bne.n	8006186 <lps22df_mode_set+0xb2>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 80060f4:	f107 0208 	add.w	r2, r7, #8
 80060f8:	f107 0310 	add.w	r3, r7, #16
 80060fc:	4611      	mov	r1, r2
 80060fe:	4618      	mov	r0, r3
 8006100:	f7ff fdc2 	bl	8005c88 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 8006104:	f107 0308 	add.w	r3, r7, #8
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	f107 030c 	add.w	r3, r7, #12
 800610e:	4611      	mov	r1, r2
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff fdb9 	bl	8005c88 <bytecpy>

    ctrl_reg1.odr = (uint8_t)val->odr;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	f003 030f 	and.w	r3, r3, #15
 800611e:	b2da      	uxtb	r2, r3
 8006120:	7c3b      	ldrb	r3, [r7, #16]
 8006122:	f362 03c6 	bfi	r3, r2, #3, #4
 8006126:	743b      	strb	r3, [r7, #16]
    ctrl_reg1.avg = (uint8_t)val->avg;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	785b      	ldrb	r3, [r3, #1]
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	b2da      	uxtb	r2, r3
 8006132:	7c3b      	ldrb	r3, [r7, #16]
 8006134:	f362 0302 	bfi	r3, r2, #0, #3
 8006138:	743b      	strb	r3, [r7, #16]
    ctrl_reg2.en_lpfp = (uint8_t)val->lpf & 0x01U;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	789b      	ldrb	r3, [r3, #2]
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	b2da      	uxtb	r2, r3
 8006144:	7b3b      	ldrb	r3, [r7, #12]
 8006146:	f362 1304 	bfi	r3, r2, #4, #1
 800614a:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.lfpf_cfg = ((uint8_t)val->lpf & 0x02U) >> 2;
 800614c:	7b3b      	ldrb	r3, [r7, #12]
 800614e:	f023 0320 	bic.w	r3, r3, #32
 8006152:	733b      	strb	r3, [r7, #12]

    bytecpy(&reg[0], (uint8_t *)&ctrl_reg1);
 8006154:	f107 0210 	add.w	r2, r7, #16
 8006158:	f107 0308 	add.w	r3, r7, #8
 800615c:	4611      	mov	r1, r2
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff fd92 	bl	8005c88 <bytecpy>
    bytecpy(&reg[1], (uint8_t *)&ctrl_reg2);
 8006164:	f107 020c 	add.w	r2, r7, #12
 8006168:	f107 0308 	add.w	r3, r7, #8
 800616c:	3301      	adds	r3, #1
 800616e:	4611      	mov	r1, r2
 8006170:	4618      	mov	r0, r3
 8006172:	f7ff fd89 	bl	8005c88 <bytecpy>
    ret = lps22df_write_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 8006176:	f107 0208 	add.w	r2, r7, #8
 800617a:	2302      	movs	r3, #2
 800617c:	2110      	movs	r1, #16
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff fd64 	bl	8005c4c <lps22df_write_reg>
 8006184:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006186:	697b      	ldr	r3, [r7, #20]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <lps22df_mode_get>:
  * @param  val   get the sensor conversion parameters.(ptr)
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_mode_get(const stmdev_ctx_t *ctx, lps22df_md_t *val)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  lps22df_ctrl_reg1_t ctrl_reg1;
  lps22df_ctrl_reg2_t ctrl_reg2;
  uint8_t reg[2];
  int32_t ret;

  ret = lps22df_read_reg(ctx, LPS22DF_CTRL_REG1, reg, 2);
 800619a:	f107 0208 	add.w	r2, r7, #8
 800619e:	2302      	movs	r3, #2
 80061a0:	2110      	movs	r1, #16
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff fd34 	bl	8005c10 <lps22df_read_reg>
 80061a8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f040 80b6 	bne.w	800631e <lps22df_mode_get+0x18e>
  {
    bytecpy((uint8_t *)&ctrl_reg1, &reg[0]);
 80061b2:	f107 0208 	add.w	r2, r7, #8
 80061b6:	f107 0310 	add.w	r3, r7, #16
 80061ba:	4611      	mov	r1, r2
 80061bc:	4618      	mov	r0, r3
 80061be:	f7ff fd63 	bl	8005c88 <bytecpy>
    bytecpy((uint8_t *)&ctrl_reg2, &reg[1]);
 80061c2:	f107 0308 	add.w	r3, r7, #8
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	f107 030c 	add.w	r3, r7, #12
 80061cc:	4611      	mov	r1, r2
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7ff fd5a 	bl	8005c88 <bytecpy>

    switch (ctrl_reg1.odr)
 80061d4:	7c3b      	ldrb	r3, [r7, #16]
 80061d6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d839      	bhi.n	8006254 <lps22df_mode_get+0xc4>
 80061e0:	a201      	add	r2, pc, #4	@ (adr r2, 80061e8 <lps22df_mode_get+0x58>)
 80061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e6:	bf00      	nop
 80061e8:	0800620d 	.word	0x0800620d
 80061ec:	08006215 	.word	0x08006215
 80061f0:	0800621d 	.word	0x0800621d
 80061f4:	08006225 	.word	0x08006225
 80061f8:	0800622d 	.word	0x0800622d
 80061fc:	08006235 	.word	0x08006235
 8006200:	0800623d 	.word	0x0800623d
 8006204:	08006245 	.word	0x08006245
 8006208:	0800624d 	.word	0x0800624d
    {
      case LPS22DF_ONE_SHOT:
        val->odr = LPS22DF_ONE_SHOT;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2200      	movs	r2, #0
 8006210:	701a      	strb	r2, [r3, #0]
        break;
 8006212:	e023      	b.n	800625c <lps22df_mode_get+0xcc>
      case LPS22DF_1Hz:
        val->odr = LPS22DF_1Hz;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2201      	movs	r2, #1
 8006218:	701a      	strb	r2, [r3, #0]
        break;
 800621a:	e01f      	b.n	800625c <lps22df_mode_get+0xcc>
      case LPS22DF_4Hz:
        val->odr = LPS22DF_4Hz;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	2202      	movs	r2, #2
 8006220:	701a      	strb	r2, [r3, #0]
        break;
 8006222:	e01b      	b.n	800625c <lps22df_mode_get+0xcc>
      case LPS22DF_10Hz:
        val->odr = LPS22DF_10Hz;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	2203      	movs	r2, #3
 8006228:	701a      	strb	r2, [r3, #0]
        break;
 800622a:	e017      	b.n	800625c <lps22df_mode_get+0xcc>
      case LPS22DF_25Hz:
        val->odr = LPS22DF_25Hz;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2204      	movs	r2, #4
 8006230:	701a      	strb	r2, [r3, #0]
        break;
 8006232:	e013      	b.n	800625c <lps22df_mode_get+0xcc>
      case LPS22DF_50Hz:
        val->odr = LPS22DF_50Hz;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2205      	movs	r2, #5
 8006238:	701a      	strb	r2, [r3, #0]
        break;
 800623a:	e00f      	b.n	800625c <lps22df_mode_get+0xcc>
      case LPS22DF_75Hz:
        val->odr = LPS22DF_75Hz;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2206      	movs	r2, #6
 8006240:	701a      	strb	r2, [r3, #0]
        break;
 8006242:	e00b      	b.n	800625c <lps22df_mode_get+0xcc>
      case LPS22DF_100Hz:
        val->odr = LPS22DF_100Hz;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2207      	movs	r2, #7
 8006248:	701a      	strb	r2, [r3, #0]
        break;
 800624a:	e007      	b.n	800625c <lps22df_mode_get+0xcc>
      case LPS22DF_200Hz:
        val->odr = LPS22DF_200Hz;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2208      	movs	r2, #8
 8006250:	701a      	strb	r2, [r3, #0]
        break;
 8006252:	e003      	b.n	800625c <lps22df_mode_get+0xcc>
      default:
        val->odr = LPS22DF_ONE_SHOT;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2200      	movs	r2, #0
 8006258:	701a      	strb	r2, [r3, #0]
        break;
 800625a:	bf00      	nop
    }

    switch (ctrl_reg1.avg)
 800625c:	7c3b      	ldrb	r3, [r7, #16]
 800625e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b07      	cmp	r3, #7
 8006266:	d833      	bhi.n	80062d0 <lps22df_mode_get+0x140>
 8006268:	a201      	add	r2, pc, #4	@ (adr r2, 8006270 <lps22df_mode_get+0xe0>)
 800626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626e:	bf00      	nop
 8006270:	08006291 	.word	0x08006291
 8006274:	08006299 	.word	0x08006299
 8006278:	080062a1 	.word	0x080062a1
 800627c:	080062a9 	.word	0x080062a9
 8006280:	080062b1 	.word	0x080062b1
 8006284:	080062b9 	.word	0x080062b9
 8006288:	080062c1 	.word	0x080062c1
 800628c:	080062c9 	.word	0x080062c9
    {
      case LPS22DF_4_AVG:
        val->avg = LPS22DF_4_AVG;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	2200      	movs	r2, #0
 8006294:	705a      	strb	r2, [r3, #1]
        break;
 8006296:	e01f      	b.n	80062d8 <lps22df_mode_get+0x148>
      case LPS22DF_8_AVG:
        val->avg = LPS22DF_8_AVG;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2201      	movs	r2, #1
 800629c:	705a      	strb	r2, [r3, #1]
        break;
 800629e:	e01b      	b.n	80062d8 <lps22df_mode_get+0x148>
      case LPS22DF_16_AVG:
        val->avg = LPS22DF_16_AVG;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2202      	movs	r2, #2
 80062a4:	705a      	strb	r2, [r3, #1]
        break;
 80062a6:	e017      	b.n	80062d8 <lps22df_mode_get+0x148>
      case LPS22DF_32_AVG:
        val->avg = LPS22DF_32_AVG;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2203      	movs	r2, #3
 80062ac:	705a      	strb	r2, [r3, #1]
        break;
 80062ae:	e013      	b.n	80062d8 <lps22df_mode_get+0x148>
      case LPS22DF_64_AVG:
        val->avg = LPS22DF_64_AVG;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2204      	movs	r2, #4
 80062b4:	705a      	strb	r2, [r3, #1]
        break;
 80062b6:	e00f      	b.n	80062d8 <lps22df_mode_get+0x148>
      case LPS22DF_128_AVG:
        val->avg = LPS22DF_128_AVG;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	2205      	movs	r2, #5
 80062bc:	705a      	strb	r2, [r3, #1]
        break;
 80062be:	e00b      	b.n	80062d8 <lps22df_mode_get+0x148>
      case LPS22DF_256_AVG:
        val->avg = LPS22DF_256_AVG;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2206      	movs	r2, #6
 80062c4:	705a      	strb	r2, [r3, #1]
        break;
 80062c6:	e007      	b.n	80062d8 <lps22df_mode_get+0x148>
      case LPS22DF_512_AVG:
        val->avg = LPS22DF_512_AVG;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2207      	movs	r2, #7
 80062cc:	705a      	strb	r2, [r3, #1]
        break;
 80062ce:	e003      	b.n	80062d8 <lps22df_mode_get+0x148>
      default:
        val->avg = LPS22DF_4_AVG;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2200      	movs	r2, #0
 80062d4:	705a      	strb	r2, [r3, #1]
        break;
 80062d6:	bf00      	nop
    }

    switch ((ctrl_reg2.lfpf_cfg << 2) | ctrl_reg2.en_lpfp)
 80062d8:	7b3b      	ldrb	r3, [r7, #12]
 80062da:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	7b3a      	ldrb	r2, [r7, #12]
 80062e4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	4313      	orrs	r3, r2
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d00e      	beq.n	800630e <lps22df_mode_get+0x17e>
 80062f0:	2b03      	cmp	r3, #3
 80062f2:	dc10      	bgt.n	8006316 <lps22df_mode_get+0x186>
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <lps22df_mode_get+0x16e>
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d004      	beq.n	8006306 <lps22df_mode_get+0x176>
 80062fc:	e00b      	b.n	8006316 <lps22df_mode_get+0x186>
    {
      case LPS22DF_LPF_DISABLE:
        val->lpf = LPS22DF_LPF_DISABLE;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2200      	movs	r2, #0
 8006302:	709a      	strb	r2, [r3, #2]
        break;
 8006304:	e00b      	b.n	800631e <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_4:
        val->lpf = LPS22DF_LPF_ODR_DIV_4;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2201      	movs	r2, #1
 800630a:	709a      	strb	r2, [r3, #2]
        break;
 800630c:	e007      	b.n	800631e <lps22df_mode_get+0x18e>
      case LPS22DF_LPF_ODR_DIV_9:
        val->lpf = LPS22DF_LPF_ODR_DIV_9;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2203      	movs	r2, #3
 8006312:	709a      	strb	r2, [r3, #2]
        break;
 8006314:	e003      	b.n	800631e <lps22df_mode_get+0x18e>
      default:
        val->lpf = LPS22DF_LPF_DISABLE;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2200      	movs	r2, #0
 800631a:	709a      	strb	r2, [r3, #2]
        break;
 800631c:	bf00      	nop
    }
  }
  return ret;
 800631e:	697b      	ldr	r3, [r7, #20]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <lps22df_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_pressure_raw_get(const stmdev_ctx_t *ctx, uint32_t *buff)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[3];

  ret =  lps22df_read_reg(ctx, LPS22DF_PRESS_OUT_XL, reg, 3);
 8006332:	f107 0208 	add.w	r2, r7, #8
 8006336:	2303      	movs	r3, #3
 8006338:	2128      	movs	r1, #40	@ 0x28
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff fc68 	bl	8005c10 <lps22df_read_reg>
 8006340:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8006342:	7abb      	ldrb	r3, [r7, #10]
 8006344:	461a      	mov	r2, r3
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	021b      	lsls	r3, r3, #8
 8006350:	7a7a      	ldrb	r2, [r7, #9]
 8006352:	441a      	add	r2, r3
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	021b      	lsls	r3, r3, #8
 800635e:	7a3a      	ldrb	r2, [r7, #8]
 8006360:	441a      	add	r2, r3
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	021a      	lsls	r2, r3, #8
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	601a      	str	r2, [r3, #0]

  return ret;
 8006370:	68fb      	ldr	r3, [r7, #12]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <lps22df_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22df_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *buff)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t reg[2];

  ret =  lps22df_read_reg(ctx, LPS22DF_TEMP_OUT_L, reg, 2);
 8006384:	f107 0208 	add.w	r2, r7, #8
 8006388:	2302      	movs	r3, #2
 800638a:	212b      	movs	r1, #43	@ 0x2b
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff fc3f 	bl	8005c10 <lps22df_read_reg>
 8006392:	60f8      	str	r0, [r7, #12]
  *buff = (int16_t)reg[1];
 8006394:	7a7b      	ldrb	r3, [r7, #9]
 8006396:	b21a      	sxth	r2, r3
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + (int16_t)reg[0];
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	021b      	lsls	r3, r3, #8
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	7a3a      	ldrb	r2, [r7, #8]
 80063aa:	4413      	add	r3, r2
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	b21a      	sxth	r2, r3
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	801a      	strh	r2, [r3, #0]

  return ret;
 80063b4:	68fb      	ldr	r3, [r7, #12]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
	...

080063c0 <LSM6DSO16IS_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_RegisterBusIO(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_IO_t *pIO)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d103      	bne.n	80063dc <LSM6DSO16IS_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO16IS_ERROR;
 80063d4:	f04f 33ff 	mov.w	r3, #4294967295
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	e04d      	b.n	8006478 <LSM6DSO16IS_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	7b1a      	ldrb	r2, [r3, #12]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	691a      	ldr	r2, [r3, #16]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	695a      	ldr	r2, [r3, #20]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	699a      	ldr	r2, [r3, #24]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a1b      	ldr	r2, [pc, #108]	@ (8006484 <LSM6DSO16IS_RegisterBusIO+0xc4>)
 8006418:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a1a      	ldr	r2, [pc, #104]	@ (8006488 <LSM6DSO16IS_RegisterBusIO+0xc8>)
 800641e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d103      	bne.n	8006436 <LSM6DSO16IS_RegisterBusIO+0x76>
    {
      ret = LSM6DSO16IS_ERROR;
 800642e:	f04f 33ff 	mov.w	r3, #4294967295
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	e020      	b.n	8006478 <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO16IS_OK)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4798      	blx	r3
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <LSM6DSO16IS_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO16IS_ERROR;
 8006442:	f04f 33ff 	mov.w	r3, #4294967295
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	e016      	b.n	8006478 <LSM6DSO16IS_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO16IS_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d112      	bne.n	8006478 <LSM6DSO16IS_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10d      	bne.n	8006478 <LSM6DSO16IS_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 800645c:	230c      	movs	r3, #12
 800645e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO16IS_Write_Reg(pObj, LSM6DSO16IS_CTRL3_C, data) != LSM6DSO16IS_OK)
 8006460:	7afb      	ldrb	r3, [r7, #11]
 8006462:	461a      	mov	r2, r3
 8006464:	2112      	movs	r1, #18
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fdbe 	bl	8006fe8 <LSM6DSO16IS_Write_Reg>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <LSM6DSO16IS_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO16IS_ERROR;
 8006472:	f04f 33ff 	mov.w	r3, #4294967295
 8006476:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006478:	68fb      	ldr	r3, [r7, #12]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	080074b1 	.word	0x080074b1
 8006488:	080074e7 	.word	0x080074e7

0800648c <LSM6DSO16IS_Init>:
  * @brief  Initialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Init(LSM6DSO16IS_Object_t *pObj)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]

  /* Set main memory bank */
  if (LSM6DSO16IS_Set_Mem_Bank(pObj, (uint8_t)LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 8006498:	2100      	movs	r1, #0
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fdc1 	bl	8007022 <LSM6DSO16IS_Set_Mem_Bank>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d002      	beq.n	80064ac <LSM6DSO16IS_Init+0x20>
  {
    ret = LSM6DSO16IS_ERROR;
 80064a6:	f04f 33ff 	mov.w	r3, #4294967295
 80064aa:	60fb      	str	r3, [r7, #12]
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso16is_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3320      	adds	r3, #32
 80064b0:	2101      	movs	r1, #1
 80064b2:	4618      	mov	r0, r3
 80064b4:	f001 fbdc 	bl	8007c70 <lsm6dso16is_auto_increment_set>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <LSM6DSO16IS_Init+0x38>
  {
    ret = LSM6DSO16IS_ERROR;
 80064be:	f04f 33ff 	mov.w	r3, #4294967295
 80064c2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable BDU */
  if (lsm6dso16is_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO16IS_OK)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3320      	adds	r3, #32
 80064c8:	2101      	movs	r1, #1
 80064ca:	4618      	mov	r0, r3
 80064cc:	f001 fbf6 	bl	8007cbc <lsm6dso16is_block_data_update_set>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <LSM6DSO16IS_Init+0x50>
  {
    ret = LSM6DSO16IS_ERROR;
 80064d6:	f04f 33ff 	mov.w	r3, #4294967295
 80064da:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2204      	movs	r2, #4
 80064e0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3320      	adds	r3, #32
 80064e8:	2100      	movs	r1, #0
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 f910 	bl	8007710 <lsm6dso16is_xl_data_rate_set>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <LSM6DSO16IS_Init+0x70>
  {
    ret = LSM6DSO16IS_ERROR;
 80064f6:	f04f 33ff 	mov.w	r3, #4294967295
 80064fa:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2g) != LSM6DSO16IS_OK)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3320      	adds	r3, #32
 8006500:	2100      	movs	r1, #0
 8006502:	4618      	mov	r0, r3
 8006504:	f001 f8a6 	bl	8007654 <lsm6dso16is_xl_full_scale_set>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <LSM6DSO16IS_Init+0x88>
  {
    ret = LSM6DSO16IS_ERROR;
 800650e:	f04f 33ff 	mov.w	r3, #4294967295
 8006512:	60fb      	str	r3, [r7, #12]
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2204      	movs	r2, #4
 8006518:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3320      	adds	r3, #32
 8006520:	2100      	movs	r1, #0
 8006522:	4618      	mov	r0, r3
 8006524:	f001 faa8 	bl	8007a78 <lsm6dso16is_gy_data_rate_set>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d002      	beq.n	8006534 <LSM6DSO16IS_Init+0xa8>
  {
    ret = LSM6DSO16IS_ERROR;
 800652e:	f04f 33ff 	mov.w	r3, #4294967295
 8006532:	60fb      	str	r3, [r7, #12]
  }

  /* Full scale selection. */
  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), LSM6DSO16IS_2000dps) != LSM6DSO16IS_OK)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3320      	adds	r3, #32
 8006538:	2103      	movs	r1, #3
 800653a:	4618      	mov	r0, r3
 800653c:	f001 fa10 	bl	8007960 <lsm6dso16is_gy_full_scale_set>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <LSM6DSO16IS_Init+0xc0>
  {
    ret = LSM6DSO16IS_ERROR;
 8006546:	f04f 33ff 	mov.w	r3, #4294967295
 800654a:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d103      	bne.n	800655a <LSM6DSO16IS_Init+0xce>
  {
    pObj->is_initialized = 1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 800655a:	68fb      	ldr	r3, [r7, #12]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <LSM6DSO16IS_DeInit>:
  * @brief  Deinitialize the LSM6DSO16IS sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_DeInit(LSM6DSO16IS_Object_t *pObj)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	60fb      	str	r3, [r7, #12]

  /* Disable the component */
  if (LSM6DSO16IS_ACC_Disable(pObj) != LSM6DSO16IS_OK)
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f890 	bl	8006696 <LSM6DSO16IS_ACC_Disable>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d002      	beq.n	8006582 <LSM6DSO16IS_DeInit+0x1e>
  {
    ret = LSM6DSO16IS_ERROR;
 800657c:	f04f 33ff 	mov.w	r3, #4294967295
 8006580:	60fb      	str	r3, [r7, #12]
  }

  if (LSM6DSO16IS_GYRO_Disable(pObj) != LSM6DSO16IS_OK)
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fad0 	bl	8006b28 <LSM6DSO16IS_GYRO_Disable>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <LSM6DSO16IS_DeInit+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 800658e:	f04f 33ff 	mov.w	r3, #4294967295
 8006592:	60fb      	str	r3, [r7, #12]
  }

  if (ret == LSM6DSO16IS_OK)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10b      	bne.n	80065b2 <LSM6DSO16IS_DeInit+0x4e>
  {
    /* Reset output data rate. */
    pObj->acc_odr = LSM6DSO16IS_XL_ODR_OFF;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    pObj->gyro_odr = LSM6DSO16IS_GY_ODR_OFF;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    pObj->is_initialized = 0;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return ret;
 80065b2:	68fb      	ldr	r3, [r7, #12]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <LSM6DSO16IS_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ReadID(LSM6DSO16IS_Object_t *pObj, uint8_t *Id)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_device_id_get(&(pObj->Ctx), Id) != LSM6DSO16IS_OK)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	3320      	adds	r3, #32
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f001 f808 	bl	80075e6 <lsm6dso16is_device_id_get>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <LSM6DSO16IS_ReadID+0x26>
  {
    ret = LSM6DSO16IS_ERROR;
 80065dc:	f04f 33ff 	mov.w	r3, #4294967295
 80065e0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80065e2:	68fb      	ldr	r3, [r7, #12]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <LSM6DSO16IS_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO16IS sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GetCapabilities(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Capabilities_t *Capabilities)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2201      	movs	r2, #1
 80065fa:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2201      	movs	r2, #1
 8006600:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2200      	movs	r2, #0
 8006606:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	2200      	movs	r2, #0
 800660c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006614:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2210      	movs	r2, #16
 800661a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2200      	movs	r2, #0
 8006620:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 3333.0f;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	4a07      	ldr	r2, [pc, #28]	@ (8006644 <LSM6DSO16IS_GetCapabilities+0x58>)
 8006626:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 3333.0f;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	4a06      	ldr	r2, [pc, #24]	@ (8006644 <LSM6DSO16IS_GetCapabilities+0x58>)
 800662c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	f04f 0200 	mov.w	r2, #0
 8006634:	619a      	str	r2, [r3, #24]

  return LSM6DSO16IS_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	45505000 	.word	0x45505000

08006648 <LSM6DSO16IS_ACC_Enable>:
  * @brief  Enable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Enable(LSM6DSO16IS_Object_t *pObj)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800665a:	2b01      	cmp	r3, #1
 800665c:	d102      	bne.n	8006664 <LSM6DSO16IS_ACC_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	e013      	b.n	800668c <LSM6DSO16IS_ACC_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO16IS_OK)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f103 0220 	add.w	r2, r3, #32
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006670:	4619      	mov	r1, r3
 8006672:	4610      	mov	r0, r2
 8006674:	f001 f84c 	bl	8007710 <lsm6dso16is_xl_data_rate_set>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d002      	beq.n	8006684 <LSM6DSO16IS_ACC_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 800667e:	f04f 33ff 	mov.w	r3, #4294967295
 8006682:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 1;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 800668c:	68fb      	ldr	r3, [r7, #12]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <LSM6DSO16IS_ACC_Disable>:
  * @brief  Disable the LSM6DSO16IS accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_Disable(LSM6DSO16IS_Object_t *pObj)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b084      	sub	sp, #16
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d102      	bne.n	80066b2 <LSM6DSO16IS_ACC_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	e01e      	b.n	80066f0 <LSM6DSO16IS_ACC_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO16IS_OK)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f103 0220 	add.w	r2, r3, #32
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	3333      	adds	r3, #51	@ 0x33
 80066bc:	4619      	mov	r1, r3
 80066be:	4610      	mov	r0, r2
 80066c0:	f001 f866 	bl	8007790 <lsm6dso16is_xl_data_rate_get>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d002      	beq.n	80066d0 <LSM6DSO16IS_ACC_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 80066ca:	f04f 33ff 	mov.w	r3, #4294967295
 80066ce:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_XL_ODR_OFF) != LSM6DSO16IS_OK)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3320      	adds	r3, #32
 80066d4:	2100      	movs	r1, #0
 80066d6:	4618      	mov	r0, r3
 80066d8:	f001 f81a 	bl	8007710 <lsm6dso16is_xl_data_rate_set>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <LSM6DSO16IS_ACC_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 80066e2:	f04f 33ff 	mov.w	r3, #4294967295
 80066e6:	60fb      	str	r3, [r7, #12]
    }

    pObj->acc_is_enabled = 0;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }

  return ret;
 80066f0:	68fb      	ldr	r3, [r7, #12]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <LSM6DSO16IS_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	3320      	adds	r3, #32
 800670e:	f107 020b 	add.w	r2, r7, #11
 8006712:	4611      	mov	r1, r2
 8006714:	4618      	mov	r0, r3
 8006716:	f000 ffc3 	bl	80076a0 <lsm6dso16is_xl_full_scale_get>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <LSM6DSO16IS_ACC_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006720:	f04f 33ff 	mov.w	r3, #4294967295
 8006724:	60fb      	str	r3, [r7, #12]
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8006726:	7afb      	ldrb	r3, [r7, #11]
 8006728:	2b03      	cmp	r3, #3
 800672a:	d81b      	bhi.n	8006764 <LSM6DSO16IS_ACC_GetSensitivity+0x68>
 800672c:	a201      	add	r2, pc, #4	@ (adr r2, 8006734 <LSM6DSO16IS_ACC_GetSensitivity+0x38>)
 800672e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006732:	bf00      	nop
 8006734:	08006745 	.word	0x08006745
 8006738:	0800675d 	.word	0x0800675d
 800673c:	0800674d 	.word	0x0800674d
 8006740:	08006755 	.word	0x08006755
  {
    case LSM6DSO16IS_2g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_2G;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	4a0c      	ldr	r2, [pc, #48]	@ (8006778 <LSM6DSO16IS_ACC_GetSensitivity+0x7c>)
 8006748:	601a      	str	r2, [r3, #0]
      break;
 800674a:	e00f      	b.n	800676c <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_4g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_4G;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	4a0b      	ldr	r2, [pc, #44]	@ (800677c <LSM6DSO16IS_ACC_GetSensitivity+0x80>)
 8006750:	601a      	str	r2, [r3, #0]
      break;
 8006752:	e00b      	b.n	800676c <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_8g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_8G;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	4a0a      	ldr	r2, [pc, #40]	@ (8006780 <LSM6DSO16IS_ACC_GetSensitivity+0x84>)
 8006758:	601a      	str	r2, [r3, #0]
      break;
 800675a:	e007      	b.n	800676c <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    case LSM6DSO16IS_16g:
      *Sensitivity = LSM6DSO16IS_ACC_SENSITIVITY_FS_16G;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	4a09      	ldr	r2, [pc, #36]	@ (8006784 <LSM6DSO16IS_ACC_GetSensitivity+0x88>)
 8006760:	601a      	str	r2, [r3, #0]
      break;
 8006762:	e003      	b.n	800676c <LSM6DSO16IS_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006764:	f04f 33ff 	mov.w	r3, #4294967295
 8006768:	60fb      	str	r3, [r7, #12]
      break;
 800676a:	bf00      	nop
  }

  return ret;
 800676c:	68fb      	ldr	r3, [r7, #12]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	3d79db23 	.word	0x3d79db23
 800677c:	3df9db23 	.word	0x3df9db23
 8006780:	3e79db23 	.word	0x3e79db23
 8006784:	3ef9db23 	.word	0x3ef9db23

08006788 <LSM6DSO16IS_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3320      	adds	r3, #32
 800679a:	f107 020b 	add.w	r2, r7, #11
 800679e:	4611      	mov	r1, r2
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fff5 	bl	8007790 <lsm6dso16is_xl_data_rate_get>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <LSM6DSO16IS_ACC_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 80067ac:	f04f 33ff 	mov.w	r3, #4294967295
 80067b0:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 80067b2:	7afb      	ldrb	r3, [r7, #11]
 80067b4:	2b1b      	cmp	r3, #27
 80067b6:	d86c      	bhi.n	8006892 <LSM6DSO16IS_ACC_GetOutputDataRate+0x10a>
 80067b8:	a201      	add	r2, pc, #4	@ (adr r2, 80067c0 <LSM6DSO16IS_ACC_GetOutputDataRate+0x38>)
 80067ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067be:	bf00      	nop
 80067c0:	08006831 	.word	0x08006831
 80067c4:	08006843 	.word	0x08006843
 80067c8:	0800684b 	.word	0x0800684b
 80067cc:	08006853 	.word	0x08006853
 80067d0:	0800685b 	.word	0x0800685b
 80067d4:	08006863 	.word	0x08006863
 80067d8:	0800686b 	.word	0x0800686b
 80067dc:	08006873 	.word	0x08006873
 80067e0:	0800687b 	.word	0x0800687b
 80067e4:	08006883 	.word	0x08006883
 80067e8:	0800688b 	.word	0x0800688b
 80067ec:	08006893 	.word	0x08006893
 80067f0:	08006893 	.word	0x08006893
 80067f4:	08006893 	.word	0x08006893
 80067f8:	08006893 	.word	0x08006893
 80067fc:	08006893 	.word	0x08006893
 8006800:	08006893 	.word	0x08006893
 8006804:	08006843 	.word	0x08006843
 8006808:	0800684b 	.word	0x0800684b
 800680c:	08006853 	.word	0x08006853
 8006810:	0800685b 	.word	0x0800685b
 8006814:	08006863 	.word	0x08006863
 8006818:	0800686b 	.word	0x0800686b
 800681c:	08006873 	.word	0x08006873
 8006820:	0800687b 	.word	0x0800687b
 8006824:	08006883 	.word	0x08006883
 8006828:	0800688b 	.word	0x0800688b
 800682c:	0800683b 	.word	0x0800683b
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *Odr = 0.0f;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	f04f 0200 	mov.w	r2, #0
 8006836:	601a      	str	r2, [r3, #0]
      break;
 8006838:	e02f      	b.n	800689a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *Odr = 1.6f;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	4a19      	ldr	r2, [pc, #100]	@ (80068a4 <LSM6DSO16IS_ACC_GetOutputDataRate+0x11c>)
 800683e:	601a      	str	r2, [r3, #0]
      break;
 8006840:	e02b      	b.n	800689a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	4a18      	ldr	r2, [pc, #96]	@ (80068a8 <LSM6DSO16IS_ACC_GetOutputDataRate+0x120>)
 8006846:	601a      	str	r2, [r3, #0]
      break;
 8006848:	e027      	b.n	800689a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *Odr = 26.0f;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	4a17      	ldr	r2, [pc, #92]	@ (80068ac <LSM6DSO16IS_ACC_GetOutputDataRate+0x124>)
 800684e:	601a      	str	r2, [r3, #0]
      break;
 8006850:	e023      	b.n	800689a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	4a16      	ldr	r2, [pc, #88]	@ (80068b0 <LSM6DSO16IS_ACC_GetOutputDataRate+0x128>)
 8006856:	601a      	str	r2, [r3, #0]
      break;
 8006858:	e01f      	b.n	800689a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	4a15      	ldr	r2, [pc, #84]	@ (80068b4 <LSM6DSO16IS_ACC_GetOutputDataRate+0x12c>)
 800685e:	601a      	str	r2, [r3, #0]
      break;
 8006860:	e01b      	b.n	800689a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	4a14      	ldr	r2, [pc, #80]	@ (80068b8 <LSM6DSO16IS_ACC_GetOutputDataRate+0x130>)
 8006866:	601a      	str	r2, [r3, #0]
      break;
 8006868:	e017      	b.n	800689a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	4a13      	ldr	r2, [pc, #76]	@ (80068bc <LSM6DSO16IS_ACC_GetOutputDataRate+0x134>)
 800686e:	601a      	str	r2, [r3, #0]
      break;
 8006870:	e013      	b.n	800689a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	4a12      	ldr	r2, [pc, #72]	@ (80068c0 <LSM6DSO16IS_ACC_GetOutputDataRate+0x138>)
 8006876:	601a      	str	r2, [r3, #0]
      break;
 8006878:	e00f      	b.n	800689a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *Odr = 1667.0f;
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	4a11      	ldr	r2, [pc, #68]	@ (80068c4 <LSM6DSO16IS_ACC_GetOutputDataRate+0x13c>)
 800687e:	601a      	str	r2, [r3, #0]
      break;
 8006880:	e00b      	b.n	800689a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *Odr = 3333.0f;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	4a10      	ldr	r2, [pc, #64]	@ (80068c8 <LSM6DSO16IS_ACC_GetOutputDataRate+0x140>)
 8006886:	601a      	str	r2, [r3, #0]
      break;
 8006888:	e007      	b.n	800689a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *Odr = 6667.0f;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	4a0f      	ldr	r2, [pc, #60]	@ (80068cc <LSM6DSO16IS_ACC_GetOutputDataRate+0x144>)
 800688e:	601a      	str	r2, [r3, #0]
      break;
 8006890:	e003      	b.n	800689a <LSM6DSO16IS_ACC_GetOutputDataRate+0x112>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006892:	f04f 33ff 	mov.w	r3, #4294967295
 8006896:	60fb      	str	r3, [r7, #12]
      break;
 8006898:	bf00      	nop
  }

  return ret;
 800689a:	68fb      	ldr	r3, [r7, #12]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	3fcccccd 	.word	0x3fcccccd
 80068a8:	41480000 	.word	0x41480000
 80068ac:	41d00000 	.word	0x41d00000
 80068b0:	42500000 	.word	0x42500000
 80068b4:	42d00000 	.word	0x42d00000
 80068b8:	43500000 	.word	0x43500000
 80068bc:	43d00000 	.word	0x43d00000
 80068c0:	44504000 	.word	0x44504000
 80068c4:	44d06000 	.word	0x44d06000
 80068c8:	45505000 	.word	0x45505000
 80068cc:	45d05800 	.word	0x45d05800

080068d0 <LSM6DSO16IS_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d106      	bne.n	80068f4 <LSM6DSO16IS_ACC_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80068e6:	ed97 0a00 	vldr	s0, [r7]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fbc0 	bl	8007070 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	e005      	b.n	8006900 <LSM6DSO16IS_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80068f4:	ed97 0a00 	vldr	s0, [r7]
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fc47 	bl	800718c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>
 80068fe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006900:	68fb      	ldr	r3, [r7, #12]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
	...

0800690c <LSM6DSO16IS_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t *FullScale)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3320      	adds	r3, #32
 800691e:	f107 020b 	add.w	r2, r7, #11
 8006922:	4611      	mov	r1, r2
 8006924:	4618      	mov	r0, r3
 8006926:	f000 febb 	bl	80076a0 <lsm6dso16is_xl_full_scale_get>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <LSM6DSO16IS_ACC_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006930:	f04f 33ff 	mov.w	r3, #4294967295
 8006934:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 8006936:	7afb      	ldrb	r3, [r7, #11]
 8006938:	2b03      	cmp	r3, #3
 800693a:	d81b      	bhi.n	8006974 <LSM6DSO16IS_ACC_GetFullScale+0x68>
 800693c:	a201      	add	r2, pc, #4	@ (adr r2, 8006944 <LSM6DSO16IS_ACC_GetFullScale+0x38>)
 800693e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006942:	bf00      	nop
 8006944:	08006955 	.word	0x08006955
 8006948:	0800696d 	.word	0x0800696d
 800694c:	0800695d 	.word	0x0800695d
 8006950:	08006965 	.word	0x08006965
  {
    case LSM6DSO16IS_2g:
      *FullScale =  2;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2202      	movs	r2, #2
 8006958:	601a      	str	r2, [r3, #0]
      break;
 800695a:	e00f      	b.n	800697c <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_4g:
      *FullScale =  4;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2204      	movs	r2, #4
 8006960:	601a      	str	r2, [r3, #0]
      break;
 8006962:	e00b      	b.n	800697c <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_8g:
      *FullScale =  8;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	2208      	movs	r2, #8
 8006968:	601a      	str	r2, [r3, #0]
      break;
 800696a:	e007      	b.n	800697c <LSM6DSO16IS_ACC_GetFullScale+0x70>

    case LSM6DSO16IS_16g:
      *FullScale = 16;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	2210      	movs	r2, #16
 8006970:	601a      	str	r2, [r3, #0]
      break;
 8006972:	e003      	b.n	800697c <LSM6DSO16IS_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006974:	f04f 33ff 	mov.w	r3, #4294967295
 8006978:	60fb      	str	r3, [r7, #12]
      break;
 800697a:	bf00      	nop
  }

  return ret;
 800697c:	68fb      	ldr	r3, [r7, #12]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop

08006988 <LSM6DSO16IS_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_full_scale_t new_fs;

  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
           : (FullScale <= 4) ? LSM6DSO16IS_4g
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b02      	cmp	r3, #2
 800699a:	dd0b      	ble.n	80069b4 <LSM6DSO16IS_ACC_SetFullScale+0x2c>
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	2b04      	cmp	r3, #4
 80069a0:	dd06      	ble.n	80069b0 <LSM6DSO16IS_ACC_SetFullScale+0x28>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	dc01      	bgt.n	80069ac <LSM6DSO16IS_ACC_SetFullScale+0x24>
 80069a8:	2303      	movs	r3, #3
 80069aa:	e004      	b.n	80069b6 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 80069ac:	2301      	movs	r3, #1
 80069ae:	e002      	b.n	80069b6 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 80069b0:	2302      	movs	r3, #2
 80069b2:	e000      	b.n	80069b6 <LSM6DSO16IS_ACC_SetFullScale+0x2e>
 80069b4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO16IS_2g
 80069b6:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 8) ? LSM6DSO16IS_8g
           :                    LSM6DSO16IS_16g;

  if (lsm6dso16is_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	3320      	adds	r3, #32
 80069bc:	7afa      	ldrb	r2, [r7, #11]
 80069be:	4611      	mov	r1, r2
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 fe47 	bl	8007654 <lsm6dso16is_xl_full_scale_set>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d002      	beq.n	80069d2 <LSM6DSO16IS_ACC_SetFullScale+0x4a>
  {
    ret = LSM6DSO16IS_ERROR;
 80069cc:	f04f 33ff 	mov.w	r3, #4294967295
 80069d0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80069d2:	68fb      	ldr	r3, [r7, #12]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <LSM6DSO16IS_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	3320      	adds	r3, #32
 80069ee:	f107 020c 	add.w	r2, r7, #12
 80069f2:	4611      	mov	r1, r2
 80069f4:	4618      	mov	r0, r3
 80069f6:	f001 f9cf 	bl	8007d98 <lsm6dso16is_acceleration_raw_get>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <LSM6DSO16IS_ACC_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006a00:	f04f 33ff 	mov.w	r3, #4294967295
 8006a04:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 8006a06:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 8006a0e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 8006a16:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	809a      	strh	r2, [r3, #4]

  return ret;
 8006a1e:	697b      	ldr	r3, [r7, #20]
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3718      	adds	r7, #24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <LSM6DSO16IS_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_ACC_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *Acceleration)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 8006a36:	f04f 0300 	mov.w	r3, #0
 8006a3a:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_acceleration_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3320      	adds	r3, #32
 8006a40:	f107 020c 	add.w	r2, r7, #12
 8006a44:	4611      	mov	r1, r2
 8006a46:	4618      	mov	r0, r3
 8006a48:	f001 f9a6 	bl	8007d98 <lsm6dso16is_acceleration_raw_get>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <LSM6DSO16IS_ACC_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8006a52:	f04f 33ff 	mov.w	r3, #4294967295
 8006a56:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 8006a58:	f107 0308 	add.w	r3, r7, #8
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7ff fe4c 	bl	80066fc <LSM6DSO16IS_ACC_GetSensitivity>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d002      	beq.n	8006a70 <LSM6DSO16IS_ACC_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 8006a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a6e:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8006a70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a74:	ee07 3a90 	vmov	s15, r3
 8006a78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a88:	ee17 2a90 	vmov	r2, s15
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8006a90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a94:	ee07 3a90 	vmov	s15, r3
 8006a98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006aa8:	ee17 2a90 	vmov	r2, s15
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 8006ab0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006ab4:	ee07 3a90 	vmov	s15, r3
 8006ab8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006abc:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ac8:	ee17 2a90 	vmov	r2, s15
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	609a      	str	r2, [r3, #8]

  return ret;
 8006ad0:	697b      	ldr	r3, [r7, #20]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3718      	adds	r7, #24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <LSM6DSO16IS_GYRO_Enable>:
  * @brief  Enable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Enable(LSM6DSO16IS_Object_t *pObj)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d102      	bne.n	8006af6 <LSM6DSO16IS_GYRO_Enable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	e013      	b.n	8006b1e <LSM6DSO16IS_GYRO_Enable+0x44>
  }
  else
  {
    /* Output data rate selection. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO16IS_OK)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f103 0220 	add.w	r2, r3, #32
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006b02:	4619      	mov	r1, r3
 8006b04:	4610      	mov	r0, r2
 8006b06:	f000 ffb7 	bl	8007a78 <lsm6dso16is_gy_data_rate_set>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <LSM6DSO16IS_GYRO_Enable+0x3c>
    {
      ret = LSM6DSO16IS_ERROR;
 8006b10:	f04f 33ff 	mov.w	r3, #4294967295
 8006b14:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 1;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <LSM6DSO16IS_GYRO_Disable>:
  * @brief  Disable the LSM6DSO16IS gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_Disable(LSM6DSO16IS_Object_t *pObj)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  int32_t ret = LSM6DSO16IS_OK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d102      	bne.n	8006b44 <LSM6DSO16IS_GYRO_Disable+0x1c>
  {
    ret = LSM6DSO16IS_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	e01e      	b.n	8006b82 <LSM6DSO16IS_GYRO_Disable+0x5a>
  }
  else
  {
    /* Get current output data rate. */
    if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO16IS_OK)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f103 0220 	add.w	r2, r3, #32
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	3334      	adds	r3, #52	@ 0x34
 8006b4e:	4619      	mov	r1, r3
 8006b50:	4610      	mov	r0, r2
 8006b52:	f000 ffd1 	bl	8007af8 <lsm6dso16is_gy_data_rate_get>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d002      	beq.n	8006b62 <LSM6DSO16IS_GYRO_Disable+0x3a>
    {
      ret = LSM6DSO16IS_ERROR;
 8006b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b60:	60fb      	str	r3, [r7, #12]
    }

    /* Output data rate selection - power down. */
    if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), LSM6DSO16IS_GY_ODR_OFF) != LSM6DSO16IS_OK)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	3320      	adds	r3, #32
 8006b66:	2100      	movs	r1, #0
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 ff85 	bl	8007a78 <lsm6dso16is_gy_data_rate_set>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d002      	beq.n	8006b7a <LSM6DSO16IS_GYRO_Disable+0x52>
    {
      ret = LSM6DSO16IS_ERROR;
 8006b74:	f04f 33ff 	mov.w	r3, #4294967295
 8006b78:	60fb      	str	r3, [r7, #12]
    }

    pObj->gyro_is_enabled = 0;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  }

  return ret;
 8006b82:	68fb      	ldr	r3, [r7, #12]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <LSM6DSO16IS_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetSensitivity(LSM6DSO16IS_Object_t *pObj, float_t *Sensitivity)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO16IS_OK)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3320      	adds	r3, #32
 8006b9e:	f107 020b 	add.w	r2, r7, #11
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 ff0b 	bl	80079c0 <lsm6dso16is_gy_full_scale_get>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <LSM6DSO16IS_GYRO_GetSensitivity+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb4:	60fb      	str	r3, [r7, #12]
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006bb6:	7afb      	ldrb	r3, [r7, #11]
 8006bb8:	2b10      	cmp	r3, #16
 8006bba:	d839      	bhi.n	8006c30 <LSM6DSO16IS_GYRO_GetSensitivity+0xa4>
 8006bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8006bc4 <LSM6DSO16IS_GYRO_GetSensitivity+0x38>)
 8006bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc2:	bf00      	nop
 8006bc4:	08006c11 	.word	0x08006c11
 8006bc8:	08006c19 	.word	0x08006c19
 8006bcc:	08006c21 	.word	0x08006c21
 8006bd0:	08006c29 	.word	0x08006c29
 8006bd4:	08006c31 	.word	0x08006c31
 8006bd8:	08006c31 	.word	0x08006c31
 8006bdc:	08006c31 	.word	0x08006c31
 8006be0:	08006c31 	.word	0x08006c31
 8006be4:	08006c31 	.word	0x08006c31
 8006be8:	08006c31 	.word	0x08006c31
 8006bec:	08006c31 	.word	0x08006c31
 8006bf0:	08006c31 	.word	0x08006c31
 8006bf4:	08006c31 	.word	0x08006c31
 8006bf8:	08006c31 	.word	0x08006c31
 8006bfc:	08006c31 	.word	0x08006c31
 8006c00:	08006c31 	.word	0x08006c31
 8006c04:	08006c09 	.word	0x08006c09
  {
    case LSM6DSO16IS_125dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_125DPS;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8006c44 <LSM6DSO16IS_GYRO_GetSensitivity+0xb8>)
 8006c0c:	601a      	str	r2, [r3, #0]
      break;
 8006c0e:	e013      	b.n	8006c38 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_250dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_250DPS;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	4a0d      	ldr	r2, [pc, #52]	@ (8006c48 <LSM6DSO16IS_GYRO_GetSensitivity+0xbc>)
 8006c14:	601a      	str	r2, [r3, #0]
      break;
 8006c16:	e00f      	b.n	8006c38 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_500dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_500DPS;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	4a0c      	ldr	r2, [pc, #48]	@ (8006c4c <LSM6DSO16IS_GYRO_GetSensitivity+0xc0>)
 8006c1c:	601a      	str	r2, [r3, #0]
      break;
 8006c1e:	e00b      	b.n	8006c38 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_1000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_1000DPS;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	4a0b      	ldr	r2, [pc, #44]	@ (8006c50 <LSM6DSO16IS_GYRO_GetSensitivity+0xc4>)
 8006c24:	601a      	str	r2, [r3, #0]
      break;
 8006c26:	e007      	b.n	8006c38 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    case LSM6DSO16IS_2000dps:
      *Sensitivity = LSM6DSO16IS_GYRO_SENSITIVITY_FS_2000DPS;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8006c54 <LSM6DSO16IS_GYRO_GetSensitivity+0xc8>)
 8006c2c:	601a      	str	r2, [r3, #0]
      break;
 8006c2e:	e003      	b.n	8006c38 <LSM6DSO16IS_GYRO_GetSensitivity+0xac>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006c30:	f04f 33ff 	mov.w	r3, #4294967295
 8006c34:	60fb      	str	r3, [r7, #12]
      break;
 8006c36:	bf00      	nop
  }

  return ret;
 8006c38:	68fb      	ldr	r3, [r7, #12]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	408c0000 	.word	0x408c0000
 8006c48:	410c0000 	.word	0x410c0000
 8006c4c:	418c0000 	.word	0x418c0000
 8006c50:	420c0000 	.word	0x420c0000
 8006c54:	428c0000 	.word	0x428c0000

08006c58 <LSM6DSO16IS_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t *Odr)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso16is_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO16IS_OK)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	3320      	adds	r3, #32
 8006c6a:	f107 020b 	add.w	r2, r7, #11
 8006c6e:	4611      	mov	r1, r2
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 ff41 	bl	8007af8 <lsm6dso16is_gy_data_rate_get>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c80:	60fb      	str	r3, [r7, #12]
  }

  switch (odr_low_level)
 8006c82:	7afb      	ldrb	r3, [r7, #11]
 8006c84:	2b1a      	cmp	r3, #26
 8006c86:	d866      	bhi.n	8006d56 <LSM6DSO16IS_GYRO_GetOutputDataRate+0xfe>
 8006c88:	a201      	add	r2, pc, #4	@ (adr r2, 8006c90 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x38>)
 8006c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8e:	bf00      	nop
 8006c90:	08006cfd 	.word	0x08006cfd
 8006c94:	08006d07 	.word	0x08006d07
 8006c98:	08006d0f 	.word	0x08006d0f
 8006c9c:	08006d17 	.word	0x08006d17
 8006ca0:	08006d1f 	.word	0x08006d1f
 8006ca4:	08006d27 	.word	0x08006d27
 8006ca8:	08006d2f 	.word	0x08006d2f
 8006cac:	08006d37 	.word	0x08006d37
 8006cb0:	08006d3f 	.word	0x08006d3f
 8006cb4:	08006d47 	.word	0x08006d47
 8006cb8:	08006d4f 	.word	0x08006d4f
 8006cbc:	08006d57 	.word	0x08006d57
 8006cc0:	08006d57 	.word	0x08006d57
 8006cc4:	08006d57 	.word	0x08006d57
 8006cc8:	08006d57 	.word	0x08006d57
 8006ccc:	08006d57 	.word	0x08006d57
 8006cd0:	08006d57 	.word	0x08006d57
 8006cd4:	08006d07 	.word	0x08006d07
 8006cd8:	08006d0f 	.word	0x08006d0f
 8006cdc:	08006d17 	.word	0x08006d17
 8006ce0:	08006d1f 	.word	0x08006d1f
 8006ce4:	08006d27 	.word	0x08006d27
 8006ce8:	08006d2f 	.word	0x08006d2f
 8006cec:	08006d37 	.word	0x08006d37
 8006cf0:	08006d3f 	.word	0x08006d3f
 8006cf4:	08006d47 	.word	0x08006d47
 8006cf8:	08006d4f 	.word	0x08006d4f
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *Odr = 0.0f;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	601a      	str	r2, [r3, #0]
      break;
 8006d04:	e02b      	b.n	8006d5e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *Odr = 12.5f;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	4a17      	ldr	r2, [pc, #92]	@ (8006d68 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x110>)
 8006d0a:	601a      	str	r2, [r3, #0]
      break;
 8006d0c:	e027      	b.n	8006d5e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *Odr = 26.0f;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	4a16      	ldr	r2, [pc, #88]	@ (8006d6c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x114>)
 8006d12:	601a      	str	r2, [r3, #0]
      break;
 8006d14:	e023      	b.n	8006d5e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *Odr = 52.0f;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	4a15      	ldr	r2, [pc, #84]	@ (8006d70 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x118>)
 8006d1a:	601a      	str	r2, [r3, #0]
      break;
 8006d1c:	e01f      	b.n	8006d5e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *Odr = 104.0f;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	4a14      	ldr	r2, [pc, #80]	@ (8006d74 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x11c>)
 8006d22:	601a      	str	r2, [r3, #0]
      break;
 8006d24:	e01b      	b.n	8006d5e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *Odr = 208.0f;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	4a13      	ldr	r2, [pc, #76]	@ (8006d78 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x120>)
 8006d2a:	601a      	str	r2, [r3, #0]
      break;
 8006d2c:	e017      	b.n	8006d5e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *Odr = 416.0f;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	4a12      	ldr	r2, [pc, #72]	@ (8006d7c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x124>)
 8006d32:	601a      	str	r2, [r3, #0]
      break;
 8006d34:	e013      	b.n	8006d5e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *Odr = 833.0f;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	4a11      	ldr	r2, [pc, #68]	@ (8006d80 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x128>)
 8006d3a:	601a      	str	r2, [r3, #0]
      break;
 8006d3c:	e00f      	b.n	8006d5e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *Odr =  1667.0f;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	4a10      	ldr	r2, [pc, #64]	@ (8006d84 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x12c>)
 8006d42:	601a      	str	r2, [r3, #0]
      break;
 8006d44:	e00b      	b.n	8006d5e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *Odr =  3333.0f;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	4a0f      	ldr	r2, [pc, #60]	@ (8006d88 <LSM6DSO16IS_GYRO_GetOutputDataRate+0x130>)
 8006d4a:	601a      	str	r2, [r3, #0]
      break;
 8006d4c:	e007      	b.n	8006d5e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *Odr =  6667.0f;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	4a0e      	ldr	r2, [pc, #56]	@ (8006d8c <LSM6DSO16IS_GYRO_GetOutputDataRate+0x134>)
 8006d52:	601a      	str	r2, [r3, #0]
      break;
 8006d54:	e003      	b.n	8006d5e <LSM6DSO16IS_GYRO_GetOutputDataRate+0x106>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006d56:	f04f 33ff 	mov.w	r3, #4294967295
 8006d5a:	60fb      	str	r3, [r7, #12]
      break;
 8006d5c:	bf00      	nop
  }

  return ret;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	41480000 	.word	0x41480000
 8006d6c:	41d00000 	.word	0x41d00000
 8006d70:	42500000 	.word	0x42500000
 8006d74:	42d00000 	.word	0x42d00000
 8006d78:	43500000 	.word	0x43500000
 8006d7c:	43d00000 	.word	0x43d00000
 8006d80:	44504000 	.word	0x44504000
 8006d84:	44d06000 	.word	0x44d06000
 8006d88:	45505000 	.word	0x45505000
 8006d8c:	45d05800 	.word	0x45d05800

08006d90 <LSM6DSO16IS_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetOutputDataRate(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret;

  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d106      	bne.n	8006db4 <LSM6DSO16IS_GYRO_SetOutputDataRate+0x24>
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8006da6:	ed97 0a00 	vldr	s0, [r7]
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fa70 	bl	8007290 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	e005      	b.n	8006dc0 <LSM6DSO16IS_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    ret = LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8006db4:	ed97 0a00 	vldr	s0, [r7]
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 faf7 	bl	80073ac <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>
 8006dbe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
	...

08006dcc <LSM6DSO16IS_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t  *FullScale)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso16is_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO16IS_OK)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	3320      	adds	r3, #32
 8006dde:	f107 020b 	add.w	r2, r7, #11
 8006de2:	4611      	mov	r1, r2
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fdeb 	bl	80079c0 <lsm6dso16is_gy_full_scale_get>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <LSM6DSO16IS_GYRO_GetFullScale+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006df0:	f04f 33ff 	mov.w	r3, #4294967295
 8006df4:	60fb      	str	r3, [r7, #12]
  }

  switch (fs_low_level)
 8006df6:	7afb      	ldrb	r3, [r7, #11]
 8006df8:	2b10      	cmp	r3, #16
 8006dfa:	d83c      	bhi.n	8006e76 <LSM6DSO16IS_GYRO_GetFullScale+0xaa>
 8006dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8006e04 <LSM6DSO16IS_GYRO_GetFullScale+0x38>)
 8006dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e02:	bf00      	nop
 8006e04:	08006e51 	.word	0x08006e51
 8006e08:	08006e59 	.word	0x08006e59
 8006e0c:	08006e63 	.word	0x08006e63
 8006e10:	08006e6d 	.word	0x08006e6d
 8006e14:	08006e77 	.word	0x08006e77
 8006e18:	08006e77 	.word	0x08006e77
 8006e1c:	08006e77 	.word	0x08006e77
 8006e20:	08006e77 	.word	0x08006e77
 8006e24:	08006e77 	.word	0x08006e77
 8006e28:	08006e77 	.word	0x08006e77
 8006e2c:	08006e77 	.word	0x08006e77
 8006e30:	08006e77 	.word	0x08006e77
 8006e34:	08006e77 	.word	0x08006e77
 8006e38:	08006e77 	.word	0x08006e77
 8006e3c:	08006e77 	.word	0x08006e77
 8006e40:	08006e77 	.word	0x08006e77
 8006e44:	08006e49 	.word	0x08006e49
  {
    case LSM6DSO16IS_125dps:
      *FullScale =  125;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	227d      	movs	r2, #125	@ 0x7d
 8006e4c:	601a      	str	r2, [r3, #0]
      break;
 8006e4e:	e016      	b.n	8006e7e <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_250dps:
      *FullScale =  250;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	22fa      	movs	r2, #250	@ 0xfa
 8006e54:	601a      	str	r2, [r3, #0]
      break;
 8006e56:	e012      	b.n	8006e7e <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_500dps:
      *FullScale =  500;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8006e5e:	601a      	str	r2, [r3, #0]
      break;
 8006e60:	e00d      	b.n	8006e7e <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_1000dps:
      *FullScale = 1000;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006e68:	601a      	str	r2, [r3, #0]
      break;
 8006e6a:	e008      	b.n	8006e7e <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    case LSM6DSO16IS_2000dps:
      *FullScale = 2000;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006e72:	601a      	str	r2, [r3, #0]
      break;
 8006e74:	e003      	b.n	8006e7e <LSM6DSO16IS_GYRO_GetFullScale+0xb2>

    default:
      ret = LSM6DSO16IS_ERROR;
 8006e76:	f04f 33ff 	mov.w	r3, #4294967295
 8006e7a:	60fb      	str	r3, [r7, #12]
      break;
 8006e7c:	bf00      	nop
  }

  return ret;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <LSM6DSO16IS_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_SetFullScale(LSM6DSO16IS_Object_t *pObj, int32_t FullScale)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
           : (FullScale <= 250)  ? LSM6DSO16IS_250dps
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b7d      	cmp	r3, #125	@ 0x7d
 8006e9a:	dd12      	ble.n	8006ec2 <LSM6DSO16IS_GYRO_SetFullScale+0x3a>
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2bfa      	cmp	r3, #250	@ 0xfa
 8006ea0:	dd0d      	ble.n	8006ebe <LSM6DSO16IS_GYRO_SetFullScale+0x36>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006ea8:	dd07      	ble.n	8006eba <LSM6DSO16IS_GYRO_SetFullScale+0x32>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006eb0:	dc01      	bgt.n	8006eb6 <LSM6DSO16IS_GYRO_SetFullScale+0x2e>
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	e006      	b.n	8006ec4 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e004      	b.n	8006ec4 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e002      	b.n	8006ec4 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	e000      	b.n	8006ec4 <LSM6DSO16IS_GYRO_SetFullScale+0x3c>
 8006ec2:	2310      	movs	r3, #16
  new_fs = (FullScale <= 125)  ? LSM6DSO16IS_125dps
 8006ec4:	72fb      	strb	r3, [r7, #11]
           : (FullScale <= 500)  ? LSM6DSO16IS_500dps
           : (FullScale <= 1000) ? LSM6DSO16IS_1000dps
           :                       LSM6DSO16IS_2000dps;

  if (lsm6dso16is_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO16IS_OK)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	3320      	adds	r3, #32
 8006eca:	7afa      	ldrb	r2, [r7, #11]
 8006ecc:	4611      	mov	r1, r2
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 fd46 	bl	8007960 <lsm6dso16is_gy_full_scale_set>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <LSM6DSO16IS_GYRO_SetFullScale+0x58>
  {
    ret = LSM6DSO16IS_ERROR;
 8006eda:	f04f 33ff 	mov.w	r3, #4294967295
 8006ede:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <LSM6DSO16IS_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxesRaw(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_AxesRaw_t *Value)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b086      	sub	sp, #24
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3320      	adds	r3, #32
 8006efc:	f107 020c 	add.w	r2, r7, #12
 8006f00:	4611      	mov	r1, r2
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 ff00 	bl	8007d08 <lsm6dso16is_angular_rate_raw_get>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d002      	beq.n	8006f14 <LSM6DSO16IS_GYRO_GetAxesRaw+0x2a>
  {
    ret = LSM6DSO16IS_ERROR;
 8006f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f12:	617b      	str	r3, [r7, #20]
  }

  /* Format the data. */
  Value->x = data_raw[0];
 8006f14:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw[1];
 8006f1c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw[2];
 8006f24:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	809a      	strh	r2, [r3, #4]

  return ret;
 8006f2c:	697b      	ldr	r3, [r7, #20]
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <LSM6DSO16IS_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_GYRO_GetAxes(LSM6DSO16IS_Object_t *pObj, LSM6DSO16IS_Axes_t *AngularRate)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b086      	sub	sp, #24
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO16IS_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	617b      	str	r3, [r7, #20]
  int16_t data_raw[3];
  float_t sensitivity = 0.0f;
 8006f44:	f04f 0300 	mov.w	r3, #0
 8006f48:	60bb      	str	r3, [r7, #8]

  /* Read raw data values. */
  if (lsm6dso16is_angular_rate_raw_get(&(pObj->Ctx), data_raw) != LSM6DSO16IS_OK)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	3320      	adds	r3, #32
 8006f4e:	f107 020c 	add.w	r2, r7, #12
 8006f52:	4611      	mov	r1, r2
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 fed7 	bl	8007d08 <lsm6dso16is_angular_rate_raw_get>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <LSM6DSO16IS_GYRO_GetAxes+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8006f60:	f04f 33ff 	mov.w	r3, #4294967295
 8006f64:	617b      	str	r3, [r7, #20]
  }

  /* Get LSM6DSO16IS actual sensitivity. */
  if (LSM6DSO16IS_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO16IS_OK)
 8006f66:	f107 0308 	add.w	r3, r7, #8
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f7ff fe0d 	bl	8006b8c <LSM6DSO16IS_GYRO_GetSensitivity>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d002      	beq.n	8006f7e <LSM6DSO16IS_GYRO_GetAxes+0x48>
  {
    ret = LSM6DSO16IS_ERROR;
 8006f78:	f04f 33ff 	mov.w	r3, #4294967295
 8006f7c:	617b      	str	r3, [r7, #20]
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw[0] * sensitivity));
 8006f7e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006f82:	ee07 3a90 	vmov	s15, r3
 8006f86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f96:	ee17 2a90 	vmov	r2, s15
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw[1] * sensitivity));
 8006f9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006faa:	edd7 7a02 	vldr	s15, [r7, #8]
 8006fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fb6:	ee17 2a90 	vmov	r2, s15
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw[2] * sensitivity));
 8006fbe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006fc2:	ee07 3a90 	vmov	s15, r3
 8006fc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fca:	edd7 7a02 	vldr	s15, [r7, #8]
 8006fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fd6:	ee17 2a90 	vmov	r2, s15
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	609a      	str	r2, [r3, #8]

  return ret;
 8006fde:	697b      	ldr	r3, [r7, #20]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <LSM6DSO16IS_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Write_Reg(LSM6DSO16IS_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	70fb      	strb	r3, [r7, #3]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	70bb      	strb	r3, [r7, #2]
  int32_t ret = LSM6DSO16IS_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60fb      	str	r3, [r7, #12]

  if (lsm6dso16is_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO16IS_OK)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f103 0020 	add.w	r0, r3, #32
 8007002:	1cba      	adds	r2, r7, #2
 8007004:	78f9      	ldrb	r1, [r7, #3]
 8007006:	2301      	movs	r3, #1
 8007008:	f000 faa6 	bl	8007558 <lsm6dso16is_write_reg>
 800700c:	4603      	mov	r3, r0
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <LSM6DSO16IS_Write_Reg+0x30>
  {
    ret = LSM6DSO16IS_ERROR;
 8007012:	f04f 33ff 	mov.w	r3, #4294967295
 8007016:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007018:	68fb      	ldr	r3, [r7, #12]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <LSM6DSO16IS_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSO16IS_MAIN_MEM_BANK, 2 - LSM6DSO16IS_SENSOR_HUB_MEM_BANK, 3 - LSM6DSO16IS_ISPU_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO16IS_Set_Mem_Bank(LSM6DSO16IS_Object_t *pObj, uint8_t Val)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b084      	sub	sp, #16
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	460b      	mov	r3, r1
 800702c:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSO16IS_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_mem_bank_t reg;

  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
        : (Val == 3U) ? LSM6DSO16IS_ISPU_MEM_BANK
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	2b02      	cmp	r3, #2
 8007036:	d006      	beq.n	8007046 <LSM6DSO16IS_Set_Mem_Bank+0x24>
 8007038:	78fb      	ldrb	r3, [r7, #3]
 800703a:	2b03      	cmp	r3, #3
 800703c:	d101      	bne.n	8007042 <LSM6DSO16IS_Set_Mem_Bank+0x20>
 800703e:	2303      	movs	r3, #3
 8007040:	e002      	b.n	8007048 <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8007042:	2300      	movs	r3, #0
 8007044:	e000      	b.n	8007048 <LSM6DSO16IS_Set_Mem_Bank+0x26>
 8007046:	2302      	movs	r3, #2
  reg = (Val == 2U) ? LSM6DSO16IS_SENSOR_HUB_MEM_BANK
 8007048:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSO16IS_MAIN_MEM_BANK;

  if (lsm6dso16is_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSO16IS_OK)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	3320      	adds	r3, #32
 800704e:	7afa      	ldrb	r2, [r7, #11]
 8007050:	4611      	mov	r1, r2
 8007052:	4618      	mov	r0, r3
 8007054:	f000 fa9e 	bl	8007594 <lsm6dso16is_mem_bank_set>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <LSM6DSO16IS_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSO16IS_ERROR;
 800705e:	f04f 33ff 	mov.w	r3, #4294967295
 8007062:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007064:	68fb      	ldr	r3, [r7, #12]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
	...

08007070 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_xl_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 8007080:	edd7 7a00 	vldr	s15, [r7]
 8007084:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8007088:	eef4 7ac7 	vcmpe.f32	s15, s14
 800708c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007090:	d801      	bhi.n	8007096 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x26>
 8007092:	2301      	movs	r3, #1
 8007094:	e058      	b.n	8007148 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007096:	edd7 7a00 	vldr	s15, [r7]
 800709a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800709e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a6:	d801      	bhi.n	80070ac <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x3c>
 80070a8:	2302      	movs	r3, #2
 80070aa:	e04d      	b.n	8007148 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80070ac:	edd7 7a00 	vldr	s15, [r7]
 80070b0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8007170 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x100>
 80070b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070bc:	d801      	bhi.n	80070c2 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x52>
 80070be:	2303      	movs	r3, #3
 80070c0:	e042      	b.n	8007148 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80070c2:	edd7 7a00 	vldr	s15, [r7]
 80070c6:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8007174 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x104>
 80070ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070d2:	d801      	bhi.n	80070d8 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x68>
 80070d4:	2304      	movs	r3, #4
 80070d6:	e037      	b.n	8007148 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80070d8:	edd7 7a00 	vldr	s15, [r7]
 80070dc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007178 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x108>
 80070e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070e8:	d801      	bhi.n	80070ee <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x7e>
 80070ea:	2305      	movs	r3, #5
 80070ec:	e02c      	b.n	8007148 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 80070ee:	edd7 7a00 	vldr	s15, [r7]
 80070f2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800717c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x10c>
 80070f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070fe:	d801      	bhi.n	8007104 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x94>
 8007100:	2306      	movs	r3, #6
 8007102:	e021      	b.n	8007148 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007104:	edd7 7a00 	vldr	s15, [r7]
 8007108:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8007180 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x110>
 800710c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007114:	d801      	bhi.n	800711a <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xaa>
 8007116:	2307      	movs	r3, #7
 8007118:	e016      	b.n	8007148 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 800711a:	edd7 7a00 	vldr	s15, [r7]
 800711e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007184 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x114>
 8007122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800712a:	d801      	bhi.n	8007130 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xc0>
 800712c:	2308      	movs	r3, #8
 800712e:	e00b      	b.n	8007148 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007130:	edd7 7a00 	vldr	s15, [r7]
 8007134:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007188 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0x118>
 8007138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800713c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007140:	d801      	bhi.n	8007146 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd6>
 8007142:	2309      	movs	r3, #9
 8007144:	e000      	b.n	8007148 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xd8>
 8007146:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 8007148:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3320      	adds	r3, #32
 800714e:	7afa      	ldrb	r2, [r7, #11]
 8007150:	4611      	mov	r1, r2
 8007152:	4618      	mov	r0, r3
 8007154:	f000 fadc 	bl	8007710 <lsm6dso16is_xl_data_rate_set>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d002      	beq.n	8007164 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 800715e:	f04f 33ff 	mov.w	r3, #4294967295
 8007162:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007164:	68fb      	ldr	r3, [r7, #12]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	42500000 	.word	0x42500000
 8007174:	42d00000 	.word	0x42d00000
 8007178:	43500000 	.word	0x43500000
 800717c:	43d00000 	.word	0x43d00000
 8007180:	44504000 	.word	0x44504000
 8007184:	44d06000 	.word	0x44d06000
 8007188:	45505000 	.word	0x45505000

0800718c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
                  : (Odr <=   26.0f) ? LSM6DSO16IS_XL_ODR_AT_26H_HP
 8007198:	edd7 7a00 	vldr	s15, [r7]
 800719c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80071a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a8:	d801      	bhi.n	80071ae <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x22>
 80071aa:	2301      	movs	r3, #1
 80071ac:	e058      	b.n	8007260 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80071ae:	edd7 7a00 	vldr	s15, [r7]
 80071b2:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80071b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071be:	d801      	bhi.n	80071c4 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x38>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e04d      	b.n	8007260 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80071c4:	edd7 7a00 	vldr	s15, [r7]
 80071c8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8007274 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80071cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d4:	d801      	bhi.n	80071da <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80071d6:	2303      	movs	r3, #3
 80071d8:	e042      	b.n	8007260 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80071da:	edd7 7a00 	vldr	s15, [r7]
 80071de:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007278 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xec>
 80071e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ea:	d801      	bhi.n	80071f0 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x64>
 80071ec:	2304      	movs	r3, #4
 80071ee:	e037      	b.n	8007260 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80071f0:	edd7 7a00 	vldr	s15, [r7]
 80071f4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800727c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf0>
 80071f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007200:	d801      	bhi.n	8007206 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8007202:	2305      	movs	r3, #5
 8007204:	e02c      	b.n	8007260 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007206:	edd7 7a00 	vldr	s15, [r7]
 800720a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8007280 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf4>
 800720e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007216:	d801      	bhi.n	800721c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x90>
 8007218:	2306      	movs	r3, #6
 800721a:	e021      	b.n	8007260 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800721c:	edd7 7a00 	vldr	s15, [r7]
 8007220:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8007284 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8007224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800722c:	d801      	bhi.n	8007232 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xa6>
 800722e:	2307      	movs	r3, #7
 8007230:	e016      	b.n	8007260 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007232:	edd7 7a00 	vldr	s15, [r7]
 8007236:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007288 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800723a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800723e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007242:	d801      	bhi.n	8007248 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8007244:	2308      	movs	r3, #8
 8007246:	e00b      	b.n	8007260 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8007248:	edd7 7a00 	vldr	s15, [r7]
 800724c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800728c <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007258:	d801      	bhi.n	800725e <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800725a:	2309      	movs	r3, #9
 800725c:	e000      	b.n	8007260 <LSM6DSO16IS_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800725e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSO16IS_XL_ODR_AT_12Hz5_HP
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO16IS_XL_ODR_AT_833Hz_HP
                  : (Odr <= 1667.0f) ? LSM6DSO16IS_XL_ODR_AT_1667Hz_HP
                  : (Odr <= 3333.0f) ? LSM6DSO16IS_XL_ODR_AT_3333Hz_HP
                  :                    LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	42500000 	.word	0x42500000
 8007278:	42d00000 	.word	0x42d00000
 800727c:	43500000 	.word	0x43500000
 8007280:	43d00000 	.word	0x43d00000
 8007284:	44504000 	.word	0x44504000
 8007288:	44d06000 	.word	0x44d06000
 800728c:	45505000 	.word	0x45505000

08007290 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	ed87 0a00 	vstr	s0, [r7]
  int32_t ret = LSM6DSO16IS_OK;
 800729c:	2300      	movs	r3, #0
 800729e:	60fb      	str	r3, [r7, #12]
  lsm6dso16is_gy_data_rate_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
            : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 80072a0:	edd7 7a00 	vldr	s15, [r7]
 80072a4:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80072a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b0:	d801      	bhi.n	80072b6 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x26>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e058      	b.n	8007368 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80072b6:	edd7 7a00 	vldr	s15, [r7]
 80072ba:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80072be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c6:	d801      	bhi.n	80072cc <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x3c>
 80072c8:	2302      	movs	r3, #2
 80072ca:	e04d      	b.n	8007368 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80072cc:	edd7 7a00 	vldr	s15, [r7]
 80072d0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8007390 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80072d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072dc:	d801      	bhi.n	80072e2 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x52>
 80072de:	2303      	movs	r3, #3
 80072e0:	e042      	b.n	8007368 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80072e2:	edd7 7a00 	vldr	s15, [r7]
 80072e6:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8007394 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80072ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f2:	d801      	bhi.n	80072f8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x68>
 80072f4:	2304      	movs	r3, #4
 80072f6:	e037      	b.n	8007368 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 80072f8:	edd7 7a00 	vldr	s15, [r7]
 80072fc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007398 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8007300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007308:	d801      	bhi.n	800730e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x7e>
 800730a:	2305      	movs	r3, #5
 800730c:	e02c      	b.n	8007368 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800730e:	edd7 7a00 	vldr	s15, [r7]
 8007312:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800739c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8007316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800731a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800731e:	d801      	bhi.n	8007324 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x94>
 8007320:	2306      	movs	r3, #6
 8007322:	e021      	b.n	8007368 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007324:	edd7 7a00 	vldr	s15, [r7]
 8007328:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80073a0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800732c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007334:	d801      	bhi.n	800733a <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xaa>
 8007336:	2307      	movs	r3, #7
 8007338:	e016      	b.n	8007368 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 800733a:	edd7 7a00 	vldr	s15, [r7]
 800733e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80073a4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8007342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800734a:	d801      	bhi.n	8007350 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xc0>
 800734c:	2308      	movs	r3, #8
 800734e:	e00b      	b.n	8007368 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007350:	edd7 7a00 	vldr	s15, [r7]
 8007354:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80073a8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0x118>
 8007358:	eef4 7ac7 	vcmpe.f32	s15, s14
 800735c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007360:	d801      	bhi.n	8007366 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd6>
 8007362:	2309      	movs	r3, #9
 8007364:	e000      	b.n	8007368 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xd8>
 8007366:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 8007368:	72fb      	strb	r3, [r7, #11]
            : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
            : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
            :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  /* Output data rate selection. */
  if (lsm6dso16is_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO16IS_OK)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	3320      	adds	r3, #32
 800736e:	7afa      	ldrb	r2, [r7, #11]
 8007370:	4611      	mov	r1, r2
 8007372:	4618      	mov	r0, r3
 8007374:	f000 fb80 	bl	8007a78 <lsm6dso16is_gy_data_rate_set>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d002      	beq.n	8007384 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Enabled+0xf4>
  {
    ret = LSM6DSO16IS_ERROR;
 800737e:	f04f 33ff 	mov.w	r3, #4294967295
 8007382:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007384:	68fb      	ldr	r3, [r7, #12]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	42500000 	.word	0x42500000
 8007394:	42d00000 	.word	0x42d00000
 8007398:	43500000 	.word	0x43500000
 800739c:	43d00000 	.word	0x43d00000
 80073a0:	44504000 	.word	0x44504000
 80073a4:	44d06000 	.word	0x44d06000
 80073a8:	45505000 	.word	0x45505000

080073ac <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO16IS_Object_t *pObj, float_t Odr)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
                   : (Odr <=   26.0f) ? LSM6DSO16IS_GY_ODR_AT_26H_HP
 80073b8:	edd7 7a00 	vldr	s15, [r7]
 80073bc:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80073c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073c8:	d801      	bhi.n	80073ce <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80073ca:	2301      	movs	r3, #1
 80073cc:	e058      	b.n	8007480 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80073ce:	edd7 7a00 	vldr	s15, [r7]
 80073d2:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80073d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073de:	d801      	bhi.n	80073e4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80073e0:	2302      	movs	r3, #2
 80073e2:	e04d      	b.n	8007480 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80073e4:	edd7 7a00 	vldr	s15, [r7]
 80073e8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8007494 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80073ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f4:	d801      	bhi.n	80073fa <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80073f6:	2303      	movs	r3, #3
 80073f8:	e042      	b.n	8007480 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80073fa:	edd7 7a00 	vldr	s15, [r7]
 80073fe:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007498 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8007402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800740a:	d801      	bhi.n	8007410 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x64>
 800740c:	2304      	movs	r3, #4
 800740e:	e037      	b.n	8007480 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007410:	edd7 7a00 	vldr	s15, [r7]
 8007414:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800749c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8007418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800741c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007420:	d801      	bhi.n	8007426 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8007422:	2305      	movs	r3, #5
 8007424:	e02c      	b.n	8007480 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007426:	edd7 7a00 	vldr	s15, [r7]
 800742a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80074a0 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800742e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007436:	d801      	bhi.n	800743c <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8007438:	2306      	movs	r3, #6
 800743a:	e021      	b.n	8007480 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800743c:	edd7 7a00 	vldr	s15, [r7]
 8007440:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80074a4 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8007444:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800744c:	d801      	bhi.n	8007452 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800744e:	2307      	movs	r3, #7
 8007450:	e016      	b.n	8007480 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007452:	edd7 7a00 	vldr	s15, [r7]
 8007456:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80074a8 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800745a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800745e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007462:	d801      	bhi.n	8007468 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8007464:	2308      	movs	r3, #8
 8007466:	e00b      	b.n	8007480 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007468:	edd7 7a00 	vldr	s15, [r7]
 800746c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80074ac <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8007470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007478:	d801      	bhi.n	800747e <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800747a:	2309      	movs	r3, #9
 800747c:	e000      	b.n	8007480 <LSM6DSO16IS_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800747e:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO16IS_GY_ODR_AT_12Hz5_HP
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO16IS_GY_ODR_AT_833Hz_HP
                   : (Odr <= 1667.0f) ? LSM6DSO16IS_GY_ODR_AT_1667Hz_HP
                   : (Odr <= 3333.0f) ? LSM6DSO16IS_GY_ODR_AT_3333Hz_HP
                   :                    LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;

  return LSM6DSO16IS_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	42500000 	.word	0x42500000
 8007498:	42d00000 	.word	0x42d00000
 800749c:	43500000 	.word	0x43500000
 80074a0:	43d00000 	.word	0x43d00000
 80074a4:	44504000 	.word	0x44504000
 80074a8:	44d06000 	.word	0x44d06000
 80074ac:	45505000 	.word	0x45505000

080074b0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80074b0:	b590      	push	{r4, r7, lr}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	607a      	str	r2, [r7, #4]
 80074ba:	461a      	mov	r2, r3
 80074bc:	460b      	mov	r3, r1
 80074be:	72fb      	strb	r3, [r7, #11]
 80074c0:	4613      	mov	r3, r2
 80074c2:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	695c      	ldr	r4, [r3, #20]
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	7b1b      	ldrb	r3, [r3, #12]
 80074d0:	4618      	mov	r0, r3
 80074d2:	7afb      	ldrb	r3, [r7, #11]
 80074d4:	b299      	uxth	r1, r3
 80074d6:	893b      	ldrh	r3, [r7, #8]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	47a0      	blx	r4
 80074dc:	4603      	mov	r3, r0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	371c      	adds	r7, #28
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd90      	pop	{r4, r7, pc}

080074e6 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80074e6:	b590      	push	{r4, r7, lr}
 80074e8:	b087      	sub	sp, #28
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	461a      	mov	r2, r3
 80074f2:	460b      	mov	r3, r1
 80074f4:	72fb      	strb	r3, [r7, #11]
 80074f6:	4613      	mov	r3, r2
 80074f8:	813b      	strh	r3, [r7, #8]
  LSM6DSO16IS_Object_t *pObj = (LSM6DSO16IS_Object_t *)Handle;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	691c      	ldr	r4, [r3, #16]
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	7b1b      	ldrb	r3, [r3, #12]
 8007506:	4618      	mov	r0, r3
 8007508:	7afb      	ldrb	r3, [r7, #11]
 800750a:	b299      	uxth	r1, r3
 800750c:	893b      	ldrh	r3, [r7, #8]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	47a0      	blx	r4
 8007512:	4603      	mov	r3, r0
}
 8007514:	4618      	mov	r0, r3
 8007516:	371c      	adds	r7, #28
 8007518:	46bd      	mov	sp, r7
 800751a:	bd90      	pop	{r4, r7, pc}

0800751c <lsm6dso16is_read_reg>:
  *
  */
int32_t __weak lsm6dso16is_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 800751c:	b590      	push	{r4, r7, lr}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	607a      	str	r2, [r7, #4]
 8007526:	461a      	mov	r2, r3
 8007528:	460b      	mov	r3, r1
 800752a:	72fb      	strb	r3, [r7, #11]
 800752c:	4613      	mov	r3, r2
 800752e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d102      	bne.n	800753c <lsm6dso16is_read_reg+0x20>
  {
    return -1;
 8007536:	f04f 33ff 	mov.w	r3, #4294967295
 800753a:	e009      	b.n	8007550 <lsm6dso16is_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	685c      	ldr	r4, [r3, #4]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	68d8      	ldr	r0, [r3, #12]
 8007544:	893b      	ldrh	r3, [r7, #8]
 8007546:	7af9      	ldrb	r1, [r7, #11]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	47a0      	blx	r4
 800754c:	6178      	str	r0, [r7, #20]

  return ret;
 800754e:	697b      	ldr	r3, [r7, #20]
}
 8007550:	4618      	mov	r0, r3
 8007552:	371c      	adds	r7, #28
 8007554:	46bd      	mov	sp, r7
 8007556:	bd90      	pop	{r4, r7, pc}

08007558 <lsm6dso16is_write_reg>:
  *
  */
int32_t __weak lsm6dso16is_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                     uint8_t *data,
                                     uint16_t len)
{
 8007558:	b590      	push	{r4, r7, lr}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	607a      	str	r2, [r7, #4]
 8007562:	461a      	mov	r2, r3
 8007564:	460b      	mov	r3, r1
 8007566:	72fb      	strb	r3, [r7, #11]
 8007568:	4613      	mov	r3, r2
 800756a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d102      	bne.n	8007578 <lsm6dso16is_write_reg+0x20>
  {
    return -1;
 8007572:	f04f 33ff 	mov.w	r3, #4294967295
 8007576:	e009      	b.n	800758c <lsm6dso16is_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681c      	ldr	r4, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	68d8      	ldr	r0, [r3, #12]
 8007580:	893b      	ldrh	r3, [r7, #8]
 8007582:	7af9      	ldrb	r1, [r7, #11]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	47a0      	blx	r4
 8007588:	6178      	str	r0, [r7, #20]

  return ret;
 800758a:	697b      	ldr	r3, [r7, #20]
}
 800758c:	4618      	mov	r0, r3
 800758e:	371c      	adds	r7, #28
 8007590:	46bd      	mov	sp, r7
 8007592:	bd90      	pop	{r4, r7, pc}

08007594 <lsm6dso16is_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, ISPU_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dso16is_mem_bank_t val)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_func_cfg_access_t func_cfg_access = {0x0};
 80075a0:	2300      	movs	r3, #0
 80075a2:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /* no need to read it first as the only other field is a ispu reset bit */
  func_cfg_access.shub_reg_access = (val == LSM6DSO16IS_SENSOR_HUB_MEM_BANK) ? 0x1U : 0x0U;
 80075a4:	78fb      	ldrb	r3, [r7, #3]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d101      	bne.n	80075ae <lsm6dso16is_mem_bank_set+0x1a>
 80075aa:	2201      	movs	r2, #1
 80075ac:	e000      	b.n	80075b0 <lsm6dso16is_mem_bank_set+0x1c>
 80075ae:	2200      	movs	r2, #0
 80075b0:	7a3b      	ldrb	r3, [r7, #8]
 80075b2:	f362 1386 	bfi	r3, r2, #6, #1
 80075b6:	723b      	strb	r3, [r7, #8]
  func_cfg_access.ispu_reg_access = (val == LSM6DSO16IS_ISPU_MEM_BANK) ? 0x1U : 0x0U;
 80075b8:	78fb      	ldrb	r3, [r7, #3]
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d101      	bne.n	80075c2 <lsm6dso16is_mem_bank_set+0x2e>
 80075be:	2201      	movs	r2, #1
 80075c0:	e000      	b.n	80075c4 <lsm6dso16is_mem_bank_set+0x30>
 80075c2:	2200      	movs	r2, #0
 80075c4:	7a3b      	ldrb	r3, [r7, #8]
 80075c6:	f362 13c7 	bfi	r3, r2, #7, #1
 80075ca:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 80075cc:	f107 0208 	add.w	r2, r7, #8
 80075d0:	2301      	movs	r3, #1
 80075d2:	2101      	movs	r1, #1
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f7ff ffbf 	bl	8007558 <lsm6dso16is_write_reg>
 80075da:	60f8      	str	r0, [r7, #12]

  return ret;
 80075dc:	68fb      	ldr	r3, [r7, #12]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <lsm6dso16is_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b084      	sub	sp, #16
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_WHO_AM_I, (uint8_t *)val, 1);
 80075f0:	2301      	movs	r3, #1
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	210f      	movs	r1, #15
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7ff ff90 	bl	800751c <lsm6dso16is_read_reg>
 80075fc:	60f8      	str	r0, [r7, #12]

  return ret;
 80075fe:	68fb      	ldr	r3, [r7, #12]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <lsm6dso16is_xl_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8007614:	f107 0208 	add.w	r2, r7, #8
 8007618:	2301      	movs	r3, #1
 800761a:	2115      	movs	r1, #21
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7ff ff7d 	bl	800751c <lsm6dso16is_read_reg>
 8007622:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10f      	bne.n	800764a <lsm6dso16is_xl_hm_mode_set+0x42>
  {
    ctrl6_c.xl_hm_mode = ((uint8_t)val & 0x1U);
 800762a:	78fb      	ldrb	r3, [r7, #3]
 800762c:	f003 0301 	and.w	r3, r3, #1
 8007630:	b2da      	uxtb	r2, r3
 8007632:	7a3b      	ldrb	r3, [r7, #8]
 8007634:	f362 1304 	bfi	r3, r2, #4, #1
 8007638:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800763a:	f107 0208 	add.w	r2, r7, #8
 800763e:	2301      	movs	r3, #1
 8007640:	2115      	movs	r1, #21
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7ff ff88 	bl	8007558 <lsm6dso16is_write_reg>
 8007648:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800764a:	68fb      	ldr	r3, [r7, #12]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <lsm6dso16is_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t val)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	460b      	mov	r3, r1
 800765e:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007660:	f107 0208 	add.w	r2, r7, #8
 8007664:	2301      	movs	r3, #1
 8007666:	2110      	movs	r1, #16
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff ff57 	bl	800751c <lsm6dso16is_read_reg>
 800766e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10f      	bne.n	8007696 <lsm6dso16is_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = ((uint8_t)val & 0x3U);
 8007676:	78fb      	ldrb	r3, [r7, #3]
 8007678:	f003 0303 	and.w	r3, r3, #3
 800767c:	b2da      	uxtb	r2, r3
 800767e:	7a3b      	ldrb	r3, [r7, #8]
 8007680:	f362 0383 	bfi	r3, r2, #2, #2
 8007684:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8007686:	f107 0208 	add.w	r2, r7, #8
 800768a:	2301      	movs	r3, #1
 800768c:	2110      	movs	r1, #16
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff ff62 	bl	8007558 <lsm6dso16is_write_reg>
 8007694:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007696:	68fb      	ldr	r3, [r7, #12]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <lsm6dso16is_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_xl_full_scale_t *val)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80076aa:	f107 0208 	add.w	r2, r7, #8
 80076ae:	2301      	movs	r3, #1
 80076b0:	2110      	movs	r1, #16
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7ff ff32 	bl	800751c <lsm6dso16is_read_reg>
 80076b8:	60f8      	str	r0, [r7, #12]

  switch ((ctrl1_xl.fs_xl))
 80076ba:	7a3b      	ldrb	r3, [r7, #8]
 80076bc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d81a      	bhi.n	80076fc <lsm6dso16is_xl_full_scale_get+0x5c>
 80076c6:	a201      	add	r2, pc, #4	@ (adr r2, 80076cc <lsm6dso16is_xl_full_scale_get+0x2c>)
 80076c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076cc:	080076dd 	.word	0x080076dd
 80076d0:	080076f5 	.word	0x080076f5
 80076d4:	080076e5 	.word	0x080076e5
 80076d8:	080076ed 	.word	0x080076ed
  {
    case LSM6DSO16IS_2g:
      *val = LSM6DSO16IS_2g;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2200      	movs	r2, #0
 80076e0:	701a      	strb	r2, [r3, #0]
      break;
 80076e2:	e00f      	b.n	8007704 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_4g:
      *val = LSM6DSO16IS_4g;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	2202      	movs	r2, #2
 80076e8:	701a      	strb	r2, [r3, #0]
      break;
 80076ea:	e00b      	b.n	8007704 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_8g:
      *val = LSM6DSO16IS_8g;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2203      	movs	r2, #3
 80076f0:	701a      	strb	r2, [r3, #0]
      break;
 80076f2:	e007      	b.n	8007704 <lsm6dso16is_xl_full_scale_get+0x64>

    case LSM6DSO16IS_16g:
      *val = LSM6DSO16IS_16g;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	2201      	movs	r2, #1
 80076f8:	701a      	strb	r2, [r3, #0]
      break;
 80076fa:	e003      	b.n	8007704 <lsm6dso16is_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO16IS_2g;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2200      	movs	r2, #0
 8007700:	701a      	strb	r2, [r3, #0]
      break;
 8007702:	bf00      	nop
  }
  return ret;
 8007704:	68fb      	ldr	r3, [r7, #12]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop

08007710 <lsm6dso16is_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t val)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800771c:	f107 0208 	add.w	r2, r7, #8
 8007720:	2301      	movs	r3, #1
 8007722:	2110      	movs	r1, #16
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7ff fef9 	bl	800751c <lsm6dso16is_read_reg>
 800772a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d128      	bne.n	8007784 <lsm6dso16is_xl_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 8007732:	78fb      	ldrb	r3, [r7, #3]
 8007734:	f003 0310 	and.w	r3, r3, #16
 8007738:	2b00      	cmp	r3, #0
 800773a:	d008      	beq.n	800774e <lsm6dso16is_xl_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 800773c:	2101      	movs	r1, #1
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7ff ff62 	bl	8007608 <lsm6dso16is_xl_hm_mode_set>
 8007744:	4602      	mov	r2, r0
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	4413      	add	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	e007      	b.n	800775e <lsm6dso16is_xl_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_xl_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 800774e:	2100      	movs	r1, #0
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7ff ff59 	bl	8007608 <lsm6dso16is_xl_hm_mode_set>
 8007756:	4602      	mov	r2, r0
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4413      	add	r3, r2
 800775c:	60fb      	str	r3, [r7, #12]
    }

    ctrl1_xl.odr_xl = ((uint8_t)val & 0xfU);
 800775e:	78fb      	ldrb	r3, [r7, #3]
 8007760:	f003 030f 	and.w	r3, r3, #15
 8007764:	b2da      	uxtb	r2, r3
 8007766:	7a3b      	ldrb	r3, [r7, #8]
 8007768:	f362 1307 	bfi	r3, r2, #4, #4
 800776c:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800776e:	f107 0208 	add.w	r2, r7, #8
 8007772:	2301      	movs	r3, #1
 8007774:	2110      	movs	r1, #16
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7ff feee 	bl	8007558 <lsm6dso16is_write_reg>
 800777c:	4602      	mov	r2, r0
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	4413      	add	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007784:	68fb      	ldr	r3, [r7, #12]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
	...

08007790 <lsm6dso16is_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_xl_data_rate_t *val)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl1_xl_t ctrl1_xl;
  lsm6dso16is_ctrl6_c_t ctrl6_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800779a:	f107 0210 	add.w	r2, r7, #16
 800779e:	2301      	movs	r3, #1
 80077a0:	2110      	movs	r1, #16
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7ff feba 	bl	800751c <lsm6dso16is_read_reg>
 80077a8:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80077aa:	f107 020c 	add.w	r2, r7, #12
 80077ae:	2301      	movs	r3, #1
 80077b0:	2115      	movs	r1, #21
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7ff feb2 	bl	800751c <lsm6dso16is_read_reg>
 80077b8:	4602      	mov	r2, r0
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	4413      	add	r3, r2
 80077be:	617b      	str	r3, [r7, #20]

  switch ((ctrl6_c.xl_hm_mode << 4) | (ctrl1_xl.odr_xl))
 80077c0:	7b3b      	ldrb	r3, [r7, #12]
 80077c2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	011b      	lsls	r3, r3, #4
 80077ca:	7c3a      	ldrb	r2, [r7, #16]
 80077cc:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80077d0:	b2d2      	uxtb	r2, r2
 80077d2:	4313      	orrs	r3, r2
 80077d4:	2b1b      	cmp	r3, #27
 80077d6:	f200 8093 	bhi.w	8007900 <lsm6dso16is_xl_data_rate_get+0x170>
 80077da:	a201      	add	r2, pc, #4	@ (adr r2, 80077e0 <lsm6dso16is_xl_data_rate_get+0x50>)
 80077dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e0:	08007851 	.word	0x08007851
 80077e4:	08007859 	.word	0x08007859
 80077e8:	08007861 	.word	0x08007861
 80077ec:	08007869 	.word	0x08007869
 80077f0:	08007871 	.word	0x08007871
 80077f4:	08007879 	.word	0x08007879
 80077f8:	08007881 	.word	0x08007881
 80077fc:	08007889 	.word	0x08007889
 8007800:	08007891 	.word	0x08007891
 8007804:	08007899 	.word	0x08007899
 8007808:	080078a1 	.word	0x080078a1
 800780c:	08007901 	.word	0x08007901
 8007810:	08007901 	.word	0x08007901
 8007814:	08007901 	.word	0x08007901
 8007818:	08007901 	.word	0x08007901
 800781c:	08007901 	.word	0x08007901
 8007820:	08007901 	.word	0x08007901
 8007824:	080078a9 	.word	0x080078a9
 8007828:	080078b1 	.word	0x080078b1
 800782c:	080078b9 	.word	0x080078b9
 8007830:	080078c1 	.word	0x080078c1
 8007834:	080078c9 	.word	0x080078c9
 8007838:	080078d1 	.word	0x080078d1
 800783c:	080078d9 	.word	0x080078d9
 8007840:	080078e1 	.word	0x080078e1
 8007844:	080078e9 	.word	0x080078e9
 8007848:	080078f1 	.word	0x080078f1
 800784c:	080078f9 	.word	0x080078f9
  {
    case LSM6DSO16IS_XL_ODR_OFF:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	2200      	movs	r2, #0
 8007854:	701a      	strb	r2, [r3, #0]
      break;
 8007856:	e057      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_HP;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2201      	movs	r2, #1
 800785c:	701a      	strb	r2, [r3, #0]
      break;
 800785e:	e053      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_HP;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	2202      	movs	r2, #2
 8007864:	701a      	strb	r2, [r3, #0]
      break;
 8007866:	e04f      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_HP;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	2203      	movs	r2, #3
 800786c:	701a      	strb	r2, [r3, #0]
      break;
 800786e:	e04b      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_HP;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2204      	movs	r2, #4
 8007874:	701a      	strb	r2, [r3, #0]
      break;
 8007876:	e047      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_HP;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2205      	movs	r2, #5
 800787c:	701a      	strb	r2, [r3, #0]
      break;
 800787e:	e043      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_HP;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2206      	movs	r2, #6
 8007884:	701a      	strb	r2, [r3, #0]
      break;
 8007886:	e03f      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_HP;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2207      	movs	r2, #7
 800788c:	701a      	strb	r2, [r3, #0]
      break;
 800788e:	e03b      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_HP;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2208      	movs	r2, #8
 8007894:	701a      	strb	r2, [r3, #0]
      break;
 8007896:	e037      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_HP;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	2209      	movs	r2, #9
 800789c:	701a      	strb	r2, [r3, #0]
      break;
 800789e:	e033      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_HP;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	220a      	movs	r2, #10
 80078a4:	701a      	strb	r2, [r3, #0]
      break;
 80078a6:	e02f      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_12Hz5_LP;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2211      	movs	r2, #17
 80078ac:	701a      	strb	r2, [r3, #0]
      break;
 80078ae:	e02b      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_26H_LP;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2212      	movs	r2, #18
 80078b4:	701a      	strb	r2, [r3, #0]
      break;
 80078b6:	e027      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_52Hz_LP;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2213      	movs	r2, #19
 80078bc:	701a      	strb	r2, [r3, #0]
      break;
 80078be:	e023      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_104Hz_LP;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2214      	movs	r2, #20
 80078c4:	701a      	strb	r2, [r3, #0]
      break;
 80078c6:	e01f      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_208Hz_LP;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	2215      	movs	r2, #21
 80078cc:	701a      	strb	r2, [r3, #0]
      break;
 80078ce:	e01b      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_416Hz_LP;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2216      	movs	r2, #22
 80078d4:	701a      	strb	r2, [r3, #0]
      break;
 80078d6:	e017      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_833Hz_LP;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2217      	movs	r2, #23
 80078dc:	701a      	strb	r2, [r3, #0]
      break;
 80078de:	e013      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1667Hz_LP;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2218      	movs	r2, #24
 80078e4:	701a      	strb	r2, [r3, #0]
      break;
 80078e6:	e00f      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_3333Hz_LP;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2219      	movs	r2, #25
 80078ec:	701a      	strb	r2, [r3, #0]
      break;
 80078ee:	e00b      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_6667Hz_LP;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	221a      	movs	r2, #26
 80078f4:	701a      	strb	r2, [r3, #0]
      break;
 80078f6:	e007      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    case LSM6DSO16IS_XL_ODR_AT_1Hz6_LP:
      *val = LSM6DSO16IS_XL_ODR_AT_1Hz6_LP;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	221b      	movs	r2, #27
 80078fc:	701a      	strb	r2, [r3, #0]
      break;
 80078fe:	e003      	b.n	8007908 <lsm6dso16is_xl_data_rate_get+0x178>

    default:
      *val = LSM6DSO16IS_XL_ODR_OFF;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	2200      	movs	r2, #0
 8007904:	701a      	strb	r2, [r3, #0]
      break;
 8007906:	bf00      	nop
  }

  return ret;
 8007908:	697b      	ldr	r3, [r7, #20]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3718      	adds	r7, #24
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop

08007914 <lsm6dso16is_gy_hm_mode_set>:
  * @param  val      HIGH_PERFOMANCE_MODE_ENABLED, HIGH_PERFOMANCE_MODE_DISABLED,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_hm_mode_set(const stmdev_ctx_t *ctx, lsm6dso16is_hm_mode_t val)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	460b      	mov	r3, r1
 800791e:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8007920:	f107 0208 	add.w	r2, r7, #8
 8007924:	2301      	movs	r3, #1
 8007926:	2116      	movs	r1, #22
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f7ff fdf7 	bl	800751c <lsm6dso16is_read_reg>
 800792e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10f      	bne.n	8007956 <lsm6dso16is_gy_hm_mode_set+0x42>
  {
    ctrl7_g.g_hm_mode = ((uint8_t)val & 0x1U);
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	b2da      	uxtb	r2, r3
 800793e:	7a3b      	ldrb	r3, [r7, #8]
 8007940:	f362 13c7 	bfi	r3, r2, #7, #1
 8007944:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8007946:	f107 0208 	add.w	r2, r7, #8
 800794a:	2301      	movs	r3, #1
 800794c:	2116      	movs	r1, #22
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff fe02 	bl	8007558 <lsm6dso16is_write_reg>
 8007954:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007956:	68fb      	ldr	r3, [r7, #12]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <lsm6dso16is_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t val)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800796c:	f107 0208 	add.w	r2, r7, #8
 8007970:	2301      	movs	r3, #1
 8007972:	2111      	movs	r1, #17
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f7ff fdd1 	bl	800751c <lsm6dso16is_read_reg>
 800797a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d119      	bne.n	80079b6 <lsm6dso16is_gy_full_scale_set+0x56>
  {
    ctrl2_g.fs_g = ((uint8_t)val & 0x3U);
 8007982:	78fb      	ldrb	r3, [r7, #3]
 8007984:	f003 0303 	and.w	r3, r3, #3
 8007988:	b2da      	uxtb	r2, r3
 800798a:	7a3b      	ldrb	r3, [r7, #8]
 800798c:	f362 0383 	bfi	r3, r2, #2, #2
 8007990:	723b      	strb	r3, [r7, #8]
    ctrl2_g.fs_125 = ((uint8_t)val >> 4);
 8007992:	78fb      	ldrb	r3, [r7, #3]
 8007994:	091b      	lsrs	r3, r3, #4
 8007996:	b2db      	uxtb	r3, r3
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	b2da      	uxtb	r2, r3
 800799e:	7a3b      	ldrb	r3, [r7, #8]
 80079a0:	f362 0341 	bfi	r3, r2, #1, #1
 80079a4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80079a6:	f107 0208 	add.w	r2, r7, #8
 80079aa:	2301      	movs	r3, #1
 80079ac:	2111      	movs	r1, #17
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7ff fdd2 	bl	8007558 <lsm6dso16is_write_reg>
 80079b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80079b6:	68fb      	ldr	r3, [r7, #12]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <lsm6dso16is_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                      lsm6dso16is_gy_full_scale_t *val)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80079ca:	f107 0208 	add.w	r2, r7, #8
 80079ce:	2301      	movs	r3, #1
 80079d0:	2111      	movs	r1, #17
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7ff fda2 	bl	800751c <lsm6dso16is_read_reg>
 80079d8:	60f8      	str	r0, [r7, #12]

  switch ((ctrl2_g.fs_125 << 4) | (ctrl2_g.fs_g))
 80079da:	7a3b      	ldrb	r3, [r7, #8]
 80079dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	011b      	lsls	r3, r3, #4
 80079e4:	7a3a      	ldrb	r2, [r7, #8]
 80079e6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80079ea:	b2d2      	uxtb	r2, r2
 80079ec:	4313      	orrs	r3, r2
 80079ee:	2b10      	cmp	r3, #16
 80079f0:	d838      	bhi.n	8007a64 <lsm6dso16is_gy_full_scale_get+0xa4>
 80079f2:	a201      	add	r2, pc, #4	@ (adr r2, 80079f8 <lsm6dso16is_gy_full_scale_get+0x38>)
 80079f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f8:	08007a45 	.word	0x08007a45
 80079fc:	08007a4d 	.word	0x08007a4d
 8007a00:	08007a55 	.word	0x08007a55
 8007a04:	08007a5d 	.word	0x08007a5d
 8007a08:	08007a65 	.word	0x08007a65
 8007a0c:	08007a65 	.word	0x08007a65
 8007a10:	08007a65 	.word	0x08007a65
 8007a14:	08007a65 	.word	0x08007a65
 8007a18:	08007a65 	.word	0x08007a65
 8007a1c:	08007a65 	.word	0x08007a65
 8007a20:	08007a65 	.word	0x08007a65
 8007a24:	08007a65 	.word	0x08007a65
 8007a28:	08007a65 	.word	0x08007a65
 8007a2c:	08007a65 	.word	0x08007a65
 8007a30:	08007a65 	.word	0x08007a65
 8007a34:	08007a65 	.word	0x08007a65
 8007a38:	08007a3d 	.word	0x08007a3d
  {
    case LSM6DSO16IS_125dps:
      *val = LSM6DSO16IS_125dps;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2210      	movs	r2, #16
 8007a40:	701a      	strb	r2, [r3, #0]
      break;
 8007a42:	e013      	b.n	8007a6c <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_250dps:
      *val = LSM6DSO16IS_250dps;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2200      	movs	r2, #0
 8007a48:	701a      	strb	r2, [r3, #0]
      break;
 8007a4a:	e00f      	b.n	8007a6c <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_500dps:
      *val = LSM6DSO16IS_500dps;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	701a      	strb	r2, [r3, #0]
      break;
 8007a52:	e00b      	b.n	8007a6c <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_1000dps:
      *val = LSM6DSO16IS_1000dps;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	2202      	movs	r2, #2
 8007a58:	701a      	strb	r2, [r3, #0]
      break;
 8007a5a:	e007      	b.n	8007a6c <lsm6dso16is_gy_full_scale_get+0xac>

    case LSM6DSO16IS_2000dps:
      *val = LSM6DSO16IS_2000dps;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	2203      	movs	r2, #3
 8007a60:	701a      	strb	r2, [r3, #0]
      break;
 8007a62:	e003      	b.n	8007a6c <lsm6dso16is_gy_full_scale_get+0xac>

    default:
      *val = LSM6DSO16IS_125dps;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	2210      	movs	r2, #16
 8007a68:	701a      	strb	r2, [r3, #0]
      break;
 8007a6a:	bf00      	nop
  }
  return ret;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop

08007a78 <lsm6dso16is_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t val)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	460b      	mov	r3, r1
 8007a82:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007a84:	f107 0208 	add.w	r2, r7, #8
 8007a88:	2301      	movs	r3, #1
 8007a8a:	2111      	movs	r1, #17
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7ff fd45 	bl	800751c <lsm6dso16is_read_reg>
 8007a92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d128      	bne.n	8007aec <lsm6dso16is_gy_data_rate_set+0x74>
  {
    if (((uint8_t)val & 0x10U) == 0x10U)
 8007a9a:	78fb      	ldrb	r3, [r7, #3]
 8007a9c:	f003 0310 	and.w	r3, r3, #16
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d008      	beq.n	8007ab6 <lsm6dso16is_gy_data_rate_set+0x3e>
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_DISABLED);
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7ff ff34 	bl	8007914 <lsm6dso16is_gy_hm_mode_set>
 8007aac:	4602      	mov	r2, r0
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	e007      	b.n	8007ac6 <lsm6dso16is_gy_data_rate_set+0x4e>
    }
    else
    {
      ret += lsm6dso16is_gy_hm_mode_set(ctx, LSM6DSO16IS_HIGH_PERFOMANCE_MODE_ENABLED);
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7ff ff2b 	bl	8007914 <lsm6dso16is_gy_hm_mode_set>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]
    }

    ctrl2_g.odr_g = ((uint8_t)val & 0xfU);
 8007ac6:	78fb      	ldrb	r3, [r7, #3]
 8007ac8:	f003 030f 	and.w	r3, r3, #15
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	7a3b      	ldrb	r3, [r7, #8]
 8007ad0:	f362 1307 	bfi	r3, r2, #4, #4
 8007ad4:	723b      	strb	r3, [r7, #8]
    ret += lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007ad6:	f107 0208 	add.w	r2, r7, #8
 8007ada:	2301      	movs	r3, #1
 8007adc:	2111      	movs	r1, #17
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7ff fd3a 	bl	8007558 <lsm6dso16is_write_reg>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4413      	add	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007aec:	68fb      	ldr	r3, [r7, #12]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
	...

08007af8 <lsm6dso16is_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                     lsm6dso16is_gy_data_rate_t *val)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  lsm6dso16is_ctrl2_g_t ctrl2_g;
  lsm6dso16is_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8007b02:	f107 0210 	add.w	r2, r7, #16
 8007b06:	2301      	movs	r3, #1
 8007b08:	2111      	movs	r1, #17
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7ff fd06 	bl	800751c <lsm6dso16is_read_reg>
 8007b10:	6178      	str	r0, [r7, #20]
  ret += lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8007b12:	f107 020c 	add.w	r2, r7, #12
 8007b16:	2301      	movs	r3, #1
 8007b18:	2116      	movs	r1, #22
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7ff fcfe 	bl	800751c <lsm6dso16is_read_reg>
 8007b20:	4602      	mov	r2, r0
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	4413      	add	r3, r2
 8007b26:	617b      	str	r3, [r7, #20]

  switch ((ctrl7_g.g_hm_mode << 4) | (ctrl2_g.odr_g))
 8007b28:	7b3b      	ldrb	r3, [r7, #12]
 8007b2a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	011b      	lsls	r3, r3, #4
 8007b32:	7c3a      	ldrb	r2, [r7, #16]
 8007b34:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007b38:	b2d2      	uxtb	r2, r2
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	2b1a      	cmp	r3, #26
 8007b3e:	f200 808d 	bhi.w	8007c5c <lsm6dso16is_gy_data_rate_get+0x164>
 8007b42:	a201      	add	r2, pc, #4	@ (adr r2, 8007b48 <lsm6dso16is_gy_data_rate_get+0x50>)
 8007b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b48:	08007bb5 	.word	0x08007bb5
 8007b4c:	08007bbd 	.word	0x08007bbd
 8007b50:	08007bc5 	.word	0x08007bc5
 8007b54:	08007bcd 	.word	0x08007bcd
 8007b58:	08007bd5 	.word	0x08007bd5
 8007b5c:	08007bdd 	.word	0x08007bdd
 8007b60:	08007be5 	.word	0x08007be5
 8007b64:	08007bed 	.word	0x08007bed
 8007b68:	08007bf5 	.word	0x08007bf5
 8007b6c:	08007bfd 	.word	0x08007bfd
 8007b70:	08007c05 	.word	0x08007c05
 8007b74:	08007c5d 	.word	0x08007c5d
 8007b78:	08007c5d 	.word	0x08007c5d
 8007b7c:	08007c5d 	.word	0x08007c5d
 8007b80:	08007c5d 	.word	0x08007c5d
 8007b84:	08007c5d 	.word	0x08007c5d
 8007b88:	08007c5d 	.word	0x08007c5d
 8007b8c:	08007c0d 	.word	0x08007c0d
 8007b90:	08007c15 	.word	0x08007c15
 8007b94:	08007c1d 	.word	0x08007c1d
 8007b98:	08007c25 	.word	0x08007c25
 8007b9c:	08007c2d 	.word	0x08007c2d
 8007ba0:	08007c35 	.word	0x08007c35
 8007ba4:	08007c3d 	.word	0x08007c3d
 8007ba8:	08007c45 	.word	0x08007c45
 8007bac:	08007c4d 	.word	0x08007c4d
 8007bb0:	08007c55 	.word	0x08007c55
  {
    case LSM6DSO16IS_GY_ODR_OFF:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	701a      	strb	r2, [r3, #0]
      break;
 8007bba:	e053      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_HP;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	701a      	strb	r2, [r3, #0]
      break;
 8007bc2:	e04f      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_HP;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	701a      	strb	r2, [r3, #0]
      break;
 8007bca:	e04b      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_HP;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	2203      	movs	r2, #3
 8007bd0:	701a      	strb	r2, [r3, #0]
      break;
 8007bd2:	e047      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_HP;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	2204      	movs	r2, #4
 8007bd8:	701a      	strb	r2, [r3, #0]
      break;
 8007bda:	e043      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_HP;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	2205      	movs	r2, #5
 8007be0:	701a      	strb	r2, [r3, #0]
      break;
 8007be2:	e03f      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_HP;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2206      	movs	r2, #6
 8007be8:	701a      	strb	r2, [r3, #0]
      break;
 8007bea:	e03b      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_HP;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2207      	movs	r2, #7
 8007bf0:	701a      	strb	r2, [r3, #0]
      break;
 8007bf2:	e037      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_HP;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	2208      	movs	r2, #8
 8007bf8:	701a      	strb	r2, [r3, #0]
      break;
 8007bfa:	e033      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_HP;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	2209      	movs	r2, #9
 8007c00:	701a      	strb	r2, [r3, #0]
      break;
 8007c02:	e02f      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_HP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_HP;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	220a      	movs	r2, #10
 8007c08:	701a      	strb	r2, [r3, #0]
      break;
 8007c0a:	e02b      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_12Hz5_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_12Hz5_LP;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	2211      	movs	r2, #17
 8007c10:	701a      	strb	r2, [r3, #0]
      break;
 8007c12:	e027      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_26H_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_26H_LP;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	2212      	movs	r2, #18
 8007c18:	701a      	strb	r2, [r3, #0]
      break;
 8007c1a:	e023      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_52Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_52Hz_LP;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	2213      	movs	r2, #19
 8007c20:	701a      	strb	r2, [r3, #0]
      break;
 8007c22:	e01f      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_104Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_104Hz_LP;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2214      	movs	r2, #20
 8007c28:	701a      	strb	r2, [r3, #0]
      break;
 8007c2a:	e01b      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_208Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_208Hz_LP;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2215      	movs	r2, #21
 8007c30:	701a      	strb	r2, [r3, #0]
      break;
 8007c32:	e017      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_416Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_416Hz_LP;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2216      	movs	r2, #22
 8007c38:	701a      	strb	r2, [r3, #0]
      break;
 8007c3a:	e013      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_833Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_833Hz_LP;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	2217      	movs	r2, #23
 8007c40:	701a      	strb	r2, [r3, #0]
      break;
 8007c42:	e00f      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_1667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_1667Hz_LP;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2218      	movs	r2, #24
 8007c48:	701a      	strb	r2, [r3, #0]
      break;
 8007c4a:	e00b      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_3333Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_3333Hz_LP;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	2219      	movs	r2, #25
 8007c50:	701a      	strb	r2, [r3, #0]
      break;
 8007c52:	e007      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    case LSM6DSO16IS_GY_ODR_AT_6667Hz_LP:
      *val = LSM6DSO16IS_GY_ODR_AT_6667Hz_LP;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	221a      	movs	r2, #26
 8007c58:	701a      	strb	r2, [r3, #0]
      break;
 8007c5a:	e003      	b.n	8007c64 <lsm6dso16is_gy_data_rate_get+0x16c>

    default:
      *val = LSM6DSO16IS_GY_ODR_OFF;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	701a      	strb	r2, [r3, #0]
      break;
 8007c62:	bf00      	nop
  }

  return ret;
 8007c64:	697b      	ldr	r3, [r7, #20]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3718      	adds	r7, #24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop

08007c70 <lsm6dso16is_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007c7c:	f107 0208 	add.w	r2, r7, #8
 8007c80:	2301      	movs	r3, #1
 8007c82:	2112      	movs	r1, #18
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff fc49 	bl	800751c <lsm6dso16is_read_reg>
 8007c8a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10f      	bne.n	8007cb2 <lsm6dso16is_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8007c92:	78fb      	ldrb	r3, [r7, #3]
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	7a3b      	ldrb	r3, [r7, #8]
 8007c9c:	f362 0382 	bfi	r3, r2, #2, #1
 8007ca0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007ca2:	f107 0208 	add.w	r2, r7, #8
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	2112      	movs	r1, #18
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7ff fc54 	bl	8007558 <lsm6dso16is_write_reg>
 8007cb0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <lsm6dso16is_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	70fb      	strb	r3, [r7, #3]
  lsm6dso16is_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007cc8:	f107 0208 	add.w	r2, r7, #8
 8007ccc:	2301      	movs	r3, #1
 8007cce:	2112      	movs	r1, #18
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7ff fc23 	bl	800751c <lsm6dso16is_read_reg>
 8007cd6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d10f      	bne.n	8007cfe <lsm6dso16is_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8007cde:	78fb      	ldrb	r3, [r7, #3]
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	7a3b      	ldrb	r3, [r7, #8]
 8007ce8:	f362 1386 	bfi	r3, r2, #6, #1
 8007cec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso16is_write_reg(ctx, LSM6DSO16IS_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8007cee:	f107 0208 	add.w	r2, r7, #8
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	2112      	movs	r1, #18
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7ff fc2e 	bl	8007558 <lsm6dso16is_write_reg>
 8007cfc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <lsm6dso16is_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_G, buff, 6);
 8007d12:	f107 020c 	add.w	r2, r7, #12
 8007d16:	2306      	movs	r3, #6
 8007d18:	2122      	movs	r1, #34	@ 0x22
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7ff fbfe 	bl	800751c <lsm6dso16is_read_reg>
 8007d20:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007d22:	7b7b      	ldrb	r3, [r7, #13]
 8007d24:	b21a      	sxth	r2, r3
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	021b      	lsls	r3, r3, #8
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	7b3a      	ldrb	r2, [r7, #12]
 8007d38:	4413      	add	r3, r2
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	b21a      	sxth	r2, r3
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007d42:	7bfa      	ldrb	r2, [r7, #15]
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	3302      	adds	r3, #2
 8007d48:	b212      	sxth	r2, r2
 8007d4a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	3302      	adds	r3, #2
 8007d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	021b      	lsls	r3, r3, #8
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	7bba      	ldrb	r2, [r7, #14]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	3302      	adds	r3, #2
 8007d64:	b212      	sxth	r2, r2
 8007d66:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007d68:	7c7a      	ldrb	r2, [r7, #17]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	b212      	sxth	r2, r2
 8007d70:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	3304      	adds	r3, #4
 8007d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	021b      	lsls	r3, r3, #8
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	7c3a      	ldrb	r2, [r7, #16]
 8007d82:	4413      	add	r3, r2
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	3304      	adds	r3, #4
 8007d8a:	b212      	sxth	r2, r2
 8007d8c:	801a      	strh	r2, [r3, #0]

  return ret;
 8007d8e:	697b      	ldr	r3, [r7, #20]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3718      	adds	r7, #24
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <lsm6dso16is_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso16is_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso16is_read_reg(ctx, LSM6DSO16IS_OUTX_L_A, buff, 6);
 8007da2:	f107 020c 	add.w	r2, r7, #12
 8007da6:	2306      	movs	r3, #6
 8007da8:	2128      	movs	r1, #40	@ 0x28
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7ff fbb6 	bl	800751c <lsm6dso16is_read_reg>
 8007db0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007db2:	7b7b      	ldrb	r3, [r7, #13]
 8007db4:	b21a      	sxth	r2, r3
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	021b      	lsls	r3, r3, #8
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	7b3a      	ldrb	r2, [r7, #12]
 8007dc8:	4413      	add	r3, r2
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	b21a      	sxth	r2, r3
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007dd2:	7bfa      	ldrb	r2, [r7, #15]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	3302      	adds	r3, #2
 8007dd8:	b212      	sxth	r2, r2
 8007dda:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	3302      	adds	r3, #2
 8007de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	021b      	lsls	r3, r3, #8
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	7bba      	ldrb	r2, [r7, #14]
 8007dec:	4413      	add	r3, r2
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	3302      	adds	r3, #2
 8007df4:	b212      	sxth	r2, r2
 8007df6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007df8:	7c7a      	ldrb	r2, [r7, #17]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	3304      	adds	r3, #4
 8007dfe:	b212      	sxth	r2, r2
 8007e00:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	3304      	adds	r3, #4
 8007e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	021b      	lsls	r3, r3, #8
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	7c3a      	ldrb	r2, [r7, #16]
 8007e12:	4413      	add	r3, r2
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	3304      	adds	r3, #4
 8007e1a:	b212      	sxth	r2, r2
 8007e1c:	801a      	strh	r2, [r3, #0]

  return ret;
 8007e1e:	697b      	ldr	r3, [r7, #20]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <LSM6DSV16X_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_RegisterBusIO(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_IO_t *pIO)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d103      	bne.n	8007e44 <LSM6DSV16X_RegisterBusIO+0x1c>
  {
    ret = LSM6DSV16X_ERROR;
 8007e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e40:	60fb      	str	r3, [r7, #12]
 8007e42:	e05d      	b.n	8007f00 <LSM6DSV16X_RegisterBusIO+0xd8>
  }
  else
  {
    pObj->IO.Init       = pIO->Init;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit     = pIO->DeInit;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	685a      	ldr	r2, [r3, #4]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType    = pIO->BusType;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address    = pIO->Address;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	7b1a      	ldrb	r2, [r3, #12]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg   = pIO->WriteReg;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	691a      	ldr	r2, [r3, #16]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg    = pIO->ReadReg;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	695a      	ldr	r2, [r3, #20]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick    = pIO->GetTick;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	699a      	ldr	r2, [r3, #24]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a23      	ldr	r2, [pc, #140]	@ (8007f0c <LSM6DSV16X_RegisterBusIO+0xe4>)
 8007e80:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a22      	ldr	r2, [pc, #136]	@ (8007f10 <LSM6DSV16X_RegisterBusIO+0xe8>)
 8007e86:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	69da      	ldr	r2, [r3, #28]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d103      	bne.n	8007ea6 <LSM6DSV16X_RegisterBusIO+0x7e>
    {
      ret = LSM6DSV16X_ERROR;
 8007e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	e02c      	b.n	8007f00 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else if (pObj->IO.Init() != LSM6DSV16X_OK)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4798      	blx	r3
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <LSM6DSV16X_RegisterBusIO+0x92>
    {
      ret = LSM6DSV16X_ERROR;
 8007eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	e022      	b.n	8007f00 <LSM6DSV16X_RegisterBusIO+0xd8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSV16X_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d11e      	bne.n	8007f00 <LSM6DSV16X_RegisterBusIO+0xd8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d119      	bne.n	8007f00 <LSM6DSV16X_RegisterBusIO+0xd8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x04;
 8007ecc:	2304      	movs	r3, #4
 8007ece:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_CTRL3, data) != LSM6DSV16X_OK)
 8007ed0:	7afb      	ldrb	r3, [r7, #11]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	2112      	movs	r1, #18
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 ff18 	bl	8008d0c <LSM6DSV16X_Write_Reg>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d002      	beq.n	8007ee8 <LSM6DSV16X_RegisterBusIO+0xc0>
          {
            ret = LSM6DSV16X_ERROR;
 8007ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ee6:	60fb      	str	r3, [r7, #12]
          }

          if (LSM6DSV16X_Write_Reg(pObj, LSM6DSV16X_IF_CFG, data) != LSM6DSV16X_OK)
 8007ee8:	7afb      	ldrb	r3, [r7, #11]
 8007eea:	461a      	mov	r2, r3
 8007eec:	2103      	movs	r1, #3
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 ff0c 	bl	8008d0c <LSM6DSV16X_Write_Reg>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d002      	beq.n	8007f00 <LSM6DSV16X_RegisterBusIO+0xd8>
          {
            ret = LSM6DSV16X_ERROR;
 8007efa:	f04f 33ff 	mov.w	r3, #4294967295
 8007efe:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8007f00:	68fb      	ldr	r3, [r7, #12]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	0800924d 	.word	0x0800924d
 8007f10:	08009283 	.word	0x08009283

08007f14 <LSM6DSV16X_Init>:
  * @brief  Initialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Init(LSM6DSV16X_Object_t *pObj)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* Set main memory bank */
  if (LSM6DSV16X_Set_Mem_Bank(pObj, (uint8_t)LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 ff0f 	bl	8008d42 <LSM6DSV16X_Set_Mem_Bank>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d002      	beq.n	8007f30 <LSM6DSV16X_Init+0x1c>
  {
    return LSM6DSV16X_ERROR;
 8007f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f2e:	e070      	b.n	8008012 <LSM6DSV16X_Init+0xfe>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface */
  if (lsm6dsv16x_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	3320      	adds	r3, #32
 8007f34:	2101      	movs	r1, #1
 8007f36:	4618      	mov	r0, r3
 8007f38:	f001 fcfe 	bl	8009938 <lsm6dsv16x_auto_increment_set>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d002      	beq.n	8007f48 <LSM6DSV16X_Init+0x34>
  {
    return LSM6DSV16X_ERROR;
 8007f42:	f04f 33ff 	mov.w	r3, #4294967295
 8007f46:	e064      	b.n	8008012 <LSM6DSV16X_Init+0xfe>
  }

  /* Enable BDU */
  if (lsm6dsv16x_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSV16X_OK)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	3320      	adds	r3, #32
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f001 fd18 	bl	8009984 <lsm6dsv16x_block_data_update_set>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d002      	beq.n	8007f60 <LSM6DSV16X_Init+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8007f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5e:	e058      	b.n	8008012 <LSM6DSV16X_Init+0xfe>
  }

  /* WAKE_UP mode selection */
  if (lsm6dsv16x_fifo_mode_set(&(pObj->Ctx), LSM6DSV16X_BYPASS_MODE) != LSM6DSV16X_OK)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	3320      	adds	r3, #32
 8007f64:	2100      	movs	r1, #0
 8007f66:	4618      	mov	r0, r3
 8007f68:	f001 feae 	bl	8009cc8 <lsm6dsv16x_fifo_mode_set>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d002      	beq.n	8007f78 <LSM6DSV16X_Init+0x64>
  {
    return LSM6DSV16X_ERROR;
 8007f72:	f04f 33ff 	mov.w	r3, #4294967295
 8007f76:	e04c      	b.n	8008012 <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_AT_120Hz;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2206      	movs	r2, #6
 8007f7c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3320      	adds	r3, #32
 8007f84:	2100      	movs	r1, #0
 8007f86:	4618      	mov	r0, r3
 8007f88:	f001 fa14 	bl	80093b4 <lsm6dsv16x_xl_data_rate_set>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d002      	beq.n	8007f98 <LSM6DSV16X_Init+0x84>
  {
    return LSM6DSV16X_ERROR;
 8007f92:	f04f 33ff 	mov.w	r3, #4294967295
 8007f96:	e03c      	b.n	8008012 <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2g) != LSM6DSV16X_OK)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	3320      	adds	r3, #32
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f001 fd94 	bl	8009acc <lsm6dsv16x_xl_full_scale_set>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <LSM6DSV16X_Init+0x9c>
  {
    return LSM6DSV16X_ERROR;
 8007faa:	f04f 33ff 	mov.w	r3, #4294967295
 8007fae:	e030      	b.n	8008012 <LSM6DSV16X_Init+0xfe>
  }

  /* Select default output data rate */
  pObj->gyro_odr = LSM6DSV16X_ODR_AT_120Hz;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2206      	movs	r2, #6
 8007fb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3320      	adds	r3, #32
 8007fbc:	2100      	movs	r1, #0
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f001 fb5a 	bl	8009678 <lsm6dsv16x_gy_data_rate_set>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d002      	beq.n	8007fd0 <LSM6DSV16X_Init+0xbc>
  {
    return LSM6DSV16X_ERROR;
 8007fca:	f04f 33ff 	mov.w	r3, #4294967295
 8007fce:	e020      	b.n	8008012 <LSM6DSV16X_Init+0xfe>
  }

  /* Full scale selection */
  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), LSM6DSV16X_2000dps) != LSM6DSV16X_OK)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3320      	adds	r3, #32
 8007fd4:	2104      	movs	r1, #4
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f001 fcfa 	bl	80099d0 <lsm6dsv16x_gy_full_scale_set>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d002      	beq.n	8007fe8 <LSM6DSV16X_Init+0xd4>
  {
    return LSM6DSV16X_ERROR;
 8007fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe6:	e014      	b.n	8008012 <LSM6DSV16X_Init+0xfe>
  }

  /* Enable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 1;
 8007fe8:	7b3b      	ldrb	r3, [r7, #12]
 8007fea:	f043 0301 	orr.w	r3, r3, #1
 8007fee:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3320      	adds	r3, #32
 8007ff4:	7b39      	ldrb	r1, [r7, #12]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f001 fe8c 	bl	8009d14 <lsm6dsv16x_ah_qvar_mode_set>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <LSM6DSV16X_Init+0xf4>
  {
    return LSM6DSV16X_ERROR;
 8008002:	f04f 33ff 	mov.w	r3, #4294967295
 8008006:	e004      	b.n	8008012 <LSM6DSV16X_Init+0xfe>
  }

  pObj->is_initialized = 1;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <LSM6DSV16X_DeInit>:
  * @brief  Deinitialize the LSM6DSV16X sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_DeInit(LSM6DSV16X_Object_t *pObj)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSV16X_ACC_Disable(pObj) != LSM6DSV16X_OK)
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f898 	bl	8008158 <LSM6DSV16X_ACC_Disable>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <LSM6DSV16X_DeInit+0x1a>
  {
    return LSM6DSV16X_ERROR;
 800802e:	f04f 33ff 	mov.w	r3, #4294967295
 8008032:	e025      	b.n	8008080 <LSM6DSV16X_DeInit+0x66>
  }

  if (LSM6DSV16X_GYRO_Disable(pObj) != LSM6DSV16X_OK)
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fb6a 	bl	800870e <LSM6DSV16X_GYRO_Disable>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <LSM6DSV16X_DeInit+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8008040:	f04f 33ff 	mov.w	r3, #4294967295
 8008044:	e01c      	b.n	8008080 <LSM6DSV16X_DeInit+0x66>
  }

  /* Reset output data rate */
  pObj->acc_odr = LSM6DSV16X_ODR_OFF;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSV16X_ODR_OFF;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable Qvar functionality */
  lsm6dsv16x_ah_qvar_mode_t mode;
  mode.ah_qvar_en = 0;
 8008056:	7b3b      	ldrb	r3, [r7, #12]
 8008058:	f023 0301 	bic.w	r3, r3, #1
 800805c:	733b      	strb	r3, [r7, #12]

  if (lsm6dsv16x_ah_qvar_mode_set(&(pObj->Ctx), mode) != LSM6DSV16X_OK)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	3320      	adds	r3, #32
 8008062:	7b39      	ldrb	r1, [r7, #12]
 8008064:	4618      	mov	r0, r3
 8008066:	f001 fe55 	bl	8009d14 <lsm6dsv16x_ah_qvar_mode_set>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <LSM6DSV16X_DeInit+0x5c>
  {
    return LSM6DSV16X_ERROR;
 8008070:	f04f 33ff 	mov.w	r3, #4294967295
 8008074:	e004      	b.n	8008080 <LSM6DSV16X_DeInit+0x66>
  }

  pObj->is_initialized = 0;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSV16X_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <LSM6DSV16X_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ReadID(LSM6DSV16X_Object_t *pObj, uint8_t *Id)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  if (lsm6dsv16x_device_id_get(&(pObj->Ctx), Id) != LSM6DSV16X_OK)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	3320      	adds	r3, #32
 8008096:	6839      	ldr	r1, [r7, #0]
 8008098:	4618      	mov	r0, r3
 800809a:	f001 f97a 	bl	8009392 <lsm6dsv16x_device_id_get>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <LSM6DSV16X_ReadID+0x22>
  {
    return LSM6DSV16X_ERROR;
 80080a4:	f04f 33ff 	mov.w	r3, #4294967295
 80080a8:	e000      	b.n	80080ac <LSM6DSV16X_ReadID+0x24>
  }

  return LSM6DSV16X_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <LSM6DSV16X_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSV16X sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GetCapabilities(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Capabilities_t *Capabilities)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2201      	movs	r2, #1
 80080c2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	2201      	movs	r2, #1
 80080c8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2200      	movs	r2, #0
 80080ce:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 1;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2201      	movs	r2, #1
 80080d4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 4000;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80080dc:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2210      	movs	r2, #16
 80080e2:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2200      	movs	r2, #0
 80080e8:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 7680.0f;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	4a07      	ldr	r2, [pc, #28]	@ (800810c <LSM6DSV16X_GetCapabilities+0x58>)
 80080ee:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 7680.0f;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	4a06      	ldr	r2, [pc, #24]	@ (800810c <LSM6DSV16X_GetCapabilities+0x58>)
 80080f4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	f04f 0200 	mov.w	r2, #0
 80080fc:	619a      	str	r2, [r3, #24]
  return LSM6DSV16X_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	45f00000 	.word	0x45f00000

08008110 <LSM6DSV16X_ACC_Enable>:
  * @brief  Enable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Enable(LSM6DSV16X_Object_t *pObj)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800811e:	2b01      	cmp	r3, #1
 8008120:	d101      	bne.n	8008126 <LSM6DSV16X_ACC_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 8008122:	2300      	movs	r3, #0
 8008124:	e014      	b.n	8008150 <LSM6DSV16X_ACC_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSV16X_OK)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f103 0220 	add.w	r2, r3, #32
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8008132:	4619      	mov	r1, r3
 8008134:	4610      	mov	r0, r2
 8008136:	f001 f93d 	bl	80093b4 <lsm6dsv16x_xl_data_rate_set>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <LSM6DSV16X_ACC_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 8008140:	f04f 33ff 	mov.w	r3, #4294967295
 8008144:	e004      	b.n	8008150 <LSM6DSV16X_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <LSM6DSV16X_ACC_Disable>:
  * @brief  Disable the LSM6DSV16X accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_Disable(LSM6DSV16X_Object_t *pObj)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <LSM6DSV16X_ACC_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	e01f      	b.n	80081ae <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSV16X_OK)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f103 0220 	add.w	r2, r3, #32
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	3333      	adds	r3, #51	@ 0x33
 8008178:	4619      	mov	r1, r3
 800817a:	4610      	mov	r0, r2
 800817c:	f001 f96c 	bl	8009458 <lsm6dsv16x_xl_data_rate_get>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d002      	beq.n	800818c <LSM6DSV16X_ACC_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 8008186:	f04f 33ff 	mov.w	r3, #4294967295
 800818a:	e010      	b.n	80081ae <LSM6DSV16X_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3320      	adds	r3, #32
 8008190:	2100      	movs	r1, #0
 8008192:	4618      	mov	r0, r3
 8008194:	f001 f90e 	bl	80093b4 <lsm6dsv16x_xl_data_rate_set>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d002      	beq.n	80081a4 <LSM6DSV16X_ACC_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 800819e:	f04f 33ff 	mov.w	r3, #4294967295
 80081a2:	e004      	b.n	80081ae <LSM6DSV16X_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSV16X_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <LSM6DSV16X_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 80081c2:	2300      	movs	r3, #0
 80081c4:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	3320      	adds	r3, #32
 80081ca:	f107 020b 	add.w	r2, r7, #11
 80081ce:	4611      	mov	r1, r2
 80081d0:	4618      	mov	r0, r3
 80081d2:	f001 fca1 	bl	8009b18 <lsm6dsv16x_xl_full_scale_get>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <LSM6DSV16X_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 80081dc:	f04f 33ff 	mov.w	r3, #4294967295
 80081e0:	e023      	b.n	800822a <LSM6DSV16X_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale */
  switch (full_scale)
 80081e2:	7afb      	ldrb	r3, [r7, #11]
 80081e4:	2b03      	cmp	r3, #3
 80081e6:	d81b      	bhi.n	8008220 <LSM6DSV16X_ACC_GetSensitivity+0x68>
 80081e8:	a201      	add	r2, pc, #4	@ (adr r2, 80081f0 <LSM6DSV16X_ACC_GetSensitivity+0x38>)
 80081ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ee:	bf00      	nop
 80081f0:	08008201 	.word	0x08008201
 80081f4:	08008209 	.word	0x08008209
 80081f8:	08008211 	.word	0x08008211
 80081fc:	08008219 	.word	0x08008219
  {
    case LSM6DSV16X_2g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_2G;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	4a0c      	ldr	r2, [pc, #48]	@ (8008234 <LSM6DSV16X_ACC_GetSensitivity+0x7c>)
 8008204:	601a      	str	r2, [r3, #0]
      break;
 8008206:	e00f      	b.n	8008228 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_4g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_4G;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	4a0b      	ldr	r2, [pc, #44]	@ (8008238 <LSM6DSV16X_ACC_GetSensitivity+0x80>)
 800820c:	601a      	str	r2, [r3, #0]
      break;
 800820e:	e00b      	b.n	8008228 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_8g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_8G;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	4a0a      	ldr	r2, [pc, #40]	@ (800823c <LSM6DSV16X_ACC_GetSensitivity+0x84>)
 8008214:	601a      	str	r2, [r3, #0]
      break;
 8008216:	e007      	b.n	8008228 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    case LSM6DSV16X_16g:
      *Sensitivity = LSM6DSV16X_ACC_SENSITIVITY_FS_16G;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	4a09      	ldr	r2, [pc, #36]	@ (8008240 <LSM6DSV16X_ACC_GetSensitivity+0x88>)
 800821c:	601a      	str	r2, [r3, #0]
      break;
 800821e:	e003      	b.n	8008228 <LSM6DSV16X_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 8008220:	f04f 33ff 	mov.w	r3, #4294967295
 8008224:	60fb      	str	r3, [r7, #12]
      break;
 8008226:	bf00      	nop
  }

  return ret;
 8008228:	68fb      	ldr	r3, [r7, #12]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	3d79db23 	.word	0x3d79db23
 8008238:	3df9db23 	.word	0x3df9db23
 800823c:	3e79db23 	.word	0x3e79db23
 8008240:	3ef9db23 	.word	0x3ef9db23

08008244 <LSM6DSV16X_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	3320      	adds	r3, #32
 8008256:	f107 020b 	add.w	r2, r7, #11
 800825a:	4611      	mov	r1, r2
 800825c:	4618      	mov	r0, r3
 800825e:	f001 f8fb 	bl	8009458 <lsm6dsv16x_xl_data_rate_get>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <LSM6DSV16X_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008268:	f04f 33ff 	mov.w	r3, #4294967295
 800826c:	e0ea      	b.n	8008444 <LSM6DSV16X_ACC_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 800826e:	7afb      	ldrb	r3, [r7, #11]
 8008270:	2b2c      	cmp	r3, #44	@ 0x2c
 8008272:	f200 80e2 	bhi.w	800843a <LSM6DSV16X_ACC_GetOutputDataRate+0x1f6>
 8008276:	a201      	add	r2, pc, #4	@ (adr r2, 800827c <LSM6DSV16X_ACC_GetOutputDataRate+0x38>)
 8008278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827c:	08008331 	.word	0x08008331
 8008280:	0800833b 	.word	0x0800833b
 8008284:	08008343 	.word	0x08008343
 8008288:	08008353 	.word	0x08008353
 800828c:	0800836b 	.word	0x0800836b
 8008290:	08008383 	.word	0x08008383
 8008294:	0800839b 	.word	0x0800839b
 8008298:	080083b3 	.word	0x080083b3
 800829c:	080083cb 	.word	0x080083cb
 80082a0:	080083e3 	.word	0x080083e3
 80082a4:	080083fb 	.word	0x080083fb
 80082a8:	08008413 	.word	0x08008413
 80082ac:	0800842b 	.word	0x0800842b
 80082b0:	0800843b 	.word	0x0800843b
 80082b4:	0800843b 	.word	0x0800843b
 80082b8:	0800843b 	.word	0x0800843b
 80082bc:	0800843b 	.word	0x0800843b
 80082c0:	0800843b 	.word	0x0800843b
 80082c4:	0800843b 	.word	0x0800843b
 80082c8:	0800835b 	.word	0x0800835b
 80082cc:	08008373 	.word	0x08008373
 80082d0:	0800838b 	.word	0x0800838b
 80082d4:	080083a3 	.word	0x080083a3
 80082d8:	080083bb 	.word	0x080083bb
 80082dc:	080083d3 	.word	0x080083d3
 80082e0:	080083eb 	.word	0x080083eb
 80082e4:	08008403 	.word	0x08008403
 80082e8:	0800841b 	.word	0x0800841b
 80082ec:	08008433 	.word	0x08008433
 80082f0:	0800843b 	.word	0x0800843b
 80082f4:	0800843b 	.word	0x0800843b
 80082f8:	0800843b 	.word	0x0800843b
 80082fc:	0800843b 	.word	0x0800843b
 8008300:	0800843b 	.word	0x0800843b
 8008304:	0800843b 	.word	0x0800843b
 8008308:	0800834b 	.word	0x0800834b
 800830c:	08008363 	.word	0x08008363
 8008310:	0800837b 	.word	0x0800837b
 8008314:	08008393 	.word	0x08008393
 8008318:	080083ab 	.word	0x080083ab
 800831c:	080083c3 	.word	0x080083c3
 8008320:	080083db 	.word	0x080083db
 8008324:	080083f3 	.word	0x080083f3
 8008328:	0800840b 	.word	0x0800840b
 800832c:	08008423 	.word	0x08008423
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	f04f 0200 	mov.w	r2, #0
 8008336:	601a      	str	r2, [r3, #0]
      break;
 8008338:	e083      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	4a43      	ldr	r2, [pc, #268]	@ (800844c <LSM6DSV16X_ACC_GetOutputDataRate+0x208>)
 800833e:	601a      	str	r2, [r3, #0]
      break;
 8008340:	e07f      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	4a42      	ldr	r2, [pc, #264]	@ (8008450 <LSM6DSV16X_ACC_GetOutputDataRate+0x20c>)
 8008346:	601a      	str	r2, [r3, #0]
      break;
 8008348:	e07b      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	4a41      	ldr	r2, [pc, #260]	@ (8008454 <LSM6DSV16X_ACC_GetOutputDataRate+0x210>)
 800834e:	601a      	str	r2, [r3, #0]
      break;
 8008350:	e077      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	4a40      	ldr	r2, [pc, #256]	@ (8008458 <LSM6DSV16X_ACC_GetOutputDataRate+0x214>)
 8008356:	601a      	str	r2, [r3, #0]
      break;
 8008358:	e073      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	4a3f      	ldr	r2, [pc, #252]	@ (800845c <LSM6DSV16X_ACC_GetOutputDataRate+0x218>)
 800835e:	601a      	str	r2, [r3, #0]
      break;
 8008360:	e06f      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	4a3e      	ldr	r2, [pc, #248]	@ (8008460 <LSM6DSV16X_ACC_GetOutputDataRate+0x21c>)
 8008366:	601a      	str	r2, [r3, #0]
      break;
 8008368:	e06b      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	4a3d      	ldr	r2, [pc, #244]	@ (8008464 <LSM6DSV16X_ACC_GetOutputDataRate+0x220>)
 800836e:	601a      	str	r2, [r3, #0]
      break;
 8008370:	e067      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	4a3c      	ldr	r2, [pc, #240]	@ (8008468 <LSM6DSV16X_ACC_GetOutputDataRate+0x224>)
 8008376:	601a      	str	r2, [r3, #0]
      break;
 8008378:	e063      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	4a3b      	ldr	r2, [pc, #236]	@ (800846c <LSM6DSV16X_ACC_GetOutputDataRate+0x228>)
 800837e:	601a      	str	r2, [r3, #0]
      break;
 8008380:	e05f      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	4a3a      	ldr	r2, [pc, #232]	@ (8008470 <LSM6DSV16X_ACC_GetOutputDataRate+0x22c>)
 8008386:	601a      	str	r2, [r3, #0]
      break;
 8008388:	e05b      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	4a39      	ldr	r2, [pc, #228]	@ (8008474 <LSM6DSV16X_ACC_GetOutputDataRate+0x230>)
 800838e:	601a      	str	r2, [r3, #0]
      break;
 8008390:	e057      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	4a38      	ldr	r2, [pc, #224]	@ (8008478 <LSM6DSV16X_ACC_GetOutputDataRate+0x234>)
 8008396:	601a      	str	r2, [r3, #0]
      break;
 8008398:	e053      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	4a37      	ldr	r2, [pc, #220]	@ (800847c <LSM6DSV16X_ACC_GetOutputDataRate+0x238>)
 800839e:	601a      	str	r2, [r3, #0]
      break;
 80083a0:	e04f      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	4a36      	ldr	r2, [pc, #216]	@ (8008480 <LSM6DSV16X_ACC_GetOutputDataRate+0x23c>)
 80083a6:	601a      	str	r2, [r3, #0]
      break;
 80083a8:	e04b      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	4a35      	ldr	r2, [pc, #212]	@ (8008484 <LSM6DSV16X_ACC_GetOutputDataRate+0x240>)
 80083ae:	601a      	str	r2, [r3, #0]
      break;
 80083b0:	e047      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	4a34      	ldr	r2, [pc, #208]	@ (8008488 <LSM6DSV16X_ACC_GetOutputDataRate+0x244>)
 80083b6:	601a      	str	r2, [r3, #0]
      break;
 80083b8:	e043      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	4a33      	ldr	r2, [pc, #204]	@ (800848c <LSM6DSV16X_ACC_GetOutputDataRate+0x248>)
 80083be:	601a      	str	r2, [r3, #0]
      break;
 80083c0:	e03f      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	4a32      	ldr	r2, [pc, #200]	@ (8008490 <LSM6DSV16X_ACC_GetOutputDataRate+0x24c>)
 80083c6:	601a      	str	r2, [r3, #0]
      break;
 80083c8:	e03b      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	4a31      	ldr	r2, [pc, #196]	@ (8008494 <LSM6DSV16X_ACC_GetOutputDataRate+0x250>)
 80083ce:	601a      	str	r2, [r3, #0]
      break;
 80083d0:	e037      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	4a30      	ldr	r2, [pc, #192]	@ (8008498 <LSM6DSV16X_ACC_GetOutputDataRate+0x254>)
 80083d6:	601a      	str	r2, [r3, #0]
      break;
 80083d8:	e033      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	4a2f      	ldr	r2, [pc, #188]	@ (800849c <LSM6DSV16X_ACC_GetOutputDataRate+0x258>)
 80083de:	601a      	str	r2, [r3, #0]
      break;
 80083e0:	e02f      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	4a2e      	ldr	r2, [pc, #184]	@ (80084a0 <LSM6DSV16X_ACC_GetOutputDataRate+0x25c>)
 80083e6:	601a      	str	r2, [r3, #0]
      break;
 80083e8:	e02b      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	4a2d      	ldr	r2, [pc, #180]	@ (80084a4 <LSM6DSV16X_ACC_GetOutputDataRate+0x260>)
 80083ee:	601a      	str	r2, [r3, #0]
      break;
 80083f0:	e027      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	4a2c      	ldr	r2, [pc, #176]	@ (80084a8 <LSM6DSV16X_ACC_GetOutputDataRate+0x264>)
 80083f6:	601a      	str	r2, [r3, #0]
      break;
 80083f8:	e023      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	4a2b      	ldr	r2, [pc, #172]	@ (80084ac <LSM6DSV16X_ACC_GetOutputDataRate+0x268>)
 80083fe:	601a      	str	r2, [r3, #0]
      break;
 8008400:	e01f      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	4a2a      	ldr	r2, [pc, #168]	@ (80084b0 <LSM6DSV16X_ACC_GetOutputDataRate+0x26c>)
 8008406:	601a      	str	r2, [r3, #0]
      break;
 8008408:	e01b      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	4a29      	ldr	r2, [pc, #164]	@ (80084b4 <LSM6DSV16X_ACC_GetOutputDataRate+0x270>)
 800840e:	601a      	str	r2, [r3, #0]
      break;
 8008410:	e017      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	4a28      	ldr	r2, [pc, #160]	@ (80084b8 <LSM6DSV16X_ACC_GetOutputDataRate+0x274>)
 8008416:	601a      	str	r2, [r3, #0]
      break;
 8008418:	e013      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	4a27      	ldr	r2, [pc, #156]	@ (80084bc <LSM6DSV16X_ACC_GetOutputDataRate+0x278>)
 800841e:	601a      	str	r2, [r3, #0]
      break;
 8008420:	e00f      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	4a26      	ldr	r2, [pc, #152]	@ (80084c0 <LSM6DSV16X_ACC_GetOutputDataRate+0x27c>)
 8008426:	601a      	str	r2, [r3, #0]
      break;
 8008428:	e00b      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	4a25      	ldr	r2, [pc, #148]	@ (80084c4 <LSM6DSV16X_ACC_GetOutputDataRate+0x280>)
 800842e:	601a      	str	r2, [r3, #0]
      break;
 8008430:	e007      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	4a24      	ldr	r2, [pc, #144]	@ (80084c8 <LSM6DSV16X_ACC_GetOutputDataRate+0x284>)
 8008436:	601a      	str	r2, [r3, #0]
      break;
 8008438:	e003      	b.n	8008442 <LSM6DSV16X_ACC_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 800843a:	f04f 33ff 	mov.w	r3, #4294967295
 800843e:	60fb      	str	r3, [r7, #12]
      break;
 8008440:	bf00      	nop
  }

  return ret;
 8008442:	68fb      	ldr	r3, [r7, #12]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	3ff00000 	.word	0x3ff00000
 8008450:	40f00000 	.word	0x40f00000
 8008454:	41480000 	.word	0x41480000
 8008458:	41700000 	.word	0x41700000
 800845c:	417a0000 	.word	0x417a0000
 8008460:	41c80000 	.word	0x41c80000
 8008464:	41f00000 	.word	0x41f00000
 8008468:	41fa0000 	.word	0x41fa0000
 800846c:	42480000 	.word	0x42480000
 8008470:	42700000 	.word	0x42700000
 8008474:	427a0000 	.word	0x427a0000
 8008478:	42c80000 	.word	0x42c80000
 800847c:	42f00000 	.word	0x42f00000
 8008480:	42fa0000 	.word	0x42fa0000
 8008484:	43480000 	.word	0x43480000
 8008488:	43700000 	.word	0x43700000
 800848c:	437a0000 	.word	0x437a0000
 8008490:	43c80000 	.word	0x43c80000
 8008494:	43f00000 	.word	0x43f00000
 8008498:	43fa0000 	.word	0x43fa0000
 800849c:	44480000 	.word	0x44480000
 80084a0:	44700000 	.word	0x44700000
 80084a4:	447a0000 	.word	0x447a0000
 80084a8:	44c80000 	.word	0x44c80000
 80084ac:	44f00000 	.word	0x44f00000
 80084b0:	44fa0000 	.word	0x44fa0000
 80084b4:	45480000 	.word	0x45480000
 80084b8:	45700000 	.word	0x45700000
 80084bc:	457a0000 	.word	0x457a0000
 80084c0:	45c80000 	.word	0x45c80000
 80084c4:	45f00000 	.word	0x45f00000
 80084c8:	45fa0000 	.word	0x45fa0000

080084cc <LSM6DSV16X_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->acc_is_enabled == 1U)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d106      	bne.n	80084f0 <LSM6DSV16X_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80084e2:	ed97 0a00 	vldr	s0, [r7]
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fc52 	bl	8008d90 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>
 80084ec:	4603      	mov	r3, r0
 80084ee:	e005      	b.n	80084fc <LSM6DSV16X_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80084f0:	ed97 0a00 	vldr	s0, [r7]
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 fced 	bl	8008ed4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>
 80084fa:	4603      	mov	r3, r0
  }
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <LSM6DSV16X_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t *FullScale)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_xl_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	3320      	adds	r3, #32
 8008516:	f107 020b 	add.w	r2, r7, #11
 800851a:	4611      	mov	r1, r2
 800851c:	4618      	mov	r0, r3
 800851e:	f001 fafb 	bl	8009b18 <lsm6dsv16x_xl_full_scale_get>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d002      	beq.n	800852e <LSM6DSV16X_ACC_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008528:	f04f 33ff 	mov.w	r3, #4294967295
 800852c:	e023      	b.n	8008576 <LSM6DSV16X_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800852e:	7afb      	ldrb	r3, [r7, #11]
 8008530:	2b03      	cmp	r3, #3
 8008532:	d81b      	bhi.n	800856c <LSM6DSV16X_ACC_GetFullScale+0x68>
 8008534:	a201      	add	r2, pc, #4	@ (adr r2, 800853c <LSM6DSV16X_ACC_GetFullScale+0x38>)
 8008536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853a:	bf00      	nop
 800853c:	0800854d 	.word	0x0800854d
 8008540:	08008555 	.word	0x08008555
 8008544:	0800855d 	.word	0x0800855d
 8008548:	08008565 	.word	0x08008565
  {
    case LSM6DSV16X_2g:
      *FullScale =  2;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2202      	movs	r2, #2
 8008550:	601a      	str	r2, [r3, #0]
      break;
 8008552:	e00f      	b.n	8008574 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_4g:
      *FullScale =  4;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2204      	movs	r2, #4
 8008558:	601a      	str	r2, [r3, #0]
      break;
 800855a:	e00b      	b.n	8008574 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_8g:
      *FullScale =  8;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2208      	movs	r2, #8
 8008560:	601a      	str	r2, [r3, #0]
      break;
 8008562:	e007      	b.n	8008574 <LSM6DSV16X_ACC_GetFullScale+0x70>

    case LSM6DSV16X_16g:
      *FullScale = 16;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	2210      	movs	r2, #16
 8008568:	601a      	str	r2, [r3, #0]
      break;
 800856a:	e003      	b.n	8008574 <LSM6DSV16X_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSV16X_ERROR;
 800856c:	f04f 33ff 	mov.w	r3, #4294967295
 8008570:	60fb      	str	r3, [r7, #12]
      break;
 8008572:	bf00      	nop
  }

  return ret;
 8008574:	68fb      	ldr	r3, [r7, #12]
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop

08008580 <LSM6DSV16X_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_xl_full_scale_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
           : (FullScale <= 4) ? LSM6DSV16X_4g
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2b02      	cmp	r3, #2
 800858e:	dd0b      	ble.n	80085a8 <LSM6DSV16X_ACC_SetFullScale+0x28>
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2b04      	cmp	r3, #4
 8008594:	dd06      	ble.n	80085a4 <LSM6DSV16X_ACC_SetFullScale+0x24>
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	2b08      	cmp	r3, #8
 800859a:	dc01      	bgt.n	80085a0 <LSM6DSV16X_ACC_SetFullScale+0x20>
 800859c:	2302      	movs	r3, #2
 800859e:	e004      	b.n	80085aa <LSM6DSV16X_ACC_SetFullScale+0x2a>
 80085a0:	2303      	movs	r3, #3
 80085a2:	e002      	b.n	80085aa <LSM6DSV16X_ACC_SetFullScale+0x2a>
 80085a4:	2301      	movs	r3, #1
 80085a6:	e000      	b.n	80085aa <LSM6DSV16X_ACC_SetFullScale+0x2a>
 80085a8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSV16X_2g
 80085aa:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSV16X_8g
           :                    LSM6DSV16X_16g;

  if (lsm6dsv16x_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	3320      	adds	r3, #32
 80085b0:	7bfa      	ldrb	r2, [r7, #15]
 80085b2:	4611      	mov	r1, r2
 80085b4:	4618      	mov	r0, r3
 80085b6:	f001 fa89 	bl	8009acc <lsm6dsv16x_xl_full_scale_set>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d002      	beq.n	80085c6 <LSM6DSV16X_ACC_SetFullScale+0x46>
  {
    return LSM6DSV16X_ERROR;
 80085c0:	f04f 33ff 	mov.w	r3, #4294967295
 80085c4:	e000      	b.n	80085c8 <LSM6DSV16X_ACC_SetFullScale+0x48>
  }

  return LSM6DSV16X_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <LSM6DSV16X_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	3320      	adds	r3, #32
 80085de:	f107 0208 	add.w	r2, r7, #8
 80085e2:	4611      	mov	r1, r2
 80085e4:	4618      	mov	r0, r3
 80085e6:	f001 fb22 	bl	8009c2e <lsm6dsv16x_acceleration_raw_get>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d002      	beq.n	80085f6 <LSM6DSV16X_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 80085f0:	f04f 33ff 	mov.w	r3, #4294967295
 80085f4:	e00c      	b.n	8008610 <LSM6DSV16X_ACC_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 80085f6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80085fe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8008606:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <LSM6DSV16X_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_ACC_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *Acceleration)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8008622:	f04f 0300 	mov.w	r3, #0
 8008626:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	3320      	adds	r3, #32
 800862c:	f107 0210 	add.w	r2, r7, #16
 8008630:	4611      	mov	r1, r2
 8008632:	4618      	mov	r0, r3
 8008634:	f001 fafb 	bl	8009c2e <lsm6dsv16x_acceleration_raw_get>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <LSM6DSV16X_ACC_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 800863e:	f04f 33ff 	mov.w	r3, #4294967295
 8008642:	e03c      	b.n	80086be <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8008644:	f107 030c 	add.w	r3, r7, #12
 8008648:	4619      	mov	r1, r3
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7ff fdb4 	bl	80081b8 <LSM6DSV16X_ACC_GetSensitivity>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <LSM6DSV16X_ACC_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 8008656:	f04f 33ff 	mov.w	r3, #4294967295
 800865a:	e030      	b.n	80086be <LSM6DSV16X_ACC_GetAxes+0xa6>
  }

  /* Calculate the data */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800865c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008660:	ee07 3a90 	vmov	s15, r3
 8008664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008668:	edd7 7a03 	vldr	s15, [r7, #12]
 800866c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008674:	ee17 2a90 	vmov	r2, s15
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800867c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008680:	ee07 3a90 	vmov	s15, r3
 8008684:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008688:	edd7 7a03 	vldr	s15, [r7, #12]
 800868c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008694:	ee17 2a90 	vmov	r2, s15
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800869c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80086a0:	ee07 3a90 	vmov	s15, r3
 80086a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80086a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80086ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80086b4:	ee17 2a90 	vmov	r2, s15
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3718      	adds	r7, #24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <LSM6DSV16X_GYRO_Enable>:
  * @brief  Enable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Enable(LSM6DSV16X_Object_t *pObj)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b082      	sub	sp, #8
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d101      	bne.n	80086dc <LSM6DSV16X_GYRO_Enable+0x16>
  {
    return LSM6DSV16X_OK;
 80086d8:	2300      	movs	r3, #0
 80086da:	e014      	b.n	8008706 <LSM6DSV16X_GYRO_Enable+0x40>
  }

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSV16X_OK)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f103 0220 	add.w	r2, r3, #32
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80086e8:	4619      	mov	r1, r3
 80086ea:	4610      	mov	r0, r2
 80086ec:	f000 ffc4 	bl	8009678 <lsm6dsv16x_gy_data_rate_set>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <LSM6DSV16X_GYRO_Enable+0x36>
  {
    return LSM6DSV16X_ERROR;
 80086f6:	f04f 33ff 	mov.w	r3, #4294967295
 80086fa:	e004      	b.n	8008706 <LSM6DSV16X_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <LSM6DSV16X_GYRO_Disable>:
  * @brief  Disable the LSM6DSV16X gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_Disable(LSM6DSV16X_Object_t *pObj)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b082      	sub	sp, #8
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <LSM6DSV16X_GYRO_Disable+0x16>
  {
    return LSM6DSV16X_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	e01f      	b.n	8008764 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSV16X_OK)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f103 0220 	add.w	r2, r3, #32
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	3334      	adds	r3, #52	@ 0x34
 800872e:	4619      	mov	r1, r3
 8008730:	4610      	mov	r0, r2
 8008732:	f000 fff1 	bl	8009718 <lsm6dsv16x_gy_data_rate_get>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <LSM6DSV16X_GYRO_Disable+0x34>
  {
    return LSM6DSV16X_ERROR;
 800873c:	f04f 33ff 	mov.w	r3, #4294967295
 8008740:	e010      	b.n	8008764 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), LSM6DSV16X_ODR_OFF) != LSM6DSV16X_OK)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	3320      	adds	r3, #32
 8008746:	2100      	movs	r1, #0
 8008748:	4618      	mov	r0, r3
 800874a:	f000 ff95 	bl	8009678 <lsm6dsv16x_gy_data_rate_set>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <LSM6DSV16X_GYRO_Disable+0x4c>
  {
    return LSM6DSV16X_ERROR;
 8008754:	f04f 33ff 	mov.w	r3, #4294967295
 8008758:	e004      	b.n	8008764 <LSM6DSV16X_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSV16X_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <LSM6DSV16X_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetSensitivity(LSM6DSV16X_Object_t *pObj, float *Sensitivity)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t full_scale;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSV16X_OK)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	3320      	adds	r3, #32
 800877e:	f107 020b 	add.w	r2, r7, #11
 8008782:	4611      	mov	r1, r2
 8008784:	4618      	mov	r0, r3
 8008786:	f001 f949 	bl	8009a1c <lsm6dsv16x_gy_full_scale_get>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <LSM6DSV16X_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008790:	f04f 33ff 	mov.w	r3, #4294967295
 8008794:	e03d      	b.n	8008812 <LSM6DSV16X_GYRO_GetSensitivity+0xa6>
  }

  /* Store the sensitivity based on actual full scale */
  switch (full_scale)
 8008796:	7afb      	ldrb	r3, [r7, #11]
 8008798:	2b0c      	cmp	r3, #12
 800879a:	d835      	bhi.n	8008808 <LSM6DSV16X_GYRO_GetSensitivity+0x9c>
 800879c:	a201      	add	r2, pc, #4	@ (adr r2, 80087a4 <LSM6DSV16X_GYRO_GetSensitivity+0x38>)
 800879e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a2:	bf00      	nop
 80087a4:	080087d9 	.word	0x080087d9
 80087a8:	080087e1 	.word	0x080087e1
 80087ac:	080087e9 	.word	0x080087e9
 80087b0:	080087f1 	.word	0x080087f1
 80087b4:	080087f9 	.word	0x080087f9
 80087b8:	08008809 	.word	0x08008809
 80087bc:	08008809 	.word	0x08008809
 80087c0:	08008809 	.word	0x08008809
 80087c4:	08008809 	.word	0x08008809
 80087c8:	08008809 	.word	0x08008809
 80087cc:	08008809 	.word	0x08008809
 80087d0:	08008809 	.word	0x08008809
 80087d4:	08008801 	.word	0x08008801
  {
    case LSM6DSV16X_125dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_125DPS;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	4a10      	ldr	r2, [pc, #64]	@ (800881c <LSM6DSV16X_GYRO_GetSensitivity+0xb0>)
 80087dc:	601a      	str	r2, [r3, #0]
      break;
 80087de:	e017      	b.n	8008810 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_250dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_250DPS;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	4a0f      	ldr	r2, [pc, #60]	@ (8008820 <LSM6DSV16X_GYRO_GetSensitivity+0xb4>)
 80087e4:	601a      	str	r2, [r3, #0]
      break;
 80087e6:	e013      	b.n	8008810 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_500dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_500DPS;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	4a0e      	ldr	r2, [pc, #56]	@ (8008824 <LSM6DSV16X_GYRO_GetSensitivity+0xb8>)
 80087ec:	601a      	str	r2, [r3, #0]
      break;
 80087ee:	e00f      	b.n	8008810 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_1000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_1000DPS;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	4a0d      	ldr	r2, [pc, #52]	@ (8008828 <LSM6DSV16X_GYRO_GetSensitivity+0xbc>)
 80087f4:	601a      	str	r2, [r3, #0]
      break;
 80087f6:	e00b      	b.n	8008810 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_2000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_2000DPS;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	4a0c      	ldr	r2, [pc, #48]	@ (800882c <LSM6DSV16X_GYRO_GetSensitivity+0xc0>)
 80087fc:	601a      	str	r2, [r3, #0]
      break;
 80087fe:	e007      	b.n	8008810 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    case LSM6DSV16X_4000dps:
      *Sensitivity = LSM6DSV16X_GYRO_SENSITIVITY_FS_4000DPS;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	4a0b      	ldr	r2, [pc, #44]	@ (8008830 <LSM6DSV16X_GYRO_GetSensitivity+0xc4>)
 8008804:	601a      	str	r2, [r3, #0]
      break;
 8008806:	e003      	b.n	8008810 <LSM6DSV16X_GYRO_GetSensitivity+0xa4>

    default:
      ret = LSM6DSV16X_ERROR;
 8008808:	f04f 33ff 	mov.w	r3, #4294967295
 800880c:	60fb      	str	r3, [r7, #12]
      break;
 800880e:	bf00      	nop
  }

  return ret;
 8008810:	68fb      	ldr	r3, [r7, #12]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	408c0000 	.word	0x408c0000
 8008820:	410c0000 	.word	0x410c0000
 8008824:	418c0000 	.word	0x418c0000
 8008828:	420c0000 	.word	0x420c0000
 800882c:	428c0000 	.word	0x428c0000
 8008830:	430c0000 	.word	0x430c0000

08008834 <LSM6DSV16X_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetOutputDataRate(LSM6DSV16X_Object_t *pObj, float *Odr)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_data_rate_t odr_low_level;

  /* Get current output data rate */
  if (lsm6dsv16x_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSV16X_OK)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	3320      	adds	r3, #32
 8008846:	f107 020b 	add.w	r2, r7, #11
 800884a:	4611      	mov	r1, r2
 800884c:	4618      	mov	r0, r3
 800884e:	f000 ff63 	bl	8009718 <lsm6dsv16x_gy_data_rate_get>
 8008852:	4603      	mov	r3, r0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <LSM6DSV16X_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008858:	f04f 33ff 	mov.w	r3, #4294967295
 800885c:	e0ea      	b.n	8008a34 <LSM6DSV16X_GYRO_GetOutputDataRate+0x200>
  }

  switch (odr_low_level)
 800885e:	7afb      	ldrb	r3, [r7, #11]
 8008860:	2b2c      	cmp	r3, #44	@ 0x2c
 8008862:	f200 80e2 	bhi.w	8008a2a <LSM6DSV16X_GYRO_GetOutputDataRate+0x1f6>
 8008866:	a201      	add	r2, pc, #4	@ (adr r2, 800886c <LSM6DSV16X_GYRO_GetOutputDataRate+0x38>)
 8008868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886c:	08008921 	.word	0x08008921
 8008870:	0800892b 	.word	0x0800892b
 8008874:	08008933 	.word	0x08008933
 8008878:	08008943 	.word	0x08008943
 800887c:	0800895b 	.word	0x0800895b
 8008880:	08008973 	.word	0x08008973
 8008884:	0800898b 	.word	0x0800898b
 8008888:	080089a3 	.word	0x080089a3
 800888c:	080089bb 	.word	0x080089bb
 8008890:	080089d3 	.word	0x080089d3
 8008894:	080089eb 	.word	0x080089eb
 8008898:	08008a03 	.word	0x08008a03
 800889c:	08008a1b 	.word	0x08008a1b
 80088a0:	08008a2b 	.word	0x08008a2b
 80088a4:	08008a2b 	.word	0x08008a2b
 80088a8:	08008a2b 	.word	0x08008a2b
 80088ac:	08008a2b 	.word	0x08008a2b
 80088b0:	08008a2b 	.word	0x08008a2b
 80088b4:	08008a2b 	.word	0x08008a2b
 80088b8:	0800894b 	.word	0x0800894b
 80088bc:	08008963 	.word	0x08008963
 80088c0:	0800897b 	.word	0x0800897b
 80088c4:	08008993 	.word	0x08008993
 80088c8:	080089ab 	.word	0x080089ab
 80088cc:	080089c3 	.word	0x080089c3
 80088d0:	080089db 	.word	0x080089db
 80088d4:	080089f3 	.word	0x080089f3
 80088d8:	08008a0b 	.word	0x08008a0b
 80088dc:	08008a23 	.word	0x08008a23
 80088e0:	08008a2b 	.word	0x08008a2b
 80088e4:	08008a2b 	.word	0x08008a2b
 80088e8:	08008a2b 	.word	0x08008a2b
 80088ec:	08008a2b 	.word	0x08008a2b
 80088f0:	08008a2b 	.word	0x08008a2b
 80088f4:	08008a2b 	.word	0x08008a2b
 80088f8:	0800893b 	.word	0x0800893b
 80088fc:	08008953 	.word	0x08008953
 8008900:	0800896b 	.word	0x0800896b
 8008904:	08008983 	.word	0x08008983
 8008908:	0800899b 	.word	0x0800899b
 800890c:	080089b3 	.word	0x080089b3
 8008910:	080089cb 	.word	0x080089cb
 8008914:	080089e3 	.word	0x080089e3
 8008918:	080089fb 	.word	0x080089fb
 800891c:	08008a13 	.word	0x08008a13
  {
    case LSM6DSV16X_ODR_OFF:
      *Odr = 0.0f;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	f04f 0200 	mov.w	r2, #0
 8008926:	601a      	str	r2, [r3, #0]
      break;
 8008928:	e083      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *Odr = 1.875f;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	4a43      	ldr	r2, [pc, #268]	@ (8008a3c <LSM6DSV16X_GYRO_GetOutputDataRate+0x208>)
 800892e:	601a      	str	r2, [r3, #0]
      break;
 8008930:	e07f      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *Odr = 7.5f;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	4a42      	ldr	r2, [pc, #264]	@ (8008a40 <LSM6DSV16X_GYRO_GetOutputDataRate+0x20c>)
 8008936:	601a      	str	r2, [r3, #0]
      break;
 8008938:	e07b      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_12Hz5:
      *Odr = 12.5f;
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	4a41      	ldr	r2, [pc, #260]	@ (8008a44 <LSM6DSV16X_GYRO_GetOutputDataRate+0x210>)
 800893e:	601a      	str	r2, [r3, #0]
      break;
 8008940:	e077      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_15Hz:
      *Odr = 15.0f;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	4a40      	ldr	r2, [pc, #256]	@ (8008a48 <LSM6DSV16X_GYRO_GetOutputDataRate+0x214>)
 8008946:	601a      	str	r2, [r3, #0]
      break;
 8008948:	e073      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_15Hz625:
      *Odr = 15.625f;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	4a3f      	ldr	r2, [pc, #252]	@ (8008a4c <LSM6DSV16X_GYRO_GetOutputDataRate+0x218>)
 800894e:	601a      	str	r2, [r3, #0]
      break;
 8008950:	e06f      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_25Hz:
      *Odr = 25.0f;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	4a3e      	ldr	r2, [pc, #248]	@ (8008a50 <LSM6DSV16X_GYRO_GetOutputDataRate+0x21c>)
 8008956:	601a      	str	r2, [r3, #0]
      break;
 8008958:	e06b      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_30Hz:
      *Odr = 30.0f;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	4a3d      	ldr	r2, [pc, #244]	@ (8008a54 <LSM6DSV16X_GYRO_GetOutputDataRate+0x220>)
 800895e:	601a      	str	r2, [r3, #0]
      break;
 8008960:	e067      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_31Hz25:
      *Odr = 31.25f;
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	4a3c      	ldr	r2, [pc, #240]	@ (8008a58 <LSM6DSV16X_GYRO_GetOutputDataRate+0x224>)
 8008966:	601a      	str	r2, [r3, #0]
      break;
 8008968:	e063      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_50Hz:
      *Odr = 50.0f;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	4a3b      	ldr	r2, [pc, #236]	@ (8008a5c <LSM6DSV16X_GYRO_GetOutputDataRate+0x228>)
 800896e:	601a      	str	r2, [r3, #0]
      break;
 8008970:	e05f      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_60Hz:
      *Odr = 60.0f;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	4a3a      	ldr	r2, [pc, #232]	@ (8008a60 <LSM6DSV16X_GYRO_GetOutputDataRate+0x22c>)
 8008976:	601a      	str	r2, [r3, #0]
      break;
 8008978:	e05b      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_62Hz5:
      *Odr = 62.5f;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	4a39      	ldr	r2, [pc, #228]	@ (8008a64 <LSM6DSV16X_GYRO_GetOutputDataRate+0x230>)
 800897e:	601a      	str	r2, [r3, #0]
      break;
 8008980:	e057      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_100Hz:
      *Odr = 100.0f;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	4a38      	ldr	r2, [pc, #224]	@ (8008a68 <LSM6DSV16X_GYRO_GetOutputDataRate+0x234>)
 8008986:	601a      	str	r2, [r3, #0]
      break;
 8008988:	e053      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_120Hz:
      *Odr = 120.0f;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	4a37      	ldr	r2, [pc, #220]	@ (8008a6c <LSM6DSV16X_GYRO_GetOutputDataRate+0x238>)
 800898e:	601a      	str	r2, [r3, #0]
      break;
 8008990:	e04f      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_125Hz:
      *Odr = 125.0f;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	4a36      	ldr	r2, [pc, #216]	@ (8008a70 <LSM6DSV16X_GYRO_GetOutputDataRate+0x23c>)
 8008996:	601a      	str	r2, [r3, #0]
      break;
 8008998:	e04b      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_200Hz:
      *Odr = 200.0f;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	4a35      	ldr	r2, [pc, #212]	@ (8008a74 <LSM6DSV16X_GYRO_GetOutputDataRate+0x240>)
 800899e:	601a      	str	r2, [r3, #0]
      break;
 80089a0:	e047      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_240Hz:
      *Odr = 240.0f;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	4a34      	ldr	r2, [pc, #208]	@ (8008a78 <LSM6DSV16X_GYRO_GetOutputDataRate+0x244>)
 80089a6:	601a      	str	r2, [r3, #0]
      break;
 80089a8:	e043      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_250Hz:
      *Odr = 250.0f;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	4a33      	ldr	r2, [pc, #204]	@ (8008a7c <LSM6DSV16X_GYRO_GetOutputDataRate+0x248>)
 80089ae:	601a      	str	r2, [r3, #0]
      break;
 80089b0:	e03f      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_400Hz:
      *Odr = 400.0f;
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	4a32      	ldr	r2, [pc, #200]	@ (8008a80 <LSM6DSV16X_GYRO_GetOutputDataRate+0x24c>)
 80089b6:	601a      	str	r2, [r3, #0]
      break;
 80089b8:	e03b      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_480Hz:
      *Odr = 480.0f;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	4a31      	ldr	r2, [pc, #196]	@ (8008a84 <LSM6DSV16X_GYRO_GetOutputDataRate+0x250>)
 80089be:	601a      	str	r2, [r3, #0]
      break;
 80089c0:	e037      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_500Hz:
      *Odr = 500.0f;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	4a30      	ldr	r2, [pc, #192]	@ (8008a88 <LSM6DSV16X_GYRO_GetOutputDataRate+0x254>)
 80089c6:	601a      	str	r2, [r3, #0]
      break;
 80089c8:	e033      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_800Hz:
      *Odr = 800.0f;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	4a2f      	ldr	r2, [pc, #188]	@ (8008a8c <LSM6DSV16X_GYRO_GetOutputDataRate+0x258>)
 80089ce:	601a      	str	r2, [r3, #0]
      break;
 80089d0:	e02f      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_960Hz:
      *Odr = 960.0f;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	4a2e      	ldr	r2, [pc, #184]	@ (8008a90 <LSM6DSV16X_GYRO_GetOutputDataRate+0x25c>)
 80089d6:	601a      	str	r2, [r3, #0]
      break;
 80089d8:	e02b      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_1000Hz:
      *Odr = 1000.0f;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	4a2d      	ldr	r2, [pc, #180]	@ (8008a94 <LSM6DSV16X_GYRO_GetOutputDataRate+0x260>)
 80089de:	601a      	str	r2, [r3, #0]
      break;
 80089e0:	e027      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_1600Hz:
      *Odr = 1600.0f;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	4a2c      	ldr	r2, [pc, #176]	@ (8008a98 <LSM6DSV16X_GYRO_GetOutputDataRate+0x264>)
 80089e6:	601a      	str	r2, [r3, #0]
      break;
 80089e8:	e023      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_1920Hz:
      *Odr = 1920.0f;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	4a2b      	ldr	r2, [pc, #172]	@ (8008a9c <LSM6DSV16X_GYRO_GetOutputDataRate+0x268>)
 80089ee:	601a      	str	r2, [r3, #0]
      break;
 80089f0:	e01f      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_2000Hz:
      *Odr = 2000.0f;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	4a2a      	ldr	r2, [pc, #168]	@ (8008aa0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x26c>)
 80089f6:	601a      	str	r2, [r3, #0]
      break;
 80089f8:	e01b      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_3200Hz:
      *Odr = 3200.0f;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	4a29      	ldr	r2, [pc, #164]	@ (8008aa4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x270>)
 80089fe:	601a      	str	r2, [r3, #0]
      break;
 8008a00:	e017      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_3840Hz:
      *Odr = 3840.0f;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	4a28      	ldr	r2, [pc, #160]	@ (8008aa8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x274>)
 8008a06:	601a      	str	r2, [r3, #0]
      break;
 8008a08:	e013      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_4000Hz:
      *Odr = 4000.0f;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	4a27      	ldr	r2, [pc, #156]	@ (8008aac <LSM6DSV16X_GYRO_GetOutputDataRate+0x278>)
 8008a0e:	601a      	str	r2, [r3, #0]
      break;
 8008a10:	e00f      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA02_AT_6400Hz:
      *Odr = 6400.0f;
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	4a26      	ldr	r2, [pc, #152]	@ (8008ab0 <LSM6DSV16X_GYRO_GetOutputDataRate+0x27c>)
 8008a16:	601a      	str	r2, [r3, #0]
      break;
 8008a18:	e00b      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_AT_7680Hz:
      *Odr = 7680.0f;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	4a25      	ldr	r2, [pc, #148]	@ (8008ab4 <LSM6DSV16X_GYRO_GetOutputDataRate+0x280>)
 8008a1e:	601a      	str	r2, [r3, #0]
      break;
 8008a20:	e007      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    case LSM6DSV16X_ODR_HA01_AT_8000Hz:
      *Odr = 8000.0f;
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	4a24      	ldr	r2, [pc, #144]	@ (8008ab8 <LSM6DSV16X_GYRO_GetOutputDataRate+0x284>)
 8008a26:	601a      	str	r2, [r3, #0]
      break;
 8008a28:	e003      	b.n	8008a32 <LSM6DSV16X_GYRO_GetOutputDataRate+0x1fe>

    default:
      ret = LSM6DSV16X_ERROR;
 8008a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a2e:	60fb      	str	r3, [r7, #12]
      break;
 8008a30:	bf00      	nop
  }

  return ret;
 8008a32:	68fb      	ldr	r3, [r7, #12]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	3ff00000 	.word	0x3ff00000
 8008a40:	40f00000 	.word	0x40f00000
 8008a44:	41480000 	.word	0x41480000
 8008a48:	41700000 	.word	0x41700000
 8008a4c:	417a0000 	.word	0x417a0000
 8008a50:	41c80000 	.word	0x41c80000
 8008a54:	41f00000 	.word	0x41f00000
 8008a58:	41fa0000 	.word	0x41fa0000
 8008a5c:	42480000 	.word	0x42480000
 8008a60:	42700000 	.word	0x42700000
 8008a64:	427a0000 	.word	0x427a0000
 8008a68:	42c80000 	.word	0x42c80000
 8008a6c:	42f00000 	.word	0x42f00000
 8008a70:	42fa0000 	.word	0x42fa0000
 8008a74:	43480000 	.word	0x43480000
 8008a78:	43700000 	.word	0x43700000
 8008a7c:	437a0000 	.word	0x437a0000
 8008a80:	43c80000 	.word	0x43c80000
 8008a84:	43f00000 	.word	0x43f00000
 8008a88:	43fa0000 	.word	0x43fa0000
 8008a8c:	44480000 	.word	0x44480000
 8008a90:	44700000 	.word	0x44700000
 8008a94:	447a0000 	.word	0x447a0000
 8008a98:	44c80000 	.word	0x44c80000
 8008a9c:	44f00000 	.word	0x44f00000
 8008aa0:	44fa0000 	.word	0x44fa0000
 8008aa4:	45480000 	.word	0x45480000
 8008aa8:	45700000 	.word	0x45700000
 8008aac:	457a0000 	.word	0x457a0000
 8008ab0:	45c80000 	.word	0x45c80000
 8008ab4:	45f00000 	.word	0x45f00000
 8008ab8:	45fa0000 	.word	0x45fa0000

08008abc <LSM6DSV16X_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetOutputDataRate(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	ed87 0a00 	vstr	s0, [r7]
  if (pObj->gyro_is_enabled == 1U)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d106      	bne.n	8008ae0 <LSM6DSV16X_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8008ad2:	ed97 0a00 	vldr	s0, [r7]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fa94 	bl	8009004 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>
 8008adc:	4603      	mov	r3, r0
 8008ade:	e005      	b.n	8008aec <LSM6DSV16X_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8008ae0:	ed97 0a00 	vldr	s0, [r7]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fb23 	bl	8009130 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>
 8008aea:	4603      	mov	r3, r0
  }
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <LSM6DSV16X_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetFullScale(LSM6DSV16X_Object_t *pObj, int32_t  *FullScale)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSV16X_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_gy_full_scale_t fs_low_level;

  /* Read actual full scale selection from sensor */
  if (lsm6dsv16x_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSV16X_OK)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	3320      	adds	r3, #32
 8008b06:	f107 020b 	add.w	r2, r7, #11
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 ff85 	bl	8009a1c <lsm6dsv16x_gy_full_scale_get>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d002      	beq.n	8008b1e <LSM6DSV16X_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSV16X_ERROR;
 8008b18:	f04f 33ff 	mov.w	r3, #4294967295
 8008b1c:	e041      	b.n	8008ba2 <LSM6DSV16X_GYRO_GetFullScale+0xae>
  }

  switch (fs_low_level)
 8008b1e:	7afb      	ldrb	r3, [r7, #11]
 8008b20:	2b0c      	cmp	r3, #12
 8008b22:	d839      	bhi.n	8008b98 <LSM6DSV16X_GYRO_GetFullScale+0xa4>
 8008b24:	a201      	add	r2, pc, #4	@ (adr r2, 8008b2c <LSM6DSV16X_GYRO_GetFullScale+0x38>)
 8008b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2a:	bf00      	nop
 8008b2c:	08008b61 	.word	0x08008b61
 8008b30:	08008b69 	.word	0x08008b69
 8008b34:	08008b71 	.word	0x08008b71
 8008b38:	08008b7b 	.word	0x08008b7b
 8008b3c:	08008b85 	.word	0x08008b85
 8008b40:	08008b99 	.word	0x08008b99
 8008b44:	08008b99 	.word	0x08008b99
 8008b48:	08008b99 	.word	0x08008b99
 8008b4c:	08008b99 	.word	0x08008b99
 8008b50:	08008b99 	.word	0x08008b99
 8008b54:	08008b99 	.word	0x08008b99
 8008b58:	08008b99 	.word	0x08008b99
 8008b5c:	08008b8f 	.word	0x08008b8f
  {
    case LSM6DSV16X_125dps:
      *FullScale =  125;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	227d      	movs	r2, #125	@ 0x7d
 8008b64:	601a      	str	r2, [r3, #0]
      break;
 8008b66:	e01b      	b.n	8008ba0 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_250dps:
      *FullScale =  250;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	22fa      	movs	r2, #250	@ 0xfa
 8008b6c:	601a      	str	r2, [r3, #0]
      break;
 8008b6e:	e017      	b.n	8008ba0 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_500dps:
      *FullScale =  500;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8008b76:	601a      	str	r2, [r3, #0]
      break;
 8008b78:	e012      	b.n	8008ba0 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_1000dps:
      *FullScale = 1000;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008b80:	601a      	str	r2, [r3, #0]
      break;
 8008b82:	e00d      	b.n	8008ba0 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_2000dps:
      *FullScale = 2000;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8008b8a:	601a      	str	r2, [r3, #0]
      break;
 8008b8c:	e008      	b.n	8008ba0 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    case LSM6DSV16X_4000dps:
      *FullScale = 4000;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8008b94:	601a      	str	r2, [r3, #0]
      break;
 8008b96:	e003      	b.n	8008ba0 <LSM6DSV16X_GYRO_GetFullScale+0xac>

    default:
      ret = LSM6DSV16X_ERROR;
 8008b98:	f04f 33ff 	mov.w	r3, #4294967295
 8008b9c:	60fb      	str	r3, [r7, #12]
      break;
 8008b9e:	bf00      	nop
  }

  return ret;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop

08008bac <LSM6DSV16X_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_SetFullScale(LSM6DSV16X_Object_t *pObj, int32_t FullScale)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_gy_full_scale_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
           : (FullScale <= 250)  ? LSM6DSV16X_250dps
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	2b7d      	cmp	r3, #125	@ 0x7d
 8008bba:	dd18      	ble.n	8008bee <LSM6DSV16X_GYRO_SetFullScale+0x42>
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2bfa      	cmp	r3, #250	@ 0xfa
 8008bc0:	dd13      	ble.n	8008bea <LSM6DSV16X_GYRO_SetFullScale+0x3e>
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008bc8:	dd0d      	ble.n	8008be6 <LSM6DSV16X_GYRO_SetFullScale+0x3a>
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008bd0:	dd07      	ble.n	8008be2 <LSM6DSV16X_GYRO_SetFullScale+0x36>
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8008bd8:	dc01      	bgt.n	8008bde <LSM6DSV16X_GYRO_SetFullScale+0x32>
 8008bda:	2304      	movs	r3, #4
 8008bdc:	e008      	b.n	8008bf0 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008bde:	230c      	movs	r3, #12
 8008be0:	e006      	b.n	8008bf0 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008be2:	2303      	movs	r3, #3
 8008be4:	e004      	b.n	8008bf0 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008be6:	2302      	movs	r3, #2
 8008be8:	e002      	b.n	8008bf0 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008bea:	2301      	movs	r3, #1
 8008bec:	e000      	b.n	8008bf0 <LSM6DSV16X_GYRO_SetFullScale+0x44>
 8008bee:	2300      	movs	r3, #0
  new_fs = (FullScale <= 125)  ? LSM6DSV16X_125dps
 8008bf0:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSV16X_500dps
           : (FullScale <= 1000) ? LSM6DSV16X_1000dps
           : (FullScale <= 2000) ? LSM6DSV16X_2000dps
           :                       LSM6DSV16X_4000dps;

  if (lsm6dsv16x_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSV16X_OK)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	3320      	adds	r3, #32
 8008bf6:	7bfa      	ldrb	r2, [r7, #15]
 8008bf8:	4611      	mov	r1, r2
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 fee8 	bl	80099d0 <lsm6dsv16x_gy_full_scale_set>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d002      	beq.n	8008c0c <LSM6DSV16X_GYRO_SetFullScale+0x60>
  {
    return LSM6DSV16X_ERROR;
 8008c06:	f04f 33ff 	mov.w	r3, #4294967295
 8008c0a:	e000      	b.n	8008c0e <LSM6DSV16X_GYRO_SetFullScale+0x62>
  }

  return LSM6DSV16X_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <LSM6DSV16X_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxesRaw(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_AxesRaw_t *Value)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b084      	sub	sp, #16
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	3320      	adds	r3, #32
 8008c24:	f107 0208 	add.w	r2, r7, #8
 8008c28:	4611      	mov	r1, r2
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 ffb2 	bl	8009b94 <lsm6dsv16x_angular_rate_raw_get>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d002      	beq.n	8008c3c <LSM6DSV16X_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSV16X_ERROR;
 8008c36:	f04f 33ff 	mov.w	r3, #4294967295
 8008c3a:	e00c      	b.n	8008c56 <LSM6DSV16X_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data */
  Value->x = data_raw.i16bit[0];
 8008c3c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8008c44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8008c4c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	809a      	strh	r2, [r3, #4]

  return LSM6DSV16X_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <LSM6DSV16X_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_GYRO_GetAxes(LSM6DSV16X_Object_t *pObj, LSM6DSV16X_Axes_t *AngularRate)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b086      	sub	sp, #24
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8008c68:	f04f 0300 	mov.w	r3, #0
 8008c6c:	60fb      	str	r3, [r7, #12]

  /* Read raw data values */
  if (lsm6dsv16x_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSV16X_OK)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	3320      	adds	r3, #32
 8008c72:	f107 0210 	add.w	r2, r7, #16
 8008c76:	4611      	mov	r1, r2
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 ff8b 	bl	8009b94 <lsm6dsv16x_angular_rate_raw_get>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <LSM6DSV16X_GYRO_GetAxes+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8008c84:	f04f 33ff 	mov.w	r3, #4294967295
 8008c88:	e03c      	b.n	8008d04 <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Get LSM6DSV16X actual sensitivity */
  if (LSM6DSV16X_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSV16X_OK)
 8008c8a:	f107 030c 	add.w	r3, r7, #12
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7ff fd6b 	bl	800876c <LSM6DSV16X_GYRO_GetSensitivity>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d002      	beq.n	8008ca2 <LSM6DSV16X_GYRO_GetAxes+0x44>
  {
    return LSM6DSV16X_ERROR;
 8008c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca0:	e030      	b.n	8008d04 <LSM6DSV16X_GYRO_GetAxes+0xa6>
  }

  /* Calculate the data */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8008ca2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008ca6:	ee07 3a90 	vmov	s15, r3
 8008caa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008cae:	edd7 7a03 	vldr	s15, [r7, #12]
 8008cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cba:	ee17 2a90 	vmov	r2, s15
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8008cc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008cce:	edd7 7a03 	vldr	s15, [r7, #12]
 8008cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cda:	ee17 2a90 	vmov	r2, s15
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8008ce2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008ce6:	ee07 3a90 	vmov	s15, r3
 8008cea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008cee:	edd7 7a03 	vldr	s15, [r7, #12]
 8008cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cfa:	ee17 2a90 	vmov	r2, s15
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	609a      	str	r2, [r3, #8]

  return LSM6DSV16X_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3718      	adds	r7, #24
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <LSM6DSV16X_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Write_Reg(LSM6DSV16X_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	460b      	mov	r3, r1
 8008d16:	70fb      	strb	r3, [r7, #3]
 8008d18:	4613      	mov	r3, r2
 8008d1a:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsv16x_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSV16X_OK)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f103 0020 	add.w	r0, r3, #32
 8008d22:	1cba      	adds	r2, r7, #2
 8008d24:	78f9      	ldrb	r1, [r7, #3]
 8008d26:	2301      	movs	r3, #1
 8008d28:	f000 fae4 	bl	80092f4 <lsm6dsv16x_write_reg>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <LSM6DSV16X_Write_Reg+0x2c>
  {
    return LSM6DSV16X_ERROR;
 8008d32:	f04f 33ff 	mov.w	r3, #4294967295
 8008d36:	e000      	b.n	8008d3a <LSM6DSV16X_Write_Reg+0x2e>
  }

  return LSM6DSV16X_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <LSM6DSV16X_Set_Mem_Bank>:
  * @param  Val the value of memory bank in reg FUNC_CFG_ACCESS
  *         0 - LSM6DSV16X_MAIN_MEM_BANK, 1 - LSM6DSV16X_EMBED_FUNC_MEM_BANK, 2 - LSM6DSV16X_SENSOR_HUB_MEM_BANK
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSV16X_Set_Mem_Bank(LSM6DSV16X_Object_t *pObj, uint8_t Val)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b084      	sub	sp, #16
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	70fb      	strb	r3, [r7, #3]
  int32_t ret = LSM6DSV16X_OK;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60fb      	str	r3, [r7, #12]
  lsm6dsv16x_mem_bank_t reg;

  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
        : (Val == 2U) ? LSM6DSV16X_SENSOR_HUB_MEM_BANK
 8008d52:	78fb      	ldrb	r3, [r7, #3]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d006      	beq.n	8008d66 <LSM6DSV16X_Set_Mem_Bank+0x24>
 8008d58:	78fb      	ldrb	r3, [r7, #3]
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d101      	bne.n	8008d62 <LSM6DSV16X_Set_Mem_Bank+0x20>
 8008d5e:	2302      	movs	r3, #2
 8008d60:	e002      	b.n	8008d68 <LSM6DSV16X_Set_Mem_Bank+0x26>
 8008d62:	2300      	movs	r3, #0
 8008d64:	e000      	b.n	8008d68 <LSM6DSV16X_Set_Mem_Bank+0x26>
 8008d66:	2301      	movs	r3, #1
  reg = (Val == 1U) ? LSM6DSV16X_EMBED_FUNC_MEM_BANK
 8008d68:	72fb      	strb	r3, [r7, #11]
        :               LSM6DSV16X_MAIN_MEM_BANK;

  if (lsm6dsv16x_mem_bank_set(&(pObj->Ctx), reg) != LSM6DSV16X_OK)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	3320      	adds	r3, #32
 8008d6e:	7afa      	ldrb	r2, [r7, #11]
 8008d70:	4611      	mov	r1, r2
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 fadc 	bl	8009330 <lsm6dsv16x_mem_bank_set>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d002      	beq.n	8008d84 <LSM6DSV16X_Set_Mem_Bank+0x42>
  {
    ret = LSM6DSV16X_ERROR;
 8008d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d82:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008d84:	68fb      	ldr	r3, [r7, #12]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
	...

08008d90 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
            : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8008d9c:	edd7 7a00 	vldr	s15, [r7]
 8008da0:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8008da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dac:	d801      	bhi.n	8008db2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x22>
 8008dae:	2301      	movs	r3, #1
 8008db0:	e06e      	b.n	8008e90 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008db2:	edd7 7a00 	vldr	s15, [r7]
 8008db6:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8008dba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc2:	d801      	bhi.n	8008dc8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x38>
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	e063      	b.n	8008e90 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008dc8:	edd7 7a00 	vldr	s15, [r7]
 8008dcc:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8008dd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd8:	d801      	bhi.n	8008dde <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e058      	b.n	8008e90 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008dde:	edd7 7a00 	vldr	s15, [r7]
 8008de2:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dee:	d801      	bhi.n	8008df4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x64>
 8008df0:	2304      	movs	r3, #4
 8008df2:	e04d      	b.n	8008e90 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008df4:	edd7 7a00 	vldr	s15, [r7]
 8008df8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8008eb8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x128>
 8008dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e04:	d801      	bhi.n	8008e0a <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8008e06:	2305      	movs	r3, #5
 8008e08:	e042      	b.n	8008e90 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008e0a:	edd7 7a00 	vldr	s15, [r7]
 8008e0e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8008ebc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8008e12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e1a:	d801      	bhi.n	8008e20 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x90>
 8008e1c:	2306      	movs	r3, #6
 8008e1e:	e037      	b.n	8008e90 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008e20:	edd7 7a00 	vldr	s15, [r7]
 8008e24:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008ec0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x130>
 8008e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e30:	d801      	bhi.n	8008e36 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8008e32:	2307      	movs	r3, #7
 8008e34:	e02c      	b.n	8008e90 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008e36:	edd7 7a00 	vldr	s15, [r7]
 8008e3a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8008ec4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x134>
 8008e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e46:	d801      	bhi.n	8008e4c <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8008e48:	2308      	movs	r3, #8
 8008e4a:	e021      	b.n	8008e90 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008e4c:	edd7 7a00 	vldr	s15, [r7]
 8008e50:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008ec8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x138>
 8008e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e5c:	d801      	bhi.n	8008e62 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8008e5e:	2309      	movs	r3, #9
 8008e60:	e016      	b.n	8008e90 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008e62:	edd7 7a00 	vldr	s15, [r7]
 8008e66:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008ecc <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8008e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e72:	d801      	bhi.n	8008e78 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8008e74:	230a      	movs	r3, #10
 8008e76:	e00b      	b.n	8008e90 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008e78:	edd7 7a00 	vldr	s15, [r7]
 8008e7c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008ed0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x140>
 8008e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e88:	d801      	bhi.n	8008e8e <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0xfe>
 8008e8a:	230b      	movs	r3, #11
 8008e8c:	e000      	b.n	8008e90 <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x100>
 8008e8e:	230c      	movs	r3, #12
  new_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8008e90:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	3320      	adds	r3, #32
 8008e96:	7bfa      	ldrb	r2, [r7, #15]
 8008e98:	4611      	mov	r1, r2
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f000 fa8a 	bl	80093b4 <lsm6dsv16x_xl_data_rate_set>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d002      	beq.n	8008eac <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11c>
  {
    return LSM6DSV16X_ERROR;
 8008ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eaa:	e000      	b.n	8008eae <LSM6DSV16X_ACC_SetOutputDataRate_When_Enabled+0x11e>
  }

  return LSM6DSV16X_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	42700000 	.word	0x42700000
 8008ebc:	42f00000 	.word	0x42f00000
 8008ec0:	43700000 	.word	0x43700000
 8008ec4:	43f00000 	.word	0x43f00000
 8008ec8:	44700000 	.word	0x44700000
 8008ecc:	44f00000 	.word	0x44f00000
 8008ed0:	45700000 	.word	0x45700000

08008ed4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
                  : (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 8008ee0:	edd7 7a00 	vldr	s15, [r7]
 8008ee4:	eeb7 7a0e 	vmov.f32	s14, #126	@ 0x3ff00000  1.875
 8008ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef0:	d801      	bhi.n	8008ef6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x22>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e06e      	b.n	8008fd4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008ef6:	edd7 7a00 	vldr	s15, [r7]
 8008efa:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8008efe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f06:	d801      	bhi.n	8008f0c <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x38>
 8008f08:	2302      	movs	r3, #2
 8008f0a:	e063      	b.n	8008fd4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008f0c:	edd7 7a00 	vldr	s15, [r7]
 8008f10:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8008f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f1c:	d801      	bhi.n	8008f22 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8008f1e:	2303      	movs	r3, #3
 8008f20:	e058      	b.n	8008fd4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008f22:	edd7 7a00 	vldr	s15, [r7]
 8008f26:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8008f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f32:	d801      	bhi.n	8008f38 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x64>
 8008f34:	2304      	movs	r3, #4
 8008f36:	e04d      	b.n	8008fd4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008f38:	edd7 7a00 	vldr	s15, [r7]
 8008f3c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8008fe8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x114>
 8008f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f48:	d801      	bhi.n	8008f4e <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8008f4a:	2305      	movs	r3, #5
 8008f4c:	e042      	b.n	8008fd4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008f4e:	edd7 7a00 	vldr	s15, [r7]
 8008f52:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008fec <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x118>
 8008f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f5e:	d801      	bhi.n	8008f64 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x90>
 8008f60:	2306      	movs	r3, #6
 8008f62:	e037      	b.n	8008fd4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008f64:	edd7 7a00 	vldr	s15, [r7]
 8008f68:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8008ff0 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8008f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f74:	d801      	bhi.n	8008f7a <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8008f76:	2307      	movs	r3, #7
 8008f78:	e02c      	b.n	8008fd4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008f7a:	edd7 7a00 	vldr	s15, [r7]
 8008f7e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8008ff4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x120>
 8008f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8a:	d801      	bhi.n	8008f90 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8008f8c:	2308      	movs	r3, #8
 8008f8e:	e021      	b.n	8008fd4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008f90:	edd7 7a00 	vldr	s15, [r7]
 8008f94:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8008ff8 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x124>
 8008f98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa0:	d801      	bhi.n	8008fa6 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8008fa2:	2309      	movs	r3, #9
 8008fa4:	e016      	b.n	8008fd4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008fa6:	edd7 7a00 	vldr	s15, [r7]
 8008faa:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8008ffc <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x128>
 8008fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb6:	d801      	bhi.n	8008fbc <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8008fb8:	230a      	movs	r3, #10
 8008fba:	e00b      	b.n	8008fd4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008fbc:	edd7 7a00 	vldr	s15, [r7]
 8008fc0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8009000 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x12c>
 8008fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fcc:	d801      	bhi.n	8008fd2 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0xfe>
 8008fce:	230b      	movs	r3, #11
 8008fd0:	e000      	b.n	8008fd4 <LSM6DSV16X_ACC_SetOutputDataRate_When_Disabled+0x100>
 8008fd2:	230c      	movs	r3, #12
  pObj->acc_odr = (Odr <=  1.875f) ? LSM6DSV16X_ODR_AT_1Hz875
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                  : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                  : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                  :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr
 8008fe8:	42700000 	.word	0x42700000
 8008fec:	42f00000 	.word	0x42f00000
 8008ff0:	43700000 	.word	0x43700000
 8008ff4:	43f00000 	.word	0x43f00000
 8008ff8:	44700000 	.word	0x44700000
 8008ffc:	44f00000 	.word	0x44f00000
 8009000:	45700000 	.word	0x45700000

08009004 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsv16x_data_rate_t new_odr;

  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
            : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 8009010:	edd7 7a00 	vldr	s15, [r7]
 8009014:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8009018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800901c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009020:	d801      	bhi.n	8009026 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8009022:	2302      	movs	r3, #2
 8009024:	e063      	b.n	80090ee <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009026:	edd7 7a00 	vldr	s15, [r7]
 800902a:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800902e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009036:	d801      	bhi.n	800903c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8009038:	2303      	movs	r3, #3
 800903a:	e058      	b.n	80090ee <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800903c:	edd7 7a00 	vldr	s15, [r7]
 8009040:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8009044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800904c:	d801      	bhi.n	8009052 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 800904e:	2304      	movs	r3, #4
 8009050:	e04d      	b.n	80090ee <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009052:	edd7 7a00 	vldr	s15, [r7]
 8009056:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8009114 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800905a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800905e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009062:	d801      	bhi.n	8009068 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8009064:	2305      	movs	r3, #5
 8009066:	e042      	b.n	80090ee <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009068:	edd7 7a00 	vldr	s15, [r7]
 800906c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8009118 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8009070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009078:	d801      	bhi.n	800907e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800907a:	2306      	movs	r3, #6
 800907c:	e037      	b.n	80090ee <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 800907e:	edd7 7a00 	vldr	s15, [r7]
 8009082:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800911c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x118>
 8009086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800908a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800908e:	d801      	bhi.n	8009094 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8009090:	2307      	movs	r3, #7
 8009092:	e02c      	b.n	80090ee <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 8009094:	edd7 7a00 	vldr	s15, [r7]
 8009098:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8009120 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x11c>
 800909c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a4:	d801      	bhi.n	80090aa <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80090a6:	2308      	movs	r3, #8
 80090a8:	e021      	b.n	80090ee <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80090aa:	edd7 7a00 	vldr	s15, [r7]
 80090ae:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009124 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x120>
 80090b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ba:	d801      	bhi.n	80090c0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 80090bc:	2309      	movs	r3, #9
 80090be:	e016      	b.n	80090ee <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80090c0:	edd7 7a00 	vldr	s15, [r7]
 80090c4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009128 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x124>
 80090c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090d0:	d801      	bhi.n	80090d6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 80090d2:	230a      	movs	r3, #10
 80090d4:	e00b      	b.n	80090ee <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80090d6:	edd7 7a00 	vldr	s15, [r7]
 80090da:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800912c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x128>
 80090de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80090e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090e6:	d801      	bhi.n	80090ec <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xe8>
 80090e8:	230b      	movs	r3, #11
 80090ea:	e000      	b.n	80090ee <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0xea>
 80090ec:	230c      	movs	r3, #12
  new_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 80090ee:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
            : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
            :                    LSM6DSV16X_ODR_AT_7680Hz;

  /* Output data rate selection */
  if (lsm6dsv16x_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSV16X_OK)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3320      	adds	r3, #32
 80090f4:	7bfa      	ldrb	r2, [r7, #15]
 80090f6:	4611      	mov	r1, r2
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 fabd 	bl	8009678 <lsm6dsv16x_gy_data_rate_set>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSV16X_ERROR;
 8009104:	f04f 33ff 	mov.w	r3, #4294967295
 8009108:	e000      	b.n	800910c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSV16X_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	42700000 	.word	0x42700000
 8009118:	42f00000 	.word	0x42f00000
 800911c:	43700000 	.word	0x43700000
 8009120:	43f00000 	.word	0x43f00000
 8009124:	44700000 	.word	0x44700000
 8009128:	44f00000 	.word	0x44f00000
 800912c:	45700000 	.word	0x45700000

08009130 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled(LSM6DSV16X_Object_t *pObj, float Odr)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
                   : (Odr <=   15.0f) ? LSM6DSV16X_ODR_AT_15Hz
 800913c:	edd7 7a00 	vldr	s15, [r7]
 8009140:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8009144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800914c:	d801      	bhi.n	8009152 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800914e:	2302      	movs	r3, #2
 8009150:	e063      	b.n	800921a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009152:	edd7 7a00 	vldr	s15, [r7]
 8009156:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 800915a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800915e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009162:	d801      	bhi.n	8009168 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8009164:	2303      	movs	r3, #3
 8009166:	e058      	b.n	800921a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009168:	edd7 7a00 	vldr	s15, [r7]
 800916c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8009170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009178:	d801      	bhi.n	800917e <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800917a:	2304      	movs	r3, #4
 800917c:	e04d      	b.n	800921a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 800917e:	edd7 7a00 	vldr	s15, [r7]
 8009182:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8009230 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8009186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800918a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800918e:	d801      	bhi.n	8009194 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8009190:	2305      	movs	r3, #5
 8009192:	e042      	b.n	800921a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009194:	edd7 7a00 	vldr	s15, [r7]
 8009198:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009234 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x104>
 800919c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091a4:	d801      	bhi.n	80091aa <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80091a6:	2306      	movs	r3, #6
 80091a8:	e037      	b.n	800921a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80091aa:	edd7 7a00 	vldr	s15, [r7]
 80091ae:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8009238 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x108>
 80091b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ba:	d801      	bhi.n	80091c0 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80091bc:	2307      	movs	r3, #7
 80091be:	e02c      	b.n	800921a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80091c0:	edd7 7a00 	vldr	s15, [r7]
 80091c4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800923c <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x10c>
 80091c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d0:	d801      	bhi.n	80091d6 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80091d2:	2308      	movs	r3, #8
 80091d4:	e021      	b.n	800921a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80091d6:	edd7 7a00 	vldr	s15, [r7]
 80091da:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009240 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x110>
 80091de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091e6:	d801      	bhi.n	80091ec <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80091e8:	2309      	movs	r3, #9
 80091ea:	e016      	b.n	800921a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 80091ec:	edd7 7a00 	vldr	s15, [r7]
 80091f0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009244 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x114>
 80091f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80091f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091fc:	d801      	bhi.n	8009202 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 80091fe:	230a      	movs	r3, #10
 8009200:	e00b      	b.n	800921a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009202:	edd7 7a00 	vldr	s15, [r7]
 8009206:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8009248 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0x118>
 800920a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800920e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009212:	d801      	bhi.n	8009218 <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8009214:	230b      	movs	r3, #11
 8009216:	e000      	b.n	800921a <LSM6DSV16X_GYRO_SetOutputDataRate_When_Disabled+0xea>
 8009218:	230c      	movs	r3, #12
  pObj->gyro_odr = (Odr <=    7.5f) ? LSM6DSV16X_ODR_AT_7Hz5
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  960.0f) ? LSM6DSV16X_ODR_AT_960Hz
                   : (Odr <= 1920.0f) ? LSM6DSV16X_ODR_AT_1920Hz
                   : (Odr <= 3840.0f) ? LSM6DSV16X_ODR_AT_3840Hz
                   :                    LSM6DSV16X_ODR_AT_7680Hz;

  return LSM6DSV16X_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	370c      	adds	r7, #12
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	42700000 	.word	0x42700000
 8009234:	42f00000 	.word	0x42f00000
 8009238:	43700000 	.word	0x43700000
 800923c:	43f00000 	.word	0x43f00000
 8009240:	44700000 	.word	0x44700000
 8009244:	44f00000 	.word	0x44f00000
 8009248:	45700000 	.word	0x45700000

0800924c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800924c:	b590      	push	{r4, r7, lr}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	607a      	str	r2, [r7, #4]
 8009256:	461a      	mov	r2, r3
 8009258:	460b      	mov	r3, r1
 800925a:	72fb      	strb	r3, [r7, #11]
 800925c:	4613      	mov	r3, r2
 800925e:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	695c      	ldr	r4, [r3, #20]
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	7b1b      	ldrb	r3, [r3, #12]
 800926c:	4618      	mov	r0, r3
 800926e:	7afb      	ldrb	r3, [r7, #11]
 8009270:	b299      	uxth	r1, r3
 8009272:	893b      	ldrh	r3, [r7, #8]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	47a0      	blx	r4
 8009278:	4603      	mov	r3, r0
}
 800927a:	4618      	mov	r0, r3
 800927c:	371c      	adds	r7, #28
 800927e:	46bd      	mov	sp, r7
 8009280:	bd90      	pop	{r4, r7, pc}

08009282 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8009282:	b590      	push	{r4, r7, lr}
 8009284:	b087      	sub	sp, #28
 8009286:	af00      	add	r7, sp, #0
 8009288:	60f8      	str	r0, [r7, #12]
 800928a:	607a      	str	r2, [r7, #4]
 800928c:	461a      	mov	r2, r3
 800928e:	460b      	mov	r3, r1
 8009290:	72fb      	strb	r3, [r7, #11]
 8009292:	4613      	mov	r3, r2
 8009294:	813b      	strh	r3, [r7, #8]
  LSM6DSV16X_Object_t *pObj = (LSM6DSV16X_Object_t *)Handle;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	691c      	ldr	r4, [r3, #16]
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	7b1b      	ldrb	r3, [r3, #12]
 80092a2:	4618      	mov	r0, r3
 80092a4:	7afb      	ldrb	r3, [r7, #11]
 80092a6:	b299      	uxth	r1, r3
 80092a8:	893b      	ldrh	r3, [r7, #8]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	47a0      	blx	r4
 80092ae:	4603      	mov	r3, r0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	371c      	adds	r7, #28
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd90      	pop	{r4, r7, pc}

080092b8 <lsm6dsv16x_read_reg>:
  *
  */
int32_t __weak lsm6dsv16x_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 80092b8:	b590      	push	{r4, r7, lr}
 80092ba:	b087      	sub	sp, #28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	607a      	str	r2, [r7, #4]
 80092c2:	461a      	mov	r2, r3
 80092c4:	460b      	mov	r3, r1
 80092c6:	72fb      	strb	r3, [r7, #11]
 80092c8:	4613      	mov	r3, r2
 80092ca:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d102      	bne.n	80092d8 <lsm6dsv16x_read_reg+0x20>
  {
    return -1;
 80092d2:	f04f 33ff 	mov.w	r3, #4294967295
 80092d6:	e009      	b.n	80092ec <lsm6dsv16x_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	685c      	ldr	r4, [r3, #4]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	68d8      	ldr	r0, [r3, #12]
 80092e0:	893b      	ldrh	r3, [r7, #8]
 80092e2:	7af9      	ldrb	r1, [r7, #11]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	47a0      	blx	r4
 80092e8:	6178      	str	r0, [r7, #20]

  return ret;
 80092ea:	697b      	ldr	r3, [r7, #20]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	371c      	adds	r7, #28
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd90      	pop	{r4, r7, pc}

080092f4 <lsm6dsv16x_write_reg>:
  *
  */
int32_t __weak lsm6dsv16x_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80092f4:	b590      	push	{r4, r7, lr}
 80092f6:	b087      	sub	sp, #28
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	607a      	str	r2, [r7, #4]
 80092fe:	461a      	mov	r2, r3
 8009300:	460b      	mov	r3, r1
 8009302:	72fb      	strb	r3, [r7, #11]
 8009304:	4613      	mov	r3, r2
 8009306:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d102      	bne.n	8009314 <lsm6dsv16x_write_reg+0x20>
  {
    return -1;
 800930e:	f04f 33ff 	mov.w	r3, #4294967295
 8009312:	e009      	b.n	8009328 <lsm6dsv16x_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681c      	ldr	r4, [r3, #0]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	68d8      	ldr	r0, [r3, #12]
 800931c:	893b      	ldrh	r3, [r7, #8]
 800931e:	7af9      	ldrb	r1, [r7, #11]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	47a0      	blx	r4
 8009324:	6178      	str	r0, [r7, #20]

  return ret;
 8009326:	697b      	ldr	r3, [r7, #20]
}
 8009328:	4618      	mov	r0, r3
 800932a:	371c      	adds	r7, #28
 800932c:	46bd      	mov	sp, r7
 800932e:	bd90      	pop	{r4, r7, pc}

08009330 <lsm6dsv16x_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_mem_bank_set(const stmdev_ctx_t *ctx, lsm6dsv16x_mem_bank_t val)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 800933c:	f107 0208 	add.w	r2, r7, #8
 8009340:	2301      	movs	r3, #1
 8009342:	2101      	movs	r1, #1
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7ff ffb7 	bl	80092b8 <lsm6dsv16x_read_reg>
 800934a:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <lsm6dsv16x_mem_bank_set+0x26>
  {
    return ret;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	e019      	b.n	800938a <lsm6dsv16x_mem_bank_set+0x5a>
  }

  func_cfg_access.shub_reg_access = ((uint8_t)val & 0x02U) >> 1;
 8009356:	78fb      	ldrb	r3, [r7, #3]
 8009358:	085b      	lsrs	r3, r3, #1
 800935a:	f003 0301 	and.w	r3, r3, #1
 800935e:	b2da      	uxtb	r2, r3
 8009360:	7a3b      	ldrb	r3, [r7, #8]
 8009362:	f362 1386 	bfi	r3, r2, #6, #1
 8009366:	723b      	strb	r3, [r7, #8]
  func_cfg_access.emb_func_reg_access = (uint8_t)val & 0x01U;
 8009368:	78fb      	ldrb	r3, [r7, #3]
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	b2da      	uxtb	r2, r3
 8009370:	7a3b      	ldrb	r3, [r7, #8]
 8009372:	f362 13c7 	bfi	r3, r2, #7, #1
 8009376:	723b      	strb	r3, [r7, #8]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FUNC_CFG_ACCESS, (uint8_t *)&func_cfg_access, 1);
 8009378:	f107 0208 	add.w	r2, r7, #8
 800937c:	2301      	movs	r3, #1
 800937e:	2101      	movs	r1, #1
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f7ff ffb7 	bl	80092f4 <lsm6dsv16x_write_reg>
 8009386:	60f8      	str	r0, [r7, #12]

  return ret;
 8009388:	68fb      	ldr	r3, [r7, #12]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <lsm6dsv16x_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_device_id_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b084      	sub	sp, #16
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
 800939a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_WHO_AM_I, val, 1);
 800939c:	2301      	movs	r3, #1
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	210f      	movs	r1, #15
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7ff ff88 	bl	80092b8 <lsm6dsv16x_read_reg>
 80093a8:	60f8      	str	r0, [r7, #12]

  return ret;
 80093aa:	68fb      	ldr	r3, [r7, #12]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <lsm6dsv16x_xl_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	460b      	mov	r3, r1
 80093be:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80093c0:	f107 0210 	add.w	r2, r7, #16
 80093c4:	2301      	movs	r3, #1
 80093c6:	2110      	movs	r1, #16
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f7ff ff75 	bl	80092b8 <lsm6dsv16x_read_reg>
 80093ce:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <lsm6dsv16x_xl_data_rate_set+0x26>
  {
    return ret;
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	e039      	b.n	800944e <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  ctrl1.odr_xl = (uint8_t)val & 0x0Fu;
 80093da:	78fb      	ldrb	r3, [r7, #3]
 80093dc:	f003 030f 	and.w	r3, r3, #15
 80093e0:	b2da      	uxtb	r2, r3
 80093e2:	7c3b      	ldrb	r3, [r7, #16]
 80093e4:	f362 0303 	bfi	r3, r2, #0, #4
 80093e8:	743b      	strb	r3, [r7, #16]
  ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 80093ea:	f107 0210 	add.w	r2, r7, #16
 80093ee:	2301      	movs	r3, #1
 80093f0:	2110      	movs	r1, #16
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7ff ff7e 	bl	80092f4 <lsm6dsv16x_write_reg>
 80093f8:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <lsm6dsv16x_xl_data_rate_set+0x50>
  {
    return ret;
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	e024      	b.n	800944e <lsm6dsv16x_xl_data_rate_set+0x9a>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 8009404:	78fb      	ldrb	r3, [r7, #3]
 8009406:	091b      	lsrs	r3, r3, #4
 8009408:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 800940a:	7cfb      	ldrb	r3, [r7, #19]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d01d      	beq.n	800944c <lsm6dsv16x_xl_data_rate_set+0x98>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8009410:	f107 020c 	add.w	r2, r7, #12
 8009414:	2301      	movs	r3, #1
 8009416:	2162      	movs	r1, #98	@ 0x62
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7ff ff4d 	bl	80092b8 <lsm6dsv16x_read_reg>
 800941e:	4602      	mov	r2, r0
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	4413      	add	r3, r2
 8009424:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 8009426:	7cfb      	ldrb	r3, [r7, #19]
 8009428:	f003 0303 	and.w	r3, r3, #3
 800942c:	b2da      	uxtb	r2, r3
 800942e:	7b3b      	ldrb	r3, [r7, #12]
 8009430:	f362 0301 	bfi	r3, r2, #0, #2
 8009434:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8009436:	f107 020c 	add.w	r2, r7, #12
 800943a:	2301      	movs	r3, #1
 800943c:	2162      	movs	r1, #98	@ 0x62
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7ff ff58 	bl	80092f4 <lsm6dsv16x_write_reg>
 8009444:	4602      	mov	r2, r0
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	4413      	add	r3, r2
 800944a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800944c:	697b      	ldr	r3, [r7, #20]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3718      	adds	r7, #24
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
	...

08009458 <lsm6dsv16x_xl_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl1_t ctrl1;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL1, (uint8_t *)&ctrl1, 1);
 8009462:	f107 0210 	add.w	r2, r7, #16
 8009466:	2301      	movs	r3, #1
 8009468:	2110      	movs	r1, #16
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7ff ff24 	bl	80092b8 <lsm6dsv16x_read_reg>
 8009470:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8009472:	f107 020c 	add.w	r2, r7, #12
 8009476:	2301      	movs	r3, #1
 8009478:	2162      	movs	r1, #98	@ 0x62
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7ff ff1c 	bl	80092b8 <lsm6dsv16x_read_reg>
 8009480:	4602      	mov	r2, r0
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	4413      	add	r3, r2
 8009486:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <lsm6dsv16x_xl_data_rate_get+0x3a>
  {
    return ret;
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	e0ed      	b.n	800966e <lsm6dsv16x_xl_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 8009492:	7b3b      	ldrb	r3, [r7, #12]
 8009494:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009498:	b2db      	uxtb	r3, r3
 800949a:	74fb      	strb	r3, [r7, #19]

  switch (ctrl1.odr_xl)
 800949c:	7c3b      	ldrb	r3, [r7, #16]
 800949e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b0c      	cmp	r3, #12
 80094a6:	f200 80dd 	bhi.w	8009664 <lsm6dsv16x_xl_data_rate_get+0x20c>
 80094aa:	a201      	add	r2, pc, #4	@ (adr r2, 80094b0 <lsm6dsv16x_xl_data_rate_get+0x58>)
 80094ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b0:	080094e5 	.word	0x080094e5
 80094b4:	080094ed 	.word	0x080094ed
 80094b8:	080094f5 	.word	0x080094f5
 80094bc:	080094fd 	.word	0x080094fd
 80094c0:	08009521 	.word	0x08009521
 80094c4:	08009545 	.word	0x08009545
 80094c8:	08009569 	.word	0x08009569
 80094cc:	0800958d 	.word	0x0800958d
 80094d0:	080095b1 	.word	0x080095b1
 80094d4:	080095d5 	.word	0x080095d5
 80094d8:	080095f9 	.word	0x080095f9
 80094dc:	0800961d 	.word	0x0800961d
 80094e0:	08009641 	.word	0x08009641
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	2200      	movs	r2, #0
 80094e8:	701a      	strb	r2, [r3, #0]
      break;
 80094ea:	e0bf      	b.n	800966c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	2201      	movs	r2, #1
 80094f0:	701a      	strb	r2, [r3, #0]
      break;
 80094f2:	e0bb      	b.n	800966c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	2202      	movs	r2, #2
 80094f8:	701a      	strb	r2, [r3, #0]
      break;
 80094fa:	e0b7      	b.n	800966c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 80094fc:	7cfb      	ldrb	r3, [r7, #19]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d005      	beq.n	800950e <lsm6dsv16x_xl_data_rate_get+0xb6>
 8009502:	2b02      	cmp	r3, #2
 8009504:	d007      	beq.n	8009516 <lsm6dsv16x_xl_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	2203      	movs	r2, #3
 800950a:	701a      	strb	r2, [r3, #0]
          break;
 800950c:	e007      	b.n	800951e <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	2213      	movs	r2, #19
 8009512:	701a      	strb	r2, [r3, #0]
          break;
 8009514:	e003      	b.n	800951e <lsm6dsv16x_xl_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	2223      	movs	r2, #35	@ 0x23
 800951a:	701a      	strb	r2, [r3, #0]
          break;
 800951c:	bf00      	nop
      }
      break;
 800951e:	e0a5      	b.n	800966c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 8009520:	7cfb      	ldrb	r3, [r7, #19]
 8009522:	2b01      	cmp	r3, #1
 8009524:	d005      	beq.n	8009532 <lsm6dsv16x_xl_data_rate_get+0xda>
 8009526:	2b02      	cmp	r3, #2
 8009528:	d007      	beq.n	800953a <lsm6dsv16x_xl_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	2204      	movs	r2, #4
 800952e:	701a      	strb	r2, [r3, #0]
          break;
 8009530:	e007      	b.n	8009542 <lsm6dsv16x_xl_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2214      	movs	r2, #20
 8009536:	701a      	strb	r2, [r3, #0]
          break;
 8009538:	e003      	b.n	8009542 <lsm6dsv16x_xl_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	2224      	movs	r2, #36	@ 0x24
 800953e:	701a      	strb	r2, [r3, #0]
          break;
 8009540:	bf00      	nop
      }
      break;
 8009542:	e093      	b.n	800966c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 8009544:	7cfb      	ldrb	r3, [r7, #19]
 8009546:	2b01      	cmp	r3, #1
 8009548:	d005      	beq.n	8009556 <lsm6dsv16x_xl_data_rate_get+0xfe>
 800954a:	2b02      	cmp	r3, #2
 800954c:	d007      	beq.n	800955e <lsm6dsv16x_xl_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	2205      	movs	r2, #5
 8009552:	701a      	strb	r2, [r3, #0]
          break;
 8009554:	e007      	b.n	8009566 <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	2215      	movs	r2, #21
 800955a:	701a      	strb	r2, [r3, #0]
          break;
 800955c:	e003      	b.n	8009566 <lsm6dsv16x_xl_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	2225      	movs	r2, #37	@ 0x25
 8009562:	701a      	strb	r2, [r3, #0]
          break;
 8009564:	bf00      	nop
      }
      break;
 8009566:	e081      	b.n	800966c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 8009568:	7cfb      	ldrb	r3, [r7, #19]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d005      	beq.n	800957a <lsm6dsv16x_xl_data_rate_get+0x122>
 800956e:	2b02      	cmp	r3, #2
 8009570:	d007      	beq.n	8009582 <lsm6dsv16x_xl_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	2206      	movs	r2, #6
 8009576:	701a      	strb	r2, [r3, #0]
          break;
 8009578:	e007      	b.n	800958a <lsm6dsv16x_xl_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	2216      	movs	r2, #22
 800957e:	701a      	strb	r2, [r3, #0]
          break;
 8009580:	e003      	b.n	800958a <lsm6dsv16x_xl_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2226      	movs	r2, #38	@ 0x26
 8009586:	701a      	strb	r2, [r3, #0]
          break;
 8009588:	bf00      	nop
      }
      break;
 800958a:	e06f      	b.n	800966c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 800958c:	7cfb      	ldrb	r3, [r7, #19]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d005      	beq.n	800959e <lsm6dsv16x_xl_data_rate_get+0x146>
 8009592:	2b02      	cmp	r3, #2
 8009594:	d007      	beq.n	80095a6 <lsm6dsv16x_xl_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2207      	movs	r2, #7
 800959a:	701a      	strb	r2, [r3, #0]
          break;
 800959c:	e007      	b.n	80095ae <lsm6dsv16x_xl_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	2217      	movs	r2, #23
 80095a2:	701a      	strb	r2, [r3, #0]
          break;
 80095a4:	e003      	b.n	80095ae <lsm6dsv16x_xl_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	2227      	movs	r2, #39	@ 0x27
 80095aa:	701a      	strb	r2, [r3, #0]
          break;
 80095ac:	bf00      	nop
      }
      break;
 80095ae:	e05d      	b.n	800966c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 80095b0:	7cfb      	ldrb	r3, [r7, #19]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d005      	beq.n	80095c2 <lsm6dsv16x_xl_data_rate_get+0x16a>
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	d007      	beq.n	80095ca <lsm6dsv16x_xl_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	2208      	movs	r2, #8
 80095be:	701a      	strb	r2, [r3, #0]
          break;
 80095c0:	e007      	b.n	80095d2 <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2218      	movs	r2, #24
 80095c6:	701a      	strb	r2, [r3, #0]
          break;
 80095c8:	e003      	b.n	80095d2 <lsm6dsv16x_xl_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	2228      	movs	r2, #40	@ 0x28
 80095ce:	701a      	strb	r2, [r3, #0]
          break;
 80095d0:	bf00      	nop
      }
      break;
 80095d2:	e04b      	b.n	800966c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 80095d4:	7cfb      	ldrb	r3, [r7, #19]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d005      	beq.n	80095e6 <lsm6dsv16x_xl_data_rate_get+0x18e>
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d007      	beq.n	80095ee <lsm6dsv16x_xl_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	2209      	movs	r2, #9
 80095e2:	701a      	strb	r2, [r3, #0]
          break;
 80095e4:	e007      	b.n	80095f6 <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2219      	movs	r2, #25
 80095ea:	701a      	strb	r2, [r3, #0]
          break;
 80095ec:	e003      	b.n	80095f6 <lsm6dsv16x_xl_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	2229      	movs	r2, #41	@ 0x29
 80095f2:	701a      	strb	r2, [r3, #0]
          break;
 80095f4:	bf00      	nop
      }
      break;
 80095f6:	e039      	b.n	800966c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 80095f8:	7cfb      	ldrb	r3, [r7, #19]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d005      	beq.n	800960a <lsm6dsv16x_xl_data_rate_get+0x1b2>
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d007      	beq.n	8009612 <lsm6dsv16x_xl_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	220a      	movs	r2, #10
 8009606:	701a      	strb	r2, [r3, #0]
          break;
 8009608:	e007      	b.n	800961a <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	221a      	movs	r2, #26
 800960e:	701a      	strb	r2, [r3, #0]
          break;
 8009610:	e003      	b.n	800961a <lsm6dsv16x_xl_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	222a      	movs	r2, #42	@ 0x2a
 8009616:	701a      	strb	r2, [r3, #0]
          break;
 8009618:	bf00      	nop
      }
      break;
 800961a:	e027      	b.n	800966c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 800961c:	7cfb      	ldrb	r3, [r7, #19]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d005      	beq.n	800962e <lsm6dsv16x_xl_data_rate_get+0x1d6>
 8009622:	2b02      	cmp	r3, #2
 8009624:	d007      	beq.n	8009636 <lsm6dsv16x_xl_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	220b      	movs	r2, #11
 800962a:	701a      	strb	r2, [r3, #0]
          break;
 800962c:	e007      	b.n	800963e <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	221b      	movs	r2, #27
 8009632:	701a      	strb	r2, [r3, #0]
          break;
 8009634:	e003      	b.n	800963e <lsm6dsv16x_xl_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	222b      	movs	r2, #43	@ 0x2b
 800963a:	701a      	strb	r2, [r3, #0]
          break;
 800963c:	bf00      	nop
      }
      break;
 800963e:	e015      	b.n	800966c <lsm6dsv16x_xl_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 8009640:	7cfb      	ldrb	r3, [r7, #19]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d005      	beq.n	8009652 <lsm6dsv16x_xl_data_rate_get+0x1fa>
 8009646:	2b02      	cmp	r3, #2
 8009648:	d007      	beq.n	800965a <lsm6dsv16x_xl_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	220c      	movs	r2, #12
 800964e:	701a      	strb	r2, [r3, #0]
          break;
 8009650:	e007      	b.n	8009662 <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	221c      	movs	r2, #28
 8009656:	701a      	strb	r2, [r3, #0]
          break;
 8009658:	e003      	b.n	8009662 <lsm6dsv16x_xl_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	222c      	movs	r2, #44	@ 0x2c
 800965e:	701a      	strb	r2, [r3, #0]
          break;
 8009660:	bf00      	nop
      }
      break;
 8009662:	e003      	b.n	800966c <lsm6dsv16x_xl_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	2200      	movs	r2, #0
 8009668:	701a      	strb	r2, [r3, #0]
      break;
 800966a:	bf00      	nop
  }

  return ret;
 800966c:	697b      	ldr	r3, [r7, #20]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop

08009678 <lsm6dsv16x_gy_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t val)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8009684:	f107 0210 	add.w	r2, r7, #16
 8009688:	2301      	movs	r3, #1
 800968a:	2111      	movs	r1, #17
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7ff fe13 	bl	80092b8 <lsm6dsv16x_read_reg>
 8009692:	6178      	str	r0, [r7, #20]

  ctrl2.odr_g = (uint8_t)val & 0x0Fu;
 8009694:	78fb      	ldrb	r3, [r7, #3]
 8009696:	f003 030f 	and.w	r3, r3, #15
 800969a:	b2da      	uxtb	r2, r3
 800969c:	7c3b      	ldrb	r3, [r7, #16]
 800969e:	f362 0303 	bfi	r3, r2, #0, #4
 80096a2:	743b      	strb	r3, [r7, #16]
  ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 80096a4:	f107 0210 	add.w	r2, r7, #16
 80096a8:	2301      	movs	r3, #1
 80096aa:	2111      	movs	r1, #17
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7ff fe21 	bl	80092f4 <lsm6dsv16x_write_reg>
 80096b2:	4602      	mov	r2, r0
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	4413      	add	r3, r2
 80096b8:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <lsm6dsv16x_gy_data_rate_set+0x4c>
  {
    return ret;
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	e024      	b.n	800970e <lsm6dsv16x_gy_data_rate_set+0x96>
  }

  sel = ((uint8_t)val >> 4) & 0xFU;
 80096c4:	78fb      	ldrb	r3, [r7, #3]
 80096c6:	091b      	lsrs	r3, r3, #4
 80096c8:	74fb      	strb	r3, [r7, #19]
  if (sel != 0U)
 80096ca:	7cfb      	ldrb	r3, [r7, #19]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d01d      	beq.n	800970c <lsm6dsv16x_gy_data_rate_set+0x94>
  {
    ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80096d0:	f107 020c 	add.w	r2, r7, #12
 80096d4:	2301      	movs	r3, #1
 80096d6:	2162      	movs	r1, #98	@ 0x62
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f7ff fded 	bl	80092b8 <lsm6dsv16x_read_reg>
 80096de:	4602      	mov	r2, r0
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	4413      	add	r3, r2
 80096e4:	617b      	str	r3, [r7, #20]
    haodr.haodr_sel = sel;
 80096e6:	7cfb      	ldrb	r3, [r7, #19]
 80096e8:	f003 0303 	and.w	r3, r3, #3
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	7b3b      	ldrb	r3, [r7, #12]
 80096f0:	f362 0301 	bfi	r3, r2, #0, #2
 80096f4:	733b      	strb	r3, [r7, #12]
    ret += lsm6dsv16x_write_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 80096f6:	f107 020c 	add.w	r2, r7, #12
 80096fa:	2301      	movs	r3, #1
 80096fc:	2162      	movs	r1, #98	@ 0x62
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7ff fdf8 	bl	80092f4 <lsm6dsv16x_write_reg>
 8009704:	4602      	mov	r2, r0
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	4413      	add	r3, r2
 800970a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800970c:	697b      	ldr	r3, [r7, #20]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3718      	adds	r7, #24
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
	...

08009718 <lsm6dsv16x_gy_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_data_rate_get(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_data_rate_t *val)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl2_t ctrl2;
  lsm6dsv16x_haodr_cfg_t haodr;
  uint8_t sel;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL2, (uint8_t *)&ctrl2, 1);
 8009722:	f107 0210 	add.w	r2, r7, #16
 8009726:	2301      	movs	r3, #1
 8009728:	2111      	movs	r1, #17
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f7ff fdc4 	bl	80092b8 <lsm6dsv16x_read_reg>
 8009730:	6178      	str	r0, [r7, #20]
  ret += lsm6dsv16x_read_reg(ctx, LSM6DSV16X_HAODR_CFG, (uint8_t *)&haodr, 1);
 8009732:	f107 020c 	add.w	r2, r7, #12
 8009736:	2301      	movs	r3, #1
 8009738:	2162      	movs	r1, #98	@ 0x62
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7ff fdbc 	bl	80092b8 <lsm6dsv16x_read_reg>
 8009740:	4602      	mov	r2, r0
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	4413      	add	r3, r2
 8009746:	617b      	str	r3, [r7, #20]
  if (ret != 0)
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d001      	beq.n	8009752 <lsm6dsv16x_gy_data_rate_get+0x3a>
  {
    return ret;
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	e0ed      	b.n	800992e <lsm6dsv16x_gy_data_rate_get+0x216>
  }

  sel = haodr.haodr_sel;
 8009752:	7b3b      	ldrb	r3, [r7, #12]
 8009754:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009758:	b2db      	uxtb	r3, r3
 800975a:	74fb      	strb	r3, [r7, #19]

  switch (ctrl2.odr_g)
 800975c:	7c3b      	ldrb	r3, [r7, #16]
 800975e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b0c      	cmp	r3, #12
 8009766:	f200 80dd 	bhi.w	8009924 <lsm6dsv16x_gy_data_rate_get+0x20c>
 800976a:	a201      	add	r2, pc, #4	@ (adr r2, 8009770 <lsm6dsv16x_gy_data_rate_get+0x58>)
 800976c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009770:	080097a5 	.word	0x080097a5
 8009774:	080097ad 	.word	0x080097ad
 8009778:	080097b5 	.word	0x080097b5
 800977c:	080097bd 	.word	0x080097bd
 8009780:	080097e1 	.word	0x080097e1
 8009784:	08009805 	.word	0x08009805
 8009788:	08009829 	.word	0x08009829
 800978c:	0800984d 	.word	0x0800984d
 8009790:	08009871 	.word	0x08009871
 8009794:	08009895 	.word	0x08009895
 8009798:	080098b9 	.word	0x080098b9
 800979c:	080098dd 	.word	0x080098dd
 80097a0:	08009901 	.word	0x08009901
  {
    case LSM6DSV16X_ODR_OFF:
      *val = LSM6DSV16X_ODR_OFF;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	2200      	movs	r2, #0
 80097a8:	701a      	strb	r2, [r3, #0]
      break;
 80097aa:	e0bf      	b.n	800992c <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1Hz875:
      *val = LSM6DSV16X_ODR_AT_1Hz875;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	2201      	movs	r2, #1
 80097b0:	701a      	strb	r2, [r3, #0]
      break;
 80097b2:	e0bb      	b.n	800992c <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7Hz5:
      *val = LSM6DSV16X_ODR_AT_7Hz5;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	2202      	movs	r2, #2
 80097b8:	701a      	strb	r2, [r3, #0]
      break;
 80097ba:	e0b7      	b.n	800992c <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_15Hz:
      switch (sel)
 80097bc:	7cfb      	ldrb	r3, [r7, #19]
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d005      	beq.n	80097ce <lsm6dsv16x_gy_data_rate_get+0xb6>
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d007      	beq.n	80097d6 <lsm6dsv16x_gy_data_rate_get+0xbe>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_15Hz;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2203      	movs	r2, #3
 80097ca:	701a      	strb	r2, [r3, #0]
          break;
 80097cc:	e007      	b.n	80097de <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_15Hz625;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	2213      	movs	r2, #19
 80097d2:	701a      	strb	r2, [r3, #0]
          break;
 80097d4:	e003      	b.n	80097de <lsm6dsv16x_gy_data_rate_get+0xc6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_12Hz5;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2223      	movs	r2, #35	@ 0x23
 80097da:	701a      	strb	r2, [r3, #0]
          break;
 80097dc:	bf00      	nop
      }
      break;
 80097de:	e0a5      	b.n	800992c <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_30Hz:
      switch (sel)
 80097e0:	7cfb      	ldrb	r3, [r7, #19]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d005      	beq.n	80097f2 <lsm6dsv16x_gy_data_rate_get+0xda>
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d007      	beq.n	80097fa <lsm6dsv16x_gy_data_rate_get+0xe2>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_30Hz;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	2204      	movs	r2, #4
 80097ee:	701a      	strb	r2, [r3, #0]
          break;
 80097f0:	e007      	b.n	8009802 <lsm6dsv16x_gy_data_rate_get+0xea>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_31Hz25;
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	2214      	movs	r2, #20
 80097f6:	701a      	strb	r2, [r3, #0]
          break;
 80097f8:	e003      	b.n	8009802 <lsm6dsv16x_gy_data_rate_get+0xea>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_25Hz;
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	2224      	movs	r2, #36	@ 0x24
 80097fe:	701a      	strb	r2, [r3, #0]
          break;
 8009800:	bf00      	nop
      }
      break;
 8009802:	e093      	b.n	800992c <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_60Hz:
      switch (sel)
 8009804:	7cfb      	ldrb	r3, [r7, #19]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d005      	beq.n	8009816 <lsm6dsv16x_gy_data_rate_get+0xfe>
 800980a:	2b02      	cmp	r3, #2
 800980c:	d007      	beq.n	800981e <lsm6dsv16x_gy_data_rate_get+0x106>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_60Hz;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	2205      	movs	r2, #5
 8009812:	701a      	strb	r2, [r3, #0]
          break;
 8009814:	e007      	b.n	8009826 <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_62Hz5;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2215      	movs	r2, #21
 800981a:	701a      	strb	r2, [r3, #0]
          break;
 800981c:	e003      	b.n	8009826 <lsm6dsv16x_gy_data_rate_get+0x10e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_50Hz;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	2225      	movs	r2, #37	@ 0x25
 8009822:	701a      	strb	r2, [r3, #0]
          break;
 8009824:	bf00      	nop
      }
      break;
 8009826:	e081      	b.n	800992c <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_120Hz:
      switch (sel)
 8009828:	7cfb      	ldrb	r3, [r7, #19]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d005      	beq.n	800983a <lsm6dsv16x_gy_data_rate_get+0x122>
 800982e:	2b02      	cmp	r3, #2
 8009830:	d007      	beq.n	8009842 <lsm6dsv16x_gy_data_rate_get+0x12a>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_120Hz;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	2206      	movs	r2, #6
 8009836:	701a      	strb	r2, [r3, #0]
          break;
 8009838:	e007      	b.n	800984a <lsm6dsv16x_gy_data_rate_get+0x132>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_125Hz;
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	2216      	movs	r2, #22
 800983e:	701a      	strb	r2, [r3, #0]
          break;
 8009840:	e003      	b.n	800984a <lsm6dsv16x_gy_data_rate_get+0x132>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_100Hz;
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	2226      	movs	r2, #38	@ 0x26
 8009846:	701a      	strb	r2, [r3, #0]
          break;
 8009848:	bf00      	nop
      }
      break;
 800984a:	e06f      	b.n	800992c <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_240Hz:
      switch (sel)
 800984c:	7cfb      	ldrb	r3, [r7, #19]
 800984e:	2b01      	cmp	r3, #1
 8009850:	d005      	beq.n	800985e <lsm6dsv16x_gy_data_rate_get+0x146>
 8009852:	2b02      	cmp	r3, #2
 8009854:	d007      	beq.n	8009866 <lsm6dsv16x_gy_data_rate_get+0x14e>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_240Hz;
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	2207      	movs	r2, #7
 800985a:	701a      	strb	r2, [r3, #0]
          break;
 800985c:	e007      	b.n	800986e <lsm6dsv16x_gy_data_rate_get+0x156>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_250Hz;
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	2217      	movs	r2, #23
 8009862:	701a      	strb	r2, [r3, #0]
          break;
 8009864:	e003      	b.n	800986e <lsm6dsv16x_gy_data_rate_get+0x156>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_200Hz;
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	2227      	movs	r2, #39	@ 0x27
 800986a:	701a      	strb	r2, [r3, #0]
          break;
 800986c:	bf00      	nop
      }
      break;
 800986e:	e05d      	b.n	800992c <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_480Hz:
      switch (sel)
 8009870:	7cfb      	ldrb	r3, [r7, #19]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d005      	beq.n	8009882 <lsm6dsv16x_gy_data_rate_get+0x16a>
 8009876:	2b02      	cmp	r3, #2
 8009878:	d007      	beq.n	800988a <lsm6dsv16x_gy_data_rate_get+0x172>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_480Hz;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	2208      	movs	r2, #8
 800987e:	701a      	strb	r2, [r3, #0]
          break;
 8009880:	e007      	b.n	8009892 <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_500Hz;
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2218      	movs	r2, #24
 8009886:	701a      	strb	r2, [r3, #0]
          break;
 8009888:	e003      	b.n	8009892 <lsm6dsv16x_gy_data_rate_get+0x17a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_400Hz;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2228      	movs	r2, #40	@ 0x28
 800988e:	701a      	strb	r2, [r3, #0]
          break;
 8009890:	bf00      	nop
      }
      break;
 8009892:	e04b      	b.n	800992c <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_960Hz:
      switch (sel)
 8009894:	7cfb      	ldrb	r3, [r7, #19]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d005      	beq.n	80098a6 <lsm6dsv16x_gy_data_rate_get+0x18e>
 800989a:	2b02      	cmp	r3, #2
 800989c:	d007      	beq.n	80098ae <lsm6dsv16x_gy_data_rate_get+0x196>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_960Hz;
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	2209      	movs	r2, #9
 80098a2:	701a      	strb	r2, [r3, #0]
          break;
 80098a4:	e007      	b.n	80098b6 <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_1000Hz;
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	2219      	movs	r2, #25
 80098aa:	701a      	strb	r2, [r3, #0]
          break;
 80098ac:	e003      	b.n	80098b6 <lsm6dsv16x_gy_data_rate_get+0x19e>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_800Hz;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2229      	movs	r2, #41	@ 0x29
 80098b2:	701a      	strb	r2, [r3, #0]
          break;
 80098b4:	bf00      	nop
      }
      break;
 80098b6:	e039      	b.n	800992c <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_1920Hz:
      switch (sel)
 80098b8:	7cfb      	ldrb	r3, [r7, #19]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d005      	beq.n	80098ca <lsm6dsv16x_gy_data_rate_get+0x1b2>
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d007      	beq.n	80098d2 <lsm6dsv16x_gy_data_rate_get+0x1ba>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_1920Hz;
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	220a      	movs	r2, #10
 80098c6:	701a      	strb	r2, [r3, #0]
          break;
 80098c8:	e007      	b.n	80098da <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_2000Hz;
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	221a      	movs	r2, #26
 80098ce:	701a      	strb	r2, [r3, #0]
          break;
 80098d0:	e003      	b.n	80098da <lsm6dsv16x_gy_data_rate_get+0x1c2>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_1600Hz;
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	222a      	movs	r2, #42	@ 0x2a
 80098d6:	701a      	strb	r2, [r3, #0]
          break;
 80098d8:	bf00      	nop
      }
      break;
 80098da:	e027      	b.n	800992c <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_3840Hz:
      switch (sel)
 80098dc:	7cfb      	ldrb	r3, [r7, #19]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d005      	beq.n	80098ee <lsm6dsv16x_gy_data_rate_get+0x1d6>
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	d007      	beq.n	80098f6 <lsm6dsv16x_gy_data_rate_get+0x1de>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_3840Hz;
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	220b      	movs	r2, #11
 80098ea:	701a      	strb	r2, [r3, #0]
          break;
 80098ec:	e007      	b.n	80098fe <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_4000Hz;
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	221b      	movs	r2, #27
 80098f2:	701a      	strb	r2, [r3, #0]
          break;
 80098f4:	e003      	b.n	80098fe <lsm6dsv16x_gy_data_rate_get+0x1e6>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_3200Hz;
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	222b      	movs	r2, #43	@ 0x2b
 80098fa:	701a      	strb	r2, [r3, #0]
          break;
 80098fc:	bf00      	nop
      }
      break;
 80098fe:	e015      	b.n	800992c <lsm6dsv16x_gy_data_rate_get+0x214>

    case LSM6DSV16X_ODR_AT_7680Hz:
      switch (sel)
 8009900:	7cfb      	ldrb	r3, [r7, #19]
 8009902:	2b01      	cmp	r3, #1
 8009904:	d005      	beq.n	8009912 <lsm6dsv16x_gy_data_rate_get+0x1fa>
 8009906:	2b02      	cmp	r3, #2
 8009908:	d007      	beq.n	800991a <lsm6dsv16x_gy_data_rate_get+0x202>
      {
        default:
        case 0:
          *val = LSM6DSV16X_ODR_AT_7680Hz;
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	220c      	movs	r2, #12
 800990e:	701a      	strb	r2, [r3, #0]
          break;
 8009910:	e007      	b.n	8009922 <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 1:
          *val = LSM6DSV16X_ODR_HA01_AT_8000Hz;
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	221c      	movs	r2, #28
 8009916:	701a      	strb	r2, [r3, #0]
          break;
 8009918:	e003      	b.n	8009922 <lsm6dsv16x_gy_data_rate_get+0x20a>
        case 2:
          *val = LSM6DSV16X_ODR_HA02_AT_6400Hz;
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	222c      	movs	r2, #44	@ 0x2c
 800991e:	701a      	strb	r2, [r3, #0]
          break;
 8009920:	bf00      	nop
      }
      break;
 8009922:	e003      	b.n	800992c <lsm6dsv16x_gy_data_rate_get+0x214>

    default:
      *val = LSM6DSV16X_ODR_OFF;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	2200      	movs	r2, #0
 8009928:	701a      	strb	r2, [r3, #0]
      break;
 800992a:	bf00      	nop
  }

  return ret;
 800992c:	697b      	ldr	r3, [r7, #20]
}
 800992e:	4618      	mov	r0, r3
 8009930:	3718      	adds	r7, #24
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop

08009938 <lsm6dsv16x_auto_increment_set>:
  * @param  val      Register address automatically incremented during a multiple byte access with a serial interface (enable by default).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	460b      	mov	r3, r1
 8009942:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8009944:	f107 0208 	add.w	r2, r7, #8
 8009948:	2301      	movs	r3, #1
 800994a:	2112      	movs	r1, #18
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7ff fcb3 	bl	80092b8 <lsm6dsv16x_read_reg>
 8009952:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10f      	bne.n	800997a <lsm6dsv16x_auto_increment_set+0x42>
  {
    ctrl3.if_inc = val;
 800995a:	78fb      	ldrb	r3, [r7, #3]
 800995c:	f003 0301 	and.w	r3, r3, #1
 8009960:	b2da      	uxtb	r2, r3
 8009962:	7a3b      	ldrb	r3, [r7, #8]
 8009964:	f362 0382 	bfi	r3, r2, #2, #1
 8009968:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 800996a:	f107 0208 	add.w	r2, r7, #8
 800996e:	2301      	movs	r3, #1
 8009970:	2112      	movs	r1, #18
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f7ff fcbe 	bl	80092f4 <lsm6dsv16x_write_reg>
 8009978:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800997a:	68fb      	ldr	r3, [r7, #12]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <lsm6dsv16x_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	460b      	mov	r3, r1
 800998e:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl3_t ctrl3;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 8009990:	f107 0208 	add.w	r2, r7, #8
 8009994:	2301      	movs	r3, #1
 8009996:	2112      	movs	r1, #18
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f7ff fc8d 	bl	80092b8 <lsm6dsv16x_read_reg>
 800999e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10f      	bne.n	80099c6 <lsm6dsv16x_block_data_update_set+0x42>
  {
    ctrl3.bdu = val;
 80099a6:	78fb      	ldrb	r3, [r7, #3]
 80099a8:	f003 0301 	and.w	r3, r3, #1
 80099ac:	b2da      	uxtb	r2, r3
 80099ae:	7a3b      	ldrb	r3, [r7, #8]
 80099b0:	f362 1386 	bfi	r3, r2, #6, #1
 80099b4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL3, (uint8_t *)&ctrl3, 1);
 80099b6:	f107 0208 	add.w	r2, r7, #8
 80099ba:	2301      	movs	r3, #1
 80099bc:	2112      	movs	r1, #18
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f7ff fc98 	bl	80092f4 <lsm6dsv16x_write_reg>
 80099c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80099c6:	68fb      	ldr	r3, [r7, #12]
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <lsm6dsv16x_gy_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t val)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	460b      	mov	r3, r1
 80099da:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 80099dc:	f107 0208 	add.w	r2, r7, #8
 80099e0:	2301      	movs	r3, #1
 80099e2:	2115      	movs	r1, #21
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7ff fc67 	bl	80092b8 <lsm6dsv16x_read_reg>
 80099ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10f      	bne.n	8009a12 <lsm6dsv16x_gy_full_scale_set+0x42>
  {
    ctrl6.fs_g = (uint8_t)val & 0xfu;
 80099f2:	78fb      	ldrb	r3, [r7, #3]
 80099f4:	f003 030f 	and.w	r3, r3, #15
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	7a3b      	ldrb	r3, [r7, #8]
 80099fc:	f362 0303 	bfi	r3, r2, #0, #4
 8009a00:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8009a02:	f107 0208 	add.w	r2, r7, #8
 8009a06:	2301      	movs	r3, #1
 8009a08:	2115      	movs	r1, #21
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f7ff fc72 	bl	80092f4 <lsm6dsv16x_write_reg>
 8009a10:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009a12:	68fb      	ldr	r3, [r7, #12]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <lsm6dsv16x_gy_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_gy_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_gy_full_scale_t *val)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl6_t ctrl6;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL6, (uint8_t *)&ctrl6, 1);
 8009a26:	f107 0208 	add.w	r2, r7, #8
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	2115      	movs	r1, #21
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7ff fc42 	bl	80092b8 <lsm6dsv16x_read_reg>
 8009a34:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d001      	beq.n	8009a40 <lsm6dsv16x_gy_full_scale_get+0x24>
  {
    return ret;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	e040      	b.n	8009ac2 <lsm6dsv16x_gy_full_scale_get+0xa6>
  }

  switch (ctrl6.fs_g)
 8009a40:	7a3b      	ldrb	r3, [r7, #8]
 8009a42:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b0c      	cmp	r3, #12
 8009a4a:	d835      	bhi.n	8009ab8 <lsm6dsv16x_gy_full_scale_get+0x9c>
 8009a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a54 <lsm6dsv16x_gy_full_scale_get+0x38>)
 8009a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a52:	bf00      	nop
 8009a54:	08009a89 	.word	0x08009a89
 8009a58:	08009a91 	.word	0x08009a91
 8009a5c:	08009a99 	.word	0x08009a99
 8009a60:	08009aa1 	.word	0x08009aa1
 8009a64:	08009aa9 	.word	0x08009aa9
 8009a68:	08009ab9 	.word	0x08009ab9
 8009a6c:	08009ab9 	.word	0x08009ab9
 8009a70:	08009ab9 	.word	0x08009ab9
 8009a74:	08009ab9 	.word	0x08009ab9
 8009a78:	08009ab9 	.word	0x08009ab9
 8009a7c:	08009ab9 	.word	0x08009ab9
 8009a80:	08009ab9 	.word	0x08009ab9
 8009a84:	08009ab1 	.word	0x08009ab1
  {
    case LSM6DSV16X_125dps:
      *val = LSM6DSV16X_125dps;
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	701a      	strb	r2, [r3, #0]
      break;
 8009a8e:	e017      	b.n	8009ac0 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_250dps:
      *val = LSM6DSV16X_250dps;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	2201      	movs	r2, #1
 8009a94:	701a      	strb	r2, [r3, #0]
      break;
 8009a96:	e013      	b.n	8009ac0 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_500dps:
      *val = LSM6DSV16X_500dps;
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	701a      	strb	r2, [r3, #0]
      break;
 8009a9e:	e00f      	b.n	8009ac0 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_1000dps:
      *val = LSM6DSV16X_1000dps;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	2203      	movs	r2, #3
 8009aa4:	701a      	strb	r2, [r3, #0]
      break;
 8009aa6:	e00b      	b.n	8009ac0 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_2000dps:
      *val = LSM6DSV16X_2000dps;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	2204      	movs	r2, #4
 8009aac:	701a      	strb	r2, [r3, #0]
      break;
 8009aae:	e007      	b.n	8009ac0 <lsm6dsv16x_gy_full_scale_get+0xa4>

    case LSM6DSV16X_4000dps:
      *val = LSM6DSV16X_4000dps;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	220c      	movs	r2, #12
 8009ab4:	701a      	strb	r2, [r3, #0]
      break;
 8009ab6:	e003      	b.n	8009ac0 <lsm6dsv16x_gy_full_scale_get+0xa4>

    default:
      *val = LSM6DSV16X_125dps;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	2200      	movs	r2, #0
 8009abc:	701a      	strb	r2, [r3, #0]
      break;
 8009abe:	bf00      	nop
  }

  return ret;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop

08009acc <lsm6dsv16x_xl_full_scale_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t val)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8009ad8:	f107 0208 	add.w	r2, r7, #8
 8009adc:	2301      	movs	r3, #1
 8009ade:	2117      	movs	r1, #23
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7ff fbe9 	bl	80092b8 <lsm6dsv16x_read_reg>
 8009ae6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10f      	bne.n	8009b0e <lsm6dsv16x_xl_full_scale_set+0x42>
  {
    ctrl8.fs_xl = (uint8_t)val & 0x3U;
 8009aee:	78fb      	ldrb	r3, [r7, #3]
 8009af0:	f003 0303 	and.w	r3, r3, #3
 8009af4:	b2da      	uxtb	r2, r3
 8009af6:	7a3b      	ldrb	r3, [r7, #8]
 8009af8:	f362 0301 	bfi	r3, r2, #0, #2
 8009afc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8009afe:	f107 0208 	add.w	r2, r7, #8
 8009b02:	2301      	movs	r3, #1
 8009b04:	2117      	movs	r1, #23
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f7ff fbf4 	bl	80092f4 <lsm6dsv16x_write_reg>
 8009b0c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <lsm6dsv16x_xl_full_scale_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_xl_full_scale_get(const stmdev_ctx_t *ctx,
                                     lsm6dsv16x_xl_full_scale_t *val)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  lsm6dsv16x_ctrl8_t ctrl8;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL8, (uint8_t *)&ctrl8, 1);
 8009b22:	f107 0208 	add.w	r2, r7, #8
 8009b26:	2301      	movs	r3, #1
 8009b28:	2117      	movs	r1, #23
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f7ff fbc4 	bl	80092b8 <lsm6dsv16x_read_reg>
 8009b30:	60f8      	str	r0, [r7, #12]
  if (ret != 0)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <lsm6dsv16x_xl_full_scale_get+0x24>
  {
    return ret;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	e026      	b.n	8009b8a <lsm6dsv16x_xl_full_scale_get+0x72>
  }

  switch (ctrl8.fs_xl)
 8009b3c:	7a3b      	ldrb	r3, [r7, #8]
 8009b3e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	2b03      	cmp	r3, #3
 8009b46:	d81b      	bhi.n	8009b80 <lsm6dsv16x_xl_full_scale_get+0x68>
 8009b48:	a201      	add	r2, pc, #4	@ (adr r2, 8009b50 <lsm6dsv16x_xl_full_scale_get+0x38>)
 8009b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4e:	bf00      	nop
 8009b50:	08009b61 	.word	0x08009b61
 8009b54:	08009b69 	.word	0x08009b69
 8009b58:	08009b71 	.word	0x08009b71
 8009b5c:	08009b79 	.word	0x08009b79
  {
    case LSM6DSV16X_2g:
      *val = LSM6DSV16X_2g;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	2200      	movs	r2, #0
 8009b64:	701a      	strb	r2, [r3, #0]
      break;
 8009b66:	e00f      	b.n	8009b88 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_4g:
      *val = LSM6DSV16X_4g;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	701a      	strb	r2, [r3, #0]
      break;
 8009b6e:	e00b      	b.n	8009b88 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_8g:
      *val = LSM6DSV16X_8g;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	2202      	movs	r2, #2
 8009b74:	701a      	strb	r2, [r3, #0]
      break;
 8009b76:	e007      	b.n	8009b88 <lsm6dsv16x_xl_full_scale_get+0x70>

    case LSM6DSV16X_16g:
      *val = LSM6DSV16X_16g;
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	2203      	movs	r2, #3
 8009b7c:	701a      	strb	r2, [r3, #0]
      break;
 8009b7e:	e003      	b.n	8009b88 <lsm6dsv16x_xl_full_scale_get+0x70>

    default:
      *val = LSM6DSV16X_2g;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	2200      	movs	r2, #0
 8009b84:	701a      	strb	r2, [r3, #0]
      break;
 8009b86:	bf00      	nop
  }

  return ret;
 8009b88:	68fb      	ldr	r3, [r7, #12]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop

08009b94 <lsm6dsv16x_angular_rate_raw_get>:
  * @param  val      Angular rate sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_G, &buff[0], 6);
 8009b9e:	f107 020c 	add.w	r2, r7, #12
 8009ba2:	2306      	movs	r3, #6
 8009ba4:	2122      	movs	r1, #34	@ 0x22
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7ff fb86 	bl	80092b8 <lsm6dsv16x_read_reg>
 8009bac:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d001      	beq.n	8009bb8 <lsm6dsv16x_angular_rate_raw_get+0x24>
  {
    return ret;
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	e036      	b.n	8009c26 <lsm6dsv16x_angular_rate_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 8009bb8:	7b7b      	ldrb	r3, [r7, #13]
 8009bba:	b21a      	sxth	r2, r3
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	021b      	lsls	r3, r3, #8
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	7b3a      	ldrb	r2, [r7, #12]
 8009bce:	4413      	add	r3, r2
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	b21a      	sxth	r2, r3
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8009bd8:	7bfa      	ldrb	r2, [r7, #15]
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	3302      	adds	r3, #2
 8009bde:	b212      	sxth	r2, r2
 8009be0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	3302      	adds	r3, #2
 8009be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	021b      	lsls	r3, r3, #8
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	7bba      	ldrb	r2, [r7, #14]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	3302      	adds	r3, #2
 8009bfa:	b212      	sxth	r2, r2
 8009bfc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8009bfe:	7c7a      	ldrb	r2, [r7, #17]
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	3304      	adds	r3, #4
 8009c04:	b212      	sxth	r2, r2
 8009c06:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	3304      	adds	r3, #4
 8009c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	021b      	lsls	r3, r3, #8
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	7c3a      	ldrb	r2, [r7, #16]
 8009c18:	4413      	add	r3, r2
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	3304      	adds	r3, #4
 8009c20:	b212      	sxth	r2, r2
 8009c22:	801a      	strh	r2, [r3, #0]

  return ret;
 8009c24:	697b      	ldr	r3, [r7, #20]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3718      	adds	r7, #24
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <lsm6dsv16x_acceleration_raw_get>:
  * @param  val      Linear acceleration sensor.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b086      	sub	sp, #24
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
 8009c36:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_OUTX_L_A, &buff[0], 6);
 8009c38:	f107 020c 	add.w	r2, r7, #12
 8009c3c:	2306      	movs	r3, #6
 8009c3e:	2128      	movs	r1, #40	@ 0x28
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7ff fb39 	bl	80092b8 <lsm6dsv16x_read_reg>
 8009c46:	6178      	str	r0, [r7, #20]
  if (ret != 0)
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <lsm6dsv16x_acceleration_raw_get+0x24>
  {
    return ret;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	e036      	b.n	8009cc0 <lsm6dsv16x_acceleration_raw_get+0x92>
  }

  val[0] = (int16_t)buff[1];
 8009c52:	7b7b      	ldrb	r3, [r7, #13]
 8009c54:	b21a      	sxth	r2, r3
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	021b      	lsls	r3, r3, #8
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	7b3a      	ldrb	r2, [r7, #12]
 8009c68:	4413      	add	r3, r2
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	b21a      	sxth	r2, r3
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8009c72:	7bfa      	ldrb	r2, [r7, #15]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	3302      	adds	r3, #2
 8009c78:	b212      	sxth	r2, r2
 8009c7a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	3302      	adds	r3, #2
 8009c80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	021b      	lsls	r3, r3, #8
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	7bba      	ldrb	r2, [r7, #14]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	3302      	adds	r3, #2
 8009c94:	b212      	sxth	r2, r2
 8009c96:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8009c98:	7c7a      	ldrb	r2, [r7, #17]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	b212      	sxth	r2, r2
 8009ca0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	021b      	lsls	r3, r3, #8
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	7c3a      	ldrb	r2, [r7, #16]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	3304      	adds	r3, #4
 8009cba:	b212      	sxth	r2, r2
 8009cbc:	801a      	strh	r2, [r3, #0]

  return ret;
 8009cbe:	697b      	ldr	r3, [r7, #20]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3718      	adds	r7, #24
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <lsm6dsv16x_fifo_mode_set>:
  * @param  val      BYPASS_MODE, FIFO_MODE, STREAM_WTM_TO_FULL_MODE, STREAM_TO_FIFO_MODE, BYPASS_TO_STREAM_MODE, STREAM_MODE, BYPASS_TO_FIFO_MODE,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_fifo_mode_set(const stmdev_ctx_t *ctx, lsm6dsv16x_fifo_mode_t val)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	70fb      	strb	r3, [r7, #3]
  lsm6dsv16x_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8009cd4:	f107 0208 	add.w	r2, r7, #8
 8009cd8:	2301      	movs	r3, #1
 8009cda:	210a      	movs	r1, #10
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7ff faeb 	bl	80092b8 <lsm6dsv16x_read_reg>
 8009ce2:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d10f      	bne.n	8009d0a <lsm6dsv16x_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val & 0x07U;
 8009cea:	78fb      	ldrb	r3, [r7, #3]
 8009cec:	f003 0307 	and.w	r3, r3, #7
 8009cf0:	b2da      	uxtb	r2, r3
 8009cf2:	7a3b      	ldrb	r3, [r7, #8]
 8009cf4:	f362 0302 	bfi	r3, r2, #0, #3
 8009cf8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_FIFO_CTRL4, (uint8_t *)&fifo_ctrl4, 1);
 8009cfa:	f107 0208 	add.w	r2, r7, #8
 8009cfe:	2301      	movs	r3, #1
 8009d00:	210a      	movs	r1, #10
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f7ff faf6 	bl	80092f4 <lsm6dsv16x_write_reg>
 8009d08:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <lsm6dsv16x_ah_qvar_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dsv16x_ah_qvar_mode_set(const stmdev_ctx_t *ctx,
                                    lsm6dsv16x_ah_qvar_mode_t val)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	7039      	strb	r1, [r7, #0]
  lsm6dsv16x_ctrl7_t ctrl7;
  int32_t ret;

  ret = lsm6dsv16x_read_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8009d1e:	f107 0208 	add.w	r2, r7, #8
 8009d22:	2301      	movs	r3, #1
 8009d24:	2116      	movs	r1, #22
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7ff fac6 	bl	80092b8 <lsm6dsv16x_read_reg>
 8009d2c:	60f8      	str	r0, [r7, #12]
  if (ret == 0)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10f      	bne.n	8009d54 <lsm6dsv16x_ah_qvar_mode_set+0x40>
  {
    ctrl7.ah_qvar_en = val.ah_qvar_en;
 8009d34:	783b      	ldrb	r3, [r7, #0]
 8009d36:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009d3a:	b2da      	uxtb	r2, r3
 8009d3c:	7a3b      	ldrb	r3, [r7, #8]
 8009d3e:	f362 13c7 	bfi	r3, r2, #7, #1
 8009d42:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsv16x_write_reg(ctx, LSM6DSV16X_CTRL7, (uint8_t *)&ctrl7, 1);
 8009d44:	f107 0208 	add.w	r2, r7, #8
 8009d48:	2301      	movs	r3, #1
 8009d4a:	2116      	movs	r1, #22
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f7ff fad1 	bl	80092f4 <lsm6dsv16x_write_reg>
 8009d52:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8009d54:	68fb      	ldr	r3, [r7, #12]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
	...

08009d60 <SHT40AD1B_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_RegisterBusIO(SHT40AD1B_Object_t *pObj, SHT40AD1B_IO_t *pIO)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d103      	bne.n	8009d78 <SHT40AD1B_RegisterBusIO+0x18>
  {
    ret = SHT40AD1B_ERROR;
 8009d70:	f04f 33ff 	mov.w	r3, #4294967295
 8009d74:	60fb      	str	r3, [r7, #12]
 8009d76:	e034      	b.n	8009de2 <SHT40AD1B_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init    = pIO->Init;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit  = pIO->DeInit;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	685a      	ldr	r2, [r3, #4]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType = pIO->BusType;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	689a      	ldr	r2, [r3, #8]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address = pIO->Address;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	7b1a      	ldrb	r2, [r3, #12]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	731a      	strb	r2, [r3, #12]
    pObj->IO.Write   = pIO->Write;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	691a      	ldr	r2, [r3, #16]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	611a      	str	r2, [r3, #16]
    pObj->IO.Read    = pIO->Read;
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	695a      	ldr	r2, [r3, #20]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick = pIO->GetTick;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	699a      	ldr	r2, [r3, #24]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a0e      	ldr	r2, [pc, #56]	@ (8009dec <SHT40AD1B_RegisterBusIO+0x8c>)
 8009db4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a0d      	ldr	r2, [pc, #52]	@ (8009df0 <SHT40AD1B_RegisterBusIO+0x90>)
 8009dba:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	69da      	ldr	r2, [r3, #28]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d004      	beq.n	8009ddc <SHT40AD1B_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4798      	blx	r3
 8009dd8:	60f8      	str	r0, [r7, #12]
 8009dda:	e002      	b.n	8009de2 <SHT40AD1B_RegisterBusIO+0x82>
    }
    else
    {
      ret = SHT40AD1B_ERROR;
 8009ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8009de0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8009de2:	68fb      	ldr	r3, [r7, #12]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	0800a071 	.word	0x0800a071
 8009df0:	0800a0b1 	.word	0x0800a0b1

08009df4 <SHT40AD1B_Init>:
  * @brief  Initialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_Init(SHT40AD1B_Object_t *pObj)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  /* This device doesn't support ODR, works more like one-shot measurement */
  pObj->hum_odr  = 0.0f;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f04f 0200 	mov.w	r2, #0
 8009e02:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->temp_odr = 0.0f;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f04f 0200 	mov.w	r2, #0
 8009e0a:	639a      	str	r2, [r3, #56]	@ 0x38

  pObj->is_initialized = 1;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <SHT40AD1B_DeInit>:
  * @brief  Deinitialize the SHT40AD1B sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_DeInit(SHT40AD1B_Object_t *pObj)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  pObj->is_initialized = 0;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return SHT40AD1B_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <SHT40AD1B_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_ReadID(SHT40AD1B_Object_t *pObj, uint8_t *Id)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  return sht40ad1b_device_id_get(&(pObj->Ctx), Id);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	3320      	adds	r3, #32
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f000 fa23 	bl	800a29c <sht40ad1b_device_id_get>
 8009e56:	4603      	mov	r3, r0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <SHT40AD1B_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to SHT40AD1B sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_GetCapabilities(SHT40AD1B_Object_t *pObj, SHT40AD1B_Capabilities_t *Capabilities)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	2200      	movs	r2, #0
 8009e74:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	2200      	movs	r2, #0
 8009e86:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	f04f 0200 	mov.w	r2, #0
 8009e8e:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 0.0f;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	f04f 0200 	mov.w	r2, #0
 8009e96:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	f04f 0200 	mov.w	r2, #0
 8009e9e:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	f04f 0200 	mov.w	r2, #0
 8009ea6:	615a      	str	r2, [r3, #20]
  return SHT40AD1B_OK;
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr

08009eb6 <SHT40AD1B_HUM_Enable>:
  * @brief  Enable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Enable(SHT40AD1B_Object_t *pObj)
{
 8009eb6:	b480      	push	{r7}
 8009eb8:	b083      	sub	sp, #12
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d101      	bne.n	8009ecc <SHT40AD1B_HUM_Enable+0x16>
  {
    return SHT40AD1B_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	e004      	b.n	8009ed6 <SHT40AD1B_HUM_Enable+0x20>
  }

  pObj->hum_is_enabled = 1;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	370c      	adds	r7, #12
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr

08009ee2 <SHT40AD1B_HUM_Disable>:
  * @brief  Disable the SHT40AD1B humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_Disable(SHT40AD1B_Object_t *pObj)
{
 8009ee2:	b480      	push	{r7}
 8009ee4:	b083      	sub	sp, #12
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <SHT40AD1B_HUM_Disable+0x16>
  {
    return SHT40AD1B_OK;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	e004      	b.n	8009f02 <SHT40AD1B_HUM_Disable+0x20>
  }

  pObj->hum_is_enabled = 0;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return SHT40AD1B_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	370c      	adds	r7, #12
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <SHT40AD1B_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 8009f0e:	b480      	push	{r7}
 8009f10:	b083      	sub	sp, #12
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
 8009f16:	6039      	str	r1, [r7, #0]
  *Odr = pObj->hum_odr;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	370c      	adds	r7, #12
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <SHT40AD1B_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 8009f2e:	b480      	push	{r7}
 8009f30:	b083      	sub	sp, #12
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <SHT40AD1B_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_HUM_GetHumidity(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f86f 	bl	800a036 <GetData>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d002      	beq.n	8009f64 <SHT40AD1B_HUM_GetHumidity+0x1c>
  {
    return SHT40AD1B_ERROR;
 8009f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f62:	e004      	b.n	8009f6e <SHT40AD1B_HUM_GetHumidity+0x26>
  }

  *Value = pObj->hum_value;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009f6c:	2300      	movs	r3, #0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <SHT40AD1B_TEMP_Enable>:
  * @brief  Enable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Enable(SHT40AD1B_Object_t *pObj)
{
 8009f76:	b480      	push	{r7}
 8009f78:	b083      	sub	sp, #12
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d101      	bne.n	8009f8c <SHT40AD1B_TEMP_Enable+0x16>
  {
    return SHT40AD1B_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	e004      	b.n	8009f96 <SHT40AD1B_TEMP_Enable+0x20>
  }

  pObj->temp_is_enabled = 1;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	370c      	adds	r7, #12
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr

08009fa2 <SHT40AD1B_TEMP_Disable>:
  * @brief  Disable the SHT40AD1B temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_Disable(SHT40AD1B_Object_t *pObj)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b083      	sub	sp, #12
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d101      	bne.n	8009fb8 <SHT40AD1B_TEMP_Disable+0x16>
  {
    return SHT40AD1B_OK;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	e004      	b.n	8009fc2 <SHT40AD1B_TEMP_Disable+0x20>
  }

  pObj->temp_is_enabled = 0;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return SHT40AD1B_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	370c      	adds	r7, #12
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr

08009fce <SHT40AD1B_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t *Odr)
{
 8009fce:	b480      	push	{r7}
 8009fd0:	b083      	sub	sp, #12
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	6039      	str	r1, [r7, #0]
  *Odr = pObj->temp_odr;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	370c      	adds	r7, #12
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr

08009fee <SHT40AD1B_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_SetOutputDataRate(SHT40AD1B_Object_t *pObj, float_t Odr)
{
 8009fee:	b480      	push	{r7}
 8009ff0:	b083      	sub	sp, #12
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	ed87 0a00 	vstr	s0, [r7]
  /* This device doesn't support ODR, works more like one-shot measurement */
  return SHT40AD1B_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <SHT40AD1B_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t SHT40AD1B_TEMP_GetTemperature(SHT40AD1B_Object_t *pObj, float_t *Value)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  if (GetData(pObj) != SHT40AD1B_OK)
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f80f 	bl	800a036 <GetData>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d002      	beq.n	800a024 <SHT40AD1B_TEMP_GetTemperature+0x1c>
  {
    return SHT40AD1B_ERROR;
 800a01e:	f04f 33ff 	mov.w	r3, #4294967295
 800a022:	e004      	b.n	800a02e <SHT40AD1B_TEMP_GetTemperature+0x26>
  }

  *Value = pObj->temp_value;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	601a      	str	r2, [r3, #0]

  return SHT40AD1B_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3708      	adds	r7, #8
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <GetData>:
  * @param  pObj the device pObj
  * @param  Status the new data status
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t GetData(SHT40AD1B_Object_t *pObj)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b084      	sub	sp, #16
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  float_t data[2];  /* humidity, temperature */

  if (sht40ad1b_data_get(&(pObj->Ctx), data) != 0)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	3320      	adds	r3, #32
 800a042:	f107 0208 	add.w	r2, r7, #8
 800a046:	4611      	mov	r1, r2
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 f881 	bl	800a150 <sht40ad1b_data_get>
 800a04e:	4603      	mov	r3, r0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d002      	beq.n	800a05a <GetData+0x24>
  {
    return SHT40AD1B_ERROR;
 800a054:	f04f 33ff 	mov.w	r3, #4294967295
 800a058:	e006      	b.n	800a068 <GetData+0x32>
  }

  pObj->hum_value = data[0];
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	63da      	str	r2, [r3, #60]	@ 0x3c
  pObj->temp_value = data[1];
 800a060:	68fa      	ldr	r2, [r7, #12]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	641a      	str	r2, [r3, #64]	@ 0x40

  return SHT40AD1B_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3710      	adds	r7, #16
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	607a      	str	r2, [r7, #4]
 800a07a:	461a      	mov	r2, r3
 800a07c:	460b      	mov	r3, r1
 800a07e:	72fb      	strb	r3, [r7, #11]
 800a080:	4613      	mov	r3, r2
 800a082:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d109      	bne.n	800a0a4 <ReadRegWrap+0x34>
  {
    return pObj->IO.Read(pObj->IO.Address, pData, Length);
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	695b      	ldr	r3, [r3, #20]
 800a094:	697a      	ldr	r2, [r7, #20]
 800a096:	7b12      	ldrb	r2, [r2, #12]
 800a098:	4610      	mov	r0, r2
 800a09a:	893a      	ldrh	r2, [r7, #8]
 800a09c:	6879      	ldr	r1, [r7, #4]
 800a09e:	4798      	blx	r3
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	e001      	b.n	800a0a8 <ReadRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 800a0a4:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3718      	adds	r7, #24
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b086      	sub	sp, #24
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	607a      	str	r2, [r7, #4]
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	460b      	mov	r3, r1
 800a0be:	72fb      	strb	r3, [r7, #11]
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	813b      	strh	r3, [r7, #8]
  SHT40AD1B_Object_t *pObj = (SHT40AD1B_Object_t *)Handle;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	617b      	str	r3, [r7, #20]
  (void)Reg;

  if (pObj->IO.BusType == (uint32_t)SHT40AD1B_I2C_BUS) /* I2C */
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d109      	bne.n	800a0e4 <WriteRegWrap+0x34>
  {
    return pObj->IO.Write(pObj->IO.Address, pData, Length);
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	691b      	ldr	r3, [r3, #16]
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	7b12      	ldrb	r2, [r2, #12]
 800a0d8:	4610      	mov	r0, r2
 800a0da:	893a      	ldrh	r2, [r7, #8]
 800a0dc:	6879      	ldr	r1, [r7, #4]
 800a0de:	4798      	blx	r3
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	e001      	b.n	800a0e8 <WriteRegWrap+0x38>
  }
  else
  {
    return SHT40AD1B_ERROR;
 800a0e4:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3718      	adds	r7, #24
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <sht40ad1b_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data, uint16_t len)
{
 800a0f0:	b590      	push	{r4, r7, lr}
 800a0f2:	b087      	sub	sp, #28
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	607a      	str	r2, [r7, #4]
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	72fb      	strb	r3, [r7, #11]
 800a100:	4613      	mov	r3, r2
 800a102:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	685c      	ldr	r4, [r3, #4]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	68d8      	ldr	r0, [r3, #12]
 800a10c:	893b      	ldrh	r3, [r7, #8]
 800a10e:	7af9      	ldrb	r1, [r7, #11]
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	47a0      	blx	r4
 800a114:	6178      	str	r0, [r7, #20]

  return ret;
 800a116:	697b      	ldr	r3, [r7, #20]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	371c      	adds	r7, #28
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd90      	pop	{r4, r7, pc}

0800a120 <sht40ad1b_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak sht40ad1b_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data, uint16_t len)
{
 800a120:	b590      	push	{r4, r7, lr}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	607a      	str	r2, [r7, #4]
 800a12a:	461a      	mov	r2, r3
 800a12c:	460b      	mov	r3, r1
 800a12e:	72fb      	strb	r3, [r7, #11]
 800a130:	4613      	mov	r3, r2
 800a132:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681c      	ldr	r4, [r3, #0]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	68d8      	ldr	r0, [r3, #12]
 800a13c:	893b      	ldrh	r3, [r7, #8]
 800a13e:	7af9      	ldrb	r1, [r7, #11]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	47a0      	blx	r4
 800a144:	6178      	str	r0, [r7, #20]

  return ret;
 800a146:	697b      	ldr	r3, [r7, #20]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	371c      	adds	r7, #28
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd90      	pop	{r4, r7, pc}

0800a150 <sht40ad1b_data_get>:
  * @param  buffer  buffer to store humidity and temperature values pair
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_data_get(stmdev_ctx_t *ctx, float_t *buffer)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b088      	sub	sp, #32
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  uint8_t command = 0xFD;
 800a15a:	23fd      	movs	r3, #253	@ 0xfd
 800a15c:	73fb      	strb	r3, [r7, #15]
  uint8_t data[6] = {0};
 800a15e:	f107 0308 	add.w	r3, r7, #8
 800a162:	2200      	movs	r2, #0
 800a164:	601a      	str	r2, [r3, #0]
 800a166:	809a      	strh	r2, [r3, #4]

  if (sht40ad1b_write_reg(ctx, 0, &command, 1) != 0)
 800a168:	f107 020f 	add.w	r2, r7, #15
 800a16c:	2301      	movs	r3, #1
 800a16e:	2100      	movs	r1, #0
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f7ff ffd5 	bl	800a120 <sht40ad1b_write_reg>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d001      	beq.n	800a180 <sht40ad1b_data_get+0x30>
  {
    return 1;
 800a17c:	2301      	movs	r3, #1
 800a17e:	e07d      	b.n	800a27c <sht40ad1b_data_get+0x12c>
  }

  /* Wait 10 ms */
  ctx->mdelay(10);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	200a      	movs	r0, #10
 800a186:	4798      	blx	r3

  if (sht40ad1b_read_reg(ctx, 0, data, 6) != 0)
 800a188:	f107 0208 	add.w	r2, r7, #8
 800a18c:	2306      	movs	r3, #6
 800a18e:	2100      	movs	r1, #0
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff ffad 	bl	800a0f0 <sht40ad1b_read_reg>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <sht40ad1b_data_get+0x50>
  {
    return 1;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e06d      	b.n	800a27c <sht40ad1b_data_get+0x12c>
  }

  uint16_t temp_value_raw = (data[0] * 0x100U) + data[1];
 800a1a0:	7a3b      	ldrb	r3, [r7, #8]
 800a1a2:	021b      	lsls	r3, r3, #8
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	7a7a      	ldrb	r2, [r7, #9]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	83fb      	strh	r3, [r7, #30]
  uint8_t temp_value_crc  = data[2];
 800a1ac:	7abb      	ldrb	r3, [r7, #10]
 800a1ae:	777b      	strb	r3, [r7, #29]
  uint16_t hum_value_raw  = (data[3] * 0x100U) + data[4];
 800a1b0:	7afb      	ldrb	r3, [r7, #11]
 800a1b2:	021b      	lsls	r3, r3, #8
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	7b3a      	ldrb	r2, [r7, #12]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	837b      	strh	r3, [r7, #26]
  uint8_t hum_value_crc   = data[5];
 800a1bc:	7b7b      	ldrb	r3, [r7, #13]
 800a1be:	767b      	strb	r3, [r7, #25]

  /* Check CRC for temperature value */
  if (crc_check(&data[0], 2, temp_value_crc) != 0U)
 800a1c0:	7f7a      	ldrb	r2, [r7, #29]
 800a1c2:	f107 0308 	add.w	r3, r7, #8
 800a1c6:	2102      	movs	r1, #2
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f000 f8b3 	bl	800a334 <crc_check>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <sht40ad1b_data_get+0x88>
  {
    return 1;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e051      	b.n	800a27c <sht40ad1b_data_get+0x12c>
  }

  /* Check CRC for humidity value */
  if (crc_check(&data[3], 2, hum_value_crc) != 0U)
 800a1d8:	7e7a      	ldrb	r2, [r7, #25]
 800a1da:	f107 0308 	add.w	r3, r7, #8
 800a1de:	3303      	adds	r3, #3
 800a1e0:	2102      	movs	r1, #2
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 f8a6 	bl	800a334 <crc_check>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <sht40ad1b_data_get+0xa2>
  {
    return 1;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e044      	b.n	800a27c <sht40ad1b_data_get+0x12c>
  }

  float_t temp_value = -45.0f + (175.0f * (float_t)temp_value_raw / (float_t)0xFFFF);
 800a1f2:	8bfb      	ldrh	r3, [r7, #30]
 800a1f4:	ee07 3a90 	vmov	s15, r3
 800a1f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1fc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800a284 <sht40ad1b_data_get+0x134>
 800a200:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a204:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800a288 <sht40ad1b_data_get+0x138>
 800a208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a20c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800a28c <sht40ad1b_data_get+0x13c>
 800a210:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a214:	edc7 7a05 	vstr	s15, [r7, #20]
  float_t hum_value  =  -6.0f + (125.0f * (float_t)hum_value_raw  / (float_t)0xFFFF);
 800a218:	8b7b      	ldrh	r3, [r7, #26]
 800a21a:	ee07 3a90 	vmov	s15, r3
 800a21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a222:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800a290 <sht40ad1b_data_get+0x140>
 800a226:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a22a:	eddf 6a17 	vldr	s13, [pc, #92]	@ 800a288 <sht40ad1b_data_get+0x138>
 800a22e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a232:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800a236:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a23a:	edc7 7a04 	vstr	s15, [r7, #16]

  hum_value = (hum_value > 100.0f) ? 100.0f
              : (hum_value <   0.0f) ?   0.0f
 800a23e:	edd7 7a04 	vldr	s15, [r7, #16]
 800a242:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800a294 <sht40ad1b_data_get+0x144>
 800a246:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a24e:	dd01      	ble.n	800a254 <sht40ad1b_data_get+0x104>
 800a250:	4b11      	ldr	r3, [pc, #68]	@ (800a298 <sht40ad1b_data_get+0x148>)
 800a252:	e00a      	b.n	800a26a <sht40ad1b_data_get+0x11a>
              :                        hum_value;
 800a254:	edd7 7a04 	vldr	s15, [r7, #16]
 800a258:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a260:	d502      	bpl.n	800a268 <sht40ad1b_data_get+0x118>
 800a262:	f04f 0300 	mov.w	r3, #0
 800a266:	e000      	b.n	800a26a <sht40ad1b_data_get+0x11a>
 800a268:	693b      	ldr	r3, [r7, #16]
  hum_value = (hum_value > 100.0f) ? 100.0f
 800a26a:	613b      	str	r3, [r7, #16]

  buffer[0] = hum_value;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	601a      	str	r2, [r3, #0]
  buffer[1] = temp_value;
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	3304      	adds	r3, #4
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	601a      	str	r2, [r3, #0]
  return 0;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3720      	adds	r7, #32
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	432f0000 	.word	0x432f0000
 800a288:	477fff00 	.word	0x477fff00
 800a28c:	42340000 	.word	0x42340000
 800a290:	42fa0000 	.word	0x42fa0000
 800a294:	42c80000 	.word	0x42c80000
 800a298:	42c80000 	.word	0x42c80000

0800a29c <sht40ad1b_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sht40ad1b_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b083      	sub	sp, #12
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  (void)ctx;
  *buff = SHT40AD1B_ID;
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	701a      	strb	r2, [r3, #0]
  return 0;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <crc_calculate>:
  * @param  count  number of data bytes
  * @retval        CRC check sum of data stream
  *
  */
static uint8_t crc_calculate(const uint8_t *data, uint16_t count)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b085      	sub	sp, #20
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	807b      	strh	r3, [r7, #2]
  const uint8_t crc8_polynomial = 0x31;
 800a2c6:	2331      	movs	r3, #49	@ 0x31
 800a2c8:	72bb      	strb	r3, [r7, #10]
  uint8_t crc = 0xFF;
 800a2ca:	23ff      	movs	r3, #255	@ 0xff
 800a2cc:	73fb      	strb	r3, [r7, #15]

  /* Calculate 8-bit checksum for given polynomial */
  for (uint16_t index = 0; index < count; index++)
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	81bb      	strh	r3, [r7, #12]
 800a2d2:	e024      	b.n	800a31e <crc_calculate+0x64>
  {
    crc ^= data[index];
 800a2d4:	89bb      	ldrh	r3, [r7, #12]
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	4413      	add	r3, r2
 800a2da:	781a      	ldrb	r2, [r3, #0]
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
 800a2de:	4053      	eors	r3, r2
 800a2e0:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 800a2e2:	2308      	movs	r3, #8
 800a2e4:	72fb      	strb	r3, [r7, #11]
 800a2e6:	e014      	b.n	800a312 <crc_calculate+0x58>
    {
      crc = ((crc & 0x80U) != 0U) ? ((crc << 1) ^ crc8_polynomial) : (crc << 1);
 800a2e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	da09      	bge.n	800a304 <crc_calculate+0x4a>
 800a2f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2f4:	005b      	lsls	r3, r3, #1
 800a2f6:	b25a      	sxtb	r2, r3
 800a2f8:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800a2fc:	4053      	eors	r3, r2
 800a2fe:	b25b      	sxtb	r3, r3
 800a300:	b2db      	uxtb	r3, r3
 800a302:	e002      	b.n	800a30a <crc_calculate+0x50>
 800a304:	7bfb      	ldrb	r3, [r7, #15]
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t crc_bit = 8U; crc_bit > 0U; crc_bit--)
 800a30c:	7afb      	ldrb	r3, [r7, #11]
 800a30e:	3b01      	subs	r3, #1
 800a310:	72fb      	strb	r3, [r7, #11]
 800a312:	7afb      	ldrb	r3, [r7, #11]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1e7      	bne.n	800a2e8 <crc_calculate+0x2e>
  for (uint16_t index = 0; index < count; index++)
 800a318:	89bb      	ldrh	r3, [r7, #12]
 800a31a:	3301      	adds	r3, #1
 800a31c:	81bb      	strh	r3, [r7, #12]
 800a31e:	89ba      	ldrh	r2, [r7, #12]
 800a320:	887b      	ldrh	r3, [r7, #2]
 800a322:	429a      	cmp	r2, r3
 800a324:	d3d6      	bcc.n	800a2d4 <crc_calculate+0x1a>
    }
  }

  return crc;
 800a326:	7bfb      	ldrb	r3, [r7, #15]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3714      	adds	r7, #20
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <crc_check>:
  * @param  crc    CRC check sum of data stream
  * @retval        0 if CRC is OK else 1
  *
  */
static uint8_t crc_check(const uint8_t *data, uint16_t count, uint8_t crc)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	460b      	mov	r3, r1
 800a33e:	807b      	strh	r3, [r7, #2]
 800a340:	4613      	mov	r3, r2
 800a342:	707b      	strb	r3, [r7, #1]
  return (crc_calculate(data, count) == crc) ? 0U : 1U;
 800a344:	887b      	ldrh	r3, [r7, #2]
 800a346:	4619      	mov	r1, r3
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f7ff ffb6 	bl	800a2ba <crc_calculate>
 800a34e:	4603      	mov	r3, r0
 800a350:	461a      	mov	r2, r3
 800a352:	787b      	ldrb	r3, [r7, #1]
 800a354:	4293      	cmp	r3, r2
 800a356:	bf14      	ite	ne
 800a358:	2301      	movne	r3, #1
 800a35a:	2300      	moveq	r3, #0
 800a35c:	b2db      	uxtb	r3, r3
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
	...

0800a368 <STTS22H_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_RegisterBusIO(STTS22H_Object_t *pObj, STTS22H_IO_t *pIO)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d103      	bne.n	800a380 <STTS22H_RegisterBusIO+0x18>
  {
    ret = STTS22H_ERROR;
 800a378:	f04f 33ff 	mov.w	r3, #4294967295
 800a37c:	60fb      	str	r3, [r7, #12]
 800a37e:	e034      	b.n	800a3ea <STTS22H_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	689a      	ldr	r2, [r3, #8]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	7b1a      	ldrb	r2, [r3, #12]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	691a      	ldr	r2, [r3, #16]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	695a      	ldr	r2, [r3, #20]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	699a      	ldr	r2, [r3, #24]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a0e      	ldr	r2, [pc, #56]	@ (800a3f4 <STTS22H_RegisterBusIO+0x8c>)
 800a3bc:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4a0d      	ldr	r2, [pc, #52]	@ (800a3f8 <STTS22H_RegisterBusIO+0x90>)
 800a3c2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	69da      	ldr	r2, [r3, #28]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init != NULL)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d004      	beq.n	800a3e4 <STTS22H_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4798      	blx	r3
 800a3e0:	60f8      	str	r0, [r7, #12]
 800a3e2:	e002      	b.n	800a3ea <STTS22H_RegisterBusIO+0x82>
    }
    else
    {
      ret = STTS22H_ERROR;
 800a3e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3e8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	0800a805 	.word	0x0800a805
 800a3f8:	0800a873 	.word	0x0800a873

0800a3fc <STTS22H_Init>:
  * @brief  Initialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_Init(STTS22H_Object_t *pObj)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d127      	bne.n	800a45e <STTS22H_Init+0x62>
  {
    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a414:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable BDU */
    if (stts22h_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	3320      	adds	r3, #32
 800a41a:	2101      	movs	r1, #1
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 fbad 	bl	800ab7c <stts22h_block_data_update_set>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d002      	beq.n	800a42e <STTS22H_Init+0x32>
    {
      return STTS22H_ERROR;
 800a428:	f04f 33ff 	mov.w	r3, #4294967295
 800a42c:	e01c      	b.n	800a468 <STTS22H_Init+0x6c>
    }

    /* Enable Automatic Address Increment */
    if (stts22h_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != STTS22H_OK)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	3320      	adds	r3, #32
 800a432:	2101      	movs	r1, #1
 800a434:	4618      	mov	r0, r3
 800a436:	f000 fbfa 	bl	800ac2e <stts22h_auto_increment_set>
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d002      	beq.n	800a446 <STTS22H_Init+0x4a>
    {
      return STTS22H_ERROR;
 800a440:	f04f 33ff 	mov.w	r3, #4294967295
 800a444:	e010      	b.n	800a468 <STTS22H_Init+0x6c>
    }

    /* Put the component in standby mode. */
    if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	3320      	adds	r3, #32
 800a44a:	2100      	movs	r1, #0
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 fa9d 	bl	800a98c <stts22h_temp_data_rate_set>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d002      	beq.n	800a45e <STTS22H_Init+0x62>
    {
      return STTS22H_ERROR;
 800a458:	f04f 33ff 	mov.w	r3, #4294967295
 800a45c:	e004      	b.n	800a468 <STTS22H_Init+0x6c>
    }
  }

  pObj->is_initialized = 1;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3708      	adds	r7, #8
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <STTS22H_DeInit>:
  * @brief  Deinitialize the STTS22H sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_DeInit(STTS22H_Object_t *pObj)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d108      	bne.n	800a494 <STTS22H_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS22H_TEMP_Disable(pObj) != STTS22H_OK)
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f878 	bl	800a578 <STTS22H_TEMP_Disable>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d002      	beq.n	800a494 <STTS22H_DeInit+0x24>
    {
      return STTS22H_ERROR;
 800a48e:	f04f 33ff 	mov.w	r3, #4294967295
 800a492:	e004      	b.n	800a49e <STTS22H_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return STTS22H_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <STTS22H_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_ReadID(STTS22H_Object_t *pObj, uint8_t *Id)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b084      	sub	sp, #16
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
 800a4ae:	6039      	str	r1, [r7, #0]
  uint8_t buf;

  if (stts22h_dev_id_get(&(pObj->Ctx), &buf) != STTS22H_OK)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	3320      	adds	r3, #32
 800a4b4:	f107 020f 	add.w	r2, r7, #15
 800a4b8:	4611      	mov	r1, r2
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 fba6 	bl	800ac0c <stts22h_dev_id_get>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d002      	beq.n	800a4cc <STTS22H_ReadID+0x26>
  {
    return STTS22H_ERROR;
 800a4c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ca:	e003      	b.n	800a4d4 <STTS22H_ReadID+0x2e>
  }

  *Id = buf;
 800a4cc:	7bfa      	ldrb	r2, [r7, #15]
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	701a      	strb	r2, [r3, #0]

  return STTS22H_OK;
 800a4d2:	2300      	movs	r3, #0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <STTS22H_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS22H sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_GetCapabilities(STTS22H_Object_t *pObj, STTS22H_Capabilities_t *Capabilities)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	2200      	movs	r2, #0
 800a502:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	f04f 0200 	mov.w	r2, #0
 800a50a:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 200.0f;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	4a08      	ldr	r2, [pc, #32]	@ (800a530 <STTS22H_GetCapabilities+0x54>)
 800a510:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	f04f 0200 	mov.w	r2, #0
 800a518:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	f04f 0200 	mov.w	r2, #0
 800a520:	615a      	str	r2, [r3, #20]
  return STTS22H_OK;
 800a522:	2300      	movs	r3, #0
}
 800a524:	4618      	mov	r0, r3
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr
 800a530:	43480000 	.word	0x43480000

0800a534 <STTS22H_TEMP_Enable>:
  * @brief  Enable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Enable(STTS22H_Object_t *pObj)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a542:	2b01      	cmp	r3, #1
 800a544:	d101      	bne.n	800a54a <STTS22H_TEMP_Enable+0x16>
  {
    return STTS22H_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	e012      	b.n	800a570 <STTS22H_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STTS22H_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS22H_OK)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800a550:	eeb0 0a67 	vmov.f32	s0, s15
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 f8e9 	bl	800a72c <STTS22H_TEMP_SetOutputDataRate>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d002      	beq.n	800a566 <STTS22H_TEMP_Enable+0x32>
  {
    return STTS22H_ERROR;
 800a560:	f04f 33ff 	mov.w	r3, #4294967295
 800a564:	e004      	b.n	800a570 <STTS22H_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <STTS22H_TEMP_Disable>:
  * @brief  Disable the STTS22H temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_Disable(STTS22H_Object_t *pObj)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a586:	2b00      	cmp	r3, #0
 800a588:	d101      	bne.n	800a58e <STTS22H_TEMP_Disable+0x16>
  {
    return STTS22H_OK;
 800a58a:	2300      	movs	r3, #0
 800a58c:	e01c      	b.n	800a5c8 <STTS22H_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS22H_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS22H_OK)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	3334      	adds	r3, #52	@ 0x34
 800a592:	4619      	mov	r1, r3
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 f81b 	bl	800a5d0 <STTS22H_TEMP_GetOutputDataRate>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d002      	beq.n	800a5a6 <STTS22H_TEMP_Disable+0x2e>
  {
    return STTS22H_ERROR;
 800a5a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5a4:	e010      	b.n	800a5c8 <STTS22H_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts22h_temp_data_rate_set(&(pObj->Ctx), STTS22H_POWER_DOWN) != STTS22H_OK)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	3320      	adds	r3, #32
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f000 f9ed 	bl	800a98c <stts22h_temp_data_rate_set>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d002      	beq.n	800a5be <STTS22H_TEMP_Disable+0x46>
  {
    return STTS22H_ERROR;
 800a5b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a5bc:	e004      	b.n	800a5c8 <STTS22H_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return STTS22H_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3708      	adds	r7, #8
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <STTS22H_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetOutputDataRate(STTS22H_Object_t *pObj, float *Odr)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS22H_OK;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	60fb      	str	r3, [r7, #12]
  stts22h_odr_temp_t odr_low_level;

  if (stts22h_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS22H_OK)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	3320      	adds	r3, #32
 800a5e2:	f107 020b 	add.w	r2, r7, #11
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f000 fa11 	bl	800aa10 <stts22h_temp_data_rate_get>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d002      	beq.n	800a5fa <STTS22H_TEMP_GetOutputDataRate+0x2a>
  {
    return STTS22H_ERROR;
 800a5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f8:	e08b      	b.n	800a712 <STTS22H_TEMP_GetOutputDataRate+0x142>
  }

  switch (odr_low_level)
 800a5fa:	7afb      	ldrb	r3, [r7, #11]
 800a5fc:	2b32      	cmp	r3, #50	@ 0x32
 800a5fe:	f200 8083 	bhi.w	800a708 <STTS22H_TEMP_GetOutputDataRate+0x138>
 800a602:	a201      	add	r2, pc, #4	@ (adr r2, 800a608 <STTS22H_TEMP_GetOutputDataRate+0x38>)
 800a604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a608:	0800a6d5 	.word	0x0800a6d5
 800a60c:	0800a6d5 	.word	0x0800a6d5
 800a610:	0800a6e9 	.word	0x0800a6e9
 800a614:	0800a709 	.word	0x0800a709
 800a618:	0800a6df 	.word	0x0800a6df
 800a61c:	0800a709 	.word	0x0800a709
 800a620:	0800a709 	.word	0x0800a709
 800a624:	0800a709 	.word	0x0800a709
 800a628:	0800a709 	.word	0x0800a709
 800a62c:	0800a709 	.word	0x0800a709
 800a630:	0800a709 	.word	0x0800a709
 800a634:	0800a709 	.word	0x0800a709
 800a638:	0800a709 	.word	0x0800a709
 800a63c:	0800a709 	.word	0x0800a709
 800a640:	0800a709 	.word	0x0800a709
 800a644:	0800a709 	.word	0x0800a709
 800a648:	0800a709 	.word	0x0800a709
 800a64c:	0800a709 	.word	0x0800a709
 800a650:	0800a6f1 	.word	0x0800a6f1
 800a654:	0800a709 	.word	0x0800a709
 800a658:	0800a709 	.word	0x0800a709
 800a65c:	0800a709 	.word	0x0800a709
 800a660:	0800a709 	.word	0x0800a709
 800a664:	0800a709 	.word	0x0800a709
 800a668:	0800a709 	.word	0x0800a709
 800a66c:	0800a709 	.word	0x0800a709
 800a670:	0800a709 	.word	0x0800a709
 800a674:	0800a709 	.word	0x0800a709
 800a678:	0800a709 	.word	0x0800a709
 800a67c:	0800a709 	.word	0x0800a709
 800a680:	0800a709 	.word	0x0800a709
 800a684:	0800a709 	.word	0x0800a709
 800a688:	0800a709 	.word	0x0800a709
 800a68c:	0800a709 	.word	0x0800a709
 800a690:	0800a6f9 	.word	0x0800a6f9
 800a694:	0800a709 	.word	0x0800a709
 800a698:	0800a709 	.word	0x0800a709
 800a69c:	0800a709 	.word	0x0800a709
 800a6a0:	0800a709 	.word	0x0800a709
 800a6a4:	0800a709 	.word	0x0800a709
 800a6a8:	0800a709 	.word	0x0800a709
 800a6ac:	0800a709 	.word	0x0800a709
 800a6b0:	0800a709 	.word	0x0800a709
 800a6b4:	0800a709 	.word	0x0800a709
 800a6b8:	0800a709 	.word	0x0800a709
 800a6bc:	0800a709 	.word	0x0800a709
 800a6c0:	0800a709 	.word	0x0800a709
 800a6c4:	0800a709 	.word	0x0800a709
 800a6c8:	0800a709 	.word	0x0800a709
 800a6cc:	0800a709 	.word	0x0800a709
 800a6d0:	0800a701 	.word	0x0800a701
  {
    case STTS22H_POWER_DOWN:
    case STTS22H_ONE_SHOT:
      *Odr = 0.0f;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	f04f 0200 	mov.w	r2, #0
 800a6da:	601a      	str	r2, [r3, #0]
      break;
 800a6dc:	e018      	b.n	800a710 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_1Hz:
      *Odr = 1.0f;
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800a6e4:	601a      	str	r2, [r3, #0]
      break;
 800a6e6:	e013      	b.n	800a710 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_25Hz:
      *Odr = 25.0f;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	4a0c      	ldr	r2, [pc, #48]	@ (800a71c <STTS22H_TEMP_GetOutputDataRate+0x14c>)
 800a6ec:	601a      	str	r2, [r3, #0]
      break;
 800a6ee:	e00f      	b.n	800a710 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_50Hz:
      *Odr = 50.0f;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	4a0b      	ldr	r2, [pc, #44]	@ (800a720 <STTS22H_TEMP_GetOutputDataRate+0x150>)
 800a6f4:	601a      	str	r2, [r3, #0]
      break;
 800a6f6:	e00b      	b.n	800a710 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_100Hz:
      *Odr = 100.0f;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	4a0a      	ldr	r2, [pc, #40]	@ (800a724 <STTS22H_TEMP_GetOutputDataRate+0x154>)
 800a6fc:	601a      	str	r2, [r3, #0]
      break;
 800a6fe:	e007      	b.n	800a710 <STTS22H_TEMP_GetOutputDataRate+0x140>

    case STTS22H_200Hz:
      *Odr = 200.0f;
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	4a09      	ldr	r2, [pc, #36]	@ (800a728 <STTS22H_TEMP_GetOutputDataRate+0x158>)
 800a704:	601a      	str	r2, [r3, #0]
      break;
 800a706:	e003      	b.n	800a710 <STTS22H_TEMP_GetOutputDataRate+0x140>

    default:
      ret = STTS22H_ERROR;
 800a708:	f04f 33ff 	mov.w	r3, #4294967295
 800a70c:	60fb      	str	r3, [r7, #12]
      break;
 800a70e:	bf00      	nop
  }

  return ret;
 800a710:	68fb      	ldr	r3, [r7, #12]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	41c80000 	.word	0x41c80000
 800a720:	42480000 	.word	0x42480000
 800a724:	42c80000 	.word	0x42c80000
 800a728:	43480000 	.word	0x43480000

0800a72c <STTS22H_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_SetOutputDataRate(STTS22H_Object_t *pObj, float Odr)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	ed87 0a00 	vstr	s0, [r7]
  stts22h_odr_temp_t new_odr;

  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
            : (Odr <= 25.0f) ? STTS22H_25Hz
 800a738:	edd7 7a00 	vldr	s15, [r7]
 800a73c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a740:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a748:	d801      	bhi.n	800a74e <STTS22H_TEMP_SetOutputDataRate+0x22>
 800a74a:	2304      	movs	r3, #4
 800a74c:	e021      	b.n	800a792 <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a74e:	edd7 7a00 	vldr	s15, [r7]
 800a752:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800a756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a75e:	d801      	bhi.n	800a764 <STTS22H_TEMP_SetOutputDataRate+0x38>
 800a760:	2302      	movs	r3, #2
 800a762:	e016      	b.n	800a792 <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a764:	edd7 7a00 	vldr	s15, [r7]
 800a768:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800a7b8 <STTS22H_TEMP_SetOutputDataRate+0x8c>
 800a76c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a774:	d801      	bhi.n	800a77a <STTS22H_TEMP_SetOutputDataRate+0x4e>
 800a776:	2312      	movs	r3, #18
 800a778:	e00b      	b.n	800a792 <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a77a:	edd7 7a00 	vldr	s15, [r7]
 800a77e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800a7bc <STTS22H_TEMP_SetOutputDataRate+0x90>
 800a782:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a78a:	d801      	bhi.n	800a790 <STTS22H_TEMP_SetOutputDataRate+0x64>
 800a78c:	2322      	movs	r3, #34	@ 0x22
 800a78e:	e000      	b.n	800a792 <STTS22H_TEMP_SetOutputDataRate+0x66>
 800a790:	2332      	movs	r3, #50	@ 0x32
  new_odr = (Odr <= 1.0f) ? STTS22H_1Hz
 800a792:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.0f) ? STTS22H_50Hz
            : (Odr <= 100.0f) ? STTS22H_100Hz
            :                    STTS22H_200Hz;

  if (stts22h_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS22H_OK)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	3320      	adds	r3, #32
 800a798:	7bfa      	ldrb	r2, [r7, #15]
 800a79a:	4611      	mov	r1, r2
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 f8f5 	bl	800a98c <stts22h_temp_data_rate_set>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d002      	beq.n	800a7ae <STTS22H_TEMP_SetOutputDataRate+0x82>
  {
    return STTS22H_ERROR;
 800a7a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ac:	e000      	b.n	800a7b0 <STTS22H_TEMP_SetOutputDataRate+0x84>
  }

  return STTS22H_OK;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	42480000 	.word	0x42480000
 800a7bc:	42c80000 	.word	0x42c80000

0800a7c0 <STTS22H_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS22H_TEMP_GetTemperature(STTS22H_Object_t *pObj, float *Value)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts22h_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS22H_OK)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	3320      	adds	r3, #32
 800a7ce:	f107 020e 	add.w	r2, r7, #14
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f000 f9f7 	bl	800abc8 <stts22h_temperature_raw_get>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d002      	beq.n	800a7e6 <STTS22H_TEMP_GetTemperature+0x26>
  {
    return STTS22H_ERROR;
 800a7e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e4:	e00a      	b.n	800a7fc <STTS22H_TEMP_GetTemperature+0x3c>
  }

  *Value = stts22h_from_lsb_to_celsius(raw_value);
 800a7e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 f8b4 	bl	800a958 <stts22h_from_lsb_to_celsius>
 800a7f0:	eef0 7a40 	vmov.f32	s15, s0
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	edc3 7a00 	vstr	s15, [r3]

  return STTS22H_OK;
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a804:	b590      	push	{r4, r7, lr}
 800a806:	b089      	sub	sp, #36	@ 0x24
 800a808:	af00      	add	r7, sp, #0
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	607a      	str	r2, [r7, #4]
 800a80e:	461a      	mov	r2, r3
 800a810:	460b      	mov	r3, r1
 800a812:	72fb      	strb	r3, [r7, #11]
 800a814:	4613      	mov	r3, r2
 800a816:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800a818:	2300      	movs	r3, #0
 800a81a:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d11f      	bne.n	800a868 <ReadRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800a828:	2300      	movs	r3, #0
 800a82a:	83fb      	strh	r3, [r7, #30]
 800a82c:	e018      	b.n	800a860 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	695c      	ldr	r4, [r3, #20]
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	7b1b      	ldrb	r3, [r3, #12]
 800a836:	4618      	mov	r0, r3
 800a838:	7afb      	ldrb	r3, [r7, #11]
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	8bfb      	ldrh	r3, [r7, #30]
 800a83e:	4413      	add	r3, r2
 800a840:	b299      	uxth	r1, r3
 800a842:	8bfb      	ldrh	r3, [r7, #30]
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	441a      	add	r2, r3
 800a848:	2301      	movs	r3, #1
 800a84a:	47a0      	blx	r4
 800a84c:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d002      	beq.n	800a85a <ReadRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800a854:	f04f 33ff 	mov.w	r3, #4294967295
 800a858:	e007      	b.n	800a86a <ReadRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800a85a:	8bfb      	ldrh	r3, [r7, #30]
 800a85c:	3301      	adds	r3, #1
 800a85e:	83fb      	strh	r3, [r7, #30]
 800a860:	8bfa      	ldrh	r2, [r7, #30]
 800a862:	893b      	ldrh	r3, [r7, #8]
 800a864:	429a      	cmp	r2, r3
 800a866:	d3e2      	bcc.n	800a82e <ReadRegWrap+0x2a>
      }
    }
  }

  return ret;
 800a868:	69bb      	ldr	r3, [r7, #24]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3724      	adds	r7, #36	@ 0x24
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd90      	pop	{r4, r7, pc}

0800a872 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800a872:	b590      	push	{r4, r7, lr}
 800a874:	b089      	sub	sp, #36	@ 0x24
 800a876:	af00      	add	r7, sp, #0
 800a878:	60f8      	str	r0, [r7, #12]
 800a87a:	607a      	str	r2, [r7, #4]
 800a87c:	461a      	mov	r2, r3
 800a87e:	460b      	mov	r3, r1
 800a880:	72fb      	strb	r3, [r7, #11]
 800a882:	4613      	mov	r3, r2
 800a884:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = STTS22H_OK;
 800a886:	2300      	movs	r3, #0
 800a888:	61bb      	str	r3, [r7, #24]
  STTS22H_Object_t *pObj = (STTS22H_Object_t *)Handle;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS22H_I2C_BUS) /* I2C */
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d11f      	bne.n	800a8d6 <WriteRegWrap+0x64>
  {
    for (i = 0; i < Length; i++)
 800a896:	2300      	movs	r3, #0
 800a898:	83fb      	strh	r3, [r7, #30]
 800a89a:	e018      	b.n	800a8ce <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	691c      	ldr	r4, [r3, #16]
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	7b1b      	ldrb	r3, [r3, #12]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	7afb      	ldrb	r3, [r7, #11]
 800a8a8:	b29a      	uxth	r2, r3
 800a8aa:	8bfb      	ldrh	r3, [r7, #30]
 800a8ac:	4413      	add	r3, r2
 800a8ae:	b299      	uxth	r1, r3
 800a8b0:	8bfb      	ldrh	r3, [r7, #30]
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	441a      	add	r2, r3
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	47a0      	blx	r4
 800a8ba:	61b8      	str	r0, [r7, #24]
      if (ret != STTS22H_OK)
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d002      	beq.n	800a8c8 <WriteRegWrap+0x56>
      {
        return STTS22H_ERROR;
 800a8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a8c6:	e007      	b.n	800a8d8 <WriteRegWrap+0x66>
    for (i = 0; i < Length; i++)
 800a8c8:	8bfb      	ldrh	r3, [r7, #30]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	83fb      	strh	r3, [r7, #30]
 800a8ce:	8bfa      	ldrh	r2, [r7, #30]
 800a8d0:	893b      	ldrh	r3, [r7, #8]
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	d3e2      	bcc.n	800a89c <WriteRegWrap+0x2a>
      }
    }
  }

  return ret;
 800a8d6:	69bb      	ldr	r3, [r7, #24]
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3724      	adds	r7, #36	@ 0x24
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd90      	pop	{r4, r7, pc}

0800a8e0 <stts22h_read_reg>:
  *
  */
int32_t __weak stts22h_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800a8e0:	b590      	push	{r4, r7, lr}
 800a8e2:	b087      	sub	sp, #28
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	607a      	str	r2, [r7, #4]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	72fb      	strb	r3, [r7, #11]
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d102      	bne.n	800a900 <stts22h_read_reg+0x20>
 800a8fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a8fe:	e009      	b.n	800a914 <stts22h_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	685c      	ldr	r4, [r3, #4]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	68d8      	ldr	r0, [r3, #12]
 800a908:	893b      	ldrh	r3, [r7, #8]
 800a90a:	7af9      	ldrb	r1, [r7, #11]
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	47a0      	blx	r4
 800a910:	6178      	str	r0, [r7, #20]

  return ret;
 800a912:	697b      	ldr	r3, [r7, #20]
}
 800a914:	4618      	mov	r0, r3
 800a916:	371c      	adds	r7, #28
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd90      	pop	{r4, r7, pc}

0800a91c <stts22h_write_reg>:
  *
  */
int32_t __weak stts22h_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800a91c:	b590      	push	{r4, r7, lr}
 800a91e:	b087      	sub	sp, #28
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	607a      	str	r2, [r7, #4]
 800a926:	461a      	mov	r2, r3
 800a928:	460b      	mov	r3, r1
 800a92a:	72fb      	strb	r3, [r7, #11]
 800a92c:	4613      	mov	r3, r2
 800a92e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d102      	bne.n	800a93c <stts22h_write_reg+0x20>
 800a936:	f04f 33ff 	mov.w	r3, #4294967295
 800a93a:	e009      	b.n	800a950 <stts22h_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681c      	ldr	r4, [r3, #0]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	68d8      	ldr	r0, [r3, #12]
 800a944:	893b      	ldrh	r3, [r7, #8]
 800a946:	7af9      	ldrb	r1, [r7, #11]
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	47a0      	blx	r4
 800a94c:	6178      	str	r0, [r7, #20]

  return ret;
 800a94e:	697b      	ldr	r3, [r7, #20]
}
 800a950:	4618      	mov	r0, r3
 800a952:	371c      	adds	r7, #28
 800a954:	46bd      	mov	sp, r7
 800a956:	bd90      	pop	{r4, r7, pc}

0800a958 <stts22h_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts22h_from_lsb_to_celsius(int16_t lsb)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	4603      	mov	r3, r0
 800a960:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 100.0f);
 800a962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a966:	ee07 3a90 	vmov	s15, r3
 800a96a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a96e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800a988 <stts22h_from_lsb_to_celsius+0x30>
 800a972:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a976:	eef0 7a66 	vmov.f32	s15, s13
}
 800a97a:	eeb0 0a67 	vmov.f32	s0, s15
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	42c80000 	.word	0x42c80000

0800a98c <stts22h_temp_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_set(const stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t val)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	460b      	mov	r3, r1
 800a996:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800a998:	f107 0208 	add.w	r2, r7, #8
 800a99c:	2301      	movs	r3, #1
 800a99e:	2104      	movs	r1, #4
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7ff ff9d 	bl	800a8e0 <stts22h_read_reg>
 800a9a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d12a      	bne.n	800aa04 <stts22h_temp_data_rate_set+0x78>
  {
    ctrl.one_shot = (uint8_t)val & 0x01U;
 800a9ae:	78fb      	ldrb	r3, [r7, #3]
 800a9b0:	f003 0301 	and.w	r3, r3, #1
 800a9b4:	b2da      	uxtb	r2, r3
 800a9b6:	7a3b      	ldrb	r3, [r7, #8]
 800a9b8:	f362 0300 	bfi	r3, r2, #0, #1
 800a9bc:	723b      	strb	r3, [r7, #8]
    ctrl.freerun = ((uint8_t)val & 0x02U) >> 1;
 800a9be:	78fb      	ldrb	r3, [r7, #3]
 800a9c0:	085b      	lsrs	r3, r3, #1
 800a9c2:	f003 0301 	and.w	r3, r3, #1
 800a9c6:	b2da      	uxtb	r2, r3
 800a9c8:	7a3b      	ldrb	r3, [r7, #8]
 800a9ca:	f362 0382 	bfi	r3, r2, #2, #1
 800a9ce:	723b      	strb	r3, [r7, #8]
    ctrl.low_odr_start = ((uint8_t)val & 0x04U) >> 2;
 800a9d0:	78fb      	ldrb	r3, [r7, #3]
 800a9d2:	089b      	lsrs	r3, r3, #2
 800a9d4:	f003 0301 	and.w	r3, r3, #1
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	7a3b      	ldrb	r3, [r7, #8]
 800a9dc:	f362 13c7 	bfi	r3, r2, #7, #1
 800a9e0:	723b      	strb	r3, [r7, #8]
    ctrl.avg = ((uint8_t)val & 0x30U) >> 4;
 800a9e2:	78fb      	ldrb	r3, [r7, #3]
 800a9e4:	091b      	lsrs	r3, r3, #4
 800a9e6:	f003 0303 	and.w	r3, r3, #3
 800a9ea:	b2da      	uxtb	r2, r3
 800a9ec:	7a3b      	ldrb	r3, [r7, #8]
 800a9ee:	f362 1305 	bfi	r3, r2, #4, #2
 800a9f2:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800a9f4:	f107 0208 	add.w	r2, r7, #8
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	2104      	movs	r1, #4
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f7ff ff8d 	bl	800a91c <stts22h_write_reg>
 800aa02:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800aa04:	68fb      	ldr	r3, [r7, #12]
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3710      	adds	r7, #16
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
	...

0800aa10 <stts22h_temp_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temp_data_rate_get(const stmdev_ctx_t *ctx,
                                   stts22h_odr_temp_t *val)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL,
 800aa1a:	f107 0208 	add.w	r2, r7, #8
 800aa1e:	2301      	movs	r3, #1
 800aa20:	2104      	movs	r1, #4
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f7ff ff5c 	bl	800a8e0 <stts22h_read_reg>
 800aa28:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&ctrl, 1);

  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800aa2a:	7a3b      	ldrb	r3, [r7, #8]
 800aa2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	461a      	mov	r2, r3
 800aa34:	7a3b      	ldrb	r3, [r7, #8]
 800aa36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	005b      	lsls	r3, r3, #1
 800aa3e:	431a      	orrs	r2, r3
 800aa40:	7a3b      	ldrb	r3, [r7, #8]
 800aa42:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	431a      	orrs	r2, r3
                                                 2) |
          (ctrl.avg << 4))
 800aa4c:	7a3b      	ldrb	r3, [r7, #8]
 800aa4e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	011b      	lsls	r3, r3, #4
                                                 2) |
 800aa56:	4313      	orrs	r3, r2
  switch (ctrl.one_shot | (ctrl.freerun << 1) | (ctrl.low_odr_start <<
 800aa58:	2b32      	cmp	r3, #50	@ 0x32
 800aa5a:	f200 8085 	bhi.w	800ab68 <stts22h_temp_data_rate_get+0x158>
 800aa5e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa64 <stts22h_temp_data_rate_get+0x54>)
 800aa60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa64:	0800ab31 	.word	0x0800ab31
 800aa68:	0800ab39 	.word	0x0800ab39
 800aa6c:	0800ab49 	.word	0x0800ab49
 800aa70:	0800ab69 	.word	0x0800ab69
 800aa74:	0800ab41 	.word	0x0800ab41
 800aa78:	0800ab69 	.word	0x0800ab69
 800aa7c:	0800ab69 	.word	0x0800ab69
 800aa80:	0800ab69 	.word	0x0800ab69
 800aa84:	0800ab69 	.word	0x0800ab69
 800aa88:	0800ab69 	.word	0x0800ab69
 800aa8c:	0800ab69 	.word	0x0800ab69
 800aa90:	0800ab69 	.word	0x0800ab69
 800aa94:	0800ab69 	.word	0x0800ab69
 800aa98:	0800ab69 	.word	0x0800ab69
 800aa9c:	0800ab69 	.word	0x0800ab69
 800aaa0:	0800ab69 	.word	0x0800ab69
 800aaa4:	0800ab69 	.word	0x0800ab69
 800aaa8:	0800ab69 	.word	0x0800ab69
 800aaac:	0800ab51 	.word	0x0800ab51
 800aab0:	0800ab69 	.word	0x0800ab69
 800aab4:	0800ab69 	.word	0x0800ab69
 800aab8:	0800ab69 	.word	0x0800ab69
 800aabc:	0800ab69 	.word	0x0800ab69
 800aac0:	0800ab69 	.word	0x0800ab69
 800aac4:	0800ab69 	.word	0x0800ab69
 800aac8:	0800ab69 	.word	0x0800ab69
 800aacc:	0800ab69 	.word	0x0800ab69
 800aad0:	0800ab69 	.word	0x0800ab69
 800aad4:	0800ab69 	.word	0x0800ab69
 800aad8:	0800ab69 	.word	0x0800ab69
 800aadc:	0800ab69 	.word	0x0800ab69
 800aae0:	0800ab69 	.word	0x0800ab69
 800aae4:	0800ab69 	.word	0x0800ab69
 800aae8:	0800ab69 	.word	0x0800ab69
 800aaec:	0800ab59 	.word	0x0800ab59
 800aaf0:	0800ab69 	.word	0x0800ab69
 800aaf4:	0800ab69 	.word	0x0800ab69
 800aaf8:	0800ab69 	.word	0x0800ab69
 800aafc:	0800ab69 	.word	0x0800ab69
 800ab00:	0800ab69 	.word	0x0800ab69
 800ab04:	0800ab69 	.word	0x0800ab69
 800ab08:	0800ab69 	.word	0x0800ab69
 800ab0c:	0800ab69 	.word	0x0800ab69
 800ab10:	0800ab69 	.word	0x0800ab69
 800ab14:	0800ab69 	.word	0x0800ab69
 800ab18:	0800ab69 	.word	0x0800ab69
 800ab1c:	0800ab69 	.word	0x0800ab69
 800ab20:	0800ab69 	.word	0x0800ab69
 800ab24:	0800ab69 	.word	0x0800ab69
 800ab28:	0800ab69 	.word	0x0800ab69
 800ab2c:	0800ab61 	.word	0x0800ab61
  {
    case STTS22H_POWER_DOWN:
      *val = STTS22H_POWER_DOWN;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	2200      	movs	r2, #0
 800ab34:	701a      	strb	r2, [r3, #0]
      break;
 800ab36:	e01b      	b.n	800ab70 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_ONE_SHOT:
      *val = STTS22H_ONE_SHOT;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	701a      	strb	r2, [r3, #0]
      break;
 800ab3e:	e017      	b.n	800ab70 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_1Hz:
      *val = STTS22H_1Hz;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	2204      	movs	r2, #4
 800ab44:	701a      	strb	r2, [r3, #0]
      break;
 800ab46:	e013      	b.n	800ab70 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_25Hz:
      *val = STTS22H_25Hz;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	2202      	movs	r2, #2
 800ab4c:	701a      	strb	r2, [r3, #0]
      break;
 800ab4e:	e00f      	b.n	800ab70 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_50Hz:
      *val = STTS22H_50Hz;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	2212      	movs	r2, #18
 800ab54:	701a      	strb	r2, [r3, #0]
      break;
 800ab56:	e00b      	b.n	800ab70 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_100Hz:
      *val = STTS22H_100Hz;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	2222      	movs	r2, #34	@ 0x22
 800ab5c:	701a      	strb	r2, [r3, #0]
      break;
 800ab5e:	e007      	b.n	800ab70 <stts22h_temp_data_rate_get+0x160>

    case STTS22H_200Hz:
      *val = STTS22H_200Hz;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	2232      	movs	r2, #50	@ 0x32
 800ab64:	701a      	strb	r2, [r3, #0]
      break;
 800ab66:	e003      	b.n	800ab70 <stts22h_temp_data_rate_get+0x160>

    default:
      *val = STTS22H_POWER_DOWN;
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	701a      	strb	r2, [r3, #0]
      break;
 800ab6e:	bf00      	nop
  }

  return ret;
 800ab70:	68fb      	ldr	r3, [r7, #12]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop

0800ab7c <stts22h_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	460b      	mov	r3, r1
 800ab86:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800ab88:	f107 0208 	add.w	r2, r7, #8
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	2104      	movs	r1, #4
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f7ff fea5 	bl	800a8e0 <stts22h_read_reg>
 800ab96:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10f      	bne.n	800abbe <stts22h_block_data_update_set+0x42>
  {
    ctrl.bdu = val;
 800ab9e:	78fb      	ldrb	r3, [r7, #3]
 800aba0:	f003 0301 	and.w	r3, r3, #1
 800aba4:	b2da      	uxtb	r2, r3
 800aba6:	7a3b      	ldrb	r3, [r7, #8]
 800aba8:	f362 1386 	bfi	r3, r2, #6, #1
 800abac:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800abae:	f107 0208 	add.w	r2, r7, #8
 800abb2:	2301      	movs	r3, #1
 800abb4:	2104      	movs	r1, #4
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7ff feb0 	bl	800a91c <stts22h_write_reg>
 800abbc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800abbe:	68fb      	ldr	r3, [r7, #12]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <stts22h_temperature_raw_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_TEMP_L_OUT, buff, 2);
 800abd2:	f107 0208 	add.w	r2, r7, #8
 800abd6:	2302      	movs	r3, #2
 800abd8:	2106      	movs	r1, #6
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7ff fe80 	bl	800a8e0 <stts22h_read_reg>
 800abe0:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800abe2:	7a7b      	ldrb	r3, [r7, #9]
 800abe4:	b21a      	sxth	r2, r3
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	021b      	lsls	r3, r3, #8
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	7a3a      	ldrb	r2, [r7, #8]
 800abf8:	4413      	add	r3, r2
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	b21a      	sxth	r2, r3
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	801a      	strh	r2, [r3, #0]

  return ret;
 800ac02:	68fb      	ldr	r3, [r7, #12]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <stts22h_dev_id_get>:
  * @param  buff   Buffer that stores the data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_dev_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_WHOAMI, buff, 1);
 800ac16:	2301      	movs	r3, #1
 800ac18:	683a      	ldr	r2, [r7, #0]
 800ac1a:	2101      	movs	r1, #1
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f7ff fe5f 	bl	800a8e0 <stts22h_read_reg>
 800ac22:	60f8      	str	r0, [r7, #12]

  return ret;
 800ac24:	68fb      	ldr	r3, [r7, #12]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <stts22h_auto_increment_set>:
  * @param  val    Change the values of "if_add_inc" in reg STTS22H.
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t stts22h_auto_increment_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	460b      	mov	r3, r1
 800ac38:	70fb      	strb	r3, [r7, #3]
  stts22h_ctrl_t ctrl;
  int32_t ret;

  ret = stts22h_read_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800ac3a:	f107 0208 	add.w	r2, r7, #8
 800ac3e:	2301      	movs	r3, #1
 800ac40:	2104      	movs	r1, #4
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f7ff fe4c 	bl	800a8e0 <stts22h_read_reg>
 800ac48:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d10f      	bne.n	800ac70 <stts22h_auto_increment_set+0x42>
  {
    ctrl.if_add_inc = (uint8_t)val;
 800ac50:	78fb      	ldrb	r3, [r7, #3]
 800ac52:	f003 0301 	and.w	r3, r3, #1
 800ac56:	b2da      	uxtb	r2, r3
 800ac58:	7a3b      	ldrb	r3, [r7, #8]
 800ac5a:	f362 03c3 	bfi	r3, r2, #3, #1
 800ac5e:	723b      	strb	r3, [r7, #8]
    ret = stts22h_write_reg(ctx, STTS22H_CTRL, (uint8_t *)&ctrl, 1);
 800ac60:	f107 0208 	add.w	r2, r7, #8
 800ac64:	2301      	movs	r3, #1
 800ac66:	2104      	movs	r1, #4
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f7ff fe57 	bl	800a91c <stts22h_write_reg>
 800ac6e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800ac70:	68fb      	ldr	r3, [r7, #12]
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
	...

0800ac7c <IKS4A1_ENV_SENSOR_Init>:
  *         - ENV_PRESSURE
  *         - ENV_HUMIDITY
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08c      	sub	sp, #48	@ 0x30
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800ac86:	2300      	movs	r3, #0
 800ac88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t function = ENV_TEMPERATURE;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	623b      	str	r3, [r7, #32]
  IKS4A1_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2b02      	cmp	r3, #2
 800ac96:	d07c      	beq.n	800ad92 <IKS4A1_ENV_SENSOR_Init+0x116>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b02      	cmp	r3, #2
 800ac9c:	f200 80b2 	bhi.w	800ae04 <IKS4A1_ENV_SENSOR_Init+0x188>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d003      	beq.n	800acae <IKS4A1_ENV_SENSOR_Init+0x32>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d039      	beq.n	800ad20 <IKS4A1_ENV_SENSOR_Init+0xa4>
 800acac:	e0aa      	b.n	800ae04 <IKS4A1_ENV_SENSOR_Init+0x188>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_STTS22H_0 == 1)
    case IKS4A1_STTS22H_0:
      if (STTS22H_0_Probe(Functions) != BSP_ERROR_NONE)
 800acae:	6838      	ldr	r0, [r7, #0]
 800acb0:	f000 f9ca 	bl	800b048 <STTS22H_0_Probe>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d002      	beq.n	800acc0 <IKS4A1_ENV_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 800acba:	f04f 33ff 	mov.w	r3, #4294967295
 800acbe:	e0df      	b.n	800ae80 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800acc0:	4a71      	ldr	r2, [pc, #452]	@ (800ae88 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	4970      	ldr	r1, [pc, #448]	@ (800ae8c <IKS4A1_ENV_SENSOR_Init+0x210>)
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800acd2:	f107 0108 	add.w	r1, r7, #8
 800acd6:	4610      	mov	r0, r2
 800acd8:	4798      	blx	r3
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d002      	beq.n	800ace6 <IKS4A1_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800ace0:	f06f 0306 	mvn.w	r3, #6
 800ace4:	e0cc      	b.n	800ae80 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800ace6:	7a3b      	ldrb	r3, [r7, #8]
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d103      	bne.n	800acf4 <IKS4A1_ENV_SENSOR_Init+0x78>
      {
        component_functions |= ENV_TEMPERATURE;
 800acec:	6a3b      	ldr	r3, [r7, #32]
 800acee:	f043 0301 	orr.w	r3, r3, #1
 800acf2:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800acf4:	7abb      	ldrb	r3, [r7, #10]
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d103      	bne.n	800ad02 <IKS4A1_ENV_SENSOR_Init+0x86>
      {
        component_functions |= ENV_HUMIDITY;
 800acfa:	6a3b      	ldr	r3, [r7, #32]
 800acfc:	f043 0304 	orr.w	r3, r3, #4
 800ad00:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800ad02:	7a7b      	ldrb	r3, [r7, #9]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d103      	bne.n	800ad10 <IKS4A1_ENV_SENSOR_Init+0x94>
      {
        component_functions |= ENV_PRESSURE;
 800ad08:	6a3b      	ldr	r3, [r7, #32]
 800ad0a:	f043 0302 	orr.w	r3, r3, #2
 800ad0e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800ad10:	7afb      	ldrb	r3, [r7, #11]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d17a      	bne.n	800ae0c <IKS4A1_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_GAS;
 800ad16:	6a3b      	ldr	r3, [r7, #32]
 800ad18:	f043 0308 	orr.w	r3, r3, #8
 800ad1c:	623b      	str	r3, [r7, #32]
      }
      break;
 800ad1e:	e075      	b.n	800ae0c <IKS4A1_ENV_SENSOR_Init+0x190>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_LPS22DF_0 == 1)
    case IKS4A1_LPS22DF_0:
      if (LPS22DF_0_Probe(Functions) != BSP_ERROR_NONE)
 800ad20:	6838      	ldr	r0, [r7, #0]
 800ad22:	f000 fa47 	bl	800b1b4 <LPS22DF_0_Probe>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d002      	beq.n	800ad32 <IKS4A1_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 800ad2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad30:	e0a6      	b.n	800ae80 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800ad32:	4a55      	ldr	r2, [pc, #340]	@ (800ae88 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	4953      	ldr	r1, [pc, #332]	@ (800ae8c <IKS4A1_ENV_SENSOR_Init+0x210>)
 800ad3e:	687a      	ldr	r2, [r7, #4]
 800ad40:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ad44:	f107 0108 	add.w	r1, r7, #8
 800ad48:	4610      	mov	r0, r2
 800ad4a:	4798      	blx	r3
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d002      	beq.n	800ad58 <IKS4A1_ENV_SENSOR_Init+0xdc>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800ad52:	f06f 0306 	mvn.w	r3, #6
 800ad56:	e093      	b.n	800ae80 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800ad58:	7a3b      	ldrb	r3, [r7, #8]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d103      	bne.n	800ad66 <IKS4A1_ENV_SENSOR_Init+0xea>
      {
        component_functions |= ENV_TEMPERATURE;
 800ad5e:	6a3b      	ldr	r3, [r7, #32]
 800ad60:	f043 0301 	orr.w	r3, r3, #1
 800ad64:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800ad66:	7abb      	ldrb	r3, [r7, #10]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d103      	bne.n	800ad74 <IKS4A1_ENV_SENSOR_Init+0xf8>
      {
        component_functions |= ENV_HUMIDITY;
 800ad6c:	6a3b      	ldr	r3, [r7, #32]
 800ad6e:	f043 0304 	orr.w	r3, r3, #4
 800ad72:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800ad74:	7a7b      	ldrb	r3, [r7, #9]
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d103      	bne.n	800ad82 <IKS4A1_ENV_SENSOR_Init+0x106>
      {
        component_functions |= ENV_PRESSURE;
 800ad7a:	6a3b      	ldr	r3, [r7, #32]
 800ad7c:	f043 0302 	orr.w	r3, r3, #2
 800ad80:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800ad82:	7afb      	ldrb	r3, [r7, #11]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	d143      	bne.n	800ae10 <IKS4A1_ENV_SENSOR_Init+0x194>
      {
        component_functions |= ENV_GAS;
 800ad88:	6a3b      	ldr	r3, [r7, #32]
 800ad8a:	f043 0308 	orr.w	r3, r3, #8
 800ad8e:	623b      	str	r3, [r7, #32]
      }
      break;
 800ad90:	e03e      	b.n	800ae10 <IKS4A1_ENV_SENSOR_Init+0x194>
      break;
#endif

#if (USE_IKS4A1_ENV_SENSOR_SHT40AD1B_0 == 1)
    case IKS4A1_SHT40AD1B_0:
      if (SHT40AD1B_0_Probe(Functions) != BSP_ERROR_NONE)
 800ad92:	6838      	ldr	r0, [r7, #0]
 800ad94:	f000 fade 	bl	800b354 <SHT40AD1B_0_Probe>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d002      	beq.n	800ada4 <IKS4A1_ENV_SENSOR_Init+0x128>
      {
        return BSP_ERROR_NO_INIT;
 800ad9e:	f04f 33ff 	mov.w	r3, #4294967295
 800ada2:	e06d      	b.n	800ae80 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800ada4:	4a38      	ldr	r2, [pc, #224]	@ (800ae88 <IKS4A1_ENV_SENSOR_Init+0x20c>)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	4937      	ldr	r1, [pc, #220]	@ (800ae8c <IKS4A1_ENV_SENSOR_Init+0x210>)
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800adb6:	f107 0108 	add.w	r1, r7, #8
 800adba:	4610      	mov	r0, r2
 800adbc:	4798      	blx	r3
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <IKS4A1_ENV_SENSOR_Init+0x14e>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800adc4:	f06f 0306 	mvn.w	r3, #6
 800adc8:	e05a      	b.n	800ae80 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
      if (cap.Temperature == 1U)
 800adca:	7a3b      	ldrb	r3, [r7, #8]
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d103      	bne.n	800add8 <IKS4A1_ENV_SENSOR_Init+0x15c>
      {
        component_functions |= ENV_TEMPERATURE;
 800add0:	6a3b      	ldr	r3, [r7, #32]
 800add2:	f043 0301 	orr.w	r3, r3, #1
 800add6:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 800add8:	7abb      	ldrb	r3, [r7, #10]
 800adda:	2b01      	cmp	r3, #1
 800addc:	d103      	bne.n	800ade6 <IKS4A1_ENV_SENSOR_Init+0x16a>
      {
        component_functions |= ENV_HUMIDITY;
 800adde:	6a3b      	ldr	r3, [r7, #32]
 800ade0:	f043 0304 	orr.w	r3, r3, #4
 800ade4:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 800ade6:	7a7b      	ldrb	r3, [r7, #9]
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d103      	bne.n	800adf4 <IKS4A1_ENV_SENSOR_Init+0x178>
      {
        component_functions |= ENV_PRESSURE;
 800adec:	6a3b      	ldr	r3, [r7, #32]
 800adee:	f043 0302 	orr.w	r3, r3, #2
 800adf2:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 800adf4:	7afb      	ldrb	r3, [r7, #11]
 800adf6:	2b01      	cmp	r3, #1
 800adf8:	d10c      	bne.n	800ae14 <IKS4A1_ENV_SENSOR_Init+0x198>
      {
        component_functions |= ENV_GAS;
 800adfa:	6a3b      	ldr	r3, [r7, #32]
 800adfc:	f043 0308 	orr.w	r3, r3, #8
 800ae00:	623b      	str	r3, [r7, #32]
      }
      break;
 800ae02:	e007      	b.n	800ae14 <IKS4A1_ENV_SENSOR_Init+0x198>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800ae04:	f06f 0301 	mvn.w	r3, #1
 800ae08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800ae0a:	e004      	b.n	800ae16 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800ae0c:	bf00      	nop
 800ae0e:	e002      	b.n	800ae16 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800ae10:	bf00      	nop
 800ae12:	e000      	b.n	800ae16 <IKS4A1_ENV_SENSOR_Init+0x19a>
      break;
 800ae14:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800ae16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d001      	beq.n	800ae20 <IKS4A1_ENV_SENSOR_Init+0x1a4>
  {
    return ret;
 800ae1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae1e:	e02f      	b.n	800ae80 <IKS4A1_ENV_SENSOR_Init+0x204>
  }

  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800ae20:	2300      	movs	r3, #0
 800ae22:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae24:	e028      	b.n	800ae78 <IKS4A1_ENV_SENSOR_Init+0x1fc>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800ae26:	683a      	ldr	r2, [r7, #0]
 800ae28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d11c      	bne.n	800ae6c <IKS4A1_ENV_SENSOR_Init+0x1f0>
 800ae32:	6a3a      	ldr	r2, [r7, #32]
 800ae34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae36:	4013      	ands	r3, r2
 800ae38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d116      	bne.n	800ae6c <IKS4A1_ENV_SENSOR_Init+0x1f0>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 800ae3e:	4a14      	ldr	r2, [pc, #80]	@ (800ae90 <IKS4A1_ENV_SENSOR_Init+0x214>)
 800ae40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae46:	4913      	ldr	r1, [pc, #76]	@ (800ae94 <IKS4A1_ENV_SENSOR_Init+0x218>)
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	0092      	lsls	r2, r2, #2
 800ae4c:	4413      	add	r3, r2
 800ae4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	490d      	ldr	r1, [pc, #52]	@ (800ae8c <IKS4A1_ENV_SENSOR_Init+0x210>)
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ae5c:	4610      	mov	r0, r2
 800ae5e:	4798      	blx	r3
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d002      	beq.n	800ae6c <IKS4A1_ENV_SENSOR_Init+0x1f0>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800ae66:	f06f 0304 	mvn.w	r3, #4
 800ae6a:	e009      	b.n	800ae80 <IKS4A1_ENV_SENSOR_Init+0x204>
      }
    }
    function = function << 1;
 800ae6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae6e:	005b      	lsls	r3, r3, #1
 800ae70:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (i = 0; i < IKS4A1_ENV_FUNCTIONS_NBR; i++)
 800ae72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae74:	3301      	adds	r3, #1
 800ae76:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7a:	2b03      	cmp	r3, #3
 800ae7c:	d9d3      	bls.n	800ae26 <IKS4A1_ENV_SENSOR_Init+0x1aa>
  }

  return ret;
 800ae7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3730      	adds	r7, #48	@ 0x30
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	200026f4 	.word	0x200026f4
 800ae8c:	200026b8 	.word	0x200026b8
 800ae90:	200001b0 	.word	0x200001b0
 800ae94:	200026c4 	.word	0x200026c4

0800ae98 <IKS4A1_ENV_SENSOR_GetCapabilities>:
  * @param  Instance Environmental sensor instance
  * @param  Capabilities pointer to Environmental sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_ENV_SENSOR_Capabilities_t *Capabilities)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2b02      	cmp	r3, #2
 800aea6:	d903      	bls.n	800aeb0 <IKS4A1_ENV_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800aea8:	f06f 0301 	mvn.w	r3, #1
 800aeac:	60fb      	str	r3, [r7, #12]
 800aeae:	e014      	b.n	800aeda <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800aeb0:	4a0c      	ldr	r2, [pc, #48]	@ (800aee4 <IKS4A1_ENV_SENSOR_GetCapabilities+0x4c>)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	490b      	ldr	r1, [pc, #44]	@ (800aee8 <IKS4A1_ENV_SENSOR_GetCapabilities+0x50>)
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800aec2:	6839      	ldr	r1, [r7, #0]
 800aec4:	4610      	mov	r0, r2
 800aec6:	4798      	blx	r3
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d003      	beq.n	800aed6 <IKS4A1_ENV_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800aece:	f06f 0306 	mvn.w	r3, #6
 800aed2:	60fb      	str	r3, [r7, #12]
 800aed4:	e001      	b.n	800aeda <IKS4A1_ENV_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800aed6:	2300      	movs	r3, #0
 800aed8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800aeda:	68fb      	ldr	r3, [r7, #12]
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	200026f4 	.word	0x200026f4
 800aee8:	200026b8 	.word	0x200026b8

0800aeec <IKS4A1_ENV_SENSOR_ReadID>:
  * @param  Instance environmental sensor instance to be used
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	d903      	bls.n	800af04 <IKS4A1_ENV_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800aefc:	f06f 0301 	mvn.w	r3, #1
 800af00:	60fb      	str	r3, [r7, #12]
 800af02:	e014      	b.n	800af2e <IKS4A1_ENV_SENSOR_ReadID+0x42>
  }
  else if (EnvDrv[Instance]->ReadID(EnvCompObj[Instance], Id) != BSP_ERROR_NONE)
 800af04:	4a0c      	ldr	r2, [pc, #48]	@ (800af38 <IKS4A1_ENV_SENSOR_ReadID+0x4c>)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	490b      	ldr	r1, [pc, #44]	@ (800af3c <IKS4A1_ENV_SENSOR_ReadID+0x50>)
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	4610      	mov	r0, r2
 800af1a:	4798      	blx	r3
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d003      	beq.n	800af2a <IKS4A1_ENV_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800af22:	f06f 0306 	mvn.w	r3, #6
 800af26:	60fb      	str	r3, [r7, #12]
 800af28:	e001      	b.n	800af2e <IKS4A1_ENV_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800af2a:	2300      	movs	r3, #0
 800af2c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800af2e:	68fb      	ldr	r3, [r7, #12]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	200026f4 	.word	0x200026f4
 800af3c:	200026b8 	.word	0x200026b8

0800af40 <IKS4A1_ENV_SENSOR_GetOutputDataRate>:
  *         - ENV_HUMIDITY
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b086      	sub	sp, #24
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2b02      	cmp	r3, #2
 800af50:	d903      	bls.n	800af5a <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800af52:	f06f 0301 	mvn.w	r3, #1
 800af56:	617b      	str	r3, [r7, #20]
 800af58:	e027      	b.n	800afaa <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800af5a:	4a16      	ldr	r2, [pc, #88]	@ (800afb4 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x74>)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	4013      	ands	r3, r2
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d11b      	bne.n	800afa4 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800af6c:	4a12      	ldr	r2, [pc, #72]	@ (800afb8 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x78>)
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af74:	4911      	ldr	r1, [pc, #68]	@ (800afbc <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x7c>)
 800af76:	68fa      	ldr	r2, [r7, #12]
 800af78:	0092      	lsls	r2, r2, #2
 800af7a:	4413      	add	r3, r2
 800af7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	490f      	ldr	r1, [pc, #60]	@ (800afc0 <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x80>)
 800af84:	68fa      	ldr	r2, [r7, #12]
 800af86:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800af8a:	6879      	ldr	r1, [r7, #4]
 800af8c:	4610      	mov	r0, r2
 800af8e:	4798      	blx	r3
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d003      	beq.n	800af9e <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800af96:	f06f 0304 	mvn.w	r3, #4
 800af9a:	617b      	str	r3, [r7, #20]
 800af9c:	e005      	b.n	800afaa <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800af9e:	2300      	movs	r3, #0
 800afa0:	617b      	str	r3, [r7, #20]
 800afa2:	e002      	b.n	800afaa <IKS4A1_ENV_SENSOR_GetOutputDataRate+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800afa4:	f06f 0301 	mvn.w	r3, #1
 800afa8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800afaa:	697b      	ldr	r3, [r7, #20]
}
 800afac:	4618      	mov	r0, r3
 800afae:	3718      	adds	r7, #24
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	20002700 	.word	0x20002700
 800afb8:	200001b0 	.word	0x200001b0
 800afbc:	200026c4 	.word	0x200026c4
 800afc0:	200026b8 	.word	0x200026b8

0800afc4 <IKS4A1_ENV_SENSOR_GetValue>:
  *         - ENV_HUMIDITY
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS4A1_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float_t *Value)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b086      	sub	sp, #24
 800afc8:	af00      	add	r7, sp, #0
 800afca:	60f8      	str	r0, [r7, #12]
 800afcc:	60b9      	str	r1, [r7, #8]
 800afce:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_ENV_INSTANCES_NBR)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	d903      	bls.n	800afde <IKS4A1_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800afd6:	f06f 0301 	mvn.w	r3, #1
 800afda:	617b      	str	r3, [r7, #20]
 800afdc:	e027      	b.n	800b02e <IKS4A1_ENV_SENSOR_GetValue+0x6a>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 800afde:	4a16      	ldr	r2, [pc, #88]	@ (800b038 <IKS4A1_ENV_SENSOR_GetValue+0x74>)
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	4013      	ands	r3, r2
 800afea:	68ba      	ldr	r2, [r7, #8]
 800afec:	429a      	cmp	r2, r3
 800afee:	d11b      	bne.n	800b028 <IKS4A1_ENV_SENSOR_GetValue+0x64>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 800aff0:	4a12      	ldr	r2, [pc, #72]	@ (800b03c <IKS4A1_ENV_SENSOR_GetValue+0x78>)
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aff8:	4911      	ldr	r1, [pc, #68]	@ (800b040 <IKS4A1_ENV_SENSOR_GetValue+0x7c>)
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	0092      	lsls	r2, r2, #2
 800affe:	4413      	add	r3, r2
 800b000:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	490f      	ldr	r1, [pc, #60]	@ (800b044 <IKS4A1_ENV_SENSOR_GetValue+0x80>)
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b00e:	6879      	ldr	r1, [r7, #4]
 800b010:	4610      	mov	r0, r2
 800b012:	4798      	blx	r3
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d003      	beq.n	800b022 <IKS4A1_ENV_SENSOR_GetValue+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b01a:	f06f 0304 	mvn.w	r3, #4
 800b01e:	617b      	str	r3, [r7, #20]
 800b020:	e005      	b.n	800b02e <IKS4A1_ENV_SENSOR_GetValue+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b022:	2300      	movs	r3, #0
 800b024:	617b      	str	r3, [r7, #20]
 800b026:	e002      	b.n	800b02e <IKS4A1_ENV_SENSOR_GetValue+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b028:	f06f 0301 	mvn.w	r3, #1
 800b02c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b02e:	697b      	ldr	r3, [r7, #20]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3718      	adds	r7, #24
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	20002700 	.word	0x20002700
 800b03c:	200001b0 	.word	0x200001b0
 800b040:	200026c4 	.word	0x200026c4
 800b044:	200026b8 	.word	0x200026b8

0800b048 <STTS22H_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS22H_0_Probe(uint32_t Functions)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b092      	sub	sp, #72	@ 0x48
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  STTS22H_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800b050:	2300      	movs	r3, #0
 800b052:	647b      	str	r3, [r7, #68]	@ 0x44
  static STTS22H_Object_t stts22h_obj_0;
  STTS22H_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = STTS22H_I2C_BUS; /* I2C */
 800b054:	2300      	movs	r3, #0
 800b056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = STTS22H_I2C_ADD_H;
 800b058:	2371      	movs	r3, #113	@ 0x71
 800b05a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b05e:	4b47      	ldr	r3, [pc, #284]	@ (800b17c <STTS22H_0_Probe+0x134>)
 800b060:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b062:	4b47      	ldr	r3, [pc, #284]	@ (800b180 <STTS22H_0_Probe+0x138>)
 800b064:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b066:	4b47      	ldr	r3, [pc, #284]	@ (800b184 <STTS22H_0_Probe+0x13c>)
 800b068:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b06a:	4b47      	ldr	r3, [pc, #284]	@ (800b188 <STTS22H_0_Probe+0x140>)
 800b06c:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b06e:	4b47      	ldr	r3, [pc, #284]	@ (800b18c <STTS22H_0_Probe+0x144>)
 800b070:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800b072:	4b47      	ldr	r3, [pc, #284]	@ (800b190 <STTS22H_0_Probe+0x148>)
 800b074:	643b      	str	r3, [r7, #64]	@ 0x40

  if (STTS22H_RegisterBusIO(&stts22h_obj_0, &io_ctx) != STTS22H_OK)
 800b076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b07a:	4619      	mov	r1, r3
 800b07c:	4845      	ldr	r0, [pc, #276]	@ (800b194 <STTS22H_0_Probe+0x14c>)
 800b07e:	f7ff f973 	bl	800a368 <STTS22H_RegisterBusIO>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d003      	beq.n	800b090 <STTS22H_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b088:	f06f 0306 	mvn.w	r3, #6
 800b08c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b08e:	e06f      	b.n	800b170 <STTS22H_0_Probe+0x128>
  }
  else if (STTS22H_ReadID(&stts22h_obj_0, &id) != STTS22H_OK)
 800b090:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b094:	4619      	mov	r1, r3
 800b096:	483f      	ldr	r0, [pc, #252]	@ (800b194 <STTS22H_0_Probe+0x14c>)
 800b098:	f7ff fa05 	bl	800a4a6 <STTS22H_ReadID>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d003      	beq.n	800b0aa <STTS22H_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b0a2:	f06f 0306 	mvn.w	r3, #6
 800b0a6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0a8:	e062      	b.n	800b170 <STTS22H_0_Probe+0x128>
  }
  else if (id != STTS22H_ID)
 800b0aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b0ae:	2ba0      	cmp	r3, #160	@ 0xa0
 800b0b0:	d003      	beq.n	800b0ba <STTS22H_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b0b2:	f06f 0306 	mvn.w	r3, #6
 800b0b6:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0b8:	e05a      	b.n	800b170 <STTS22H_0_Probe+0x128>
  }
  else
  {
    (void)STTS22H_GetCapabilities(&stts22h_obj_0, &cap);
 800b0ba:	f107 0308 	add.w	r3, r7, #8
 800b0be:	4619      	mov	r1, r3
 800b0c0:	4834      	ldr	r0, [pc, #208]	@ (800b194 <STTS22H_0_Probe+0x14c>)
 800b0c2:	f7ff fa0b 	bl	800a4dc <STTS22H_GetCapabilities>

    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800b0c6:	7a3b      	ldrb	r3, [r7, #8]
 800b0c8:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800b0ca:	7a7b      	ldrb	r3, [r7, #9]
 800b0cc:	005b      	lsls	r3, r3, #1
 800b0ce:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800b0d0:	7abb      	ldrb	r3, [r7, #10]
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800b0d6:	7afb      	ldrb	r3, [r7, #11]
 800b0d8:	00db      	lsls	r3, r3, #3
 800b0da:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_STTS22H_0].Functions = ((uint32_t)cap.Temperature)
 800b0dc:	4a2e      	ldr	r2, [pc, #184]	@ (800b198 <STTS22H_0_Probe+0x150>)
 800b0de:	6013      	str	r3, [r2, #0]

    EnvCompObj[IKS4A1_STTS22H_0] = &stts22h_obj_0;
 800b0e0:	4b2e      	ldr	r3, [pc, #184]	@ (800b19c <STTS22H_0_Probe+0x154>)
 800b0e2:	4a2c      	ldr	r2, [pc, #176]	@ (800b194 <STTS22H_0_Probe+0x14c>)
 800b0e4:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_STTS22H_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS22H_COMMON_Driver;
 800b0e6:	4b2e      	ldr	r3, [pc, #184]	@ (800b1a0 <STTS22H_0_Probe+0x158>)
 800b0e8:	4a2e      	ldr	r2, [pc, #184]	@ (800b1a4 <STTS22H_0_Probe+0x15c>)
 800b0ea:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b0ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d11d      	bne.n	800b12e <STTS22H_0_Probe+0xe6>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f003 0301 	and.w	r3, r3, #1
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d018      	beq.n	800b12e <STTS22H_0_Probe+0xe6>
 800b0fc:	7a3b      	ldrb	r3, [r7, #8]
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d115      	bne.n	800b12e <STTS22H_0_Probe+0xe6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_STTS22H_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS22H_TEMP_Driver;
 800b102:	4b29      	ldr	r3, [pc, #164]	@ (800b1a8 <STTS22H_0_Probe+0x160>)
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	4a29      	ldr	r2, [pc, #164]	@ (800b1ac <STTS22H_0_Probe+0x164>)
 800b108:	4929      	ldr	r1, [pc, #164]	@ (800b1b0 <STTS22H_0_Probe+0x168>)
 800b10a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_STTS22H_0]->Init(EnvCompObj[IKS4A1_STTS22H_0]) != STTS22H_OK)
 800b10e:	4b24      	ldr	r3, [pc, #144]	@ (800b1a0 <STTS22H_0_Probe+0x158>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a21      	ldr	r2, [pc, #132]	@ (800b19c <STTS22H_0_Probe+0x154>)
 800b116:	6812      	ldr	r2, [r2, #0]
 800b118:	4610      	mov	r0, r2
 800b11a:	4798      	blx	r3
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d003      	beq.n	800b12a <STTS22H_0_Probe+0xe2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b122:	f06f 0304 	mvn.w	r3, #4
 800b126:	647b      	str	r3, [r7, #68]	@ 0x44
 800b128:	e001      	b.n	800b12e <STTS22H_0_Probe+0xe6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b12a:	2300      	movs	r3, #0
 800b12c:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b12e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b130:	2b00      	cmp	r3, #0
 800b132:	d107      	bne.n	800b144 <STTS22H_0_Probe+0xfc>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f003 0304 	and.w	r3, r3, #4
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d002      	beq.n	800b144 <STTS22H_0_Probe+0xfc>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b13e:	f06f 0304 	mvn.w	r3, #4
 800b142:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b146:	2b00      	cmp	r3, #0
 800b148:	d107      	bne.n	800b15a <STTS22H_0_Probe+0x112>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f003 0302 	and.w	r3, r3, #2
 800b150:	2b00      	cmp	r3, #0
 800b152:	d002      	beq.n	800b15a <STTS22H_0_Probe+0x112>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b154:	f06f 0304 	mvn.w	r3, #4
 800b158:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b15a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d107      	bne.n	800b170 <STTS22H_0_Probe+0x128>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f003 0308 	and.w	r3, r3, #8
 800b166:	2b00      	cmp	r3, #0
 800b168:	d002      	beq.n	800b170 <STTS22H_0_Probe+0x128>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b16a:	f06f 0304 	mvn.w	r3, #4
 800b16e:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b172:	4618      	mov	r0, r3
 800b174:	3748      	adds	r7, #72	@ 0x48
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	08002495 	.word	0x08002495
 800b180:	080024f9 	.word	0x080024f9
 800b184:	080025ad 	.word	0x080025ad
 800b188:	08002549 	.word	0x08002549
 800b18c:	080026b9 	.word	0x080026b9
 800b190:	0800c3e5 	.word	0x0800c3e5
 800b194:	2000270c 	.word	0x2000270c
 800b198:	20002700 	.word	0x20002700
 800b19c:	200026b8 	.word	0x200026b8
 800b1a0:	200026f4 	.word	0x200026f4
 800b1a4:	2000018c 	.word	0x2000018c
 800b1a8:	200001b0 	.word	0x200001b0
 800b1ac:	200026c4 	.word	0x200026c4
 800b1b0:	2000019c 	.word	0x2000019c

0800b1b4 <LPS22DF_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22DF_0_Probe(uint32_t Functions)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b092      	sub	sp, #72	@ 0x48
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  LPS22DF_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	647b      	str	r3, [r7, #68]	@ 0x44
  static LPS22DF_Object_t lps22df_obj_0;
  LPS22DF_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = LPS22DF_I2C_BUS; /* I2C */
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = LPS22DF_I2C_ADD_H;
 800b1c4:	23bb      	movs	r3, #187	@ 0xbb
 800b1c6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b1ca:	4b53      	ldr	r3, [pc, #332]	@ (800b318 <LPS22DF_0_Probe+0x164>)
 800b1cc:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b1ce:	4b53      	ldr	r3, [pc, #332]	@ (800b31c <LPS22DF_0_Probe+0x168>)
 800b1d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b1d2:	4b53      	ldr	r3, [pc, #332]	@ (800b320 <LPS22DF_0_Probe+0x16c>)
 800b1d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b1d6:	4b53      	ldr	r3, [pc, #332]	@ (800b324 <LPS22DF_0_Probe+0x170>)
 800b1d8:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b1da:	4b53      	ldr	r3, [pc, #332]	@ (800b328 <LPS22DF_0_Probe+0x174>)
 800b1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800b1de:	4b53      	ldr	r3, [pc, #332]	@ (800b32c <LPS22DF_0_Probe+0x178>)
 800b1e0:	643b      	str	r3, [r7, #64]	@ 0x40

  if (LPS22DF_RegisterBusIO(&lps22df_obj_0, &io_ctx) != LPS22DF_OK)
 800b1e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	4851      	ldr	r0, [pc, #324]	@ (800b330 <LPS22DF_0_Probe+0x17c>)
 800b1ea:	f7fa f8bd 	bl	8005368 <LPS22DF_RegisterBusIO>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d003      	beq.n	800b1fc <LPS22DF_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b1f4:	f06f 0306 	mvn.w	r3, #6
 800b1f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b1fa:	e087      	b.n	800b30c <LPS22DF_0_Probe+0x158>
  }
  else if (LPS22DF_ReadID(&lps22df_obj_0, &id) != LPS22DF_OK)
 800b1fc:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b200:	4619      	mov	r1, r3
 800b202:	484b      	ldr	r0, [pc, #300]	@ (800b330 <LPS22DF_0_Probe+0x17c>)
 800b204:	f7fa f959 	bl	80054ba <LPS22DF_ReadID>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d003      	beq.n	800b216 <LPS22DF_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b20e:	f06f 0306 	mvn.w	r3, #6
 800b212:	647b      	str	r3, [r7, #68]	@ 0x44
 800b214:	e07a      	b.n	800b30c <LPS22DF_0_Probe+0x158>
  }
  else if (id != LPS22DF_ID)
 800b216:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b21a:	2bb4      	cmp	r3, #180	@ 0xb4
 800b21c:	d003      	beq.n	800b226 <LPS22DF_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b21e:	f06f 0306 	mvn.w	r3, #6
 800b222:	647b      	str	r3, [r7, #68]	@ 0x44
 800b224:	e072      	b.n	800b30c <LPS22DF_0_Probe+0x158>
  }
  else
  {
    (void)LPS22DF_GetCapabilities(&lps22df_obj_0, &cap);
 800b226:	f107 0308 	add.w	r3, r7, #8
 800b22a:	4619      	mov	r1, r3
 800b22c:	4840      	ldr	r0, [pc, #256]	@ (800b330 <LPS22DF_0_Probe+0x17c>)
 800b22e:	f7fa f95f 	bl	80054f0 <LPS22DF_GetCapabilities>

    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800b232:	7a3b      	ldrb	r3, [r7, #8]
 800b234:	461a      	mov	r2, r3
                                       | ((uint32_t)cap.Pressure << 1)
 800b236:	7a7b      	ldrb	r3, [r7, #9]
 800b238:	005b      	lsls	r3, r3, #1
 800b23a:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Humidity << 2)
 800b23c:	7abb      	ldrb	r3, [r7, #10]
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	431a      	orrs	r2, r3
                                       | ((uint32_t)cap.Gas      << 3);
 800b242:	7afb      	ldrb	r3, [r7, #11]
 800b244:	00db      	lsls	r3, r3, #3
 800b246:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_LPS22DF_0].Functions = ((uint32_t)cap.Temperature)
 800b248:	4a3a      	ldr	r2, [pc, #232]	@ (800b334 <LPS22DF_0_Probe+0x180>)
 800b24a:	6053      	str	r3, [r2, #4]

    EnvCompObj[IKS4A1_LPS22DF_0] = &lps22df_obj_0;
 800b24c:	4b3a      	ldr	r3, [pc, #232]	@ (800b338 <LPS22DF_0_Probe+0x184>)
 800b24e:	4a38      	ldr	r2, [pc, #224]	@ (800b330 <LPS22DF_0_Probe+0x17c>)
 800b250:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_LPS22DF_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22DF_COMMON_Driver;
 800b252:	4b3a      	ldr	r3, [pc, #232]	@ (800b33c <LPS22DF_0_Probe+0x188>)
 800b254:	4a3a      	ldr	r2, [pc, #232]	@ (800b340 <LPS22DF_0_Probe+0x18c>)
 800b256:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d11e      	bne.n	800b29c <LPS22DF_0_Probe+0xe8>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f003 0301 	and.w	r3, r3, #1
 800b264:	2b00      	cmp	r3, #0
 800b266:	d019      	beq.n	800b29c <LPS22DF_0_Probe+0xe8>
 800b268:	7a3b      	ldrb	r3, [r7, #8]
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d116      	bne.n	800b29c <LPS22DF_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_TEMP_Driver;
 800b26e:	4b35      	ldr	r3, [pc, #212]	@ (800b344 <LPS22DF_0_Probe+0x190>)
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	4a35      	ldr	r2, [pc, #212]	@ (800b348 <LPS22DF_0_Probe+0x194>)
 800b274:	3304      	adds	r3, #4
 800b276:	4935      	ldr	r1, [pc, #212]	@ (800b34c <LPS22DF_0_Probe+0x198>)
 800b278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800b27c:	4b2f      	ldr	r3, [pc, #188]	@ (800b33c <LPS22DF_0_Probe+0x188>)
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a2d      	ldr	r2, [pc, #180]	@ (800b338 <LPS22DF_0_Probe+0x184>)
 800b284:	6852      	ldr	r2, [r2, #4]
 800b286:	4610      	mov	r0, r2
 800b288:	4798      	blx	r3
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d003      	beq.n	800b298 <LPS22DF_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b290:	f06f 0304 	mvn.w	r3, #4
 800b294:	647b      	str	r3, [r7, #68]	@ 0x44
 800b296:	e001      	b.n	800b29c <LPS22DF_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b298:	2300      	movs	r3, #0
 800b29a:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 800b29c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d11e      	bne.n	800b2e0 <LPS22DF_0_Probe+0x12c>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f003 0302 	and.w	r3, r3, #2
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d019      	beq.n	800b2e0 <LPS22DF_0_Probe+0x12c>
 800b2ac:	7a7b      	ldrb	r3, [r7, #9]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d116      	bne.n	800b2e0 <LPS22DF_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_LPS22DF_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22DF_PRESS_Driver;
 800b2b2:	4b24      	ldr	r3, [pc, #144]	@ (800b344 <LPS22DF_0_Probe+0x190>)
 800b2b4:	689b      	ldr	r3, [r3, #8]
 800b2b6:	4a24      	ldr	r2, [pc, #144]	@ (800b348 <LPS22DF_0_Probe+0x194>)
 800b2b8:	3304      	adds	r3, #4
 800b2ba:	4925      	ldr	r1, [pc, #148]	@ (800b350 <LPS22DF_0_Probe+0x19c>)
 800b2bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_LPS22DF_0]->Init(EnvCompObj[IKS4A1_LPS22DF_0]) != LPS22DF_OK)
 800b2c0:	4b1e      	ldr	r3, [pc, #120]	@ (800b33c <LPS22DF_0_Probe+0x188>)
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a1c      	ldr	r2, [pc, #112]	@ (800b338 <LPS22DF_0_Probe+0x184>)
 800b2c8:	6852      	ldr	r2, [r2, #4]
 800b2ca:	4610      	mov	r0, r2
 800b2cc:	4798      	blx	r3
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d003      	beq.n	800b2dc <LPS22DF_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b2d4:	f06f 0304 	mvn.w	r3, #4
 800b2d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2da:	e001      	b.n	800b2e0 <LPS22DF_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 800b2e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d107      	bne.n	800b2f6 <LPS22DF_0_Probe+0x142>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f003 0304 	and.w	r3, r3, #4
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d002      	beq.n	800b2f6 <LPS22DF_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b2f0:	f06f 0304 	mvn.w	r3, #4
 800b2f4:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b2f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d107      	bne.n	800b30c <LPS22DF_0_Probe+0x158>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f003 0308 	and.w	r3, r3, #8
 800b302:	2b00      	cmp	r3, #0
 800b304:	d002      	beq.n	800b30c <LPS22DF_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b306:	f06f 0304 	mvn.w	r3, #4
 800b30a:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b30c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3748      	adds	r7, #72	@ 0x48
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	08002495 	.word	0x08002495
 800b31c:	080024f9 	.word	0x080024f9
 800b320:	080025ad 	.word	0x080025ad
 800b324:	08002549 	.word	0x08002549
 800b328:	080026b9 	.word	0x080026b9
 800b32c:	0800c3e5 	.word	0x0800c3e5
 800b330:	20002744 	.word	0x20002744
 800b334:	20002700 	.word	0x20002700
 800b338:	200026b8 	.word	0x200026b8
 800b33c:	200026f4 	.word	0x200026f4
 800b340:	2000006c 	.word	0x2000006c
 800b344:	200001b0 	.word	0x200001b0
 800b348:	200026c4 	.word	0x200026c4
 800b34c:	20000090 	.word	0x20000090
 800b350:	2000007c 	.word	0x2000007c

0800b354 <SHT40AD1B_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t SHT40AD1B_0_Probe(uint32_t Functions)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b092      	sub	sp, #72	@ 0x48
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  SHT40AD1B_IO_t            io_ctx;
  uint8_t                   id;
  int32_t                   ret = BSP_ERROR_NONE;
 800b35c:	2300      	movs	r3, #0
 800b35e:	647b      	str	r3, [r7, #68]	@ 0x44
  static SHT40AD1B_Object_t sht40ad1b_obj_0;
  SHT40AD1B_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = SHT40AD1B_I2C_BUS; /* I2C */
 800b360:	2300      	movs	r3, #0
 800b362:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.Address     = SHT40AD1B_I2C_ADDRESS;
 800b364:	2389      	movs	r3, #137	@ 0x89
 800b366:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b36a:	4b53      	ldr	r3, [pc, #332]	@ (800b4b8 <SHT40AD1B_0_Probe+0x164>)
 800b36c:	627b      	str	r3, [r7, #36]	@ 0x24
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b36e:	4b53      	ldr	r3, [pc, #332]	@ (800b4bc <SHT40AD1B_0_Probe+0x168>)
 800b370:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_ctx.Read        = IKS4A1_I2C_READ;
 800b372:	4b53      	ldr	r3, [pc, #332]	@ (800b4c0 <SHT40AD1B_0_Probe+0x16c>)
 800b374:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_ctx.Write       = IKS4A1_I2C_WRITE;
 800b376:	4b53      	ldr	r3, [pc, #332]	@ (800b4c4 <SHT40AD1B_0_Probe+0x170>)
 800b378:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b37a:	4b53      	ldr	r3, [pc, #332]	@ (800b4c8 <SHT40AD1B_0_Probe+0x174>)
 800b37c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.Delay       = IKS4A1_DELAY;
 800b37e:	4b53      	ldr	r3, [pc, #332]	@ (800b4cc <SHT40AD1B_0_Probe+0x178>)
 800b380:	643b      	str	r3, [r7, #64]	@ 0x40

  if (SHT40AD1B_RegisterBusIO(&sht40ad1b_obj_0, &io_ctx) != SHT40AD1B_OK)
 800b382:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b386:	4619      	mov	r1, r3
 800b388:	4851      	ldr	r0, [pc, #324]	@ (800b4d0 <SHT40AD1B_0_Probe+0x17c>)
 800b38a:	f7fe fce9 	bl	8009d60 <SHT40AD1B_RegisterBusIO>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d003      	beq.n	800b39c <SHT40AD1B_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b394:	f06f 0306 	mvn.w	r3, #6
 800b398:	647b      	str	r3, [r7, #68]	@ 0x44
 800b39a:	e087      	b.n	800b4ac <SHT40AD1B_0_Probe+0x158>
  }
  else if (SHT40AD1B_ReadID(&sht40ad1b_obj_0, &id) != SHT40AD1B_OK)
 800b39c:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	484b      	ldr	r0, [pc, #300]	@ (800b4d0 <SHT40AD1B_0_Probe+0x17c>)
 800b3a4:	f7fe fd4c 	bl	8009e40 <SHT40AD1B_ReadID>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d003      	beq.n	800b3b6 <SHT40AD1B_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b3ae:	f06f 0306 	mvn.w	r3, #6
 800b3b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3b4:	e07a      	b.n	800b4ac <SHT40AD1B_0_Probe+0x158>
  }
  else if (id != SHT40AD1B_ID)
 800b3b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d003      	beq.n	800b3c6 <SHT40AD1B_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b3be:	f06f 0306 	mvn.w	r3, #6
 800b3c2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3c4:	e072      	b.n	800b4ac <SHT40AD1B_0_Probe+0x158>
  }
  else
  {
    (void)SHT40AD1B_GetCapabilities(&sht40ad1b_obj_0, &cap);
 800b3c6:	f107 0308 	add.w	r3, r7, #8
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	4840      	ldr	r0, [pc, #256]	@ (800b4d0 <SHT40AD1B_0_Probe+0x17c>)
 800b3ce:	f7fe fd47 	bl	8009e60 <SHT40AD1B_GetCapabilities>

    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800b3d2:	7a3b      	ldrb	r3, [r7, #8]
 800b3d4:	461a      	mov	r2, r3
                                         | ((uint32_t)cap.Pressure << 1)
 800b3d6:	7a7b      	ldrb	r3, [r7, #9]
 800b3d8:	005b      	lsls	r3, r3, #1
 800b3da:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Humidity << 2)
 800b3dc:	7abb      	ldrb	r3, [r7, #10]
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	431a      	orrs	r2, r3
                                         | ((uint32_t)cap.Gas      << 3);
 800b3e2:	7afb      	ldrb	r3, [r7, #11]
 800b3e4:	00db      	lsls	r3, r3, #3
 800b3e6:	4313      	orrs	r3, r2
    EnvCtx[IKS4A1_SHT40AD1B_0].Functions = ((uint32_t)cap.Temperature)
 800b3e8:	4a3a      	ldr	r2, [pc, #232]	@ (800b4d4 <SHT40AD1B_0_Probe+0x180>)
 800b3ea:	6093      	str	r3, [r2, #8]

    EnvCompObj[IKS4A1_SHT40AD1B_0] = &sht40ad1b_obj_0;
 800b3ec:	4b3a      	ldr	r3, [pc, #232]	@ (800b4d8 <SHT40AD1B_0_Probe+0x184>)
 800b3ee:	4a38      	ldr	r2, [pc, #224]	@ (800b4d0 <SHT40AD1B_0_Probe+0x17c>)
 800b3f0:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS4A1_SHT40AD1B_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&SHT40AD1B_COMMON_Driver;
 800b3f2:	4b3a      	ldr	r3, [pc, #232]	@ (800b4dc <SHT40AD1B_0_Probe+0x188>)
 800b3f4:	4a3a      	ldr	r2, [pc, #232]	@ (800b4e0 <SHT40AD1B_0_Probe+0x18c>)
 800b3f6:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 800b3f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d11e      	bne.n	800b43c <SHT40AD1B_0_Probe+0xe8>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f003 0301 	and.w	r3, r3, #1
 800b404:	2b00      	cmp	r3, #0
 800b406:	d019      	beq.n	800b43c <SHT40AD1B_0_Probe+0xe8>
 800b408:	7a3b      	ldrb	r3, [r7, #8]
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d116      	bne.n	800b43c <SHT40AD1B_0_Probe+0xe8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_TEMP_Driver;
 800b40e:	4b35      	ldr	r3, [pc, #212]	@ (800b4e4 <SHT40AD1B_0_Probe+0x190>)
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	4a35      	ldr	r2, [pc, #212]	@ (800b4e8 <SHT40AD1B_0_Probe+0x194>)
 800b414:	3308      	adds	r3, #8
 800b416:	4935      	ldr	r1, [pc, #212]	@ (800b4ec <SHT40AD1B_0_Probe+0x198>)
 800b418:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800b41c:	4b2f      	ldr	r3, [pc, #188]	@ (800b4dc <SHT40AD1B_0_Probe+0x188>)
 800b41e:	689b      	ldr	r3, [r3, #8]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4a2d      	ldr	r2, [pc, #180]	@ (800b4d8 <SHT40AD1B_0_Probe+0x184>)
 800b424:	6892      	ldr	r2, [r2, #8]
 800b426:	4610      	mov	r0, r2
 800b428:	4798      	blx	r3
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d003      	beq.n	800b438 <SHT40AD1B_0_Probe+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b430:	f06f 0304 	mvn.w	r3, #4
 800b434:	647b      	str	r3, [r7, #68]	@ 0x44
 800b436:	e001      	b.n	800b43c <SHT40AD1B_0_Probe+0xe8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b438:	2300      	movs	r3, #0
 800b43a:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 800b43c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d11e      	bne.n	800b480 <SHT40AD1B_0_Probe+0x12c>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f003 0304 	and.w	r3, r3, #4
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d019      	beq.n	800b480 <SHT40AD1B_0_Probe+0x12c>
 800b44c:	7abb      	ldrb	r3, [r7, #10]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d116      	bne.n	800b480 <SHT40AD1B_0_Probe+0x12c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS4A1_SHT40AD1B_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&SHT40AD1B_HUM_Driver;
 800b452:	4b24      	ldr	r3, [pc, #144]	@ (800b4e4 <SHT40AD1B_0_Probe+0x190>)
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	4a24      	ldr	r2, [pc, #144]	@ (800b4e8 <SHT40AD1B_0_Probe+0x194>)
 800b458:	3308      	adds	r3, #8
 800b45a:	4925      	ldr	r1, [pc, #148]	@ (800b4f0 <SHT40AD1B_0_Probe+0x19c>)
 800b45c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[IKS4A1_SHT40AD1B_0]->Init(EnvCompObj[IKS4A1_SHT40AD1B_0]) != SHT40AD1B_OK)
 800b460:	4b1e      	ldr	r3, [pc, #120]	@ (800b4dc <SHT40AD1B_0_Probe+0x188>)
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a1c      	ldr	r2, [pc, #112]	@ (800b4d8 <SHT40AD1B_0_Probe+0x184>)
 800b468:	6892      	ldr	r2, [r2, #8]
 800b46a:	4610      	mov	r0, r2
 800b46c:	4798      	blx	r3
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d003      	beq.n	800b47c <SHT40AD1B_0_Probe+0x128>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b474:	f06f 0304 	mvn.w	r3, #4
 800b478:	647b      	str	r3, [r7, #68]	@ 0x44
 800b47a:	e001      	b.n	800b480 <SHT40AD1B_0_Probe+0x12c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b47c:	2300      	movs	r3, #0
 800b47e:	647b      	str	r3, [r7, #68]	@ 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 800b480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b482:	2b00      	cmp	r3, #0
 800b484:	d107      	bne.n	800b496 <SHT40AD1B_0_Probe+0x142>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f003 0302 	and.w	r3, r3, #2
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d002      	beq.n	800b496 <SHT40AD1B_0_Probe+0x142>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b490:	f06f 0304 	mvn.w	r3, #4
 800b494:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 800b496:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d107      	bne.n	800b4ac <SHT40AD1B_0_Probe+0x158>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f003 0308 	and.w	r3, r3, #8
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d002      	beq.n	800b4ac <SHT40AD1B_0_Probe+0x158>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b4a6:	f06f 0304 	mvn.w	r3, #4
 800b4aa:	647b      	str	r3, [r7, #68]	@ 0x44
    }
  }

  return ret;
 800b4ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3748      	adds	r7, #72	@ 0x48
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	08002495 	.word	0x08002495
 800b4bc:	080024f9 	.word	0x080024f9
 800b4c0:	08002665 	.word	0x08002665
 800b4c4:	08002611 	.word	0x08002611
 800b4c8:	080026b9 	.word	0x080026b9
 800b4cc:	0800c3e5 	.word	0x0800c3e5
 800b4d0:	2000277c 	.word	0x2000277c
 800b4d4:	20002700 	.word	0x20002700
 800b4d8:	200026b8 	.word	0x200026b8
 800b4dc:	200026f4 	.word	0x200026f4
 800b4e0:	20000154 	.word	0x20000154
 800b4e4:	200001b0 	.word	0x200001b0
 800b4e8:	200026c4 	.word	0x200026c4
 800b4ec:	20000178 	.word	0x20000178
 800b4f0:	20000164 	.word	0x20000164

0800b4f4 <IKS4A1_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b08e      	sub	sp, #56	@ 0x38
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b4fe:	2300      	movs	r3, #0
 800b500:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 800b502:	2301      	movs	r3, #1
 800b504:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 800b506:	2300      	movs	r3, #0
 800b508:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS4A1_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2b03      	cmp	r3, #3
 800b50e:	f200 80d4 	bhi.w	800b6ba <IKS4A1_MOTION_SENSOR_Init+0x1c6>
 800b512:	a201      	add	r2, pc, #4	@ (adr r2, 800b518 <IKS4A1_MOTION_SENSOR_Init+0x24>)
 800b514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b518:	0800b529 	.word	0x0800b529
 800b51c:	0800b58f 	.word	0x0800b58f
 800b520:	0800b5f3 	.word	0x0800b5f3
 800b524:	0800b657 	.word	0x0800b657
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS4A1_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800b528:	6838      	ldr	r0, [r7, #0]
 800b52a:	f000 fa35 	bl	800b998 <LIS2MDL_0_Probe>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <IKS4A1_MOTION_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 800b534:	f04f 33ff 	mov.w	r3, #4294967295
 800b538:	e101      	b.n	800b73e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b53a:	4a83      	ldr	r2, [pc, #524]	@ (800b748 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	4981      	ldr	r1, [pc, #516]	@ (800b74c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b54c:	f107 010c 	add.w	r1, r7, #12
 800b550:	4610      	mov	r0, r2
 800b552:	4798      	blx	r3
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d002      	beq.n	800b560 <IKS4A1_MOTION_SENSOR_Init+0x6c>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b55a:	f06f 0306 	mvn.w	r3, #6
 800b55e:	e0ee      	b.n	800b73e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b560:	7b3b      	ldrb	r3, [r7, #12]
 800b562:	2b01      	cmp	r3, #1
 800b564:	d103      	bne.n	800b56e <IKS4A1_MOTION_SENSOR_Init+0x7a>
      {
        component_functions |= MOTION_ACCELERO;
 800b566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b568:	f043 0302 	orr.w	r3, r3, #2
 800b56c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b56e:	7b7b      	ldrb	r3, [r7, #13]
 800b570:	2b01      	cmp	r3, #1
 800b572:	d103      	bne.n	800b57c <IKS4A1_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_GYRO;
 800b574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b576:	f043 0301 	orr.w	r3, r3, #1
 800b57a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b57c:	7bbb      	ldrb	r3, [r7, #14]
 800b57e:	2b01      	cmp	r3, #1
 800b580:	f040 809f 	bne.w	800b6c2 <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      {
        component_functions |= MOTION_MAGNETO;
 800b584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b586:	f043 0304 	orr.w	r3, r3, #4
 800b58a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b58c:	e099      	b.n	800b6c2 <IKS4A1_MOTION_SENSOR_Init+0x1ce>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSV16X_0 == 1)
    case IKS4A1_LSM6DSV16X_0:
      if (LSM6DSV16X_0_Probe(Functions) != BSP_ERROR_NONE)
 800b58e:	6838      	ldr	r0, [r7, #0]
 800b590:	f000 faaa 	bl	800bae8 <LSM6DSV16X_0_Probe>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d002      	beq.n	800b5a0 <IKS4A1_MOTION_SENSOR_Init+0xac>
      {
        return BSP_ERROR_NO_INIT;
 800b59a:	f04f 33ff 	mov.w	r3, #4294967295
 800b59e:	e0ce      	b.n	800b73e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b5a0:	4a69      	ldr	r2, [pc, #420]	@ (800b748 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	4968      	ldr	r1, [pc, #416]	@ (800b74c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b5b2:	f107 010c 	add.w	r1, r7, #12
 800b5b6:	4610      	mov	r0, r2
 800b5b8:	4798      	blx	r3
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d002      	beq.n	800b5c6 <IKS4A1_MOTION_SENSOR_Init+0xd2>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b5c0:	f06f 0306 	mvn.w	r3, #6
 800b5c4:	e0bb      	b.n	800b73e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b5c6:	7b3b      	ldrb	r3, [r7, #12]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d103      	bne.n	800b5d4 <IKS4A1_MOTION_SENSOR_Init+0xe0>
      {
        component_functions |= MOTION_ACCELERO;
 800b5cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ce:	f043 0302 	orr.w	r3, r3, #2
 800b5d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b5d4:	7b7b      	ldrb	r3, [r7, #13]
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d103      	bne.n	800b5e2 <IKS4A1_MOTION_SENSOR_Init+0xee>
      {
        component_functions |= MOTION_GYRO;
 800b5da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5dc:	f043 0301 	orr.w	r3, r3, #1
 800b5e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b5e2:	7bbb      	ldrb	r3, [r7, #14]
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d16e      	bne.n	800b6c6 <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      {
        component_functions |= MOTION_MAGNETO;
 800b5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ea:	f043 0304 	orr.w	r3, r3, #4
 800b5ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b5f0:	e069      	b.n	800b6c6 <IKS4A1_MOTION_SENSOR_Init+0x1d2>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LIS2DUXS12_0 == 1)
    case IKS4A1_LIS2DUXS12_0:
      if (LIS2DUXS12_0_Probe(Functions) != BSP_ERROR_NONE)
 800b5f2:	6838      	ldr	r0, [r7, #0]
 800b5f4:	f000 fb44 	bl	800bc80 <LIS2DUXS12_0_Probe>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d002      	beq.n	800b604 <IKS4A1_MOTION_SENSOR_Init+0x110>
      {
        return BSP_ERROR_NO_INIT;
 800b5fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b602:	e09c      	b.n	800b73e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b604:	4a50      	ldr	r2, [pc, #320]	@ (800b748 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	494f      	ldr	r1, [pc, #316]	@ (800b74c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b616:	f107 010c 	add.w	r1, r7, #12
 800b61a:	4610      	mov	r0, r2
 800b61c:	4798      	blx	r3
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d002      	beq.n	800b62a <IKS4A1_MOTION_SENSOR_Init+0x136>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b624:	f06f 0306 	mvn.w	r3, #6
 800b628:	e089      	b.n	800b73e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b62a:	7b3b      	ldrb	r3, [r7, #12]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d103      	bne.n	800b638 <IKS4A1_MOTION_SENSOR_Init+0x144>
      {
        component_functions |= MOTION_ACCELERO;
 800b630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b632:	f043 0302 	orr.w	r3, r3, #2
 800b636:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b638:	7b7b      	ldrb	r3, [r7, #13]
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d103      	bne.n	800b646 <IKS4A1_MOTION_SENSOR_Init+0x152>
      {
        component_functions |= MOTION_GYRO;
 800b63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b640:	f043 0301 	orr.w	r3, r3, #1
 800b644:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b646:	7bbb      	ldrb	r3, [r7, #14]
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d13e      	bne.n	800b6ca <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      {
        component_functions |= MOTION_MAGNETO;
 800b64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b64e:	f043 0304 	orr.w	r3, r3, #4
 800b652:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b654:	e039      	b.n	800b6ca <IKS4A1_MOTION_SENSOR_Init+0x1d6>
      break;
#endif

#if (USE_IKS4A1_MOTION_SENSOR_LSM6DSO16IS_0 == 1)
    case IKS4A1_LSM6DSO16IS_0:
      if (LSM6DSO16IS_0_Probe(Functions) != BSP_ERROR_NONE)
 800b656:	6838      	ldr	r0, [r7, #0]
 800b658:	f000 fbc8 	bl	800bdec <LSM6DSO16IS_0_Probe>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d002      	beq.n	800b668 <IKS4A1_MOTION_SENSOR_Init+0x174>
      {
        return BSP_ERROR_NO_INIT;
 800b662:	f04f 33ff 	mov.w	r3, #4294967295
 800b666:	e06a      	b.n	800b73e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800b668:	4a37      	ldr	r2, [pc, #220]	@ (800b748 <IKS4A1_MOTION_SENSOR_Init+0x254>)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	4936      	ldr	r1, [pc, #216]	@ (800b74c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b67a:	f107 010c 	add.w	r1, r7, #12
 800b67e:	4610      	mov	r0, r2
 800b680:	4798      	blx	r3
 800b682:	4603      	mov	r3, r0
 800b684:	2b00      	cmp	r3, #0
 800b686:	d002      	beq.n	800b68e <IKS4A1_MOTION_SENSOR_Init+0x19a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800b688:	f06f 0306 	mvn.w	r3, #6
 800b68c:	e057      	b.n	800b73e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
      if (cap.Acc == 1U)
 800b68e:	7b3b      	ldrb	r3, [r7, #12]
 800b690:	2b01      	cmp	r3, #1
 800b692:	d103      	bne.n	800b69c <IKS4A1_MOTION_SENSOR_Init+0x1a8>
      {
        component_functions |= MOTION_ACCELERO;
 800b694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b696:	f043 0302 	orr.w	r3, r3, #2
 800b69a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800b69c:	7b7b      	ldrb	r3, [r7, #13]
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d103      	bne.n	800b6aa <IKS4A1_MOTION_SENSOR_Init+0x1b6>
      {
        component_functions |= MOTION_GYRO;
 800b6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a4:	f043 0301 	orr.w	r3, r3, #1
 800b6a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800b6aa:	7bbb      	ldrb	r3, [r7, #14]
 800b6ac:	2b01      	cmp	r3, #1
 800b6ae:	d10e      	bne.n	800b6ce <IKS4A1_MOTION_SENSOR_Init+0x1da>
      {
        component_functions |= MOTION_MAGNETO;
 800b6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b2:	f043 0304 	orr.w	r3, r3, #4
 800b6b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800b6b8:	e009      	b.n	800b6ce <IKS4A1_MOTION_SENSOR_Init+0x1da>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800b6ba:	f06f 0301 	mvn.w	r3, #1
 800b6be:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 800b6c0:	e006      	b.n	800b6d0 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b6c2:	bf00      	nop
 800b6c4:	e004      	b.n	800b6d0 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b6c6:	bf00      	nop
 800b6c8:	e002      	b.n	800b6d0 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b6ca:	bf00      	nop
 800b6cc:	e000      	b.n	800b6d0 <IKS4A1_MOTION_SENSOR_Init+0x1dc>
      break;
 800b6ce:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 800b6d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d001      	beq.n	800b6da <IKS4A1_MOTION_SENSOR_Init+0x1e6>
  {
    return ret;
 800b6d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6d8:	e031      	b.n	800b73e <IKS4A1_MOTION_SENSOR_Init+0x24a>
  }

  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800b6da:	2300      	movs	r3, #0
 800b6dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b6de:	e02a      	b.n	800b736 <IKS4A1_MOTION_SENSOR_Init+0x242>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800b6e0:	683a      	ldr	r2, [r7, #0]
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e4:	4013      	ands	r3, r2
 800b6e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d11e      	bne.n	800b72a <IKS4A1_MOTION_SENSOR_Init+0x236>
 800b6ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f0:	4013      	ands	r3, r2
 800b6f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d118      	bne.n	800b72a <IKS4A1_MOTION_SENSOR_Init+0x236>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800b6f8:	4a15      	ldr	r2, [pc, #84]	@ (800b750 <IKS4A1_MOTION_SENSOR_Init+0x25c>)
 800b6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b700:	4814      	ldr	r0, [pc, #80]	@ (800b754 <IKS4A1_MOTION_SENSOR_Init+0x260>)
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	4613      	mov	r3, r2
 800b706:	005b      	lsls	r3, r3, #1
 800b708:	4413      	add	r3, r2
 800b70a:	440b      	add	r3, r1
 800b70c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	490e      	ldr	r1, [pc, #56]	@ (800b74c <IKS4A1_MOTION_SENSOR_Init+0x258>)
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b71a:	4610      	mov	r0, r2
 800b71c:	4798      	blx	r3
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d002      	beq.n	800b72a <IKS4A1_MOTION_SENSOR_Init+0x236>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 800b724:	f06f 0304 	mvn.w	r3, #4
 800b728:	e009      	b.n	800b73e <IKS4A1_MOTION_SENSOR_Init+0x24a>
      }
    }
    function = function << 1;
 800b72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b72c:	005b      	lsls	r3, r3, #1
 800b72e:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS4A1_MOTION_FUNCTIONS_NBR; i++)
 800b730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b732:	3301      	adds	r3, #1
 800b734:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d9d1      	bls.n	800b6e0 <IKS4A1_MOTION_SENSOR_Init+0x1ec>
  }

  return ret;
 800b73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3738      	adds	r7, #56	@ 0x38
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	20002800 	.word	0x20002800
 800b74c:	200027c0 	.word	0x200027c0
 800b750:	200001f0 	.word	0x200001f0
 800b754:	200027d0 	.word	0x200027d0

0800b758 <IKS4A1_MOTION_SENSOR_GetCapabilities>:
  * @param  Instance Motion sensor instance
  * @param  Capabilities pointer to motion sensor capabilities
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetCapabilities(uint32_t Instance, IKS4A1_MOTION_SENSOR_Capabilities_t *Capabilities)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2b03      	cmp	r3, #3
 800b766:	d903      	bls.n	800b770 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b768:	f06f 0301 	mvn.w	r3, #1
 800b76c:	60fb      	str	r3, [r7, #12]
 800b76e:	e014      	b.n	800b79a <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], Capabilities) != BSP_ERROR_NONE)
 800b770:	4a0c      	ldr	r2, [pc, #48]	@ (800b7a4 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x4c>)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	490b      	ldr	r1, [pc, #44]	@ (800b7a8 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x50>)
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b782:	6839      	ldr	r1, [r7, #0]
 800b784:	4610      	mov	r0, r2
 800b786:	4798      	blx	r3
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d003      	beq.n	800b796 <IKS4A1_MOTION_SENSOR_GetCapabilities+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b78e:	f06f 0306 	mvn.w	r3, #6
 800b792:	60fb      	str	r3, [r7, #12]
 800b794:	e001      	b.n	800b79a <IKS4A1_MOTION_SENSOR_GetCapabilities+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800b796:	2300      	movs	r3, #0
 800b798:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b79a:	68fb      	ldr	r3, [r7, #12]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	20002800 	.word	0x20002800
 800b7a8:	200027c0 	.word	0x200027c0

0800b7ac <IKS4A1_MOTION_SENSOR_ReadID>:
  * @param  Instance Motion sensor instance
  * @param  Id WHOAMI value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_ReadID(uint32_t Instance, uint8_t *Id)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2b03      	cmp	r3, #3
 800b7ba:	d903      	bls.n	800b7c4 <IKS4A1_MOTION_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b7bc:	f06f 0301 	mvn.w	r3, #1
 800b7c0:	60fb      	str	r3, [r7, #12]
 800b7c2:	e014      	b.n	800b7ee <IKS4A1_MOTION_SENSOR_ReadID+0x42>
  }
  else if (MotionDrv[Instance]->ReadID(MotionCompObj[Instance], Id) != BSP_ERROR_NONE)
 800b7c4:	4a0c      	ldr	r2, [pc, #48]	@ (800b7f8 <IKS4A1_MOTION_SENSOR_ReadID+0x4c>)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	490b      	ldr	r1, [pc, #44]	@ (800b7fc <IKS4A1_MOTION_SENSOR_ReadID+0x50>)
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b7d6:	6839      	ldr	r1, [r7, #0]
 800b7d8:	4610      	mov	r0, r2
 800b7da:	4798      	blx	r3
 800b7dc:	4603      	mov	r3, r0
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d003      	beq.n	800b7ea <IKS4A1_MOTION_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b7e2:	f06f 0306 	mvn.w	r3, #6
 800b7e6:	60fb      	str	r3, [r7, #12]
 800b7e8:	e001      	b.n	800b7ee <IKS4A1_MOTION_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	20002800 	.word	0x20002800
 800b7fc:	200027c0 	.word	0x200027c0

0800b800 <IKS4A1_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS4A1_MOTION_SENSOR_Axes_t *Axes)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b086      	sub	sp, #24
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2b03      	cmp	r3, #3
 800b810:	d903      	bls.n	800b81a <IKS4A1_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b812:	f06f 0301 	mvn.w	r3, #1
 800b816:	617b      	str	r3, [r7, #20]
 800b818:	e029      	b.n	800b86e <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b81a:	4a17      	ldr	r2, [pc, #92]	@ (800b878 <IKS4A1_MOTION_SENSOR_GetAxes+0x78>)
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	4013      	ands	r3, r2
 800b826:	68ba      	ldr	r2, [r7, #8]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d11d      	bne.n	800b868 <IKS4A1_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800b82c:	4a13      	ldr	r2, [pc, #76]	@ (800b87c <IKS4A1_MOTION_SENSOR_GetAxes+0x7c>)
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b834:	4812      	ldr	r0, [pc, #72]	@ (800b880 <IKS4A1_MOTION_SENSOR_GetAxes+0x80>)
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	4613      	mov	r3, r2
 800b83a:	005b      	lsls	r3, r3, #1
 800b83c:	4413      	add	r3, r2
 800b83e:	440b      	add	r3, r1
 800b840:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b844:	69db      	ldr	r3, [r3, #28]
 800b846:	490f      	ldr	r1, [pc, #60]	@ (800b884 <IKS4A1_MOTION_SENSOR_GetAxes+0x84>)
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b84e:	6879      	ldr	r1, [r7, #4]
 800b850:	4610      	mov	r0, r2
 800b852:	4798      	blx	r3
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d003      	beq.n	800b862 <IKS4A1_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b85a:	f06f 0304 	mvn.w	r3, #4
 800b85e:	617b      	str	r3, [r7, #20]
 800b860:	e005      	b.n	800b86e <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b862:	2300      	movs	r3, #0
 800b864:	617b      	str	r3, [r7, #20]
 800b866:	e002      	b.n	800b86e <IKS4A1_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b868:	f06f 0301 	mvn.w	r3, #1
 800b86c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b86e:	697b      	ldr	r3, [r7, #20]
}
 800b870:	4618      	mov	r0, r3
 800b872:	3718      	adds	r7, #24
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}
 800b878:	20002810 	.word	0x20002810
 800b87c:	200001f0 	.word	0x200001f0
 800b880:	200027d0 	.word	0x200027d0
 800b884:	200027c0 	.word	0x200027c0

0800b888 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>:
  *         - MOTION_MAGNETO
  * @param  Odr pointer to Output Data Rate read value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetOutputDataRate(uint32_t Instance, uint32_t Function, float_t *Odr)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2b03      	cmp	r3, #3
 800b898:	d903      	bls.n	800b8a2 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b89a:	f06f 0301 	mvn.w	r3, #1
 800b89e:	617b      	str	r3, [r7, #20]
 800b8a0:	e029      	b.n	800b8f6 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b8a2:	4a17      	ldr	r2, [pc, #92]	@ (800b900 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x78>)
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	4013      	ands	r3, r2
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d11d      	bne.n	800b8f0 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 800b8b4:	4a13      	ldr	r2, [pc, #76]	@ (800b904 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x7c>)
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b8bc:	4812      	ldr	r0, [pc, #72]	@ (800b908 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x80>)
 800b8be:	68fa      	ldr	r2, [r7, #12]
 800b8c0:	4613      	mov	r3, r2
 800b8c2:	005b      	lsls	r3, r3, #1
 800b8c4:	4413      	add	r3, r2
 800b8c6:	440b      	add	r3, r1
 800b8c8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	490f      	ldr	r1, [pc, #60]	@ (800b90c <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x84>)
 800b8d0:	68fa      	ldr	r2, [r7, #12]
 800b8d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b8d6:	6879      	ldr	r1, [r7, #4]
 800b8d8:	4610      	mov	r0, r2
 800b8da:	4798      	blx	r3
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d003      	beq.n	800b8ea <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b8e2:	f06f 0304 	mvn.w	r3, #4
 800b8e6:	617b      	str	r3, [r7, #20]
 800b8e8:	e005      	b.n	800b8f6 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	617b      	str	r3, [r7, #20]
 800b8ee:	e002      	b.n	800b8f6 <IKS4A1_MOTION_SENSOR_GetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b8f0:	f06f 0301 	mvn.w	r3, #1
 800b8f4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b8f6:	697b      	ldr	r3, [r7, #20]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3718      	adds	r7, #24
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	20002810 	.word	0x20002810
 800b904:	200001f0 	.word	0x200001f0
 800b908:	200027d0 	.word	0x200027d0
 800b90c:	200027c0 	.word	0x200027c0

0800b910 <IKS4A1_MOTION_SENSOR_GetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale pointer to Fullscale read value
  * @retval BSP status
  */
int32_t IKS4A1_MOTION_SENSOR_GetFullScale(uint32_t Instance, uint32_t Function, int32_t *Fullscale)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b086      	sub	sp, #24
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS4A1_MOTION_INSTANCES_NBR)
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2b03      	cmp	r3, #3
 800b920:	d903      	bls.n	800b92a <IKS4A1_MOTION_SENSOR_GetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b922:	f06f 0301 	mvn.w	r3, #1
 800b926:	617b      	str	r3, [r7, #20]
 800b928:	e029      	b.n	800b97e <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800b92a:	4a17      	ldr	r2, [pc, #92]	@ (800b988 <IKS4A1_MOTION_SENSOR_GetFullScale+0x78>)
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	4013      	ands	r3, r2
 800b936:	68ba      	ldr	r2, [r7, #8]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d11d      	bne.n	800b978 <IKS4A1_MOTION_SENSOR_GetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetFullScale(MotionCompObj[Instance],
 800b93c:	4a13      	ldr	r2, [pc, #76]	@ (800b98c <IKS4A1_MOTION_SENSOR_GetFullScale+0x7c>)
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b944:	4812      	ldr	r0, [pc, #72]	@ (800b990 <IKS4A1_MOTION_SENSOR_GetFullScale+0x80>)
 800b946:	68fa      	ldr	r2, [r7, #12]
 800b948:	4613      	mov	r3, r2
 800b94a:	005b      	lsls	r3, r3, #1
 800b94c:	4413      	add	r3, r2
 800b94e:	440b      	add	r3, r1
 800b950:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800b954:	695b      	ldr	r3, [r3, #20]
 800b956:	490f      	ldr	r1, [pc, #60]	@ (800b994 <IKS4A1_MOTION_SENSOR_GetFullScale+0x84>)
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800b95e:	6879      	ldr	r1, [r7, #4]
 800b960:	4610      	mov	r0, r2
 800b962:	4798      	blx	r3
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d003      	beq.n	800b972 <IKS4A1_MOTION_SENSOR_GetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800b96a:	f06f 0304 	mvn.w	r3, #4
 800b96e:	617b      	str	r3, [r7, #20]
 800b970:	e005      	b.n	800b97e <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800b972:	2300      	movs	r3, #0
 800b974:	617b      	str	r3, [r7, #20]
 800b976:	e002      	b.n	800b97e <IKS4A1_MOTION_SENSOR_GetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800b978:	f06f 0301 	mvn.w	r3, #1
 800b97c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b97e:	697b      	ldr	r3, [r7, #20]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3718      	adds	r7, #24
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	20002810 	.word	0x20002810
 800b98c:	200001f0 	.word	0x200001f0
 800b990:	200027d0 	.word	0x200027d0
 800b994:	200027c0 	.word	0x200027c0

0800b998 <LIS2MDL_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b094      	sub	sp, #80	@ 0x50
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800b9a8:	233d      	movs	r3, #61	@ 0x3d
 800b9aa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800b9ae:	4b40      	ldr	r3, [pc, #256]	@ (800bab0 <LIS2MDL_0_Probe+0x118>)
 800b9b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800b9b2:	4b40      	ldr	r3, [pc, #256]	@ (800bab4 <LIS2MDL_0_Probe+0x11c>)
 800b9b4:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800b9b6:	4b40      	ldr	r3, [pc, #256]	@ (800bab8 <LIS2MDL_0_Probe+0x120>)
 800b9b8:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800b9ba:	4b40      	ldr	r3, [pc, #256]	@ (800babc <LIS2MDL_0_Probe+0x124>)
 800b9bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800b9be:	4b40      	ldr	r3, [pc, #256]	@ (800bac0 <LIS2MDL_0_Probe+0x128>)
 800b9c0:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800b9c2:	4b40      	ldr	r3, [pc, #256]	@ (800bac4 <LIS2MDL_0_Probe+0x12c>)
 800b9c4:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800b9c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b9ca:	4619      	mov	r1, r3
 800b9cc:	483e      	ldr	r0, [pc, #248]	@ (800bac8 <LIS2MDL_0_Probe+0x130>)
 800b9ce:	f7f8 fcbb 	bl	8004348 <LIS2MDL_RegisterBusIO>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d003      	beq.n	800b9e0 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b9d8:	f06f 0306 	mvn.w	r3, #6
 800b9dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9de:	e061      	b.n	800baa4 <LIS2MDL_0_Probe+0x10c>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 800b9e0:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	4838      	ldr	r0, [pc, #224]	@ (800bac8 <LIS2MDL_0_Probe+0x130>)
 800b9e8:	f7f8 fdca 	bl	8004580 <LIS2MDL_ReadID>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d003      	beq.n	800b9fa <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b9f2:	f06f 0306 	mvn.w	r3, #6
 800b9f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9f8:	e054      	b.n	800baa4 <LIS2MDL_0_Probe+0x10c>
  }
  else if (id != LIS2MDL_ID)
 800b9fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b9fe:	2b40      	cmp	r3, #64	@ 0x40
 800ba00:	d003      	beq.n	800ba0a <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ba02:	f06f 0306 	mvn.w	r3, #6
 800ba06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba08:	e04c      	b.n	800baa4 <LIS2MDL_0_Probe+0x10c>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 800ba0a:	f107 030c 	add.w	r3, r7, #12
 800ba0e:	4619      	mov	r1, r3
 800ba10:	482d      	ldr	r0, [pc, #180]	@ (800bac8 <LIS2MDL_0_Probe+0x130>)
 800ba12:	f7f8 fddb 	bl	80045cc <LIS2MDL_GetCapabilities>
    MotionCtx[IKS4A1_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800ba16:	7b7b      	ldrb	r3, [r7, #13]
 800ba18:	461a      	mov	r2, r3
 800ba1a:	7b3b      	ldrb	r3, [r7, #12]
 800ba1c:	005b      	lsls	r3, r3, #1
 800ba1e:	431a      	orrs	r2, r3
 800ba20:	7bbb      	ldrb	r3, [r7, #14]
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	4313      	orrs	r3, r2
 800ba26:	4a29      	ldr	r2, [pc, #164]	@ (800bacc <LIS2MDL_0_Probe+0x134>)
 800ba28:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS4A1_LIS2MDL_0] = &lis2mdl_obj_0;
 800ba2a:	4b29      	ldr	r3, [pc, #164]	@ (800bad0 <LIS2MDL_0_Probe+0x138>)
 800ba2c:	4a26      	ldr	r2, [pc, #152]	@ (800bac8 <LIS2MDL_0_Probe+0x130>)
 800ba2e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800ba30:	4b28      	ldr	r3, [pc, #160]	@ (800bad4 <LIS2MDL_0_Probe+0x13c>)
 800ba32:	4a29      	ldr	r2, [pc, #164]	@ (800bad8 <LIS2MDL_0_Probe+0x140>)
 800ba34:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800ba36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d11d      	bne.n	800ba78 <LIS2MDL_0_Probe+0xe0>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f003 0304 	and.w	r3, r3, #4
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d018      	beq.n	800ba78 <LIS2MDL_0_Probe+0xe0>
 800ba46:	7bbb      	ldrb	r3, [r7, #14]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d115      	bne.n	800ba78 <LIS2MDL_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800ba4c:	4b23      	ldr	r3, [pc, #140]	@ (800badc <LIS2MDL_0_Probe+0x144>)
 800ba4e:	691b      	ldr	r3, [r3, #16]
 800ba50:	4a23      	ldr	r2, [pc, #140]	@ (800bae0 <LIS2MDL_0_Probe+0x148>)
 800ba52:	4924      	ldr	r1, [pc, #144]	@ (800bae4 <LIS2MDL_0_Probe+0x14c>)
 800ba54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS4A1_LIS2MDL_0]->Init(MotionCompObj[IKS4A1_LIS2MDL_0]) != LIS2MDL_OK)
 800ba58:	4b1e      	ldr	r3, [pc, #120]	@ (800bad4 <LIS2MDL_0_Probe+0x13c>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a1c      	ldr	r2, [pc, #112]	@ (800bad0 <LIS2MDL_0_Probe+0x138>)
 800ba60:	6812      	ldr	r2, [r2, #0]
 800ba62:	4610      	mov	r0, r2
 800ba64:	4798      	blx	r3
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d003      	beq.n	800ba74 <LIS2MDL_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba6c:	f06f 0304 	mvn.w	r3, #4
 800ba70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba72:	e001      	b.n	800ba78 <LIS2MDL_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ba74:	2300      	movs	r3, #0
 800ba76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800ba78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d107      	bne.n	800ba8e <LIS2MDL_0_Probe+0xf6>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f003 0302 	and.w	r3, r3, #2
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <LIS2MDL_0_Probe+0xf6>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba88:	f06f 0304 	mvn.w	r3, #4
 800ba8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800ba8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d107      	bne.n	800baa4 <LIS2MDL_0_Probe+0x10c>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f003 0301 	and.w	r3, r3, #1
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d002      	beq.n	800baa4 <LIS2MDL_0_Probe+0x10c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba9e:	f06f 0304 	mvn.w	r3, #4
 800baa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800baa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3750      	adds	r7, #80	@ 0x50
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	08002495 	.word	0x08002495
 800bab4:	080024f9 	.word	0x080024f9
 800bab8:	080025ad 	.word	0x080025ad
 800babc:	08002549 	.word	0x08002549
 800bac0:	080026b9 	.word	0x080026b9
 800bac4:	0800c3e5 	.word	0x0800c3e5
 800bac8:	20002820 	.word	0x20002820
 800bacc:	20002810 	.word	0x20002810
 800bad0:	200027c0 	.word	0x200027c0
 800bad4:	20002800 	.word	0x20002800
 800bad8:	20000038 	.word	0x20000038
 800badc:	200001f0 	.word	0x200001f0
 800bae0:	200027d0 	.word	0x200027d0
 800bae4:	20000048 	.word	0x20000048

0800bae8 <LSM6DSV16X_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSV16X_0_Probe(uint32_t Functions)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b094      	sub	sp, #80	@ 0x50
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  LSM6DSV16X_IO_t            io_ctx;
  uint8_t                    id;
  static LSM6DSV16X_Object_t lsm6dsv16x_obj_0;
  LSM6DSV16X_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800baf0:	2300      	movs	r3, #0
 800baf2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSV16X_I2C_BUS; /* I2C */
 800baf4:	2300      	movs	r3, #0
 800baf6:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSV16X_I2C_ADD_H;
 800baf8:	23d7      	movs	r3, #215	@ 0xd7
 800bafa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800bafe:	4b51      	ldr	r3, [pc, #324]	@ (800bc44 <LSM6DSV16X_0_Probe+0x15c>)
 800bb00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800bb02:	4b51      	ldr	r3, [pc, #324]	@ (800bc48 <LSM6DSV16X_0_Probe+0x160>)
 800bb04:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800bb06:	4b51      	ldr	r3, [pc, #324]	@ (800bc4c <LSM6DSV16X_0_Probe+0x164>)
 800bb08:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800bb0a:	4b51      	ldr	r3, [pc, #324]	@ (800bc50 <LSM6DSV16X_0_Probe+0x168>)
 800bb0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800bb0e:	4b51      	ldr	r3, [pc, #324]	@ (800bc54 <LSM6DSV16X_0_Probe+0x16c>)
 800bb10:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800bb12:	4b51      	ldr	r3, [pc, #324]	@ (800bc58 <LSM6DSV16X_0_Probe+0x170>)
 800bb14:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSV16X_RegisterBusIO(&lsm6dsv16x_obj_0, &io_ctx) != LSM6DSV16X_OK)
 800bb16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	484f      	ldr	r0, [pc, #316]	@ (800bc5c <LSM6DSV16X_0_Probe+0x174>)
 800bb1e:	f7fc f983 	bl	8007e28 <LSM6DSV16X_RegisterBusIO>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d003      	beq.n	800bb30 <LSM6DSV16X_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bb28:	f06f 0306 	mvn.w	r3, #6
 800bb2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb2e:	e084      	b.n	800bc3a <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_Set_Mem_Bank(&lsm6dsv16x_obj_0, LSM6DSV16X_MAIN_MEM_BANK) != LSM6DSV16X_OK)
 800bb30:	2100      	movs	r1, #0
 800bb32:	484a      	ldr	r0, [pc, #296]	@ (800bc5c <LSM6DSV16X_0_Probe+0x174>)
 800bb34:	f7fd f905 	bl	8008d42 <LSM6DSV16X_Set_Mem_Bank>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d003      	beq.n	800bb46 <LSM6DSV16X_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bb3e:	f06f 0306 	mvn.w	r3, #6
 800bb42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb44:	e079      	b.n	800bc3a <LSM6DSV16X_0_Probe+0x152>
  }
  else if (LSM6DSV16X_ReadID(&lsm6dsv16x_obj_0, &id) != LSM6DSV16X_OK)
 800bb46:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	4843      	ldr	r0, [pc, #268]	@ (800bc5c <LSM6DSV16X_0_Probe+0x174>)
 800bb4e:	f7fc fa9b 	bl	8008088 <LSM6DSV16X_ReadID>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d003      	beq.n	800bb60 <LSM6DSV16X_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bb58:	f06f 0306 	mvn.w	r3, #6
 800bb5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb5e:	e06c      	b.n	800bc3a <LSM6DSV16X_0_Probe+0x152>
  }
  else if (id != LSM6DSV16X_ID)
 800bb60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bb64:	2b70      	cmp	r3, #112	@ 0x70
 800bb66:	d003      	beq.n	800bb70 <LSM6DSV16X_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bb68:	f06f 0306 	mvn.w	r3, #6
 800bb6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb6e:	e064      	b.n	800bc3a <LSM6DSV16X_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSV16X_GetCapabilities(&lsm6dsv16x_obj_0, &cap);
 800bb70:	f107 030c 	add.w	r3, r7, #12
 800bb74:	4619      	mov	r1, r3
 800bb76:	4839      	ldr	r0, [pc, #228]	@ (800bc5c <LSM6DSV16X_0_Probe+0x174>)
 800bb78:	f7fc fa9c 	bl	80080b4 <LSM6DSV16X_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSV16X_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bb7c:	7b7b      	ldrb	r3, [r7, #13]
 800bb7e:	461a      	mov	r2, r3
 800bb80:	7b3b      	ldrb	r3, [r7, #12]
 800bb82:	005b      	lsls	r3, r3, #1
 800bb84:	431a      	orrs	r2, r3
 800bb86:	7bbb      	ldrb	r3, [r7, #14]
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	4a34      	ldr	r2, [pc, #208]	@ (800bc60 <LSM6DSV16X_0_Probe+0x178>)
 800bb8e:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS4A1_LSM6DSV16X_0] = &lsm6dsv16x_obj_0;
 800bb90:	4b34      	ldr	r3, [pc, #208]	@ (800bc64 <LSM6DSV16X_0_Probe+0x17c>)
 800bb92:	4a32      	ldr	r2, [pc, #200]	@ (800bc5c <LSM6DSV16X_0_Probe+0x174>)
 800bb94:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSV16X_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSV16X_COMMON_Driver;
 800bb96:	4b34      	ldr	r3, [pc, #208]	@ (800bc68 <LSM6DSV16X_0_Probe+0x180>)
 800bb98:	4a34      	ldr	r2, [pc, #208]	@ (800bc6c <LSM6DSV16X_0_Probe+0x184>)
 800bb9a:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800bb9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d11e      	bne.n	800bbe0 <LSM6DSV16X_0_Probe+0xf8>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f003 0301 	and.w	r3, r3, #1
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d019      	beq.n	800bbe0 <LSM6DSV16X_0_Probe+0xf8>
 800bbac:	7b7b      	ldrb	r3, [r7, #13]
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d116      	bne.n	800bbe0 <LSM6DSV16X_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bbb2:	4b2f      	ldr	r3, [pc, #188]	@ (800bc70 <LSM6DSV16X_0_Probe+0x188>)
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	4a2f      	ldr	r2, [pc, #188]	@ (800bc74 <LSM6DSV16X_0_Probe+0x18c>)
 800bbb8:	3303      	adds	r3, #3
 800bbba:	492f      	ldr	r1, [pc, #188]	@ (800bc78 <LSM6DSV16X_0_Probe+0x190>)
 800bbbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                        void *)&LSM6DSV16X_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800bbc0:	4b29      	ldr	r3, [pc, #164]	@ (800bc68 <LSM6DSV16X_0_Probe+0x180>)
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4a27      	ldr	r2, [pc, #156]	@ (800bc64 <LSM6DSV16X_0_Probe+0x17c>)
 800bbc8:	6852      	ldr	r2, [r2, #4]
 800bbca:	4610      	mov	r0, r2
 800bbcc:	4798      	blx	r3
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d003      	beq.n	800bbdc <LSM6DSV16X_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bbd4:	f06f 0304 	mvn.w	r3, #4
 800bbd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbda:	e001      	b.n	800bbe0 <LSM6DSV16X_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800bbe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d11e      	bne.n	800bc24 <LSM6DSV16X_0_Probe+0x13c>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f003 0302 	and.w	r3, r3, #2
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d019      	beq.n	800bc24 <LSM6DSV16X_0_Probe+0x13c>
 800bbf0:	7b3b      	ldrb	r3, [r7, #12]
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d116      	bne.n	800bc24 <LSM6DSV16X_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSV16X_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bbf6:	4b1e      	ldr	r3, [pc, #120]	@ (800bc70 <LSM6DSV16X_0_Probe+0x188>)
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	4a1e      	ldr	r2, [pc, #120]	@ (800bc74 <LSM6DSV16X_0_Probe+0x18c>)
 800bbfc:	3303      	adds	r3, #3
 800bbfe:	491f      	ldr	r1, [pc, #124]	@ (800bc7c <LSM6DSV16X_0_Probe+0x194>)
 800bc00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LSM6DSV16X_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSV16X_0]->Init(MotionCompObj[IKS4A1_LSM6DSV16X_0]) != LSM6DSV16X_OK)
 800bc04:	4b18      	ldr	r3, [pc, #96]	@ (800bc68 <LSM6DSV16X_0_Probe+0x180>)
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a16      	ldr	r2, [pc, #88]	@ (800bc64 <LSM6DSV16X_0_Probe+0x17c>)
 800bc0c:	6852      	ldr	r2, [r2, #4]
 800bc0e:	4610      	mov	r0, r2
 800bc10:	4798      	blx	r3
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d003      	beq.n	800bc20 <LSM6DSV16X_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc18:	f06f 0304 	mvn.w	r3, #4
 800bc1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc1e:	e001      	b.n	800bc24 <LSM6DSV16X_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bc20:	2300      	movs	r3, #0
 800bc22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800bc24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d107      	bne.n	800bc3a <LSM6DSV16X_0_Probe+0x152>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f003 0304 	and.w	r3, r3, #4
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d002      	beq.n	800bc3a <LSM6DSV16X_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc34:	f06f 0304 	mvn.w	r3, #4
 800bc38:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800bc3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3750      	adds	r7, #80	@ 0x50
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	08002495 	.word	0x08002495
 800bc48:	080024f9 	.word	0x080024f9
 800bc4c:	080025ad 	.word	0x080025ad
 800bc50:	08002549 	.word	0x08002549
 800bc54:	080026b9 	.word	0x080026b9
 800bc58:	0800c3e5 	.word	0x0800c3e5
 800bc5c:	20002854 	.word	0x20002854
 800bc60:	20002810 	.word	0x20002810
 800bc64:	200027c0 	.word	0x200027c0
 800bc68:	20002800 	.word	0x20002800
 800bc6c:	200000fc 	.word	0x200000fc
 800bc70:	200001f0 	.word	0x200001f0
 800bc74:	200027d0 	.word	0x200027d0
 800bc78:	20000130 	.word	0x20000130
 800bc7c:	2000010c 	.word	0x2000010c

0800bc80 <LIS2DUXS12_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LIS2DUXS12_0_Probe(uint32_t Functions)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b094      	sub	sp, #80	@ 0x50
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  LIS2DUXS12_IO_t            io_ctx;
  uint8_t                    id;
  static LIS2DUXS12_Object_t lis2duxs12_obj_0;
  LIS2DUXS12_Capabilities_t  cap;
  int32_t                    ret = BSP_ERROR_NONE;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LIS2DUXS12_I2C_BUS; /* I2C */
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DUXS12_I2C_ADD_H;
 800bc90:	2333      	movs	r3, #51	@ 0x33
 800bc92:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800bc96:	4b47      	ldr	r3, [pc, #284]	@ (800bdb4 <LIS2DUXS12_0_Probe+0x134>)
 800bc98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800bc9a:	4b47      	ldr	r3, [pc, #284]	@ (800bdb8 <LIS2DUXS12_0_Probe+0x138>)
 800bc9c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800bc9e:	4b47      	ldr	r3, [pc, #284]	@ (800bdbc <LIS2DUXS12_0_Probe+0x13c>)
 800bca0:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800bca2:	4b47      	ldr	r3, [pc, #284]	@ (800bdc0 <LIS2DUXS12_0_Probe+0x140>)
 800bca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800bca6:	4b47      	ldr	r3, [pc, #284]	@ (800bdc4 <LIS2DUXS12_0_Probe+0x144>)
 800bca8:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800bcaa:	4b47      	ldr	r3, [pc, #284]	@ (800bdc8 <LIS2DUXS12_0_Probe+0x148>)
 800bcac:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DUXS12_RegisterBusIO(&lis2duxs12_obj_0, &io_ctx) != LIS2DUXS12_OK)
 800bcae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	4845      	ldr	r0, [pc, #276]	@ (800bdcc <LIS2DUXS12_0_Probe+0x14c>)
 800bcb6:	f7f6 fe65 	bl	8002984 <LIS2DUXS12_RegisterBusIO>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d003      	beq.n	800bcc8 <LIS2DUXS12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bcc0:	f06f 0306 	mvn.w	r3, #6
 800bcc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bcc6:	e070      	b.n	800bdaa <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_Set_Mem_Bank(&lis2duxs12_obj_0, LIS2DUXS12_MAIN_MEM_BANK) != LIS2DUXS12_OK)
 800bcc8:	2100      	movs	r1, #0
 800bcca:	4840      	ldr	r0, [pc, #256]	@ (800bdcc <LIS2DUXS12_0_Probe+0x14c>)
 800bccc:	f7f7 fad2 	bl	8003274 <LIS2DUXS12_Set_Mem_Bank>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d003      	beq.n	800bcde <LIS2DUXS12_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bcd6:	f06f 0306 	mvn.w	r3, #6
 800bcda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bcdc:	e065      	b.n	800bdaa <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (LIS2DUXS12_ReadID(&lis2duxs12_obj_0, &id) != LIS2DUXS12_OK)
 800bcde:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800bce2:	4619      	mov	r1, r3
 800bce4:	4839      	ldr	r0, [pc, #228]	@ (800bdcc <LIS2DUXS12_0_Probe+0x14c>)
 800bce6:	f7f6 ffac 	bl	8002c42 <LIS2DUXS12_ReadID>
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d003      	beq.n	800bcf8 <LIS2DUXS12_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bcf0:	f06f 0306 	mvn.w	r3, #6
 800bcf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bcf6:	e058      	b.n	800bdaa <LIS2DUXS12_0_Probe+0x12a>
  }
  else if (id != LIS2DUXS12_ID)
 800bcf8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bcfc:	2b47      	cmp	r3, #71	@ 0x47
 800bcfe:	d003      	beq.n	800bd08 <LIS2DUXS12_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bd00:	f06f 0306 	mvn.w	r3, #6
 800bd04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd06:	e050      	b.n	800bdaa <LIS2DUXS12_0_Probe+0x12a>
  }
  else
  {
    (void)LIS2DUXS12_GetCapabilities(&lis2duxs12_obj_0, &cap);
 800bd08:	f107 030c 	add.w	r3, r7, #12
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	482f      	ldr	r0, [pc, #188]	@ (800bdcc <LIS2DUXS12_0_Probe+0x14c>)
 800bd10:	f7f6 ffb2 	bl	8002c78 <LIS2DUXS12_GetCapabilities>
    MotionCtx[IKS4A1_LIS2DUXS12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800bd14:	7b7b      	ldrb	r3, [r7, #13]
 800bd16:	461a      	mov	r2, r3
 800bd18:	7b3b      	ldrb	r3, [r7, #12]
 800bd1a:	005b      	lsls	r3, r3, #1
 800bd1c:	431a      	orrs	r2, r3
 800bd1e:	7bbb      	ldrb	r3, [r7, #14]
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	4313      	orrs	r3, r2
 800bd24:	4a2a      	ldr	r2, [pc, #168]	@ (800bdd0 <LIS2DUXS12_0_Probe+0x150>)
 800bd26:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS4A1_LIS2DUXS12_0] = &lis2duxs12_obj_0;
 800bd28:	4b2a      	ldr	r3, [pc, #168]	@ (800bdd4 <LIS2DUXS12_0_Probe+0x154>)
 800bd2a:	4a28      	ldr	r2, [pc, #160]	@ (800bdcc <LIS2DUXS12_0_Probe+0x14c>)
 800bd2c:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LIS2DUXS12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DUXS12_COMMON_Driver;
 800bd2e:	4b2a      	ldr	r3, [pc, #168]	@ (800bdd8 <LIS2DUXS12_0_Probe+0x158>)
 800bd30:	4a2a      	ldr	r2, [pc, #168]	@ (800bddc <LIS2DUXS12_0_Probe+0x15c>)
 800bd32:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800bd34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10a      	bne.n	800bd50 <LIS2DUXS12_0_Probe+0xd0>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f003 0301 	and.w	r3, r3, #1
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d005      	beq.n	800bd50 <LIS2DUXS12_0_Probe+0xd0>
 800bd44:	7b7b      	ldrb	r3, [r7, #13]
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d102      	bne.n	800bd50 <LIS2DUXS12_0_Probe+0xd0>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bd4a:	f06f 0304 	mvn.w	r3, #4
 800bd4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800bd50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d11e      	bne.n	800bd94 <LIS2DUXS12_0_Probe+0x114>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f003 0302 	and.w	r3, r3, #2
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d019      	beq.n	800bd94 <LIS2DUXS12_0_Probe+0x114>
 800bd60:	7b3b      	ldrb	r3, [r7, #12]
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d116      	bne.n	800bd94 <LIS2DUXS12_0_Probe+0x114>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LIS2DUXS12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800bd66:	4b1e      	ldr	r3, [pc, #120]	@ (800bde0 <LIS2DUXS12_0_Probe+0x160>)
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	4a1e      	ldr	r2, [pc, #120]	@ (800bde4 <LIS2DUXS12_0_Probe+0x164>)
 800bd6c:	3306      	adds	r3, #6
 800bd6e:	491e      	ldr	r1, [pc, #120]	@ (800bde8 <LIS2DUXS12_0_Probe+0x168>)
 800bd70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DUXS12_ACC_Driver;

      if (MotionDrv[IKS4A1_LIS2DUXS12_0]->Init(MotionCompObj[IKS4A1_LIS2DUXS12_0]) != LIS2DUXS12_OK)
 800bd74:	4b18      	ldr	r3, [pc, #96]	@ (800bdd8 <LIS2DUXS12_0_Probe+0x158>)
 800bd76:	689b      	ldr	r3, [r3, #8]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a16      	ldr	r2, [pc, #88]	@ (800bdd4 <LIS2DUXS12_0_Probe+0x154>)
 800bd7c:	6892      	ldr	r2, [r2, #8]
 800bd7e:	4610      	mov	r0, r2
 800bd80:	4798      	blx	r3
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d003      	beq.n	800bd90 <LIS2DUXS12_0_Probe+0x110>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bd88:	f06f 0304 	mvn.w	r3, #4
 800bd8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd8e:	e001      	b.n	800bd94 <LIS2DUXS12_0_Probe+0x114>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bd90:	2300      	movs	r3, #0
 800bd92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800bd94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d107      	bne.n	800bdaa <LIS2DUXS12_0_Probe+0x12a>
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f003 0304 	and.w	r3, r3, #4
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d002      	beq.n	800bdaa <LIS2DUXS12_0_Probe+0x12a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bda4:	f06f 0304 	mvn.w	r3, #4
 800bda8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800bdaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3750      	adds	r7, #80	@ 0x50
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	08002495 	.word	0x08002495
 800bdb8:	080024f9 	.word	0x080024f9
 800bdbc:	080025ad 	.word	0x080025ad
 800bdc0:	08002549 	.word	0x08002549
 800bdc4:	080026b9 	.word	0x080026b9
 800bdc8:	0800c3e5 	.word	0x0800c3e5
 800bdcc:	2000288c 	.word	0x2000288c
 800bdd0:	20002810 	.word	0x20002810
 800bdd4:	200027c0 	.word	0x200027c0
 800bdd8:	20002800 	.word	0x20002800
 800bddc:	20000004 	.word	0x20000004
 800bde0:	200001f0 	.word	0x200001f0
 800bde4:	200027d0 	.word	0x200027d0
 800bde8:	20000014 	.word	0x20000014

0800bdec <LSM6DSO16IS_0_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status
  */
static int32_t LSM6DSO16IS_0_Probe(uint32_t Functions)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b094      	sub	sp, #80	@ 0x50
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  LSM6DSO16IS_IO_t            io_ctx;
  uint8_t                     id;
  static LSM6DSO16IS_Object_t lsm6dso16is_obj_0;
  LSM6DSO16IS_Capabilities_t  cap;
  int32_t                     ret = BSP_ERROR_NONE;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSO16IS_I2C_BUS; /* I2C */
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO16IS_I2C_ADD_L;
 800bdfc:	23d5      	movs	r3, #213	@ 0xd5
 800bdfe:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS4A1_I2C_INIT;
 800be02:	4b51      	ldr	r3, [pc, #324]	@ (800bf48 <LSM6DSO16IS_0_Probe+0x15c>)
 800be04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS4A1_I2C_DEINIT;
 800be06:	4b51      	ldr	r3, [pc, #324]	@ (800bf4c <LSM6DSO16IS_0_Probe+0x160>)
 800be08:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS4A1_I2C_READ_REG;
 800be0a:	4b51      	ldr	r3, [pc, #324]	@ (800bf50 <LSM6DSO16IS_0_Probe+0x164>)
 800be0c:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS4A1_I2C_WRITE_REG;
 800be0e:	4b51      	ldr	r3, [pc, #324]	@ (800bf54 <LSM6DSO16IS_0_Probe+0x168>)
 800be10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS4A1_GET_TICK;
 800be12:	4b51      	ldr	r3, [pc, #324]	@ (800bf58 <LSM6DSO16IS_0_Probe+0x16c>)
 800be14:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS4A1_DELAY;
 800be16:	4b51      	ldr	r3, [pc, #324]	@ (800bf5c <LSM6DSO16IS_0_Probe+0x170>)
 800be18:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO16IS_RegisterBusIO(&lsm6dso16is_obj_0, &io_ctx) != LSM6DSO16IS_OK)
 800be1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800be1e:	4619      	mov	r1, r3
 800be20:	484f      	ldr	r0, [pc, #316]	@ (800bf60 <LSM6DSO16IS_0_Probe+0x174>)
 800be22:	f7fa facd 	bl	80063c0 <LSM6DSO16IS_RegisterBusIO>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d003      	beq.n	800be34 <LSM6DSO16IS_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800be2c:	f06f 0306 	mvn.w	r3, #6
 800be30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be32:	e084      	b.n	800bf3e <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_Set_Mem_Bank(&lsm6dso16is_obj_0, LSM6DSO16IS_MAIN_MEM_BANK) != LSM6DSO16IS_OK)
 800be34:	2100      	movs	r1, #0
 800be36:	484a      	ldr	r0, [pc, #296]	@ (800bf60 <LSM6DSO16IS_0_Probe+0x174>)
 800be38:	f7fb f8f3 	bl	8007022 <LSM6DSO16IS_Set_Mem_Bank>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d003      	beq.n	800be4a <LSM6DSO16IS_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800be42:	f06f 0306 	mvn.w	r3, #6
 800be46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be48:	e079      	b.n	800bf3e <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (LSM6DSO16IS_ReadID(&lsm6dso16is_obj_0, &id) != LSM6DSO16IS_OK)
 800be4a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800be4e:	4619      	mov	r1, r3
 800be50:	4843      	ldr	r0, [pc, #268]	@ (800bf60 <LSM6DSO16IS_0_Probe+0x174>)
 800be52:	f7fa fbb3 	bl	80065bc <LSM6DSO16IS_ReadID>
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d003      	beq.n	800be64 <LSM6DSO16IS_0_Probe+0x78>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800be5c:	f06f 0306 	mvn.w	r3, #6
 800be60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be62:	e06c      	b.n	800bf3e <LSM6DSO16IS_0_Probe+0x152>
  }
  else if (id != LSM6DSO16IS_ID)
 800be64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800be68:	2b22      	cmp	r3, #34	@ 0x22
 800be6a:	d003      	beq.n	800be74 <LSM6DSO16IS_0_Probe+0x88>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800be6c:	f06f 0306 	mvn.w	r3, #6
 800be70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be72:	e064      	b.n	800bf3e <LSM6DSO16IS_0_Probe+0x152>
  }
  else
  {
    (void)LSM6DSO16IS_GetCapabilities(&lsm6dso16is_obj_0, &cap);
 800be74:	f107 030c 	add.w	r3, r7, #12
 800be78:	4619      	mov	r1, r3
 800be7a:	4839      	ldr	r0, [pc, #228]	@ (800bf60 <LSM6DSO16IS_0_Probe+0x174>)
 800be7c:	f7fa fbb6 	bl	80065ec <LSM6DSO16IS_GetCapabilities>
    MotionCtx[IKS4A1_LSM6DSO16IS_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800be80:	7b7b      	ldrb	r3, [r7, #13]
 800be82:	461a      	mov	r2, r3
 800be84:	7b3b      	ldrb	r3, [r7, #12]
 800be86:	005b      	lsls	r3, r3, #1
 800be88:	431a      	orrs	r2, r3
 800be8a:	7bbb      	ldrb	r3, [r7, #14]
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	4313      	orrs	r3, r2
 800be90:	4a34      	ldr	r2, [pc, #208]	@ (800bf64 <LSM6DSO16IS_0_Probe+0x178>)
 800be92:	60d3      	str	r3, [r2, #12]

    MotionCompObj[IKS4A1_LSM6DSO16IS_0] = &lsm6dso16is_obj_0;
 800be94:	4b34      	ldr	r3, [pc, #208]	@ (800bf68 <LSM6DSO16IS_0_Probe+0x17c>)
 800be96:	4a32      	ldr	r2, [pc, #200]	@ (800bf60 <LSM6DSO16IS_0_Probe+0x174>)
 800be98:	60da      	str	r2, [r3, #12]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS4A1_LSM6DSO16IS_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO16IS_COMMON_Driver;
 800be9a:	4b34      	ldr	r3, [pc, #208]	@ (800bf6c <LSM6DSO16IS_0_Probe+0x180>)
 800be9c:	4a34      	ldr	r2, [pc, #208]	@ (800bf70 <LSM6DSO16IS_0_Probe+0x184>)
 800be9e:	60da      	str	r2, [r3, #12]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800bea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d11e      	bne.n	800bee4 <LSM6DSO16IS_0_Probe+0xf8>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f003 0301 	and.w	r3, r3, #1
 800beac:	2b00      	cmp	r3, #0
 800beae:	d019      	beq.n	800bee4 <LSM6DSO16IS_0_Probe+0xf8>
 800beb0:	7b7b      	ldrb	r3, [r7, #13]
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d116      	bne.n	800bee4 <LSM6DSO16IS_0_Probe+0xf8>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800beb6:	4b2f      	ldr	r3, [pc, #188]	@ (800bf74 <LSM6DSO16IS_0_Probe+0x188>)
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	4a2f      	ldr	r2, [pc, #188]	@ (800bf78 <LSM6DSO16IS_0_Probe+0x18c>)
 800bebc:	3309      	adds	r3, #9
 800bebe:	492f      	ldr	r1, [pc, #188]	@ (800bf7c <LSM6DSO16IS_0_Probe+0x190>)
 800bec0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                         void *)&LSM6DSO16IS_GYRO_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800bec4:	4b29      	ldr	r3, [pc, #164]	@ (800bf6c <LSM6DSO16IS_0_Probe+0x180>)
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4a27      	ldr	r2, [pc, #156]	@ (800bf68 <LSM6DSO16IS_0_Probe+0x17c>)
 800becc:	68d2      	ldr	r2, [r2, #12]
 800bece:	4610      	mov	r0, r2
 800bed0:	4798      	blx	r3
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d003      	beq.n	800bee0 <LSM6DSO16IS_0_Probe+0xf4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bed8:	f06f 0304 	mvn.w	r3, #4
 800bedc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bede:	e001      	b.n	800bee4 <LSM6DSO16IS_0_Probe+0xf8>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bee0:	2300      	movs	r3, #0
 800bee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800bee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d11e      	bne.n	800bf28 <LSM6DSO16IS_0_Probe+0x13c>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f003 0302 	and.w	r3, r3, #2
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d019      	beq.n	800bf28 <LSM6DSO16IS_0_Probe+0x13c>
 800bef4:	7b3b      	ldrb	r3, [r7, #12]
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d116      	bne.n	800bf28 <LSM6DSO16IS_0_Probe+0x13c>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS4A1_LSM6DSO16IS_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800befa:	4b1e      	ldr	r3, [pc, #120]	@ (800bf74 <LSM6DSO16IS_0_Probe+0x188>)
 800befc:	689b      	ldr	r3, [r3, #8]
 800befe:	4a1e      	ldr	r2, [pc, #120]	@ (800bf78 <LSM6DSO16IS_0_Probe+0x18c>)
 800bf00:	3309      	adds	r3, #9
 800bf02:	491f      	ldr	r1, [pc, #124]	@ (800bf80 <LSM6DSO16IS_0_Probe+0x194>)
 800bf04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                             void *)&LSM6DSO16IS_ACC_Driver;

      if (MotionDrv[IKS4A1_LSM6DSO16IS_0]->Init(MotionCompObj[IKS4A1_LSM6DSO16IS_0]) != LSM6DSO16IS_OK)
 800bf08:	4b18      	ldr	r3, [pc, #96]	@ (800bf6c <LSM6DSO16IS_0_Probe+0x180>)
 800bf0a:	68db      	ldr	r3, [r3, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a16      	ldr	r2, [pc, #88]	@ (800bf68 <LSM6DSO16IS_0_Probe+0x17c>)
 800bf10:	68d2      	ldr	r2, [r2, #12]
 800bf12:	4610      	mov	r0, r2
 800bf14:	4798      	blx	r3
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d003      	beq.n	800bf24 <LSM6DSO16IS_0_Probe+0x138>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf1c:	f06f 0304 	mvn.w	r3, #4
 800bf20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf22:	e001      	b.n	800bf28 <LSM6DSO16IS_0_Probe+0x13c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800bf24:	2300      	movs	r3, #0
 800bf26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800bf28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d107      	bne.n	800bf3e <LSM6DSO16IS_0_Probe+0x152>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f003 0304 	and.w	r3, r3, #4
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d002      	beq.n	800bf3e <LSM6DSO16IS_0_Probe+0x152>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf38:	f06f 0304 	mvn.w	r3, #4
 800bf3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }

  return ret;
 800bf3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3750      	adds	r7, #80	@ 0x50
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	08002495 	.word	0x08002495
 800bf4c:	080024f9 	.word	0x080024f9
 800bf50:	080025ad 	.word	0x080025ad
 800bf54:	08002549 	.word	0x08002549
 800bf58:	080026b9 	.word	0x080026b9
 800bf5c:	0800c3e5 	.word	0x0800c3e5
 800bf60:	200028c8 	.word	0x200028c8
 800bf64:	20002810 	.word	0x20002810
 800bf68:	200027c0 	.word	0x200027c0
 800bf6c:	20002800 	.word	0x20002800
 800bf70:	200000a4 	.word	0x200000a4
 800bf74:	200001f0 	.word	0x200001f0
 800bf78:	200027d0 	.word	0x200027d0
 800bf7c:	200000d8 	.word	0x200000d8
 800bf80:	200000b4 	.word	0x200000b4

0800bf84 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800bf8e:	79fb      	ldrb	r3, [r7, #7]
 800bf90:	4a04      	ldr	r2, [pc, #16]	@ (800bfa4 <BSP_LED_Init+0x20>)
 800bf92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf96:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800bf98:	2300      	movs	r3, #0
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3708      	adds	r7, #8
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop
 800bfa4:	080178a4 	.word	0x080178a4

0800bfa8 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b088      	sub	sp, #32
 800bfac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bfae:	2300      	movs	r3, #0
 800bfb0:	60bb      	str	r3, [r7, #8]
 800bfb2:	4b1c      	ldr	r3, [pc, #112]	@ (800c024 <LED_USER_GPIO_Init+0x7c>)
 800bfb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfb6:	4a1b      	ldr	r2, [pc, #108]	@ (800c024 <LED_USER_GPIO_Init+0x7c>)
 800bfb8:	f043 0302 	orr.w	r3, r3, #2
 800bfbc:	6313      	str	r3, [r2, #48]	@ 0x30
 800bfbe:	4b19      	ldr	r3, [pc, #100]	@ (800c024 <LED_USER_GPIO_Init+0x7c>)
 800bfc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfc2:	f003 0302 	and.w	r3, r3, #2
 800bfc6:	60bb      	str	r3, [r7, #8]
 800bfc8:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfca:	f107 030c 	add.w	r3, r7, #12
 800bfce:	2200      	movs	r2, #0
 800bfd0:	601a      	str	r2, [r3, #0]
 800bfd2:	605a      	str	r2, [r3, #4]
 800bfd4:	609a      	str	r2, [r3, #8]
 800bfd6:	60da      	str	r2, [r3, #12]
 800bfd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bfda:	2300      	movs	r3, #0
 800bfdc:	607b      	str	r3, [r7, #4]
 800bfde:	4b11      	ldr	r3, [pc, #68]	@ (800c024 <LED_USER_GPIO_Init+0x7c>)
 800bfe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfe2:	4a10      	ldr	r2, [pc, #64]	@ (800c024 <LED_USER_GPIO_Init+0x7c>)
 800bfe4:	f043 0302 	orr.w	r3, r3, #2
 800bfe8:	6313      	str	r3, [r2, #48]	@ 0x30
 800bfea:	4b0e      	ldr	r3, [pc, #56]	@ (800c024 <LED_USER_GPIO_Init+0x7c>)
 800bfec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfee:	f003 0302 	and.w	r3, r3, #2
 800bff2:	607b      	str	r3, [r7, #4]
 800bff4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800bff6:	2200      	movs	r2, #0
 800bff8:	2101      	movs	r1, #1
 800bffa:	480b      	ldr	r0, [pc, #44]	@ (800c028 <LED_USER_GPIO_Init+0x80>)
 800bffc:	f000 fdd6 	bl	800cbac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800c000:	2301      	movs	r3, #1
 800c002:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c004:	2301      	movs	r3, #1
 800c006:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c008:	2300      	movs	r3, #0
 800c00a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c00c:	2300      	movs	r3, #0
 800c00e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800c010:	f107 030c 	add.w	r3, r7, #12
 800c014:	4619      	mov	r1, r3
 800c016:	4804      	ldr	r0, [pc, #16]	@ (800c028 <LED_USER_GPIO_Init+0x80>)
 800c018:	f000 fb48 	bl	800c6ac <HAL_GPIO_Init>

}
 800c01c:	bf00      	nop
 800c01e:	3720      	adds	r7, #32
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	40023800 	.word	0x40023800
 800c028:	40020400 	.word	0x40020400

0800c02c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	4603      	mov	r3, r0
 800c034:	460a      	mov	r2, r1
 800c036:	71fb      	strb	r3, [r7, #7]
 800c038:	4613      	mov	r3, r2
 800c03a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800c03c:	2300      	movs	r3, #0
 800c03e:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800c040:	79fb      	ldrb	r3, [r7, #7]
 800c042:	4a1f      	ldr	r2, [pc, #124]	@ (800c0c0 <BSP_PB_Init+0x94>)
 800c044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c048:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800c04a:	79bb      	ldrb	r3, [r7, #6]
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d132      	bne.n	800c0b6 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800c050:	79fb      	ldrb	r3, [r7, #7]
 800c052:	00db      	lsls	r3, r3, #3
 800c054:	4a1b      	ldr	r2, [pc, #108]	@ (800c0c4 <BSP_PB_Init+0x98>)
 800c056:	441a      	add	r2, r3
 800c058:	79fb      	ldrb	r3, [r7, #7]
 800c05a:	491b      	ldr	r1, [pc, #108]	@ (800c0c8 <BSP_PB_Init+0x9c>)
 800c05c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c060:	4619      	mov	r1, r3
 800c062:	4610      	mov	r0, r2
 800c064:	f000 fb0d 	bl	800c682 <HAL_EXTI_GetHandle>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d003      	beq.n	800c076 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c06e:	f06f 0303 	mvn.w	r3, #3
 800c072:	60fb      	str	r3, [r7, #12]
 800c074:	e01f      	b.n	800c0b6 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800c076:	79fb      	ldrb	r3, [r7, #7]
 800c078:	00db      	lsls	r3, r3, #3
 800c07a:	4a12      	ldr	r2, [pc, #72]	@ (800c0c4 <BSP_PB_Init+0x98>)
 800c07c:	1898      	adds	r0, r3, r2
 800c07e:	79fb      	ldrb	r3, [r7, #7]
 800c080:	4a12      	ldr	r2, [pc, #72]	@ (800c0cc <BSP_PB_Init+0xa0>)
 800c082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c086:	461a      	mov	r2, r3
 800c088:	2100      	movs	r1, #0
 800c08a:	f000 fae0 	bl	800c64e <HAL_EXTI_RegisterCallback>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b00      	cmp	r3, #0
 800c092:	d003      	beq.n	800c09c <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c094:	f06f 0303 	mvn.w	r3, #3
 800c098:	60fb      	str	r3, [r7, #12]
 800c09a:	e00c      	b.n	800c0b6 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800c09c:	2028      	movs	r0, #40	@ 0x28
 800c09e:	79fb      	ldrb	r3, [r7, #7]
 800c0a0:	4a0b      	ldr	r2, [pc, #44]	@ (800c0d0 <BSP_PB_Init+0xa4>)
 800c0a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	f000 fa9a 	bl	800c5e2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800c0ae:	2328      	movs	r3, #40	@ 0x28
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f000 fab2 	bl	800c61a <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	080178a8 	.word	0x080178a8
 800c0c4:	20000214 	.word	0x20000214
 800c0c8:	080178ac 	.word	0x080178ac
 800c0cc:	080178b0 	.word	0x080178b0
 800c0d0:	080178b4 	.word	0x080178b4

0800c0d4 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	4603      	mov	r3, r0
 800c0dc:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800c0de:	79fb      	ldrb	r3, [r7, #7]
 800c0e0:	4a09      	ldr	r2, [pc, #36]	@ (800c108 <BSP_PB_GetState+0x34>)
 800c0e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800c0ea:	4611      	mov	r1, r2
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f000 fd45 	bl	800cb7c <HAL_GPIO_ReadPin>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	bf0c      	ite	eq
 800c0f8:	2301      	moveq	r3, #1
 800c0fa:	2300      	movne	r3, #0
 800c0fc:	b2db      	uxtb	r3, r3
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3708      	adds	r7, #8
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	20000210 	.word	0x20000210

0800c10c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800c110:	2000      	movs	r0, #0
 800c112:	f004 fc79 	bl	8010a08 <BSP_PB_Callback>
}
 800c116:	bf00      	nop
 800c118:	bd80      	pop	{r7, pc}
	...

0800c11c <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b088      	sub	sp, #32
 800c120:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c122:	2300      	movs	r3, #0
 800c124:	60bb      	str	r3, [r7, #8]
 800c126:	4b1a      	ldr	r3, [pc, #104]	@ (800c190 <BUTTON_USER_GPIO_Init+0x74>)
 800c128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c12a:	4a19      	ldr	r2, [pc, #100]	@ (800c190 <BUTTON_USER_GPIO_Init+0x74>)
 800c12c:	f043 0304 	orr.w	r3, r3, #4
 800c130:	6313      	str	r3, [r2, #48]	@ 0x30
 800c132:	4b17      	ldr	r3, [pc, #92]	@ (800c190 <BUTTON_USER_GPIO_Init+0x74>)
 800c134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c136:	f003 0304 	and.w	r3, r3, #4
 800c13a:	60bb      	str	r3, [r7, #8]
 800c13c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c13e:	f107 030c 	add.w	r3, r7, #12
 800c142:	2200      	movs	r2, #0
 800c144:	601a      	str	r2, [r3, #0]
 800c146:	605a      	str	r2, [r3, #4]
 800c148:	609a      	str	r2, [r3, #8]
 800c14a:	60da      	str	r2, [r3, #12]
 800c14c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c14e:	2300      	movs	r3, #0
 800c150:	607b      	str	r3, [r7, #4]
 800c152:	4b0f      	ldr	r3, [pc, #60]	@ (800c190 <BUTTON_USER_GPIO_Init+0x74>)
 800c154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c156:	4a0e      	ldr	r2, [pc, #56]	@ (800c190 <BUTTON_USER_GPIO_Init+0x74>)
 800c158:	f043 0304 	orr.w	r3, r3, #4
 800c15c:	6313      	str	r3, [r2, #48]	@ 0x30
 800c15e:	4b0c      	ldr	r3, [pc, #48]	@ (800c190 <BUTTON_USER_GPIO_Init+0x74>)
 800c160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c162:	f003 0304 	and.w	r3, r3, #4
 800c166:	607b      	str	r3, [r7, #4]
 800c168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 800c16a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c16e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800c170:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800c174:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c176:	2300      	movs	r3, #0
 800c178:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 800c17a:	f107 030c 	add.w	r3, r7, #12
 800c17e:	4619      	mov	r1, r3
 800c180:	4804      	ldr	r0, [pc, #16]	@ (800c194 <BUTTON_USER_GPIO_Init+0x78>)
 800c182:	f000 fa93 	bl	800c6ac <HAL_GPIO_Init>

}
 800c186:	bf00      	nop
 800c188:	3720      	adds	r7, #32
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	40023800 	.word	0x40023800
 800c194:	40020800 	.word	0x40020800

0800c198 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	4603      	mov	r3, r0
 800c1a0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800c1a6:	79fb      	ldrb	r3, [r7, #7]
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d903      	bls.n	800c1b4 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c1ac:	f06f 0301 	mvn.w	r3, #1
 800c1b0:	60fb      	str	r3, [r7, #12]
 800c1b2:	e025      	b.n	800c200 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 800c1b4:	79fb      	ldrb	r3, [r7, #7]
 800c1b6:	79fa      	ldrb	r2, [r7, #7]
 800c1b8:	4914      	ldr	r1, [pc, #80]	@ (800c20c <BSP_COM_Init+0x74>)
 800c1ba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c1be:	4814      	ldr	r0, [pc, #80]	@ (800c210 <BSP_COM_Init+0x78>)
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	00db      	lsls	r3, r3, #3
 800c1c4:	4413      	add	r3, r2
 800c1c6:	00db      	lsls	r3, r3, #3
 800c1c8:	4403      	add	r3, r0
 800c1ca:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800c1cc:	79fa      	ldrb	r2, [r7, #7]
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	00db      	lsls	r3, r3, #3
 800c1d2:	4413      	add	r3, r2
 800c1d4:	00db      	lsls	r3, r3, #3
 800c1d6:	4a0e      	ldr	r2, [pc, #56]	@ (800c210 <BSP_COM_Init+0x78>)
 800c1d8:	4413      	add	r3, r2
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f000 f848 	bl	800c270 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 800c1e0:	79fa      	ldrb	r2, [r7, #7]
 800c1e2:	4613      	mov	r3, r2
 800c1e4:	00db      	lsls	r3, r3, #3
 800c1e6:	4413      	add	r3, r2
 800c1e8:	00db      	lsls	r3, r3, #3
 800c1ea:	4a09      	ldr	r2, [pc, #36]	@ (800c210 <BSP_COM_Init+0x78>)
 800c1ec:	4413      	add	r3, r2
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 f810 	bl	800c214 <MX_USART2_UART_Init>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d002      	beq.n	800c200 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c1fa:	f06f 0303 	mvn.w	r3, #3
 800c1fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800c200:	68fb      	ldr	r3, [r7, #12]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	2000021c 	.word	0x2000021c
 800c210:	20002900 	.word	0x20002900

0800c214 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c21c:	2300      	movs	r3, #0
 800c21e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	4a12      	ldr	r2, [pc, #72]	@ (800c26c <MX_USART2_UART_Init+0x58>)
 800c224:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800c22c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2200      	movs	r2, #0
 800c232:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2200      	movs	r2, #0
 800c238:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2200      	movs	r2, #0
 800c23e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	220c      	movs	r2, #12
 800c244:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2200      	movs	r2, #0
 800c24a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f003 fefe 	bl	8010054 <HAL_UART_Init>
 800c258:	4603      	mov	r3, r0
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d001      	beq.n	800c262 <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800c25e:	2301      	movs	r3, #1
 800c260:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c262:	7bfb      	ldrb	r3, [r7, #15]
}
 800c264:	4618      	mov	r0, r3
 800c266:	3710      	adds	r7, #16
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	40004400 	.word	0x40004400

0800c270 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b08a      	sub	sp, #40	@ 0x28
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c278:	2300      	movs	r3, #0
 800c27a:	613b      	str	r3, [r7, #16]
 800c27c:	4b1e      	ldr	r3, [pc, #120]	@ (800c2f8 <USART2_MspInit+0x88>)
 800c27e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c280:	4a1d      	ldr	r2, [pc, #116]	@ (800c2f8 <USART2_MspInit+0x88>)
 800c282:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c286:	6413      	str	r3, [r2, #64]	@ 0x40
 800c288:	4b1b      	ldr	r3, [pc, #108]	@ (800c2f8 <USART2_MspInit+0x88>)
 800c28a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c28c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c290:	613b      	str	r3, [r7, #16]
 800c292:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c294:	2300      	movs	r3, #0
 800c296:	60fb      	str	r3, [r7, #12]
 800c298:	4b17      	ldr	r3, [pc, #92]	@ (800c2f8 <USART2_MspInit+0x88>)
 800c29a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c29c:	4a16      	ldr	r2, [pc, #88]	@ (800c2f8 <USART2_MspInit+0x88>)
 800c29e:	f043 0301 	orr.w	r3, r3, #1
 800c2a2:	6313      	str	r3, [r2, #48]	@ 0x30
 800c2a4:	4b14      	ldr	r3, [pc, #80]	@ (800c2f8 <USART2_MspInit+0x88>)
 800c2a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2a8:	f003 0301 	and.w	r3, r3, #1
 800c2ac:	60fb      	str	r3, [r7, #12]
 800c2ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800c2b0:	2304      	movs	r3, #4
 800c2b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2b4:	2302      	movs	r3, #2
 800c2b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800c2c0:	2307      	movs	r3, #7
 800c2c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 800c2c4:	f107 0314 	add.w	r3, r7, #20
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	480c      	ldr	r0, [pc, #48]	@ (800c2fc <USART2_MspInit+0x8c>)
 800c2cc:	f000 f9ee 	bl	800c6ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800c2d0:	2308      	movs	r3, #8
 800c2d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2d4:	2302      	movs	r3, #2
 800c2d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800c2e0:	2307      	movs	r3, #7
 800c2e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 800c2e4:	f107 0314 	add.w	r3, r7, #20
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	4804      	ldr	r0, [pc, #16]	@ (800c2fc <USART2_MspInit+0x8c>)
 800c2ec:	f000 f9de 	bl	800c6ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 800c2f0:	bf00      	nop
 800c2f2:	3728      	adds	r7, #40	@ 0x28
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	40023800 	.word	0x40023800
 800c2fc:	40020000 	.word	0x40020000

0800c300 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c304:	4b0e      	ldr	r3, [pc, #56]	@ (800c340 <HAL_Init+0x40>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	4a0d      	ldr	r2, [pc, #52]	@ (800c340 <HAL_Init+0x40>)
 800c30a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c30e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800c310:	4b0b      	ldr	r3, [pc, #44]	@ (800c340 <HAL_Init+0x40>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a0a      	ldr	r2, [pc, #40]	@ (800c340 <HAL_Init+0x40>)
 800c316:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c31a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800c31c:	4b08      	ldr	r3, [pc, #32]	@ (800c340 <HAL_Init+0x40>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a07      	ldr	r2, [pc, #28]	@ (800c340 <HAL_Init+0x40>)
 800c322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c326:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c328:	2003      	movs	r0, #3
 800c32a:	f000 f94f 	bl	800c5cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800c32e:	2000      	movs	r0, #0
 800c330:	f000 f808 	bl	800c344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800c334:	f7f5 ffca 	bl	80022cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800c338:	2300      	movs	r3, #0
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	40023c00 	.word	0x40023c00

0800c344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800c34c:	4b12      	ldr	r3, [pc, #72]	@ (800c398 <HAL_InitTick+0x54>)
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	4b12      	ldr	r3, [pc, #72]	@ (800c39c <HAL_InitTick+0x58>)
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	4619      	mov	r1, r3
 800c356:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c35a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c35e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c362:	4618      	mov	r0, r3
 800c364:	f000 f967 	bl	800c636 <HAL_SYSTICK_Config>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d001      	beq.n	800c372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800c36e:	2301      	movs	r3, #1
 800c370:	e00e      	b.n	800c390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2b0f      	cmp	r3, #15
 800c376:	d80a      	bhi.n	800c38e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800c378:	2200      	movs	r2, #0
 800c37a:	6879      	ldr	r1, [r7, #4]
 800c37c:	f04f 30ff 	mov.w	r0, #4294967295
 800c380:	f000 f92f 	bl	800c5e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800c384:	4a06      	ldr	r2, [pc, #24]	@ (800c3a0 <HAL_InitTick+0x5c>)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800c38a:	2300      	movs	r3, #0
 800c38c:	e000      	b.n	800c390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800c38e:	2301      	movs	r3, #1
}
 800c390:	4618      	mov	r0, r3
 800c392:	3708      	adds	r7, #8
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}
 800c398:	20000000 	.word	0x20000000
 800c39c:	20000224 	.word	0x20000224
 800c3a0:	20000220 	.word	0x20000220

0800c3a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800c3a8:	4b06      	ldr	r3, [pc, #24]	@ (800c3c4 <HAL_IncTick+0x20>)
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	4b06      	ldr	r3, [pc, #24]	@ (800c3c8 <HAL_IncTick+0x24>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	4a04      	ldr	r2, [pc, #16]	@ (800c3c8 <HAL_IncTick+0x24>)
 800c3b6:	6013      	str	r3, [r2, #0]
}
 800c3b8:	bf00      	nop
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop
 800c3c4:	20000224 	.word	0x20000224
 800c3c8:	20002948 	.word	0x20002948

0800c3cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	af00      	add	r7, sp, #0
  return uwTick;
 800c3d0:	4b03      	ldr	r3, [pc, #12]	@ (800c3e0 <HAL_GetTick+0x14>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	20002948 	.word	0x20002948

0800c3e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800c3ec:	f7ff ffee 	bl	800c3cc <HAL_GetTick>
 800c3f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3fc:	d005      	beq.n	800c40a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800c3fe:	4b0a      	ldr	r3, [pc, #40]	@ (800c428 <HAL_Delay+0x44>)
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	461a      	mov	r2, r3
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	4413      	add	r3, r2
 800c408:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800c40a:	bf00      	nop
 800c40c:	f7ff ffde 	bl	800c3cc <HAL_GetTick>
 800c410:	4602      	mov	r2, r0
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	1ad3      	subs	r3, r2, r3
 800c416:	68fa      	ldr	r2, [r7, #12]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d8f7      	bhi.n	800c40c <HAL_Delay+0x28>
  {
  }
}
 800c41c:	bf00      	nop
 800c41e:	bf00      	nop
 800c420:	3710      	adds	r7, #16
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	20000224 	.word	0x20000224

0800c42c <__NVIC_SetPriorityGrouping>:
{
 800c42c:	b480      	push	{r7}
 800c42e:	b085      	sub	sp, #20
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f003 0307 	and.w	r3, r3, #7
 800c43a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c43c:	4b0c      	ldr	r3, [pc, #48]	@ (800c470 <__NVIC_SetPriorityGrouping+0x44>)
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c442:	68ba      	ldr	r2, [r7, #8]
 800c444:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c448:	4013      	ands	r3, r2
 800c44a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c454:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c45c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c45e:	4a04      	ldr	r2, [pc, #16]	@ (800c470 <__NVIC_SetPriorityGrouping+0x44>)
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	60d3      	str	r3, [r2, #12]
}
 800c464:	bf00      	nop
 800c466:	3714      	adds	r7, #20
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr
 800c470:	e000ed00 	.word	0xe000ed00

0800c474 <__NVIC_GetPriorityGrouping>:
{
 800c474:	b480      	push	{r7}
 800c476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c478:	4b04      	ldr	r3, [pc, #16]	@ (800c48c <__NVIC_GetPriorityGrouping+0x18>)
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	0a1b      	lsrs	r3, r3, #8
 800c47e:	f003 0307 	and.w	r3, r3, #7
}
 800c482:	4618      	mov	r0, r3
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr
 800c48c:	e000ed00 	.word	0xe000ed00

0800c490 <__NVIC_EnableIRQ>:
{
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
 800c496:	4603      	mov	r3, r0
 800c498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c49a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	db0b      	blt.n	800c4ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c4a2:	79fb      	ldrb	r3, [r7, #7]
 800c4a4:	f003 021f 	and.w	r2, r3, #31
 800c4a8:	4907      	ldr	r1, [pc, #28]	@ (800c4c8 <__NVIC_EnableIRQ+0x38>)
 800c4aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4ae:	095b      	lsrs	r3, r3, #5
 800c4b0:	2001      	movs	r0, #1
 800c4b2:	fa00 f202 	lsl.w	r2, r0, r2
 800c4b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c4ba:	bf00      	nop
 800c4bc:	370c      	adds	r7, #12
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr
 800c4c6:	bf00      	nop
 800c4c8:	e000e100 	.word	0xe000e100

0800c4cc <__NVIC_SetPriority>:
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	6039      	str	r1, [r7, #0]
 800c4d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c4d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	db0a      	blt.n	800c4f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	b2da      	uxtb	r2, r3
 800c4e4:	490c      	ldr	r1, [pc, #48]	@ (800c518 <__NVIC_SetPriority+0x4c>)
 800c4e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4ea:	0112      	lsls	r2, r2, #4
 800c4ec:	b2d2      	uxtb	r2, r2
 800c4ee:	440b      	add	r3, r1
 800c4f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c4f4:	e00a      	b.n	800c50c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	b2da      	uxtb	r2, r3
 800c4fa:	4908      	ldr	r1, [pc, #32]	@ (800c51c <__NVIC_SetPriority+0x50>)
 800c4fc:	79fb      	ldrb	r3, [r7, #7]
 800c4fe:	f003 030f 	and.w	r3, r3, #15
 800c502:	3b04      	subs	r3, #4
 800c504:	0112      	lsls	r2, r2, #4
 800c506:	b2d2      	uxtb	r2, r2
 800c508:	440b      	add	r3, r1
 800c50a:	761a      	strb	r2, [r3, #24]
}
 800c50c:	bf00      	nop
 800c50e:	370c      	adds	r7, #12
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr
 800c518:	e000e100 	.word	0xe000e100
 800c51c:	e000ed00 	.word	0xe000ed00

0800c520 <NVIC_EncodePriority>:
{
 800c520:	b480      	push	{r7}
 800c522:	b089      	sub	sp, #36	@ 0x24
 800c524:	af00      	add	r7, sp, #0
 800c526:	60f8      	str	r0, [r7, #12]
 800c528:	60b9      	str	r1, [r7, #8]
 800c52a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f003 0307 	and.w	r3, r3, #7
 800c532:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c534:	69fb      	ldr	r3, [r7, #28]
 800c536:	f1c3 0307 	rsb	r3, r3, #7
 800c53a:	2b04      	cmp	r3, #4
 800c53c:	bf28      	it	cs
 800c53e:	2304      	movcs	r3, #4
 800c540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	3304      	adds	r3, #4
 800c546:	2b06      	cmp	r3, #6
 800c548:	d902      	bls.n	800c550 <NVIC_EncodePriority+0x30>
 800c54a:	69fb      	ldr	r3, [r7, #28]
 800c54c:	3b03      	subs	r3, #3
 800c54e:	e000      	b.n	800c552 <NVIC_EncodePriority+0x32>
 800c550:	2300      	movs	r3, #0
 800c552:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c554:	f04f 32ff 	mov.w	r2, #4294967295
 800c558:	69bb      	ldr	r3, [r7, #24]
 800c55a:	fa02 f303 	lsl.w	r3, r2, r3
 800c55e:	43da      	mvns	r2, r3
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	401a      	ands	r2, r3
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c568:	f04f 31ff 	mov.w	r1, #4294967295
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	fa01 f303 	lsl.w	r3, r1, r3
 800c572:	43d9      	mvns	r1, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c578:	4313      	orrs	r3, r2
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3724      	adds	r7, #36	@ 0x24
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
	...

0800c588 <SysTick_Config>:
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	3b01      	subs	r3, #1
 800c594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c598:	d301      	bcc.n	800c59e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800c59a:	2301      	movs	r3, #1
 800c59c:	e00f      	b.n	800c5be <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c59e:	4a0a      	ldr	r2, [pc, #40]	@ (800c5c8 <SysTick_Config+0x40>)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	3b01      	subs	r3, #1
 800c5a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c5a6:	210f      	movs	r1, #15
 800c5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5ac:	f7ff ff8e 	bl	800c4cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c5b0:	4b05      	ldr	r3, [pc, #20]	@ (800c5c8 <SysTick_Config+0x40>)
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c5b6:	4b04      	ldr	r3, [pc, #16]	@ (800c5c8 <SysTick_Config+0x40>)
 800c5b8:	2207      	movs	r2, #7
 800c5ba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3708      	adds	r7, #8
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	e000e010 	.word	0xe000e010

0800c5cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b082      	sub	sp, #8
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f7ff ff29 	bl	800c42c <__NVIC_SetPriorityGrouping>
}
 800c5da:	bf00      	nop
 800c5dc:	3708      	adds	r7, #8
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}

0800c5e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b086      	sub	sp, #24
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	60b9      	str	r1, [r7, #8]
 800c5ec:	607a      	str	r2, [r7, #4]
 800c5ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c5f4:	f7ff ff3e 	bl	800c474 <__NVIC_GetPriorityGrouping>
 800c5f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	68b9      	ldr	r1, [r7, #8]
 800c5fe:	6978      	ldr	r0, [r7, #20]
 800c600:	f7ff ff8e 	bl	800c520 <NVIC_EncodePriority>
 800c604:	4602      	mov	r2, r0
 800c606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c60a:	4611      	mov	r1, r2
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7ff ff5d 	bl	800c4cc <__NVIC_SetPriority>
}
 800c612:	bf00      	nop
 800c614:	3718      	adds	r7, #24
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b082      	sub	sp, #8
 800c61e:	af00      	add	r7, sp, #0
 800c620:	4603      	mov	r3, r0
 800c622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c628:	4618      	mov	r0, r3
 800c62a:	f7ff ff31 	bl	800c490 <__NVIC_EnableIRQ>
}
 800c62e:	bf00      	nop
 800c630:	3708      	adds	r7, #8
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b082      	sub	sp, #8
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f7ff ffa2 	bl	800c588 <SysTick_Config>
 800c644:	4603      	mov	r3, r0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3708      	adds	r7, #8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800c64e:	b480      	push	{r7}
 800c650:	b087      	sub	sp, #28
 800c652:	af00      	add	r7, sp, #0
 800c654:	60f8      	str	r0, [r7, #12]
 800c656:	460b      	mov	r3, r1
 800c658:	607a      	str	r2, [r7, #4]
 800c65a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c65c:	2300      	movs	r3, #0
 800c65e:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800c660:	7afb      	ldrb	r3, [r7, #11]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d103      	bne.n	800c66e <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	605a      	str	r2, [r3, #4]
      break;
 800c66c:	e002      	b.n	800c674 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800c66e:	2301      	movs	r3, #1
 800c670:	75fb      	strb	r3, [r7, #23]
      break;
 800c672:	bf00      	nop
  }

  return status;
 800c674:	7dfb      	ldrb	r3, [r7, #23]
}
 800c676:	4618      	mov	r0, r3
 800c678:	371c      	adds	r7, #28
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr

0800c682 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800c682:	b480      	push	{r7}
 800c684:	b083      	sub	sp, #12
 800c686:	af00      	add	r7, sp, #0
 800c688:	6078      	str	r0, [r7, #4]
 800c68a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d101      	bne.n	800c696 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800c692:	2301      	movs	r3, #1
 800c694:	e003      	b.n	800c69e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	683a      	ldr	r2, [r7, #0]
 800c69a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c69c:	2300      	movs	r3, #0
  }
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	370c      	adds	r7, #12
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr
	...

0800c6ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b089      	sub	sp, #36	@ 0x24
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	61fb      	str	r3, [r7, #28]
 800c6c6:	e159      	b.n	800c97c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c6d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	697a      	ldr	r2, [r7, #20]
 800c6d8:	4013      	ands	r3, r2
 800c6da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c6dc:	693a      	ldr	r2, [r7, #16]
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	f040 8148 	bne.w	800c976 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	f003 0303 	and.w	r3, r3, #3
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d005      	beq.n	800c6fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c6fa:	2b02      	cmp	r3, #2
 800c6fc:	d130      	bne.n	800c760 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	689b      	ldr	r3, [r3, #8]
 800c702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	005b      	lsls	r3, r3, #1
 800c708:	2203      	movs	r2, #3
 800c70a:	fa02 f303 	lsl.w	r3, r2, r3
 800c70e:	43db      	mvns	r3, r3
 800c710:	69ba      	ldr	r2, [r7, #24]
 800c712:	4013      	ands	r3, r2
 800c714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	68da      	ldr	r2, [r3, #12]
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	005b      	lsls	r3, r3, #1
 800c71e:	fa02 f303 	lsl.w	r3, r2, r3
 800c722:	69ba      	ldr	r2, [r7, #24]
 800c724:	4313      	orrs	r3, r2
 800c726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	69ba      	ldr	r2, [r7, #24]
 800c72c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c734:	2201      	movs	r2, #1
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	fa02 f303 	lsl.w	r3, r2, r3
 800c73c:	43db      	mvns	r3, r3
 800c73e:	69ba      	ldr	r2, [r7, #24]
 800c740:	4013      	ands	r3, r2
 800c742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	091b      	lsrs	r3, r3, #4
 800c74a:	f003 0201 	and.w	r2, r3, #1
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	fa02 f303 	lsl.w	r3, r2, r3
 800c754:	69ba      	ldr	r2, [r7, #24]
 800c756:	4313      	orrs	r3, r2
 800c758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	69ba      	ldr	r2, [r7, #24]
 800c75e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	f003 0303 	and.w	r3, r3, #3
 800c768:	2b03      	cmp	r3, #3
 800c76a:	d017      	beq.n	800c79c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c772:	69fb      	ldr	r3, [r7, #28]
 800c774:	005b      	lsls	r3, r3, #1
 800c776:	2203      	movs	r2, #3
 800c778:	fa02 f303 	lsl.w	r3, r2, r3
 800c77c:	43db      	mvns	r3, r3
 800c77e:	69ba      	ldr	r2, [r7, #24]
 800c780:	4013      	ands	r3, r2
 800c782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	689a      	ldr	r2, [r3, #8]
 800c788:	69fb      	ldr	r3, [r7, #28]
 800c78a:	005b      	lsls	r3, r3, #1
 800c78c:	fa02 f303 	lsl.w	r3, r2, r3
 800c790:	69ba      	ldr	r2, [r7, #24]
 800c792:	4313      	orrs	r3, r2
 800c794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	69ba      	ldr	r2, [r7, #24]
 800c79a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	f003 0303 	and.w	r3, r3, #3
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d123      	bne.n	800c7f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	08da      	lsrs	r2, r3, #3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	3208      	adds	r2, #8
 800c7b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	f003 0307 	and.w	r3, r3, #7
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	220f      	movs	r2, #15
 800c7c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c7c4:	43db      	mvns	r3, r3
 800c7c6:	69ba      	ldr	r2, [r7, #24]
 800c7c8:	4013      	ands	r3, r2
 800c7ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	691a      	ldr	r2, [r3, #16]
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	f003 0307 	and.w	r3, r3, #7
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c7dc:	69ba      	ldr	r2, [r7, #24]
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	08da      	lsrs	r2, r3, #3
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	3208      	adds	r2, #8
 800c7ea:	69b9      	ldr	r1, [r7, #24]
 800c7ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	005b      	lsls	r3, r3, #1
 800c7fa:	2203      	movs	r2, #3
 800c7fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c800:	43db      	mvns	r3, r3
 800c802:	69ba      	ldr	r2, [r7, #24]
 800c804:	4013      	ands	r3, r2
 800c806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	f003 0203 	and.w	r2, r3, #3
 800c810:	69fb      	ldr	r3, [r7, #28]
 800c812:	005b      	lsls	r3, r3, #1
 800c814:	fa02 f303 	lsl.w	r3, r2, r3
 800c818:	69ba      	ldr	r2, [r7, #24]
 800c81a:	4313      	orrs	r3, r2
 800c81c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	69ba      	ldr	r2, [r7, #24]
 800c822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	f000 80a2 	beq.w	800c976 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c832:	2300      	movs	r3, #0
 800c834:	60fb      	str	r3, [r7, #12]
 800c836:	4b57      	ldr	r3, [pc, #348]	@ (800c994 <HAL_GPIO_Init+0x2e8>)
 800c838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c83a:	4a56      	ldr	r2, [pc, #344]	@ (800c994 <HAL_GPIO_Init+0x2e8>)
 800c83c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c840:	6453      	str	r3, [r2, #68]	@ 0x44
 800c842:	4b54      	ldr	r3, [pc, #336]	@ (800c994 <HAL_GPIO_Init+0x2e8>)
 800c844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c84a:	60fb      	str	r3, [r7, #12]
 800c84c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c84e:	4a52      	ldr	r2, [pc, #328]	@ (800c998 <HAL_GPIO_Init+0x2ec>)
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	089b      	lsrs	r3, r3, #2
 800c854:	3302      	adds	r3, #2
 800c856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c85a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	f003 0303 	and.w	r3, r3, #3
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	220f      	movs	r2, #15
 800c866:	fa02 f303 	lsl.w	r3, r2, r3
 800c86a:	43db      	mvns	r3, r3
 800c86c:	69ba      	ldr	r2, [r7, #24]
 800c86e:	4013      	ands	r3, r2
 800c870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4a49      	ldr	r2, [pc, #292]	@ (800c99c <HAL_GPIO_Init+0x2f0>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d019      	beq.n	800c8ae <HAL_GPIO_Init+0x202>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	4a48      	ldr	r2, [pc, #288]	@ (800c9a0 <HAL_GPIO_Init+0x2f4>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d013      	beq.n	800c8aa <HAL_GPIO_Init+0x1fe>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	4a47      	ldr	r2, [pc, #284]	@ (800c9a4 <HAL_GPIO_Init+0x2f8>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d00d      	beq.n	800c8a6 <HAL_GPIO_Init+0x1fa>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	4a46      	ldr	r2, [pc, #280]	@ (800c9a8 <HAL_GPIO_Init+0x2fc>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d007      	beq.n	800c8a2 <HAL_GPIO_Init+0x1f6>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4a45      	ldr	r2, [pc, #276]	@ (800c9ac <HAL_GPIO_Init+0x300>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d101      	bne.n	800c89e <HAL_GPIO_Init+0x1f2>
 800c89a:	2304      	movs	r3, #4
 800c89c:	e008      	b.n	800c8b0 <HAL_GPIO_Init+0x204>
 800c89e:	2307      	movs	r3, #7
 800c8a0:	e006      	b.n	800c8b0 <HAL_GPIO_Init+0x204>
 800c8a2:	2303      	movs	r3, #3
 800c8a4:	e004      	b.n	800c8b0 <HAL_GPIO_Init+0x204>
 800c8a6:	2302      	movs	r3, #2
 800c8a8:	e002      	b.n	800c8b0 <HAL_GPIO_Init+0x204>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e000      	b.n	800c8b0 <HAL_GPIO_Init+0x204>
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	69fa      	ldr	r2, [r7, #28]
 800c8b2:	f002 0203 	and.w	r2, r2, #3
 800c8b6:	0092      	lsls	r2, r2, #2
 800c8b8:	4093      	lsls	r3, r2
 800c8ba:	69ba      	ldr	r2, [r7, #24]
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c8c0:	4935      	ldr	r1, [pc, #212]	@ (800c998 <HAL_GPIO_Init+0x2ec>)
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	089b      	lsrs	r3, r3, #2
 800c8c6:	3302      	adds	r3, #2
 800c8c8:	69ba      	ldr	r2, [r7, #24]
 800c8ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c8ce:	4b38      	ldr	r3, [pc, #224]	@ (800c9b0 <HAL_GPIO_Init+0x304>)
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	43db      	mvns	r3, r3
 800c8d8:	69ba      	ldr	r2, [r7, #24]
 800c8da:	4013      	ands	r3, r2
 800c8dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d003      	beq.n	800c8f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800c8ea:	69ba      	ldr	r2, [r7, #24]
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c8f2:	4a2f      	ldr	r2, [pc, #188]	@ (800c9b0 <HAL_GPIO_Init+0x304>)
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c8f8:	4b2d      	ldr	r3, [pc, #180]	@ (800c9b0 <HAL_GPIO_Init+0x304>)
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	43db      	mvns	r3, r3
 800c902:	69ba      	ldr	r2, [r7, #24]
 800c904:	4013      	ands	r3, r2
 800c906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c910:	2b00      	cmp	r3, #0
 800c912:	d003      	beq.n	800c91c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800c914:	69ba      	ldr	r2, [r7, #24]
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	4313      	orrs	r3, r2
 800c91a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c91c:	4a24      	ldr	r2, [pc, #144]	@ (800c9b0 <HAL_GPIO_Init+0x304>)
 800c91e:	69bb      	ldr	r3, [r7, #24]
 800c920:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800c922:	4b23      	ldr	r3, [pc, #140]	@ (800c9b0 <HAL_GPIO_Init+0x304>)
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	43db      	mvns	r3, r3
 800c92c:	69ba      	ldr	r2, [r7, #24]
 800c92e:	4013      	ands	r3, r2
 800c930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d003      	beq.n	800c946 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800c93e:	69ba      	ldr	r2, [r7, #24]
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	4313      	orrs	r3, r2
 800c944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c946:	4a1a      	ldr	r2, [pc, #104]	@ (800c9b0 <HAL_GPIO_Init+0x304>)
 800c948:	69bb      	ldr	r3, [r7, #24]
 800c94a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c94c:	4b18      	ldr	r3, [pc, #96]	@ (800c9b0 <HAL_GPIO_Init+0x304>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	43db      	mvns	r3, r3
 800c956:	69ba      	ldr	r2, [r7, #24]
 800c958:	4013      	ands	r3, r2
 800c95a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c964:	2b00      	cmp	r3, #0
 800c966:	d003      	beq.n	800c970 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800c968:	69ba      	ldr	r2, [r7, #24]
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	4313      	orrs	r3, r2
 800c96e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c970:	4a0f      	ldr	r2, [pc, #60]	@ (800c9b0 <HAL_GPIO_Init+0x304>)
 800c972:	69bb      	ldr	r3, [r7, #24]
 800c974:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c976:	69fb      	ldr	r3, [r7, #28]
 800c978:	3301      	adds	r3, #1
 800c97a:	61fb      	str	r3, [r7, #28]
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	2b0f      	cmp	r3, #15
 800c980:	f67f aea2 	bls.w	800c6c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c984:	bf00      	nop
 800c986:	bf00      	nop
 800c988:	3724      	adds	r7, #36	@ 0x24
 800c98a:	46bd      	mov	sp, r7
 800c98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c990:	4770      	bx	lr
 800c992:	bf00      	nop
 800c994:	40023800 	.word	0x40023800
 800c998:	40013800 	.word	0x40013800
 800c99c:	40020000 	.word	0x40020000
 800c9a0:	40020400 	.word	0x40020400
 800c9a4:	40020800 	.word	0x40020800
 800c9a8:	40020c00 	.word	0x40020c00
 800c9ac:	40021000 	.word	0x40021000
 800c9b0:	40013c00 	.word	0x40013c00

0800c9b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b087      	sub	sp, #28
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	617b      	str	r3, [r7, #20]
 800c9ce:	e0bb      	b.n	800cb48 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	fa02 f303 	lsl.w	r3, r2, r3
 800c9d8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800c9da:	683a      	ldr	r2, [r7, #0]
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	4013      	ands	r3, r2
 800c9e0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800c9e2:	68fa      	ldr	r2, [r7, #12]
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	f040 80ab 	bne.w	800cb42 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800c9ec:	4a5c      	ldr	r2, [pc, #368]	@ (800cb60 <HAL_GPIO_DeInit+0x1ac>)
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	089b      	lsrs	r3, r3, #2
 800c9f2:	3302      	adds	r3, #2
 800c9f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9f8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	f003 0303 	and.w	r3, r3, #3
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	220f      	movs	r2, #15
 800ca04:	fa02 f303 	lsl.w	r3, r2, r3
 800ca08:	68ba      	ldr	r2, [r7, #8]
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4a54      	ldr	r2, [pc, #336]	@ (800cb64 <HAL_GPIO_DeInit+0x1b0>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d019      	beq.n	800ca4a <HAL_GPIO_DeInit+0x96>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	4a53      	ldr	r2, [pc, #332]	@ (800cb68 <HAL_GPIO_DeInit+0x1b4>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d013      	beq.n	800ca46 <HAL_GPIO_DeInit+0x92>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	4a52      	ldr	r2, [pc, #328]	@ (800cb6c <HAL_GPIO_DeInit+0x1b8>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d00d      	beq.n	800ca42 <HAL_GPIO_DeInit+0x8e>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	4a51      	ldr	r2, [pc, #324]	@ (800cb70 <HAL_GPIO_DeInit+0x1bc>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d007      	beq.n	800ca3e <HAL_GPIO_DeInit+0x8a>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	4a50      	ldr	r2, [pc, #320]	@ (800cb74 <HAL_GPIO_DeInit+0x1c0>)
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d101      	bne.n	800ca3a <HAL_GPIO_DeInit+0x86>
 800ca36:	2304      	movs	r3, #4
 800ca38:	e008      	b.n	800ca4c <HAL_GPIO_DeInit+0x98>
 800ca3a:	2307      	movs	r3, #7
 800ca3c:	e006      	b.n	800ca4c <HAL_GPIO_DeInit+0x98>
 800ca3e:	2303      	movs	r3, #3
 800ca40:	e004      	b.n	800ca4c <HAL_GPIO_DeInit+0x98>
 800ca42:	2302      	movs	r3, #2
 800ca44:	e002      	b.n	800ca4c <HAL_GPIO_DeInit+0x98>
 800ca46:	2301      	movs	r3, #1
 800ca48:	e000      	b.n	800ca4c <HAL_GPIO_DeInit+0x98>
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	697a      	ldr	r2, [r7, #20]
 800ca4e:	f002 0203 	and.w	r2, r2, #3
 800ca52:	0092      	lsls	r2, r2, #2
 800ca54:	4093      	lsls	r3, r2
 800ca56:	68ba      	ldr	r2, [r7, #8]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d132      	bne.n	800cac2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800ca5c:	4b46      	ldr	r3, [pc, #280]	@ (800cb78 <HAL_GPIO_DeInit+0x1c4>)
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	43db      	mvns	r3, r3
 800ca64:	4944      	ldr	r1, [pc, #272]	@ (800cb78 <HAL_GPIO_DeInit+0x1c4>)
 800ca66:	4013      	ands	r3, r2
 800ca68:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800ca6a:	4b43      	ldr	r3, [pc, #268]	@ (800cb78 <HAL_GPIO_DeInit+0x1c4>)
 800ca6c:	685a      	ldr	r2, [r3, #4]
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	43db      	mvns	r3, r3
 800ca72:	4941      	ldr	r1, [pc, #260]	@ (800cb78 <HAL_GPIO_DeInit+0x1c4>)
 800ca74:	4013      	ands	r3, r2
 800ca76:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800ca78:	4b3f      	ldr	r3, [pc, #252]	@ (800cb78 <HAL_GPIO_DeInit+0x1c4>)
 800ca7a:	68da      	ldr	r2, [r3, #12]
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	43db      	mvns	r3, r3
 800ca80:	493d      	ldr	r1, [pc, #244]	@ (800cb78 <HAL_GPIO_DeInit+0x1c4>)
 800ca82:	4013      	ands	r3, r2
 800ca84:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800ca86:	4b3c      	ldr	r3, [pc, #240]	@ (800cb78 <HAL_GPIO_DeInit+0x1c4>)
 800ca88:	689a      	ldr	r2, [r3, #8]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	43db      	mvns	r3, r3
 800ca8e:	493a      	ldr	r1, [pc, #232]	@ (800cb78 <HAL_GPIO_DeInit+0x1c4>)
 800ca90:	4013      	ands	r3, r2
 800ca92:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	f003 0303 	and.w	r3, r3, #3
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	220f      	movs	r2, #15
 800ca9e:	fa02 f303 	lsl.w	r3, r2, r3
 800caa2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800caa4:	4a2e      	ldr	r2, [pc, #184]	@ (800cb60 <HAL_GPIO_DeInit+0x1ac>)
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	089b      	lsrs	r3, r3, #2
 800caaa:	3302      	adds	r3, #2
 800caac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	43da      	mvns	r2, r3
 800cab4:	482a      	ldr	r0, [pc, #168]	@ (800cb60 <HAL_GPIO_DeInit+0x1ac>)
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	089b      	lsrs	r3, r3, #2
 800caba:	400a      	ands	r2, r1
 800cabc:	3302      	adds	r3, #2
 800cabe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	005b      	lsls	r3, r3, #1
 800caca:	2103      	movs	r1, #3
 800cacc:	fa01 f303 	lsl.w	r3, r1, r3
 800cad0:	43db      	mvns	r3, r3
 800cad2:	401a      	ands	r2, r3
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	08da      	lsrs	r2, r3, #3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	3208      	adds	r2, #8
 800cae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	f003 0307 	and.w	r3, r3, #7
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	220f      	movs	r2, #15
 800caee:	fa02 f303 	lsl.w	r3, r2, r3
 800caf2:	43db      	mvns	r3, r3
 800caf4:	697a      	ldr	r2, [r7, #20]
 800caf6:	08d2      	lsrs	r2, r2, #3
 800caf8:	4019      	ands	r1, r3
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	3208      	adds	r2, #8
 800cafe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	68da      	ldr	r2, [r3, #12]
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	005b      	lsls	r3, r3, #1
 800cb0a:	2103      	movs	r1, #3
 800cb0c:	fa01 f303 	lsl.w	r3, r1, r3
 800cb10:	43db      	mvns	r3, r3
 800cb12:	401a      	ands	r2, r3
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	685a      	ldr	r2, [r3, #4]
 800cb1c:	2101      	movs	r1, #1
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	fa01 f303 	lsl.w	r3, r1, r3
 800cb24:	43db      	mvns	r3, r3
 800cb26:	401a      	ands	r2, r3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	689a      	ldr	r2, [r3, #8]
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	005b      	lsls	r3, r3, #1
 800cb34:	2103      	movs	r1, #3
 800cb36:	fa01 f303 	lsl.w	r3, r1, r3
 800cb3a:	43db      	mvns	r3, r3
 800cb3c:	401a      	ands	r2, r3
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	3301      	adds	r3, #1
 800cb46:	617b      	str	r3, [r7, #20]
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	2b0f      	cmp	r3, #15
 800cb4c:	f67f af40 	bls.w	800c9d0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800cb50:	bf00      	nop
 800cb52:	bf00      	nop
 800cb54:	371c      	adds	r7, #28
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop
 800cb60:	40013800 	.word	0x40013800
 800cb64:	40020000 	.word	0x40020000
 800cb68:	40020400 	.word	0x40020400
 800cb6c:	40020800 	.word	0x40020800
 800cb70:	40020c00 	.word	0x40020c00
 800cb74:	40021000 	.word	0x40021000
 800cb78:	40013c00 	.word	0x40013c00

0800cb7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b085      	sub	sp, #20
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	460b      	mov	r3, r1
 800cb86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	691a      	ldr	r2, [r3, #16]
 800cb8c:	887b      	ldrh	r3, [r7, #2]
 800cb8e:	4013      	ands	r3, r2
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d002      	beq.n	800cb9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800cb94:	2301      	movs	r3, #1
 800cb96:	73fb      	strb	r3, [r7, #15]
 800cb98:	e001      	b.n	800cb9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cb9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3714      	adds	r7, #20
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr

0800cbac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b083      	sub	sp, #12
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	807b      	strh	r3, [r7, #2]
 800cbb8:	4613      	mov	r3, r2
 800cbba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cbbc:	787b      	ldrb	r3, [r7, #1]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d003      	beq.n	800cbca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cbc2:	887a      	ldrh	r2, [r7, #2]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800cbc8:	e003      	b.n	800cbd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800cbca:	887b      	ldrh	r3, [r7, #2]
 800cbcc:	041a      	lsls	r2, r3, #16
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	619a      	str	r2, [r3, #24]
}
 800cbd2:	bf00      	nop
 800cbd4:	370c      	adds	r7, #12
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbdc:	4770      	bx	lr

0800cbde <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cbde:	b480      	push	{r7}
 800cbe0:	b085      	sub	sp, #20
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	695b      	ldr	r3, [r3, #20]
 800cbee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800cbf0:	887a      	ldrh	r2, [r7, #2]
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	4013      	ands	r3, r2
 800cbf6:	041a      	lsls	r2, r3, #16
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	43d9      	mvns	r1, r3
 800cbfc:	887b      	ldrh	r3, [r7, #2]
 800cbfe:	400b      	ands	r3, r1
 800cc00:	431a      	orrs	r2, r3
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	619a      	str	r2, [r3, #24]
}
 800cc06:	bf00      	nop
 800cc08:	3714      	adds	r7, #20
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr
	...

0800cc14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d101      	bne.n	800cc26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cc22:	2301      	movs	r3, #1
 800cc24:	e12b      	b.n	800ce7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cc2c:	b2db      	uxtb	r3, r3
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d106      	bne.n	800cc40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2200      	movs	r2, #0
 800cc36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 f95d 	bl	800cefa <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2224      	movs	r2, #36	@ 0x24
 800cc44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f022 0201 	bic.w	r2, r2, #1
 800cc56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	681a      	ldr	r2, [r3, #0]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800cc66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800cc76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800cc78:	f002 f93e 	bl	800eef8 <HAL_RCC_GetPCLK1Freq>
 800cc7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	4a81      	ldr	r2, [pc, #516]	@ (800ce88 <HAL_I2C_Init+0x274>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d807      	bhi.n	800cc98 <HAL_I2C_Init+0x84>
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	4a80      	ldr	r2, [pc, #512]	@ (800ce8c <HAL_I2C_Init+0x278>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	bf94      	ite	ls
 800cc90:	2301      	movls	r3, #1
 800cc92:	2300      	movhi	r3, #0
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	e006      	b.n	800cca6 <HAL_I2C_Init+0x92>
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	4a7d      	ldr	r2, [pc, #500]	@ (800ce90 <HAL_I2C_Init+0x27c>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	bf94      	ite	ls
 800cca0:	2301      	movls	r3, #1
 800cca2:	2300      	movhi	r3, #0
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d001      	beq.n	800ccae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e0e7      	b.n	800ce7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	4a78      	ldr	r2, [pc, #480]	@ (800ce94 <HAL_I2C_Init+0x280>)
 800ccb2:	fba2 2303 	umull	r2, r3, r2, r3
 800ccb6:	0c9b      	lsrs	r3, r3, #18
 800ccb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	68ba      	ldr	r2, [r7, #8]
 800ccca:	430a      	orrs	r2, r1
 800cccc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	6a1b      	ldr	r3, [r3, #32]
 800ccd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	4a6a      	ldr	r2, [pc, #424]	@ (800ce88 <HAL_I2C_Init+0x274>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d802      	bhi.n	800cce8 <HAL_I2C_Init+0xd4>
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	3301      	adds	r3, #1
 800cce6:	e009      	b.n	800ccfc <HAL_I2C_Init+0xe8>
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800ccee:	fb02 f303 	mul.w	r3, r2, r3
 800ccf2:	4a69      	ldr	r2, [pc, #420]	@ (800ce98 <HAL_I2C_Init+0x284>)
 800ccf4:	fba2 2303 	umull	r2, r3, r2, r3
 800ccf8:	099b      	lsrs	r3, r3, #6
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	6812      	ldr	r2, [r2, #0]
 800cd00:	430b      	orrs	r3, r1
 800cd02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	69db      	ldr	r3, [r3, #28]
 800cd0a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800cd0e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	685b      	ldr	r3, [r3, #4]
 800cd16:	495c      	ldr	r1, [pc, #368]	@ (800ce88 <HAL_I2C_Init+0x274>)
 800cd18:	428b      	cmp	r3, r1
 800cd1a:	d819      	bhi.n	800cd50 <HAL_I2C_Init+0x13c>
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	1e59      	subs	r1, r3, #1
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	005b      	lsls	r3, r3, #1
 800cd26:	fbb1 f3f3 	udiv	r3, r1, r3
 800cd2a:	1c59      	adds	r1, r3, #1
 800cd2c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800cd30:	400b      	ands	r3, r1
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d00a      	beq.n	800cd4c <HAL_I2C_Init+0x138>
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	1e59      	subs	r1, r3, #1
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	005b      	lsls	r3, r3, #1
 800cd40:	fbb1 f3f3 	udiv	r3, r1, r3
 800cd44:	3301      	adds	r3, #1
 800cd46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd4a:	e051      	b.n	800cdf0 <HAL_I2C_Init+0x1dc>
 800cd4c:	2304      	movs	r3, #4
 800cd4e:	e04f      	b.n	800cdf0 <HAL_I2C_Init+0x1dc>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	689b      	ldr	r3, [r3, #8]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d111      	bne.n	800cd7c <HAL_I2C_Init+0x168>
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	1e58      	subs	r0, r3, #1
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6859      	ldr	r1, [r3, #4]
 800cd60:	460b      	mov	r3, r1
 800cd62:	005b      	lsls	r3, r3, #1
 800cd64:	440b      	add	r3, r1
 800cd66:	fbb0 f3f3 	udiv	r3, r0, r3
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	bf0c      	ite	eq
 800cd74:	2301      	moveq	r3, #1
 800cd76:	2300      	movne	r3, #0
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	e012      	b.n	800cda2 <HAL_I2C_Init+0x18e>
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	1e58      	subs	r0, r3, #1
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6859      	ldr	r1, [r3, #4]
 800cd84:	460b      	mov	r3, r1
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	440b      	add	r3, r1
 800cd8a:	0099      	lsls	r1, r3, #2
 800cd8c:	440b      	add	r3, r1
 800cd8e:	fbb0 f3f3 	udiv	r3, r0, r3
 800cd92:	3301      	adds	r3, #1
 800cd94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	bf0c      	ite	eq
 800cd9c:	2301      	moveq	r3, #1
 800cd9e:	2300      	movne	r3, #0
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d001      	beq.n	800cdaa <HAL_I2C_Init+0x196>
 800cda6:	2301      	movs	r3, #1
 800cda8:	e022      	b.n	800cdf0 <HAL_I2C_Init+0x1dc>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	689b      	ldr	r3, [r3, #8]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d10e      	bne.n	800cdd0 <HAL_I2C_Init+0x1bc>
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	1e58      	subs	r0, r3, #1
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6859      	ldr	r1, [r3, #4]
 800cdba:	460b      	mov	r3, r1
 800cdbc:	005b      	lsls	r3, r3, #1
 800cdbe:	440b      	add	r3, r1
 800cdc0:	fbb0 f3f3 	udiv	r3, r0, r3
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cdca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdce:	e00f      	b.n	800cdf0 <HAL_I2C_Init+0x1dc>
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	1e58      	subs	r0, r3, #1
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6859      	ldr	r1, [r3, #4]
 800cdd8:	460b      	mov	r3, r1
 800cdda:	009b      	lsls	r3, r3, #2
 800cddc:	440b      	add	r3, r1
 800cdde:	0099      	lsls	r1, r3, #2
 800cde0:	440b      	add	r3, r1
 800cde2:	fbb0 f3f3 	udiv	r3, r0, r3
 800cde6:	3301      	adds	r3, #1
 800cde8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cdec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cdf0:	6879      	ldr	r1, [r7, #4]
 800cdf2:	6809      	ldr	r1, [r1, #0]
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	69da      	ldr	r2, [r3, #28]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6a1b      	ldr	r3, [r3, #32]
 800ce0a:	431a      	orrs	r2, r3
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	430a      	orrs	r2, r1
 800ce12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	689b      	ldr	r3, [r3, #8]
 800ce1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800ce1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	6911      	ldr	r1, [r2, #16]
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	68d2      	ldr	r2, [r2, #12]
 800ce2a:	4311      	orrs	r1, r2
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	6812      	ldr	r2, [r2, #0]
 800ce30:	430b      	orrs	r3, r1
 800ce32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	68db      	ldr	r3, [r3, #12]
 800ce3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	695a      	ldr	r2, [r3, #20]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	699b      	ldr	r3, [r3, #24]
 800ce46:	431a      	orrs	r2, r3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	430a      	orrs	r2, r1
 800ce4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f042 0201 	orr.w	r2, r2, #1
 800ce5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2220      	movs	r2, #32
 800ce6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2200      	movs	r2, #0
 800ce72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2200      	movs	r2, #0
 800ce78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800ce7c:	2300      	movs	r3, #0
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3710      	adds	r7, #16
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	000186a0 	.word	0x000186a0
 800ce8c:	001e847f 	.word	0x001e847f
 800ce90:	003d08ff 	.word	0x003d08ff
 800ce94:	431bde83 	.word	0x431bde83
 800ce98:	10624dd3 	.word	0x10624dd3

0800ce9c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d101      	bne.n	800ceae <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e021      	b.n	800cef2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2224      	movs	r2, #36	@ 0x24
 800ceb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f022 0201 	bic.w	r2, r2, #1
 800cec4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 f821 	bl	800cf0e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cef0:	2300      	movs	r3, #0
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3708      	adds	r7, #8
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}

0800cefa <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800cefa:	b480      	push	{r7}
 800cefc:	b083      	sub	sp, #12
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800cf02:	bf00      	nop
 800cf04:	370c      	adds	r7, #12
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr

0800cf0e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800cf0e:	b480      	push	{r7}
 800cf10:	b083      	sub	sp, #12
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800cf16:	bf00      	nop
 800cf18:	370c      	adds	r7, #12
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf20:	4770      	bx	lr
	...

0800cf24 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b088      	sub	sp, #32
 800cf28:	af02      	add	r7, sp, #8
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	607a      	str	r2, [r7, #4]
 800cf2e:	461a      	mov	r2, r3
 800cf30:	460b      	mov	r3, r1
 800cf32:	817b      	strh	r3, [r7, #10]
 800cf34:	4613      	mov	r3, r2
 800cf36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cf38:	f7ff fa48 	bl	800c3cc <HAL_GetTick>
 800cf3c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	2b20      	cmp	r3, #32
 800cf48:	f040 80e0 	bne.w	800d10c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	9300      	str	r3, [sp, #0]
 800cf50:	2319      	movs	r3, #25
 800cf52:	2201      	movs	r2, #1
 800cf54:	4970      	ldr	r1, [pc, #448]	@ (800d118 <HAL_I2C_Master_Transmit+0x1f4>)
 800cf56:	68f8      	ldr	r0, [r7, #12]
 800cf58:	f001 f928 	bl	800e1ac <I2C_WaitOnFlagUntilTimeout>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d001      	beq.n	800cf66 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800cf62:	2302      	movs	r3, #2
 800cf64:	e0d3      	b.n	800d10e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	d101      	bne.n	800cf74 <HAL_I2C_Master_Transmit+0x50>
 800cf70:	2302      	movs	r3, #2
 800cf72:	e0cc      	b.n	800d10e <HAL_I2C_Master_Transmit+0x1ea>
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2201      	movs	r2, #1
 800cf78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f003 0301 	and.w	r3, r3, #1
 800cf86:	2b01      	cmp	r3, #1
 800cf88:	d007      	beq.n	800cf9a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	f042 0201 	orr.w	r2, r2, #1
 800cf98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cfa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2221      	movs	r2, #33	@ 0x21
 800cfae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2210      	movs	r2, #16
 800cfb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	687a      	ldr	r2, [r7, #4]
 800cfc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	893a      	ldrh	r2, [r7, #8]
 800cfca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	4a50      	ldr	r2, [pc, #320]	@ (800d11c <HAL_I2C_Master_Transmit+0x1f8>)
 800cfda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800cfdc:	8979      	ldrh	r1, [r7, #10]
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	6a3a      	ldr	r2, [r7, #32]
 800cfe2:	68f8      	ldr	r0, [r7, #12]
 800cfe4:	f000 fe14 	bl	800dc10 <I2C_MasterRequestWrite>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d001      	beq.n	800cff2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	e08d      	b.n	800d10e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cff2:	2300      	movs	r3, #0
 800cff4:	613b      	str	r3, [r7, #16]
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	695b      	ldr	r3, [r3, #20]
 800cffc:	613b      	str	r3, [r7, #16]
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	699b      	ldr	r3, [r3, #24]
 800d004:	613b      	str	r3, [r7, #16]
 800d006:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800d008:	e066      	b.n	800d0d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d00a:	697a      	ldr	r2, [r7, #20]
 800d00c:	6a39      	ldr	r1, [r7, #32]
 800d00e:	68f8      	ldr	r0, [r7, #12]
 800d010:	f001 f9e6 	bl	800e3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d00d      	beq.n	800d036 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d01e:	2b04      	cmp	r3, #4
 800d020:	d107      	bne.n	800d032 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d030:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d032:	2301      	movs	r3, #1
 800d034:	e06b      	b.n	800d10e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d03a:	781a      	ldrb	r2, [r3, #0]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d046:	1c5a      	adds	r2, r3, #1
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d050:	b29b      	uxth	r3, r3
 800d052:	3b01      	subs	r3, #1
 800d054:	b29a      	uxth	r2, r3
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d05e:	3b01      	subs	r3, #1
 800d060:	b29a      	uxth	r2, r3
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	695b      	ldr	r3, [r3, #20]
 800d06c:	f003 0304 	and.w	r3, r3, #4
 800d070:	2b04      	cmp	r3, #4
 800d072:	d11b      	bne.n	800d0ac <HAL_I2C_Master_Transmit+0x188>
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d017      	beq.n	800d0ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d080:	781a      	ldrb	r2, [r3, #0]
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d08c:	1c5a      	adds	r2, r3, #1
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d096:	b29b      	uxth	r3, r3
 800d098:	3b01      	subs	r3, #1
 800d09a:	b29a      	uxth	r2, r3
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d0a4:	3b01      	subs	r3, #1
 800d0a6:	b29a      	uxth	r2, r3
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d0ac:	697a      	ldr	r2, [r7, #20]
 800d0ae:	6a39      	ldr	r1, [r7, #32]
 800d0b0:	68f8      	ldr	r0, [r7, #12]
 800d0b2:	f001 f9dd 	bl	800e470 <I2C_WaitOnBTFFlagUntilTimeout>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d00d      	beq.n	800d0d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0c0:	2b04      	cmp	r3, #4
 800d0c2:	d107      	bne.n	800d0d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d0d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	e01a      	b.n	800d10e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d194      	bne.n	800d00a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	681a      	ldr	r2, [r3, #0]
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d0ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2220      	movs	r2, #32
 800d0f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2200      	movs	r2, #0
 800d104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d108:	2300      	movs	r3, #0
 800d10a:	e000      	b.n	800d10e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d10c:	2302      	movs	r3, #2
  }
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3718      	adds	r7, #24
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	00100002 	.word	0x00100002
 800d11c:	ffff0000 	.word	0xffff0000

0800d120 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b08c      	sub	sp, #48	@ 0x30
 800d124:	af02      	add	r7, sp, #8
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	607a      	str	r2, [r7, #4]
 800d12a:	461a      	mov	r2, r3
 800d12c:	460b      	mov	r3, r1
 800d12e:	817b      	strh	r3, [r7, #10]
 800d130:	4613      	mov	r3, r2
 800d132:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d134:	f7ff f94a 	bl	800c3cc <HAL_GetTick>
 800d138:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d140:	b2db      	uxtb	r3, r3
 800d142:	2b20      	cmp	r3, #32
 800d144:	f040 8217 	bne.w	800d576 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d14a:	9300      	str	r3, [sp, #0]
 800d14c:	2319      	movs	r3, #25
 800d14e:	2201      	movs	r2, #1
 800d150:	497c      	ldr	r1, [pc, #496]	@ (800d344 <HAL_I2C_Master_Receive+0x224>)
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	f001 f82a 	bl	800e1ac <I2C_WaitOnFlagUntilTimeout>
 800d158:	4603      	mov	r3, r0
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d001      	beq.n	800d162 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800d15e:	2302      	movs	r3, #2
 800d160:	e20a      	b.n	800d578 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d168:	2b01      	cmp	r3, #1
 800d16a:	d101      	bne.n	800d170 <HAL_I2C_Master_Receive+0x50>
 800d16c:	2302      	movs	r3, #2
 800d16e:	e203      	b.n	800d578 <HAL_I2C_Master_Receive+0x458>
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2201      	movs	r2, #1
 800d174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f003 0301 	and.w	r3, r3, #1
 800d182:	2b01      	cmp	r3, #1
 800d184:	d007      	beq.n	800d196 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	681a      	ldr	r2, [r3, #0]
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f042 0201 	orr.w	r2, r2, #1
 800d194:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d1a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2222      	movs	r2, #34	@ 0x22
 800d1aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2210      	movs	r2, #16
 800d1b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	893a      	ldrh	r2, [r7, #8]
 800d1c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d1cc:	b29a      	uxth	r2, r3
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	4a5c      	ldr	r2, [pc, #368]	@ (800d348 <HAL_I2C_Master_Receive+0x228>)
 800d1d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800d1d8:	8979      	ldrh	r1, [r7, #10]
 800d1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1de:	68f8      	ldr	r0, [r7, #12]
 800d1e0:	f000 fd98 	bl	800dd14 <I2C_MasterRequestRead>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d001      	beq.n	800d1ee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	e1c4      	b.n	800d578 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d113      	bne.n	800d21e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	623b      	str	r3, [r7, #32]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	695b      	ldr	r3, [r3, #20]
 800d200:	623b      	str	r3, [r7, #32]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	699b      	ldr	r3, [r3, #24]
 800d208:	623b      	str	r3, [r7, #32]
 800d20a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d21a:	601a      	str	r2, [r3, #0]
 800d21c:	e198      	b.n	800d550 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d222:	2b01      	cmp	r3, #1
 800d224:	d11b      	bne.n	800d25e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	681a      	ldr	r2, [r3, #0]
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d234:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d236:	2300      	movs	r3, #0
 800d238:	61fb      	str	r3, [r7, #28]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	695b      	ldr	r3, [r3, #20]
 800d240:	61fb      	str	r3, [r7, #28]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	699b      	ldr	r3, [r3, #24]
 800d248:	61fb      	str	r3, [r7, #28]
 800d24a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	681a      	ldr	r2, [r3, #0]
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d25a:	601a      	str	r2, [r3, #0]
 800d25c:	e178      	b.n	800d550 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d262:	2b02      	cmp	r3, #2
 800d264:	d11b      	bne.n	800d29e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d274:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d284:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d286:	2300      	movs	r3, #0
 800d288:	61bb      	str	r3, [r7, #24]
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	695b      	ldr	r3, [r3, #20]
 800d290:	61bb      	str	r3, [r7, #24]
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	699b      	ldr	r3, [r3, #24]
 800d298:	61bb      	str	r3, [r7, #24]
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	e158      	b.n	800d550 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d2ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	617b      	str	r3, [r7, #20]
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	695b      	ldr	r3, [r3, #20]
 800d2b8:	617b      	str	r3, [r7, #20]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	699b      	ldr	r3, [r3, #24]
 800d2c0:	617b      	str	r3, [r7, #20]
 800d2c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d2c4:	e144      	b.n	800d550 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2ca:	2b03      	cmp	r3, #3
 800d2cc:	f200 80f1 	bhi.w	800d4b2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	d123      	bne.n	800d320 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d2d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f001 f90f 	bl	800e500 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d001      	beq.n	800d2ec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	e145      	b.n	800d578 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	691a      	ldr	r2, [r3, #16]
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2f6:	b2d2      	uxtb	r2, r2
 800d2f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2fe:	1c5a      	adds	r2, r3, #1
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d308:	3b01      	subs	r3, #1
 800d30a:	b29a      	uxth	r2, r3
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d314:	b29b      	uxth	r3, r3
 800d316:	3b01      	subs	r3, #1
 800d318:	b29a      	uxth	r2, r3
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d31e:	e117      	b.n	800d550 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d324:	2b02      	cmp	r3, #2
 800d326:	d14e      	bne.n	800d3c6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d32a:	9300      	str	r3, [sp, #0]
 800d32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d32e:	2200      	movs	r2, #0
 800d330:	4906      	ldr	r1, [pc, #24]	@ (800d34c <HAL_I2C_Master_Receive+0x22c>)
 800d332:	68f8      	ldr	r0, [r7, #12]
 800d334:	f000 ff3a 	bl	800e1ac <I2C_WaitOnFlagUntilTimeout>
 800d338:	4603      	mov	r3, r0
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d008      	beq.n	800d350 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800d33e:	2301      	movs	r3, #1
 800d340:	e11a      	b.n	800d578 <HAL_I2C_Master_Receive+0x458>
 800d342:	bf00      	nop
 800d344:	00100002 	.word	0x00100002
 800d348:	ffff0000 	.word	0xffff0000
 800d34c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d35e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	691a      	ldr	r2, [r3, #16]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d36a:	b2d2      	uxtb	r2, r2
 800d36c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d372:	1c5a      	adds	r2, r3, #1
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d37c:	3b01      	subs	r3, #1
 800d37e:	b29a      	uxth	r2, r3
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d388:	b29b      	uxth	r3, r3
 800d38a:	3b01      	subs	r3, #1
 800d38c:	b29a      	uxth	r2, r3
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	691a      	ldr	r2, [r3, #16]
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d39c:	b2d2      	uxtb	r2, r2
 800d39e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3a4:	1c5a      	adds	r2, r3, #1
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d3ae:	3b01      	subs	r3, #1
 800d3b0:	b29a      	uxth	r2, r3
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	b29a      	uxth	r2, r3
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d3c4:	e0c4      	b.n	800d550 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c8:	9300      	str	r3, [sp, #0]
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	496c      	ldr	r1, [pc, #432]	@ (800d580 <HAL_I2C_Master_Receive+0x460>)
 800d3d0:	68f8      	ldr	r0, [r7, #12]
 800d3d2:	f000 feeb 	bl	800e1ac <I2C_WaitOnFlagUntilTimeout>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d001      	beq.n	800d3e0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e0cb      	b.n	800d578 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d3ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	691a      	ldr	r2, [r3, #16]
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3fa:	b2d2      	uxtb	r2, r2
 800d3fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d402:	1c5a      	adds	r2, r3, #1
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d40c:	3b01      	subs	r3, #1
 800d40e:	b29a      	uxth	r2, r3
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d418:	b29b      	uxth	r3, r3
 800d41a:	3b01      	subs	r3, #1
 800d41c:	b29a      	uxth	r2, r3
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d424:	9300      	str	r3, [sp, #0]
 800d426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d428:	2200      	movs	r2, #0
 800d42a:	4955      	ldr	r1, [pc, #340]	@ (800d580 <HAL_I2C_Master_Receive+0x460>)
 800d42c:	68f8      	ldr	r0, [r7, #12]
 800d42e:	f000 febd 	bl	800e1ac <I2C_WaitOnFlagUntilTimeout>
 800d432:	4603      	mov	r3, r0
 800d434:	2b00      	cmp	r3, #0
 800d436:	d001      	beq.n	800d43c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800d438:	2301      	movs	r3, #1
 800d43a:	e09d      	b.n	800d578 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d44a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	691a      	ldr	r2, [r3, #16]
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d456:	b2d2      	uxtb	r2, r2
 800d458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d45e:	1c5a      	adds	r2, r3, #1
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d468:	3b01      	subs	r3, #1
 800d46a:	b29a      	uxth	r2, r3
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d474:	b29b      	uxth	r3, r3
 800d476:	3b01      	subs	r3, #1
 800d478:	b29a      	uxth	r2, r3
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	691a      	ldr	r2, [r3, #16]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d488:	b2d2      	uxtb	r2, r2
 800d48a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d490:	1c5a      	adds	r2, r3, #1
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d49a:	3b01      	subs	r3, #1
 800d49c:	b29a      	uxth	r2, r3
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d4a6:	b29b      	uxth	r3, r3
 800d4a8:	3b01      	subs	r3, #1
 800d4aa:	b29a      	uxth	r2, r3
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d4b0:	e04e      	b.n	800d550 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d4b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d4b6:	68f8      	ldr	r0, [r7, #12]
 800d4b8:	f001 f822 	bl	800e500 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d001      	beq.n	800d4c6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	e058      	b.n	800d578 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	691a      	ldr	r2, [r3, #16]
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4d0:	b2d2      	uxtb	r2, r2
 800d4d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4d8:	1c5a      	adds	r2, r3, #1
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d4e2:	3b01      	subs	r3, #1
 800d4e4:	b29a      	uxth	r2, r3
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	b29a      	uxth	r2, r3
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	695b      	ldr	r3, [r3, #20]
 800d4fe:	f003 0304 	and.w	r3, r3, #4
 800d502:	2b04      	cmp	r3, #4
 800d504:	d124      	bne.n	800d550 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d50a:	2b03      	cmp	r3, #3
 800d50c:	d107      	bne.n	800d51e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d51c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	691a      	ldr	r2, [r3, #16]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d528:	b2d2      	uxtb	r2, r2
 800d52a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d530:	1c5a      	adds	r2, r3, #1
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d53a:	3b01      	subs	r3, #1
 800d53c:	b29a      	uxth	r2, r3
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d546:	b29b      	uxth	r3, r3
 800d548:	3b01      	subs	r3, #1
 800d54a:	b29a      	uxth	r2, r3
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d554:	2b00      	cmp	r3, #0
 800d556:	f47f aeb6 	bne.w	800d2c6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	2220      	movs	r2, #32
 800d55e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2200      	movs	r2, #0
 800d566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2200      	movs	r2, #0
 800d56e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d572:	2300      	movs	r3, #0
 800d574:	e000      	b.n	800d578 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800d576:	2302      	movs	r3, #2
  }
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3728      	adds	r7, #40	@ 0x28
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	00010004 	.word	0x00010004

0800d584 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b088      	sub	sp, #32
 800d588:	af02      	add	r7, sp, #8
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	4608      	mov	r0, r1
 800d58e:	4611      	mov	r1, r2
 800d590:	461a      	mov	r2, r3
 800d592:	4603      	mov	r3, r0
 800d594:	817b      	strh	r3, [r7, #10]
 800d596:	460b      	mov	r3, r1
 800d598:	813b      	strh	r3, [r7, #8]
 800d59a:	4613      	mov	r3, r2
 800d59c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d59e:	f7fe ff15 	bl	800c3cc <HAL_GetTick>
 800d5a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	2b20      	cmp	r3, #32
 800d5ae:	f040 80d9 	bne.w	800d764 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	9300      	str	r3, [sp, #0]
 800d5b6:	2319      	movs	r3, #25
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	496d      	ldr	r1, [pc, #436]	@ (800d770 <HAL_I2C_Mem_Write+0x1ec>)
 800d5bc:	68f8      	ldr	r0, [r7, #12]
 800d5be:	f000 fdf5 	bl	800e1ac <I2C_WaitOnFlagUntilTimeout>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d001      	beq.n	800d5cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d5c8:	2302      	movs	r3, #2
 800d5ca:	e0cc      	b.n	800d766 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d101      	bne.n	800d5da <HAL_I2C_Mem_Write+0x56>
 800d5d6:	2302      	movs	r3, #2
 800d5d8:	e0c5      	b.n	800d766 <HAL_I2C_Mem_Write+0x1e2>
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2201      	movs	r2, #1
 800d5de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	f003 0301 	and.w	r3, r3, #1
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d007      	beq.n	800d600 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f042 0201 	orr.w	r2, r2, #1
 800d5fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	681a      	ldr	r2, [r3, #0]
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d60e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2221      	movs	r2, #33	@ 0x21
 800d614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	2240      	movs	r2, #64	@ 0x40
 800d61c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2200      	movs	r2, #0
 800d624:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	6a3a      	ldr	r2, [r7, #32]
 800d62a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d630:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d636:	b29a      	uxth	r2, r3
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	4a4d      	ldr	r2, [pc, #308]	@ (800d774 <HAL_I2C_Mem_Write+0x1f0>)
 800d640:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d642:	88f8      	ldrh	r0, [r7, #6]
 800d644:	893a      	ldrh	r2, [r7, #8]
 800d646:	8979      	ldrh	r1, [r7, #10]
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	9301      	str	r3, [sp, #4]
 800d64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d64e:	9300      	str	r3, [sp, #0]
 800d650:	4603      	mov	r3, r0
 800d652:	68f8      	ldr	r0, [r7, #12]
 800d654:	f000 fc2c 	bl	800deb0 <I2C_RequestMemoryWrite>
 800d658:	4603      	mov	r3, r0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d052      	beq.n	800d704 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d65e:	2301      	movs	r3, #1
 800d660:	e081      	b.n	800d766 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d662:	697a      	ldr	r2, [r7, #20]
 800d664:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d666:	68f8      	ldr	r0, [r7, #12]
 800d668:	f000 feba 	bl	800e3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d00d      	beq.n	800d68e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d676:	2b04      	cmp	r3, #4
 800d678:	d107      	bne.n	800d68a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	681a      	ldr	r2, [r3, #0]
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d688:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d68a:	2301      	movs	r3, #1
 800d68c:	e06b      	b.n	800d766 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d692:	781a      	ldrb	r2, [r3, #0]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d69e:	1c5a      	adds	r2, r3, #1
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6a8:	3b01      	subs	r3, #1
 800d6aa:	b29a      	uxth	r2, r3
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	3b01      	subs	r3, #1
 800d6b8:	b29a      	uxth	r2, r3
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	695b      	ldr	r3, [r3, #20]
 800d6c4:	f003 0304 	and.w	r3, r3, #4
 800d6c8:	2b04      	cmp	r3, #4
 800d6ca:	d11b      	bne.n	800d704 <HAL_I2C_Mem_Write+0x180>
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d017      	beq.n	800d704 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6d8:	781a      	ldrb	r2, [r3, #0]
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6e4:	1c5a      	adds	r2, r3, #1
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	b29a      	uxth	r2, r3
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	3b01      	subs	r3, #1
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d1aa      	bne.n	800d662 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d70c:	697a      	ldr	r2, [r7, #20]
 800d70e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f000 fead 	bl	800e470 <I2C_WaitOnBTFFlagUntilTimeout>
 800d716:	4603      	mov	r3, r0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d00d      	beq.n	800d738 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d720:	2b04      	cmp	r3, #4
 800d722:	d107      	bne.n	800d734 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d732:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d734:	2301      	movs	r3, #1
 800d736:	e016      	b.n	800d766 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2220      	movs	r2, #32
 800d74c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	2200      	movs	r2, #0
 800d754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	2200      	movs	r2, #0
 800d75c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800d760:	2300      	movs	r3, #0
 800d762:	e000      	b.n	800d766 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d764:	2302      	movs	r3, #2
  }
}
 800d766:	4618      	mov	r0, r3
 800d768:	3718      	adds	r7, #24
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
 800d76e:	bf00      	nop
 800d770:	00100002 	.word	0x00100002
 800d774:	ffff0000 	.word	0xffff0000

0800d778 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b08c      	sub	sp, #48	@ 0x30
 800d77c:	af02      	add	r7, sp, #8
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	4608      	mov	r0, r1
 800d782:	4611      	mov	r1, r2
 800d784:	461a      	mov	r2, r3
 800d786:	4603      	mov	r3, r0
 800d788:	817b      	strh	r3, [r7, #10]
 800d78a:	460b      	mov	r3, r1
 800d78c:	813b      	strh	r3, [r7, #8]
 800d78e:	4613      	mov	r3, r2
 800d790:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d792:	f7fe fe1b 	bl	800c3cc <HAL_GetTick>
 800d796:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	2b20      	cmp	r3, #32
 800d7a2:	f040 8214 	bne.w	800dbce <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a8:	9300      	str	r3, [sp, #0]
 800d7aa:	2319      	movs	r3, #25
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	497b      	ldr	r1, [pc, #492]	@ (800d99c <HAL_I2C_Mem_Read+0x224>)
 800d7b0:	68f8      	ldr	r0, [r7, #12]
 800d7b2:	f000 fcfb 	bl	800e1ac <I2C_WaitOnFlagUntilTimeout>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d001      	beq.n	800d7c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d7bc:	2302      	movs	r3, #2
 800d7be:	e207      	b.n	800dbd0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d101      	bne.n	800d7ce <HAL_I2C_Mem_Read+0x56>
 800d7ca:	2302      	movs	r3, #2
 800d7cc:	e200      	b.n	800dbd0 <HAL_I2C_Mem_Read+0x458>
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f003 0301 	and.w	r3, r3, #1
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d007      	beq.n	800d7f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f042 0201 	orr.w	r2, r2, #1
 800d7f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d802:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2222      	movs	r2, #34	@ 0x22
 800d808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2240      	movs	r2, #64	@ 0x40
 800d810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2200      	movs	r2, #0
 800d818:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d81e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800d824:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d82a:	b29a      	uxth	r2, r3
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	4a5b      	ldr	r2, [pc, #364]	@ (800d9a0 <HAL_I2C_Mem_Read+0x228>)
 800d834:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d836:	88f8      	ldrh	r0, [r7, #6]
 800d838:	893a      	ldrh	r2, [r7, #8]
 800d83a:	8979      	ldrh	r1, [r7, #10]
 800d83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d83e:	9301      	str	r3, [sp, #4]
 800d840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d842:	9300      	str	r3, [sp, #0]
 800d844:	4603      	mov	r3, r0
 800d846:	68f8      	ldr	r0, [r7, #12]
 800d848:	f000 fbc8 	bl	800dfdc <I2C_RequestMemoryRead>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d001      	beq.n	800d856 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d852:	2301      	movs	r3, #1
 800d854:	e1bc      	b.n	800dbd0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d113      	bne.n	800d886 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d85e:	2300      	movs	r3, #0
 800d860:	623b      	str	r3, [r7, #32]
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	695b      	ldr	r3, [r3, #20]
 800d868:	623b      	str	r3, [r7, #32]
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	699b      	ldr	r3, [r3, #24]
 800d870:	623b      	str	r3, [r7, #32]
 800d872:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	681a      	ldr	r2, [r3, #0]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d882:	601a      	str	r2, [r3, #0]
 800d884:	e190      	b.n	800dba8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d11b      	bne.n	800d8c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d89c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d89e:	2300      	movs	r3, #0
 800d8a0:	61fb      	str	r3, [r7, #28]
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	695b      	ldr	r3, [r3, #20]
 800d8a8:	61fb      	str	r3, [r7, #28]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	699b      	ldr	r3, [r3, #24]
 800d8b0:	61fb      	str	r3, [r7, #28]
 800d8b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d8c2:	601a      	str	r2, [r3, #0]
 800d8c4:	e170      	b.n	800dba8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8ca:	2b02      	cmp	r3, #2
 800d8cc:	d11b      	bne.n	800d906 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d8dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	681a      	ldr	r2, [r3, #0]
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d8ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	61bb      	str	r3, [r7, #24]
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	695b      	ldr	r3, [r3, #20]
 800d8f8:	61bb      	str	r3, [r7, #24]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	699b      	ldr	r3, [r3, #24]
 800d900:	61bb      	str	r3, [r7, #24]
 800d902:	69bb      	ldr	r3, [r7, #24]
 800d904:	e150      	b.n	800dba8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d906:	2300      	movs	r3, #0
 800d908:	617b      	str	r3, [r7, #20]
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	695b      	ldr	r3, [r3, #20]
 800d910:	617b      	str	r3, [r7, #20]
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	699b      	ldr	r3, [r3, #24]
 800d918:	617b      	str	r3, [r7, #20]
 800d91a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d91c:	e144      	b.n	800dba8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d922:	2b03      	cmp	r3, #3
 800d924:	f200 80f1 	bhi.w	800db0a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d123      	bne.n	800d978 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d932:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d934:	68f8      	ldr	r0, [r7, #12]
 800d936:	f000 fde3 	bl	800e500 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d001      	beq.n	800d944 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800d940:	2301      	movs	r3, #1
 800d942:	e145      	b.n	800dbd0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	691a      	ldr	r2, [r3, #16]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d94e:	b2d2      	uxtb	r2, r2
 800d950:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d956:	1c5a      	adds	r2, r3, #1
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d960:	3b01      	subs	r3, #1
 800d962:	b29a      	uxth	r2, r3
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	3b01      	subs	r3, #1
 800d970:	b29a      	uxth	r2, r3
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d976:	e117      	b.n	800dba8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d97c:	2b02      	cmp	r3, #2
 800d97e:	d14e      	bne.n	800da1e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d982:	9300      	str	r3, [sp, #0]
 800d984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d986:	2200      	movs	r2, #0
 800d988:	4906      	ldr	r1, [pc, #24]	@ (800d9a4 <HAL_I2C_Mem_Read+0x22c>)
 800d98a:	68f8      	ldr	r0, [r7, #12]
 800d98c:	f000 fc0e 	bl	800e1ac <I2C_WaitOnFlagUntilTimeout>
 800d990:	4603      	mov	r3, r0
 800d992:	2b00      	cmp	r3, #0
 800d994:	d008      	beq.n	800d9a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800d996:	2301      	movs	r3, #1
 800d998:	e11a      	b.n	800dbd0 <HAL_I2C_Mem_Read+0x458>
 800d99a:	bf00      	nop
 800d99c:	00100002 	.word	0x00100002
 800d9a0:	ffff0000 	.word	0xffff0000
 800d9a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	681a      	ldr	r2, [r3, #0]
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d9b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	691a      	ldr	r2, [r3, #16]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9c2:	b2d2      	uxtb	r2, r2
 800d9c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9ca:	1c5a      	adds	r2, r3, #1
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d9d4:	3b01      	subs	r3, #1
 800d9d6:	b29a      	uxth	r2, r3
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	3b01      	subs	r3, #1
 800d9e4:	b29a      	uxth	r2, r3
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	691a      	ldr	r2, [r3, #16]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9f4:	b2d2      	uxtb	r2, r2
 800d9f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9fc:	1c5a      	adds	r2, r3, #1
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da06:	3b01      	subs	r3, #1
 800da08:	b29a      	uxth	r2, r3
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da12:	b29b      	uxth	r3, r3
 800da14:	3b01      	subs	r3, #1
 800da16:	b29a      	uxth	r2, r3
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800da1c:	e0c4      	b.n	800dba8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800da1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da20:	9300      	str	r3, [sp, #0]
 800da22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da24:	2200      	movs	r2, #0
 800da26:	496c      	ldr	r1, [pc, #432]	@ (800dbd8 <HAL_I2C_Mem_Read+0x460>)
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	f000 fbbf 	bl	800e1ac <I2C_WaitOnFlagUntilTimeout>
 800da2e:	4603      	mov	r3, r0
 800da30:	2b00      	cmp	r3, #0
 800da32:	d001      	beq.n	800da38 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800da34:	2301      	movs	r3, #1
 800da36:	e0cb      	b.n	800dbd0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	681a      	ldr	r2, [r3, #0]
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800da46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	691a      	ldr	r2, [r3, #16]
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da52:	b2d2      	uxtb	r2, r2
 800da54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da5a:	1c5a      	adds	r2, r3, #1
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da64:	3b01      	subs	r3, #1
 800da66:	b29a      	uxth	r2, r3
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800da70:	b29b      	uxth	r3, r3
 800da72:	3b01      	subs	r3, #1
 800da74:	b29a      	uxth	r2, r3
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800da7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da80:	2200      	movs	r2, #0
 800da82:	4955      	ldr	r1, [pc, #340]	@ (800dbd8 <HAL_I2C_Mem_Read+0x460>)
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f000 fb91 	bl	800e1ac <I2C_WaitOnFlagUntilTimeout>
 800da8a:	4603      	mov	r3, r0
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d001      	beq.n	800da94 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800da90:	2301      	movs	r3, #1
 800da92:	e09d      	b.n	800dbd0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800daa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	691a      	ldr	r2, [r3, #16]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daae:	b2d2      	uxtb	r2, r2
 800dab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dab6:	1c5a      	adds	r2, r3, #1
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dac0:	3b01      	subs	r3, #1
 800dac2:	b29a      	uxth	r2, r3
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dacc:	b29b      	uxth	r3, r3
 800dace:	3b01      	subs	r3, #1
 800dad0:	b29a      	uxth	r2, r3
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	691a      	ldr	r2, [r3, #16]
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dae0:	b2d2      	uxtb	r2, r2
 800dae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dae8:	1c5a      	adds	r2, r3, #1
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800daf2:	3b01      	subs	r3, #1
 800daf4:	b29a      	uxth	r2, r3
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dafe:	b29b      	uxth	r3, r3
 800db00:	3b01      	subs	r3, #1
 800db02:	b29a      	uxth	r2, r3
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800db08:	e04e      	b.n	800dba8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800db0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db0c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800db0e:	68f8      	ldr	r0, [r7, #12]
 800db10:	f000 fcf6 	bl	800e500 <I2C_WaitOnRXNEFlagUntilTimeout>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	d001      	beq.n	800db1e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800db1a:	2301      	movs	r3, #1
 800db1c:	e058      	b.n	800dbd0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	691a      	ldr	r2, [r3, #16]
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db28:	b2d2      	uxtb	r2, r2
 800db2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db30:	1c5a      	adds	r2, r3, #1
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db3a:	3b01      	subs	r3, #1
 800db3c:	b29a      	uxth	r2, r3
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db46:	b29b      	uxth	r3, r3
 800db48:	3b01      	subs	r3, #1
 800db4a:	b29a      	uxth	r2, r3
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	695b      	ldr	r3, [r3, #20]
 800db56:	f003 0304 	and.w	r3, r3, #4
 800db5a:	2b04      	cmp	r3, #4
 800db5c:	d124      	bne.n	800dba8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db62:	2b03      	cmp	r3, #3
 800db64:	d107      	bne.n	800db76 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	681a      	ldr	r2, [r3, #0]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800db74:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	691a      	ldr	r2, [r3, #16]
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db80:	b2d2      	uxtb	r2, r2
 800db82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db88:	1c5a      	adds	r2, r3, #1
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db92:	3b01      	subs	r3, #1
 800db94:	b29a      	uxth	r2, r3
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	3b01      	subs	r3, #1
 800dba2:	b29a      	uxth	r2, r3
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	f47f aeb6 	bne.w	800d91e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2220      	movs	r2, #32
 800dbb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	e000      	b.n	800dbd0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800dbce:	2302      	movs	r3, #2
  }
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3728      	adds	r7, #40	@ 0x28
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	00010004 	.word	0x00010004

0800dbdc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b083      	sub	sp, #12
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dbea:	b2db      	uxtb	r3, r3
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	370c      	adds	r7, #12
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr

0800dbf8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b083      	sub	sp, #12
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	370c      	adds	r7, #12
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr

0800dc10 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b088      	sub	sp, #32
 800dc14:	af02      	add	r7, sp, #8
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	607a      	str	r2, [r7, #4]
 800dc1a:	603b      	str	r3, [r7, #0]
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc24:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	2b08      	cmp	r3, #8
 800dc2a:	d006      	beq.n	800dc3a <I2C_MasterRequestWrite+0x2a>
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d003      	beq.n	800dc3a <I2C_MasterRequestWrite+0x2a>
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800dc38:	d108      	bne.n	800dc4c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	681a      	ldr	r2, [r3, #0]
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dc48:	601a      	str	r2, [r3, #0]
 800dc4a:	e00b      	b.n	800dc64 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc50:	2b12      	cmp	r3, #18
 800dc52:	d107      	bne.n	800dc64 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	681a      	ldr	r2, [r3, #0]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dc62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f000 fa9b 	bl	800e1ac <I2C_WaitOnFlagUntilTimeout>
 800dc76:	4603      	mov	r3, r0
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d00d      	beq.n	800dc98 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc8a:	d103      	bne.n	800dc94 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc92:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800dc94:	2303      	movs	r3, #3
 800dc96:	e035      	b.n	800dd04 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	691b      	ldr	r3, [r3, #16]
 800dc9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dca0:	d108      	bne.n	800dcb4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800dca2:	897b      	ldrh	r3, [r7, #10]
 800dca4:	b2db      	uxtb	r3, r3
 800dca6:	461a      	mov	r2, r3
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800dcb0:	611a      	str	r2, [r3, #16]
 800dcb2:	e01b      	b.n	800dcec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800dcb4:	897b      	ldrh	r3, [r7, #10]
 800dcb6:	11db      	asrs	r3, r3, #7
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	f003 0306 	and.w	r3, r3, #6
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	f063 030f 	orn	r3, r3, #15
 800dcc4:	b2da      	uxtb	r2, r3
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	490e      	ldr	r1, [pc, #56]	@ (800dd0c <I2C_MasterRequestWrite+0xfc>)
 800dcd2:	68f8      	ldr	r0, [r7, #12]
 800dcd4:	f000 fae4 	bl	800e2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d001      	beq.n	800dce2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800dcde:	2301      	movs	r3, #1
 800dce0:	e010      	b.n	800dd04 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800dce2:	897b      	ldrh	r3, [r7, #10]
 800dce4:	b2da      	uxtb	r2, r3
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	687a      	ldr	r2, [r7, #4]
 800dcf0:	4907      	ldr	r1, [pc, #28]	@ (800dd10 <I2C_MasterRequestWrite+0x100>)
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	f000 fad4 	bl	800e2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d001      	beq.n	800dd02 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e000      	b.n	800dd04 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800dd02:	2300      	movs	r3, #0
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3718      	adds	r7, #24
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	00010008 	.word	0x00010008
 800dd10:	00010002 	.word	0x00010002

0800dd14 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b088      	sub	sp, #32
 800dd18:	af02      	add	r7, sp, #8
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	607a      	str	r2, [r7, #4]
 800dd1e:	603b      	str	r3, [r7, #0]
 800dd20:	460b      	mov	r3, r1
 800dd22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd28:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dd38:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	2b08      	cmp	r3, #8
 800dd3e:	d006      	beq.n	800dd4e <I2C_MasterRequestRead+0x3a>
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d003      	beq.n	800dd4e <I2C_MasterRequestRead+0x3a>
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800dd4c:	d108      	bne.n	800dd60 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dd5c:	601a      	str	r2, [r3, #0]
 800dd5e:	e00b      	b.n	800dd78 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd64:	2b11      	cmp	r3, #17
 800dd66:	d107      	bne.n	800dd78 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	681a      	ldr	r2, [r3, #0]
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dd76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	9300      	str	r3, [sp, #0]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800dd84:	68f8      	ldr	r0, [r7, #12]
 800dd86:	f000 fa11 	bl	800e1ac <I2C_WaitOnFlagUntilTimeout>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d00d      	beq.n	800ddac <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd9e:	d103      	bne.n	800dda8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dda6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800dda8:	2303      	movs	r3, #3
 800ddaa:	e079      	b.n	800dea0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	691b      	ldr	r3, [r3, #16]
 800ddb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ddb4:	d108      	bne.n	800ddc8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ddb6:	897b      	ldrh	r3, [r7, #10]
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	f043 0301 	orr.w	r3, r3, #1
 800ddbe:	b2da      	uxtb	r2, r3
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	611a      	str	r2, [r3, #16]
 800ddc6:	e05f      	b.n	800de88 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ddc8:	897b      	ldrh	r3, [r7, #10]
 800ddca:	11db      	asrs	r3, r3, #7
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	f003 0306 	and.w	r3, r3, #6
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	f063 030f 	orn	r3, r3, #15
 800ddd8:	b2da      	uxtb	r2, r3
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	687a      	ldr	r2, [r7, #4]
 800dde4:	4930      	ldr	r1, [pc, #192]	@ (800dea8 <I2C_MasterRequestRead+0x194>)
 800dde6:	68f8      	ldr	r0, [r7, #12]
 800dde8:	f000 fa5a 	bl	800e2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ddec:	4603      	mov	r3, r0
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d001      	beq.n	800ddf6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e054      	b.n	800dea0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ddf6:	897b      	ldrh	r3, [r7, #10]
 800ddf8:	b2da      	uxtb	r2, r3
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	4929      	ldr	r1, [pc, #164]	@ (800deac <I2C_MasterRequestRead+0x198>)
 800de06:	68f8      	ldr	r0, [r7, #12]
 800de08:	f000 fa4a 	bl	800e2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d001      	beq.n	800de16 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800de12:	2301      	movs	r3, #1
 800de14:	e044      	b.n	800dea0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800de16:	2300      	movs	r3, #0
 800de18:	613b      	str	r3, [r7, #16]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	695b      	ldr	r3, [r3, #20]
 800de20:	613b      	str	r3, [r7, #16]
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	699b      	ldr	r3, [r3, #24]
 800de28:	613b      	str	r3, [r7, #16]
 800de2a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	681a      	ldr	r2, [r3, #0]
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800de3a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	9300      	str	r3, [sp, #0]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2200      	movs	r2, #0
 800de44:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800de48:	68f8      	ldr	r0, [r7, #12]
 800de4a:	f000 f9af 	bl	800e1ac <I2C_WaitOnFlagUntilTimeout>
 800de4e:	4603      	mov	r3, r0
 800de50:	2b00      	cmp	r3, #0
 800de52:	d00d      	beq.n	800de70 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800de62:	d103      	bne.n	800de6c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800de6a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800de6c:	2303      	movs	r3, #3
 800de6e:	e017      	b.n	800dea0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800de70:	897b      	ldrh	r3, [r7, #10]
 800de72:	11db      	asrs	r3, r3, #7
 800de74:	b2db      	uxtb	r3, r3
 800de76:	f003 0306 	and.w	r3, r3, #6
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	f063 030e 	orn	r3, r3, #14
 800de80:	b2da      	uxtb	r2, r3
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	4907      	ldr	r1, [pc, #28]	@ (800deac <I2C_MasterRequestRead+0x198>)
 800de8e:	68f8      	ldr	r0, [r7, #12]
 800de90:	f000 fa06 	bl	800e2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800de94:	4603      	mov	r3, r0
 800de96:	2b00      	cmp	r3, #0
 800de98:	d001      	beq.n	800de9e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800de9a:	2301      	movs	r3, #1
 800de9c:	e000      	b.n	800dea0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800de9e:	2300      	movs	r3, #0
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3718      	adds	r7, #24
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	00010008 	.word	0x00010008
 800deac:	00010002 	.word	0x00010002

0800deb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b088      	sub	sp, #32
 800deb4:	af02      	add	r7, sp, #8
 800deb6:	60f8      	str	r0, [r7, #12]
 800deb8:	4608      	mov	r0, r1
 800deba:	4611      	mov	r1, r2
 800debc:	461a      	mov	r2, r3
 800debe:	4603      	mov	r3, r0
 800dec0:	817b      	strh	r3, [r7, #10]
 800dec2:	460b      	mov	r3, r1
 800dec4:	813b      	strh	r3, [r7, #8]
 800dec6:	4613      	mov	r3, r2
 800dec8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	681a      	ldr	r2, [r3, #0]
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ded8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800deda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dedc:	9300      	str	r3, [sp, #0]
 800dede:	6a3b      	ldr	r3, [r7, #32]
 800dee0:	2200      	movs	r2, #0
 800dee2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800dee6:	68f8      	ldr	r0, [r7, #12]
 800dee8:	f000 f960 	bl	800e1ac <I2C_WaitOnFlagUntilTimeout>
 800deec:	4603      	mov	r3, r0
 800deee:	2b00      	cmp	r3, #0
 800def0:	d00d      	beq.n	800df0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800defc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800df00:	d103      	bne.n	800df0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800df0a:	2303      	movs	r3, #3
 800df0c:	e05f      	b.n	800dfce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800df0e:	897b      	ldrh	r3, [r7, #10]
 800df10:	b2db      	uxtb	r3, r3
 800df12:	461a      	mov	r2, r3
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800df1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800df1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df20:	6a3a      	ldr	r2, [r7, #32]
 800df22:	492d      	ldr	r1, [pc, #180]	@ (800dfd8 <I2C_RequestMemoryWrite+0x128>)
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f000 f9bb 	bl	800e2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800df2a:	4603      	mov	r3, r0
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d001      	beq.n	800df34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800df30:	2301      	movs	r3, #1
 800df32:	e04c      	b.n	800dfce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800df34:	2300      	movs	r3, #0
 800df36:	617b      	str	r3, [r7, #20]
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	695b      	ldr	r3, [r3, #20]
 800df3e:	617b      	str	r3, [r7, #20]
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	699b      	ldr	r3, [r3, #24]
 800df46:	617b      	str	r3, [r7, #20]
 800df48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800df4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df4c:	6a39      	ldr	r1, [r7, #32]
 800df4e:	68f8      	ldr	r0, [r7, #12]
 800df50:	f000 fa46 	bl	800e3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800df54:	4603      	mov	r3, r0
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00d      	beq.n	800df76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df5e:	2b04      	cmp	r3, #4
 800df60:	d107      	bne.n	800df72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800df70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800df72:	2301      	movs	r3, #1
 800df74:	e02b      	b.n	800dfce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800df76:	88fb      	ldrh	r3, [r7, #6]
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d105      	bne.n	800df88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800df7c:	893b      	ldrh	r3, [r7, #8]
 800df7e:	b2da      	uxtb	r2, r3
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	611a      	str	r2, [r3, #16]
 800df86:	e021      	b.n	800dfcc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800df88:	893b      	ldrh	r3, [r7, #8]
 800df8a:	0a1b      	lsrs	r3, r3, #8
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	b2da      	uxtb	r2, r3
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800df96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800df98:	6a39      	ldr	r1, [r7, #32]
 800df9a:	68f8      	ldr	r0, [r7, #12]
 800df9c:	f000 fa20 	bl	800e3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d00d      	beq.n	800dfc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfaa:	2b04      	cmp	r3, #4
 800dfac:	d107      	bne.n	800dfbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	681a      	ldr	r2, [r3, #0]
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dfbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e005      	b.n	800dfce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800dfc2:	893b      	ldrh	r3, [r7, #8]
 800dfc4:	b2da      	uxtb	r2, r3
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800dfcc:	2300      	movs	r3, #0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3718      	adds	r7, #24
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	00010002 	.word	0x00010002

0800dfdc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b088      	sub	sp, #32
 800dfe0:	af02      	add	r7, sp, #8
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	4608      	mov	r0, r1
 800dfe6:	4611      	mov	r1, r2
 800dfe8:	461a      	mov	r2, r3
 800dfea:	4603      	mov	r3, r0
 800dfec:	817b      	strh	r3, [r7, #10]
 800dfee:	460b      	mov	r3, r1
 800dff0:	813b      	strh	r3, [r7, #8]
 800dff2:	4613      	mov	r3, r2
 800dff4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e004:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	681a      	ldr	r2, [r3, #0]
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e014:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e018:	9300      	str	r3, [sp, #0]
 800e01a:	6a3b      	ldr	r3, [r7, #32]
 800e01c:	2200      	movs	r2, #0
 800e01e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e022:	68f8      	ldr	r0, [r7, #12]
 800e024:	f000 f8c2 	bl	800e1ac <I2C_WaitOnFlagUntilTimeout>
 800e028:	4603      	mov	r3, r0
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d00d      	beq.n	800e04a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e038:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e03c:	d103      	bne.n	800e046 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e044:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e046:	2303      	movs	r3, #3
 800e048:	e0aa      	b.n	800e1a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e04a:	897b      	ldrh	r3, [r7, #10]
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	461a      	mov	r2, r3
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800e058:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e05c:	6a3a      	ldr	r2, [r7, #32]
 800e05e:	4952      	ldr	r1, [pc, #328]	@ (800e1a8 <I2C_RequestMemoryRead+0x1cc>)
 800e060:	68f8      	ldr	r0, [r7, #12]
 800e062:	f000 f91d 	bl	800e2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e066:	4603      	mov	r3, r0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d001      	beq.n	800e070 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800e06c:	2301      	movs	r3, #1
 800e06e:	e097      	b.n	800e1a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e070:	2300      	movs	r3, #0
 800e072:	617b      	str	r3, [r7, #20]
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	695b      	ldr	r3, [r3, #20]
 800e07a:	617b      	str	r3, [r7, #20]
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	699b      	ldr	r3, [r3, #24]
 800e082:	617b      	str	r3, [r7, #20]
 800e084:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e088:	6a39      	ldr	r1, [r7, #32]
 800e08a:	68f8      	ldr	r0, [r7, #12]
 800e08c:	f000 f9a8 	bl	800e3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	d00d      	beq.n	800e0b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e09a:	2b04      	cmp	r3, #4
 800e09c:	d107      	bne.n	800e0ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e0ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	e076      	b.n	800e1a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e0b2:	88fb      	ldrh	r3, [r7, #6]
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d105      	bne.n	800e0c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e0b8:	893b      	ldrh	r3, [r7, #8]
 800e0ba:	b2da      	uxtb	r2, r3
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	611a      	str	r2, [r3, #16]
 800e0c2:	e021      	b.n	800e108 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800e0c4:	893b      	ldrh	r3, [r7, #8]
 800e0c6:	0a1b      	lsrs	r3, r3, #8
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	b2da      	uxtb	r2, r3
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e0d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0d4:	6a39      	ldr	r1, [r7, #32]
 800e0d6:	68f8      	ldr	r0, [r7, #12]
 800e0d8:	f000 f982 	bl	800e3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d00d      	beq.n	800e0fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0e6:	2b04      	cmp	r3, #4
 800e0e8:	d107      	bne.n	800e0fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	681a      	ldr	r2, [r3, #0]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e0f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	e050      	b.n	800e1a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800e0fe:	893b      	ldrh	r3, [r7, #8]
 800e100:	b2da      	uxtb	r2, r3
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e10a:	6a39      	ldr	r1, [r7, #32]
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f000 f967 	bl	800e3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	d00d      	beq.n	800e134 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e11c:	2b04      	cmp	r3, #4
 800e11e:	d107      	bne.n	800e130 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e12e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800e130:	2301      	movs	r3, #1
 800e132:	e035      	b.n	800e1a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e142:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800e144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e146:	9300      	str	r3, [sp, #0]
 800e148:	6a3b      	ldr	r3, [r7, #32]
 800e14a:	2200      	movs	r2, #0
 800e14c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800e150:	68f8      	ldr	r0, [r7, #12]
 800e152:	f000 f82b 	bl	800e1ac <I2C_WaitOnFlagUntilTimeout>
 800e156:	4603      	mov	r3, r0
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d00d      	beq.n	800e178 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e16a:	d103      	bne.n	800e174 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e172:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800e174:	2303      	movs	r3, #3
 800e176:	e013      	b.n	800e1a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800e178:	897b      	ldrh	r3, [r7, #10]
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	f043 0301 	orr.w	r3, r3, #1
 800e180:	b2da      	uxtb	r2, r3
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800e188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e18a:	6a3a      	ldr	r2, [r7, #32]
 800e18c:	4906      	ldr	r1, [pc, #24]	@ (800e1a8 <I2C_RequestMemoryRead+0x1cc>)
 800e18e:	68f8      	ldr	r0, [r7, #12]
 800e190:	f000 f886 	bl	800e2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800e194:	4603      	mov	r3, r0
 800e196:	2b00      	cmp	r3, #0
 800e198:	d001      	beq.n	800e19e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800e19a:	2301      	movs	r3, #1
 800e19c:	e000      	b.n	800e1a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800e19e:	2300      	movs	r3, #0
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3718      	adds	r7, #24
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	00010002 	.word	0x00010002

0800e1ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	603b      	str	r3, [r7, #0]
 800e1b8:	4613      	mov	r3, r2
 800e1ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e1bc:	e048      	b.n	800e250 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1c4:	d044      	beq.n	800e250 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e1c6:	f7fe f901 	bl	800c3cc <HAL_GetTick>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	1ad3      	subs	r3, r2, r3
 800e1d0:	683a      	ldr	r2, [r7, #0]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d302      	bcc.n	800e1dc <I2C_WaitOnFlagUntilTimeout+0x30>
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d139      	bne.n	800e250 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	0c1b      	lsrs	r3, r3, #16
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d10d      	bne.n	800e202 <I2C_WaitOnFlagUntilTimeout+0x56>
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	695b      	ldr	r3, [r3, #20]
 800e1ec:	43da      	mvns	r2, r3
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	4013      	ands	r3, r2
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	bf0c      	ite	eq
 800e1f8:	2301      	moveq	r3, #1
 800e1fa:	2300      	movne	r3, #0
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	461a      	mov	r2, r3
 800e200:	e00c      	b.n	800e21c <I2C_WaitOnFlagUntilTimeout+0x70>
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	699b      	ldr	r3, [r3, #24]
 800e208:	43da      	mvns	r2, r3
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	4013      	ands	r3, r2
 800e20e:	b29b      	uxth	r3, r3
 800e210:	2b00      	cmp	r3, #0
 800e212:	bf0c      	ite	eq
 800e214:	2301      	moveq	r3, #1
 800e216:	2300      	movne	r3, #0
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	461a      	mov	r2, r3
 800e21c:	79fb      	ldrb	r3, [r7, #7]
 800e21e:	429a      	cmp	r2, r3
 800e220:	d116      	bne.n	800e250 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2200      	movs	r2, #0
 800e226:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2220      	movs	r2, #32
 800e22c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2200      	movs	r2, #0
 800e234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e23c:	f043 0220 	orr.w	r2, r3, #32
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2200      	movs	r2, #0
 800e248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e24c:	2301      	movs	r3, #1
 800e24e:	e023      	b.n	800e298 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	0c1b      	lsrs	r3, r3, #16
 800e254:	b2db      	uxtb	r3, r3
 800e256:	2b01      	cmp	r3, #1
 800e258:	d10d      	bne.n	800e276 <I2C_WaitOnFlagUntilTimeout+0xca>
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	695b      	ldr	r3, [r3, #20]
 800e260:	43da      	mvns	r2, r3
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	4013      	ands	r3, r2
 800e266:	b29b      	uxth	r3, r3
 800e268:	2b00      	cmp	r3, #0
 800e26a:	bf0c      	ite	eq
 800e26c:	2301      	moveq	r3, #1
 800e26e:	2300      	movne	r3, #0
 800e270:	b2db      	uxtb	r3, r3
 800e272:	461a      	mov	r2, r3
 800e274:	e00c      	b.n	800e290 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	699b      	ldr	r3, [r3, #24]
 800e27c:	43da      	mvns	r2, r3
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	4013      	ands	r3, r2
 800e282:	b29b      	uxth	r3, r3
 800e284:	2b00      	cmp	r3, #0
 800e286:	bf0c      	ite	eq
 800e288:	2301      	moveq	r3, #1
 800e28a:	2300      	movne	r3, #0
 800e28c:	b2db      	uxtb	r3, r3
 800e28e:	461a      	mov	r2, r3
 800e290:	79fb      	ldrb	r3, [r7, #7]
 800e292:	429a      	cmp	r2, r3
 800e294:	d093      	beq.n	800e1be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e296:	2300      	movs	r3, #0
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3710      	adds	r7, #16
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	60f8      	str	r0, [r7, #12]
 800e2a8:	60b9      	str	r1, [r7, #8]
 800e2aa:	607a      	str	r2, [r7, #4]
 800e2ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e2ae:	e071      	b.n	800e394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	695b      	ldr	r3, [r3, #20]
 800e2b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e2ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e2be:	d123      	bne.n	800e308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	681a      	ldr	r2, [r3, #0]
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e2ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e2d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2220      	movs	r2, #32
 800e2e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2f4:	f043 0204 	orr.w	r2, r3, #4
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2200      	movs	r2, #0
 800e300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e304:	2301      	movs	r3, #1
 800e306:	e067      	b.n	800e3d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e30e:	d041      	beq.n	800e394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e310:	f7fe f85c 	bl	800c3cc <HAL_GetTick>
 800e314:	4602      	mov	r2, r0
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	1ad3      	subs	r3, r2, r3
 800e31a:	687a      	ldr	r2, [r7, #4]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d302      	bcc.n	800e326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d136      	bne.n	800e394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	0c1b      	lsrs	r3, r3, #16
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d10c      	bne.n	800e34a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	695b      	ldr	r3, [r3, #20]
 800e336:	43da      	mvns	r2, r3
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	4013      	ands	r3, r2
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	2b00      	cmp	r3, #0
 800e340:	bf14      	ite	ne
 800e342:	2301      	movne	r3, #1
 800e344:	2300      	moveq	r3, #0
 800e346:	b2db      	uxtb	r3, r3
 800e348:	e00b      	b.n	800e362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	699b      	ldr	r3, [r3, #24]
 800e350:	43da      	mvns	r2, r3
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	4013      	ands	r3, r2
 800e356:	b29b      	uxth	r3, r3
 800e358:	2b00      	cmp	r3, #0
 800e35a:	bf14      	ite	ne
 800e35c:	2301      	movne	r3, #1
 800e35e:	2300      	moveq	r3, #0
 800e360:	b2db      	uxtb	r3, r3
 800e362:	2b00      	cmp	r3, #0
 800e364:	d016      	beq.n	800e394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2200      	movs	r2, #0
 800e36a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2220      	movs	r2, #32
 800e370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2200      	movs	r2, #0
 800e378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e380:	f043 0220 	orr.w	r2, r3, #32
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2200      	movs	r2, #0
 800e38c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e390:	2301      	movs	r3, #1
 800e392:	e021      	b.n	800e3d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	0c1b      	lsrs	r3, r3, #16
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d10c      	bne.n	800e3b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	695b      	ldr	r3, [r3, #20]
 800e3a4:	43da      	mvns	r2, r3
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	4013      	ands	r3, r2
 800e3aa:	b29b      	uxth	r3, r3
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	bf14      	ite	ne
 800e3b0:	2301      	movne	r3, #1
 800e3b2:	2300      	moveq	r3, #0
 800e3b4:	b2db      	uxtb	r3, r3
 800e3b6:	e00b      	b.n	800e3d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	699b      	ldr	r3, [r3, #24]
 800e3be:	43da      	mvns	r2, r3
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	4013      	ands	r3, r2
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	bf14      	ite	ne
 800e3ca:	2301      	movne	r3, #1
 800e3cc:	2300      	moveq	r3, #0
 800e3ce:	b2db      	uxtb	r3, r3
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	f47f af6d 	bne.w	800e2b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800e3d6:	2300      	movs	r3, #0
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3710      	adds	r7, #16
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}

0800e3e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	60f8      	str	r0, [r7, #12]
 800e3e8:	60b9      	str	r1, [r7, #8]
 800e3ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e3ec:	e034      	b.n	800e458 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e3ee:	68f8      	ldr	r0, [r7, #12]
 800e3f0:	f000 f8e3 	bl	800e5ba <I2C_IsAcknowledgeFailed>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d001      	beq.n	800e3fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	e034      	b.n	800e468 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e404:	d028      	beq.n	800e458 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e406:	f7fd ffe1 	bl	800c3cc <HAL_GetTick>
 800e40a:	4602      	mov	r2, r0
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	1ad3      	subs	r3, r2, r3
 800e410:	68ba      	ldr	r2, [r7, #8]
 800e412:	429a      	cmp	r2, r3
 800e414:	d302      	bcc.n	800e41c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d11d      	bne.n	800e458 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	695b      	ldr	r3, [r3, #20]
 800e422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e426:	2b80      	cmp	r3, #128	@ 0x80
 800e428:	d016      	beq.n	800e458 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2200      	movs	r2, #0
 800e42e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2220      	movs	r2, #32
 800e434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2200      	movs	r2, #0
 800e43c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e444:	f043 0220 	orr.w	r2, r3, #32
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	2200      	movs	r2, #0
 800e450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e454:	2301      	movs	r3, #1
 800e456:	e007      	b.n	800e468 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	695b      	ldr	r3, [r3, #20]
 800e45e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e462:	2b80      	cmp	r3, #128	@ 0x80
 800e464:	d1c3      	bne.n	800e3ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e466:	2300      	movs	r3, #0
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	60b9      	str	r1, [r7, #8]
 800e47a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e47c:	e034      	b.n	800e4e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800e47e:	68f8      	ldr	r0, [r7, #12]
 800e480:	f000 f89b 	bl	800e5ba <I2C_IsAcknowledgeFailed>
 800e484:	4603      	mov	r3, r0
 800e486:	2b00      	cmp	r3, #0
 800e488:	d001      	beq.n	800e48e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800e48a:	2301      	movs	r3, #1
 800e48c:	e034      	b.n	800e4f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e494:	d028      	beq.n	800e4e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e496:	f7fd ff99 	bl	800c3cc <HAL_GetTick>
 800e49a:	4602      	mov	r2, r0
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	1ad3      	subs	r3, r2, r3
 800e4a0:	68ba      	ldr	r2, [r7, #8]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d302      	bcc.n	800e4ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d11d      	bne.n	800e4e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	695b      	ldr	r3, [r3, #20]
 800e4b2:	f003 0304 	and.w	r3, r3, #4
 800e4b6:	2b04      	cmp	r3, #4
 800e4b8:	d016      	beq.n	800e4e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2220      	movs	r2, #32
 800e4c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4d4:	f043 0220 	orr.w	r2, r3, #32
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	e007      	b.n	800e4f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	695b      	ldr	r3, [r3, #20]
 800e4ee:	f003 0304 	and.w	r3, r3, #4
 800e4f2:	2b04      	cmp	r3, #4
 800e4f4:	d1c3      	bne.n	800e47e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e4f6:	2300      	movs	r3, #0
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3710      	adds	r7, #16
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b084      	sub	sp, #16
 800e504:	af00      	add	r7, sp, #0
 800e506:	60f8      	str	r0, [r7, #12]
 800e508:	60b9      	str	r1, [r7, #8]
 800e50a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e50c:	e049      	b.n	800e5a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	695b      	ldr	r3, [r3, #20]
 800e514:	f003 0310 	and.w	r3, r3, #16
 800e518:	2b10      	cmp	r3, #16
 800e51a:	d119      	bne.n	800e550 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f06f 0210 	mvn.w	r2, #16
 800e524:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2200      	movs	r2, #0
 800e52a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	2220      	movs	r2, #32
 800e530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2200      	movs	r2, #0
 800e538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2200      	movs	r2, #0
 800e548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800e54c:	2301      	movs	r3, #1
 800e54e:	e030      	b.n	800e5b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e550:	f7fd ff3c 	bl	800c3cc <HAL_GetTick>
 800e554:	4602      	mov	r2, r0
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	1ad3      	subs	r3, r2, r3
 800e55a:	68ba      	ldr	r2, [r7, #8]
 800e55c:	429a      	cmp	r2, r3
 800e55e:	d302      	bcc.n	800e566 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d11d      	bne.n	800e5a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	695b      	ldr	r3, [r3, #20]
 800e56c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e570:	2b40      	cmp	r3, #64	@ 0x40
 800e572:	d016      	beq.n	800e5a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	2200      	movs	r2, #0
 800e578:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2220      	movs	r2, #32
 800e57e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2200      	movs	r2, #0
 800e586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e58e:	f043 0220 	orr.w	r2, r3, #32
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2200      	movs	r2, #0
 800e59a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	e007      	b.n	800e5b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	695b      	ldr	r3, [r3, #20]
 800e5a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5ac:	2b40      	cmp	r3, #64	@ 0x40
 800e5ae:	d1ae      	bne.n	800e50e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e5b0:	2300      	movs	r3, #0
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3710      	adds	r7, #16
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}

0800e5ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800e5ba:	b480      	push	{r7}
 800e5bc:	b083      	sub	sp, #12
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	695b      	ldr	r3, [r3, #20]
 800e5c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e5cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e5d0:	d11b      	bne.n	800e60a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800e5da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2220      	movs	r2, #32
 800e5e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5f6:	f043 0204 	orr.w	r2, r3, #4
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2200      	movs	r2, #0
 800e602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800e606:	2301      	movs	r3, #1
 800e608:	e000      	b.n	800e60c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800e60a:	2300      	movs	r3, #0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	370c      	adds	r7, #12
 800e610:	46bd      	mov	sp, r7
 800e612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e616:	4770      	bx	lr

0800e618 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b086      	sub	sp, #24
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d101      	bne.n	800e62a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e626:	2301      	movs	r3, #1
 800e628:	e267      	b.n	800eafa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f003 0301 	and.w	r3, r3, #1
 800e632:	2b00      	cmp	r3, #0
 800e634:	d075      	beq.n	800e722 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e636:	4b88      	ldr	r3, [pc, #544]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e638:	689b      	ldr	r3, [r3, #8]
 800e63a:	f003 030c 	and.w	r3, r3, #12
 800e63e:	2b04      	cmp	r3, #4
 800e640:	d00c      	beq.n	800e65c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e642:	4b85      	ldr	r3, [pc, #532]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e644:	689b      	ldr	r3, [r3, #8]
 800e646:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800e64a:	2b08      	cmp	r3, #8
 800e64c:	d112      	bne.n	800e674 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e64e:	4b82      	ldr	r3, [pc, #520]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e656:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e65a:	d10b      	bne.n	800e674 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e65c:	4b7e      	ldr	r3, [pc, #504]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e664:	2b00      	cmp	r3, #0
 800e666:	d05b      	beq.n	800e720 <HAL_RCC_OscConfig+0x108>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d157      	bne.n	800e720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e670:	2301      	movs	r3, #1
 800e672:	e242      	b.n	800eafa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e67c:	d106      	bne.n	800e68c <HAL_RCC_OscConfig+0x74>
 800e67e:	4b76      	ldr	r3, [pc, #472]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	4a75      	ldr	r2, [pc, #468]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e688:	6013      	str	r3, [r2, #0]
 800e68a:	e01d      	b.n	800e6c8 <HAL_RCC_OscConfig+0xb0>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	685b      	ldr	r3, [r3, #4]
 800e690:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e694:	d10c      	bne.n	800e6b0 <HAL_RCC_OscConfig+0x98>
 800e696:	4b70      	ldr	r3, [pc, #448]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4a6f      	ldr	r2, [pc, #444]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e69c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e6a0:	6013      	str	r3, [r2, #0]
 800e6a2:	4b6d      	ldr	r3, [pc, #436]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4a6c      	ldr	r2, [pc, #432]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e6a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e6ac:	6013      	str	r3, [r2, #0]
 800e6ae:	e00b      	b.n	800e6c8 <HAL_RCC_OscConfig+0xb0>
 800e6b0:	4b69      	ldr	r3, [pc, #420]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4a68      	ldr	r2, [pc, #416]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e6b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e6ba:	6013      	str	r3, [r2, #0]
 800e6bc:	4b66      	ldr	r3, [pc, #408]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	4a65      	ldr	r2, [pc, #404]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e6c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e6c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	685b      	ldr	r3, [r3, #4]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d013      	beq.n	800e6f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e6d0:	f7fd fe7c 	bl	800c3cc <HAL_GetTick>
 800e6d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e6d6:	e008      	b.n	800e6ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e6d8:	f7fd fe78 	bl	800c3cc <HAL_GetTick>
 800e6dc:	4602      	mov	r2, r0
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	1ad3      	subs	r3, r2, r3
 800e6e2:	2b64      	cmp	r3, #100	@ 0x64
 800e6e4:	d901      	bls.n	800e6ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e6e6:	2303      	movs	r3, #3
 800e6e8:	e207      	b.n	800eafa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e6ea:	4b5b      	ldr	r3, [pc, #364]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d0f0      	beq.n	800e6d8 <HAL_RCC_OscConfig+0xc0>
 800e6f6:	e014      	b.n	800e722 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e6f8:	f7fd fe68 	bl	800c3cc <HAL_GetTick>
 800e6fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e6fe:	e008      	b.n	800e712 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e700:	f7fd fe64 	bl	800c3cc <HAL_GetTick>
 800e704:	4602      	mov	r2, r0
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	1ad3      	subs	r3, r2, r3
 800e70a:	2b64      	cmp	r3, #100	@ 0x64
 800e70c:	d901      	bls.n	800e712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e70e:	2303      	movs	r3, #3
 800e710:	e1f3      	b.n	800eafa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e712:	4b51      	ldr	r3, [pc, #324]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d1f0      	bne.n	800e700 <HAL_RCC_OscConfig+0xe8>
 800e71e:	e000      	b.n	800e722 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f003 0302 	and.w	r3, r3, #2
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d063      	beq.n	800e7f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e72e:	4b4a      	ldr	r3, [pc, #296]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e730:	689b      	ldr	r3, [r3, #8]
 800e732:	f003 030c 	and.w	r3, r3, #12
 800e736:	2b00      	cmp	r3, #0
 800e738:	d00b      	beq.n	800e752 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e73a:	4b47      	ldr	r3, [pc, #284]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800e742:	2b08      	cmp	r3, #8
 800e744:	d11c      	bne.n	800e780 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e746:	4b44      	ldr	r3, [pc, #272]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d116      	bne.n	800e780 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e752:	4b41      	ldr	r3, [pc, #260]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f003 0302 	and.w	r3, r3, #2
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d005      	beq.n	800e76a <HAL_RCC_OscConfig+0x152>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	68db      	ldr	r3, [r3, #12]
 800e762:	2b01      	cmp	r3, #1
 800e764:	d001      	beq.n	800e76a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e766:	2301      	movs	r3, #1
 800e768:	e1c7      	b.n	800eafa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e76a:	4b3b      	ldr	r3, [pc, #236]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	691b      	ldr	r3, [r3, #16]
 800e776:	00db      	lsls	r3, r3, #3
 800e778:	4937      	ldr	r1, [pc, #220]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e77a:	4313      	orrs	r3, r2
 800e77c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e77e:	e03a      	b.n	800e7f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d020      	beq.n	800e7ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e788:	4b34      	ldr	r3, [pc, #208]	@ (800e85c <HAL_RCC_OscConfig+0x244>)
 800e78a:	2201      	movs	r2, #1
 800e78c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e78e:	f7fd fe1d 	bl	800c3cc <HAL_GetTick>
 800e792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e794:	e008      	b.n	800e7a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e796:	f7fd fe19 	bl	800c3cc <HAL_GetTick>
 800e79a:	4602      	mov	r2, r0
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	1ad3      	subs	r3, r2, r3
 800e7a0:	2b02      	cmp	r3, #2
 800e7a2:	d901      	bls.n	800e7a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e7a4:	2303      	movs	r3, #3
 800e7a6:	e1a8      	b.n	800eafa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e7a8:	4b2b      	ldr	r3, [pc, #172]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f003 0302 	and.w	r3, r3, #2
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d0f0      	beq.n	800e796 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e7b4:	4b28      	ldr	r3, [pc, #160]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	691b      	ldr	r3, [r3, #16]
 800e7c0:	00db      	lsls	r3, r3, #3
 800e7c2:	4925      	ldr	r1, [pc, #148]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e7c4:	4313      	orrs	r3, r2
 800e7c6:	600b      	str	r3, [r1, #0]
 800e7c8:	e015      	b.n	800e7f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e7ca:	4b24      	ldr	r3, [pc, #144]	@ (800e85c <HAL_RCC_OscConfig+0x244>)
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7d0:	f7fd fdfc 	bl	800c3cc <HAL_GetTick>
 800e7d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e7d6:	e008      	b.n	800e7ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e7d8:	f7fd fdf8 	bl	800c3cc <HAL_GetTick>
 800e7dc:	4602      	mov	r2, r0
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	1ad3      	subs	r3, r2, r3
 800e7e2:	2b02      	cmp	r3, #2
 800e7e4:	d901      	bls.n	800e7ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e7e6:	2303      	movs	r3, #3
 800e7e8:	e187      	b.n	800eafa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e7ea:	4b1b      	ldr	r3, [pc, #108]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f003 0302 	and.w	r3, r3, #2
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d1f0      	bne.n	800e7d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f003 0308 	and.w	r3, r3, #8
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d036      	beq.n	800e870 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	695b      	ldr	r3, [r3, #20]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d016      	beq.n	800e838 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e80a:	4b15      	ldr	r3, [pc, #84]	@ (800e860 <HAL_RCC_OscConfig+0x248>)
 800e80c:	2201      	movs	r2, #1
 800e80e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e810:	f7fd fddc 	bl	800c3cc <HAL_GetTick>
 800e814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e816:	e008      	b.n	800e82a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e818:	f7fd fdd8 	bl	800c3cc <HAL_GetTick>
 800e81c:	4602      	mov	r2, r0
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	1ad3      	subs	r3, r2, r3
 800e822:	2b02      	cmp	r3, #2
 800e824:	d901      	bls.n	800e82a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e826:	2303      	movs	r3, #3
 800e828:	e167      	b.n	800eafa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e82a:	4b0b      	ldr	r3, [pc, #44]	@ (800e858 <HAL_RCC_OscConfig+0x240>)
 800e82c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e82e:	f003 0302 	and.w	r3, r3, #2
 800e832:	2b00      	cmp	r3, #0
 800e834:	d0f0      	beq.n	800e818 <HAL_RCC_OscConfig+0x200>
 800e836:	e01b      	b.n	800e870 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e838:	4b09      	ldr	r3, [pc, #36]	@ (800e860 <HAL_RCC_OscConfig+0x248>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e83e:	f7fd fdc5 	bl	800c3cc <HAL_GetTick>
 800e842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e844:	e00e      	b.n	800e864 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e846:	f7fd fdc1 	bl	800c3cc <HAL_GetTick>
 800e84a:	4602      	mov	r2, r0
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	1ad3      	subs	r3, r2, r3
 800e850:	2b02      	cmp	r3, #2
 800e852:	d907      	bls.n	800e864 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800e854:	2303      	movs	r3, #3
 800e856:	e150      	b.n	800eafa <HAL_RCC_OscConfig+0x4e2>
 800e858:	40023800 	.word	0x40023800
 800e85c:	42470000 	.word	0x42470000
 800e860:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e864:	4b88      	ldr	r3, [pc, #544]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e868:	f003 0302 	and.w	r3, r3, #2
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d1ea      	bne.n	800e846 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	f003 0304 	and.w	r3, r3, #4
 800e878:	2b00      	cmp	r3, #0
 800e87a:	f000 8097 	beq.w	800e9ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e87e:	2300      	movs	r3, #0
 800e880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e882:	4b81      	ldr	r3, [pc, #516]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d10f      	bne.n	800e8ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e88e:	2300      	movs	r3, #0
 800e890:	60bb      	str	r3, [r7, #8]
 800e892:	4b7d      	ldr	r3, [pc, #500]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e896:	4a7c      	ldr	r2, [pc, #496]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e89c:	6413      	str	r3, [r2, #64]	@ 0x40
 800e89e:	4b7a      	ldr	r3, [pc, #488]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e8a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e8a6:	60bb      	str	r3, [r7, #8]
 800e8a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e8ae:	4b77      	ldr	r3, [pc, #476]	@ (800ea8c <HAL_RCC_OscConfig+0x474>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d118      	bne.n	800e8ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e8ba:	4b74      	ldr	r3, [pc, #464]	@ (800ea8c <HAL_RCC_OscConfig+0x474>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	4a73      	ldr	r2, [pc, #460]	@ (800ea8c <HAL_RCC_OscConfig+0x474>)
 800e8c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e8c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e8c6:	f7fd fd81 	bl	800c3cc <HAL_GetTick>
 800e8ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e8cc:	e008      	b.n	800e8e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e8ce:	f7fd fd7d 	bl	800c3cc <HAL_GetTick>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	1ad3      	subs	r3, r2, r3
 800e8d8:	2b02      	cmp	r3, #2
 800e8da:	d901      	bls.n	800e8e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800e8dc:	2303      	movs	r3, #3
 800e8de:	e10c      	b.n	800eafa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e8e0:	4b6a      	ldr	r3, [pc, #424]	@ (800ea8c <HAL_RCC_OscConfig+0x474>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d0f0      	beq.n	800e8ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	689b      	ldr	r3, [r3, #8]
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	d106      	bne.n	800e902 <HAL_RCC_OscConfig+0x2ea>
 800e8f4:	4b64      	ldr	r3, [pc, #400]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e8f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e8f8:	4a63      	ldr	r2, [pc, #396]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e8fa:	f043 0301 	orr.w	r3, r3, #1
 800e8fe:	6713      	str	r3, [r2, #112]	@ 0x70
 800e900:	e01c      	b.n	800e93c <HAL_RCC_OscConfig+0x324>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	689b      	ldr	r3, [r3, #8]
 800e906:	2b05      	cmp	r3, #5
 800e908:	d10c      	bne.n	800e924 <HAL_RCC_OscConfig+0x30c>
 800e90a:	4b5f      	ldr	r3, [pc, #380]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e90c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e90e:	4a5e      	ldr	r2, [pc, #376]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e910:	f043 0304 	orr.w	r3, r3, #4
 800e914:	6713      	str	r3, [r2, #112]	@ 0x70
 800e916:	4b5c      	ldr	r3, [pc, #368]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e91a:	4a5b      	ldr	r2, [pc, #364]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e91c:	f043 0301 	orr.w	r3, r3, #1
 800e920:	6713      	str	r3, [r2, #112]	@ 0x70
 800e922:	e00b      	b.n	800e93c <HAL_RCC_OscConfig+0x324>
 800e924:	4b58      	ldr	r3, [pc, #352]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e928:	4a57      	ldr	r2, [pc, #348]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e92a:	f023 0301 	bic.w	r3, r3, #1
 800e92e:	6713      	str	r3, [r2, #112]	@ 0x70
 800e930:	4b55      	ldr	r3, [pc, #340]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e934:	4a54      	ldr	r2, [pc, #336]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e936:	f023 0304 	bic.w	r3, r3, #4
 800e93a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	689b      	ldr	r3, [r3, #8]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d015      	beq.n	800e970 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e944:	f7fd fd42 	bl	800c3cc <HAL_GetTick>
 800e948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e94a:	e00a      	b.n	800e962 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e94c:	f7fd fd3e 	bl	800c3cc <HAL_GetTick>
 800e950:	4602      	mov	r2, r0
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	1ad3      	subs	r3, r2, r3
 800e956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d901      	bls.n	800e962 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800e95e:	2303      	movs	r3, #3
 800e960:	e0cb      	b.n	800eafa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e962:	4b49      	ldr	r3, [pc, #292]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e966:	f003 0302 	and.w	r3, r3, #2
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d0ee      	beq.n	800e94c <HAL_RCC_OscConfig+0x334>
 800e96e:	e014      	b.n	800e99a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e970:	f7fd fd2c 	bl	800c3cc <HAL_GetTick>
 800e974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e976:	e00a      	b.n	800e98e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e978:	f7fd fd28 	bl	800c3cc <HAL_GetTick>
 800e97c:	4602      	mov	r2, r0
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	1ad3      	subs	r3, r2, r3
 800e982:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e986:	4293      	cmp	r3, r2
 800e988:	d901      	bls.n	800e98e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800e98a:	2303      	movs	r3, #3
 800e98c:	e0b5      	b.n	800eafa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e98e:	4b3e      	ldr	r3, [pc, #248]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e992:	f003 0302 	and.w	r3, r3, #2
 800e996:	2b00      	cmp	r3, #0
 800e998:	d1ee      	bne.n	800e978 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e99a:	7dfb      	ldrb	r3, [r7, #23]
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	d105      	bne.n	800e9ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e9a0:	4b39      	ldr	r3, [pc, #228]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e9a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9a4:	4a38      	ldr	r2, [pc, #224]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e9a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e9aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	699b      	ldr	r3, [r3, #24]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	f000 80a1 	beq.w	800eaf8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e9b6:	4b34      	ldr	r3, [pc, #208]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e9b8:	689b      	ldr	r3, [r3, #8]
 800e9ba:	f003 030c 	and.w	r3, r3, #12
 800e9be:	2b08      	cmp	r3, #8
 800e9c0:	d05c      	beq.n	800ea7c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	699b      	ldr	r3, [r3, #24]
 800e9c6:	2b02      	cmp	r3, #2
 800e9c8:	d141      	bne.n	800ea4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e9ca:	4b31      	ldr	r3, [pc, #196]	@ (800ea90 <HAL_RCC_OscConfig+0x478>)
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e9d0:	f7fd fcfc 	bl	800c3cc <HAL_GetTick>
 800e9d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e9d6:	e008      	b.n	800e9ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e9d8:	f7fd fcf8 	bl	800c3cc <HAL_GetTick>
 800e9dc:	4602      	mov	r2, r0
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	1ad3      	subs	r3, r2, r3
 800e9e2:	2b02      	cmp	r3, #2
 800e9e4:	d901      	bls.n	800e9ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800e9e6:	2303      	movs	r3, #3
 800e9e8:	e087      	b.n	800eafa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e9ea:	4b27      	ldr	r3, [pc, #156]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d1f0      	bne.n	800e9d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	69da      	ldr	r2, [r3, #28]
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6a1b      	ldr	r3, [r3, #32]
 800e9fe:	431a      	orrs	r2, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea04:	019b      	lsls	r3, r3, #6
 800ea06:	431a      	orrs	r2, r3
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea0c:	085b      	lsrs	r3, r3, #1
 800ea0e:	3b01      	subs	r3, #1
 800ea10:	041b      	lsls	r3, r3, #16
 800ea12:	431a      	orrs	r2, r3
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea18:	061b      	lsls	r3, r3, #24
 800ea1a:	491b      	ldr	r1, [pc, #108]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ea20:	4b1b      	ldr	r3, [pc, #108]	@ (800ea90 <HAL_RCC_OscConfig+0x478>)
 800ea22:	2201      	movs	r2, #1
 800ea24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea26:	f7fd fcd1 	bl	800c3cc <HAL_GetTick>
 800ea2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ea2c:	e008      	b.n	800ea40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ea2e:	f7fd fccd 	bl	800c3cc <HAL_GetTick>
 800ea32:	4602      	mov	r2, r0
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	1ad3      	subs	r3, r2, r3
 800ea38:	2b02      	cmp	r3, #2
 800ea3a:	d901      	bls.n	800ea40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ea3c:	2303      	movs	r3, #3
 800ea3e:	e05c      	b.n	800eafa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ea40:	4b11      	ldr	r3, [pc, #68]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d0f0      	beq.n	800ea2e <HAL_RCC_OscConfig+0x416>
 800ea4c:	e054      	b.n	800eaf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ea4e:	4b10      	ldr	r3, [pc, #64]	@ (800ea90 <HAL_RCC_OscConfig+0x478>)
 800ea50:	2200      	movs	r2, #0
 800ea52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea54:	f7fd fcba 	bl	800c3cc <HAL_GetTick>
 800ea58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ea5a:	e008      	b.n	800ea6e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ea5c:	f7fd fcb6 	bl	800c3cc <HAL_GetTick>
 800ea60:	4602      	mov	r2, r0
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	1ad3      	subs	r3, r2, r3
 800ea66:	2b02      	cmp	r3, #2
 800ea68:	d901      	bls.n	800ea6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ea6a:	2303      	movs	r3, #3
 800ea6c:	e045      	b.n	800eafa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ea6e:	4b06      	ldr	r3, [pc, #24]	@ (800ea88 <HAL_RCC_OscConfig+0x470>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d1f0      	bne.n	800ea5c <HAL_RCC_OscConfig+0x444>
 800ea7a:	e03d      	b.n	800eaf8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	699b      	ldr	r3, [r3, #24]
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d107      	bne.n	800ea94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ea84:	2301      	movs	r3, #1
 800ea86:	e038      	b.n	800eafa <HAL_RCC_OscConfig+0x4e2>
 800ea88:	40023800 	.word	0x40023800
 800ea8c:	40007000 	.word	0x40007000
 800ea90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ea94:	4b1b      	ldr	r3, [pc, #108]	@ (800eb04 <HAL_RCC_OscConfig+0x4ec>)
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	699b      	ldr	r3, [r3, #24]
 800ea9e:	2b01      	cmp	r3, #1
 800eaa0:	d028      	beq.n	800eaf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d121      	bne.n	800eaf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d11a      	bne.n	800eaf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800eabe:	68fa      	ldr	r2, [r7, #12]
 800eac0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800eac4:	4013      	ands	r3, r2
 800eac6:	687a      	ldr	r2, [r7, #4]
 800eac8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800eaca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800eacc:	4293      	cmp	r3, r2
 800eace:	d111      	bne.n	800eaf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eada:	085b      	lsrs	r3, r3, #1
 800eadc:	3b01      	subs	r3, #1
 800eade:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d107      	bne.n	800eaf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eaee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	d001      	beq.n	800eaf8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	e000      	b.n	800eafa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800eaf8:	2300      	movs	r3, #0
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3718      	adds	r7, #24
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	40023800 	.word	0x40023800

0800eb08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b084      	sub	sp, #16
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d101      	bne.n	800eb1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800eb18:	2301      	movs	r3, #1
 800eb1a:	e0cc      	b.n	800ecb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800eb1c:	4b68      	ldr	r3, [pc, #416]	@ (800ecc0 <HAL_RCC_ClockConfig+0x1b8>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	f003 0307 	and.w	r3, r3, #7
 800eb24:	683a      	ldr	r2, [r7, #0]
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d90c      	bls.n	800eb44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eb2a:	4b65      	ldr	r3, [pc, #404]	@ (800ecc0 <HAL_RCC_ClockConfig+0x1b8>)
 800eb2c:	683a      	ldr	r2, [r7, #0]
 800eb2e:	b2d2      	uxtb	r2, r2
 800eb30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800eb32:	4b63      	ldr	r3, [pc, #396]	@ (800ecc0 <HAL_RCC_ClockConfig+0x1b8>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	f003 0307 	and.w	r3, r3, #7
 800eb3a:	683a      	ldr	r2, [r7, #0]
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	d001      	beq.n	800eb44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800eb40:	2301      	movs	r3, #1
 800eb42:	e0b8      	b.n	800ecb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f003 0302 	and.w	r3, r3, #2
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d020      	beq.n	800eb92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	f003 0304 	and.w	r3, r3, #4
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d005      	beq.n	800eb68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800eb5c:	4b59      	ldr	r3, [pc, #356]	@ (800ecc4 <HAL_RCC_ClockConfig+0x1bc>)
 800eb5e:	689b      	ldr	r3, [r3, #8]
 800eb60:	4a58      	ldr	r2, [pc, #352]	@ (800ecc4 <HAL_RCC_ClockConfig+0x1bc>)
 800eb62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800eb66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f003 0308 	and.w	r3, r3, #8
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d005      	beq.n	800eb80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800eb74:	4b53      	ldr	r3, [pc, #332]	@ (800ecc4 <HAL_RCC_ClockConfig+0x1bc>)
 800eb76:	689b      	ldr	r3, [r3, #8]
 800eb78:	4a52      	ldr	r2, [pc, #328]	@ (800ecc4 <HAL_RCC_ClockConfig+0x1bc>)
 800eb7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800eb7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eb80:	4b50      	ldr	r3, [pc, #320]	@ (800ecc4 <HAL_RCC_ClockConfig+0x1bc>)
 800eb82:	689b      	ldr	r3, [r3, #8]
 800eb84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	689b      	ldr	r3, [r3, #8]
 800eb8c:	494d      	ldr	r1, [pc, #308]	@ (800ecc4 <HAL_RCC_ClockConfig+0x1bc>)
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	f003 0301 	and.w	r3, r3, #1
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d044      	beq.n	800ec28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	2b01      	cmp	r3, #1
 800eba4:	d107      	bne.n	800ebb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eba6:	4b47      	ldr	r3, [pc, #284]	@ (800ecc4 <HAL_RCC_ClockConfig+0x1bc>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d119      	bne.n	800ebe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	e07f      	b.n	800ecb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	685b      	ldr	r3, [r3, #4]
 800ebba:	2b02      	cmp	r3, #2
 800ebbc:	d003      	beq.n	800ebc6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ebc2:	2b03      	cmp	r3, #3
 800ebc4:	d107      	bne.n	800ebd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ebc6:	4b3f      	ldr	r3, [pc, #252]	@ (800ecc4 <HAL_RCC_ClockConfig+0x1bc>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d109      	bne.n	800ebe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	e06f      	b.n	800ecb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ebd6:	4b3b      	ldr	r3, [pc, #236]	@ (800ecc4 <HAL_RCC_ClockConfig+0x1bc>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	f003 0302 	and.w	r3, r3, #2
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d101      	bne.n	800ebe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	e067      	b.n	800ecb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ebe6:	4b37      	ldr	r3, [pc, #220]	@ (800ecc4 <HAL_RCC_ClockConfig+0x1bc>)
 800ebe8:	689b      	ldr	r3, [r3, #8]
 800ebea:	f023 0203 	bic.w	r2, r3, #3
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	4934      	ldr	r1, [pc, #208]	@ (800ecc4 <HAL_RCC_ClockConfig+0x1bc>)
 800ebf4:	4313      	orrs	r3, r2
 800ebf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ebf8:	f7fd fbe8 	bl	800c3cc <HAL_GetTick>
 800ebfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ebfe:	e00a      	b.n	800ec16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ec00:	f7fd fbe4 	bl	800c3cc <HAL_GetTick>
 800ec04:	4602      	mov	r2, r0
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	1ad3      	subs	r3, r2, r3
 800ec0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d901      	bls.n	800ec16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ec12:	2303      	movs	r3, #3
 800ec14:	e04f      	b.n	800ecb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ec16:	4b2b      	ldr	r3, [pc, #172]	@ (800ecc4 <HAL_RCC_ClockConfig+0x1bc>)
 800ec18:	689b      	ldr	r3, [r3, #8]
 800ec1a:	f003 020c 	and.w	r2, r3, #12
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	009b      	lsls	r3, r3, #2
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d1eb      	bne.n	800ec00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ec28:	4b25      	ldr	r3, [pc, #148]	@ (800ecc0 <HAL_RCC_ClockConfig+0x1b8>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f003 0307 	and.w	r3, r3, #7
 800ec30:	683a      	ldr	r2, [r7, #0]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d20c      	bcs.n	800ec50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ec36:	4b22      	ldr	r3, [pc, #136]	@ (800ecc0 <HAL_RCC_ClockConfig+0x1b8>)
 800ec38:	683a      	ldr	r2, [r7, #0]
 800ec3a:	b2d2      	uxtb	r2, r2
 800ec3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ec3e:	4b20      	ldr	r3, [pc, #128]	@ (800ecc0 <HAL_RCC_ClockConfig+0x1b8>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f003 0307 	and.w	r3, r3, #7
 800ec46:	683a      	ldr	r2, [r7, #0]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d001      	beq.n	800ec50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	e032      	b.n	800ecb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	f003 0304 	and.w	r3, r3, #4
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d008      	beq.n	800ec6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ec5c:	4b19      	ldr	r3, [pc, #100]	@ (800ecc4 <HAL_RCC_ClockConfig+0x1bc>)
 800ec5e:	689b      	ldr	r3, [r3, #8]
 800ec60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	68db      	ldr	r3, [r3, #12]
 800ec68:	4916      	ldr	r1, [pc, #88]	@ (800ecc4 <HAL_RCC_ClockConfig+0x1bc>)
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	f003 0308 	and.w	r3, r3, #8
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d009      	beq.n	800ec8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ec7a:	4b12      	ldr	r3, [pc, #72]	@ (800ecc4 <HAL_RCC_ClockConfig+0x1bc>)
 800ec7c:	689b      	ldr	r3, [r3, #8]
 800ec7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	691b      	ldr	r3, [r3, #16]
 800ec86:	00db      	lsls	r3, r3, #3
 800ec88:	490e      	ldr	r1, [pc, #56]	@ (800ecc4 <HAL_RCC_ClockConfig+0x1bc>)
 800ec8a:	4313      	orrs	r3, r2
 800ec8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ec8e:	f000 f821 	bl	800ecd4 <HAL_RCC_GetSysClockFreq>
 800ec92:	4602      	mov	r2, r0
 800ec94:	4b0b      	ldr	r3, [pc, #44]	@ (800ecc4 <HAL_RCC_ClockConfig+0x1bc>)
 800ec96:	689b      	ldr	r3, [r3, #8]
 800ec98:	091b      	lsrs	r3, r3, #4
 800ec9a:	f003 030f 	and.w	r3, r3, #15
 800ec9e:	490a      	ldr	r1, [pc, #40]	@ (800ecc8 <HAL_RCC_ClockConfig+0x1c0>)
 800eca0:	5ccb      	ldrb	r3, [r1, r3]
 800eca2:	fa22 f303 	lsr.w	r3, r2, r3
 800eca6:	4a09      	ldr	r2, [pc, #36]	@ (800eccc <HAL_RCC_ClockConfig+0x1c4>)
 800eca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800ecaa:	4b09      	ldr	r3, [pc, #36]	@ (800ecd0 <HAL_RCC_ClockConfig+0x1c8>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7fd fb48 	bl	800c344 <HAL_InitTick>

  return HAL_OK;
 800ecb4:	2300      	movs	r3, #0
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3710      	adds	r7, #16
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	40023c00 	.word	0x40023c00
 800ecc4:	40023800 	.word	0x40023800
 800ecc8:	0801788c 	.word	0x0801788c
 800eccc:	20000000 	.word	0x20000000
 800ecd0:	20000220 	.word	0x20000220

0800ecd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ecd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ecd8:	b094      	sub	sp, #80	@ 0x50
 800ecda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800ece0:	2300      	movs	r3, #0
 800ece2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800ece4:	2300      	movs	r3, #0
 800ece6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800ece8:	2300      	movs	r3, #0
 800ecea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ecec:	4b79      	ldr	r3, [pc, #484]	@ (800eed4 <HAL_RCC_GetSysClockFreq+0x200>)
 800ecee:	689b      	ldr	r3, [r3, #8]
 800ecf0:	f003 030c 	and.w	r3, r3, #12
 800ecf4:	2b08      	cmp	r3, #8
 800ecf6:	d00d      	beq.n	800ed14 <HAL_RCC_GetSysClockFreq+0x40>
 800ecf8:	2b08      	cmp	r3, #8
 800ecfa:	f200 80e1 	bhi.w	800eec0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d002      	beq.n	800ed08 <HAL_RCC_GetSysClockFreq+0x34>
 800ed02:	2b04      	cmp	r3, #4
 800ed04:	d003      	beq.n	800ed0e <HAL_RCC_GetSysClockFreq+0x3a>
 800ed06:	e0db      	b.n	800eec0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ed08:	4b73      	ldr	r3, [pc, #460]	@ (800eed8 <HAL_RCC_GetSysClockFreq+0x204>)
 800ed0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ed0c:	e0db      	b.n	800eec6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ed0e:	4b73      	ldr	r3, [pc, #460]	@ (800eedc <HAL_RCC_GetSysClockFreq+0x208>)
 800ed10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ed12:	e0d8      	b.n	800eec6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ed14:	4b6f      	ldr	r3, [pc, #444]	@ (800eed4 <HAL_RCC_GetSysClockFreq+0x200>)
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ed1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ed1e:	4b6d      	ldr	r3, [pc, #436]	@ (800eed4 <HAL_RCC_GetSysClockFreq+0x200>)
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d063      	beq.n	800edf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ed2a:	4b6a      	ldr	r3, [pc, #424]	@ (800eed4 <HAL_RCC_GetSysClockFreq+0x200>)
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	099b      	lsrs	r3, r3, #6
 800ed30:	2200      	movs	r2, #0
 800ed32:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ed34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800ed36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed3c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed3e:	2300      	movs	r3, #0
 800ed40:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800ed46:	4622      	mov	r2, r4
 800ed48:	462b      	mov	r3, r5
 800ed4a:	f04f 0000 	mov.w	r0, #0
 800ed4e:	f04f 0100 	mov.w	r1, #0
 800ed52:	0159      	lsls	r1, r3, #5
 800ed54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ed58:	0150      	lsls	r0, r2, #5
 800ed5a:	4602      	mov	r2, r0
 800ed5c:	460b      	mov	r3, r1
 800ed5e:	4621      	mov	r1, r4
 800ed60:	1a51      	subs	r1, r2, r1
 800ed62:	6139      	str	r1, [r7, #16]
 800ed64:	4629      	mov	r1, r5
 800ed66:	eb63 0301 	sbc.w	r3, r3, r1
 800ed6a:	617b      	str	r3, [r7, #20]
 800ed6c:	f04f 0200 	mov.w	r2, #0
 800ed70:	f04f 0300 	mov.w	r3, #0
 800ed74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ed78:	4659      	mov	r1, fp
 800ed7a:	018b      	lsls	r3, r1, #6
 800ed7c:	4651      	mov	r1, sl
 800ed7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ed82:	4651      	mov	r1, sl
 800ed84:	018a      	lsls	r2, r1, #6
 800ed86:	4651      	mov	r1, sl
 800ed88:	ebb2 0801 	subs.w	r8, r2, r1
 800ed8c:	4659      	mov	r1, fp
 800ed8e:	eb63 0901 	sbc.w	r9, r3, r1
 800ed92:	f04f 0200 	mov.w	r2, #0
 800ed96:	f04f 0300 	mov.w	r3, #0
 800ed9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ed9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800eda2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800eda6:	4690      	mov	r8, r2
 800eda8:	4699      	mov	r9, r3
 800edaa:	4623      	mov	r3, r4
 800edac:	eb18 0303 	adds.w	r3, r8, r3
 800edb0:	60bb      	str	r3, [r7, #8]
 800edb2:	462b      	mov	r3, r5
 800edb4:	eb49 0303 	adc.w	r3, r9, r3
 800edb8:	60fb      	str	r3, [r7, #12]
 800edba:	f04f 0200 	mov.w	r2, #0
 800edbe:	f04f 0300 	mov.w	r3, #0
 800edc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800edc6:	4629      	mov	r1, r5
 800edc8:	024b      	lsls	r3, r1, #9
 800edca:	4621      	mov	r1, r4
 800edcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800edd0:	4621      	mov	r1, r4
 800edd2:	024a      	lsls	r2, r1, #9
 800edd4:	4610      	mov	r0, r2
 800edd6:	4619      	mov	r1, r3
 800edd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edda:	2200      	movs	r2, #0
 800eddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800edde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ede0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ede4:	f7f1 ff48 	bl	8000c78 <__aeabi_uldivmod>
 800ede8:	4602      	mov	r2, r0
 800edea:	460b      	mov	r3, r1
 800edec:	4613      	mov	r3, r2
 800edee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800edf0:	e058      	b.n	800eea4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800edf2:	4b38      	ldr	r3, [pc, #224]	@ (800eed4 <HAL_RCC_GetSysClockFreq+0x200>)
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	099b      	lsrs	r3, r3, #6
 800edf8:	2200      	movs	r2, #0
 800edfa:	4618      	mov	r0, r3
 800edfc:	4611      	mov	r1, r2
 800edfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ee02:	623b      	str	r3, [r7, #32]
 800ee04:	2300      	movs	r3, #0
 800ee06:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ee0c:	4642      	mov	r2, r8
 800ee0e:	464b      	mov	r3, r9
 800ee10:	f04f 0000 	mov.w	r0, #0
 800ee14:	f04f 0100 	mov.w	r1, #0
 800ee18:	0159      	lsls	r1, r3, #5
 800ee1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ee1e:	0150      	lsls	r0, r2, #5
 800ee20:	4602      	mov	r2, r0
 800ee22:	460b      	mov	r3, r1
 800ee24:	4641      	mov	r1, r8
 800ee26:	ebb2 0a01 	subs.w	sl, r2, r1
 800ee2a:	4649      	mov	r1, r9
 800ee2c:	eb63 0b01 	sbc.w	fp, r3, r1
 800ee30:	f04f 0200 	mov.w	r2, #0
 800ee34:	f04f 0300 	mov.w	r3, #0
 800ee38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800ee3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800ee40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800ee44:	ebb2 040a 	subs.w	r4, r2, sl
 800ee48:	eb63 050b 	sbc.w	r5, r3, fp
 800ee4c:	f04f 0200 	mov.w	r2, #0
 800ee50:	f04f 0300 	mov.w	r3, #0
 800ee54:	00eb      	lsls	r3, r5, #3
 800ee56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ee5a:	00e2      	lsls	r2, r4, #3
 800ee5c:	4614      	mov	r4, r2
 800ee5e:	461d      	mov	r5, r3
 800ee60:	4643      	mov	r3, r8
 800ee62:	18e3      	adds	r3, r4, r3
 800ee64:	603b      	str	r3, [r7, #0]
 800ee66:	464b      	mov	r3, r9
 800ee68:	eb45 0303 	adc.w	r3, r5, r3
 800ee6c:	607b      	str	r3, [r7, #4]
 800ee6e:	f04f 0200 	mov.w	r2, #0
 800ee72:	f04f 0300 	mov.w	r3, #0
 800ee76:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ee7a:	4629      	mov	r1, r5
 800ee7c:	028b      	lsls	r3, r1, #10
 800ee7e:	4621      	mov	r1, r4
 800ee80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ee84:	4621      	mov	r1, r4
 800ee86:	028a      	lsls	r2, r1, #10
 800ee88:	4610      	mov	r0, r2
 800ee8a:	4619      	mov	r1, r3
 800ee8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee8e:	2200      	movs	r2, #0
 800ee90:	61bb      	str	r3, [r7, #24]
 800ee92:	61fa      	str	r2, [r7, #28]
 800ee94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ee98:	f7f1 feee 	bl	8000c78 <__aeabi_uldivmod>
 800ee9c:	4602      	mov	r2, r0
 800ee9e:	460b      	mov	r3, r1
 800eea0:	4613      	mov	r3, r2
 800eea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800eea4:	4b0b      	ldr	r3, [pc, #44]	@ (800eed4 <HAL_RCC_GetSysClockFreq+0x200>)
 800eea6:	685b      	ldr	r3, [r3, #4]
 800eea8:	0c1b      	lsrs	r3, r3, #16
 800eeaa:	f003 0303 	and.w	r3, r3, #3
 800eeae:	3301      	adds	r3, #1
 800eeb0:	005b      	lsls	r3, r3, #1
 800eeb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800eeb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eeb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eeb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800eebc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800eebe:	e002      	b.n	800eec6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800eec0:	4b05      	ldr	r3, [pc, #20]	@ (800eed8 <HAL_RCC_GetSysClockFreq+0x204>)
 800eec2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800eec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800eec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3750      	adds	r7, #80	@ 0x50
 800eecc:	46bd      	mov	sp, r7
 800eece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eed2:	bf00      	nop
 800eed4:	40023800 	.word	0x40023800
 800eed8:	00f42400 	.word	0x00f42400
 800eedc:	007a1200 	.word	0x007a1200

0800eee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800eee0:	b480      	push	{r7}
 800eee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800eee4:	4b03      	ldr	r3, [pc, #12]	@ (800eef4 <HAL_RCC_GetHCLKFreq+0x14>)
 800eee6:	681b      	ldr	r3, [r3, #0]
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	46bd      	mov	sp, r7
 800eeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef0:	4770      	bx	lr
 800eef2:	bf00      	nop
 800eef4:	20000000 	.word	0x20000000

0800eef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800eefc:	f7ff fff0 	bl	800eee0 <HAL_RCC_GetHCLKFreq>
 800ef00:	4602      	mov	r2, r0
 800ef02:	4b05      	ldr	r3, [pc, #20]	@ (800ef18 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ef04:	689b      	ldr	r3, [r3, #8]
 800ef06:	0a9b      	lsrs	r3, r3, #10
 800ef08:	f003 0307 	and.w	r3, r3, #7
 800ef0c:	4903      	ldr	r1, [pc, #12]	@ (800ef1c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ef0e:	5ccb      	ldrb	r3, [r1, r3]
 800ef10:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	40023800 	.word	0x40023800
 800ef1c:	0801789c 	.word	0x0801789c

0800ef20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ef24:	f7ff ffdc 	bl	800eee0 <HAL_RCC_GetHCLKFreq>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	4b05      	ldr	r3, [pc, #20]	@ (800ef40 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ef2c:	689b      	ldr	r3, [r3, #8]
 800ef2e:	0b5b      	lsrs	r3, r3, #13
 800ef30:	f003 0307 	and.w	r3, r3, #7
 800ef34:	4903      	ldr	r1, [pc, #12]	@ (800ef44 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ef36:	5ccb      	ldrb	r3, [r1, r3]
 800ef38:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	bd80      	pop	{r7, pc}
 800ef40:	40023800 	.word	0x40023800
 800ef44:	0801789c 	.word	0x0801789c

0800ef48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b082      	sub	sp, #8
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d101      	bne.n	800ef5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ef56:	2301      	movs	r3, #1
 800ef58:	e07b      	b.n	800f052 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d108      	bne.n	800ef74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ef6a:	d009      	beq.n	800ef80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	61da      	str	r2, [r3, #28]
 800ef72:	e005      	b.n	800ef80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2200      	movs	r2, #0
 800ef78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2200      	movs	r2, #0
 800ef84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ef8c:	b2db      	uxtb	r3, r3
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d106      	bne.n	800efa0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2200      	movs	r2, #0
 800ef96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f7f3 f9be 	bl	800231c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2202      	movs	r2, #2
 800efa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	681a      	ldr	r2, [r3, #0]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800efb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	685b      	ldr	r3, [r3, #4]
 800efbc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	689b      	ldr	r3, [r3, #8]
 800efc4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800efc8:	431a      	orrs	r2, r3
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	68db      	ldr	r3, [r3, #12]
 800efce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800efd2:	431a      	orrs	r2, r3
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	691b      	ldr	r3, [r3, #16]
 800efd8:	f003 0302 	and.w	r3, r3, #2
 800efdc:	431a      	orrs	r2, r3
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	695b      	ldr	r3, [r3, #20]
 800efe2:	f003 0301 	and.w	r3, r3, #1
 800efe6:	431a      	orrs	r2, r3
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	699b      	ldr	r3, [r3, #24]
 800efec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eff0:	431a      	orrs	r2, r3
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	69db      	ldr	r3, [r3, #28]
 800eff6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800effa:	431a      	orrs	r2, r3
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6a1b      	ldr	r3, [r3, #32]
 800f000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f004:	ea42 0103 	orr.w	r1, r2, r3
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f00c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	430a      	orrs	r2, r1
 800f016:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	699b      	ldr	r3, [r3, #24]
 800f01c:	0c1b      	lsrs	r3, r3, #16
 800f01e:	f003 0104 	and.w	r1, r3, #4
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f026:	f003 0210 	and.w	r2, r3, #16
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	430a      	orrs	r2, r1
 800f030:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	69da      	ldr	r2, [r3, #28]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f040:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2200      	movs	r2, #0
 800f046:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2201      	movs	r2, #1
 800f04c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800f050:	2300      	movs	r3, #0
}
 800f052:	4618      	mov	r0, r3
 800f054:	3708      	adds	r7, #8
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}

0800f05a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f05a:	b580      	push	{r7, lr}
 800f05c:	b088      	sub	sp, #32
 800f05e:	af00      	add	r7, sp, #0
 800f060:	60f8      	str	r0, [r7, #12]
 800f062:	60b9      	str	r1, [r7, #8]
 800f064:	603b      	str	r3, [r7, #0]
 800f066:	4613      	mov	r3, r2
 800f068:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f06a:	f7fd f9af 	bl	800c3cc <HAL_GetTick>
 800f06e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800f070:	88fb      	ldrh	r3, [r7, #6]
 800f072:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f07a:	b2db      	uxtb	r3, r3
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	d001      	beq.n	800f084 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800f080:	2302      	movs	r3, #2
 800f082:	e12a      	b.n	800f2da <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d002      	beq.n	800f090 <HAL_SPI_Transmit+0x36>
 800f08a:	88fb      	ldrh	r3, [r7, #6]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d101      	bne.n	800f094 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800f090:	2301      	movs	r3, #1
 800f092:	e122      	b.n	800f2da <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d101      	bne.n	800f0a2 <HAL_SPI_Transmit+0x48>
 800f09e:	2302      	movs	r3, #2
 800f0a0:	e11b      	b.n	800f2da <HAL_SPI_Transmit+0x280>
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2201      	movs	r2, #1
 800f0a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2203      	movs	r2, #3
 800f0ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	68ba      	ldr	r2, [r7, #8]
 800f0bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	88fa      	ldrh	r2, [r7, #6]
 800f0c2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	88fa      	ldrh	r2, [r7, #6]
 800f0c8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	689b      	ldr	r3, [r3, #8]
 800f0ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f0f0:	d10f      	bne.n	800f112 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f100:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	681a      	ldr	r2, [r3, #0]
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f110:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f11c:	2b40      	cmp	r3, #64	@ 0x40
 800f11e:	d007      	beq.n	800f130 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	681a      	ldr	r2, [r3, #0]
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f12e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	68db      	ldr	r3, [r3, #12]
 800f134:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f138:	d152      	bne.n	800f1e0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d002      	beq.n	800f148 <HAL_SPI_Transmit+0xee>
 800f142:	8b7b      	ldrh	r3, [r7, #26]
 800f144:	2b01      	cmp	r3, #1
 800f146:	d145      	bne.n	800f1d4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f14c:	881a      	ldrh	r2, [r3, #0]
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f158:	1c9a      	adds	r2, r3, #2
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f162:	b29b      	uxth	r3, r3
 800f164:	3b01      	subs	r3, #1
 800f166:	b29a      	uxth	r2, r3
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f16c:	e032      	b.n	800f1d4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	689b      	ldr	r3, [r3, #8]
 800f174:	f003 0302 	and.w	r3, r3, #2
 800f178:	2b02      	cmp	r3, #2
 800f17a:	d112      	bne.n	800f1a2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f180:	881a      	ldrh	r2, [r3, #0]
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f18c:	1c9a      	adds	r2, r3, #2
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f196:	b29b      	uxth	r3, r3
 800f198:	3b01      	subs	r3, #1
 800f19a:	b29a      	uxth	r2, r3
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f1a0:	e018      	b.n	800f1d4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1a2:	f7fd f913 	bl	800c3cc <HAL_GetTick>
 800f1a6:	4602      	mov	r2, r0
 800f1a8:	69fb      	ldr	r3, [r7, #28]
 800f1aa:	1ad3      	subs	r3, r2, r3
 800f1ac:	683a      	ldr	r2, [r7, #0]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d803      	bhi.n	800f1ba <HAL_SPI_Transmit+0x160>
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1b8:	d102      	bne.n	800f1c0 <HAL_SPI_Transmit+0x166>
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d109      	bne.n	800f1d4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800f1d0:	2303      	movs	r3, #3
 800f1d2:	e082      	b.n	800f2da <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d1c7      	bne.n	800f16e <HAL_SPI_Transmit+0x114>
 800f1de:	e053      	b.n	800f288 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d002      	beq.n	800f1ee <HAL_SPI_Transmit+0x194>
 800f1e8:	8b7b      	ldrh	r3, [r7, #26]
 800f1ea:	2b01      	cmp	r3, #1
 800f1ec:	d147      	bne.n	800f27e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	330c      	adds	r3, #12
 800f1f8:	7812      	ldrb	r2, [r2, #0]
 800f1fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f200:	1c5a      	adds	r2, r3, #1
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f20a:	b29b      	uxth	r3, r3
 800f20c:	3b01      	subs	r3, #1
 800f20e:	b29a      	uxth	r2, r3
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800f214:	e033      	b.n	800f27e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	689b      	ldr	r3, [r3, #8]
 800f21c:	f003 0302 	and.w	r3, r3, #2
 800f220:	2b02      	cmp	r3, #2
 800f222:	d113      	bne.n	800f24c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	330c      	adds	r3, #12
 800f22e:	7812      	ldrb	r2, [r2, #0]
 800f230:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f236:	1c5a      	adds	r2, r3, #1
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f240:	b29b      	uxth	r3, r3
 800f242:	3b01      	subs	r3, #1
 800f244:	b29a      	uxth	r2, r3
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	86da      	strh	r2, [r3, #54]	@ 0x36
 800f24a:	e018      	b.n	800f27e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f24c:	f7fd f8be 	bl	800c3cc <HAL_GetTick>
 800f250:	4602      	mov	r2, r0
 800f252:	69fb      	ldr	r3, [r7, #28]
 800f254:	1ad3      	subs	r3, r2, r3
 800f256:	683a      	ldr	r2, [r7, #0]
 800f258:	429a      	cmp	r2, r3
 800f25a:	d803      	bhi.n	800f264 <HAL_SPI_Transmit+0x20a>
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f262:	d102      	bne.n	800f26a <HAL_SPI_Transmit+0x210>
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d109      	bne.n	800f27e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2201      	movs	r2, #1
 800f26e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	2200      	movs	r2, #0
 800f276:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800f27a:	2303      	movs	r3, #3
 800f27c:	e02d      	b.n	800f2da <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f282:	b29b      	uxth	r3, r3
 800f284:	2b00      	cmp	r3, #0
 800f286:	d1c6      	bne.n	800f216 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f288:	69fa      	ldr	r2, [r7, #28]
 800f28a:	6839      	ldr	r1, [r7, #0]
 800f28c:	68f8      	ldr	r0, [r7, #12]
 800f28e:	f000 fa59 	bl	800f744 <SPI_EndRxTxTransaction>
 800f292:	4603      	mov	r3, r0
 800f294:	2b00      	cmp	r3, #0
 800f296:	d002      	beq.n	800f29e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	2220      	movs	r2, #32
 800f29c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	689b      	ldr	r3, [r3, #8]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d10a      	bne.n	800f2bc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	617b      	str	r3, [r7, #20]
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	68db      	ldr	r3, [r3, #12]
 800f2b0:	617b      	str	r3, [r7, #20]
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	689b      	ldr	r3, [r3, #8]
 800f2b8:	617b      	str	r3, [r7, #20]
 800f2ba:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d001      	beq.n	800f2d8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	e000      	b.n	800f2da <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800f2d8:	2300      	movs	r3, #0
  }
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	3720      	adds	r7, #32
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	bd80      	pop	{r7, pc}

0800f2e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f2e2:	b580      	push	{r7, lr}
 800f2e4:	b08a      	sub	sp, #40	@ 0x28
 800f2e6:	af00      	add	r7, sp, #0
 800f2e8:	60f8      	str	r0, [r7, #12]
 800f2ea:	60b9      	str	r1, [r7, #8]
 800f2ec:	607a      	str	r2, [r7, #4]
 800f2ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f2f4:	f7fd f86a 	bl	800c3cc <HAL_GetTick>
 800f2f8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f300:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	685b      	ldr	r3, [r3, #4]
 800f306:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800f308:	887b      	ldrh	r3, [r7, #2]
 800f30a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f30c:	7ffb      	ldrb	r3, [r7, #31]
 800f30e:	2b01      	cmp	r3, #1
 800f310:	d00c      	beq.n	800f32c <HAL_SPI_TransmitReceive+0x4a>
 800f312:	69bb      	ldr	r3, [r7, #24]
 800f314:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f318:	d106      	bne.n	800f328 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	689b      	ldr	r3, [r3, #8]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d102      	bne.n	800f328 <HAL_SPI_TransmitReceive+0x46>
 800f322:	7ffb      	ldrb	r3, [r7, #31]
 800f324:	2b04      	cmp	r3, #4
 800f326:	d001      	beq.n	800f32c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800f328:	2302      	movs	r3, #2
 800f32a:	e17f      	b.n	800f62c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d005      	beq.n	800f33e <HAL_SPI_TransmitReceive+0x5c>
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d002      	beq.n	800f33e <HAL_SPI_TransmitReceive+0x5c>
 800f338:	887b      	ldrh	r3, [r7, #2]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d101      	bne.n	800f342 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800f33e:	2301      	movs	r3, #1
 800f340:	e174      	b.n	800f62c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800f348:	2b01      	cmp	r3, #1
 800f34a:	d101      	bne.n	800f350 <HAL_SPI_TransmitReceive+0x6e>
 800f34c:	2302      	movs	r3, #2
 800f34e:	e16d      	b.n	800f62c <HAL_SPI_TransmitReceive+0x34a>
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2201      	movs	r2, #1
 800f354:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800f35e:	b2db      	uxtb	r3, r3
 800f360:	2b04      	cmp	r3, #4
 800f362:	d003      	beq.n	800f36c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2205      	movs	r2, #5
 800f368:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	2200      	movs	r2, #0
 800f370:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	687a      	ldr	r2, [r7, #4]
 800f376:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	887a      	ldrh	r2, [r7, #2]
 800f37c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	887a      	ldrh	r2, [r7, #2]
 800f382:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	68ba      	ldr	r2, [r7, #8]
 800f388:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	887a      	ldrh	r2, [r7, #2]
 800f38e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	887a      	ldrh	r2, [r7, #2]
 800f394:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	2200      	movs	r2, #0
 800f39a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3ac:	2b40      	cmp	r3, #64	@ 0x40
 800f3ae:	d007      	beq.n	800f3c0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f3be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	68db      	ldr	r3, [r3, #12]
 800f3c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f3c8:	d17e      	bne.n	800f4c8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d002      	beq.n	800f3d8 <HAL_SPI_TransmitReceive+0xf6>
 800f3d2:	8afb      	ldrh	r3, [r7, #22]
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d16c      	bne.n	800f4b2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3dc:	881a      	ldrh	r2, [r3, #0]
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3e8:	1c9a      	adds	r2, r3, #2
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f3f2:	b29b      	uxth	r3, r3
 800f3f4:	3b01      	subs	r3, #1
 800f3f6:	b29a      	uxth	r2, r3
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f3fc:	e059      	b.n	800f4b2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	689b      	ldr	r3, [r3, #8]
 800f404:	f003 0302 	and.w	r3, r3, #2
 800f408:	2b02      	cmp	r3, #2
 800f40a:	d11b      	bne.n	800f444 <HAL_SPI_TransmitReceive+0x162>
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f410:	b29b      	uxth	r3, r3
 800f412:	2b00      	cmp	r3, #0
 800f414:	d016      	beq.n	800f444 <HAL_SPI_TransmitReceive+0x162>
 800f416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f418:	2b01      	cmp	r3, #1
 800f41a:	d113      	bne.n	800f444 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f420:	881a      	ldrh	r2, [r3, #0]
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f42c:	1c9a      	adds	r2, r3, #2
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f436:	b29b      	uxth	r3, r3
 800f438:	3b01      	subs	r3, #1
 800f43a:	b29a      	uxth	r2, r3
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f440:	2300      	movs	r3, #0
 800f442:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	689b      	ldr	r3, [r3, #8]
 800f44a:	f003 0301 	and.w	r3, r3, #1
 800f44e:	2b01      	cmp	r3, #1
 800f450:	d119      	bne.n	800f486 <HAL_SPI_TransmitReceive+0x1a4>
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f456:	b29b      	uxth	r3, r3
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d014      	beq.n	800f486 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	68da      	ldr	r2, [r3, #12]
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f466:	b292      	uxth	r2, r2
 800f468:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f46e:	1c9a      	adds	r2, r3, #2
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f478:	b29b      	uxth	r3, r3
 800f47a:	3b01      	subs	r3, #1
 800f47c:	b29a      	uxth	r2, r3
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f482:	2301      	movs	r3, #1
 800f484:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f486:	f7fc ffa1 	bl	800c3cc <HAL_GetTick>
 800f48a:	4602      	mov	r2, r0
 800f48c:	6a3b      	ldr	r3, [r7, #32]
 800f48e:	1ad3      	subs	r3, r2, r3
 800f490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f492:	429a      	cmp	r2, r3
 800f494:	d80d      	bhi.n	800f4b2 <HAL_SPI_TransmitReceive+0x1d0>
 800f496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f49c:	d009      	beq.n	800f4b2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	2201      	movs	r2, #1
 800f4a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800f4ae:	2303      	movs	r3, #3
 800f4b0:	e0bc      	b.n	800f62c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d1a0      	bne.n	800f3fe <HAL_SPI_TransmitReceive+0x11c>
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d19b      	bne.n	800f3fe <HAL_SPI_TransmitReceive+0x11c>
 800f4c6:	e082      	b.n	800f5ce <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	685b      	ldr	r3, [r3, #4]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d002      	beq.n	800f4d6 <HAL_SPI_TransmitReceive+0x1f4>
 800f4d0:	8afb      	ldrh	r3, [r7, #22]
 800f4d2:	2b01      	cmp	r3, #1
 800f4d4:	d171      	bne.n	800f5ba <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	330c      	adds	r3, #12
 800f4e0:	7812      	ldrb	r2, [r2, #0]
 800f4e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4e8:	1c5a      	adds	r2, r3, #1
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f4f2:	b29b      	uxth	r3, r3
 800f4f4:	3b01      	subs	r3, #1
 800f4f6:	b29a      	uxth	r2, r3
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f4fc:	e05d      	b.n	800f5ba <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	689b      	ldr	r3, [r3, #8]
 800f504:	f003 0302 	and.w	r3, r3, #2
 800f508:	2b02      	cmp	r3, #2
 800f50a:	d11c      	bne.n	800f546 <HAL_SPI_TransmitReceive+0x264>
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f510:	b29b      	uxth	r3, r3
 800f512:	2b00      	cmp	r3, #0
 800f514:	d017      	beq.n	800f546 <HAL_SPI_TransmitReceive+0x264>
 800f516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f518:	2b01      	cmp	r3, #1
 800f51a:	d114      	bne.n	800f546 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	330c      	adds	r3, #12
 800f526:	7812      	ldrb	r2, [r2, #0]
 800f528:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f52e:	1c5a      	adds	r2, r3, #1
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f538:	b29b      	uxth	r3, r3
 800f53a:	3b01      	subs	r3, #1
 800f53c:	b29a      	uxth	r2, r3
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f542:	2300      	movs	r3, #0
 800f544:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	689b      	ldr	r3, [r3, #8]
 800f54c:	f003 0301 	and.w	r3, r3, #1
 800f550:	2b01      	cmp	r3, #1
 800f552:	d119      	bne.n	800f588 <HAL_SPI_TransmitReceive+0x2a6>
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f558:	b29b      	uxth	r3, r3
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d014      	beq.n	800f588 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	68da      	ldr	r2, [r3, #12]
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f568:	b2d2      	uxtb	r2, r2
 800f56a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f570:	1c5a      	adds	r2, r3, #1
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f57a:	b29b      	uxth	r3, r3
 800f57c:	3b01      	subs	r3, #1
 800f57e:	b29a      	uxth	r2, r3
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f584:	2301      	movs	r3, #1
 800f586:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f588:	f7fc ff20 	bl	800c3cc <HAL_GetTick>
 800f58c:	4602      	mov	r2, r0
 800f58e:	6a3b      	ldr	r3, [r7, #32]
 800f590:	1ad3      	subs	r3, r2, r3
 800f592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f594:	429a      	cmp	r2, r3
 800f596:	d803      	bhi.n	800f5a0 <HAL_SPI_TransmitReceive+0x2be>
 800f598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f59e:	d102      	bne.n	800f5a6 <HAL_SPI_TransmitReceive+0x2c4>
 800f5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d109      	bne.n	800f5ba <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2201      	movs	r2, #1
 800f5aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800f5b6:	2303      	movs	r3, #3
 800f5b8:	e038      	b.n	800f62c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d19c      	bne.n	800f4fe <HAL_SPI_TransmitReceive+0x21c>
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d197      	bne.n	800f4fe <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f5ce:	6a3a      	ldr	r2, [r7, #32]
 800f5d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f5d2:	68f8      	ldr	r0, [r7, #12]
 800f5d4:	f000 f8b6 	bl	800f744 <SPI_EndRxTxTransaction>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d008      	beq.n	800f5f0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2220      	movs	r2, #32
 800f5e2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	e01d      	b.n	800f62c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	689b      	ldr	r3, [r3, #8]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d10a      	bne.n	800f60e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	613b      	str	r3, [r7, #16]
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	613b      	str	r3, [r7, #16]
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	689b      	ldr	r3, [r3, #8]
 800f60a:	613b      	str	r3, [r7, #16]
 800f60c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2201      	movs	r2, #1
 800f612:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2200      	movs	r2, #0
 800f61a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f622:	2b00      	cmp	r3, #0
 800f624:	d001      	beq.n	800f62a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800f626:	2301      	movs	r3, #1
 800f628:	e000      	b.n	800f62c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800f62a:	2300      	movs	r3, #0
  }
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3728      	adds	r7, #40	@ 0x28
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b088      	sub	sp, #32
 800f638:	af00      	add	r7, sp, #0
 800f63a:	60f8      	str	r0, [r7, #12]
 800f63c:	60b9      	str	r1, [r7, #8]
 800f63e:	603b      	str	r3, [r7, #0]
 800f640:	4613      	mov	r3, r2
 800f642:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f644:	f7fc fec2 	bl	800c3cc <HAL_GetTick>
 800f648:	4602      	mov	r2, r0
 800f64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f64c:	1a9b      	subs	r3, r3, r2
 800f64e:	683a      	ldr	r2, [r7, #0]
 800f650:	4413      	add	r3, r2
 800f652:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f654:	f7fc feba 	bl	800c3cc <HAL_GetTick>
 800f658:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f65a:	4b39      	ldr	r3, [pc, #228]	@ (800f740 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	015b      	lsls	r3, r3, #5
 800f660:	0d1b      	lsrs	r3, r3, #20
 800f662:	69fa      	ldr	r2, [r7, #28]
 800f664:	fb02 f303 	mul.w	r3, r2, r3
 800f668:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f66a:	e055      	b.n	800f718 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f672:	d051      	beq.n	800f718 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f674:	f7fc feaa 	bl	800c3cc <HAL_GetTick>
 800f678:	4602      	mov	r2, r0
 800f67a:	69bb      	ldr	r3, [r7, #24]
 800f67c:	1ad3      	subs	r3, r2, r3
 800f67e:	69fa      	ldr	r2, [r7, #28]
 800f680:	429a      	cmp	r2, r3
 800f682:	d902      	bls.n	800f68a <SPI_WaitFlagStateUntilTimeout+0x56>
 800f684:	69fb      	ldr	r3, [r7, #28]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d13d      	bne.n	800f706 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	685a      	ldr	r2, [r3, #4]
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f698:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f6a2:	d111      	bne.n	800f6c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	689b      	ldr	r3, [r3, #8]
 800f6a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f6ac:	d004      	beq.n	800f6b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	689b      	ldr	r3, [r3, #8]
 800f6b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f6b6:	d107      	bne.n	800f6c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	681a      	ldr	r2, [r3, #0]
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f6c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f6d0:	d10f      	bne.n	800f6f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	681a      	ldr	r2, [r3, #0]
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f6e0:	601a      	str	r2, [r3, #0]
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f6f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800f702:	2303      	movs	r3, #3
 800f704:	e018      	b.n	800f738 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d102      	bne.n	800f712 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800f70c:	2300      	movs	r3, #0
 800f70e:	61fb      	str	r3, [r7, #28]
 800f710:	e002      	b.n	800f718 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	3b01      	subs	r3, #1
 800f716:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	689a      	ldr	r2, [r3, #8]
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	4013      	ands	r3, r2
 800f722:	68ba      	ldr	r2, [r7, #8]
 800f724:	429a      	cmp	r2, r3
 800f726:	bf0c      	ite	eq
 800f728:	2301      	moveq	r3, #1
 800f72a:	2300      	movne	r3, #0
 800f72c:	b2db      	uxtb	r3, r3
 800f72e:	461a      	mov	r2, r3
 800f730:	79fb      	ldrb	r3, [r7, #7]
 800f732:	429a      	cmp	r2, r3
 800f734:	d19a      	bne.n	800f66c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800f736:	2300      	movs	r3, #0
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3720      	adds	r7, #32
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	20000000 	.word	0x20000000

0800f744 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b088      	sub	sp, #32
 800f748:	af02      	add	r7, sp, #8
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	9300      	str	r3, [sp, #0]
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	2201      	movs	r2, #1
 800f758:	2102      	movs	r1, #2
 800f75a:	68f8      	ldr	r0, [r7, #12]
 800f75c:	f7ff ff6a 	bl	800f634 <SPI_WaitFlagStateUntilTimeout>
 800f760:	4603      	mov	r3, r0
 800f762:	2b00      	cmp	r3, #0
 800f764:	d007      	beq.n	800f776 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f76a:	f043 0220 	orr.w	r2, r3, #32
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800f772:	2303      	movs	r3, #3
 800f774:	e032      	b.n	800f7dc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f776:	4b1b      	ldr	r3, [pc, #108]	@ (800f7e4 <SPI_EndRxTxTransaction+0xa0>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	4a1b      	ldr	r2, [pc, #108]	@ (800f7e8 <SPI_EndRxTxTransaction+0xa4>)
 800f77c:	fba2 2303 	umull	r2, r3, r2, r3
 800f780:	0d5b      	lsrs	r3, r3, #21
 800f782:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f786:	fb02 f303 	mul.w	r3, r2, r3
 800f78a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f794:	d112      	bne.n	800f7bc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	9300      	str	r3, [sp, #0]
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	2200      	movs	r2, #0
 800f79e:	2180      	movs	r1, #128	@ 0x80
 800f7a0:	68f8      	ldr	r0, [r7, #12]
 800f7a2:	f7ff ff47 	bl	800f634 <SPI_WaitFlagStateUntilTimeout>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d016      	beq.n	800f7da <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7b0:	f043 0220 	orr.w	r2, r3, #32
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800f7b8:	2303      	movs	r3, #3
 800f7ba:	e00f      	b.n	800f7dc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d00a      	beq.n	800f7d8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	3b01      	subs	r3, #1
 800f7c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	689b      	ldr	r3, [r3, #8]
 800f7ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f7d2:	2b80      	cmp	r3, #128	@ 0x80
 800f7d4:	d0f2      	beq.n	800f7bc <SPI_EndRxTxTransaction+0x78>
 800f7d6:	e000      	b.n	800f7da <SPI_EndRxTxTransaction+0x96>
        break;
 800f7d8:	bf00      	nop
  }

  return HAL_OK;
 800f7da:	2300      	movs	r3, #0
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3718      	adds	r7, #24
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}
 800f7e4:	20000000 	.word	0x20000000
 800f7e8:	165e9f81 	.word	0x165e9f81

0800f7ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b082      	sub	sp, #8
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d101      	bne.n	800f7fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	e041      	b.n	800f882 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f804:	b2db      	uxtb	r3, r3
 800f806:	2b00      	cmp	r3, #0
 800f808:	d106      	bne.n	800f818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2200      	movs	r2, #0
 800f80e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f7f2 fdca 	bl	80023ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2202      	movs	r2, #2
 800f81c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	3304      	adds	r3, #4
 800f828:	4619      	mov	r1, r3
 800f82a:	4610      	mov	r0, r2
 800f82c:	f000 fa70 	bl	800fd10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2201      	movs	r2, #1
 800f834:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2201      	movs	r2, #1
 800f83c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2201      	movs	r2, #1
 800f844:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2201      	movs	r2, #1
 800f84c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2201      	movs	r2, #1
 800f854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2201      	movs	r2, #1
 800f85c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2201      	movs	r2, #1
 800f864:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2201      	movs	r2, #1
 800f86c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2201      	movs	r2, #1
 800f874:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2201      	movs	r2, #1
 800f87c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f880:	2300      	movs	r3, #0
}
 800f882:	4618      	mov	r0, r3
 800f884:	3708      	adds	r7, #8
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
	...

0800f88c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f88c:	b480      	push	{r7}
 800f88e:	b085      	sub	sp, #20
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f89a:	b2db      	uxtb	r3, r3
 800f89c:	2b01      	cmp	r3, #1
 800f89e:	d001      	beq.n	800f8a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	e044      	b.n	800f92e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2202      	movs	r2, #2
 800f8a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	68da      	ldr	r2, [r3, #12]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	f042 0201 	orr.w	r2, r2, #1
 800f8ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	4a1e      	ldr	r2, [pc, #120]	@ (800f93c <HAL_TIM_Base_Start_IT+0xb0>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d018      	beq.n	800f8f8 <HAL_TIM_Base_Start_IT+0x6c>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f8ce:	d013      	beq.n	800f8f8 <HAL_TIM_Base_Start_IT+0x6c>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	4a1a      	ldr	r2, [pc, #104]	@ (800f940 <HAL_TIM_Base_Start_IT+0xb4>)
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d00e      	beq.n	800f8f8 <HAL_TIM_Base_Start_IT+0x6c>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	4a19      	ldr	r2, [pc, #100]	@ (800f944 <HAL_TIM_Base_Start_IT+0xb8>)
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	d009      	beq.n	800f8f8 <HAL_TIM_Base_Start_IT+0x6c>
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	4a17      	ldr	r2, [pc, #92]	@ (800f948 <HAL_TIM_Base_Start_IT+0xbc>)
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	d004      	beq.n	800f8f8 <HAL_TIM_Base_Start_IT+0x6c>
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	4a16      	ldr	r2, [pc, #88]	@ (800f94c <HAL_TIM_Base_Start_IT+0xc0>)
 800f8f4:	4293      	cmp	r3, r2
 800f8f6:	d111      	bne.n	800f91c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	689b      	ldr	r3, [r3, #8]
 800f8fe:	f003 0307 	and.w	r3, r3, #7
 800f902:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2b06      	cmp	r3, #6
 800f908:	d010      	beq.n	800f92c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	681a      	ldr	r2, [r3, #0]
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f042 0201 	orr.w	r2, r2, #1
 800f918:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f91a:	e007      	b.n	800f92c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	681a      	ldr	r2, [r3, #0]
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	f042 0201 	orr.w	r2, r2, #1
 800f92a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f92c:	2300      	movs	r3, #0
}
 800f92e:	4618      	mov	r0, r3
 800f930:	3714      	adds	r7, #20
 800f932:	46bd      	mov	sp, r7
 800f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f938:	4770      	bx	lr
 800f93a:	bf00      	nop
 800f93c:	40010000 	.word	0x40010000
 800f940:	40000400 	.word	0x40000400
 800f944:	40000800 	.word	0x40000800
 800f948:	40000c00 	.word	0x40000c00
 800f94c:	40014000 	.word	0x40014000

0800f950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	68db      	ldr	r3, [r3, #12]
 800f95e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	691b      	ldr	r3, [r3, #16]
 800f966:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f968:	68bb      	ldr	r3, [r7, #8]
 800f96a:	f003 0302 	and.w	r3, r3, #2
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d020      	beq.n	800f9b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	f003 0302 	and.w	r3, r3, #2
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d01b      	beq.n	800f9b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	f06f 0202 	mvn.w	r2, #2
 800f984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2201      	movs	r2, #1
 800f98a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	699b      	ldr	r3, [r3, #24]
 800f992:	f003 0303 	and.w	r3, r3, #3
 800f996:	2b00      	cmp	r3, #0
 800f998:	d003      	beq.n	800f9a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f000 f999 	bl	800fcd2 <HAL_TIM_IC_CaptureCallback>
 800f9a0:	e005      	b.n	800f9ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f000 f98b 	bl	800fcbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 f99c 	bl	800fce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	f003 0304 	and.w	r3, r3, #4
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d020      	beq.n	800fa00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	f003 0304 	and.w	r3, r3, #4
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d01b      	beq.n	800fa00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	f06f 0204 	mvn.w	r2, #4
 800f9d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2202      	movs	r2, #2
 800f9d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	699b      	ldr	r3, [r3, #24]
 800f9de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d003      	beq.n	800f9ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f000 f973 	bl	800fcd2 <HAL_TIM_IC_CaptureCallback>
 800f9ec:	e005      	b.n	800f9fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f000 f965 	bl	800fcbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f000 f976 	bl	800fce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	f003 0308 	and.w	r3, r3, #8
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d020      	beq.n	800fa4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f003 0308 	and.w	r3, r3, #8
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d01b      	beq.n	800fa4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	f06f 0208 	mvn.w	r2, #8
 800fa1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2204      	movs	r2, #4
 800fa22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	69db      	ldr	r3, [r3, #28]
 800fa2a:	f003 0303 	and.w	r3, r3, #3
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d003      	beq.n	800fa3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f000 f94d 	bl	800fcd2 <HAL_TIM_IC_CaptureCallback>
 800fa38:	e005      	b.n	800fa46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f000 f93f 	bl	800fcbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f000 f950 	bl	800fce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	f003 0310 	and.w	r3, r3, #16
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d020      	beq.n	800fa98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	f003 0310 	and.w	r3, r3, #16
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d01b      	beq.n	800fa98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	f06f 0210 	mvn.w	r2, #16
 800fa68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2208      	movs	r2, #8
 800fa6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	69db      	ldr	r3, [r3, #28]
 800fa76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d003      	beq.n	800fa86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f000 f927 	bl	800fcd2 <HAL_TIM_IC_CaptureCallback>
 800fa84:	e005      	b.n	800fa92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f000 f919 	bl	800fcbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f000 f92a 	bl	800fce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	2200      	movs	r2, #0
 800fa96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	f003 0301 	and.w	r3, r3, #1
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d00c      	beq.n	800fabc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	f003 0301 	and.w	r3, r3, #1
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d007      	beq.n	800fabc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	f06f 0201 	mvn.w	r2, #1
 800fab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f7f1 fce8 	bl	800148c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800fabc:	68bb      	ldr	r3, [r7, #8]
 800fabe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d00c      	beq.n	800fae0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800facc:	2b00      	cmp	r3, #0
 800face:	d007      	beq.n	800fae0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800fad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f000 fab0 	bl	8010040 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d00c      	beq.n	800fb04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d007      	beq.n	800fb04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fafc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 f8fb 	bl	800fcfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	f003 0320 	and.w	r3, r3, #32
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d00c      	beq.n	800fb28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	f003 0320 	and.w	r3, r3, #32
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d007      	beq.n	800fb28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f06f 0220 	mvn.w	r2, #32
 800fb20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f000 fa82 	bl	801002c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fb28:	bf00      	nop
 800fb2a:	3710      	adds	r7, #16
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d101      	bne.n	800fb4c <HAL_TIM_ConfigClockSource+0x1c>
 800fb48:	2302      	movs	r3, #2
 800fb4a:	e0b4      	b.n	800fcb6 <HAL_TIM_ConfigClockSource+0x186>
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2201      	movs	r2, #1
 800fb50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2202      	movs	r2, #2
 800fb58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	689b      	ldr	r3, [r3, #8]
 800fb62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800fb6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fb72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	68ba      	ldr	r2, [r7, #8]
 800fb7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fb84:	d03e      	beq.n	800fc04 <HAL_TIM_ConfigClockSource+0xd4>
 800fb86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fb8a:	f200 8087 	bhi.w	800fc9c <HAL_TIM_ConfigClockSource+0x16c>
 800fb8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb92:	f000 8086 	beq.w	800fca2 <HAL_TIM_ConfigClockSource+0x172>
 800fb96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb9a:	d87f      	bhi.n	800fc9c <HAL_TIM_ConfigClockSource+0x16c>
 800fb9c:	2b70      	cmp	r3, #112	@ 0x70
 800fb9e:	d01a      	beq.n	800fbd6 <HAL_TIM_ConfigClockSource+0xa6>
 800fba0:	2b70      	cmp	r3, #112	@ 0x70
 800fba2:	d87b      	bhi.n	800fc9c <HAL_TIM_ConfigClockSource+0x16c>
 800fba4:	2b60      	cmp	r3, #96	@ 0x60
 800fba6:	d050      	beq.n	800fc4a <HAL_TIM_ConfigClockSource+0x11a>
 800fba8:	2b60      	cmp	r3, #96	@ 0x60
 800fbaa:	d877      	bhi.n	800fc9c <HAL_TIM_ConfigClockSource+0x16c>
 800fbac:	2b50      	cmp	r3, #80	@ 0x50
 800fbae:	d03c      	beq.n	800fc2a <HAL_TIM_ConfigClockSource+0xfa>
 800fbb0:	2b50      	cmp	r3, #80	@ 0x50
 800fbb2:	d873      	bhi.n	800fc9c <HAL_TIM_ConfigClockSource+0x16c>
 800fbb4:	2b40      	cmp	r3, #64	@ 0x40
 800fbb6:	d058      	beq.n	800fc6a <HAL_TIM_ConfigClockSource+0x13a>
 800fbb8:	2b40      	cmp	r3, #64	@ 0x40
 800fbba:	d86f      	bhi.n	800fc9c <HAL_TIM_ConfigClockSource+0x16c>
 800fbbc:	2b30      	cmp	r3, #48	@ 0x30
 800fbbe:	d064      	beq.n	800fc8a <HAL_TIM_ConfigClockSource+0x15a>
 800fbc0:	2b30      	cmp	r3, #48	@ 0x30
 800fbc2:	d86b      	bhi.n	800fc9c <HAL_TIM_ConfigClockSource+0x16c>
 800fbc4:	2b20      	cmp	r3, #32
 800fbc6:	d060      	beq.n	800fc8a <HAL_TIM_ConfigClockSource+0x15a>
 800fbc8:	2b20      	cmp	r3, #32
 800fbca:	d867      	bhi.n	800fc9c <HAL_TIM_ConfigClockSource+0x16c>
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d05c      	beq.n	800fc8a <HAL_TIM_ConfigClockSource+0x15a>
 800fbd0:	2b10      	cmp	r3, #16
 800fbd2:	d05a      	beq.n	800fc8a <HAL_TIM_ConfigClockSource+0x15a>
 800fbd4:	e062      	b.n	800fc9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fbe6:	f000 f993 	bl	800ff10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	689b      	ldr	r3, [r3, #8]
 800fbf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800fbf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	68ba      	ldr	r2, [r7, #8]
 800fc00:	609a      	str	r2, [r3, #8]
      break;
 800fc02:	e04f      	b.n	800fca4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800fc14:	f000 f97c 	bl	800ff10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	689a      	ldr	r2, [r3, #8]
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800fc26:	609a      	str	r2, [r3, #8]
      break;
 800fc28:	e03c      	b.n	800fca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc36:	461a      	mov	r2, r3
 800fc38:	f000 f8f0 	bl	800fe1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	2150      	movs	r1, #80	@ 0x50
 800fc42:	4618      	mov	r0, r3
 800fc44:	f000 f949 	bl	800feda <TIM_ITRx_SetConfig>
      break;
 800fc48:	e02c      	b.n	800fca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fc56:	461a      	mov	r2, r3
 800fc58:	f000 f90f 	bl	800fe7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	2160      	movs	r1, #96	@ 0x60
 800fc62:	4618      	mov	r0, r3
 800fc64:	f000 f939 	bl	800feda <TIM_ITRx_SetConfig>
      break;
 800fc68:	e01c      	b.n	800fca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fc76:	461a      	mov	r2, r3
 800fc78:	f000 f8d0 	bl	800fe1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	2140      	movs	r1, #64	@ 0x40
 800fc82:	4618      	mov	r0, r3
 800fc84:	f000 f929 	bl	800feda <TIM_ITRx_SetConfig>
      break;
 800fc88:	e00c      	b.n	800fca4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681a      	ldr	r2, [r3, #0]
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	4619      	mov	r1, r3
 800fc94:	4610      	mov	r0, r2
 800fc96:	f000 f920 	bl	800feda <TIM_ITRx_SetConfig>
      break;
 800fc9a:	e003      	b.n	800fca4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	73fb      	strb	r3, [r7, #15]
      break;
 800fca0:	e000      	b.n	800fca4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800fca2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2201      	movs	r2, #1
 800fca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fcb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3710      	adds	r7, #16
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}

0800fcbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fcbe:	b480      	push	{r7}
 800fcc0:	b083      	sub	sp, #12
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fcc6:	bf00      	nop
 800fcc8:	370c      	adds	r7, #12
 800fcca:	46bd      	mov	sp, r7
 800fccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd0:	4770      	bx	lr

0800fcd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800fcd2:	b480      	push	{r7}
 800fcd4:	b083      	sub	sp, #12
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800fcda:	bf00      	nop
 800fcdc:	370c      	adds	r7, #12
 800fcde:	46bd      	mov	sp, r7
 800fce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce4:	4770      	bx	lr

0800fce6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800fce6:	b480      	push	{r7}
 800fce8:	b083      	sub	sp, #12
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800fcee:	bf00      	nop
 800fcf0:	370c      	adds	r7, #12
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf8:	4770      	bx	lr

0800fcfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800fcfa:	b480      	push	{r7}
 800fcfc:	b083      	sub	sp, #12
 800fcfe:	af00      	add	r7, sp, #0
 800fd00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800fd02:	bf00      	nop
 800fd04:	370c      	adds	r7, #12
 800fd06:	46bd      	mov	sp, r7
 800fd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0c:	4770      	bx	lr
	...

0800fd10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fd10:	b480      	push	{r7}
 800fd12:	b085      	sub	sp, #20
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	4a37      	ldr	r2, [pc, #220]	@ (800fe00 <TIM_Base_SetConfig+0xf0>)
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d00f      	beq.n	800fd48 <TIM_Base_SetConfig+0x38>
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd2e:	d00b      	beq.n	800fd48 <TIM_Base_SetConfig+0x38>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	4a34      	ldr	r2, [pc, #208]	@ (800fe04 <TIM_Base_SetConfig+0xf4>)
 800fd34:	4293      	cmp	r3, r2
 800fd36:	d007      	beq.n	800fd48 <TIM_Base_SetConfig+0x38>
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	4a33      	ldr	r2, [pc, #204]	@ (800fe08 <TIM_Base_SetConfig+0xf8>)
 800fd3c:	4293      	cmp	r3, r2
 800fd3e:	d003      	beq.n	800fd48 <TIM_Base_SetConfig+0x38>
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	4a32      	ldr	r2, [pc, #200]	@ (800fe0c <TIM_Base_SetConfig+0xfc>)
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d108      	bne.n	800fd5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	685b      	ldr	r3, [r3, #4]
 800fd54:	68fa      	ldr	r2, [r7, #12]
 800fd56:	4313      	orrs	r3, r2
 800fd58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	4a28      	ldr	r2, [pc, #160]	@ (800fe00 <TIM_Base_SetConfig+0xf0>)
 800fd5e:	4293      	cmp	r3, r2
 800fd60:	d01b      	beq.n	800fd9a <TIM_Base_SetConfig+0x8a>
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd68:	d017      	beq.n	800fd9a <TIM_Base_SetConfig+0x8a>
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	4a25      	ldr	r2, [pc, #148]	@ (800fe04 <TIM_Base_SetConfig+0xf4>)
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d013      	beq.n	800fd9a <TIM_Base_SetConfig+0x8a>
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	4a24      	ldr	r2, [pc, #144]	@ (800fe08 <TIM_Base_SetConfig+0xf8>)
 800fd76:	4293      	cmp	r3, r2
 800fd78:	d00f      	beq.n	800fd9a <TIM_Base_SetConfig+0x8a>
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	4a23      	ldr	r2, [pc, #140]	@ (800fe0c <TIM_Base_SetConfig+0xfc>)
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d00b      	beq.n	800fd9a <TIM_Base_SetConfig+0x8a>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	4a22      	ldr	r2, [pc, #136]	@ (800fe10 <TIM_Base_SetConfig+0x100>)
 800fd86:	4293      	cmp	r3, r2
 800fd88:	d007      	beq.n	800fd9a <TIM_Base_SetConfig+0x8a>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	4a21      	ldr	r2, [pc, #132]	@ (800fe14 <TIM_Base_SetConfig+0x104>)
 800fd8e:	4293      	cmp	r3, r2
 800fd90:	d003      	beq.n	800fd9a <TIM_Base_SetConfig+0x8a>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	4a20      	ldr	r2, [pc, #128]	@ (800fe18 <TIM_Base_SetConfig+0x108>)
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d108      	bne.n	800fdac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fda0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	68fa      	ldr	r2, [r7, #12]
 800fda8:	4313      	orrs	r3, r2
 800fdaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	695b      	ldr	r3, [r3, #20]
 800fdb6:	4313      	orrs	r3, r2
 800fdb8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	689a      	ldr	r2, [r3, #8]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	681a      	ldr	r2, [r3, #0]
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	4a0c      	ldr	r2, [pc, #48]	@ (800fe00 <TIM_Base_SetConfig+0xf0>)
 800fdce:	4293      	cmp	r3, r2
 800fdd0:	d103      	bne.n	800fdda <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	691a      	ldr	r2, [r3, #16]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	f043 0204 	orr.w	r2, r3, #4
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2201      	movs	r2, #1
 800fdea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	68fa      	ldr	r2, [r7, #12]
 800fdf0:	601a      	str	r2, [r3, #0]
}
 800fdf2:	bf00      	nop
 800fdf4:	3714      	adds	r7, #20
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfc:	4770      	bx	lr
 800fdfe:	bf00      	nop
 800fe00:	40010000 	.word	0x40010000
 800fe04:	40000400 	.word	0x40000400
 800fe08:	40000800 	.word	0x40000800
 800fe0c:	40000c00 	.word	0x40000c00
 800fe10:	40014000 	.word	0x40014000
 800fe14:	40014400 	.word	0x40014400
 800fe18:	40014800 	.word	0x40014800

0800fe1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b087      	sub	sp, #28
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	60f8      	str	r0, [r7, #12]
 800fe24:	60b9      	str	r1, [r7, #8]
 800fe26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	6a1b      	ldr	r3, [r3, #32]
 800fe2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	6a1b      	ldr	r3, [r3, #32]
 800fe32:	f023 0201 	bic.w	r2, r3, #1
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	699b      	ldr	r3, [r3, #24]
 800fe3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fe40:	693b      	ldr	r3, [r7, #16]
 800fe42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fe46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	011b      	lsls	r3, r3, #4
 800fe4c:	693a      	ldr	r2, [r7, #16]
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	f023 030a 	bic.w	r3, r3, #10
 800fe58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fe5a:	697a      	ldr	r2, [r7, #20]
 800fe5c:	68bb      	ldr	r3, [r7, #8]
 800fe5e:	4313      	orrs	r3, r2
 800fe60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	693a      	ldr	r2, [r7, #16]
 800fe66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	697a      	ldr	r2, [r7, #20]
 800fe6c:	621a      	str	r2, [r3, #32]
}
 800fe6e:	bf00      	nop
 800fe70:	371c      	adds	r7, #28
 800fe72:	46bd      	mov	sp, r7
 800fe74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe78:	4770      	bx	lr

0800fe7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe7a:	b480      	push	{r7}
 800fe7c:	b087      	sub	sp, #28
 800fe7e:	af00      	add	r7, sp, #0
 800fe80:	60f8      	str	r0, [r7, #12]
 800fe82:	60b9      	str	r1, [r7, #8]
 800fe84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	6a1b      	ldr	r3, [r3, #32]
 800fe8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	6a1b      	ldr	r3, [r3, #32]
 800fe90:	f023 0210 	bic.w	r2, r3, #16
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	699b      	ldr	r3, [r3, #24]
 800fe9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fea4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	031b      	lsls	r3, r3, #12
 800feaa:	693a      	ldr	r2, [r7, #16]
 800feac:	4313      	orrs	r3, r2
 800feae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800feb0:	697b      	ldr	r3, [r7, #20]
 800feb2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800feb6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	011b      	lsls	r3, r3, #4
 800febc:	697a      	ldr	r2, [r7, #20]
 800febe:	4313      	orrs	r3, r2
 800fec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	693a      	ldr	r2, [r7, #16]
 800fec6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	697a      	ldr	r2, [r7, #20]
 800fecc:	621a      	str	r2, [r3, #32]
}
 800fece:	bf00      	nop
 800fed0:	371c      	adds	r7, #28
 800fed2:	46bd      	mov	sp, r7
 800fed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed8:	4770      	bx	lr

0800feda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800feda:	b480      	push	{r7}
 800fedc:	b085      	sub	sp, #20
 800fede:	af00      	add	r7, sp, #0
 800fee0:	6078      	str	r0, [r7, #4]
 800fee2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	689b      	ldr	r3, [r3, #8]
 800fee8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fef0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fef2:	683a      	ldr	r2, [r7, #0]
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	4313      	orrs	r3, r2
 800fef8:	f043 0307 	orr.w	r3, r3, #7
 800fefc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	68fa      	ldr	r2, [r7, #12]
 800ff02:	609a      	str	r2, [r3, #8]
}
 800ff04:	bf00      	nop
 800ff06:	3714      	adds	r7, #20
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0e:	4770      	bx	lr

0800ff10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ff10:	b480      	push	{r7}
 800ff12:	b087      	sub	sp, #28
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	60f8      	str	r0, [r7, #12]
 800ff18:	60b9      	str	r1, [r7, #8]
 800ff1a:	607a      	str	r2, [r7, #4]
 800ff1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	689b      	ldr	r3, [r3, #8]
 800ff22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ff2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	021a      	lsls	r2, r3, #8
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	431a      	orrs	r2, r3
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	4313      	orrs	r3, r2
 800ff38:	697a      	ldr	r2, [r7, #20]
 800ff3a:	4313      	orrs	r3, r2
 800ff3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	697a      	ldr	r2, [r7, #20]
 800ff42:	609a      	str	r2, [r3, #8]
}
 800ff44:	bf00      	nop
 800ff46:	371c      	adds	r7, #28
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4e:	4770      	bx	lr

0800ff50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b085      	sub	sp, #20
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d101      	bne.n	800ff68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ff64:	2302      	movs	r3, #2
 800ff66:	e050      	b.n	801000a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2201      	movs	r2, #1
 800ff6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2202      	movs	r2, #2
 800ff74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	689b      	ldr	r3, [r3, #8]
 800ff86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ff8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	68fa      	ldr	r2, [r7, #12]
 800ff96:	4313      	orrs	r3, r2
 800ff98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	68fa      	ldr	r2, [r7, #12]
 800ffa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	4a1c      	ldr	r2, [pc, #112]	@ (8010018 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d018      	beq.n	800ffde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ffb4:	d013      	beq.n	800ffde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	4a18      	ldr	r2, [pc, #96]	@ (801001c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ffbc:	4293      	cmp	r3, r2
 800ffbe:	d00e      	beq.n	800ffde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	4a16      	ldr	r2, [pc, #88]	@ (8010020 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d009      	beq.n	800ffde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	4a15      	ldr	r2, [pc, #84]	@ (8010024 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ffd0:	4293      	cmp	r3, r2
 800ffd2:	d004      	beq.n	800ffde <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	4a13      	ldr	r2, [pc, #76]	@ (8010028 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ffda:	4293      	cmp	r3, r2
 800ffdc:	d10c      	bne.n	800fff8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ffe4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	685b      	ldr	r3, [r3, #4]
 800ffea:	68ba      	ldr	r2, [r7, #8]
 800ffec:	4313      	orrs	r3, r2
 800ffee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	68ba      	ldr	r2, [r7, #8]
 800fff6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2201      	movs	r2, #1
 800fffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2200      	movs	r2, #0
 8010004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010008:	2300      	movs	r3, #0
}
 801000a:	4618      	mov	r0, r3
 801000c:	3714      	adds	r7, #20
 801000e:	46bd      	mov	sp, r7
 8010010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010014:	4770      	bx	lr
 8010016:	bf00      	nop
 8010018:	40010000 	.word	0x40010000
 801001c:	40000400 	.word	0x40000400
 8010020:	40000800 	.word	0x40000800
 8010024:	40000c00 	.word	0x40000c00
 8010028:	40014000 	.word	0x40014000

0801002c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801002c:	b480      	push	{r7}
 801002e:	b083      	sub	sp, #12
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010034:	bf00      	nop
 8010036:	370c      	adds	r7, #12
 8010038:	46bd      	mov	sp, r7
 801003a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003e:	4770      	bx	lr

08010040 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010040:	b480      	push	{r7}
 8010042:	b083      	sub	sp, #12
 8010044:	af00      	add	r7, sp, #0
 8010046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010048:	bf00      	nop
 801004a:	370c      	adds	r7, #12
 801004c:	46bd      	mov	sp, r7
 801004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010052:	4770      	bx	lr

08010054 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b082      	sub	sp, #8
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d101      	bne.n	8010066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010062:	2301      	movs	r3, #1
 8010064:	e042      	b.n	80100ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801006c:	b2db      	uxtb	r3, r3
 801006e:	2b00      	cmp	r3, #0
 8010070:	d106      	bne.n	8010080 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2200      	movs	r2, #0
 8010076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f000 f83a 	bl	80100f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2224      	movs	r2, #36	@ 0x24
 8010084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	68da      	ldr	r2, [r3, #12]
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8010096:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f000 f835 	bl	8010108 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	691a      	ldr	r2, [r3, #16]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80100ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	695a      	ldr	r2, [r3, #20]
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80100bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	68da      	ldr	r2, [r3, #12]
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80100cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	2200      	movs	r2, #0
 80100d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2220      	movs	r2, #32
 80100d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2220      	movs	r2, #32
 80100e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2200      	movs	r2, #0
 80100e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80100ea:	2300      	movs	r3, #0
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	3708      	adds	r7, #8
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}

080100f4 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80100fc:	bf00      	nop
 80100fe:	370c      	adds	r7, #12
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr

08010108 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801010c:	b0c0      	sub	sp, #256	@ 0x100
 801010e:	af00      	add	r7, sp, #0
 8010110:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	691b      	ldr	r3, [r3, #16]
 801011c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8010120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010124:	68d9      	ldr	r1, [r3, #12]
 8010126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801012a:	681a      	ldr	r2, [r3, #0]
 801012c:	ea40 0301 	orr.w	r3, r0, r1
 8010130:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010136:	689a      	ldr	r2, [r3, #8]
 8010138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801013c:	691b      	ldr	r3, [r3, #16]
 801013e:	431a      	orrs	r2, r3
 8010140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010144:	695b      	ldr	r3, [r3, #20]
 8010146:	431a      	orrs	r2, r3
 8010148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801014c:	69db      	ldr	r3, [r3, #28]
 801014e:	4313      	orrs	r3, r2
 8010150:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8010154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	68db      	ldr	r3, [r3, #12]
 801015c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8010160:	f021 010c 	bic.w	r1, r1, #12
 8010164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010168:	681a      	ldr	r2, [r3, #0]
 801016a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801016e:	430b      	orrs	r3, r1
 8010170:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	695b      	ldr	r3, [r3, #20]
 801017a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 801017e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010182:	6999      	ldr	r1, [r3, #24]
 8010184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010188:	681a      	ldr	r2, [r3, #0]
 801018a:	ea40 0301 	orr.w	r3, r0, r1
 801018e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010194:	681a      	ldr	r2, [r3, #0]
 8010196:	4b8f      	ldr	r3, [pc, #572]	@ (80103d4 <UART_SetConfig+0x2cc>)
 8010198:	429a      	cmp	r2, r3
 801019a:	d005      	beq.n	80101a8 <UART_SetConfig+0xa0>
 801019c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	4b8d      	ldr	r3, [pc, #564]	@ (80103d8 <UART_SetConfig+0x2d0>)
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d104      	bne.n	80101b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80101a8:	f7fe feba 	bl	800ef20 <HAL_RCC_GetPCLK2Freq>
 80101ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80101b0:	e003      	b.n	80101ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80101b2:	f7fe fea1 	bl	800eef8 <HAL_RCC_GetPCLK1Freq>
 80101b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80101ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101be:	69db      	ldr	r3, [r3, #28]
 80101c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80101c4:	f040 810c 	bne.w	80103e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80101c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80101cc:	2200      	movs	r2, #0
 80101ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80101d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80101d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80101da:	4622      	mov	r2, r4
 80101dc:	462b      	mov	r3, r5
 80101de:	1891      	adds	r1, r2, r2
 80101e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80101e2:	415b      	adcs	r3, r3
 80101e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80101e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80101ea:	4621      	mov	r1, r4
 80101ec:	eb12 0801 	adds.w	r8, r2, r1
 80101f0:	4629      	mov	r1, r5
 80101f2:	eb43 0901 	adc.w	r9, r3, r1
 80101f6:	f04f 0200 	mov.w	r2, #0
 80101fa:	f04f 0300 	mov.w	r3, #0
 80101fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801020a:	4690      	mov	r8, r2
 801020c:	4699      	mov	r9, r3
 801020e:	4623      	mov	r3, r4
 8010210:	eb18 0303 	adds.w	r3, r8, r3
 8010214:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8010218:	462b      	mov	r3, r5
 801021a:	eb49 0303 	adc.w	r3, r9, r3
 801021e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010226:	685b      	ldr	r3, [r3, #4]
 8010228:	2200      	movs	r2, #0
 801022a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801022e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8010232:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8010236:	460b      	mov	r3, r1
 8010238:	18db      	adds	r3, r3, r3
 801023a:	653b      	str	r3, [r7, #80]	@ 0x50
 801023c:	4613      	mov	r3, r2
 801023e:	eb42 0303 	adc.w	r3, r2, r3
 8010242:	657b      	str	r3, [r7, #84]	@ 0x54
 8010244:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8010248:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 801024c:	f7f0 fd14 	bl	8000c78 <__aeabi_uldivmod>
 8010250:	4602      	mov	r2, r0
 8010252:	460b      	mov	r3, r1
 8010254:	4b61      	ldr	r3, [pc, #388]	@ (80103dc <UART_SetConfig+0x2d4>)
 8010256:	fba3 2302 	umull	r2, r3, r3, r2
 801025a:	095b      	lsrs	r3, r3, #5
 801025c:	011c      	lsls	r4, r3, #4
 801025e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010262:	2200      	movs	r2, #0
 8010264:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010268:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 801026c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8010270:	4642      	mov	r2, r8
 8010272:	464b      	mov	r3, r9
 8010274:	1891      	adds	r1, r2, r2
 8010276:	64b9      	str	r1, [r7, #72]	@ 0x48
 8010278:	415b      	adcs	r3, r3
 801027a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801027c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8010280:	4641      	mov	r1, r8
 8010282:	eb12 0a01 	adds.w	sl, r2, r1
 8010286:	4649      	mov	r1, r9
 8010288:	eb43 0b01 	adc.w	fp, r3, r1
 801028c:	f04f 0200 	mov.w	r2, #0
 8010290:	f04f 0300 	mov.w	r3, #0
 8010294:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010298:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801029c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80102a0:	4692      	mov	sl, r2
 80102a2:	469b      	mov	fp, r3
 80102a4:	4643      	mov	r3, r8
 80102a6:	eb1a 0303 	adds.w	r3, sl, r3
 80102aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80102ae:	464b      	mov	r3, r9
 80102b0:	eb4b 0303 	adc.w	r3, fp, r3
 80102b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80102b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	2200      	movs	r2, #0
 80102c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80102c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80102c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80102cc:	460b      	mov	r3, r1
 80102ce:	18db      	adds	r3, r3, r3
 80102d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80102d2:	4613      	mov	r3, r2
 80102d4:	eb42 0303 	adc.w	r3, r2, r3
 80102d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80102da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80102de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80102e2:	f7f0 fcc9 	bl	8000c78 <__aeabi_uldivmod>
 80102e6:	4602      	mov	r2, r0
 80102e8:	460b      	mov	r3, r1
 80102ea:	4611      	mov	r1, r2
 80102ec:	4b3b      	ldr	r3, [pc, #236]	@ (80103dc <UART_SetConfig+0x2d4>)
 80102ee:	fba3 2301 	umull	r2, r3, r3, r1
 80102f2:	095b      	lsrs	r3, r3, #5
 80102f4:	2264      	movs	r2, #100	@ 0x64
 80102f6:	fb02 f303 	mul.w	r3, r2, r3
 80102fa:	1acb      	subs	r3, r1, r3
 80102fc:	00db      	lsls	r3, r3, #3
 80102fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8010302:	4b36      	ldr	r3, [pc, #216]	@ (80103dc <UART_SetConfig+0x2d4>)
 8010304:	fba3 2302 	umull	r2, r3, r3, r2
 8010308:	095b      	lsrs	r3, r3, #5
 801030a:	005b      	lsls	r3, r3, #1
 801030c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8010310:	441c      	add	r4, r3
 8010312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010316:	2200      	movs	r2, #0
 8010318:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801031c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8010320:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8010324:	4642      	mov	r2, r8
 8010326:	464b      	mov	r3, r9
 8010328:	1891      	adds	r1, r2, r2
 801032a:	63b9      	str	r1, [r7, #56]	@ 0x38
 801032c:	415b      	adcs	r3, r3
 801032e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010330:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8010334:	4641      	mov	r1, r8
 8010336:	1851      	adds	r1, r2, r1
 8010338:	6339      	str	r1, [r7, #48]	@ 0x30
 801033a:	4649      	mov	r1, r9
 801033c:	414b      	adcs	r3, r1
 801033e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010340:	f04f 0200 	mov.w	r2, #0
 8010344:	f04f 0300 	mov.w	r3, #0
 8010348:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 801034c:	4659      	mov	r1, fp
 801034e:	00cb      	lsls	r3, r1, #3
 8010350:	4651      	mov	r1, sl
 8010352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010356:	4651      	mov	r1, sl
 8010358:	00ca      	lsls	r2, r1, #3
 801035a:	4610      	mov	r0, r2
 801035c:	4619      	mov	r1, r3
 801035e:	4603      	mov	r3, r0
 8010360:	4642      	mov	r2, r8
 8010362:	189b      	adds	r3, r3, r2
 8010364:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010368:	464b      	mov	r3, r9
 801036a:	460a      	mov	r2, r1
 801036c:	eb42 0303 	adc.w	r3, r2, r3
 8010370:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010378:	685b      	ldr	r3, [r3, #4]
 801037a:	2200      	movs	r2, #0
 801037c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010380:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8010384:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8010388:	460b      	mov	r3, r1
 801038a:	18db      	adds	r3, r3, r3
 801038c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801038e:	4613      	mov	r3, r2
 8010390:	eb42 0303 	adc.w	r3, r2, r3
 8010394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010396:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801039a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801039e:	f7f0 fc6b 	bl	8000c78 <__aeabi_uldivmod>
 80103a2:	4602      	mov	r2, r0
 80103a4:	460b      	mov	r3, r1
 80103a6:	4b0d      	ldr	r3, [pc, #52]	@ (80103dc <UART_SetConfig+0x2d4>)
 80103a8:	fba3 1302 	umull	r1, r3, r3, r2
 80103ac:	095b      	lsrs	r3, r3, #5
 80103ae:	2164      	movs	r1, #100	@ 0x64
 80103b0:	fb01 f303 	mul.w	r3, r1, r3
 80103b4:	1ad3      	subs	r3, r2, r3
 80103b6:	00db      	lsls	r3, r3, #3
 80103b8:	3332      	adds	r3, #50	@ 0x32
 80103ba:	4a08      	ldr	r2, [pc, #32]	@ (80103dc <UART_SetConfig+0x2d4>)
 80103bc:	fba2 2303 	umull	r2, r3, r2, r3
 80103c0:	095b      	lsrs	r3, r3, #5
 80103c2:	f003 0207 	and.w	r2, r3, #7
 80103c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	4422      	add	r2, r4
 80103ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80103d0:	e106      	b.n	80105e0 <UART_SetConfig+0x4d8>
 80103d2:	bf00      	nop
 80103d4:	40011000 	.word	0x40011000
 80103d8:	40011400 	.word	0x40011400
 80103dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80103e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80103e4:	2200      	movs	r2, #0
 80103e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80103ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80103ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80103f2:	4642      	mov	r2, r8
 80103f4:	464b      	mov	r3, r9
 80103f6:	1891      	adds	r1, r2, r2
 80103f8:	6239      	str	r1, [r7, #32]
 80103fa:	415b      	adcs	r3, r3
 80103fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80103fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010402:	4641      	mov	r1, r8
 8010404:	1854      	adds	r4, r2, r1
 8010406:	4649      	mov	r1, r9
 8010408:	eb43 0501 	adc.w	r5, r3, r1
 801040c:	f04f 0200 	mov.w	r2, #0
 8010410:	f04f 0300 	mov.w	r3, #0
 8010414:	00eb      	lsls	r3, r5, #3
 8010416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801041a:	00e2      	lsls	r2, r4, #3
 801041c:	4614      	mov	r4, r2
 801041e:	461d      	mov	r5, r3
 8010420:	4643      	mov	r3, r8
 8010422:	18e3      	adds	r3, r4, r3
 8010424:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010428:	464b      	mov	r3, r9
 801042a:	eb45 0303 	adc.w	r3, r5, r3
 801042e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	2200      	movs	r2, #0
 801043a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801043e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010442:	f04f 0200 	mov.w	r2, #0
 8010446:	f04f 0300 	mov.w	r3, #0
 801044a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801044e:	4629      	mov	r1, r5
 8010450:	008b      	lsls	r3, r1, #2
 8010452:	4621      	mov	r1, r4
 8010454:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010458:	4621      	mov	r1, r4
 801045a:	008a      	lsls	r2, r1, #2
 801045c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8010460:	f7f0 fc0a 	bl	8000c78 <__aeabi_uldivmod>
 8010464:	4602      	mov	r2, r0
 8010466:	460b      	mov	r3, r1
 8010468:	4b60      	ldr	r3, [pc, #384]	@ (80105ec <UART_SetConfig+0x4e4>)
 801046a:	fba3 2302 	umull	r2, r3, r3, r2
 801046e:	095b      	lsrs	r3, r3, #5
 8010470:	011c      	lsls	r4, r3, #4
 8010472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010476:	2200      	movs	r2, #0
 8010478:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801047c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010480:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8010484:	4642      	mov	r2, r8
 8010486:	464b      	mov	r3, r9
 8010488:	1891      	adds	r1, r2, r2
 801048a:	61b9      	str	r1, [r7, #24]
 801048c:	415b      	adcs	r3, r3
 801048e:	61fb      	str	r3, [r7, #28]
 8010490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010494:	4641      	mov	r1, r8
 8010496:	1851      	adds	r1, r2, r1
 8010498:	6139      	str	r1, [r7, #16]
 801049a:	4649      	mov	r1, r9
 801049c:	414b      	adcs	r3, r1
 801049e:	617b      	str	r3, [r7, #20]
 80104a0:	f04f 0200 	mov.w	r2, #0
 80104a4:	f04f 0300 	mov.w	r3, #0
 80104a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80104ac:	4659      	mov	r1, fp
 80104ae:	00cb      	lsls	r3, r1, #3
 80104b0:	4651      	mov	r1, sl
 80104b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80104b6:	4651      	mov	r1, sl
 80104b8:	00ca      	lsls	r2, r1, #3
 80104ba:	4610      	mov	r0, r2
 80104bc:	4619      	mov	r1, r3
 80104be:	4603      	mov	r3, r0
 80104c0:	4642      	mov	r2, r8
 80104c2:	189b      	adds	r3, r3, r2
 80104c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80104c8:	464b      	mov	r3, r9
 80104ca:	460a      	mov	r2, r1
 80104cc:	eb42 0303 	adc.w	r3, r2, r3
 80104d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80104d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	2200      	movs	r2, #0
 80104dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80104de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80104e0:	f04f 0200 	mov.w	r2, #0
 80104e4:	f04f 0300 	mov.w	r3, #0
 80104e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80104ec:	4649      	mov	r1, r9
 80104ee:	008b      	lsls	r3, r1, #2
 80104f0:	4641      	mov	r1, r8
 80104f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80104f6:	4641      	mov	r1, r8
 80104f8:	008a      	lsls	r2, r1, #2
 80104fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80104fe:	f7f0 fbbb 	bl	8000c78 <__aeabi_uldivmod>
 8010502:	4602      	mov	r2, r0
 8010504:	460b      	mov	r3, r1
 8010506:	4611      	mov	r1, r2
 8010508:	4b38      	ldr	r3, [pc, #224]	@ (80105ec <UART_SetConfig+0x4e4>)
 801050a:	fba3 2301 	umull	r2, r3, r3, r1
 801050e:	095b      	lsrs	r3, r3, #5
 8010510:	2264      	movs	r2, #100	@ 0x64
 8010512:	fb02 f303 	mul.w	r3, r2, r3
 8010516:	1acb      	subs	r3, r1, r3
 8010518:	011b      	lsls	r3, r3, #4
 801051a:	3332      	adds	r3, #50	@ 0x32
 801051c:	4a33      	ldr	r2, [pc, #204]	@ (80105ec <UART_SetConfig+0x4e4>)
 801051e:	fba2 2303 	umull	r2, r3, r2, r3
 8010522:	095b      	lsrs	r3, r3, #5
 8010524:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010528:	441c      	add	r4, r3
 801052a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801052e:	2200      	movs	r2, #0
 8010530:	673b      	str	r3, [r7, #112]	@ 0x70
 8010532:	677a      	str	r2, [r7, #116]	@ 0x74
 8010534:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8010538:	4642      	mov	r2, r8
 801053a:	464b      	mov	r3, r9
 801053c:	1891      	adds	r1, r2, r2
 801053e:	60b9      	str	r1, [r7, #8]
 8010540:	415b      	adcs	r3, r3
 8010542:	60fb      	str	r3, [r7, #12]
 8010544:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010548:	4641      	mov	r1, r8
 801054a:	1851      	adds	r1, r2, r1
 801054c:	6039      	str	r1, [r7, #0]
 801054e:	4649      	mov	r1, r9
 8010550:	414b      	adcs	r3, r1
 8010552:	607b      	str	r3, [r7, #4]
 8010554:	f04f 0200 	mov.w	r2, #0
 8010558:	f04f 0300 	mov.w	r3, #0
 801055c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010560:	4659      	mov	r1, fp
 8010562:	00cb      	lsls	r3, r1, #3
 8010564:	4651      	mov	r1, sl
 8010566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801056a:	4651      	mov	r1, sl
 801056c:	00ca      	lsls	r2, r1, #3
 801056e:	4610      	mov	r0, r2
 8010570:	4619      	mov	r1, r3
 8010572:	4603      	mov	r3, r0
 8010574:	4642      	mov	r2, r8
 8010576:	189b      	adds	r3, r3, r2
 8010578:	66bb      	str	r3, [r7, #104]	@ 0x68
 801057a:	464b      	mov	r3, r9
 801057c:	460a      	mov	r2, r1
 801057e:	eb42 0303 	adc.w	r3, r2, r3
 8010582:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010588:	685b      	ldr	r3, [r3, #4]
 801058a:	2200      	movs	r2, #0
 801058c:	663b      	str	r3, [r7, #96]	@ 0x60
 801058e:	667a      	str	r2, [r7, #100]	@ 0x64
 8010590:	f04f 0200 	mov.w	r2, #0
 8010594:	f04f 0300 	mov.w	r3, #0
 8010598:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 801059c:	4649      	mov	r1, r9
 801059e:	008b      	lsls	r3, r1, #2
 80105a0:	4641      	mov	r1, r8
 80105a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80105a6:	4641      	mov	r1, r8
 80105a8:	008a      	lsls	r2, r1, #2
 80105aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80105ae:	f7f0 fb63 	bl	8000c78 <__aeabi_uldivmod>
 80105b2:	4602      	mov	r2, r0
 80105b4:	460b      	mov	r3, r1
 80105b6:	4b0d      	ldr	r3, [pc, #52]	@ (80105ec <UART_SetConfig+0x4e4>)
 80105b8:	fba3 1302 	umull	r1, r3, r3, r2
 80105bc:	095b      	lsrs	r3, r3, #5
 80105be:	2164      	movs	r1, #100	@ 0x64
 80105c0:	fb01 f303 	mul.w	r3, r1, r3
 80105c4:	1ad3      	subs	r3, r2, r3
 80105c6:	011b      	lsls	r3, r3, #4
 80105c8:	3332      	adds	r3, #50	@ 0x32
 80105ca:	4a08      	ldr	r2, [pc, #32]	@ (80105ec <UART_SetConfig+0x4e4>)
 80105cc:	fba2 2303 	umull	r2, r3, r2, r3
 80105d0:	095b      	lsrs	r3, r3, #5
 80105d2:	f003 020f 	and.w	r2, r3, #15
 80105d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	4422      	add	r2, r4
 80105de:	609a      	str	r2, [r3, #8]
}
 80105e0:	bf00      	nop
 80105e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80105e6:	46bd      	mov	sp, r7
 80105e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80105ec:	51eb851f 	.word	0x51eb851f

080105f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80105f0:	b480      	push	{r7}
 80105f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80105f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80105f6:	4618      	mov	r0, r3
 80105f8:	46bd      	mov	sp, r7
 80105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fe:	4770      	bx	lr

08010600 <MX_MEMS_Init>:
static void Press_Sensor_Handler(uint32_t Instance);
static void MX_IKS4A1_DataLogTerminal_Init(void);
static void MX_IKS4A1_DataLogTerminal_Process(void);

void MX_MEMS_Init(void)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_IKS4A1_DataLogTerminal_Init();
 8010604:	f000 f808 	bl	8010618 <MX_IKS4A1_DataLogTerminal_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8010608:	bf00      	nop
 801060a:	bd80      	pop	{r7, pc}

0801060c <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_IKS4A1_DataLogTerminal_Process();
 8010610:	f000 fa0a 	bl	8010a28 <MX_IKS4A1_DataLogTerminal_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8010614:	bf00      	nop
 8010616:	bd80      	pop	{r7, pc}

08010618 <MX_IKS4A1_DataLogTerminal_Init>:
/**
  * @brief  Initialize the DataLogTerminal application
  * @retval None
  */
void MX_IKS4A1_DataLogTerminal_Init(void)
{
 8010618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801061a:	b089      	sub	sp, #36	@ 0x24
 801061c:	af04      	add	r7, sp, #16
  displayFloatToInt_t out_value_odr;
  int16_t i;

  /* Initialize LED */
  BSP_LED_Init(LED2);
 801061e:	2000      	movs	r0, #0
 8010620:	f7fb fcb0 	bl	800bf84 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8010624:	2101      	movs	r1, #1
 8010626:	2000      	movs	r0, #0
 8010628:	f7fb fd00 	bl	800c02c <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 801062c:	2000      	movs	r0, #0
 801062e:	f7fb fd51 	bl	800c0d4 <BSP_PB_GetState>
 8010632:	4603      	mov	r3, r0
 8010634:	2b00      	cmp	r3, #0
 8010636:	bf0c      	ite	eq
 8010638:	2301      	moveq	r3, #1
 801063a:	2300      	movne	r3, #0
 801063c:	b2db      	uxtb	r3, r3
 801063e:	461a      	mov	r2, r3
 8010640:	4b84      	ldr	r3, [pc, #528]	@ (8010854 <MX_IKS4A1_DataLogTerminal_Init+0x23c>)
 8010642:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8010644:	2000      	movs	r0, #0
 8010646:	f7fb fda7 	bl	800c198 <BSP_COM_Init>

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 801064a:	4a83      	ldr	r2, [pc, #524]	@ (8010858 <MX_IKS4A1_DataLogTerminal_Init+0x240>)
 801064c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010650:	4882      	ldr	r0, [pc, #520]	@ (801085c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010652:	f004 fd49 	bl	80150e8 <sniprintf>
  printf("%s", dataOut);
 8010656:	4981      	ldr	r1, [pc, #516]	@ (801085c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010658:	4881      	ldr	r0, [pc, #516]	@ (8010860 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 801065a:	f004 fcd5 	bl	8015008 <iprintf>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSV16X_0, MOTION_ACCELERO | MOTION_GYRO);
 801065e:	2103      	movs	r1, #3
 8010660:	2001      	movs	r0, #1
 8010662:	f7fa ff47 	bl	800b4f4 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LSM6DSO16IS_0, MOTION_ACCELERO | MOTION_GYRO);
 8010666:	2103      	movs	r1, #3
 8010668:	2003      	movs	r0, #3
 801066a:	f7fa ff43 	bl	800b4f4 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2DUXS12_0, MOTION_ACCELERO);
 801066e:	2102      	movs	r1, #2
 8010670:	2002      	movs	r0, #2
 8010672:	f7fa ff3f 	bl	800b4f4 <IKS4A1_MOTION_SENSOR_Init>

  IKS4A1_MOTION_SENSOR_Init(IKS4A1_LIS2MDL_0, MOTION_MAGNETO);
 8010676:	2104      	movs	r1, #4
 8010678:	2000      	movs	r0, #0
 801067a:	f7fa ff3b 	bl	800b4f4 <IKS4A1_MOTION_SENSOR_Init>

  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 801067e:	2300      	movs	r3, #0
 8010680:	81fb      	strh	r3, [r7, #14]
 8010682:	e0d4      	b.n	801082e <MX_IKS4A1_DataLogTerminal_Init+0x216>
  {
    IKS4A1_MOTION_SENSOR_GetCapabilities(i, &MotionCapabilities[i]);
 8010684:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8010688:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801068c:	4613      	mov	r3, r2
 801068e:	00db      	lsls	r3, r3, #3
 8010690:	1a9b      	subs	r3, r3, r2
 8010692:	009b      	lsls	r3, r3, #2
 8010694:	4a73      	ldr	r2, [pc, #460]	@ (8010864 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010696:	4413      	add	r3, r2
 8010698:	4619      	mov	r1, r3
 801069a:	f7fb f85d 	bl	800b758 <IKS4A1_MOTION_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 801069e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nMotion Sensor Instance %d capabilities: \r\n ACCELEROMETER: %d\r\n GYROSCOPE: %d\r\n MAGNETOMETER: %d\r\n LOW POWER: %d\r\n",
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80106a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80106a6:	486f      	ldr	r0, [pc, #444]	@ (8010864 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80106a8:	4613      	mov	r3, r2
 80106aa:	00db      	lsls	r3, r3, #3
 80106ac:	1a9b      	subs	r3, r3, r2
 80106ae:	009b      	lsls	r3, r3, #2
 80106b0:	4403      	add	r3, r0
 80106b2:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80106b4:	461c      	mov	r4, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80106b6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80106ba:	486a      	ldr	r0, [pc, #424]	@ (8010864 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80106bc:	4613      	mov	r3, r2
 80106be:	00db      	lsls	r3, r3, #3
 80106c0:	1a9b      	subs	r3, r3, r2
 80106c2:	009b      	lsls	r3, r3, #2
 80106c4:	4403      	add	r3, r0
 80106c6:	3301      	adds	r3, #1
 80106c8:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80106ca:	461d      	mov	r5, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80106cc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80106d0:	4864      	ldr	r0, [pc, #400]	@ (8010864 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80106d2:	4613      	mov	r3, r2
 80106d4:	00db      	lsls	r3, r3, #3
 80106d6:	1a9b      	subs	r3, r3, r2
 80106d8:	009b      	lsls	r3, r3, #2
 80106da:	4403      	add	r3, r0
 80106dc:	3302      	adds	r3, #2
 80106de:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80106e0:	461e      	mov	r6, r3
             i, MotionCapabilities[i].Acc, MotionCapabilities[i].Gyro, MotionCapabilities[i].Magneto, MotionCapabilities[i].LowPower);
 80106e2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80106e6:	485f      	ldr	r0, [pc, #380]	@ (8010864 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80106e8:	4613      	mov	r3, r2
 80106ea:	00db      	lsls	r3, r3, #3
 80106ec:	1a9b      	subs	r3, r3, r2
 80106ee:	009b      	lsls	r3, r3, #2
 80106f0:	4403      	add	r3, r0
 80106f2:	3303      	adds	r3, #3
 80106f4:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80106f6:	9303      	str	r3, [sp, #12]
 80106f8:	9602      	str	r6, [sp, #8]
 80106fa:	9501      	str	r5, [sp, #4]
 80106fc:	9400      	str	r4, [sp, #0]
 80106fe:	460b      	mov	r3, r1
 8010700:	4a59      	ldr	r2, [pc, #356]	@ (8010868 <MX_IKS4A1_DataLogTerminal_Init+0x250>)
 8010702:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010706:	4855      	ldr	r0, [pc, #340]	@ (801085c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010708:	f004 fcee 	bl	80150e8 <sniprintf>
    printf("%s", dataOut);
 801070c:	4953      	ldr	r1, [pc, #332]	@ (801085c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 801070e:	4854      	ldr	r0, [pc, #336]	@ (8010860 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 8010710:	f004 fc7a 	bl	8015008 <iprintf>
    floatToInt(MotionCapabilities[i].AccMaxOdr, &out_value_odr, 3);
 8010714:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010718:	4952      	ldr	r1, [pc, #328]	@ (8010864 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 801071a:	4613      	mov	r3, r2
 801071c:	00db      	lsls	r3, r3, #3
 801071e:	1a9b      	subs	r3, r3, r2
 8010720:	009b      	lsls	r3, r3, #2
 8010722:	440b      	add	r3, r1
 8010724:	3314      	adds	r3, #20
 8010726:	edd3 7a00 	vldr	s15, [r3]
 801072a:	463b      	mov	r3, r7
 801072c:	2103      	movs	r1, #3
 801072e:	4618      	mov	r0, r3
 8010730:	eeb0 0a67 	vmov.f32	s0, s15
 8010734:	f000 fa20 	bl	8010b78 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 801073c:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 801073e:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].AccMaxFS);
 8010740:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010744:	4947      	ldr	r1, [pc, #284]	@ (8010864 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010746:	4613      	mov	r3, r2
 8010748:	00db      	lsls	r3, r3, #3
 801074a:	1a9b      	subs	r3, r3, r2
 801074c:	009b      	lsls	r3, r3, #2
 801074e:	440b      	add	r3, r1
 8010750:	3308      	adds	r3, #8
 8010752:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX ACC ODR: %d.%03d Hz, MAX ACC FS: %d\r\n", (int)out_value_odr.out_int,
 8010754:	9301      	str	r3, [sp, #4]
 8010756:	9000      	str	r0, [sp, #0]
 8010758:	4623      	mov	r3, r4
 801075a:	4a44      	ldr	r2, [pc, #272]	@ (801086c <MX_IKS4A1_DataLogTerminal_Init+0x254>)
 801075c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010760:	483e      	ldr	r0, [pc, #248]	@ (801085c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010762:	f004 fcc1 	bl	80150e8 <sniprintf>
    printf("%s", dataOut);
 8010766:	493d      	ldr	r1, [pc, #244]	@ (801085c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010768:	483d      	ldr	r0, [pc, #244]	@ (8010860 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 801076a:	f004 fc4d 	bl	8015008 <iprintf>
    floatToInt(MotionCapabilities[i].GyroMaxOdr, &out_value_odr, 3);
 801076e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010772:	493c      	ldr	r1, [pc, #240]	@ (8010864 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 8010774:	4613      	mov	r3, r2
 8010776:	00db      	lsls	r3, r3, #3
 8010778:	1a9b      	subs	r3, r3, r2
 801077a:	009b      	lsls	r3, r3, #2
 801077c:	440b      	add	r3, r1
 801077e:	3310      	adds	r3, #16
 8010780:	edd3 7a00 	vldr	s15, [r3]
 8010784:	463b      	mov	r3, r7
 8010786:	2103      	movs	r1, #3
 8010788:	4618      	mov	r0, r3
 801078a:	eeb0 0a67 	vmov.f32	s0, s15
 801078e:	f000 f9f3 	bl	8010b78 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 8010796:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 8010798:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].GyroMaxFS);
 801079a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801079e:	4931      	ldr	r1, [pc, #196]	@ (8010864 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80107a0:	4613      	mov	r3, r2
 80107a2:	00db      	lsls	r3, r3, #3
 80107a4:	1a9b      	subs	r3, r3, r2
 80107a6:	009b      	lsls	r3, r3, #2
 80107a8:	440b      	add	r3, r1
 80107aa:	3304      	adds	r3, #4
 80107ac:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX GYRO ODR: %d.%03d Hz, MAX GYRO FS: %d\r\n", (int)out_value_odr.out_int,
 80107ae:	9301      	str	r3, [sp, #4]
 80107b0:	9000      	str	r0, [sp, #0]
 80107b2:	4623      	mov	r3, r4
 80107b4:	4a2e      	ldr	r2, [pc, #184]	@ (8010870 <MX_IKS4A1_DataLogTerminal_Init+0x258>)
 80107b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80107ba:	4828      	ldr	r0, [pc, #160]	@ (801085c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80107bc:	f004 fc94 	bl	80150e8 <sniprintf>
    printf("%s", dataOut);
 80107c0:	4926      	ldr	r1, [pc, #152]	@ (801085c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 80107c2:	4827      	ldr	r0, [pc, #156]	@ (8010860 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 80107c4:	f004 fc20 	bl	8015008 <iprintf>
    floatToInt(MotionCapabilities[i].MagMaxOdr, &out_value_odr, 3);
 80107c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80107cc:	4925      	ldr	r1, [pc, #148]	@ (8010864 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80107ce:	4613      	mov	r3, r2
 80107d0:	00db      	lsls	r3, r3, #3
 80107d2:	1a9b      	subs	r3, r3, r2
 80107d4:	009b      	lsls	r3, r3, #2
 80107d6:	440b      	add	r3, r1
 80107d8:	3318      	adds	r3, #24
 80107da:	edd3 7a00 	vldr	s15, [r3]
 80107de:	463b      	mov	r3, r7
 80107e0:	2103      	movs	r1, #3
 80107e2:	4618      	mov	r0, r3
 80107e4:	eeb0 0a67 	vmov.f32	s0, s15
 80107e8:	f000 f9c6 	bl	8010b78 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	461c      	mov	r4, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 80107f0:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 80107f2:	4618      	mov	r0, r3
             (int)out_value_odr.out_dec, (int)MotionCapabilities[i].MagMaxFS);
 80107f4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80107f8:	491a      	ldr	r1, [pc, #104]	@ (8010864 <MX_IKS4A1_DataLogTerminal_Init+0x24c>)
 80107fa:	4613      	mov	r3, r2
 80107fc:	00db      	lsls	r3, r3, #3
 80107fe:	1a9b      	subs	r3, r3, r2
 8010800:	009b      	lsls	r3, r3, #2
 8010802:	440b      	add	r3, r1
 8010804:	330c      	adds	r3, #12
 8010806:	681b      	ldr	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX MAG ODR: %d.%03d Hz, MAX MAG FS: %d\r\n", (int)out_value_odr.out_int,
 8010808:	9301      	str	r3, [sp, #4]
 801080a:	9000      	str	r0, [sp, #0]
 801080c:	4623      	mov	r3, r4
 801080e:	4a19      	ldr	r2, [pc, #100]	@ (8010874 <MX_IKS4A1_DataLogTerminal_Init+0x25c>)
 8010810:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010814:	4811      	ldr	r0, [pc, #68]	@ (801085c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 8010816:	f004 fc67 	bl	80150e8 <sniprintf>
    printf("%s", dataOut);
 801081a:	4910      	ldr	r1, [pc, #64]	@ (801085c <MX_IKS4A1_DataLogTerminal_Init+0x244>)
 801081c:	4810      	ldr	r0, [pc, #64]	@ (8010860 <MX_IKS4A1_DataLogTerminal_Init+0x248>)
 801081e:	f004 fbf3 	bl	8015008 <iprintf>
  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 8010822:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010826:	b29b      	uxth	r3, r3
 8010828:	3301      	adds	r3, #1
 801082a:	b29b      	uxth	r3, r3
 801082c:	81fb      	strh	r3, [r7, #14]
 801082e:	89fb      	ldrh	r3, [r7, #14]
 8010830:	2b03      	cmp	r3, #3
 8010832:	f67f af27 	bls.w	8010684 <MX_IKS4A1_DataLogTerminal_Init+0x6c>
  }

  IKS4A1_ENV_SENSOR_Init(IKS4A1_SHT40AD1B_0, ENV_TEMPERATURE | ENV_HUMIDITY);
 8010836:	2105      	movs	r1, #5
 8010838:	2002      	movs	r0, #2
 801083a:	f7fa fa1f 	bl	800ac7c <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_LPS22DF_0, ENV_TEMPERATURE | ENV_PRESSURE);
 801083e:	2103      	movs	r1, #3
 8010840:	2001      	movs	r0, #1
 8010842:	f7fa fa1b 	bl	800ac7c <IKS4A1_ENV_SENSOR_Init>

  IKS4A1_ENV_SENSOR_Init(IKS4A1_STTS22H_0, ENV_TEMPERATURE);
 8010846:	2101      	movs	r1, #1
 8010848:	2000      	movs	r0, #0
 801084a:	f7fa fa17 	bl	800ac7c <IKS4A1_ENV_SENSOR_Init>

  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 801084e:	2300      	movs	r3, #0
 8010850:	81fb      	strh	r3, [r7, #14]
 8010852:	e0c2      	b.n	80109da <MX_IKS4A1_DataLogTerminal_Init+0x3c2>
 8010854:	20002b08 	.word	0x20002b08
 8010858:	080173c0 	.word	0x080173c0
 801085c:	20002a08 	.word	0x20002a08
 8010860:	08017410 	.word	0x08017410
 8010864:	20002950 	.word	0x20002950
 8010868:	08017414 	.word	0x08017414
 801086c:	08017488 	.word	0x08017488
 8010870:	080174b4 	.word	0x080174b4
 8010874:	080174e4 	.word	0x080174e4
  {
    IKS4A1_ENV_SENSOR_GetCapabilities(i, &EnvCapabilities[i]);
 8010878:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 801087c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010880:	4613      	mov	r3, r2
 8010882:	005b      	lsls	r3, r3, #1
 8010884:	4413      	add	r3, r2
 8010886:	00db      	lsls	r3, r3, #3
 8010888:	4a58      	ldr	r2, [pc, #352]	@ (80109ec <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 801088a:	4413      	add	r3, r2
 801088c:	4619      	mov	r1, r3
 801088e:	f7fa fb03 	bl	800ae98 <IKS4A1_ENV_SENSOR_GetCapabilities>
    snprintf(dataOut, MAX_BUF_SIZE,
 8010892:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
             "\r\nEnvironmental Sensor Instance %d capabilities: \r\n TEMPERATURE: %d\r\n PRESSURE: %d\r\n HUMIDITY: %d\r\n LOW POWER: %d\r\n",
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 8010896:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801089a:	4854      	ldr	r0, [pc, #336]	@ (80109ec <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 801089c:	4613      	mov	r3, r2
 801089e:	005b      	lsls	r3, r3, #1
 80108a0:	4413      	add	r3, r2
 80108a2:	00db      	lsls	r3, r3, #3
 80108a4:	4403      	add	r3, r0
 80108a6:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80108a8:	461c      	mov	r4, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 80108aa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80108ae:	484f      	ldr	r0, [pc, #316]	@ (80109ec <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80108b0:	4613      	mov	r3, r2
 80108b2:	005b      	lsls	r3, r3, #1
 80108b4:	4413      	add	r3, r2
 80108b6:	00db      	lsls	r3, r3, #3
 80108b8:	4403      	add	r3, r0
 80108ba:	3301      	adds	r3, #1
 80108bc:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80108be:	461d      	mov	r5, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 80108c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80108c4:	4849      	ldr	r0, [pc, #292]	@ (80109ec <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80108c6:	4613      	mov	r3, r2
 80108c8:	005b      	lsls	r3, r3, #1
 80108ca:	4413      	add	r3, r2
 80108cc:	00db      	lsls	r3, r3, #3
 80108ce:	4403      	add	r3, r0
 80108d0:	3302      	adds	r3, #2
 80108d2:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80108d4:	461e      	mov	r6, r3
             i, EnvCapabilities[i].Temperature, EnvCapabilities[i].Pressure, EnvCapabilities[i].Humidity, EnvCapabilities[i].LowPower);
 80108d6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80108da:	4844      	ldr	r0, [pc, #272]	@ (80109ec <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 80108dc:	4613      	mov	r3, r2
 80108de:	005b      	lsls	r3, r3, #1
 80108e0:	4413      	add	r3, r2
 80108e2:	00db      	lsls	r3, r3, #3
 80108e4:	4403      	add	r3, r0
 80108e6:	3304      	adds	r3, #4
 80108e8:	781b      	ldrb	r3, [r3, #0]
    snprintf(dataOut, MAX_BUF_SIZE,
 80108ea:	9303      	str	r3, [sp, #12]
 80108ec:	9602      	str	r6, [sp, #8]
 80108ee:	9501      	str	r5, [sp, #4]
 80108f0:	9400      	str	r4, [sp, #0]
 80108f2:	460b      	mov	r3, r1
 80108f4:	4a3e      	ldr	r2, [pc, #248]	@ (80109f0 <MX_IKS4A1_DataLogTerminal_Init+0x3d8>)
 80108f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80108fa:	483e      	ldr	r0, [pc, #248]	@ (80109f4 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 80108fc:	f004 fbf4 	bl	80150e8 <sniprintf>
    printf("%s", dataOut);
 8010900:	493c      	ldr	r1, [pc, #240]	@ (80109f4 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010902:	483d      	ldr	r0, [pc, #244]	@ (80109f8 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8010904:	f004 fb80 	bl	8015008 <iprintf>
    floatToInt(EnvCapabilities[i].TempMaxOdr, &out_value_odr, 3);
 8010908:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801090c:	4937      	ldr	r1, [pc, #220]	@ (80109ec <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 801090e:	4613      	mov	r3, r2
 8010910:	005b      	lsls	r3, r3, #1
 8010912:	4413      	add	r3, r2
 8010914:	00db      	lsls	r3, r3, #3
 8010916:	440b      	add	r3, r1
 8010918:	330c      	adds	r3, #12
 801091a:	edd3 7a00 	vldr	s15, [r3]
 801091e:	463b      	mov	r3, r7
 8010920:	2103      	movs	r1, #3
 8010922:	4618      	mov	r0, r3
 8010924:	eeb0 0a67 	vmov.f32	s0, s15
 8010928:	f000 f926 	bl	8010b78 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 8010930:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX TEMP ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010932:	9300      	str	r3, [sp, #0]
 8010934:	4613      	mov	r3, r2
 8010936:	4a31      	ldr	r2, [pc, #196]	@ (80109fc <MX_IKS4A1_DataLogTerminal_Init+0x3e4>)
 8010938:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801093c:	482d      	ldr	r0, [pc, #180]	@ (80109f4 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 801093e:	f004 fbd3 	bl	80150e8 <sniprintf>
    printf("%s", dataOut);
 8010942:	492c      	ldr	r1, [pc, #176]	@ (80109f4 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010944:	482c      	ldr	r0, [pc, #176]	@ (80109f8 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8010946:	f004 fb5f 	bl	8015008 <iprintf>
    floatToInt(EnvCapabilities[i].PressMaxOdr, &out_value_odr, 3);
 801094a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801094e:	4927      	ldr	r1, [pc, #156]	@ (80109ec <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010950:	4613      	mov	r3, r2
 8010952:	005b      	lsls	r3, r3, #1
 8010954:	4413      	add	r3, r2
 8010956:	00db      	lsls	r3, r3, #3
 8010958:	440b      	add	r3, r1
 801095a:	3310      	adds	r3, #16
 801095c:	edd3 7a00 	vldr	s15, [r3]
 8010960:	463b      	mov	r3, r7
 8010962:	2103      	movs	r1, #3
 8010964:	4618      	mov	r0, r3
 8010966:	eeb0 0a67 	vmov.f32	s0, s15
 801096a:	f000 f905 	bl	8010b78 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	461a      	mov	r2, r3
             (int)out_value_odr.out_dec);
 8010972:	68bb      	ldr	r3, [r7, #8]
    snprintf(dataOut, MAX_BUF_SIZE, " MAX PRESS ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int,
 8010974:	9300      	str	r3, [sp, #0]
 8010976:	4613      	mov	r3, r2
 8010978:	4a21      	ldr	r2, [pc, #132]	@ (8010a00 <MX_IKS4A1_DataLogTerminal_Init+0x3e8>)
 801097a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801097e:	481d      	ldr	r0, [pc, #116]	@ (80109f4 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010980:	f004 fbb2 	bl	80150e8 <sniprintf>
    printf("%s", dataOut);
 8010984:	491b      	ldr	r1, [pc, #108]	@ (80109f4 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 8010986:	481c      	ldr	r0, [pc, #112]	@ (80109f8 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 8010988:	f004 fb3e 	bl	8015008 <iprintf>
    floatToInt(EnvCapabilities[i].HumMaxOdr, &out_value_odr, 3);
 801098c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010990:	4916      	ldr	r1, [pc, #88]	@ (80109ec <MX_IKS4A1_DataLogTerminal_Init+0x3d4>)
 8010992:	4613      	mov	r3, r2
 8010994:	005b      	lsls	r3, r3, #1
 8010996:	4413      	add	r3, r2
 8010998:	00db      	lsls	r3, r3, #3
 801099a:	440b      	add	r3, r1
 801099c:	3308      	adds	r3, #8
 801099e:	edd3 7a00 	vldr	s15, [r3]
 80109a2:	463b      	mov	r3, r7
 80109a4:	2103      	movs	r1, #3
 80109a6:	4618      	mov	r0, r3
 80109a8:	eeb0 0a67 	vmov.f32	s0, s15
 80109ac:	f000 f8e4 	bl	8010b78 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, " MAX HUM ODR: %d.%03d Hz\r\n", (int)out_value_odr.out_int, (int)out_value_odr.out_dec);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	461a      	mov	r2, r3
 80109b4:	68bb      	ldr	r3, [r7, #8]
 80109b6:	9300      	str	r3, [sp, #0]
 80109b8:	4613      	mov	r3, r2
 80109ba:	4a12      	ldr	r2, [pc, #72]	@ (8010a04 <MX_IKS4A1_DataLogTerminal_Init+0x3ec>)
 80109bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80109c0:	480c      	ldr	r0, [pc, #48]	@ (80109f4 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 80109c2:	f004 fb91 	bl	80150e8 <sniprintf>
    printf("%s", dataOut);
 80109c6:	490b      	ldr	r1, [pc, #44]	@ (80109f4 <MX_IKS4A1_DataLogTerminal_Init+0x3dc>)
 80109c8:	480b      	ldr	r0, [pc, #44]	@ (80109f8 <MX_IKS4A1_DataLogTerminal_Init+0x3e0>)
 80109ca:	f004 fb1d 	bl	8015008 <iprintf>
  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 80109ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80109d2:	b29b      	uxth	r3, r3
 80109d4:	3301      	adds	r3, #1
 80109d6:	b29b      	uxth	r3, r3
 80109d8:	81fb      	strh	r3, [r7, #14]
 80109da:	89fb      	ldrh	r3, [r7, #14]
 80109dc:	2b02      	cmp	r3, #2
 80109de:	f67f af4b 	bls.w	8010878 <MX_IKS4A1_DataLogTerminal_Init+0x260>
  }
}
 80109e2:	bf00      	nop
 80109e4:	bf00      	nop
 80109e6:	3714      	adds	r7, #20
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109ec:	200029c0 	.word	0x200029c0
 80109f0:	08017510 	.word	0x08017510
 80109f4:	20002a08 	.word	0x20002a08
 80109f8:	08017410 	.word	0x08017410
 80109fc:	08017584 	.word	0x08017584
 8010a00:	080175a0 	.word	0x080175a0
 8010a04:	080175c0 	.word	0x080175c0

08010a08 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8010a08:	b480      	push	{r7}
 8010a0a:	b083      	sub	sp, #12
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	4603      	mov	r3, r0
 8010a10:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 8010a12:	4b04      	ldr	r3, [pc, #16]	@ (8010a24 <BSP_PB_Callback+0x1c>)
 8010a14:	2201      	movs	r2, #1
 8010a16:	701a      	strb	r2, [r3, #0]
}
 8010a18:	bf00      	nop
 8010a1a:	370c      	adds	r7, #12
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr
 8010a24:	2000294c 	.word	0x2000294c

08010a28 <MX_IKS4A1_DataLogTerminal_Process>:
/**
  * @brief  Process of the DataLogTerminal application
  * @retval None
  */
void MX_IKS4A1_DataLogTerminal_Process(void)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
  int32_t i;

  if (PushButtonDetected != 0U)
 8010a2e:	4b4a      	ldr	r3, [pc, #296]	@ (8010b58 <MX_IKS4A1_DataLogTerminal_Process+0x130>)
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	b2db      	uxtb	r3, r3
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d013      	beq.n	8010a60 <MX_IKS4A1_DataLogTerminal_Process+0x38>
  {
    /* Debouncing */
    HAL_Delay(50);
 8010a38:	2032      	movs	r0, #50	@ 0x32
 8010a3a:	f7fb fcd3 	bl	800c3e4 <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState(BUTTON_KEY) == PushButtonState));
 8010a3e:	bf00      	nop
 8010a40:	2000      	movs	r0, #0
 8010a42:	f7fb fb47 	bl	800c0d4 <BSP_PB_GetState>
 8010a46:	4602      	mov	r2, r0
 8010a48:	4b44      	ldr	r3, [pc, #272]	@ (8010b5c <MX_IKS4A1_DataLogTerminal_Process+0x134>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	d0f7      	beq.n	8010a40 <MX_IKS4A1_DataLogTerminal_Process+0x18>

    /* Debouncing */
    HAL_Delay(50);
 8010a50:	2032      	movs	r0, #50	@ 0x32
 8010a52:	f7fb fcc7 	bl	800c3e4 <HAL_Delay>

    /* Reset Interrupt flag */
    PushButtonDetected = 0;
 8010a56:	4b40      	ldr	r3, [pc, #256]	@ (8010b58 <MX_IKS4A1_DataLogTerminal_Process+0x130>)
 8010a58:	2200      	movs	r2, #0
 8010a5a:	701a      	strb	r2, [r3, #0]

    MX_IKS4A1_DataLogTerminal_Init();
 8010a5c:	f7ff fddc 	bl	8010618 <MX_IKS4A1_DataLogTerminal_Init>
  }

  snprintf(dataOut, MAX_BUF_SIZE, "\r\n__________________________________________________________________________\r\n");
 8010a60:	4a3f      	ldr	r2, [pc, #252]	@ (8010b60 <MX_IKS4A1_DataLogTerminal_Process+0x138>)
 8010a62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010a66:	483f      	ldr	r0, [pc, #252]	@ (8010b64 <MX_IKS4A1_DataLogTerminal_Process+0x13c>)
 8010a68:	f004 fb3e 	bl	80150e8 <sniprintf>
  printf("%s", dataOut);
 8010a6c:	493d      	ldr	r1, [pc, #244]	@ (8010b64 <MX_IKS4A1_DataLogTerminal_Process+0x13c>)
 8010a6e:	483e      	ldr	r0, [pc, #248]	@ (8010b68 <MX_IKS4A1_DataLogTerminal_Process+0x140>)
 8010a70:	f004 faca 	bl	8015008 <iprintf>

  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 8010a74:	2300      	movs	r3, #0
 8010a76:	607b      	str	r3, [r7, #4]
 8010a78:	e02e      	b.n	8010ad8 <MX_IKS4A1_DataLogTerminal_Process+0xb0>
  {
    if(MotionCapabilities[i].Acc)
 8010a7a:	493c      	ldr	r1, [pc, #240]	@ (8010b6c <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 8010a7c:	687a      	ldr	r2, [r7, #4]
 8010a7e:	4613      	mov	r3, r2
 8010a80:	00db      	lsls	r3, r3, #3
 8010a82:	1a9b      	subs	r3, r3, r2
 8010a84:	009b      	lsls	r3, r3, #2
 8010a86:	440b      	add	r3, r1
 8010a88:	781b      	ldrb	r3, [r3, #0]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d003      	beq.n	8010a96 <MX_IKS4A1_DataLogTerminal_Process+0x6e>
    {
      Accelero_Sensor_Handler(i);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	4618      	mov	r0, r3
 8010a92:	f000 f8f1 	bl	8010c78 <Accelero_Sensor_Handler>
    }
    if(MotionCapabilities[i].Gyro)
 8010a96:	4935      	ldr	r1, [pc, #212]	@ (8010b6c <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	4613      	mov	r3, r2
 8010a9c:	00db      	lsls	r3, r3, #3
 8010a9e:	1a9b      	subs	r3, r3, r2
 8010aa0:	009b      	lsls	r3, r3, #2
 8010aa2:	440b      	add	r3, r1
 8010aa4:	3301      	adds	r3, #1
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d003      	beq.n	8010ab4 <MX_IKS4A1_DataLogTerminal_Process+0x8c>
    {
      Gyro_Sensor_Handler(i);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f000 f9a2 	bl	8010df8 <Gyro_Sensor_Handler>
    }
    if(MotionCapabilities[i].Magneto)
 8010ab4:	492d      	ldr	r1, [pc, #180]	@ (8010b6c <MX_IKS4A1_DataLogTerminal_Process+0x144>)
 8010ab6:	687a      	ldr	r2, [r7, #4]
 8010ab8:	4613      	mov	r3, r2
 8010aba:	00db      	lsls	r3, r3, #3
 8010abc:	1a9b      	subs	r3, r3, r2
 8010abe:	009b      	lsls	r3, r3, #2
 8010ac0:	440b      	add	r3, r1
 8010ac2:	3302      	adds	r3, #2
 8010ac4:	781b      	ldrb	r3, [r3, #0]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d003      	beq.n	8010ad2 <MX_IKS4A1_DataLogTerminal_Process+0xaa>
    {
      Magneto_Sensor_Handler(i);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	4618      	mov	r0, r3
 8010ace:	f000 fa53 	bl	8010f78 <Magneto_Sensor_Handler>
  for(i = 0; i < IKS4A1_MOTION_INSTANCES_NBR; i++)
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	3301      	adds	r3, #1
 8010ad6:	607b      	str	r3, [r7, #4]
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2b03      	cmp	r3, #3
 8010adc:	d9cd      	bls.n	8010a7a <MX_IKS4A1_DataLogTerminal_Process+0x52>
    }
  }

  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 8010ade:	2300      	movs	r3, #0
 8010ae0:	607b      	str	r3, [r7, #4]
 8010ae2:	e02e      	b.n	8010b42 <MX_IKS4A1_DataLogTerminal_Process+0x11a>
  {
    if(EnvCapabilities[i].Humidity)
 8010ae4:	4922      	ldr	r1, [pc, #136]	@ (8010b70 <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 8010ae6:	687a      	ldr	r2, [r7, #4]
 8010ae8:	4613      	mov	r3, r2
 8010aea:	005b      	lsls	r3, r3, #1
 8010aec:	4413      	add	r3, r2
 8010aee:	00db      	lsls	r3, r3, #3
 8010af0:	440b      	add	r3, r1
 8010af2:	3302      	adds	r3, #2
 8010af4:	781b      	ldrb	r3, [r3, #0]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d003      	beq.n	8010b02 <MX_IKS4A1_DataLogTerminal_Process+0xda>
    {
      Hum_Sensor_Handler(i);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	4618      	mov	r0, r3
 8010afe:	f000 fc43 	bl	8011388 <Hum_Sensor_Handler>
    }
    if(EnvCapabilities[i].Temperature)
 8010b02:	491b      	ldr	r1, [pc, #108]	@ (8010b70 <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 8010b04:	687a      	ldr	r2, [r7, #4]
 8010b06:	4613      	mov	r3, r2
 8010b08:	005b      	lsls	r3, r3, #1
 8010b0a:	4413      	add	r3, r2
 8010b0c:	00db      	lsls	r3, r3, #3
 8010b0e:	440b      	add	r3, r1
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d003      	beq.n	8010b1e <MX_IKS4A1_DataLogTerminal_Process+0xf6>
    {
      Temp_Sensor_Handler(i);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f000 faed 	bl	80110f8 <Temp_Sensor_Handler>
    }
    if(EnvCapabilities[i].Pressure)
 8010b1e:	4914      	ldr	r1, [pc, #80]	@ (8010b70 <MX_IKS4A1_DataLogTerminal_Process+0x148>)
 8010b20:	687a      	ldr	r2, [r7, #4]
 8010b22:	4613      	mov	r3, r2
 8010b24:	005b      	lsls	r3, r3, #1
 8010b26:	4413      	add	r3, r2
 8010b28:	00db      	lsls	r3, r3, #3
 8010b2a:	440b      	add	r3, r1
 8010b2c:	3301      	adds	r3, #1
 8010b2e:	781b      	ldrb	r3, [r3, #0]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d003      	beq.n	8010b3c <MX_IKS4A1_DataLogTerminal_Process+0x114>
    {
      Press_Sensor_Handler(i);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	4618      	mov	r0, r3
 8010b38:	f000 fb86 	bl	8011248 <Press_Sensor_Handler>
  for(i = 0; i < IKS4A1_ENV_INSTANCES_NBR; i++)
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	3301      	adds	r3, #1
 8010b40:	607b      	str	r3, [r7, #4]
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2b02      	cmp	r3, #2
 8010b46:	d9cd      	bls.n	8010ae4 <MX_IKS4A1_DataLogTerminal_Process+0xbc>
    }
  }

  HAL_Delay( 1000 );
 8010b48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010b4c:	f7fb fc4a 	bl	800c3e4 <HAL_Delay>
}
 8010b50:	bf00      	nop
 8010b52:	3708      	adds	r7, #8
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}
 8010b58:	2000294c 	.word	0x2000294c
 8010b5c:	20002b08 	.word	0x20002b08
 8010b60:	080173c0 	.word	0x080173c0
 8010b64:	20002a08 	.word	0x20002a08
 8010b68:	08017410 	.word	0x08017410
 8010b6c:	20002950 	.word	0x20002950
 8010b70:	200029c0 	.word	0x200029c0
 8010b74:	00000000 	.word	0x00000000

08010b78 <floatToInt>:
  * @param  out_value the pointer to the output integer structure
  * @param  dec_prec the decimal precision to be used
  * @retval None
  */
static void floatToInt(float in, displayFloatToInt_t *out_value, int32_t dec_prec)
{
 8010b78:	b5b0      	push	{r4, r5, r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	ed87 0a03 	vstr	s0, [r7, #12]
 8010b82:	60b8      	str	r0, [r7, #8]
 8010b84:	6079      	str	r1, [r7, #4]
  if (in >= 0.0f)
 8010b86:	edd7 7a03 	vldr	s15, [r7, #12]
 8010b8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b92:	db03      	blt.n	8010b9c <floatToInt+0x24>
  {
    out_value->sign = 0;
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	2200      	movs	r2, #0
 8010b98:	701a      	strb	r2, [r3, #0]
 8010b9a:	e008      	b.n	8010bae <floatToInt+0x36>
  }
  else
  {
    out_value->sign = 1;
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	2201      	movs	r2, #1
 8010ba0:	701a      	strb	r2, [r3, #0]
    in = -in;
 8010ba2:	edd7 7a03 	vldr	s15, [r7, #12]
 8010ba6:	eef1 7a67 	vneg.f32	s15, s15
 8010baa:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  in = in + (0.5f / (float)pow(10, (double)dec_prec));
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f7ef fcd0 	bl	8000554 <__aeabi_i2d>
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	460b      	mov	r3, r1
 8010bb8:	ec43 2b11 	vmov	d1, r2, r3
 8010bbc:	ed9f 0b2c 	vldr	d0, [pc, #176]	@ 8010c70 <floatToInt+0xf8>
 8010bc0:	f005 fa2a 	bl	8016018 <pow>
 8010bc4:	ec53 2b10 	vmov	r2, r3, d0
 8010bc8:	4610      	mov	r0, r2
 8010bca:	4619      	mov	r1, r3
 8010bcc:	f7f0 f804 	bl	8000bd8 <__aeabi_d2f>
 8010bd0:	ee06 0a90 	vmov	s13, r0
 8010bd4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010bd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010bdc:	ed97 7a03 	vldr	s14, [r7, #12]
 8010be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010be4:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_int = (int32_t)in;
 8010be8:	edd7 7a03 	vldr	s15, [r7, #12]
 8010bec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bf0:	ee17 2a90 	vmov	r2, s15
 8010bf4:	68bb      	ldr	r3, [r7, #8]
 8010bf6:	605a      	str	r2, [r3, #4]
  in = in - (float)(out_value->out_int);
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	685b      	ldr	r3, [r3, #4]
 8010bfc:	ee07 3a90 	vmov	s15, r3
 8010c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c04:	ed97 7a03 	vldr	s14, [r7, #12]
 8010c08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c0c:	edc7 7a03 	vstr	s15, [r7, #12]
  out_value->out_dec = (int32_t)trunc((double)in * pow(10, (double)dec_prec));
 8010c10:	68f8      	ldr	r0, [r7, #12]
 8010c12:	f7ef fcb1 	bl	8000578 <__aeabi_f2d>
 8010c16:	4604      	mov	r4, r0
 8010c18:	460d      	mov	r5, r1
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f7ef fc9a 	bl	8000554 <__aeabi_i2d>
 8010c20:	4602      	mov	r2, r0
 8010c22:	460b      	mov	r3, r1
 8010c24:	ec43 2b11 	vmov	d1, r2, r3
 8010c28:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 8010c70 <floatToInt+0xf8>
 8010c2c:	f005 f9f4 	bl	8016018 <pow>
 8010c30:	ec53 2b10 	vmov	r2, r3, d0
 8010c34:	4620      	mov	r0, r4
 8010c36:	4629      	mov	r1, r5
 8010c38:	f7ef fcf6 	bl	8000628 <__aeabi_dmul>
 8010c3c:	4602      	mov	r2, r0
 8010c3e:	460b      	mov	r3, r1
 8010c40:	ec43 2b17 	vmov	d7, r2, r3
 8010c44:	eeb0 0a47 	vmov.f32	s0, s14
 8010c48:	eef0 0a67 	vmov.f32	s1, s15
 8010c4c:	f005 fa60 	bl	8016110 <trunc>
 8010c50:	ec53 2b10 	vmov	r2, r3, d0
 8010c54:	4610      	mov	r0, r2
 8010c56:	4619      	mov	r1, r3
 8010c58:	f7ef ff96 	bl	8000b88 <__aeabi_d2iz>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	461a      	mov	r2, r3
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	609a      	str	r2, [r3, #8]
}
 8010c64:	bf00      	nop
 8010c66:	3710      	adds	r7, #16
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8010c6c:	f3af 8000 	nop.w
 8010c70:	00000000 	.word	0x00000000
 8010c74:	40240000 	.word	0x40240000

08010c78 <Accelero_Sensor_Handler>:
  * @brief  Handles the accelerometer axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Accelero_Sensor_Handler(uint32_t Instance)
{
 8010c78:	b5b0      	push	{r4, r5, r7, lr}
 8010c7a:	b092      	sub	sp, #72	@ 0x48
 8010c7c:	af06      	add	r7, sp, #24
 8010c7e:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t acceleration;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	4a51      	ldr	r2, [pc, #324]	@ (8010dc8 <Accelero_Sensor_Handler+0x150>)
 8010c84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010c88:	4850      	ldr	r0, [pc, #320]	@ (8010dcc <Accelero_Sensor_Handler+0x154>)
 8010c8a:	f004 fa2d 	bl	80150e8 <sniprintf>
  printf("%s", dataOut);
 8010c8e:	494f      	ldr	r1, [pc, #316]	@ (8010dcc <Accelero_Sensor_Handler+0x154>)
 8010c90:	484f      	ldr	r0, [pc, #316]	@ (8010dd0 <Accelero_Sensor_Handler+0x158>)
 8010c92:	f004 f9b9 	bl	8015008 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_ACCELERO, &acceleration))
 8010c96:	f107 031c 	add.w	r3, r7, #28
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	2102      	movs	r1, #2
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f7fa fdae 	bl	800b800 <IKS4A1_MOTION_SENSOR_GetAxes>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d007      	beq.n	8010cba <Accelero_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC[%d]: Error\r\n", (int)Instance);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	4a49      	ldr	r2, [pc, #292]	@ (8010dd4 <Accelero_Sensor_Handler+0x15c>)
 8010cae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010cb2:	4846      	ldr	r0, [pc, #280]	@ (8010dcc <Accelero_Sensor_Handler+0x154>)
 8010cb4:	f004 fa18 	bl	80150e8 <sniprintf>
 8010cb8:	e011      	b.n	8010cde <Accelero_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8010cba:	687d      	ldr	r5, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8010cbc:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8010cbe:	687a      	ldr	r2, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8010cc0:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8010cc2:	6878      	ldr	r0, [r7, #4]
             (int)acceleration.x, (int)Instance, (int)acceleration.y, (int)Instance, (int)acceleration.z);
 8010cc4:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nACC_X[%d]: %d, ACC_Y[%d]: %d, ACC_Z[%d]: %d\r\n", (int)Instance,
 8010cc6:	9404      	str	r4, [sp, #16]
 8010cc8:	9003      	str	r0, [sp, #12]
 8010cca:	9102      	str	r1, [sp, #8]
 8010ccc:	9201      	str	r2, [sp, #4]
 8010cce:	9300      	str	r3, [sp, #0]
 8010cd0:	462b      	mov	r3, r5
 8010cd2:	4a41      	ldr	r2, [pc, #260]	@ (8010dd8 <Accelero_Sensor_Handler+0x160>)
 8010cd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010cd8:	483c      	ldr	r0, [pc, #240]	@ (8010dcc <Accelero_Sensor_Handler+0x154>)
 8010cda:	f004 fa05 	bl	80150e8 <sniprintf>
  }

  printf("%s", dataOut);
 8010cde:	493b      	ldr	r1, [pc, #236]	@ (8010dcc <Accelero_Sensor_Handler+0x154>)
 8010ce0:	483b      	ldr	r0, [pc, #236]	@ (8010dd0 <Accelero_Sensor_Handler+0x158>)
 8010ce2:	f004 f991 	bl	8015008 <iprintf>

  if (verbose == 1)
 8010ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8010ddc <Accelero_Sensor_Handler+0x164>)
 8010ce8:	781b      	ldrb	r3, [r3, #0]
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	d168      	bne.n	8010dc0 <Accelero_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8010cee:	f107 030f 	add.w	r3, r7, #15
 8010cf2:	4619      	mov	r1, r3
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f7fa fd59 	bl	800b7ac <IKS4A1_MOTION_SENSOR_ReadID>
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d007      	beq.n	8010d10 <Accelero_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	4a37      	ldr	r2, [pc, #220]	@ (8010de0 <Accelero_Sensor_Handler+0x168>)
 8010d04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010d08:	4830      	ldr	r0, [pc, #192]	@ (8010dcc <Accelero_Sensor_Handler+0x154>)
 8010d0a:	f004 f9ed 	bl	80150e8 <sniprintf>
 8010d0e:	e008      	b.n	8010d22 <Accelero_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	7bfa      	ldrb	r2, [r7, #15]
 8010d14:	9200      	str	r2, [sp, #0]
 8010d16:	4a33      	ldr	r2, [pc, #204]	@ (8010de4 <Accelero_Sensor_Handler+0x16c>)
 8010d18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010d1c:	482b      	ldr	r0, [pc, #172]	@ (8010dcc <Accelero_Sensor_Handler+0x154>)
 8010d1e:	f004 f9e3 	bl	80150e8 <sniprintf>
    }

    printf("%s", dataOut);
 8010d22:	492a      	ldr	r1, [pc, #168]	@ (8010dcc <Accelero_Sensor_Handler+0x154>)
 8010d24:	482a      	ldr	r0, [pc, #168]	@ (8010dd0 <Accelero_Sensor_Handler+0x158>)
 8010d26:	f004 f96f 	bl	8015008 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_ACCELERO, &odr))
 8010d2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010d2e:	461a      	mov	r2, r3
 8010d30:	2102      	movs	r1, #2
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f7fa fda8 	bl	800b888 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d007      	beq.n	8010d4e <Accelero_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	4a29      	ldr	r2, [pc, #164]	@ (8010de8 <Accelero_Sensor_Handler+0x170>)
 8010d42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010d46:	4821      	ldr	r0, [pc, #132]	@ (8010dcc <Accelero_Sensor_Handler+0x154>)
 8010d48:	f004 f9ce 	bl	80150e8 <sniprintf>
 8010d4c:	e014      	b.n	8010d78 <Accelero_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8010d4e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8010d52:	f107 0310 	add.w	r3, r7, #16
 8010d56:	2103      	movs	r1, #3
 8010d58:	4618      	mov	r0, r3
 8010d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8010d5e:	f7ff ff0b 	bl	8010b78 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8010d66:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8010d68:	9101      	str	r1, [sp, #4]
 8010d6a:	9200      	str	r2, [sp, #0]
 8010d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8010dec <Accelero_Sensor_Handler+0x174>)
 8010d6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010d72:	4816      	ldr	r0, [pc, #88]	@ (8010dcc <Accelero_Sensor_Handler+0x154>)
 8010d74:	f004 f9b8 	bl	80150e8 <sniprintf>
    }

    printf("%s", dataOut);
 8010d78:	4914      	ldr	r1, [pc, #80]	@ (8010dcc <Accelero_Sensor_Handler+0x154>)
 8010d7a:	4815      	ldr	r0, [pc, #84]	@ (8010dd0 <Accelero_Sensor_Handler+0x158>)
 8010d7c:	f004 f944 	bl	8015008 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_ACCELERO, &fullScale))
 8010d80:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010d84:	461a      	mov	r2, r3
 8010d86:	2102      	movs	r1, #2
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f7fa fdc1 	bl	800b910 <IKS4A1_MOTION_SENSOR_GetFullScale>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d007      	beq.n	8010da4 <Accelero_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	4a16      	ldr	r2, [pc, #88]	@ (8010df0 <Accelero_Sensor_Handler+0x178>)
 8010d98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010d9c:	480b      	ldr	r0, [pc, #44]	@ (8010dcc <Accelero_Sensor_Handler+0x154>)
 8010d9e:	f004 f9a3 	bl	80150e8 <sniprintf>
 8010da2:	e009      	b.n	8010db8 <Accelero_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d g\r\n", (int)Instance, (int)fullScale);
 8010da4:	687a      	ldr	r2, [r7, #4]
 8010da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010da8:	9300      	str	r3, [sp, #0]
 8010daa:	4613      	mov	r3, r2
 8010dac:	4a11      	ldr	r2, [pc, #68]	@ (8010df4 <Accelero_Sensor_Handler+0x17c>)
 8010dae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010db2:	4806      	ldr	r0, [pc, #24]	@ (8010dcc <Accelero_Sensor_Handler+0x154>)
 8010db4:	f004 f998 	bl	80150e8 <sniprintf>
    }

    printf("%s", dataOut);
 8010db8:	4904      	ldr	r1, [pc, #16]	@ (8010dcc <Accelero_Sensor_Handler+0x154>)
 8010dba:	4805      	ldr	r0, [pc, #20]	@ (8010dd0 <Accelero_Sensor_Handler+0x158>)
 8010dbc:	f004 f924 	bl	8015008 <iprintf>
  }
}
 8010dc0:	bf00      	nop
 8010dc2:	3730      	adds	r7, #48	@ 0x30
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8010dc8:	080175dc 	.word	0x080175dc
 8010dcc:	20002a08 	.word	0x20002a08
 8010dd0:	08017410 	.word	0x08017410
 8010dd4:	080175fc 	.word	0x080175fc
 8010dd8:	08017610 	.word	0x08017610
 8010ddc:	20000225 	.word	0x20000225
 8010de0:	08017640 	.word	0x08017640
 8010de4:	08017654 	.word	0x08017654
 8010de8:	08017668 	.word	0x08017668
 8010dec:	0801767c 	.word	0x0801767c
 8010df0:	08017694 	.word	0x08017694
 8010df4:	080176a4 	.word	0x080176a4

08010df8 <Gyro_Sensor_Handler>:
  * @brief  Handles the gyroscope axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Gyro_Sensor_Handler(uint32_t Instance)
{
 8010df8:	b5b0      	push	{r4, r5, r7, lr}
 8010dfa:	b092      	sub	sp, #72	@ 0x48
 8010dfc:	af06      	add	r7, sp, #24
 8010dfe:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t angular_velocity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	4a51      	ldr	r2, [pc, #324]	@ (8010f48 <Gyro_Sensor_Handler+0x150>)
 8010e04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010e08:	4850      	ldr	r0, [pc, #320]	@ (8010f4c <Gyro_Sensor_Handler+0x154>)
 8010e0a:	f004 f96d 	bl	80150e8 <sniprintf>
  printf("%s", dataOut);
 8010e0e:	494f      	ldr	r1, [pc, #316]	@ (8010f4c <Gyro_Sensor_Handler+0x154>)
 8010e10:	484f      	ldr	r0, [pc, #316]	@ (8010f50 <Gyro_Sensor_Handler+0x158>)
 8010e12:	f004 f8f9 	bl	8015008 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_GYRO, &angular_velocity))
 8010e16:	f107 031c 	add.w	r3, r7, #28
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	2101      	movs	r1, #1
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	f7fa fcee 	bl	800b800 <IKS4A1_MOTION_SENSOR_GetAxes>
 8010e24:	4603      	mov	r3, r0
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d007      	beq.n	8010e3a <Gyro_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR[%d]: Error\r\n", (int)Instance);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	4a49      	ldr	r2, [pc, #292]	@ (8010f54 <Gyro_Sensor_Handler+0x15c>)
 8010e2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010e32:	4846      	ldr	r0, [pc, #280]	@ (8010f4c <Gyro_Sensor_Handler+0x154>)
 8010e34:	f004 f958 	bl	80150e8 <sniprintf>
 8010e38:	e011      	b.n	8010e5e <Gyro_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8010e3a:	687d      	ldr	r5, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8010e3c:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8010e3e:	687a      	ldr	r2, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8010e40:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8010e42:	6878      	ldr	r0, [r7, #4]
             (int)angular_velocity.x, (int)Instance, (int)angular_velocity.y, (int)Instance, (int)angular_velocity.z);
 8010e44:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nGYR_X[%d]: %d, GYR_Y[%d]: %d, GYR_Z[%d]: %d\r\n", (int)Instance,
 8010e46:	9404      	str	r4, [sp, #16]
 8010e48:	9003      	str	r0, [sp, #12]
 8010e4a:	9102      	str	r1, [sp, #8]
 8010e4c:	9201      	str	r2, [sp, #4]
 8010e4e:	9300      	str	r3, [sp, #0]
 8010e50:	462b      	mov	r3, r5
 8010e52:	4a41      	ldr	r2, [pc, #260]	@ (8010f58 <Gyro_Sensor_Handler+0x160>)
 8010e54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010e58:	483c      	ldr	r0, [pc, #240]	@ (8010f4c <Gyro_Sensor_Handler+0x154>)
 8010e5a:	f004 f945 	bl	80150e8 <sniprintf>
  }

  printf("%s", dataOut);
 8010e5e:	493b      	ldr	r1, [pc, #236]	@ (8010f4c <Gyro_Sensor_Handler+0x154>)
 8010e60:	483b      	ldr	r0, [pc, #236]	@ (8010f50 <Gyro_Sensor_Handler+0x158>)
 8010e62:	f004 f8d1 	bl	8015008 <iprintf>

  if (verbose == 1)
 8010e66:	4b3d      	ldr	r3, [pc, #244]	@ (8010f5c <Gyro_Sensor_Handler+0x164>)
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	2b01      	cmp	r3, #1
 8010e6c:	d168      	bne.n	8010f40 <Gyro_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8010e6e:	f107 030f 	add.w	r3, r7, #15
 8010e72:	4619      	mov	r1, r3
 8010e74:	6878      	ldr	r0, [r7, #4]
 8010e76:	f7fa fc99 	bl	800b7ac <IKS4A1_MOTION_SENSOR_ReadID>
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d007      	beq.n	8010e90 <Gyro_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	4a37      	ldr	r2, [pc, #220]	@ (8010f60 <Gyro_Sensor_Handler+0x168>)
 8010e84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010e88:	4830      	ldr	r0, [pc, #192]	@ (8010f4c <Gyro_Sensor_Handler+0x154>)
 8010e8a:	f004 f92d 	bl	80150e8 <sniprintf>
 8010e8e:	e008      	b.n	8010ea2 <Gyro_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	7bfa      	ldrb	r2, [r7, #15]
 8010e94:	9200      	str	r2, [sp, #0]
 8010e96:	4a33      	ldr	r2, [pc, #204]	@ (8010f64 <Gyro_Sensor_Handler+0x16c>)
 8010e98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010e9c:	482b      	ldr	r0, [pc, #172]	@ (8010f4c <Gyro_Sensor_Handler+0x154>)
 8010e9e:	f004 f923 	bl	80150e8 <sniprintf>
    }

    printf("%s", dataOut);
 8010ea2:	492a      	ldr	r1, [pc, #168]	@ (8010f4c <Gyro_Sensor_Handler+0x154>)
 8010ea4:	482a      	ldr	r0, [pc, #168]	@ (8010f50 <Gyro_Sensor_Handler+0x158>)
 8010ea6:	f004 f8af 	bl	8015008 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_GYRO, &odr))
 8010eaa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010eae:	461a      	mov	r2, r3
 8010eb0:	2101      	movs	r1, #1
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	f7fa fce8 	bl	800b888 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d007      	beq.n	8010ece <Gyro_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	4a29      	ldr	r2, [pc, #164]	@ (8010f68 <Gyro_Sensor_Handler+0x170>)
 8010ec2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010ec6:	4821      	ldr	r0, [pc, #132]	@ (8010f4c <Gyro_Sensor_Handler+0x154>)
 8010ec8:	f004 f90e 	bl	80150e8 <sniprintf>
 8010ecc:	e014      	b.n	8010ef8 <Gyro_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8010ece:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8010ed2:	f107 0310 	add.w	r3, r7, #16
 8010ed6:	2103      	movs	r1, #3
 8010ed8:	4618      	mov	r0, r3
 8010eda:	eeb0 0a67 	vmov.f32	s0, s15
 8010ede:	f7ff fe4b 	bl	8010b78 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8010ee6:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8010ee8:	9101      	str	r1, [sp, #4]
 8010eea:	9200      	str	r2, [sp, #0]
 8010eec:	4a1f      	ldr	r2, [pc, #124]	@ (8010f6c <Gyro_Sensor_Handler+0x174>)
 8010eee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010ef2:	4816      	ldr	r0, [pc, #88]	@ (8010f4c <Gyro_Sensor_Handler+0x154>)
 8010ef4:	f004 f8f8 	bl	80150e8 <sniprintf>
    }

    printf("%s", dataOut);
 8010ef8:	4914      	ldr	r1, [pc, #80]	@ (8010f4c <Gyro_Sensor_Handler+0x154>)
 8010efa:	4815      	ldr	r0, [pc, #84]	@ (8010f50 <Gyro_Sensor_Handler+0x158>)
 8010efc:	f004 f884 	bl	8015008 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_GYRO, &fullScale))
 8010f00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010f04:	461a      	mov	r2, r3
 8010f06:	2101      	movs	r1, #1
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f7fa fd01 	bl	800b910 <IKS4A1_MOTION_SENSOR_GetFullScale>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d007      	beq.n	8010f24 <Gyro_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	4a16      	ldr	r2, [pc, #88]	@ (8010f70 <Gyro_Sensor_Handler+0x178>)
 8010f18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010f1c:	480b      	ldr	r0, [pc, #44]	@ (8010f4c <Gyro_Sensor_Handler+0x154>)
 8010f1e:	f004 f8e3 	bl	80150e8 <sniprintf>
 8010f22:	e009      	b.n	8010f38 <Gyro_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d dps\r\n", (int)Instance, (int)fullScale);
 8010f24:	687a      	ldr	r2, [r7, #4]
 8010f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f28:	9300      	str	r3, [sp, #0]
 8010f2a:	4613      	mov	r3, r2
 8010f2c:	4a11      	ldr	r2, [pc, #68]	@ (8010f74 <Gyro_Sensor_Handler+0x17c>)
 8010f2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010f32:	4806      	ldr	r0, [pc, #24]	@ (8010f4c <Gyro_Sensor_Handler+0x154>)
 8010f34:	f004 f8d8 	bl	80150e8 <sniprintf>
    }

    printf("%s", dataOut);
 8010f38:	4904      	ldr	r1, [pc, #16]	@ (8010f4c <Gyro_Sensor_Handler+0x154>)
 8010f3a:	4805      	ldr	r0, [pc, #20]	@ (8010f50 <Gyro_Sensor_Handler+0x158>)
 8010f3c:	f004 f864 	bl	8015008 <iprintf>
  }
}
 8010f40:	bf00      	nop
 8010f42:	3730      	adds	r7, #48	@ 0x30
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bdb0      	pop	{r4, r5, r7, pc}
 8010f48:	080175dc 	.word	0x080175dc
 8010f4c:	20002a08 	.word	0x20002a08
 8010f50:	08017410 	.word	0x08017410
 8010f54:	080176b4 	.word	0x080176b4
 8010f58:	080176c8 	.word	0x080176c8
 8010f5c:	20000225 	.word	0x20000225
 8010f60:	08017640 	.word	0x08017640
 8010f64:	08017654 	.word	0x08017654
 8010f68:	08017668 	.word	0x08017668
 8010f6c:	0801767c 	.word	0x0801767c
 8010f70:	08017694 	.word	0x08017694
 8010f74:	080176f8 	.word	0x080176f8

08010f78 <Magneto_Sensor_Handler>:
  * @brief  Handles the magneto axes data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Magneto_Sensor_Handler(uint32_t Instance)
{
 8010f78:	b5b0      	push	{r4, r5, r7, lr}
 8010f7a:	b092      	sub	sp, #72	@ 0x48
 8010f7c:	af06      	add	r7, sp, #24
 8010f7e:	6078      	str	r0, [r7, #4]
  int32_t fullScale;
  IKS4A1_MOTION_SENSOR_Axes_t magnetic_field;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nMotion sensor instance %d:", (int)Instance);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	4a51      	ldr	r2, [pc, #324]	@ (80110c8 <Magneto_Sensor_Handler+0x150>)
 8010f84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010f88:	4850      	ldr	r0, [pc, #320]	@ (80110cc <Magneto_Sensor_Handler+0x154>)
 8010f8a:	f004 f8ad 	bl	80150e8 <sniprintf>
  printf("%s", dataOut);
 8010f8e:	494f      	ldr	r1, [pc, #316]	@ (80110cc <Magneto_Sensor_Handler+0x154>)
 8010f90:	484f      	ldr	r0, [pc, #316]	@ (80110d0 <Magneto_Sensor_Handler+0x158>)
 8010f92:	f004 f839 	bl	8015008 <iprintf>

  if (IKS4A1_MOTION_SENSOR_GetAxes(Instance, MOTION_MAGNETO, &magnetic_field))
 8010f96:	f107 031c 	add.w	r3, r7, #28
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	2104      	movs	r1, #4
 8010f9e:	6878      	ldr	r0, [r7, #4]
 8010fa0:	f7fa fc2e 	bl	800b800 <IKS4A1_MOTION_SENSOR_GetAxes>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d007      	beq.n	8010fba <Magneto_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG[%d]: Error\r\n", (int)Instance);
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	4a49      	ldr	r2, [pc, #292]	@ (80110d4 <Magneto_Sensor_Handler+0x15c>)
 8010fae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010fb2:	4846      	ldr	r0, [pc, #280]	@ (80110cc <Magneto_Sensor_Handler+0x154>)
 8010fb4:	f004 f898 	bl	80150e8 <sniprintf>
 8010fb8:	e011      	b.n	8010fde <Magneto_Sensor_Handler+0x66>
  }
  else
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8010fba:	687d      	ldr	r5, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8010fbc:	69fb      	ldr	r3, [r7, #28]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8010fbe:	687a      	ldr	r2, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8010fc0:	6a39      	ldr	r1, [r7, #32]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8010fc2:	6878      	ldr	r0, [r7, #4]
             (int)magnetic_field.x, (int)Instance, (int)magnetic_field.y, (int)Instance, (int)magnetic_field.z);
 8010fc4:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nMAG_X[%d]: %d, MAG_Y[%d]: %d, MAG_Z[%d]: %d\r\n", (int)Instance,
 8010fc6:	9404      	str	r4, [sp, #16]
 8010fc8:	9003      	str	r0, [sp, #12]
 8010fca:	9102      	str	r1, [sp, #8]
 8010fcc:	9201      	str	r2, [sp, #4]
 8010fce:	9300      	str	r3, [sp, #0]
 8010fd0:	462b      	mov	r3, r5
 8010fd2:	4a41      	ldr	r2, [pc, #260]	@ (80110d8 <Magneto_Sensor_Handler+0x160>)
 8010fd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010fd8:	483c      	ldr	r0, [pc, #240]	@ (80110cc <Magneto_Sensor_Handler+0x154>)
 8010fda:	f004 f885 	bl	80150e8 <sniprintf>
  }

  printf("%s", dataOut);
 8010fde:	493b      	ldr	r1, [pc, #236]	@ (80110cc <Magneto_Sensor_Handler+0x154>)
 8010fe0:	483b      	ldr	r0, [pc, #236]	@ (80110d0 <Magneto_Sensor_Handler+0x158>)
 8010fe2:	f004 f811 	bl	8015008 <iprintf>

  if (verbose == 1)
 8010fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80110dc <Magneto_Sensor_Handler+0x164>)
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	2b01      	cmp	r3, #1
 8010fec:	d168      	bne.n	80110c0 <Magneto_Sensor_Handler+0x148>
  {
    if (IKS4A1_MOTION_SENSOR_ReadID(Instance, &whoami))
 8010fee:	f107 030f 	add.w	r3, r7, #15
 8010ff2:	4619      	mov	r1, r3
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f7fa fbd9 	bl	800b7ac <IKS4A1_MOTION_SENSOR_ReadID>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d007      	beq.n	8011010 <Magneto_Sensor_Handler+0x98>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	4a37      	ldr	r2, [pc, #220]	@ (80110e0 <Magneto_Sensor_Handler+0x168>)
 8011004:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011008:	4830      	ldr	r0, [pc, #192]	@ (80110cc <Magneto_Sensor_Handler+0x154>)
 801100a:	f004 f86d 	bl	80150e8 <sniprintf>
 801100e:	e008      	b.n	8011022 <Magneto_Sensor_Handler+0xaa>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	7bfa      	ldrb	r2, [r7, #15]
 8011014:	9200      	str	r2, [sp, #0]
 8011016:	4a33      	ldr	r2, [pc, #204]	@ (80110e4 <Magneto_Sensor_Handler+0x16c>)
 8011018:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801101c:	482b      	ldr	r0, [pc, #172]	@ (80110cc <Magneto_Sensor_Handler+0x154>)
 801101e:	f004 f863 	bl	80150e8 <sniprintf>
    }

    printf("%s", dataOut);
 8011022:	492a      	ldr	r1, [pc, #168]	@ (80110cc <Magneto_Sensor_Handler+0x154>)
 8011024:	482a      	ldr	r0, [pc, #168]	@ (80110d0 <Magneto_Sensor_Handler+0x158>)
 8011026:	f003 ffef 	bl	8015008 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetOutputDataRate(Instance, MOTION_MAGNETO, &odr))
 801102a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801102e:	461a      	mov	r2, r3
 8011030:	2104      	movs	r1, #4
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f7fa fc28 	bl	800b888 <IKS4A1_MOTION_SENSOR_GetOutputDataRate>
 8011038:	4603      	mov	r3, r0
 801103a:	2b00      	cmp	r3, #0
 801103c:	d007      	beq.n	801104e <Magneto_Sensor_Handler+0xd6>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: ERROR\r\n", (int)Instance);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	4a29      	ldr	r2, [pc, #164]	@ (80110e8 <Magneto_Sensor_Handler+0x170>)
 8011042:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011046:	4821      	ldr	r0, [pc, #132]	@ (80110cc <Magneto_Sensor_Handler+0x154>)
 8011048:	f004 f84e 	bl	80150e8 <sniprintf>
 801104c:	e014      	b.n	8011078 <Magneto_Sensor_Handler+0x100>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 801104e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011052:	f107 0310 	add.w	r3, r7, #16
 8011056:	2103      	movs	r1, #3
 8011058:	4618      	mov	r0, r3
 801105a:	eeb0 0a67 	vmov.f32	s0, s15
 801105e:	f7ff fd8b 	bl	8010b78 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	697a      	ldr	r2, [r7, #20]
               (int)out_value.out_dec);
 8011066:	69b9      	ldr	r1, [r7, #24]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011068:	9101      	str	r1, [sp, #4]
 801106a:	9200      	str	r2, [sp, #0]
 801106c:	4a1f      	ldr	r2, [pc, #124]	@ (80110ec <Magneto_Sensor_Handler+0x174>)
 801106e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011072:	4816      	ldr	r0, [pc, #88]	@ (80110cc <Magneto_Sensor_Handler+0x154>)
 8011074:	f004 f838 	bl	80150e8 <sniprintf>
    }

    printf("%s", dataOut);
 8011078:	4914      	ldr	r1, [pc, #80]	@ (80110cc <Magneto_Sensor_Handler+0x154>)
 801107a:	4815      	ldr	r0, [pc, #84]	@ (80110d0 <Magneto_Sensor_Handler+0x158>)
 801107c:	f003 ffc4 	bl	8015008 <iprintf>

    if (IKS4A1_MOTION_SENSOR_GetFullScale(Instance, MOTION_MAGNETO, &fullScale))
 8011080:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011084:	461a      	mov	r2, r3
 8011086:	2104      	movs	r1, #4
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	f7fa fc41 	bl	800b910 <IKS4A1_MOTION_SENSOR_GetFullScale>
 801108e:	4603      	mov	r3, r0
 8011090:	2b00      	cmp	r3, #0
 8011092:	d007      	beq.n	80110a4 <Magneto_Sensor_Handler+0x12c>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: ERROR\r\n", (int)Instance);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	4a16      	ldr	r2, [pc, #88]	@ (80110f0 <Magneto_Sensor_Handler+0x178>)
 8011098:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801109c:	480b      	ldr	r0, [pc, #44]	@ (80110cc <Magneto_Sensor_Handler+0x154>)
 801109e:	f004 f823 	bl	80150e8 <sniprintf>
 80110a2:	e009      	b.n	80110b8 <Magneto_Sensor_Handler+0x140>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "FS[%d]: %d gauss\r\n", (int)Instance, (int)fullScale);
 80110a4:	687a      	ldr	r2, [r7, #4]
 80110a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110a8:	9300      	str	r3, [sp, #0]
 80110aa:	4613      	mov	r3, r2
 80110ac:	4a11      	ldr	r2, [pc, #68]	@ (80110f4 <Magneto_Sensor_Handler+0x17c>)
 80110ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80110b2:	4806      	ldr	r0, [pc, #24]	@ (80110cc <Magneto_Sensor_Handler+0x154>)
 80110b4:	f004 f818 	bl	80150e8 <sniprintf>
    }

    printf("%s", dataOut);
 80110b8:	4904      	ldr	r1, [pc, #16]	@ (80110cc <Magneto_Sensor_Handler+0x154>)
 80110ba:	4805      	ldr	r0, [pc, #20]	@ (80110d0 <Magneto_Sensor_Handler+0x158>)
 80110bc:	f003 ffa4 	bl	8015008 <iprintf>
  }
}
 80110c0:	bf00      	nop
 80110c2:	3730      	adds	r7, #48	@ 0x30
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bdb0      	pop	{r4, r5, r7, pc}
 80110c8:	080175dc 	.word	0x080175dc
 80110cc:	20002a08 	.word	0x20002a08
 80110d0:	08017410 	.word	0x08017410
 80110d4:	0801770c 	.word	0x0801770c
 80110d8:	08017720 	.word	0x08017720
 80110dc:	20000225 	.word	0x20000225
 80110e0:	08017640 	.word	0x08017640
 80110e4:	08017654 	.word	0x08017654
 80110e8:	08017668 	.word	0x08017668
 80110ec:	0801767c 	.word	0x0801767c
 80110f0:	08017694 	.word	0x08017694
 80110f4:	08017750 	.word	0x08017750

080110f8 <Temp_Sensor_Handler>:
  * @brief  Handles the temperature data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Temp_Sensor_Handler(uint32_t Instance)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b08c      	sub	sp, #48	@ 0x30
 80110fc:	af04      	add	r7, sp, #16
 80110fe:	6078      	str	r0, [r7, #4]
  float odr;
  float temperature;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	4a47      	ldr	r2, [pc, #284]	@ (8011220 <Temp_Sensor_Handler+0x128>)
 8011104:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011108:	4846      	ldr	r0, [pc, #280]	@ (8011224 <Temp_Sensor_Handler+0x12c>)
 801110a:	f003 ffed 	bl	80150e8 <sniprintf>
  printf("%s", dataOut);
 801110e:	4945      	ldr	r1, [pc, #276]	@ (8011224 <Temp_Sensor_Handler+0x12c>)
 8011110:	4845      	ldr	r0, [pc, #276]	@ (8011228 <Temp_Sensor_Handler+0x130>)
 8011112:	f003 ff79 	bl	8015008 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_TEMPERATURE, &temperature))
 8011116:	f107 0318 	add.w	r3, r7, #24
 801111a:	461a      	mov	r2, r3
 801111c:	2101      	movs	r1, #1
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f7f9 ff50 	bl	800afc4 <IKS4A1_ENV_SENSOR_GetValue>
 8011124:	4603      	mov	r3, r0
 8011126:	2b00      	cmp	r3, #0
 8011128:	d007      	beq.n	801113a <Temp_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: Error\r\n", (int)Instance);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	4a3f      	ldr	r2, [pc, #252]	@ (801122c <Temp_Sensor_Handler+0x134>)
 801112e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011132:	483c      	ldr	r0, [pc, #240]	@ (8011224 <Temp_Sensor_Handler+0x12c>)
 8011134:	f003 ffd8 	bl	80150e8 <sniprintf>
 8011138:	e01d      	b.n	8011176 <Temp_Sensor_Handler+0x7e>
  }
  else
  {
    floatToInt(temperature, &out_value, 2);
 801113a:	edd7 7a06 	vldr	s15, [r7, #24]
 801113e:	f107 030c 	add.w	r3, r7, #12
 8011142:	2102      	movs	r1, #2
 8011144:	4618      	mov	r0, r3
 8011146:	eeb0 0a67 	vmov.f32	s0, s15
 801114a:	f7ff fd15 	bl	8010b78 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 801114e:	687a      	ldr	r2, [r7, #4]
 8011150:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d001      	beq.n	801115c <Temp_Sensor_Handler+0x64>
 8011158:	232d      	movs	r3, #45	@ 0x2d
 801115a:	e000      	b.n	801115e <Temp_Sensor_Handler+0x66>
 801115c:	232b      	movs	r3, #43	@ 0x2b
 801115e:	6939      	ldr	r1, [r7, #16]
             (int)out_value.out_dec);
 8011160:	6978      	ldr	r0, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nTemp[%d]: %c%d.%02d degC\r\n", (int)Instance, ((out_value.sign) ? '-' : '+'), (int)out_value.out_int,
 8011162:	9002      	str	r0, [sp, #8]
 8011164:	9101      	str	r1, [sp, #4]
 8011166:	9300      	str	r3, [sp, #0]
 8011168:	4613      	mov	r3, r2
 801116a:	4a31      	ldr	r2, [pc, #196]	@ (8011230 <Temp_Sensor_Handler+0x138>)
 801116c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011170:	482c      	ldr	r0, [pc, #176]	@ (8011224 <Temp_Sensor_Handler+0x12c>)
 8011172:	f003 ffb9 	bl	80150e8 <sniprintf>
  }

  printf("%s", dataOut);
 8011176:	492b      	ldr	r1, [pc, #172]	@ (8011224 <Temp_Sensor_Handler+0x12c>)
 8011178:	482b      	ldr	r0, [pc, #172]	@ (8011228 <Temp_Sensor_Handler+0x130>)
 801117a:	f003 ff45 	bl	8015008 <iprintf>

  if (verbose == 1)
 801117e:	4b2d      	ldr	r3, [pc, #180]	@ (8011234 <Temp_Sensor_Handler+0x13c>)
 8011180:	781b      	ldrb	r3, [r3, #0]
 8011182:	2b01      	cmp	r3, #1
 8011184:	d148      	bne.n	8011218 <Temp_Sensor_Handler+0x120>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 8011186:	f107 030b 	add.w	r3, r7, #11
 801118a:	4619      	mov	r1, r3
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f7f9 fead 	bl	800aeec <IKS4A1_ENV_SENSOR_ReadID>
 8011192:	4603      	mov	r3, r0
 8011194:	2b00      	cmp	r3, #0
 8011196:	d007      	beq.n	80111a8 <Temp_Sensor_Handler+0xb0>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	4a27      	ldr	r2, [pc, #156]	@ (8011238 <Temp_Sensor_Handler+0x140>)
 801119c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80111a0:	4820      	ldr	r0, [pc, #128]	@ (8011224 <Temp_Sensor_Handler+0x12c>)
 80111a2:	f003 ffa1 	bl	80150e8 <sniprintf>
 80111a6:	e008      	b.n	80111ba <Temp_Sensor_Handler+0xc2>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	7afa      	ldrb	r2, [r7, #11]
 80111ac:	9200      	str	r2, [sp, #0]
 80111ae:	4a23      	ldr	r2, [pc, #140]	@ (801123c <Temp_Sensor_Handler+0x144>)
 80111b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80111b4:	481b      	ldr	r0, [pc, #108]	@ (8011224 <Temp_Sensor_Handler+0x12c>)
 80111b6:	f003 ff97 	bl	80150e8 <sniprintf>
    }

    printf("%s", dataOut);
 80111ba:	491a      	ldr	r1, [pc, #104]	@ (8011224 <Temp_Sensor_Handler+0x12c>)
 80111bc:	481a      	ldr	r0, [pc, #104]	@ (8011228 <Temp_Sensor_Handler+0x130>)
 80111be:	f003 ff23 	bl	8015008 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_TEMPERATURE, &odr))
 80111c2:	f107 031c 	add.w	r3, r7, #28
 80111c6:	461a      	mov	r2, r3
 80111c8:	2101      	movs	r1, #1
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f7f9 feb8 	bl	800af40 <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 80111d0:	4603      	mov	r3, r0
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d007      	beq.n	80111e6 <Temp_Sensor_Handler+0xee>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	4a19      	ldr	r2, [pc, #100]	@ (8011240 <Temp_Sensor_Handler+0x148>)
 80111da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80111de:	4811      	ldr	r0, [pc, #68]	@ (8011224 <Temp_Sensor_Handler+0x12c>)
 80111e0:	f003 ff82 	bl	80150e8 <sniprintf>
 80111e4:	e014      	b.n	8011210 <Temp_Sensor_Handler+0x118>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 80111e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80111ea:	f107 030c 	add.w	r3, r7, #12
 80111ee:	2103      	movs	r1, #3
 80111f0:	4618      	mov	r0, r3
 80111f2:	eeb0 0a67 	vmov.f32	s0, s15
 80111f6:	f7ff fcbf 	bl	8010b78 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 80111fe:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011200:	9101      	str	r1, [sp, #4]
 8011202:	9200      	str	r2, [sp, #0]
 8011204:	4a0f      	ldr	r2, [pc, #60]	@ (8011244 <Temp_Sensor_Handler+0x14c>)
 8011206:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801120a:	4806      	ldr	r0, [pc, #24]	@ (8011224 <Temp_Sensor_Handler+0x12c>)
 801120c:	f003 ff6c 	bl	80150e8 <sniprintf>
    }

    printf("%s", dataOut);
 8011210:	4904      	ldr	r1, [pc, #16]	@ (8011224 <Temp_Sensor_Handler+0x12c>)
 8011212:	4805      	ldr	r0, [pc, #20]	@ (8011228 <Temp_Sensor_Handler+0x130>)
 8011214:	f003 fef8 	bl	8015008 <iprintf>
  }
}
 8011218:	bf00      	nop
 801121a:	3720      	adds	r7, #32
 801121c:	46bd      	mov	sp, r7
 801121e:	bd80      	pop	{r7, pc}
 8011220:	08017764 	.word	0x08017764
 8011224:	20002a08 	.word	0x20002a08
 8011228:	08017410 	.word	0x08017410
 801122c:	08017788 	.word	0x08017788
 8011230:	0801779c 	.word	0x0801779c
 8011234:	20000225 	.word	0x20000225
 8011238:	08017640 	.word	0x08017640
 801123c:	08017654 	.word	0x08017654
 8011240:	080177bc 	.word	0x080177bc
 8011244:	0801767c 	.word	0x0801767c

08011248 <Press_Sensor_Handler>:
  * @brief  Handles the pressure sensor data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Press_Sensor_Handler(uint32_t Instance)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b08a      	sub	sp, #40	@ 0x28
 801124c:	af02      	add	r7, sp, #8
 801124e:	6078      	str	r0, [r7, #4]
  float odr;
  float pressure;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	4a43      	ldr	r2, [pc, #268]	@ (8011360 <Press_Sensor_Handler+0x118>)
 8011254:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011258:	4842      	ldr	r0, [pc, #264]	@ (8011364 <Press_Sensor_Handler+0x11c>)
 801125a:	f003 ff45 	bl	80150e8 <sniprintf>
  printf("%s", dataOut);
 801125e:	4941      	ldr	r1, [pc, #260]	@ (8011364 <Press_Sensor_Handler+0x11c>)
 8011260:	4841      	ldr	r0, [pc, #260]	@ (8011368 <Press_Sensor_Handler+0x120>)
 8011262:	f003 fed1 	bl	8015008 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_PRESSURE, &pressure))
 8011266:	f107 0318 	add.w	r3, r7, #24
 801126a:	461a      	mov	r2, r3
 801126c:	2102      	movs	r1, #2
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f7f9 fea8 	bl	800afc4 <IKS4A1_ENV_SENSOR_GetValue>
 8011274:	4603      	mov	r3, r0
 8011276:	2b00      	cmp	r3, #0
 8011278:	d007      	beq.n	801128a <Press_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: Error\r\n", (int)Instance);
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	4a3b      	ldr	r2, [pc, #236]	@ (801136c <Press_Sensor_Handler+0x124>)
 801127e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011282:	4838      	ldr	r0, [pc, #224]	@ (8011364 <Press_Sensor_Handler+0x11c>)
 8011284:	f003 ff30 	bl	80150e8 <sniprintf>
 8011288:	e014      	b.n	80112b4 <Press_Sensor_Handler+0x6c>
  }
  else
  {
    floatToInt(pressure, &out_value, 2);
 801128a:	edd7 7a06 	vldr	s15, [r7, #24]
 801128e:	f107 030c 	add.w	r3, r7, #12
 8011292:	2102      	movs	r1, #2
 8011294:	4618      	mov	r0, r3
 8011296:	eeb0 0a67 	vmov.f32	s0, s15
 801129a:	f7ff fc6d 	bl	8010b78 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 80112a2:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nPress[%d]: %d.%02d hPa\r\n", (int)Instance, (int)out_value.out_int,
 80112a4:	9101      	str	r1, [sp, #4]
 80112a6:	9200      	str	r2, [sp, #0]
 80112a8:	4a31      	ldr	r2, [pc, #196]	@ (8011370 <Press_Sensor_Handler+0x128>)
 80112aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80112ae:	482d      	ldr	r0, [pc, #180]	@ (8011364 <Press_Sensor_Handler+0x11c>)
 80112b0:	f003 ff1a 	bl	80150e8 <sniprintf>
  }

  printf("%s", dataOut);
 80112b4:	492b      	ldr	r1, [pc, #172]	@ (8011364 <Press_Sensor_Handler+0x11c>)
 80112b6:	482c      	ldr	r0, [pc, #176]	@ (8011368 <Press_Sensor_Handler+0x120>)
 80112b8:	f003 fea6 	bl	8015008 <iprintf>

  if (verbose == 1)
 80112bc:	4b2d      	ldr	r3, [pc, #180]	@ (8011374 <Press_Sensor_Handler+0x12c>)
 80112be:	781b      	ldrb	r3, [r3, #0]
 80112c0:	2b01      	cmp	r3, #1
 80112c2:	d148      	bne.n	8011356 <Press_Sensor_Handler+0x10e>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 80112c4:	f107 030b 	add.w	r3, r7, #11
 80112c8:	4619      	mov	r1, r3
 80112ca:	6878      	ldr	r0, [r7, #4]
 80112cc:	f7f9 fe0e 	bl	800aeec <IKS4A1_ENV_SENSOR_ReadID>
 80112d0:	4603      	mov	r3, r0
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d007      	beq.n	80112e6 <Press_Sensor_Handler+0x9e>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	4a27      	ldr	r2, [pc, #156]	@ (8011378 <Press_Sensor_Handler+0x130>)
 80112da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80112de:	4821      	ldr	r0, [pc, #132]	@ (8011364 <Press_Sensor_Handler+0x11c>)
 80112e0:	f003 ff02 	bl	80150e8 <sniprintf>
 80112e4:	e008      	b.n	80112f8 <Press_Sensor_Handler+0xb0>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	7afa      	ldrb	r2, [r7, #11]
 80112ea:	9200      	str	r2, [sp, #0]
 80112ec:	4a23      	ldr	r2, [pc, #140]	@ (801137c <Press_Sensor_Handler+0x134>)
 80112ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80112f2:	481c      	ldr	r0, [pc, #112]	@ (8011364 <Press_Sensor_Handler+0x11c>)
 80112f4:	f003 fef8 	bl	80150e8 <sniprintf>
    }

    printf("%s", dataOut);
 80112f8:	491a      	ldr	r1, [pc, #104]	@ (8011364 <Press_Sensor_Handler+0x11c>)
 80112fa:	481b      	ldr	r0, [pc, #108]	@ (8011368 <Press_Sensor_Handler+0x120>)
 80112fc:	f003 fe84 	bl	8015008 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_PRESSURE, &odr))
 8011300:	f107 031c 	add.w	r3, r7, #28
 8011304:	461a      	mov	r2, r3
 8011306:	2102      	movs	r1, #2
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f7f9 fe19 	bl	800af40 <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 801130e:	4603      	mov	r3, r0
 8011310:	2b00      	cmp	r3, #0
 8011312:	d007      	beq.n	8011324 <Press_Sensor_Handler+0xdc>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	4a1a      	ldr	r2, [pc, #104]	@ (8011380 <Press_Sensor_Handler+0x138>)
 8011318:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801131c:	4811      	ldr	r0, [pc, #68]	@ (8011364 <Press_Sensor_Handler+0x11c>)
 801131e:	f003 fee3 	bl	80150e8 <sniprintf>
 8011322:	e014      	b.n	801134e <Press_Sensor_Handler+0x106>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8011324:	edd7 7a07 	vldr	s15, [r7, #28]
 8011328:	f107 030c 	add.w	r3, r7, #12
 801132c:	2103      	movs	r1, #3
 801132e:	4618      	mov	r0, r3
 8011330:	eeb0 0a67 	vmov.f32	s0, s15
 8011334:	f7ff fc20 	bl	8010b78 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 801133c:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 801133e:	9101      	str	r1, [sp, #4]
 8011340:	9200      	str	r2, [sp, #0]
 8011342:	4a10      	ldr	r2, [pc, #64]	@ (8011384 <Press_Sensor_Handler+0x13c>)
 8011344:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011348:	4806      	ldr	r0, [pc, #24]	@ (8011364 <Press_Sensor_Handler+0x11c>)
 801134a:	f003 fecd 	bl	80150e8 <sniprintf>
    }

    printf("%s", dataOut);
 801134e:	4905      	ldr	r1, [pc, #20]	@ (8011364 <Press_Sensor_Handler+0x11c>)
 8011350:	4805      	ldr	r0, [pc, #20]	@ (8011368 <Press_Sensor_Handler+0x120>)
 8011352:	f003 fe59 	bl	8015008 <iprintf>
  }
}
 8011356:	bf00      	nop
 8011358:	3720      	adds	r7, #32
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}
 801135e:	bf00      	nop
 8011360:	08017764 	.word	0x08017764
 8011364:	20002a08 	.word	0x20002a08
 8011368:	08017410 	.word	0x08017410
 801136c:	080177d0 	.word	0x080177d0
 8011370:	080177e8 	.word	0x080177e8
 8011374:	20000225 	.word	0x20000225
 8011378:	08017640 	.word	0x08017640
 801137c:	08017654 	.word	0x08017654
 8011380:	080177bc 	.word	0x080177bc
 8011384:	0801767c 	.word	0x0801767c

08011388 <Hum_Sensor_Handler>:
  * @brief  Handles the humidity data getting/sending
  * @param  Instance the device instance
  * @retval None
  */
static void Hum_Sensor_Handler(uint32_t Instance)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b08a      	sub	sp, #40	@ 0x28
 801138c:	af02      	add	r7, sp, #8
 801138e:	6078      	str	r0, [r7, #4]
  float odr;
  float humidity;
  displayFloatToInt_t out_value;
  uint8_t whoami;

  snprintf(dataOut, MAX_BUF_SIZE, "\r\nEnvironmental sensor instance %d:", (int)Instance);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	4a43      	ldr	r2, [pc, #268]	@ (80114a0 <Hum_Sensor_Handler+0x118>)
 8011394:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011398:	4842      	ldr	r0, [pc, #264]	@ (80114a4 <Hum_Sensor_Handler+0x11c>)
 801139a:	f003 fea5 	bl	80150e8 <sniprintf>
  printf("%s", dataOut);
 801139e:	4941      	ldr	r1, [pc, #260]	@ (80114a4 <Hum_Sensor_Handler+0x11c>)
 80113a0:	4841      	ldr	r0, [pc, #260]	@ (80114a8 <Hum_Sensor_Handler+0x120>)
 80113a2:	f003 fe31 	bl	8015008 <iprintf>

  if (IKS4A1_ENV_SENSOR_GetValue(Instance, ENV_HUMIDITY, &humidity))
 80113a6:	f107 0318 	add.w	r3, r7, #24
 80113aa:	461a      	mov	r2, r3
 80113ac:	2104      	movs	r1, #4
 80113ae:	6878      	ldr	r0, [r7, #4]
 80113b0:	f7f9 fe08 	bl	800afc4 <IKS4A1_ENV_SENSOR_GetValue>
 80113b4:	4603      	mov	r3, r0
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d007      	beq.n	80113ca <Hum_Sensor_Handler+0x42>
  {
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: Error\r\n", (int)Instance);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	4a3b      	ldr	r2, [pc, #236]	@ (80114ac <Hum_Sensor_Handler+0x124>)
 80113be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80113c2:	4838      	ldr	r0, [pc, #224]	@ (80114a4 <Hum_Sensor_Handler+0x11c>)
 80113c4:	f003 fe90 	bl	80150e8 <sniprintf>
 80113c8:	e014      	b.n	80113f4 <Hum_Sensor_Handler+0x6c>
  }
  else
  {
    floatToInt(humidity, &out_value, 2);
 80113ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80113ce:	f107 030c 	add.w	r3, r7, #12
 80113d2:	2102      	movs	r1, #2
 80113d4:	4618      	mov	r0, r3
 80113d6:	eeb0 0a67 	vmov.f32	s0, s15
 80113da:	f7ff fbcd 	bl	8010b78 <floatToInt>
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	693a      	ldr	r2, [r7, #16]
             (int)out_value.out_dec);
 80113e2:	6979      	ldr	r1, [r7, #20]
    snprintf(dataOut, MAX_BUF_SIZE, "\r\nHum[%d]: %d.%02d %%\r\n", (int)Instance, (int)out_value.out_int,
 80113e4:	9101      	str	r1, [sp, #4]
 80113e6:	9200      	str	r2, [sp, #0]
 80113e8:	4a31      	ldr	r2, [pc, #196]	@ (80114b0 <Hum_Sensor_Handler+0x128>)
 80113ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80113ee:	482d      	ldr	r0, [pc, #180]	@ (80114a4 <Hum_Sensor_Handler+0x11c>)
 80113f0:	f003 fe7a 	bl	80150e8 <sniprintf>
  }

  printf("%s", dataOut);
 80113f4:	492b      	ldr	r1, [pc, #172]	@ (80114a4 <Hum_Sensor_Handler+0x11c>)
 80113f6:	482c      	ldr	r0, [pc, #176]	@ (80114a8 <Hum_Sensor_Handler+0x120>)
 80113f8:	f003 fe06 	bl	8015008 <iprintf>

  if (verbose == 1)
 80113fc:	4b2d      	ldr	r3, [pc, #180]	@ (80114b4 <Hum_Sensor_Handler+0x12c>)
 80113fe:	781b      	ldrb	r3, [r3, #0]
 8011400:	2b01      	cmp	r3, #1
 8011402:	d148      	bne.n	8011496 <Hum_Sensor_Handler+0x10e>
  {
    if (IKS4A1_ENV_SENSOR_ReadID(Instance, &whoami))
 8011404:	f107 030b 	add.w	r3, r7, #11
 8011408:	4619      	mov	r1, r3
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f7f9 fd6e 	bl	800aeec <IKS4A1_ENV_SENSOR_ReadID>
 8011410:	4603      	mov	r3, r0
 8011412:	2b00      	cmp	r3, #0
 8011414:	d007      	beq.n	8011426 <Hum_Sensor_Handler+0x9e>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: Error\r\n", (int)Instance);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	4a27      	ldr	r2, [pc, #156]	@ (80114b8 <Hum_Sensor_Handler+0x130>)
 801141a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801141e:	4821      	ldr	r0, [pc, #132]	@ (80114a4 <Hum_Sensor_Handler+0x11c>)
 8011420:	f003 fe62 	bl	80150e8 <sniprintf>
 8011424:	e008      	b.n	8011438 <Hum_Sensor_Handler+0xb0>
    }
    else
    {
      snprintf(dataOut, MAX_BUF_SIZE, "WHOAMI[%d]: 0x%x\r\n", (int)Instance, (int)whoami);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	7afa      	ldrb	r2, [r7, #11]
 801142a:	9200      	str	r2, [sp, #0]
 801142c:	4a23      	ldr	r2, [pc, #140]	@ (80114bc <Hum_Sensor_Handler+0x134>)
 801142e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011432:	481c      	ldr	r0, [pc, #112]	@ (80114a4 <Hum_Sensor_Handler+0x11c>)
 8011434:	f003 fe58 	bl	80150e8 <sniprintf>
    }

    printf("%s", dataOut);
 8011438:	491a      	ldr	r1, [pc, #104]	@ (80114a4 <Hum_Sensor_Handler+0x11c>)
 801143a:	481b      	ldr	r0, [pc, #108]	@ (80114a8 <Hum_Sensor_Handler+0x120>)
 801143c:	f003 fde4 	bl	8015008 <iprintf>

    if (IKS4A1_ENV_SENSOR_GetOutputDataRate(Instance, ENV_HUMIDITY, &odr))
 8011440:	f107 031c 	add.w	r3, r7, #28
 8011444:	461a      	mov	r2, r3
 8011446:	2104      	movs	r1, #4
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f7f9 fd79 	bl	800af40 <IKS4A1_ENV_SENSOR_GetOutputDataRate>
 801144e:	4603      	mov	r3, r0
 8011450:	2b00      	cmp	r3, #0
 8011452:	d007      	beq.n	8011464 <Hum_Sensor_Handler+0xdc>
    {
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: Error\r\n", (int)Instance);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	4a1a      	ldr	r2, [pc, #104]	@ (80114c0 <Hum_Sensor_Handler+0x138>)
 8011458:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801145c:	4811      	ldr	r0, [pc, #68]	@ (80114a4 <Hum_Sensor_Handler+0x11c>)
 801145e:	f003 fe43 	bl	80150e8 <sniprintf>
 8011462:	e014      	b.n	801148e <Hum_Sensor_Handler+0x106>
    }
    else
    {
      floatToInt(odr, &out_value, 3);
 8011464:	edd7 7a07 	vldr	s15, [r7, #28]
 8011468:	f107 030c 	add.w	r3, r7, #12
 801146c:	2103      	movs	r1, #3
 801146e:	4618      	mov	r0, r3
 8011470:	eeb0 0a67 	vmov.f32	s0, s15
 8011474:	f7ff fb80 	bl	8010b78 <floatToInt>
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	693a      	ldr	r2, [r7, #16]
               (int)out_value.out_dec);
 801147c:	6979      	ldr	r1, [r7, #20]
      snprintf(dataOut, MAX_BUF_SIZE, "ODR[%d]: %d.%03d Hz\r\n", (int)Instance, (int)out_value.out_int,
 801147e:	9101      	str	r1, [sp, #4]
 8011480:	9200      	str	r2, [sp, #0]
 8011482:	4a10      	ldr	r2, [pc, #64]	@ (80114c4 <Hum_Sensor_Handler+0x13c>)
 8011484:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8011488:	4806      	ldr	r0, [pc, #24]	@ (80114a4 <Hum_Sensor_Handler+0x11c>)
 801148a:	f003 fe2d 	bl	80150e8 <sniprintf>
    }

    printf("%s", dataOut);
 801148e:	4905      	ldr	r1, [pc, #20]	@ (80114a4 <Hum_Sensor_Handler+0x11c>)
 8011490:	4805      	ldr	r0, [pc, #20]	@ (80114a8 <Hum_Sensor_Handler+0x120>)
 8011492:	f003 fdb9 	bl	8015008 <iprintf>
  }
}
 8011496:	bf00      	nop
 8011498:	3720      	adds	r7, #32
 801149a:	46bd      	mov	sp, r7
 801149c:	bd80      	pop	{r7, pc}
 801149e:	bf00      	nop
 80114a0:	08017764 	.word	0x08017764
 80114a4:	20002a08 	.word	0x20002a08
 80114a8:	08017410 	.word	0x08017410
 80114ac:	08017804 	.word	0x08017804
 80114b0:	08017818 	.word	0x08017818
 80114b4:	20000225 	.word	0x20000225
 80114b8:	08017640 	.word	0x08017640
 80114bc:	08017654 	.word	0x08017654
 80114c0:	080177bc 	.word	0x080177bc
 80114c4:	0801767c 	.word	0x0801767c

080114c8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b084      	sub	sp, #16
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	4603      	mov	r3, r0
 80114d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80114d2:	79fb      	ldrb	r3, [r7, #7]
 80114d4:	4a08      	ldr	r2, [pc, #32]	@ (80114f8 <disk_status+0x30>)
 80114d6:	009b      	lsls	r3, r3, #2
 80114d8:	4413      	add	r3, r2
 80114da:	685b      	ldr	r3, [r3, #4]
 80114dc:	685b      	ldr	r3, [r3, #4]
 80114de:	79fa      	ldrb	r2, [r7, #7]
 80114e0:	4905      	ldr	r1, [pc, #20]	@ (80114f8 <disk_status+0x30>)
 80114e2:	440a      	add	r2, r1
 80114e4:	7a12      	ldrb	r2, [r2, #8]
 80114e6:	4610      	mov	r0, r2
 80114e8:	4798      	blx	r3
 80114ea:	4603      	mov	r3, r0
 80114ec:	73fb      	strb	r3, [r7, #15]
  return stat;
 80114ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80114f0:	4618      	mov	r0, r3
 80114f2:	3710      	adds	r7, #16
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}
 80114f8:	20002b34 	.word	0x20002b34

080114fc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b084      	sub	sp, #16
 8011500:	af00      	add	r7, sp, #0
 8011502:	4603      	mov	r3, r0
 8011504:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011506:	2300      	movs	r3, #0
 8011508:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801150a:	79fb      	ldrb	r3, [r7, #7]
 801150c:	4a0e      	ldr	r2, [pc, #56]	@ (8011548 <disk_initialize+0x4c>)
 801150e:	5cd3      	ldrb	r3, [r2, r3]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d114      	bne.n	801153e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011514:	79fb      	ldrb	r3, [r7, #7]
 8011516:	4a0c      	ldr	r2, [pc, #48]	@ (8011548 <disk_initialize+0x4c>)
 8011518:	009b      	lsls	r3, r3, #2
 801151a:	4413      	add	r3, r2
 801151c:	685b      	ldr	r3, [r3, #4]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	79fa      	ldrb	r2, [r7, #7]
 8011522:	4909      	ldr	r1, [pc, #36]	@ (8011548 <disk_initialize+0x4c>)
 8011524:	440a      	add	r2, r1
 8011526:	7a12      	ldrb	r2, [r2, #8]
 8011528:	4610      	mov	r0, r2
 801152a:	4798      	blx	r3
 801152c:	4603      	mov	r3, r0
 801152e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8011530:	7bfb      	ldrb	r3, [r7, #15]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d103      	bne.n	801153e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8011536:	79fb      	ldrb	r3, [r7, #7]
 8011538:	4a03      	ldr	r2, [pc, #12]	@ (8011548 <disk_initialize+0x4c>)
 801153a:	2101      	movs	r1, #1
 801153c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801153e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011540:	4618      	mov	r0, r3
 8011542:	3710      	adds	r7, #16
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}
 8011548:	20002b34 	.word	0x20002b34

0801154c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801154c:	b590      	push	{r4, r7, lr}
 801154e:	b087      	sub	sp, #28
 8011550:	af00      	add	r7, sp, #0
 8011552:	60b9      	str	r1, [r7, #8]
 8011554:	607a      	str	r2, [r7, #4]
 8011556:	603b      	str	r3, [r7, #0]
 8011558:	4603      	mov	r3, r0
 801155a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801155c:	7bfb      	ldrb	r3, [r7, #15]
 801155e:	4a0a      	ldr	r2, [pc, #40]	@ (8011588 <disk_read+0x3c>)
 8011560:	009b      	lsls	r3, r3, #2
 8011562:	4413      	add	r3, r2
 8011564:	685b      	ldr	r3, [r3, #4]
 8011566:	689c      	ldr	r4, [r3, #8]
 8011568:	7bfb      	ldrb	r3, [r7, #15]
 801156a:	4a07      	ldr	r2, [pc, #28]	@ (8011588 <disk_read+0x3c>)
 801156c:	4413      	add	r3, r2
 801156e:	7a18      	ldrb	r0, [r3, #8]
 8011570:	683b      	ldr	r3, [r7, #0]
 8011572:	687a      	ldr	r2, [r7, #4]
 8011574:	68b9      	ldr	r1, [r7, #8]
 8011576:	47a0      	blx	r4
 8011578:	4603      	mov	r3, r0
 801157a:	75fb      	strb	r3, [r7, #23]
  return res;
 801157c:	7dfb      	ldrb	r3, [r7, #23]
}
 801157e:	4618      	mov	r0, r3
 8011580:	371c      	adds	r7, #28
 8011582:	46bd      	mov	sp, r7
 8011584:	bd90      	pop	{r4, r7, pc}
 8011586:	bf00      	nop
 8011588:	20002b34 	.word	0x20002b34

0801158c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801158c:	b590      	push	{r4, r7, lr}
 801158e:	b087      	sub	sp, #28
 8011590:	af00      	add	r7, sp, #0
 8011592:	60b9      	str	r1, [r7, #8]
 8011594:	607a      	str	r2, [r7, #4]
 8011596:	603b      	str	r3, [r7, #0]
 8011598:	4603      	mov	r3, r0
 801159a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801159c:	7bfb      	ldrb	r3, [r7, #15]
 801159e:	4a0a      	ldr	r2, [pc, #40]	@ (80115c8 <disk_write+0x3c>)
 80115a0:	009b      	lsls	r3, r3, #2
 80115a2:	4413      	add	r3, r2
 80115a4:	685b      	ldr	r3, [r3, #4]
 80115a6:	68dc      	ldr	r4, [r3, #12]
 80115a8:	7bfb      	ldrb	r3, [r7, #15]
 80115aa:	4a07      	ldr	r2, [pc, #28]	@ (80115c8 <disk_write+0x3c>)
 80115ac:	4413      	add	r3, r2
 80115ae:	7a18      	ldrb	r0, [r3, #8]
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	687a      	ldr	r2, [r7, #4]
 80115b4:	68b9      	ldr	r1, [r7, #8]
 80115b6:	47a0      	blx	r4
 80115b8:	4603      	mov	r3, r0
 80115ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80115bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80115be:	4618      	mov	r0, r3
 80115c0:	371c      	adds	r7, #28
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd90      	pop	{r4, r7, pc}
 80115c6:	bf00      	nop
 80115c8:	20002b34 	.word	0x20002b34

080115cc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b084      	sub	sp, #16
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	4603      	mov	r3, r0
 80115d4:	603a      	str	r2, [r7, #0]
 80115d6:	71fb      	strb	r3, [r7, #7]
 80115d8:	460b      	mov	r3, r1
 80115da:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80115dc:	79fb      	ldrb	r3, [r7, #7]
 80115de:	4a09      	ldr	r2, [pc, #36]	@ (8011604 <disk_ioctl+0x38>)
 80115e0:	009b      	lsls	r3, r3, #2
 80115e2:	4413      	add	r3, r2
 80115e4:	685b      	ldr	r3, [r3, #4]
 80115e6:	691b      	ldr	r3, [r3, #16]
 80115e8:	79fa      	ldrb	r2, [r7, #7]
 80115ea:	4906      	ldr	r1, [pc, #24]	@ (8011604 <disk_ioctl+0x38>)
 80115ec:	440a      	add	r2, r1
 80115ee:	7a10      	ldrb	r0, [r2, #8]
 80115f0:	79b9      	ldrb	r1, [r7, #6]
 80115f2:	683a      	ldr	r2, [r7, #0]
 80115f4:	4798      	blx	r3
 80115f6:	4603      	mov	r3, r0
 80115f8:	73fb      	strb	r3, [r7, #15]
  return res;
 80115fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3710      	adds	r7, #16
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}
 8011604:	20002b34 	.word	0x20002b34

08011608 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011608:	b480      	push	{r7}
 801160a:	b085      	sub	sp, #20
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	3301      	adds	r3, #1
 8011614:	781b      	ldrb	r3, [r3, #0]
 8011616:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011618:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801161c:	021b      	lsls	r3, r3, #8
 801161e:	b21a      	sxth	r2, r3
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	781b      	ldrb	r3, [r3, #0]
 8011624:	b21b      	sxth	r3, r3
 8011626:	4313      	orrs	r3, r2
 8011628:	b21b      	sxth	r3, r3
 801162a:	81fb      	strh	r3, [r7, #14]
	return rv;
 801162c:	89fb      	ldrh	r3, [r7, #14]
}
 801162e:	4618      	mov	r0, r3
 8011630:	3714      	adds	r7, #20
 8011632:	46bd      	mov	sp, r7
 8011634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011638:	4770      	bx	lr

0801163a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801163a:	b480      	push	{r7}
 801163c:	b085      	sub	sp, #20
 801163e:	af00      	add	r7, sp, #0
 8011640:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	3303      	adds	r3, #3
 8011646:	781b      	ldrb	r3, [r3, #0]
 8011648:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	021b      	lsls	r3, r3, #8
 801164e:	687a      	ldr	r2, [r7, #4]
 8011650:	3202      	adds	r2, #2
 8011652:	7812      	ldrb	r2, [r2, #0]
 8011654:	4313      	orrs	r3, r2
 8011656:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	021b      	lsls	r3, r3, #8
 801165c:	687a      	ldr	r2, [r7, #4]
 801165e:	3201      	adds	r2, #1
 8011660:	7812      	ldrb	r2, [r2, #0]
 8011662:	4313      	orrs	r3, r2
 8011664:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	021b      	lsls	r3, r3, #8
 801166a:	687a      	ldr	r2, [r7, #4]
 801166c:	7812      	ldrb	r2, [r2, #0]
 801166e:	4313      	orrs	r3, r2
 8011670:	60fb      	str	r3, [r7, #12]
	return rv;
 8011672:	68fb      	ldr	r3, [r7, #12]
}
 8011674:	4618      	mov	r0, r3
 8011676:	3714      	adds	r7, #20
 8011678:	46bd      	mov	sp, r7
 801167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167e:	4770      	bx	lr

08011680 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011680:	b480      	push	{r7}
 8011682:	b083      	sub	sp, #12
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	460b      	mov	r3, r1
 801168a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	1c5a      	adds	r2, r3, #1
 8011690:	607a      	str	r2, [r7, #4]
 8011692:	887a      	ldrh	r2, [r7, #2]
 8011694:	b2d2      	uxtb	r2, r2
 8011696:	701a      	strb	r2, [r3, #0]
 8011698:	887b      	ldrh	r3, [r7, #2]
 801169a:	0a1b      	lsrs	r3, r3, #8
 801169c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	1c5a      	adds	r2, r3, #1
 80116a2:	607a      	str	r2, [r7, #4]
 80116a4:	887a      	ldrh	r2, [r7, #2]
 80116a6:	b2d2      	uxtb	r2, r2
 80116a8:	701a      	strb	r2, [r3, #0]
}
 80116aa:	bf00      	nop
 80116ac:	370c      	adds	r7, #12
 80116ae:	46bd      	mov	sp, r7
 80116b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b4:	4770      	bx	lr

080116b6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80116b6:	b480      	push	{r7}
 80116b8:	b083      	sub	sp, #12
 80116ba:	af00      	add	r7, sp, #0
 80116bc:	6078      	str	r0, [r7, #4]
 80116be:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	1c5a      	adds	r2, r3, #1
 80116c4:	607a      	str	r2, [r7, #4]
 80116c6:	683a      	ldr	r2, [r7, #0]
 80116c8:	b2d2      	uxtb	r2, r2
 80116ca:	701a      	strb	r2, [r3, #0]
 80116cc:	683b      	ldr	r3, [r7, #0]
 80116ce:	0a1b      	lsrs	r3, r3, #8
 80116d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	1c5a      	adds	r2, r3, #1
 80116d6:	607a      	str	r2, [r7, #4]
 80116d8:	683a      	ldr	r2, [r7, #0]
 80116da:	b2d2      	uxtb	r2, r2
 80116dc:	701a      	strb	r2, [r3, #0]
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	0a1b      	lsrs	r3, r3, #8
 80116e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	1c5a      	adds	r2, r3, #1
 80116e8:	607a      	str	r2, [r7, #4]
 80116ea:	683a      	ldr	r2, [r7, #0]
 80116ec:	b2d2      	uxtb	r2, r2
 80116ee:	701a      	strb	r2, [r3, #0]
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	0a1b      	lsrs	r3, r3, #8
 80116f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	1c5a      	adds	r2, r3, #1
 80116fa:	607a      	str	r2, [r7, #4]
 80116fc:	683a      	ldr	r2, [r7, #0]
 80116fe:	b2d2      	uxtb	r2, r2
 8011700:	701a      	strb	r2, [r3, #0]
}
 8011702:	bf00      	nop
 8011704:	370c      	adds	r7, #12
 8011706:	46bd      	mov	sp, r7
 8011708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170c:	4770      	bx	lr

0801170e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801170e:	b480      	push	{r7}
 8011710:	b087      	sub	sp, #28
 8011712:	af00      	add	r7, sp, #0
 8011714:	60f8      	str	r0, [r7, #12]
 8011716:	60b9      	str	r1, [r7, #8]
 8011718:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d00d      	beq.n	8011744 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011728:	693a      	ldr	r2, [r7, #16]
 801172a:	1c53      	adds	r3, r2, #1
 801172c:	613b      	str	r3, [r7, #16]
 801172e:	697b      	ldr	r3, [r7, #20]
 8011730:	1c59      	adds	r1, r3, #1
 8011732:	6179      	str	r1, [r7, #20]
 8011734:	7812      	ldrb	r2, [r2, #0]
 8011736:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	3b01      	subs	r3, #1
 801173c:	607b      	str	r3, [r7, #4]
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d1f1      	bne.n	8011728 <mem_cpy+0x1a>
	}
}
 8011744:	bf00      	nop
 8011746:	371c      	adds	r7, #28
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr

08011750 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011750:	b480      	push	{r7}
 8011752:	b087      	sub	sp, #28
 8011754:	af00      	add	r7, sp, #0
 8011756:	60f8      	str	r0, [r7, #12]
 8011758:	60b9      	str	r1, [r7, #8]
 801175a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	1c5a      	adds	r2, r3, #1
 8011764:	617a      	str	r2, [r7, #20]
 8011766:	68ba      	ldr	r2, [r7, #8]
 8011768:	b2d2      	uxtb	r2, r2
 801176a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	3b01      	subs	r3, #1
 8011770:	607b      	str	r3, [r7, #4]
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d1f3      	bne.n	8011760 <mem_set+0x10>
}
 8011778:	bf00      	nop
 801177a:	bf00      	nop
 801177c:	371c      	adds	r7, #28
 801177e:	46bd      	mov	sp, r7
 8011780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011784:	4770      	bx	lr

08011786 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011786:	b480      	push	{r7}
 8011788:	b089      	sub	sp, #36	@ 0x24
 801178a:	af00      	add	r7, sp, #0
 801178c:	60f8      	str	r0, [r7, #12]
 801178e:	60b9      	str	r1, [r7, #8]
 8011790:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	61fb      	str	r3, [r7, #28]
 8011796:	68bb      	ldr	r3, [r7, #8]
 8011798:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801179a:	2300      	movs	r3, #0
 801179c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801179e:	69fb      	ldr	r3, [r7, #28]
 80117a0:	1c5a      	adds	r2, r3, #1
 80117a2:	61fa      	str	r2, [r7, #28]
 80117a4:	781b      	ldrb	r3, [r3, #0]
 80117a6:	4619      	mov	r1, r3
 80117a8:	69bb      	ldr	r3, [r7, #24]
 80117aa:	1c5a      	adds	r2, r3, #1
 80117ac:	61ba      	str	r2, [r7, #24]
 80117ae:	781b      	ldrb	r3, [r3, #0]
 80117b0:	1acb      	subs	r3, r1, r3
 80117b2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	3b01      	subs	r3, #1
 80117b8:	607b      	str	r3, [r7, #4]
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d002      	beq.n	80117c6 <mem_cmp+0x40>
 80117c0:	697b      	ldr	r3, [r7, #20]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d0eb      	beq.n	801179e <mem_cmp+0x18>

	return r;
 80117c6:	697b      	ldr	r3, [r7, #20]
}
 80117c8:	4618      	mov	r0, r3
 80117ca:	3724      	adds	r7, #36	@ 0x24
 80117cc:	46bd      	mov	sp, r7
 80117ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d2:	4770      	bx	lr

080117d4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80117d4:	b480      	push	{r7}
 80117d6:	b083      	sub	sp, #12
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
 80117dc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80117de:	e002      	b.n	80117e6 <chk_chr+0x12>
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	3301      	adds	r3, #1
 80117e4:	607b      	str	r3, [r7, #4]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d005      	beq.n	80117fa <chk_chr+0x26>
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	781b      	ldrb	r3, [r3, #0]
 80117f2:	461a      	mov	r2, r3
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	4293      	cmp	r3, r2
 80117f8:	d1f2      	bne.n	80117e0 <chk_chr+0xc>
	return *str;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	781b      	ldrb	r3, [r3, #0]
}
 80117fe:	4618      	mov	r0, r3
 8011800:	370c      	adds	r7, #12
 8011802:	46bd      	mov	sp, r7
 8011804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011808:	4770      	bx	lr
	...

0801180c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801180c:	b480      	push	{r7}
 801180e:	b085      	sub	sp, #20
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011816:	2300      	movs	r3, #0
 8011818:	60bb      	str	r3, [r7, #8]
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	60fb      	str	r3, [r7, #12]
 801181e:	e029      	b.n	8011874 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011820:	4a27      	ldr	r2, [pc, #156]	@ (80118c0 <chk_lock+0xb4>)
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	011b      	lsls	r3, r3, #4
 8011826:	4413      	add	r3, r2
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d01d      	beq.n	801186a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801182e:	4a24      	ldr	r2, [pc, #144]	@ (80118c0 <chk_lock+0xb4>)
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	011b      	lsls	r3, r3, #4
 8011834:	4413      	add	r3, r2
 8011836:	681a      	ldr	r2, [r3, #0]
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	429a      	cmp	r2, r3
 801183e:	d116      	bne.n	801186e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011840:	4a1f      	ldr	r2, [pc, #124]	@ (80118c0 <chk_lock+0xb4>)
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	011b      	lsls	r3, r3, #4
 8011846:	4413      	add	r3, r2
 8011848:	3304      	adds	r3, #4
 801184a:	681a      	ldr	r2, [r3, #0]
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011850:	429a      	cmp	r2, r3
 8011852:	d10c      	bne.n	801186e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011854:	4a1a      	ldr	r2, [pc, #104]	@ (80118c0 <chk_lock+0xb4>)
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	011b      	lsls	r3, r3, #4
 801185a:	4413      	add	r3, r2
 801185c:	3308      	adds	r3, #8
 801185e:	681a      	ldr	r2, [r3, #0]
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011864:	429a      	cmp	r2, r3
 8011866:	d102      	bne.n	801186e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011868:	e007      	b.n	801187a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801186a:	2301      	movs	r3, #1
 801186c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	3301      	adds	r3, #1
 8011872:	60fb      	str	r3, [r7, #12]
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	2b01      	cmp	r3, #1
 8011878:	d9d2      	bls.n	8011820 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2b02      	cmp	r3, #2
 801187e:	d109      	bne.n	8011894 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d102      	bne.n	801188c <chk_lock+0x80>
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	2b02      	cmp	r3, #2
 801188a:	d101      	bne.n	8011890 <chk_lock+0x84>
 801188c:	2300      	movs	r3, #0
 801188e:	e010      	b.n	80118b2 <chk_lock+0xa6>
 8011890:	2312      	movs	r3, #18
 8011892:	e00e      	b.n	80118b2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d108      	bne.n	80118ac <chk_lock+0xa0>
 801189a:	4a09      	ldr	r2, [pc, #36]	@ (80118c0 <chk_lock+0xb4>)
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	011b      	lsls	r3, r3, #4
 80118a0:	4413      	add	r3, r2
 80118a2:	330c      	adds	r3, #12
 80118a4:	881b      	ldrh	r3, [r3, #0]
 80118a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80118aa:	d101      	bne.n	80118b0 <chk_lock+0xa4>
 80118ac:	2310      	movs	r3, #16
 80118ae:	e000      	b.n	80118b2 <chk_lock+0xa6>
 80118b0:	2300      	movs	r3, #0
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	3714      	adds	r7, #20
 80118b6:	46bd      	mov	sp, r7
 80118b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118bc:	4770      	bx	lr
 80118be:	bf00      	nop
 80118c0:	20002b14 	.word	0x20002b14

080118c4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80118c4:	b480      	push	{r7}
 80118c6:	b083      	sub	sp, #12
 80118c8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80118ca:	2300      	movs	r3, #0
 80118cc:	607b      	str	r3, [r7, #4]
 80118ce:	e002      	b.n	80118d6 <enq_lock+0x12>
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	3301      	adds	r3, #1
 80118d4:	607b      	str	r3, [r7, #4]
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2b01      	cmp	r3, #1
 80118da:	d806      	bhi.n	80118ea <enq_lock+0x26>
 80118dc:	4a09      	ldr	r2, [pc, #36]	@ (8011904 <enq_lock+0x40>)
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	011b      	lsls	r3, r3, #4
 80118e2:	4413      	add	r3, r2
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d1f2      	bne.n	80118d0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2b02      	cmp	r3, #2
 80118ee:	bf14      	ite	ne
 80118f0:	2301      	movne	r3, #1
 80118f2:	2300      	moveq	r3, #0
 80118f4:	b2db      	uxtb	r3, r3
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	370c      	adds	r7, #12
 80118fa:	46bd      	mov	sp, r7
 80118fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011900:	4770      	bx	lr
 8011902:	bf00      	nop
 8011904:	20002b14 	.word	0x20002b14

08011908 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011908:	b480      	push	{r7}
 801190a:	b085      	sub	sp, #20
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011912:	2300      	movs	r3, #0
 8011914:	60fb      	str	r3, [r7, #12]
 8011916:	e01f      	b.n	8011958 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011918:	4a41      	ldr	r2, [pc, #260]	@ (8011a20 <inc_lock+0x118>)
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	011b      	lsls	r3, r3, #4
 801191e:	4413      	add	r3, r2
 8011920:	681a      	ldr	r2, [r3, #0]
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	429a      	cmp	r2, r3
 8011928:	d113      	bne.n	8011952 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801192a:	4a3d      	ldr	r2, [pc, #244]	@ (8011a20 <inc_lock+0x118>)
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	011b      	lsls	r3, r3, #4
 8011930:	4413      	add	r3, r2
 8011932:	3304      	adds	r3, #4
 8011934:	681a      	ldr	r2, [r3, #0]
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801193a:	429a      	cmp	r2, r3
 801193c:	d109      	bne.n	8011952 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801193e:	4a38      	ldr	r2, [pc, #224]	@ (8011a20 <inc_lock+0x118>)
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	011b      	lsls	r3, r3, #4
 8011944:	4413      	add	r3, r2
 8011946:	3308      	adds	r3, #8
 8011948:	681a      	ldr	r2, [r3, #0]
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801194e:	429a      	cmp	r2, r3
 8011950:	d006      	beq.n	8011960 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	3301      	adds	r3, #1
 8011956:	60fb      	str	r3, [r7, #12]
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	2b01      	cmp	r3, #1
 801195c:	d9dc      	bls.n	8011918 <inc_lock+0x10>
 801195e:	e000      	b.n	8011962 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011960:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	2b02      	cmp	r3, #2
 8011966:	d132      	bne.n	80119ce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011968:	2300      	movs	r3, #0
 801196a:	60fb      	str	r3, [r7, #12]
 801196c:	e002      	b.n	8011974 <inc_lock+0x6c>
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	3301      	adds	r3, #1
 8011972:	60fb      	str	r3, [r7, #12]
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	2b01      	cmp	r3, #1
 8011978:	d806      	bhi.n	8011988 <inc_lock+0x80>
 801197a:	4a29      	ldr	r2, [pc, #164]	@ (8011a20 <inc_lock+0x118>)
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	011b      	lsls	r3, r3, #4
 8011980:	4413      	add	r3, r2
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d1f2      	bne.n	801196e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	2b02      	cmp	r3, #2
 801198c:	d101      	bne.n	8011992 <inc_lock+0x8a>
 801198e:	2300      	movs	r3, #0
 8011990:	e040      	b.n	8011a14 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681a      	ldr	r2, [r3, #0]
 8011996:	4922      	ldr	r1, [pc, #136]	@ (8011a20 <inc_lock+0x118>)
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	011b      	lsls	r3, r3, #4
 801199c:	440b      	add	r3, r1
 801199e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	689a      	ldr	r2, [r3, #8]
 80119a4:	491e      	ldr	r1, [pc, #120]	@ (8011a20 <inc_lock+0x118>)
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	011b      	lsls	r3, r3, #4
 80119aa:	440b      	add	r3, r1
 80119ac:	3304      	adds	r3, #4
 80119ae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	695a      	ldr	r2, [r3, #20]
 80119b4:	491a      	ldr	r1, [pc, #104]	@ (8011a20 <inc_lock+0x118>)
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	011b      	lsls	r3, r3, #4
 80119ba:	440b      	add	r3, r1
 80119bc:	3308      	adds	r3, #8
 80119be:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80119c0:	4a17      	ldr	r2, [pc, #92]	@ (8011a20 <inc_lock+0x118>)
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	011b      	lsls	r3, r3, #4
 80119c6:	4413      	add	r3, r2
 80119c8:	330c      	adds	r3, #12
 80119ca:	2200      	movs	r2, #0
 80119cc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d009      	beq.n	80119e8 <inc_lock+0xe0>
 80119d4:	4a12      	ldr	r2, [pc, #72]	@ (8011a20 <inc_lock+0x118>)
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	011b      	lsls	r3, r3, #4
 80119da:	4413      	add	r3, r2
 80119dc:	330c      	adds	r3, #12
 80119de:	881b      	ldrh	r3, [r3, #0]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d001      	beq.n	80119e8 <inc_lock+0xe0>
 80119e4:	2300      	movs	r3, #0
 80119e6:	e015      	b.n	8011a14 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80119e8:	683b      	ldr	r3, [r7, #0]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d108      	bne.n	8011a00 <inc_lock+0xf8>
 80119ee:	4a0c      	ldr	r2, [pc, #48]	@ (8011a20 <inc_lock+0x118>)
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	011b      	lsls	r3, r3, #4
 80119f4:	4413      	add	r3, r2
 80119f6:	330c      	adds	r3, #12
 80119f8:	881b      	ldrh	r3, [r3, #0]
 80119fa:	3301      	adds	r3, #1
 80119fc:	b29a      	uxth	r2, r3
 80119fe:	e001      	b.n	8011a04 <inc_lock+0xfc>
 8011a00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011a04:	4906      	ldr	r1, [pc, #24]	@ (8011a20 <inc_lock+0x118>)
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	011b      	lsls	r3, r3, #4
 8011a0a:	440b      	add	r3, r1
 8011a0c:	330c      	adds	r3, #12
 8011a0e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	3301      	adds	r3, #1
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3714      	adds	r7, #20
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr
 8011a20:	20002b14 	.word	0x20002b14

08011a24 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011a24:	b480      	push	{r7}
 8011a26:	b085      	sub	sp, #20
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	3b01      	subs	r3, #1
 8011a30:	607b      	str	r3, [r7, #4]
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2b01      	cmp	r3, #1
 8011a36:	d825      	bhi.n	8011a84 <dec_lock+0x60>
		n = Files[i].ctr;
 8011a38:	4a17      	ldr	r2, [pc, #92]	@ (8011a98 <dec_lock+0x74>)
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	011b      	lsls	r3, r3, #4
 8011a3e:	4413      	add	r3, r2
 8011a40:	330c      	adds	r3, #12
 8011a42:	881b      	ldrh	r3, [r3, #0]
 8011a44:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011a46:	89fb      	ldrh	r3, [r7, #14]
 8011a48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011a4c:	d101      	bne.n	8011a52 <dec_lock+0x2e>
 8011a4e:	2300      	movs	r3, #0
 8011a50:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011a52:	89fb      	ldrh	r3, [r7, #14]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d002      	beq.n	8011a5e <dec_lock+0x3a>
 8011a58:	89fb      	ldrh	r3, [r7, #14]
 8011a5a:	3b01      	subs	r3, #1
 8011a5c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8011a98 <dec_lock+0x74>)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	011b      	lsls	r3, r3, #4
 8011a64:	4413      	add	r3, r2
 8011a66:	330c      	adds	r3, #12
 8011a68:	89fa      	ldrh	r2, [r7, #14]
 8011a6a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011a6c:	89fb      	ldrh	r3, [r7, #14]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d105      	bne.n	8011a7e <dec_lock+0x5a>
 8011a72:	4a09      	ldr	r2, [pc, #36]	@ (8011a98 <dec_lock+0x74>)
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	011b      	lsls	r3, r3, #4
 8011a78:	4413      	add	r3, r2
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	737b      	strb	r3, [r7, #13]
 8011a82:	e001      	b.n	8011a88 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011a84:	2302      	movs	r3, #2
 8011a86:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011a88:	7b7b      	ldrb	r3, [r7, #13]
}
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	3714      	adds	r7, #20
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a94:	4770      	bx	lr
 8011a96:	bf00      	nop
 8011a98:	20002b14 	.word	0x20002b14

08011a9c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011a9c:	b480      	push	{r7}
 8011a9e:	b085      	sub	sp, #20
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	60fb      	str	r3, [r7, #12]
 8011aa8:	e010      	b.n	8011acc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011aaa:	4a0d      	ldr	r2, [pc, #52]	@ (8011ae0 <clear_lock+0x44>)
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	011b      	lsls	r3, r3, #4
 8011ab0:	4413      	add	r3, r2
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	687a      	ldr	r2, [r7, #4]
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d105      	bne.n	8011ac6 <clear_lock+0x2a>
 8011aba:	4a09      	ldr	r2, [pc, #36]	@ (8011ae0 <clear_lock+0x44>)
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	011b      	lsls	r3, r3, #4
 8011ac0:	4413      	add	r3, r2
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	3301      	adds	r3, #1
 8011aca:	60fb      	str	r3, [r7, #12]
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	2b01      	cmp	r3, #1
 8011ad0:	d9eb      	bls.n	8011aaa <clear_lock+0xe>
	}
}
 8011ad2:	bf00      	nop
 8011ad4:	bf00      	nop
 8011ad6:	3714      	adds	r7, #20
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ade:	4770      	bx	lr
 8011ae0:	20002b14 	.word	0x20002b14

08011ae4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b086      	sub	sp, #24
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011aec:	2300      	movs	r3, #0
 8011aee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	78db      	ldrb	r3, [r3, #3]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d034      	beq.n	8011b62 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011afc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	7858      	ldrb	r0, [r3, #1]
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8011b08:	2301      	movs	r3, #1
 8011b0a:	697a      	ldr	r2, [r7, #20]
 8011b0c:	f7ff fd3e 	bl	801158c <disk_write>
 8011b10:	4603      	mov	r3, r0
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d002      	beq.n	8011b1c <sync_window+0x38>
			res = FR_DISK_ERR;
 8011b16:	2301      	movs	r3, #1
 8011b18:	73fb      	strb	r3, [r7, #15]
 8011b1a:	e022      	b.n	8011b62 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b26:	697a      	ldr	r2, [r7, #20]
 8011b28:	1ad2      	subs	r2, r2, r3
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	69db      	ldr	r3, [r3, #28]
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d217      	bcs.n	8011b62 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	789b      	ldrb	r3, [r3, #2]
 8011b36:	613b      	str	r3, [r7, #16]
 8011b38:	e010      	b.n	8011b5c <sync_window+0x78>
					wsect += fs->fsize;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	69db      	ldr	r3, [r3, #28]
 8011b3e:	697a      	ldr	r2, [r7, #20]
 8011b40:	4413      	add	r3, r2
 8011b42:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	7858      	ldrb	r0, [r3, #1]
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8011b4e:	2301      	movs	r3, #1
 8011b50:	697a      	ldr	r2, [r7, #20]
 8011b52:	f7ff fd1b 	bl	801158c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011b56:	693b      	ldr	r3, [r7, #16]
 8011b58:	3b01      	subs	r3, #1
 8011b5a:	613b      	str	r3, [r7, #16]
 8011b5c:	693b      	ldr	r3, [r7, #16]
 8011b5e:	2b01      	cmp	r3, #1
 8011b60:	d8eb      	bhi.n	8011b3a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	3718      	adds	r7, #24
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b084      	sub	sp, #16
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
 8011b74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011b76:	2300      	movs	r3, #0
 8011b78:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b7e:	683a      	ldr	r2, [r7, #0]
 8011b80:	429a      	cmp	r2, r3
 8011b82:	d01b      	beq.n	8011bbc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011b84:	6878      	ldr	r0, [r7, #4]
 8011b86:	f7ff ffad 	bl	8011ae4 <sync_window>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011b8e:	7bfb      	ldrb	r3, [r7, #15]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d113      	bne.n	8011bbc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	7858      	ldrb	r0, [r3, #1]
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	683a      	ldr	r2, [r7, #0]
 8011ba2:	f7ff fcd3 	bl	801154c <disk_read>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d004      	beq.n	8011bb6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011bac:	f04f 33ff 	mov.w	r3, #4294967295
 8011bb0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011bb2:	2301      	movs	r3, #1
 8011bb4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	683a      	ldr	r2, [r7, #0]
 8011bba:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8011bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3710      	adds	r7, #16
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}
	...

08011bc8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b084      	sub	sp, #16
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011bd0:	6878      	ldr	r0, [r7, #4]
 8011bd2:	f7ff ff87 	bl	8011ae4 <sync_window>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011bda:	7bfb      	ldrb	r3, [r7, #15]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d158      	bne.n	8011c92 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	781b      	ldrb	r3, [r3, #0]
 8011be4:	2b03      	cmp	r3, #3
 8011be6:	d148      	bne.n	8011c7a <sync_fs+0xb2>
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	791b      	ldrb	r3, [r3, #4]
 8011bec:	2b01      	cmp	r3, #1
 8011bee:	d144      	bne.n	8011c7a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	3334      	adds	r3, #52	@ 0x34
 8011bf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011bf8:	2100      	movs	r1, #0
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f7ff fda8 	bl	8011750 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	3334      	adds	r3, #52	@ 0x34
 8011c04:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011c08:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f7ff fd37 	bl	8011680 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	3334      	adds	r3, #52	@ 0x34
 8011c16:	4921      	ldr	r1, [pc, #132]	@ (8011c9c <sync_fs+0xd4>)
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7ff fd4c 	bl	80116b6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	3334      	adds	r3, #52	@ 0x34
 8011c22:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011c26:	491e      	ldr	r1, [pc, #120]	@ (8011ca0 <sync_fs+0xd8>)
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f7ff fd44 	bl	80116b6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	3334      	adds	r3, #52	@ 0x34
 8011c32:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	695b      	ldr	r3, [r3, #20]
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	4610      	mov	r0, r2
 8011c3e:	f7ff fd3a 	bl	80116b6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	3334      	adds	r3, #52	@ 0x34
 8011c46:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	691b      	ldr	r3, [r3, #16]
 8011c4e:	4619      	mov	r1, r3
 8011c50:	4610      	mov	r0, r2
 8011c52:	f7ff fd30 	bl	80116b6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6a1b      	ldr	r3, [r3, #32]
 8011c5a:	1c5a      	adds	r2, r3, #1
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	7858      	ldrb	r0, [r3, #1]
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011c6e:	2301      	movs	r3, #1
 8011c70:	f7ff fc8c 	bl	801158c <disk_write>
			fs->fsi_flag = 0;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2200      	movs	r2, #0
 8011c78:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	785b      	ldrb	r3, [r3, #1]
 8011c7e:	2200      	movs	r2, #0
 8011c80:	2100      	movs	r1, #0
 8011c82:	4618      	mov	r0, r3
 8011c84:	f7ff fca2 	bl	80115cc <disk_ioctl>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d001      	beq.n	8011c92 <sync_fs+0xca>
 8011c8e:	2301      	movs	r3, #1
 8011c90:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	3710      	adds	r7, #16
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}
 8011c9c:	41615252 	.word	0x41615252
 8011ca0:	61417272 	.word	0x61417272

08011ca4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011ca4:	b480      	push	{r7}
 8011ca6:	b083      	sub	sp, #12
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
 8011cac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	3b02      	subs	r3, #2
 8011cb2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	699b      	ldr	r3, [r3, #24]
 8011cb8:	3b02      	subs	r3, #2
 8011cba:	683a      	ldr	r2, [r7, #0]
 8011cbc:	429a      	cmp	r2, r3
 8011cbe:	d301      	bcc.n	8011cc4 <clust2sect+0x20>
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	e008      	b.n	8011cd6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	895b      	ldrh	r3, [r3, #10]
 8011cc8:	461a      	mov	r2, r3
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	fb03 f202 	mul.w	r2, r3, r2
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cd4:	4413      	add	r3, r2
}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	370c      	adds	r7, #12
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce0:	4770      	bx	lr

08011ce2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011ce2:	b580      	push	{r7, lr}
 8011ce4:	b086      	sub	sp, #24
 8011ce6:	af00      	add	r7, sp, #0
 8011ce8:	6078      	str	r0, [r7, #4]
 8011cea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	2b01      	cmp	r3, #1
 8011cf6:	d904      	bls.n	8011d02 <get_fat+0x20>
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	699b      	ldr	r3, [r3, #24]
 8011cfc:	683a      	ldr	r2, [r7, #0]
 8011cfe:	429a      	cmp	r2, r3
 8011d00:	d302      	bcc.n	8011d08 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011d02:	2301      	movs	r3, #1
 8011d04:	617b      	str	r3, [r7, #20]
 8011d06:	e08e      	b.n	8011e26 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011d08:	f04f 33ff 	mov.w	r3, #4294967295
 8011d0c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	781b      	ldrb	r3, [r3, #0]
 8011d12:	2b03      	cmp	r3, #3
 8011d14:	d061      	beq.n	8011dda <get_fat+0xf8>
 8011d16:	2b03      	cmp	r3, #3
 8011d18:	dc7b      	bgt.n	8011e12 <get_fat+0x130>
 8011d1a:	2b01      	cmp	r3, #1
 8011d1c:	d002      	beq.n	8011d24 <get_fat+0x42>
 8011d1e:	2b02      	cmp	r3, #2
 8011d20:	d041      	beq.n	8011da6 <get_fat+0xc4>
 8011d22:	e076      	b.n	8011e12 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	60fb      	str	r3, [r7, #12]
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	085b      	lsrs	r3, r3, #1
 8011d2c:	68fa      	ldr	r2, [r7, #12]
 8011d2e:	4413      	add	r3, r2
 8011d30:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d32:	693b      	ldr	r3, [r7, #16]
 8011d34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	0a5b      	lsrs	r3, r3, #9
 8011d3a:	4413      	add	r3, r2
 8011d3c:	4619      	mov	r1, r3
 8011d3e:	6938      	ldr	r0, [r7, #16]
 8011d40:	f7ff ff14 	bl	8011b6c <move_window>
 8011d44:	4603      	mov	r3, r0
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d166      	bne.n	8011e18 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	1c5a      	adds	r2, r3, #1
 8011d4e:	60fa      	str	r2, [r7, #12]
 8011d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011d54:	693a      	ldr	r2, [r7, #16]
 8011d56:	4413      	add	r3, r2
 8011d58:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011d5c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d5e:	693b      	ldr	r3, [r7, #16]
 8011d60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	0a5b      	lsrs	r3, r3, #9
 8011d66:	4413      	add	r3, r2
 8011d68:	4619      	mov	r1, r3
 8011d6a:	6938      	ldr	r0, [r7, #16]
 8011d6c:	f7ff fefe 	bl	8011b6c <move_window>
 8011d70:	4603      	mov	r3, r0
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d152      	bne.n	8011e1c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011d7c:	693a      	ldr	r2, [r7, #16]
 8011d7e:	4413      	add	r3, r2
 8011d80:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011d84:	021b      	lsls	r3, r3, #8
 8011d86:	68ba      	ldr	r2, [r7, #8]
 8011d88:	4313      	orrs	r3, r2
 8011d8a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	f003 0301 	and.w	r3, r3, #1
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d002      	beq.n	8011d9c <get_fat+0xba>
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	091b      	lsrs	r3, r3, #4
 8011d9a:	e002      	b.n	8011da2 <get_fat+0xc0>
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011da2:	617b      	str	r3, [r7, #20]
			break;
 8011da4:	e03f      	b.n	8011e26 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011da6:	693b      	ldr	r3, [r7, #16]
 8011da8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	0a1b      	lsrs	r3, r3, #8
 8011dae:	4413      	add	r3, r2
 8011db0:	4619      	mov	r1, r3
 8011db2:	6938      	ldr	r0, [r7, #16]
 8011db4:	f7ff feda 	bl	8011b6c <move_window>
 8011db8:	4603      	mov	r3, r0
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d130      	bne.n	8011e20 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011dbe:	693b      	ldr	r3, [r7, #16]
 8011dc0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	005b      	lsls	r3, r3, #1
 8011dc8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011dcc:	4413      	add	r3, r2
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7ff fc1a 	bl	8011608 <ld_word>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	617b      	str	r3, [r7, #20]
			break;
 8011dd8:	e025      	b.n	8011e26 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	09db      	lsrs	r3, r3, #7
 8011de2:	4413      	add	r3, r2
 8011de4:	4619      	mov	r1, r3
 8011de6:	6938      	ldr	r0, [r7, #16]
 8011de8:	f7ff fec0 	bl	8011b6c <move_window>
 8011dec:	4603      	mov	r3, r0
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d118      	bne.n	8011e24 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011df2:	693b      	ldr	r3, [r7, #16]
 8011df4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	009b      	lsls	r3, r3, #2
 8011dfc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011e00:	4413      	add	r3, r2
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7ff fc19 	bl	801163a <ld_dword>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011e0e:	617b      	str	r3, [r7, #20]
			break;
 8011e10:	e009      	b.n	8011e26 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011e12:	2301      	movs	r3, #1
 8011e14:	617b      	str	r3, [r7, #20]
 8011e16:	e006      	b.n	8011e26 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e18:	bf00      	nop
 8011e1a:	e004      	b.n	8011e26 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e1c:	bf00      	nop
 8011e1e:	e002      	b.n	8011e26 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011e20:	bf00      	nop
 8011e22:	e000      	b.n	8011e26 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011e24:	bf00      	nop
		}
	}

	return val;
 8011e26:	697b      	ldr	r3, [r7, #20]
}
 8011e28:	4618      	mov	r0, r3
 8011e2a:	3718      	adds	r7, #24
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}

08011e30 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011e30:	b590      	push	{r4, r7, lr}
 8011e32:	b089      	sub	sp, #36	@ 0x24
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	60f8      	str	r0, [r7, #12]
 8011e38:	60b9      	str	r1, [r7, #8]
 8011e3a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011e3c:	2302      	movs	r3, #2
 8011e3e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011e40:	68bb      	ldr	r3, [r7, #8]
 8011e42:	2b01      	cmp	r3, #1
 8011e44:	f240 80d9 	bls.w	8011ffa <put_fat+0x1ca>
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	699b      	ldr	r3, [r3, #24]
 8011e4c:	68ba      	ldr	r2, [r7, #8]
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	f080 80d3 	bcs.w	8011ffa <put_fat+0x1ca>
		switch (fs->fs_type) {
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	781b      	ldrb	r3, [r3, #0]
 8011e58:	2b03      	cmp	r3, #3
 8011e5a:	f000 8096 	beq.w	8011f8a <put_fat+0x15a>
 8011e5e:	2b03      	cmp	r3, #3
 8011e60:	f300 80cb 	bgt.w	8011ffa <put_fat+0x1ca>
 8011e64:	2b01      	cmp	r3, #1
 8011e66:	d002      	beq.n	8011e6e <put_fat+0x3e>
 8011e68:	2b02      	cmp	r3, #2
 8011e6a:	d06e      	beq.n	8011f4a <put_fat+0x11a>
 8011e6c:	e0c5      	b.n	8011ffa <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	61bb      	str	r3, [r7, #24]
 8011e72:	69bb      	ldr	r3, [r7, #24]
 8011e74:	085b      	lsrs	r3, r3, #1
 8011e76:	69ba      	ldr	r2, [r7, #24]
 8011e78:	4413      	add	r3, r2
 8011e7a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011e80:	69bb      	ldr	r3, [r7, #24]
 8011e82:	0a5b      	lsrs	r3, r3, #9
 8011e84:	4413      	add	r3, r2
 8011e86:	4619      	mov	r1, r3
 8011e88:	68f8      	ldr	r0, [r7, #12]
 8011e8a:	f7ff fe6f 	bl	8011b6c <move_window>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011e92:	7ffb      	ldrb	r3, [r7, #31]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	f040 80a9 	bne.w	8011fec <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011ea0:	69bb      	ldr	r3, [r7, #24]
 8011ea2:	1c59      	adds	r1, r3, #1
 8011ea4:	61b9      	str	r1, [r7, #24]
 8011ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011eaa:	4413      	add	r3, r2
 8011eac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	f003 0301 	and.w	r3, r3, #1
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d00d      	beq.n	8011ed4 <put_fat+0xa4>
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	781b      	ldrb	r3, [r3, #0]
 8011ebc:	b25b      	sxtb	r3, r3
 8011ebe:	f003 030f 	and.w	r3, r3, #15
 8011ec2:	b25a      	sxtb	r2, r3
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	b25b      	sxtb	r3, r3
 8011ec8:	011b      	lsls	r3, r3, #4
 8011eca:	b25b      	sxtb	r3, r3
 8011ecc:	4313      	orrs	r3, r2
 8011ece:	b25b      	sxtb	r3, r3
 8011ed0:	b2db      	uxtb	r3, r3
 8011ed2:	e001      	b.n	8011ed8 <put_fat+0xa8>
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	b2db      	uxtb	r3, r3
 8011ed8:	697a      	ldr	r2, [r7, #20]
 8011eda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	2201      	movs	r2, #1
 8011ee0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ee6:	69bb      	ldr	r3, [r7, #24]
 8011ee8:	0a5b      	lsrs	r3, r3, #9
 8011eea:	4413      	add	r3, r2
 8011eec:	4619      	mov	r1, r3
 8011eee:	68f8      	ldr	r0, [r7, #12]
 8011ef0:	f7ff fe3c 	bl	8011b6c <move_window>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011ef8:	7ffb      	ldrb	r3, [r7, #31]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d178      	bne.n	8011ff0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011f04:	69bb      	ldr	r3, [r7, #24]
 8011f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f0a:	4413      	add	r3, r2
 8011f0c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	f003 0301 	and.w	r3, r3, #1
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d003      	beq.n	8011f20 <put_fat+0xf0>
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	091b      	lsrs	r3, r3, #4
 8011f1c:	b2db      	uxtb	r3, r3
 8011f1e:	e00e      	b.n	8011f3e <put_fat+0x10e>
 8011f20:	697b      	ldr	r3, [r7, #20]
 8011f22:	781b      	ldrb	r3, [r3, #0]
 8011f24:	b25b      	sxtb	r3, r3
 8011f26:	f023 030f 	bic.w	r3, r3, #15
 8011f2a:	b25a      	sxtb	r2, r3
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	0a1b      	lsrs	r3, r3, #8
 8011f30:	b25b      	sxtb	r3, r3
 8011f32:	f003 030f 	and.w	r3, r3, #15
 8011f36:	b25b      	sxtb	r3, r3
 8011f38:	4313      	orrs	r3, r2
 8011f3a:	b25b      	sxtb	r3, r3
 8011f3c:	b2db      	uxtb	r3, r3
 8011f3e:	697a      	ldr	r2, [r7, #20]
 8011f40:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	2201      	movs	r2, #1
 8011f46:	70da      	strb	r2, [r3, #3]
			break;
 8011f48:	e057      	b.n	8011ffa <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	0a1b      	lsrs	r3, r3, #8
 8011f52:	4413      	add	r3, r2
 8011f54:	4619      	mov	r1, r3
 8011f56:	68f8      	ldr	r0, [r7, #12]
 8011f58:	f7ff fe08 	bl	8011b6c <move_window>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f60:	7ffb      	ldrb	r3, [r7, #31]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d146      	bne.n	8011ff4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011f6c:	68bb      	ldr	r3, [r7, #8]
 8011f6e:	005b      	lsls	r3, r3, #1
 8011f70:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011f74:	4413      	add	r3, r2
 8011f76:	687a      	ldr	r2, [r7, #4]
 8011f78:	b292      	uxth	r2, r2
 8011f7a:	4611      	mov	r1, r2
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f7ff fb7f 	bl	8011680 <st_word>
			fs->wflag = 1;
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	2201      	movs	r2, #1
 8011f86:	70da      	strb	r2, [r3, #3]
			break;
 8011f88:	e037      	b.n	8011ffa <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011f8e:	68bb      	ldr	r3, [r7, #8]
 8011f90:	09db      	lsrs	r3, r3, #7
 8011f92:	4413      	add	r3, r2
 8011f94:	4619      	mov	r1, r3
 8011f96:	68f8      	ldr	r0, [r7, #12]
 8011f98:	f7ff fde8 	bl	8011b6c <move_window>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011fa0:	7ffb      	ldrb	r3, [r7, #31]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d128      	bne.n	8011ff8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011fb2:	68bb      	ldr	r3, [r7, #8]
 8011fb4:	009b      	lsls	r3, r3, #2
 8011fb6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011fba:	4413      	add	r3, r2
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f7ff fb3c 	bl	801163a <ld_dword>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8011fc8:	4323      	orrs	r3, r4
 8011fca:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	009b      	lsls	r3, r3, #2
 8011fd6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011fda:	4413      	add	r3, r2
 8011fdc:	6879      	ldr	r1, [r7, #4]
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f7ff fb69 	bl	80116b6 <st_dword>
			fs->wflag = 1;
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	2201      	movs	r2, #1
 8011fe8:	70da      	strb	r2, [r3, #3]
			break;
 8011fea:	e006      	b.n	8011ffa <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011fec:	bf00      	nop
 8011fee:	e004      	b.n	8011ffa <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011ff0:	bf00      	nop
 8011ff2:	e002      	b.n	8011ffa <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011ff4:	bf00      	nop
 8011ff6:	e000      	b.n	8011ffa <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011ff8:	bf00      	nop
		}
	}
	return res;
 8011ffa:	7ffb      	ldrb	r3, [r7, #31]
}
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3724      	adds	r7, #36	@ 0x24
 8012000:	46bd      	mov	sp, r7
 8012002:	bd90      	pop	{r4, r7, pc}

08012004 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b088      	sub	sp, #32
 8012008:	af00      	add	r7, sp, #0
 801200a:	60f8      	str	r0, [r7, #12]
 801200c:	60b9      	str	r1, [r7, #8]
 801200e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012010:	2300      	movs	r3, #0
 8012012:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	2b01      	cmp	r3, #1
 801201e:	d904      	bls.n	801202a <remove_chain+0x26>
 8012020:	69bb      	ldr	r3, [r7, #24]
 8012022:	699b      	ldr	r3, [r3, #24]
 8012024:	68ba      	ldr	r2, [r7, #8]
 8012026:	429a      	cmp	r2, r3
 8012028:	d301      	bcc.n	801202e <remove_chain+0x2a>
 801202a:	2302      	movs	r3, #2
 801202c:	e04b      	b.n	80120c6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d00c      	beq.n	801204e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012034:	f04f 32ff 	mov.w	r2, #4294967295
 8012038:	6879      	ldr	r1, [r7, #4]
 801203a:	69b8      	ldr	r0, [r7, #24]
 801203c:	f7ff fef8 	bl	8011e30 <put_fat>
 8012040:	4603      	mov	r3, r0
 8012042:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012044:	7ffb      	ldrb	r3, [r7, #31]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d001      	beq.n	801204e <remove_chain+0x4a>
 801204a:	7ffb      	ldrb	r3, [r7, #31]
 801204c:	e03b      	b.n	80120c6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801204e:	68b9      	ldr	r1, [r7, #8]
 8012050:	68f8      	ldr	r0, [r7, #12]
 8012052:	f7ff fe46 	bl	8011ce2 <get_fat>
 8012056:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d031      	beq.n	80120c2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801205e:	697b      	ldr	r3, [r7, #20]
 8012060:	2b01      	cmp	r3, #1
 8012062:	d101      	bne.n	8012068 <remove_chain+0x64>
 8012064:	2302      	movs	r3, #2
 8012066:	e02e      	b.n	80120c6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801206e:	d101      	bne.n	8012074 <remove_chain+0x70>
 8012070:	2301      	movs	r3, #1
 8012072:	e028      	b.n	80120c6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012074:	2200      	movs	r2, #0
 8012076:	68b9      	ldr	r1, [r7, #8]
 8012078:	69b8      	ldr	r0, [r7, #24]
 801207a:	f7ff fed9 	bl	8011e30 <put_fat>
 801207e:	4603      	mov	r3, r0
 8012080:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012082:	7ffb      	ldrb	r3, [r7, #31]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d001      	beq.n	801208c <remove_chain+0x88>
 8012088:	7ffb      	ldrb	r3, [r7, #31]
 801208a:	e01c      	b.n	80120c6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801208c:	69bb      	ldr	r3, [r7, #24]
 801208e:	695a      	ldr	r2, [r3, #20]
 8012090:	69bb      	ldr	r3, [r7, #24]
 8012092:	699b      	ldr	r3, [r3, #24]
 8012094:	3b02      	subs	r3, #2
 8012096:	429a      	cmp	r2, r3
 8012098:	d20b      	bcs.n	80120b2 <remove_chain+0xae>
			fs->free_clst++;
 801209a:	69bb      	ldr	r3, [r7, #24]
 801209c:	695b      	ldr	r3, [r3, #20]
 801209e:	1c5a      	adds	r2, r3, #1
 80120a0:	69bb      	ldr	r3, [r7, #24]
 80120a2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80120a4:	69bb      	ldr	r3, [r7, #24]
 80120a6:	791b      	ldrb	r3, [r3, #4]
 80120a8:	f043 0301 	orr.w	r3, r3, #1
 80120ac:	b2da      	uxtb	r2, r3
 80120ae:	69bb      	ldr	r3, [r7, #24]
 80120b0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80120b6:	69bb      	ldr	r3, [r7, #24]
 80120b8:	699b      	ldr	r3, [r3, #24]
 80120ba:	68ba      	ldr	r2, [r7, #8]
 80120bc:	429a      	cmp	r2, r3
 80120be:	d3c6      	bcc.n	801204e <remove_chain+0x4a>
 80120c0:	e000      	b.n	80120c4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80120c2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80120c4:	2300      	movs	r3, #0
}
 80120c6:	4618      	mov	r0, r3
 80120c8:	3720      	adds	r7, #32
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bd80      	pop	{r7, pc}

080120ce <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80120ce:	b580      	push	{r7, lr}
 80120d0:	b088      	sub	sp, #32
 80120d2:	af00      	add	r7, sp, #0
 80120d4:	6078      	str	r0, [r7, #4]
 80120d6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80120de:	683b      	ldr	r3, [r7, #0]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d10d      	bne.n	8012100 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80120e4:	693b      	ldr	r3, [r7, #16]
 80120e6:	691b      	ldr	r3, [r3, #16]
 80120e8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80120ea:	69bb      	ldr	r3, [r7, #24]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d004      	beq.n	80120fa <create_chain+0x2c>
 80120f0:	693b      	ldr	r3, [r7, #16]
 80120f2:	699b      	ldr	r3, [r3, #24]
 80120f4:	69ba      	ldr	r2, [r7, #24]
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d31b      	bcc.n	8012132 <create_chain+0x64>
 80120fa:	2301      	movs	r3, #1
 80120fc:	61bb      	str	r3, [r7, #24]
 80120fe:	e018      	b.n	8012132 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012100:	6839      	ldr	r1, [r7, #0]
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	f7ff fded 	bl	8011ce2 <get_fat>
 8012108:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	2b01      	cmp	r3, #1
 801210e:	d801      	bhi.n	8012114 <create_chain+0x46>
 8012110:	2301      	movs	r3, #1
 8012112:	e070      	b.n	80121f6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	f1b3 3fff 	cmp.w	r3, #4294967295
 801211a:	d101      	bne.n	8012120 <create_chain+0x52>
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	e06a      	b.n	80121f6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012120:	693b      	ldr	r3, [r7, #16]
 8012122:	699b      	ldr	r3, [r3, #24]
 8012124:	68fa      	ldr	r2, [r7, #12]
 8012126:	429a      	cmp	r2, r3
 8012128:	d201      	bcs.n	801212e <create_chain+0x60>
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	e063      	b.n	80121f6 <create_chain+0x128>
		scl = clst;
 801212e:	683b      	ldr	r3, [r7, #0]
 8012130:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012132:	69bb      	ldr	r3, [r7, #24]
 8012134:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012136:	69fb      	ldr	r3, [r7, #28]
 8012138:	3301      	adds	r3, #1
 801213a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801213c:	693b      	ldr	r3, [r7, #16]
 801213e:	699b      	ldr	r3, [r3, #24]
 8012140:	69fa      	ldr	r2, [r7, #28]
 8012142:	429a      	cmp	r2, r3
 8012144:	d307      	bcc.n	8012156 <create_chain+0x88>
				ncl = 2;
 8012146:	2302      	movs	r3, #2
 8012148:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801214a:	69fa      	ldr	r2, [r7, #28]
 801214c:	69bb      	ldr	r3, [r7, #24]
 801214e:	429a      	cmp	r2, r3
 8012150:	d901      	bls.n	8012156 <create_chain+0x88>
 8012152:	2300      	movs	r3, #0
 8012154:	e04f      	b.n	80121f6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012156:	69f9      	ldr	r1, [r7, #28]
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f7ff fdc2 	bl	8011ce2 <get_fat>
 801215e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d00e      	beq.n	8012184 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	2b01      	cmp	r3, #1
 801216a:	d003      	beq.n	8012174 <create_chain+0xa6>
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012172:	d101      	bne.n	8012178 <create_chain+0xaa>
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	e03e      	b.n	80121f6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012178:	69fa      	ldr	r2, [r7, #28]
 801217a:	69bb      	ldr	r3, [r7, #24]
 801217c:	429a      	cmp	r2, r3
 801217e:	d1da      	bne.n	8012136 <create_chain+0x68>
 8012180:	2300      	movs	r3, #0
 8012182:	e038      	b.n	80121f6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012184:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012186:	f04f 32ff 	mov.w	r2, #4294967295
 801218a:	69f9      	ldr	r1, [r7, #28]
 801218c:	6938      	ldr	r0, [r7, #16]
 801218e:	f7ff fe4f 	bl	8011e30 <put_fat>
 8012192:	4603      	mov	r3, r0
 8012194:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012196:	7dfb      	ldrb	r3, [r7, #23]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d109      	bne.n	80121b0 <create_chain+0xe2>
 801219c:	683b      	ldr	r3, [r7, #0]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d006      	beq.n	80121b0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80121a2:	69fa      	ldr	r2, [r7, #28]
 80121a4:	6839      	ldr	r1, [r7, #0]
 80121a6:	6938      	ldr	r0, [r7, #16]
 80121a8:	f7ff fe42 	bl	8011e30 <put_fat>
 80121ac:	4603      	mov	r3, r0
 80121ae:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80121b0:	7dfb      	ldrb	r3, [r7, #23]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d116      	bne.n	80121e4 <create_chain+0x116>
		fs->last_clst = ncl;
 80121b6:	693b      	ldr	r3, [r7, #16]
 80121b8:	69fa      	ldr	r2, [r7, #28]
 80121ba:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80121bc:	693b      	ldr	r3, [r7, #16]
 80121be:	695a      	ldr	r2, [r3, #20]
 80121c0:	693b      	ldr	r3, [r7, #16]
 80121c2:	699b      	ldr	r3, [r3, #24]
 80121c4:	3b02      	subs	r3, #2
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d804      	bhi.n	80121d4 <create_chain+0x106>
 80121ca:	693b      	ldr	r3, [r7, #16]
 80121cc:	695b      	ldr	r3, [r3, #20]
 80121ce:	1e5a      	subs	r2, r3, #1
 80121d0:	693b      	ldr	r3, [r7, #16]
 80121d2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80121d4:	693b      	ldr	r3, [r7, #16]
 80121d6:	791b      	ldrb	r3, [r3, #4]
 80121d8:	f043 0301 	orr.w	r3, r3, #1
 80121dc:	b2da      	uxtb	r2, r3
 80121de:	693b      	ldr	r3, [r7, #16]
 80121e0:	711a      	strb	r2, [r3, #4]
 80121e2:	e007      	b.n	80121f4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80121e4:	7dfb      	ldrb	r3, [r7, #23]
 80121e6:	2b01      	cmp	r3, #1
 80121e8:	d102      	bne.n	80121f0 <create_chain+0x122>
 80121ea:	f04f 33ff 	mov.w	r3, #4294967295
 80121ee:	e000      	b.n	80121f2 <create_chain+0x124>
 80121f0:	2301      	movs	r3, #1
 80121f2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80121f4:	69fb      	ldr	r3, [r7, #28]
}
 80121f6:	4618      	mov	r0, r3
 80121f8:	3720      	adds	r7, #32
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}

080121fe <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80121fe:	b480      	push	{r7}
 8012200:	b087      	sub	sp, #28
 8012202:	af00      	add	r7, sp, #0
 8012204:	6078      	str	r0, [r7, #4]
 8012206:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012212:	3304      	adds	r3, #4
 8012214:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	0a5b      	lsrs	r3, r3, #9
 801221a:	68fa      	ldr	r2, [r7, #12]
 801221c:	8952      	ldrh	r2, [r2, #10]
 801221e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012222:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012224:	693b      	ldr	r3, [r7, #16]
 8012226:	1d1a      	adds	r2, r3, #4
 8012228:	613a      	str	r2, [r7, #16]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d101      	bne.n	8012238 <clmt_clust+0x3a>
 8012234:	2300      	movs	r3, #0
 8012236:	e010      	b.n	801225a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012238:	697a      	ldr	r2, [r7, #20]
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	429a      	cmp	r2, r3
 801223e:	d307      	bcc.n	8012250 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012240:	697a      	ldr	r2, [r7, #20]
 8012242:	68bb      	ldr	r3, [r7, #8]
 8012244:	1ad3      	subs	r3, r2, r3
 8012246:	617b      	str	r3, [r7, #20]
 8012248:	693b      	ldr	r3, [r7, #16]
 801224a:	3304      	adds	r3, #4
 801224c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801224e:	e7e9      	b.n	8012224 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012250:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012252:	693b      	ldr	r3, [r7, #16]
 8012254:	681a      	ldr	r2, [r3, #0]
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	4413      	add	r3, r2
}
 801225a:	4618      	mov	r0, r3
 801225c:	371c      	adds	r7, #28
 801225e:	46bd      	mov	sp, r7
 8012260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012264:	4770      	bx	lr

08012266 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012266:	b580      	push	{r7, lr}
 8012268:	b086      	sub	sp, #24
 801226a:	af00      	add	r7, sp, #0
 801226c:	6078      	str	r0, [r7, #4]
 801226e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801227c:	d204      	bcs.n	8012288 <dir_sdi+0x22>
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	f003 031f 	and.w	r3, r3, #31
 8012284:	2b00      	cmp	r3, #0
 8012286:	d001      	beq.n	801228c <dir_sdi+0x26>
		return FR_INT_ERR;
 8012288:	2302      	movs	r3, #2
 801228a:	e063      	b.n	8012354 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	683a      	ldr	r2, [r7, #0]
 8012290:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	689b      	ldr	r3, [r3, #8]
 8012296:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012298:	697b      	ldr	r3, [r7, #20]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d106      	bne.n	80122ac <dir_sdi+0x46>
 801229e:	693b      	ldr	r3, [r7, #16]
 80122a0:	781b      	ldrb	r3, [r3, #0]
 80122a2:	2b02      	cmp	r3, #2
 80122a4:	d902      	bls.n	80122ac <dir_sdi+0x46>
		clst = fs->dirbase;
 80122a6:	693b      	ldr	r3, [r7, #16]
 80122a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122aa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80122ac:	697b      	ldr	r3, [r7, #20]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d10c      	bne.n	80122cc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	095b      	lsrs	r3, r3, #5
 80122b6:	693a      	ldr	r2, [r7, #16]
 80122b8:	8912      	ldrh	r2, [r2, #8]
 80122ba:	4293      	cmp	r3, r2
 80122bc:	d301      	bcc.n	80122c2 <dir_sdi+0x5c>
 80122be:	2302      	movs	r3, #2
 80122c0:	e048      	b.n	8012354 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80122c2:	693b      	ldr	r3, [r7, #16]
 80122c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	61da      	str	r2, [r3, #28]
 80122ca:	e029      	b.n	8012320 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80122cc:	693b      	ldr	r3, [r7, #16]
 80122ce:	895b      	ldrh	r3, [r3, #10]
 80122d0:	025b      	lsls	r3, r3, #9
 80122d2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80122d4:	e019      	b.n	801230a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	6979      	ldr	r1, [r7, #20]
 80122da:	4618      	mov	r0, r3
 80122dc:	f7ff fd01 	bl	8011ce2 <get_fat>
 80122e0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80122e2:	697b      	ldr	r3, [r7, #20]
 80122e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122e8:	d101      	bne.n	80122ee <dir_sdi+0x88>
 80122ea:	2301      	movs	r3, #1
 80122ec:	e032      	b.n	8012354 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	2b01      	cmp	r3, #1
 80122f2:	d904      	bls.n	80122fe <dir_sdi+0x98>
 80122f4:	693b      	ldr	r3, [r7, #16]
 80122f6:	699b      	ldr	r3, [r3, #24]
 80122f8:	697a      	ldr	r2, [r7, #20]
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d301      	bcc.n	8012302 <dir_sdi+0x9c>
 80122fe:	2302      	movs	r3, #2
 8012300:	e028      	b.n	8012354 <dir_sdi+0xee>
			ofs -= csz;
 8012302:	683a      	ldr	r2, [r7, #0]
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	1ad3      	subs	r3, r2, r3
 8012308:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801230a:	683a      	ldr	r2, [r7, #0]
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	429a      	cmp	r2, r3
 8012310:	d2e1      	bcs.n	80122d6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012312:	6979      	ldr	r1, [r7, #20]
 8012314:	6938      	ldr	r0, [r7, #16]
 8012316:	f7ff fcc5 	bl	8011ca4 <clust2sect>
 801231a:	4602      	mov	r2, r0
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	697a      	ldr	r2, [r7, #20]
 8012324:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	69db      	ldr	r3, [r3, #28]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d101      	bne.n	8012332 <dir_sdi+0xcc>
 801232e:	2302      	movs	r3, #2
 8012330:	e010      	b.n	8012354 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	69da      	ldr	r2, [r3, #28]
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	0a5b      	lsrs	r3, r3, #9
 801233a:	441a      	add	r2, r3
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012340:	693b      	ldr	r3, [r7, #16]
 8012342:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801234c:	441a      	add	r2, r3
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012352:	2300      	movs	r3, #0
}
 8012354:	4618      	mov	r0, r3
 8012356:	3718      	adds	r7, #24
 8012358:	46bd      	mov	sp, r7
 801235a:	bd80      	pop	{r7, pc}

0801235c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b086      	sub	sp, #24
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	695b      	ldr	r3, [r3, #20]
 8012370:	3320      	adds	r3, #32
 8012372:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	69db      	ldr	r3, [r3, #28]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d003      	beq.n	8012384 <dir_next+0x28>
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012382:	d301      	bcc.n	8012388 <dir_next+0x2c>
 8012384:	2304      	movs	r3, #4
 8012386:	e0aa      	b.n	80124de <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801238e:	2b00      	cmp	r3, #0
 8012390:	f040 8098 	bne.w	80124c4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	69db      	ldr	r3, [r3, #28]
 8012398:	1c5a      	adds	r2, r3, #1
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	699b      	ldr	r3, [r3, #24]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d10b      	bne.n	80123be <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	095b      	lsrs	r3, r3, #5
 80123aa:	68fa      	ldr	r2, [r7, #12]
 80123ac:	8912      	ldrh	r2, [r2, #8]
 80123ae:	4293      	cmp	r3, r2
 80123b0:	f0c0 8088 	bcc.w	80124c4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2200      	movs	r2, #0
 80123b8:	61da      	str	r2, [r3, #28]
 80123ba:	2304      	movs	r3, #4
 80123bc:	e08f      	b.n	80124de <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	0a5b      	lsrs	r3, r3, #9
 80123c2:	68fa      	ldr	r2, [r7, #12]
 80123c4:	8952      	ldrh	r2, [r2, #10]
 80123c6:	3a01      	subs	r2, #1
 80123c8:	4013      	ands	r3, r2
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d17a      	bne.n	80124c4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80123ce:	687a      	ldr	r2, [r7, #4]
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	699b      	ldr	r3, [r3, #24]
 80123d4:	4619      	mov	r1, r3
 80123d6:	4610      	mov	r0, r2
 80123d8:	f7ff fc83 	bl	8011ce2 <get_fat>
 80123dc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80123de:	697b      	ldr	r3, [r7, #20]
 80123e0:	2b01      	cmp	r3, #1
 80123e2:	d801      	bhi.n	80123e8 <dir_next+0x8c>
 80123e4:	2302      	movs	r3, #2
 80123e6:	e07a      	b.n	80124de <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80123e8:	697b      	ldr	r3, [r7, #20]
 80123ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123ee:	d101      	bne.n	80123f4 <dir_next+0x98>
 80123f0:	2301      	movs	r3, #1
 80123f2:	e074      	b.n	80124de <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	699b      	ldr	r3, [r3, #24]
 80123f8:	697a      	ldr	r2, [r7, #20]
 80123fa:	429a      	cmp	r2, r3
 80123fc:	d358      	bcc.n	80124b0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d104      	bne.n	801240e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	2200      	movs	r2, #0
 8012408:	61da      	str	r2, [r3, #28]
 801240a:	2304      	movs	r3, #4
 801240c:	e067      	b.n	80124de <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801240e:	687a      	ldr	r2, [r7, #4]
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	699b      	ldr	r3, [r3, #24]
 8012414:	4619      	mov	r1, r3
 8012416:	4610      	mov	r0, r2
 8012418:	f7ff fe59 	bl	80120ce <create_chain>
 801241c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801241e:	697b      	ldr	r3, [r7, #20]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d101      	bne.n	8012428 <dir_next+0xcc>
 8012424:	2307      	movs	r3, #7
 8012426:	e05a      	b.n	80124de <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012428:	697b      	ldr	r3, [r7, #20]
 801242a:	2b01      	cmp	r3, #1
 801242c:	d101      	bne.n	8012432 <dir_next+0xd6>
 801242e:	2302      	movs	r3, #2
 8012430:	e055      	b.n	80124de <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012432:	697b      	ldr	r3, [r7, #20]
 8012434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012438:	d101      	bne.n	801243e <dir_next+0xe2>
 801243a:	2301      	movs	r3, #1
 801243c:	e04f      	b.n	80124de <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801243e:	68f8      	ldr	r0, [r7, #12]
 8012440:	f7ff fb50 	bl	8011ae4 <sync_window>
 8012444:	4603      	mov	r3, r0
 8012446:	2b00      	cmp	r3, #0
 8012448:	d001      	beq.n	801244e <dir_next+0xf2>
 801244a:	2301      	movs	r3, #1
 801244c:	e047      	b.n	80124de <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	3334      	adds	r3, #52	@ 0x34
 8012452:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012456:	2100      	movs	r1, #0
 8012458:	4618      	mov	r0, r3
 801245a:	f7ff f979 	bl	8011750 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801245e:	2300      	movs	r3, #0
 8012460:	613b      	str	r3, [r7, #16]
 8012462:	6979      	ldr	r1, [r7, #20]
 8012464:	68f8      	ldr	r0, [r7, #12]
 8012466:	f7ff fc1d 	bl	8011ca4 <clust2sect>
 801246a:	4602      	mov	r2, r0
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	631a      	str	r2, [r3, #48]	@ 0x30
 8012470:	e012      	b.n	8012498 <dir_next+0x13c>
						fs->wflag = 1;
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	2201      	movs	r2, #1
 8012476:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012478:	68f8      	ldr	r0, [r7, #12]
 801247a:	f7ff fb33 	bl	8011ae4 <sync_window>
 801247e:	4603      	mov	r3, r0
 8012480:	2b00      	cmp	r3, #0
 8012482:	d001      	beq.n	8012488 <dir_next+0x12c>
 8012484:	2301      	movs	r3, #1
 8012486:	e02a      	b.n	80124de <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012488:	693b      	ldr	r3, [r7, #16]
 801248a:	3301      	adds	r3, #1
 801248c:	613b      	str	r3, [r7, #16]
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012492:	1c5a      	adds	r2, r3, #1
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	631a      	str	r2, [r3, #48]	@ 0x30
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	895b      	ldrh	r3, [r3, #10]
 801249c:	461a      	mov	r2, r3
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	4293      	cmp	r3, r2
 80124a2:	d3e6      	bcc.n	8012472 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80124a8:	693b      	ldr	r3, [r7, #16]
 80124aa:	1ad2      	subs	r2, r2, r3
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	697a      	ldr	r2, [r7, #20]
 80124b4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80124b6:	6979      	ldr	r1, [r7, #20]
 80124b8:	68f8      	ldr	r0, [r7, #12]
 80124ba:	f7ff fbf3 	bl	8011ca4 <clust2sect>
 80124be:	4602      	mov	r2, r0
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	68ba      	ldr	r2, [r7, #8]
 80124c8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124d6:	441a      	add	r2, r3
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80124dc:	2300      	movs	r3, #0
}
 80124de:	4618      	mov	r0, r3
 80124e0:	3718      	adds	r7, #24
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}

080124e6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80124e6:	b580      	push	{r7, lr}
 80124e8:	b086      	sub	sp, #24
 80124ea:	af00      	add	r7, sp, #0
 80124ec:	6078      	str	r0, [r7, #4]
 80124ee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80124f6:	2100      	movs	r1, #0
 80124f8:	6878      	ldr	r0, [r7, #4]
 80124fa:	f7ff feb4 	bl	8012266 <dir_sdi>
 80124fe:	4603      	mov	r3, r0
 8012500:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012502:	7dfb      	ldrb	r3, [r7, #23]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d12b      	bne.n	8012560 <dir_alloc+0x7a>
		n = 0;
 8012508:	2300      	movs	r3, #0
 801250a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	69db      	ldr	r3, [r3, #28]
 8012510:	4619      	mov	r1, r3
 8012512:	68f8      	ldr	r0, [r7, #12]
 8012514:	f7ff fb2a 	bl	8011b6c <move_window>
 8012518:	4603      	mov	r3, r0
 801251a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801251c:	7dfb      	ldrb	r3, [r7, #23]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d11d      	bne.n	801255e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	6a1b      	ldr	r3, [r3, #32]
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	2be5      	cmp	r3, #229	@ 0xe5
 801252a:	d004      	beq.n	8012536 <dir_alloc+0x50>
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	6a1b      	ldr	r3, [r3, #32]
 8012530:	781b      	ldrb	r3, [r3, #0]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d107      	bne.n	8012546 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012536:	693b      	ldr	r3, [r7, #16]
 8012538:	3301      	adds	r3, #1
 801253a:	613b      	str	r3, [r7, #16]
 801253c:	693a      	ldr	r2, [r7, #16]
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	429a      	cmp	r2, r3
 8012542:	d102      	bne.n	801254a <dir_alloc+0x64>
 8012544:	e00c      	b.n	8012560 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012546:	2300      	movs	r3, #0
 8012548:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801254a:	2101      	movs	r1, #1
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f7ff ff05 	bl	801235c <dir_next>
 8012552:	4603      	mov	r3, r0
 8012554:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012556:	7dfb      	ldrb	r3, [r7, #23]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d0d7      	beq.n	801250c <dir_alloc+0x26>
 801255c:	e000      	b.n	8012560 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801255e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012560:	7dfb      	ldrb	r3, [r7, #23]
 8012562:	2b04      	cmp	r3, #4
 8012564:	d101      	bne.n	801256a <dir_alloc+0x84>
 8012566:	2307      	movs	r3, #7
 8012568:	75fb      	strb	r3, [r7, #23]
	return res;
 801256a:	7dfb      	ldrb	r3, [r7, #23]
}
 801256c:	4618      	mov	r0, r3
 801256e:	3718      	adds	r7, #24
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}

08012574 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b084      	sub	sp, #16
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	331a      	adds	r3, #26
 8012582:	4618      	mov	r0, r3
 8012584:	f7ff f840 	bl	8011608 <ld_word>
 8012588:	4603      	mov	r3, r0
 801258a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	781b      	ldrb	r3, [r3, #0]
 8012590:	2b03      	cmp	r3, #3
 8012592:	d109      	bne.n	80125a8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012594:	683b      	ldr	r3, [r7, #0]
 8012596:	3314      	adds	r3, #20
 8012598:	4618      	mov	r0, r3
 801259a:	f7ff f835 	bl	8011608 <ld_word>
 801259e:	4603      	mov	r3, r0
 80125a0:	041b      	lsls	r3, r3, #16
 80125a2:	68fa      	ldr	r2, [r7, #12]
 80125a4:	4313      	orrs	r3, r2
 80125a6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80125a8:	68fb      	ldr	r3, [r7, #12]
}
 80125aa:	4618      	mov	r0, r3
 80125ac:	3710      	adds	r7, #16
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bd80      	pop	{r7, pc}

080125b2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80125b2:	b580      	push	{r7, lr}
 80125b4:	b084      	sub	sp, #16
 80125b6:	af00      	add	r7, sp, #0
 80125b8:	60f8      	str	r0, [r7, #12]
 80125ba:	60b9      	str	r1, [r7, #8]
 80125bc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	331a      	adds	r3, #26
 80125c2:	687a      	ldr	r2, [r7, #4]
 80125c4:	b292      	uxth	r2, r2
 80125c6:	4611      	mov	r1, r2
 80125c8:	4618      	mov	r0, r3
 80125ca:	f7ff f859 	bl	8011680 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	781b      	ldrb	r3, [r3, #0]
 80125d2:	2b03      	cmp	r3, #3
 80125d4:	d109      	bne.n	80125ea <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	f103 0214 	add.w	r2, r3, #20
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	0c1b      	lsrs	r3, r3, #16
 80125e0:	b29b      	uxth	r3, r3
 80125e2:	4619      	mov	r1, r3
 80125e4:	4610      	mov	r0, r2
 80125e6:	f7ff f84b 	bl	8011680 <st_word>
	}
}
 80125ea:	bf00      	nop
 80125ec:	3710      	adds	r7, #16
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}
	...

080125f4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80125f4:	b590      	push	{r4, r7, lr}
 80125f6:	b087      	sub	sp, #28
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80125fe:	683b      	ldr	r3, [r7, #0]
 8012600:	331a      	adds	r3, #26
 8012602:	4618      	mov	r0, r3
 8012604:	f7ff f800 	bl	8011608 <ld_word>
 8012608:	4603      	mov	r3, r0
 801260a:	2b00      	cmp	r3, #0
 801260c:	d001      	beq.n	8012612 <cmp_lfn+0x1e>
 801260e:	2300      	movs	r3, #0
 8012610:	e059      	b.n	80126c6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8012612:	683b      	ldr	r3, [r7, #0]
 8012614:	781b      	ldrb	r3, [r3, #0]
 8012616:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801261a:	1e5a      	subs	r2, r3, #1
 801261c:	4613      	mov	r3, r2
 801261e:	005b      	lsls	r3, r3, #1
 8012620:	4413      	add	r3, r2
 8012622:	009b      	lsls	r3, r3, #2
 8012624:	4413      	add	r3, r2
 8012626:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012628:	2301      	movs	r3, #1
 801262a:	81fb      	strh	r3, [r7, #14]
 801262c:	2300      	movs	r3, #0
 801262e:	613b      	str	r3, [r7, #16]
 8012630:	e033      	b.n	801269a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012632:	4a27      	ldr	r2, [pc, #156]	@ (80126d0 <cmp_lfn+0xdc>)
 8012634:	693b      	ldr	r3, [r7, #16]
 8012636:	4413      	add	r3, r2
 8012638:	781b      	ldrb	r3, [r3, #0]
 801263a:	461a      	mov	r2, r3
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	4413      	add	r3, r2
 8012640:	4618      	mov	r0, r3
 8012642:	f7fe ffe1 	bl	8011608 <ld_word>
 8012646:	4603      	mov	r3, r0
 8012648:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801264a:	89fb      	ldrh	r3, [r7, #14]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d01a      	beq.n	8012686 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	2bfe      	cmp	r3, #254	@ 0xfe
 8012654:	d812      	bhi.n	801267c <cmp_lfn+0x88>
 8012656:	89bb      	ldrh	r3, [r7, #12]
 8012658:	4618      	mov	r0, r3
 801265a:	f002 fab3 	bl	8014bc4 <ff_wtoupper>
 801265e:	4603      	mov	r3, r0
 8012660:	461c      	mov	r4, r3
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	1c5a      	adds	r2, r3, #1
 8012666:	617a      	str	r2, [r7, #20]
 8012668:	005b      	lsls	r3, r3, #1
 801266a:	687a      	ldr	r2, [r7, #4]
 801266c:	4413      	add	r3, r2
 801266e:	881b      	ldrh	r3, [r3, #0]
 8012670:	4618      	mov	r0, r3
 8012672:	f002 faa7 	bl	8014bc4 <ff_wtoupper>
 8012676:	4603      	mov	r3, r0
 8012678:	429c      	cmp	r4, r3
 801267a:	d001      	beq.n	8012680 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801267c:	2300      	movs	r3, #0
 801267e:	e022      	b.n	80126c6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8012680:	89bb      	ldrh	r3, [r7, #12]
 8012682:	81fb      	strh	r3, [r7, #14]
 8012684:	e006      	b.n	8012694 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012686:	89bb      	ldrh	r3, [r7, #12]
 8012688:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801268c:	4293      	cmp	r3, r2
 801268e:	d001      	beq.n	8012694 <cmp_lfn+0xa0>
 8012690:	2300      	movs	r3, #0
 8012692:	e018      	b.n	80126c6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012694:	693b      	ldr	r3, [r7, #16]
 8012696:	3301      	adds	r3, #1
 8012698:	613b      	str	r3, [r7, #16]
 801269a:	693b      	ldr	r3, [r7, #16]
 801269c:	2b0c      	cmp	r3, #12
 801269e:	d9c8      	bls.n	8012632 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d00b      	beq.n	80126c4 <cmp_lfn+0xd0>
 80126ac:	89fb      	ldrh	r3, [r7, #14]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d008      	beq.n	80126c4 <cmp_lfn+0xd0>
 80126b2:	697b      	ldr	r3, [r7, #20]
 80126b4:	005b      	lsls	r3, r3, #1
 80126b6:	687a      	ldr	r2, [r7, #4]
 80126b8:	4413      	add	r3, r2
 80126ba:	881b      	ldrh	r3, [r3, #0]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d001      	beq.n	80126c4 <cmp_lfn+0xd0>
 80126c0:	2300      	movs	r3, #0
 80126c2:	e000      	b.n	80126c6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80126c4:	2301      	movs	r3, #1
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	371c      	adds	r7, #28
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd90      	pop	{r4, r7, pc}
 80126ce:	bf00      	nop
 80126d0:	08017938 	.word	0x08017938

080126d4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b086      	sub	sp, #24
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
 80126dc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	331a      	adds	r3, #26
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7fe ff90 	bl	8011608 <ld_word>
 80126e8:	4603      	mov	r3, r0
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d001      	beq.n	80126f2 <pick_lfn+0x1e>
 80126ee:	2300      	movs	r3, #0
 80126f0:	e04d      	b.n	801278e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	781b      	ldrb	r3, [r3, #0]
 80126f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80126fa:	1e5a      	subs	r2, r3, #1
 80126fc:	4613      	mov	r3, r2
 80126fe:	005b      	lsls	r3, r3, #1
 8012700:	4413      	add	r3, r2
 8012702:	009b      	lsls	r3, r3, #2
 8012704:	4413      	add	r3, r2
 8012706:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012708:	2301      	movs	r3, #1
 801270a:	81fb      	strh	r3, [r7, #14]
 801270c:	2300      	movs	r3, #0
 801270e:	613b      	str	r3, [r7, #16]
 8012710:	e028      	b.n	8012764 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012712:	4a21      	ldr	r2, [pc, #132]	@ (8012798 <pick_lfn+0xc4>)
 8012714:	693b      	ldr	r3, [r7, #16]
 8012716:	4413      	add	r3, r2
 8012718:	781b      	ldrb	r3, [r3, #0]
 801271a:	461a      	mov	r2, r3
 801271c:	683b      	ldr	r3, [r7, #0]
 801271e:	4413      	add	r3, r2
 8012720:	4618      	mov	r0, r3
 8012722:	f7fe ff71 	bl	8011608 <ld_word>
 8012726:	4603      	mov	r3, r0
 8012728:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801272a:	89fb      	ldrh	r3, [r7, #14]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d00f      	beq.n	8012750 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012730:	697b      	ldr	r3, [r7, #20]
 8012732:	2bfe      	cmp	r3, #254	@ 0xfe
 8012734:	d901      	bls.n	801273a <pick_lfn+0x66>
 8012736:	2300      	movs	r3, #0
 8012738:	e029      	b.n	801278e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801273a:	89bb      	ldrh	r3, [r7, #12]
 801273c:	81fb      	strh	r3, [r7, #14]
 801273e:	697b      	ldr	r3, [r7, #20]
 8012740:	1c5a      	adds	r2, r3, #1
 8012742:	617a      	str	r2, [r7, #20]
 8012744:	005b      	lsls	r3, r3, #1
 8012746:	687a      	ldr	r2, [r7, #4]
 8012748:	4413      	add	r3, r2
 801274a:	89fa      	ldrh	r2, [r7, #14]
 801274c:	801a      	strh	r2, [r3, #0]
 801274e:	e006      	b.n	801275e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012750:	89bb      	ldrh	r3, [r7, #12]
 8012752:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012756:	4293      	cmp	r3, r2
 8012758:	d001      	beq.n	801275e <pick_lfn+0x8a>
 801275a:	2300      	movs	r3, #0
 801275c:	e017      	b.n	801278e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801275e:	693b      	ldr	r3, [r7, #16]
 8012760:	3301      	adds	r3, #1
 8012762:	613b      	str	r3, [r7, #16]
 8012764:	693b      	ldr	r3, [r7, #16]
 8012766:	2b0c      	cmp	r3, #12
 8012768:	d9d3      	bls.n	8012712 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801276a:	683b      	ldr	r3, [r7, #0]
 801276c:	781b      	ldrb	r3, [r3, #0]
 801276e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012772:	2b00      	cmp	r3, #0
 8012774:	d00a      	beq.n	801278c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8012776:	697b      	ldr	r3, [r7, #20]
 8012778:	2bfe      	cmp	r3, #254	@ 0xfe
 801277a:	d901      	bls.n	8012780 <pick_lfn+0xac>
 801277c:	2300      	movs	r3, #0
 801277e:	e006      	b.n	801278e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	005b      	lsls	r3, r3, #1
 8012784:	687a      	ldr	r2, [r7, #4]
 8012786:	4413      	add	r3, r2
 8012788:	2200      	movs	r2, #0
 801278a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 801278c:	2301      	movs	r3, #1
}
 801278e:	4618      	mov	r0, r3
 8012790:	3718      	adds	r7, #24
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}
 8012796:	bf00      	nop
 8012798:	08017938 	.word	0x08017938

0801279c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b088      	sub	sp, #32
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	60f8      	str	r0, [r7, #12]
 80127a4:	60b9      	str	r1, [r7, #8]
 80127a6:	4611      	mov	r1, r2
 80127a8:	461a      	mov	r2, r3
 80127aa:	460b      	mov	r3, r1
 80127ac:	71fb      	strb	r3, [r7, #7]
 80127ae:	4613      	mov	r3, r2
 80127b0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80127b2:	68bb      	ldr	r3, [r7, #8]
 80127b4:	330d      	adds	r3, #13
 80127b6:	79ba      	ldrb	r2, [r7, #6]
 80127b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	330b      	adds	r3, #11
 80127be:	220f      	movs	r2, #15
 80127c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	330c      	adds	r3, #12
 80127c6:	2200      	movs	r2, #0
 80127c8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80127ca:	68bb      	ldr	r3, [r7, #8]
 80127cc:	331a      	adds	r3, #26
 80127ce:	2100      	movs	r1, #0
 80127d0:	4618      	mov	r0, r3
 80127d2:	f7fe ff55 	bl	8011680 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80127d6:	79fb      	ldrb	r3, [r7, #7]
 80127d8:	1e5a      	subs	r2, r3, #1
 80127da:	4613      	mov	r3, r2
 80127dc:	005b      	lsls	r3, r3, #1
 80127de:	4413      	add	r3, r2
 80127e0:	009b      	lsls	r3, r3, #2
 80127e2:	4413      	add	r3, r2
 80127e4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80127e6:	2300      	movs	r3, #0
 80127e8:	82fb      	strh	r3, [r7, #22]
 80127ea:	2300      	movs	r3, #0
 80127ec:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80127ee:	8afb      	ldrh	r3, [r7, #22]
 80127f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80127f4:	4293      	cmp	r3, r2
 80127f6:	d007      	beq.n	8012808 <put_lfn+0x6c>
 80127f8:	69fb      	ldr	r3, [r7, #28]
 80127fa:	1c5a      	adds	r2, r3, #1
 80127fc:	61fa      	str	r2, [r7, #28]
 80127fe:	005b      	lsls	r3, r3, #1
 8012800:	68fa      	ldr	r2, [r7, #12]
 8012802:	4413      	add	r3, r2
 8012804:	881b      	ldrh	r3, [r3, #0]
 8012806:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012808:	4a17      	ldr	r2, [pc, #92]	@ (8012868 <put_lfn+0xcc>)
 801280a:	69bb      	ldr	r3, [r7, #24]
 801280c:	4413      	add	r3, r2
 801280e:	781b      	ldrb	r3, [r3, #0]
 8012810:	461a      	mov	r2, r3
 8012812:	68bb      	ldr	r3, [r7, #8]
 8012814:	4413      	add	r3, r2
 8012816:	8afa      	ldrh	r2, [r7, #22]
 8012818:	4611      	mov	r1, r2
 801281a:	4618      	mov	r0, r3
 801281c:	f7fe ff30 	bl	8011680 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012820:	8afb      	ldrh	r3, [r7, #22]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d102      	bne.n	801282c <put_lfn+0x90>
 8012826:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801282a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801282c:	69bb      	ldr	r3, [r7, #24]
 801282e:	3301      	adds	r3, #1
 8012830:	61bb      	str	r3, [r7, #24]
 8012832:	69bb      	ldr	r3, [r7, #24]
 8012834:	2b0c      	cmp	r3, #12
 8012836:	d9da      	bls.n	80127ee <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012838:	8afb      	ldrh	r3, [r7, #22]
 801283a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801283e:	4293      	cmp	r3, r2
 8012840:	d006      	beq.n	8012850 <put_lfn+0xb4>
 8012842:	69fb      	ldr	r3, [r7, #28]
 8012844:	005b      	lsls	r3, r3, #1
 8012846:	68fa      	ldr	r2, [r7, #12]
 8012848:	4413      	add	r3, r2
 801284a:	881b      	ldrh	r3, [r3, #0]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d103      	bne.n	8012858 <put_lfn+0xbc>
 8012850:	79fb      	ldrb	r3, [r7, #7]
 8012852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012856:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	79fa      	ldrb	r2, [r7, #7]
 801285c:	701a      	strb	r2, [r3, #0]
}
 801285e:	bf00      	nop
 8012860:	3720      	adds	r7, #32
 8012862:	46bd      	mov	sp, r7
 8012864:	bd80      	pop	{r7, pc}
 8012866:	bf00      	nop
 8012868:	08017938 	.word	0x08017938

0801286c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801286c:	b580      	push	{r7, lr}
 801286e:	b08c      	sub	sp, #48	@ 0x30
 8012870:	af00      	add	r7, sp, #0
 8012872:	60f8      	str	r0, [r7, #12]
 8012874:	60b9      	str	r1, [r7, #8]
 8012876:	607a      	str	r2, [r7, #4]
 8012878:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801287a:	220b      	movs	r2, #11
 801287c:	68b9      	ldr	r1, [r7, #8]
 801287e:	68f8      	ldr	r0, [r7, #12]
 8012880:	f7fe ff45 	bl	801170e <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	2b05      	cmp	r3, #5
 8012888:	d92b      	bls.n	80128e2 <gen_numname+0x76>
		sr = seq;
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801288e:	e022      	b.n	80128d6 <gen_numname+0x6a>
			wc = *lfn++;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	1c9a      	adds	r2, r3, #2
 8012894:	607a      	str	r2, [r7, #4]
 8012896:	881b      	ldrh	r3, [r3, #0]
 8012898:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 801289a:	2300      	movs	r3, #0
 801289c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801289e:	e017      	b.n	80128d0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80128a0:	69fb      	ldr	r3, [r7, #28]
 80128a2:	005a      	lsls	r2, r3, #1
 80128a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80128a6:	f003 0301 	and.w	r3, r3, #1
 80128aa:	4413      	add	r3, r2
 80128ac:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80128ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80128b0:	085b      	lsrs	r3, r3, #1
 80128b2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80128b4:	69fb      	ldr	r3, [r7, #28]
 80128b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d005      	beq.n	80128ca <gen_numname+0x5e>
 80128be:	69fb      	ldr	r3, [r7, #28]
 80128c0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80128c4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80128c8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80128ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128cc:	3301      	adds	r3, #1
 80128ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80128d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128d2:	2b0f      	cmp	r3, #15
 80128d4:	d9e4      	bls.n	80128a0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	881b      	ldrh	r3, [r3, #0]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d1d8      	bne.n	8012890 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80128de:	69fb      	ldr	r3, [r7, #28]
 80128e0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80128e2:	2307      	movs	r3, #7
 80128e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	b2db      	uxtb	r3, r3
 80128ea:	f003 030f 	and.w	r3, r3, #15
 80128ee:	b2db      	uxtb	r3, r3
 80128f0:	3330      	adds	r3, #48	@ 0x30
 80128f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 80128f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80128fa:	2b39      	cmp	r3, #57	@ 0x39
 80128fc:	d904      	bls.n	8012908 <gen_numname+0x9c>
 80128fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012902:	3307      	adds	r3, #7
 8012904:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8012908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801290a:	1e5a      	subs	r2, r3, #1
 801290c:	62ba      	str	r2, [r7, #40]	@ 0x28
 801290e:	3330      	adds	r3, #48	@ 0x30
 8012910:	443b      	add	r3, r7
 8012912:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8012916:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	091b      	lsrs	r3, r3, #4
 801291e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d1df      	bne.n	80128e6 <gen_numname+0x7a>
	ns[i] = '~';
 8012926:	f107 0214 	add.w	r2, r7, #20
 801292a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801292c:	4413      	add	r3, r2
 801292e:	227e      	movs	r2, #126	@ 0x7e
 8012930:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012932:	2300      	movs	r3, #0
 8012934:	627b      	str	r3, [r7, #36]	@ 0x24
 8012936:	e002      	b.n	801293e <gen_numname+0xd2>
 8012938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801293a:	3301      	adds	r3, #1
 801293c:	627b      	str	r3, [r7, #36]	@ 0x24
 801293e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012942:	429a      	cmp	r2, r3
 8012944:	d205      	bcs.n	8012952 <gen_numname+0xe6>
 8012946:	68fa      	ldr	r2, [r7, #12]
 8012948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801294a:	4413      	add	r3, r2
 801294c:	781b      	ldrb	r3, [r3, #0]
 801294e:	2b20      	cmp	r3, #32
 8012950:	d1f2      	bne.n	8012938 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012954:	2b07      	cmp	r3, #7
 8012956:	d807      	bhi.n	8012968 <gen_numname+0xfc>
 8012958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801295a:	1c5a      	adds	r2, r3, #1
 801295c:	62ba      	str	r2, [r7, #40]	@ 0x28
 801295e:	3330      	adds	r3, #48	@ 0x30
 8012960:	443b      	add	r3, r7
 8012962:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8012966:	e000      	b.n	801296a <gen_numname+0xfe>
 8012968:	2120      	movs	r1, #32
 801296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801296c:	1c5a      	adds	r2, r3, #1
 801296e:	627a      	str	r2, [r7, #36]	@ 0x24
 8012970:	68fa      	ldr	r2, [r7, #12]
 8012972:	4413      	add	r3, r2
 8012974:	460a      	mov	r2, r1
 8012976:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8012978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801297a:	2b07      	cmp	r3, #7
 801297c:	d9e9      	bls.n	8012952 <gen_numname+0xe6>
}
 801297e:	bf00      	nop
 8012980:	bf00      	nop
 8012982:	3730      	adds	r7, #48	@ 0x30
 8012984:	46bd      	mov	sp, r7
 8012986:	bd80      	pop	{r7, pc}

08012988 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8012988:	b480      	push	{r7}
 801298a:	b085      	sub	sp, #20
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8012990:	2300      	movs	r3, #0
 8012992:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8012994:	230b      	movs	r3, #11
 8012996:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8012998:	7bfb      	ldrb	r3, [r7, #15]
 801299a:	b2da      	uxtb	r2, r3
 801299c:	0852      	lsrs	r2, r2, #1
 801299e:	01db      	lsls	r3, r3, #7
 80129a0:	4313      	orrs	r3, r2
 80129a2:	b2da      	uxtb	r2, r3
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	1c59      	adds	r1, r3, #1
 80129a8:	6079      	str	r1, [r7, #4]
 80129aa:	781b      	ldrb	r3, [r3, #0]
 80129ac:	4413      	add	r3, r2
 80129ae:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80129b0:	68bb      	ldr	r3, [r7, #8]
 80129b2:	3b01      	subs	r3, #1
 80129b4:	60bb      	str	r3, [r7, #8]
 80129b6:	68bb      	ldr	r3, [r7, #8]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d1ed      	bne.n	8012998 <sum_sfn+0x10>
	return sum;
 80129bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80129be:	4618      	mov	r0, r3
 80129c0:	3714      	adds	r7, #20
 80129c2:	46bd      	mov	sp, r7
 80129c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c8:	4770      	bx	lr

080129ca <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80129ca:	b580      	push	{r7, lr}
 80129cc:	b086      	sub	sp, #24
 80129ce:	af00      	add	r7, sp, #0
 80129d0:	6078      	str	r0, [r7, #4]
 80129d2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80129d4:	2304      	movs	r3, #4
 80129d6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80129de:	23ff      	movs	r3, #255	@ 0xff
 80129e0:	757b      	strb	r3, [r7, #21]
 80129e2:	23ff      	movs	r3, #255	@ 0xff
 80129e4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80129e6:	e081      	b.n	8012aec <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	69db      	ldr	r3, [r3, #28]
 80129ec:	4619      	mov	r1, r3
 80129ee:	6938      	ldr	r0, [r7, #16]
 80129f0:	f7ff f8bc 	bl	8011b6c <move_window>
 80129f4:	4603      	mov	r3, r0
 80129f6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80129f8:	7dfb      	ldrb	r3, [r7, #23]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d17c      	bne.n	8012af8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	6a1b      	ldr	r3, [r3, #32]
 8012a02:	781b      	ldrb	r3, [r3, #0]
 8012a04:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8012a06:	7dbb      	ldrb	r3, [r7, #22]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d102      	bne.n	8012a12 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012a0c:	2304      	movs	r3, #4
 8012a0e:	75fb      	strb	r3, [r7, #23]
 8012a10:	e077      	b.n	8012b02 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	6a1b      	ldr	r3, [r3, #32]
 8012a16:	330b      	adds	r3, #11
 8012a18:	781b      	ldrb	r3, [r3, #0]
 8012a1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012a1e:	73fb      	strb	r3, [r7, #15]
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	7bfa      	ldrb	r2, [r7, #15]
 8012a24:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8012a26:	7dbb      	ldrb	r3, [r7, #22]
 8012a28:	2be5      	cmp	r3, #229	@ 0xe5
 8012a2a:	d00e      	beq.n	8012a4a <dir_read+0x80>
 8012a2c:	7dbb      	ldrb	r3, [r7, #22]
 8012a2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8012a30:	d00b      	beq.n	8012a4a <dir_read+0x80>
 8012a32:	7bfb      	ldrb	r3, [r7, #15]
 8012a34:	f023 0320 	bic.w	r3, r3, #32
 8012a38:	2b08      	cmp	r3, #8
 8012a3a:	bf0c      	ite	eq
 8012a3c:	2301      	moveq	r3, #1
 8012a3e:	2300      	movne	r3, #0
 8012a40:	b2db      	uxtb	r3, r3
 8012a42:	461a      	mov	r2, r3
 8012a44:	683b      	ldr	r3, [r7, #0]
 8012a46:	4293      	cmp	r3, r2
 8012a48:	d002      	beq.n	8012a50 <dir_read+0x86>
				ord = 0xFF;
 8012a4a:	23ff      	movs	r3, #255	@ 0xff
 8012a4c:	757b      	strb	r3, [r7, #21]
 8012a4e:	e044      	b.n	8012ada <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8012a50:	7bfb      	ldrb	r3, [r7, #15]
 8012a52:	2b0f      	cmp	r3, #15
 8012a54:	d12f      	bne.n	8012ab6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8012a56:	7dbb      	ldrb	r3, [r7, #22]
 8012a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d00d      	beq.n	8012a7c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	6a1b      	ldr	r3, [r3, #32]
 8012a64:	7b5b      	ldrb	r3, [r3, #13]
 8012a66:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8012a68:	7dbb      	ldrb	r3, [r7, #22]
 8012a6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012a6e:	75bb      	strb	r3, [r7, #22]
 8012a70:	7dbb      	ldrb	r3, [r7, #22]
 8012a72:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	695a      	ldr	r2, [r3, #20]
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012a7c:	7dba      	ldrb	r2, [r7, #22]
 8012a7e:	7d7b      	ldrb	r3, [r7, #21]
 8012a80:	429a      	cmp	r2, r3
 8012a82:	d115      	bne.n	8012ab0 <dir_read+0xe6>
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	6a1b      	ldr	r3, [r3, #32]
 8012a88:	330d      	adds	r3, #13
 8012a8a:	781b      	ldrb	r3, [r3, #0]
 8012a8c:	7d3a      	ldrb	r2, [r7, #20]
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d10e      	bne.n	8012ab0 <dir_read+0xe6>
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	68da      	ldr	r2, [r3, #12]
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	6a1b      	ldr	r3, [r3, #32]
 8012a9a:	4619      	mov	r1, r3
 8012a9c:	4610      	mov	r0, r2
 8012a9e:	f7ff fe19 	bl	80126d4 <pick_lfn>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d003      	beq.n	8012ab0 <dir_read+0xe6>
 8012aa8:	7d7b      	ldrb	r3, [r7, #21]
 8012aaa:	3b01      	subs	r3, #1
 8012aac:	b2db      	uxtb	r3, r3
 8012aae:	e000      	b.n	8012ab2 <dir_read+0xe8>
 8012ab0:	23ff      	movs	r3, #255	@ 0xff
 8012ab2:	757b      	strb	r3, [r7, #21]
 8012ab4:	e011      	b.n	8012ada <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8012ab6:	7d7b      	ldrb	r3, [r7, #21]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d109      	bne.n	8012ad0 <dir_read+0x106>
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	6a1b      	ldr	r3, [r3, #32]
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7ff ff61 	bl	8012988 <sum_sfn>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	461a      	mov	r2, r3
 8012aca:	7d3b      	ldrb	r3, [r7, #20]
 8012acc:	4293      	cmp	r3, r2
 8012ace:	d015      	beq.n	8012afc <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8012ad6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8012ad8:	e010      	b.n	8012afc <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012ada:	2100      	movs	r1, #0
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f7ff fc3d 	bl	801235c <dir_next>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012ae6:	7dfb      	ldrb	r3, [r7, #23]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d109      	bne.n	8012b00 <dir_read+0x136>
	while (dp->sect) {
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	69db      	ldr	r3, [r3, #28]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	f47f af79 	bne.w	80129e8 <dir_read+0x1e>
 8012af6:	e004      	b.n	8012b02 <dir_read+0x138>
		if (res != FR_OK) break;
 8012af8:	bf00      	nop
 8012afa:	e002      	b.n	8012b02 <dir_read+0x138>
					break;
 8012afc:	bf00      	nop
 8012afe:	e000      	b.n	8012b02 <dir_read+0x138>
		if (res != FR_OK) break;
 8012b00:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012b02:	7dfb      	ldrb	r3, [r7, #23]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d002      	beq.n	8012b0e <dir_read+0x144>
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	61da      	str	r2, [r3, #28]
	return res;
 8012b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b10:	4618      	mov	r0, r3
 8012b12:	3718      	adds	r7, #24
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}

08012b18 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b086      	sub	sp, #24
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012b26:	2100      	movs	r1, #0
 8012b28:	6878      	ldr	r0, [r7, #4]
 8012b2a:	f7ff fb9c 	bl	8012266 <dir_sdi>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012b32:	7dfb      	ldrb	r3, [r7, #23]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d001      	beq.n	8012b3c <dir_find+0x24>
 8012b38:	7dfb      	ldrb	r3, [r7, #23]
 8012b3a:	e0a9      	b.n	8012c90 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012b3c:	23ff      	movs	r3, #255	@ 0xff
 8012b3e:	753b      	strb	r3, [r7, #20]
 8012b40:	7d3b      	ldrb	r3, [r7, #20]
 8012b42:	757b      	strb	r3, [r7, #21]
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f04f 32ff 	mov.w	r2, #4294967295
 8012b4a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	69db      	ldr	r3, [r3, #28]
 8012b50:	4619      	mov	r1, r3
 8012b52:	6938      	ldr	r0, [r7, #16]
 8012b54:	f7ff f80a 	bl	8011b6c <move_window>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012b5c:	7dfb      	ldrb	r3, [r7, #23]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	f040 8090 	bne.w	8012c84 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	6a1b      	ldr	r3, [r3, #32]
 8012b68:	781b      	ldrb	r3, [r3, #0]
 8012b6a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012b6c:	7dbb      	ldrb	r3, [r7, #22]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d102      	bne.n	8012b78 <dir_find+0x60>
 8012b72:	2304      	movs	r3, #4
 8012b74:	75fb      	strb	r3, [r7, #23]
 8012b76:	e08a      	b.n	8012c8e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	6a1b      	ldr	r3, [r3, #32]
 8012b7c:	330b      	adds	r3, #11
 8012b7e:	781b      	ldrb	r3, [r3, #0]
 8012b80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012b84:	73fb      	strb	r3, [r7, #15]
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	7bfa      	ldrb	r2, [r7, #15]
 8012b8a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8012b8c:	7dbb      	ldrb	r3, [r7, #22]
 8012b8e:	2be5      	cmp	r3, #229	@ 0xe5
 8012b90:	d007      	beq.n	8012ba2 <dir_find+0x8a>
 8012b92:	7bfb      	ldrb	r3, [r7, #15]
 8012b94:	f003 0308 	and.w	r3, r3, #8
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d009      	beq.n	8012bb0 <dir_find+0x98>
 8012b9c:	7bfb      	ldrb	r3, [r7, #15]
 8012b9e:	2b0f      	cmp	r3, #15
 8012ba0:	d006      	beq.n	8012bb0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012ba2:	23ff      	movs	r3, #255	@ 0xff
 8012ba4:	757b      	strb	r3, [r7, #21]
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8012bac:	631a      	str	r2, [r3, #48]	@ 0x30
 8012bae:	e05e      	b.n	8012c6e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012bb0:	7bfb      	ldrb	r3, [r7, #15]
 8012bb2:	2b0f      	cmp	r3, #15
 8012bb4:	d136      	bne.n	8012c24 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d154      	bne.n	8012c6e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8012bc4:	7dbb      	ldrb	r3, [r7, #22]
 8012bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d00d      	beq.n	8012bea <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	6a1b      	ldr	r3, [r3, #32]
 8012bd2:	7b5b      	ldrb	r3, [r3, #13]
 8012bd4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8012bd6:	7dbb      	ldrb	r3, [r7, #22]
 8012bd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012bdc:	75bb      	strb	r3, [r7, #22]
 8012bde:	7dbb      	ldrb	r3, [r7, #22]
 8012be0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	695a      	ldr	r2, [r3, #20]
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012bea:	7dba      	ldrb	r2, [r7, #22]
 8012bec:	7d7b      	ldrb	r3, [r7, #21]
 8012bee:	429a      	cmp	r2, r3
 8012bf0:	d115      	bne.n	8012c1e <dir_find+0x106>
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	6a1b      	ldr	r3, [r3, #32]
 8012bf6:	330d      	adds	r3, #13
 8012bf8:	781b      	ldrb	r3, [r3, #0]
 8012bfa:	7d3a      	ldrb	r2, [r7, #20]
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	d10e      	bne.n	8012c1e <dir_find+0x106>
 8012c00:	693b      	ldr	r3, [r7, #16]
 8012c02:	68da      	ldr	r2, [r3, #12]
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6a1b      	ldr	r3, [r3, #32]
 8012c08:	4619      	mov	r1, r3
 8012c0a:	4610      	mov	r0, r2
 8012c0c:	f7ff fcf2 	bl	80125f4 <cmp_lfn>
 8012c10:	4603      	mov	r3, r0
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d003      	beq.n	8012c1e <dir_find+0x106>
 8012c16:	7d7b      	ldrb	r3, [r7, #21]
 8012c18:	3b01      	subs	r3, #1
 8012c1a:	b2db      	uxtb	r3, r3
 8012c1c:	e000      	b.n	8012c20 <dir_find+0x108>
 8012c1e:	23ff      	movs	r3, #255	@ 0xff
 8012c20:	757b      	strb	r3, [r7, #21]
 8012c22:	e024      	b.n	8012c6e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012c24:	7d7b      	ldrb	r3, [r7, #21]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d109      	bne.n	8012c3e <dir_find+0x126>
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	6a1b      	ldr	r3, [r3, #32]
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7ff feaa 	bl	8012988 <sum_sfn>
 8012c34:	4603      	mov	r3, r0
 8012c36:	461a      	mov	r2, r3
 8012c38:	7d3b      	ldrb	r3, [r7, #20]
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	d024      	beq.n	8012c88 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012c44:	f003 0301 	and.w	r3, r3, #1
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d10a      	bne.n	8012c62 <dir_find+0x14a>
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	6a18      	ldr	r0, [r3, #32]
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	3324      	adds	r3, #36	@ 0x24
 8012c54:	220b      	movs	r2, #11
 8012c56:	4619      	mov	r1, r3
 8012c58:	f7fe fd95 	bl	8011786 <mem_cmp>
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d014      	beq.n	8012c8c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012c62:	23ff      	movs	r3, #255	@ 0xff
 8012c64:	757b      	strb	r3, [r7, #21]
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	f04f 32ff 	mov.w	r2, #4294967295
 8012c6c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012c6e:	2100      	movs	r1, #0
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f7ff fb73 	bl	801235c <dir_next>
 8012c76:	4603      	mov	r3, r0
 8012c78:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012c7a:	7dfb      	ldrb	r3, [r7, #23]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	f43f af65 	beq.w	8012b4c <dir_find+0x34>
 8012c82:	e004      	b.n	8012c8e <dir_find+0x176>
		if (res != FR_OK) break;
 8012c84:	bf00      	nop
 8012c86:	e002      	b.n	8012c8e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012c88:	bf00      	nop
 8012c8a:	e000      	b.n	8012c8e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012c8c:	bf00      	nop

	return res;
 8012c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c90:	4618      	mov	r0, r3
 8012c92:	3718      	adds	r7, #24
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd80      	pop	{r7, pc}

08012c98 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b08c      	sub	sp, #48	@ 0x30
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012cac:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d001      	beq.n	8012cb8 <dir_register+0x20>
 8012cb4:	2306      	movs	r3, #6
 8012cb6:	e0e0      	b.n	8012e7a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8012cb8:	2300      	movs	r3, #0
 8012cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8012cbc:	e002      	b.n	8012cc4 <dir_register+0x2c>
 8012cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cc0:	3301      	adds	r3, #1
 8012cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8012cc4:	69fb      	ldr	r3, [r7, #28]
 8012cc6:	68da      	ldr	r2, [r3, #12]
 8012cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cca:	005b      	lsls	r3, r3, #1
 8012ccc:	4413      	add	r3, r2
 8012cce:	881b      	ldrh	r3, [r3, #0]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d1f4      	bne.n	8012cbe <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8012cda:	f107 030c 	add.w	r3, r7, #12
 8012cde:	220c      	movs	r2, #12
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7fe fd14 	bl	801170e <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012ce6:	7dfb      	ldrb	r3, [r7, #23]
 8012ce8:	f003 0301 	and.w	r3, r3, #1
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d032      	beq.n	8012d56 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2240      	movs	r2, #64	@ 0x40
 8012cf4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8012cf8:	2301      	movs	r3, #1
 8012cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012cfc:	e016      	b.n	8012d2c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8012d04:	69fb      	ldr	r3, [r7, #28]
 8012d06:	68da      	ldr	r2, [r3, #12]
 8012d08:	f107 010c 	add.w	r1, r7, #12
 8012d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d0e:	f7ff fdad 	bl	801286c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8012d12:	6878      	ldr	r0, [r7, #4]
 8012d14:	f7ff ff00 	bl	8012b18 <dir_find>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8012d1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d106      	bne.n	8012d34 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8012d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d28:	3301      	adds	r3, #1
 8012d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d2e:	2b63      	cmp	r3, #99	@ 0x63
 8012d30:	d9e5      	bls.n	8012cfe <dir_register+0x66>
 8012d32:	e000      	b.n	8012d36 <dir_register+0x9e>
			if (res != FR_OK) break;
 8012d34:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8012d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d38:	2b64      	cmp	r3, #100	@ 0x64
 8012d3a:	d101      	bne.n	8012d40 <dir_register+0xa8>
 8012d3c:	2307      	movs	r3, #7
 8012d3e:	e09c      	b.n	8012e7a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8012d40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012d44:	2b04      	cmp	r3, #4
 8012d46:	d002      	beq.n	8012d4e <dir_register+0xb6>
 8012d48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012d4c:	e095      	b.n	8012e7a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8012d4e:	7dfa      	ldrb	r2, [r7, #23]
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8012d56:	7dfb      	ldrb	r3, [r7, #23]
 8012d58:	f003 0302 	and.w	r3, r3, #2
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d007      	beq.n	8012d70 <dir_register+0xd8>
 8012d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d62:	330c      	adds	r3, #12
 8012d64:	4a47      	ldr	r2, [pc, #284]	@ (8012e84 <dir_register+0x1ec>)
 8012d66:	fba2 2303 	umull	r2, r3, r2, r3
 8012d6a:	089b      	lsrs	r3, r3, #2
 8012d6c:	3301      	adds	r3, #1
 8012d6e:	e000      	b.n	8012d72 <dir_register+0xda>
 8012d70:	2301      	movs	r3, #1
 8012d72:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8012d74:	6a39      	ldr	r1, [r7, #32]
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f7ff fbb5 	bl	80124e6 <dir_alloc>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8012d82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d148      	bne.n	8012e1c <dir_register+0x184>
 8012d8a:	6a3b      	ldr	r3, [r7, #32]
 8012d8c:	3b01      	subs	r3, #1
 8012d8e:	623b      	str	r3, [r7, #32]
 8012d90:	6a3b      	ldr	r3, [r7, #32]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d042      	beq.n	8012e1c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	695a      	ldr	r2, [r3, #20]
 8012d9a:	6a3b      	ldr	r3, [r7, #32]
 8012d9c:	015b      	lsls	r3, r3, #5
 8012d9e:	1ad3      	subs	r3, r2, r3
 8012da0:	4619      	mov	r1, r3
 8012da2:	6878      	ldr	r0, [r7, #4]
 8012da4:	f7ff fa5f 	bl	8012266 <dir_sdi>
 8012da8:	4603      	mov	r3, r0
 8012daa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8012dae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d132      	bne.n	8012e1c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	3324      	adds	r3, #36	@ 0x24
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7ff fde4 	bl	8012988 <sum_sfn>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	69db      	ldr	r3, [r3, #28]
 8012dc8:	4619      	mov	r1, r3
 8012dca:	69f8      	ldr	r0, [r7, #28]
 8012dcc:	f7fe fece 	bl	8011b6c <move_window>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8012dd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d11d      	bne.n	8012e1a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8012dde:	69fb      	ldr	r3, [r7, #28]
 8012de0:	68d8      	ldr	r0, [r3, #12]
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	6a19      	ldr	r1, [r3, #32]
 8012de6:	6a3b      	ldr	r3, [r7, #32]
 8012de8:	b2da      	uxtb	r2, r3
 8012dea:	7efb      	ldrb	r3, [r7, #27]
 8012dec:	f7ff fcd6 	bl	801279c <put_lfn>
				fs->wflag = 1;
 8012df0:	69fb      	ldr	r3, [r7, #28]
 8012df2:	2201      	movs	r2, #1
 8012df4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8012df6:	2100      	movs	r1, #0
 8012df8:	6878      	ldr	r0, [r7, #4]
 8012dfa:	f7ff faaf 	bl	801235c <dir_next>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8012e04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d107      	bne.n	8012e1c <dir_register+0x184>
 8012e0c:	6a3b      	ldr	r3, [r7, #32]
 8012e0e:	3b01      	subs	r3, #1
 8012e10:	623b      	str	r3, [r7, #32]
 8012e12:	6a3b      	ldr	r3, [r7, #32]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d1d5      	bne.n	8012dc4 <dir_register+0x12c>
 8012e18:	e000      	b.n	8012e1c <dir_register+0x184>
				if (res != FR_OK) break;
 8012e1a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012e1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d128      	bne.n	8012e76 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	69db      	ldr	r3, [r3, #28]
 8012e28:	4619      	mov	r1, r3
 8012e2a:	69f8      	ldr	r0, [r7, #28]
 8012e2c:	f7fe fe9e 	bl	8011b6c <move_window>
 8012e30:	4603      	mov	r3, r0
 8012e32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8012e36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d11b      	bne.n	8012e76 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	6a1b      	ldr	r3, [r3, #32]
 8012e42:	2220      	movs	r2, #32
 8012e44:	2100      	movs	r1, #0
 8012e46:	4618      	mov	r0, r3
 8012e48:	f7fe fc82 	bl	8011750 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	6a18      	ldr	r0, [r3, #32]
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	3324      	adds	r3, #36	@ 0x24
 8012e54:	220b      	movs	r2, #11
 8012e56:	4619      	mov	r1, r3
 8012e58:	f7fe fc59 	bl	801170e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	6a1b      	ldr	r3, [r3, #32]
 8012e66:	330c      	adds	r3, #12
 8012e68:	f002 0218 	and.w	r2, r2, #24
 8012e6c:	b2d2      	uxtb	r2, r2
 8012e6e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8012e70:	69fb      	ldr	r3, [r7, #28]
 8012e72:	2201      	movs	r2, #1
 8012e74:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012e76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	3730      	adds	r7, #48	@ 0x30
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bd80      	pop	{r7, pc}
 8012e82:	bf00      	nop
 8012e84:	4ec4ec4f 	.word	0x4ec4ec4f

08012e88 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b088      	sub	sp, #32
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012e98:	683b      	ldr	r3, [r7, #0]
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	69db      	ldr	r3, [r3, #28]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	f000 80ca 	beq.w	801303c <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012eb0:	d032      	beq.n	8012f18 <get_fileinfo+0x90>
			i = j = 0;
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	61bb      	str	r3, [r7, #24]
 8012eb6:	69bb      	ldr	r3, [r7, #24]
 8012eb8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8012eba:	e01b      	b.n	8012ef4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8012ebc:	89fb      	ldrh	r3, [r7, #14]
 8012ebe:	2100      	movs	r1, #0
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f001 fe43 	bl	8014b4c <ff_convert>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8012eca:	89fb      	ldrh	r3, [r7, #14]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d102      	bne.n	8012ed6 <get_fileinfo+0x4e>
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	61fb      	str	r3, [r7, #28]
 8012ed4:	e01a      	b.n	8012f0c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8012ed6:	69fb      	ldr	r3, [r7, #28]
 8012ed8:	2bfe      	cmp	r3, #254	@ 0xfe
 8012eda:	d902      	bls.n	8012ee2 <get_fileinfo+0x5a>
 8012edc:	2300      	movs	r3, #0
 8012ede:	61fb      	str	r3, [r7, #28]
 8012ee0:	e014      	b.n	8012f0c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8012ee2:	69fb      	ldr	r3, [r7, #28]
 8012ee4:	1c5a      	adds	r2, r3, #1
 8012ee6:	61fa      	str	r2, [r7, #28]
 8012ee8:	89fa      	ldrh	r2, [r7, #14]
 8012eea:	b2d1      	uxtb	r1, r2
 8012eec:	683a      	ldr	r2, [r7, #0]
 8012eee:	4413      	add	r3, r2
 8012ef0:	460a      	mov	r2, r1
 8012ef2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8012ef4:	693b      	ldr	r3, [r7, #16]
 8012ef6:	68da      	ldr	r2, [r3, #12]
 8012ef8:	69bb      	ldr	r3, [r7, #24]
 8012efa:	1c59      	adds	r1, r3, #1
 8012efc:	61b9      	str	r1, [r7, #24]
 8012efe:	005b      	lsls	r3, r3, #1
 8012f00:	4413      	add	r3, r2
 8012f02:	881b      	ldrh	r3, [r3, #0]
 8012f04:	81fb      	strh	r3, [r7, #14]
 8012f06:	89fb      	ldrh	r3, [r7, #14]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d1d7      	bne.n	8012ebc <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8012f0c:	683a      	ldr	r2, [r7, #0]
 8012f0e:	69fb      	ldr	r3, [r7, #28]
 8012f10:	4413      	add	r3, r2
 8012f12:	3316      	adds	r3, #22
 8012f14:	2200      	movs	r2, #0
 8012f16:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8012f18:	2300      	movs	r3, #0
 8012f1a:	61bb      	str	r3, [r7, #24]
 8012f1c:	69bb      	ldr	r3, [r7, #24]
 8012f1e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8012f20:	683a      	ldr	r2, [r7, #0]
 8012f22:	69fb      	ldr	r3, [r7, #28]
 8012f24:	4413      	add	r3, r2
 8012f26:	3316      	adds	r3, #22
 8012f28:	781b      	ldrb	r3, [r3, #0]
 8012f2a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8012f2c:	e04d      	b.n	8012fca <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	6a1a      	ldr	r2, [r3, #32]
 8012f32:	69fb      	ldr	r3, [r7, #28]
 8012f34:	1c59      	adds	r1, r3, #1
 8012f36:	61f9      	str	r1, [r7, #28]
 8012f38:	4413      	add	r3, r2
 8012f3a:	781b      	ldrb	r3, [r3, #0]
 8012f3c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8012f3e:	7dfb      	ldrb	r3, [r7, #23]
 8012f40:	2b20      	cmp	r3, #32
 8012f42:	d041      	beq.n	8012fc8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8012f44:	7dfb      	ldrb	r3, [r7, #23]
 8012f46:	2b05      	cmp	r3, #5
 8012f48:	d101      	bne.n	8012f4e <get_fileinfo+0xc6>
 8012f4a:	23e5      	movs	r3, #229	@ 0xe5
 8012f4c:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8012f4e:	69fb      	ldr	r3, [r7, #28]
 8012f50:	2b09      	cmp	r3, #9
 8012f52:	d10f      	bne.n	8012f74 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8012f54:	89bb      	ldrh	r3, [r7, #12]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d105      	bne.n	8012f66 <get_fileinfo+0xde>
 8012f5a:	683a      	ldr	r2, [r7, #0]
 8012f5c:	69bb      	ldr	r3, [r7, #24]
 8012f5e:	4413      	add	r3, r2
 8012f60:	3316      	adds	r3, #22
 8012f62:	222e      	movs	r2, #46	@ 0x2e
 8012f64:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8012f66:	69bb      	ldr	r3, [r7, #24]
 8012f68:	1c5a      	adds	r2, r3, #1
 8012f6a:	61ba      	str	r2, [r7, #24]
 8012f6c:	683a      	ldr	r2, [r7, #0]
 8012f6e:	4413      	add	r3, r2
 8012f70:	222e      	movs	r2, #46	@ 0x2e
 8012f72:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8012f74:	683a      	ldr	r2, [r7, #0]
 8012f76:	69bb      	ldr	r3, [r7, #24]
 8012f78:	4413      	add	r3, r2
 8012f7a:	3309      	adds	r3, #9
 8012f7c:	7dfa      	ldrb	r2, [r7, #23]
 8012f7e:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8012f80:	89bb      	ldrh	r3, [r7, #12]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d11c      	bne.n	8012fc0 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8012f86:	7dfb      	ldrb	r3, [r7, #23]
 8012f88:	2b40      	cmp	r3, #64	@ 0x40
 8012f8a:	d913      	bls.n	8012fb4 <get_fileinfo+0x12c>
 8012f8c:	7dfb      	ldrb	r3, [r7, #23]
 8012f8e:	2b5a      	cmp	r3, #90	@ 0x5a
 8012f90:	d810      	bhi.n	8012fb4 <get_fileinfo+0x12c>
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	6a1b      	ldr	r3, [r3, #32]
 8012f96:	330c      	adds	r3, #12
 8012f98:	781b      	ldrb	r3, [r3, #0]
 8012f9a:	461a      	mov	r2, r3
 8012f9c:	69fb      	ldr	r3, [r7, #28]
 8012f9e:	2b08      	cmp	r3, #8
 8012fa0:	d901      	bls.n	8012fa6 <get_fileinfo+0x11e>
 8012fa2:	2310      	movs	r3, #16
 8012fa4:	e000      	b.n	8012fa8 <get_fileinfo+0x120>
 8012fa6:	2308      	movs	r3, #8
 8012fa8:	4013      	ands	r3, r2
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d002      	beq.n	8012fb4 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 8012fae:	7dfb      	ldrb	r3, [r7, #23]
 8012fb0:	3320      	adds	r3, #32
 8012fb2:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8012fb4:	683a      	ldr	r2, [r7, #0]
 8012fb6:	69bb      	ldr	r3, [r7, #24]
 8012fb8:	4413      	add	r3, r2
 8012fba:	3316      	adds	r3, #22
 8012fbc:	7dfa      	ldrb	r2, [r7, #23]
 8012fbe:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8012fc0:	69bb      	ldr	r3, [r7, #24]
 8012fc2:	3301      	adds	r3, #1
 8012fc4:	61bb      	str	r3, [r7, #24]
 8012fc6:	e000      	b.n	8012fca <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8012fc8:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8012fca:	69fb      	ldr	r3, [r7, #28]
 8012fcc:	2b0a      	cmp	r3, #10
 8012fce:	d9ae      	bls.n	8012f2e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8012fd0:	89bb      	ldrh	r3, [r7, #12]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d10d      	bne.n	8012ff2 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 8012fd6:	683a      	ldr	r2, [r7, #0]
 8012fd8:	69bb      	ldr	r3, [r7, #24]
 8012fda:	4413      	add	r3, r2
 8012fdc:	3316      	adds	r3, #22
 8012fde:	2200      	movs	r2, #0
 8012fe0:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	6a1b      	ldr	r3, [r3, #32]
 8012fe6:	330c      	adds	r3, #12
 8012fe8:	781b      	ldrb	r3, [r3, #0]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d101      	bne.n	8012ff2 <get_fileinfo+0x16a>
 8012fee:	2300      	movs	r3, #0
 8012ff0:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8012ff2:	683a      	ldr	r2, [r7, #0]
 8012ff4:	69bb      	ldr	r3, [r7, #24]
 8012ff6:	4413      	add	r3, r2
 8012ff8:	3309      	adds	r3, #9
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	6a1b      	ldr	r3, [r3, #32]
 8013002:	7ada      	ldrb	r2, [r3, #11]
 8013004:	683b      	ldr	r3, [r7, #0]
 8013006:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	6a1b      	ldr	r3, [r3, #32]
 801300c:	331c      	adds	r3, #28
 801300e:	4618      	mov	r0, r3
 8013010:	f7fe fb13 	bl	801163a <ld_dword>
 8013014:	4602      	mov	r2, r0
 8013016:	683b      	ldr	r3, [r7, #0]
 8013018:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	6a1b      	ldr	r3, [r3, #32]
 801301e:	3316      	adds	r3, #22
 8013020:	4618      	mov	r0, r3
 8013022:	f7fe fb0a 	bl	801163a <ld_dword>
 8013026:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8013028:	68bb      	ldr	r3, [r7, #8]
 801302a:	b29a      	uxth	r2, r3
 801302c:	683b      	ldr	r3, [r7, #0]
 801302e:	80da      	strh	r2, [r3, #6]
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	0c1b      	lsrs	r3, r3, #16
 8013034:	b29a      	uxth	r2, r3
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	809a      	strh	r2, [r3, #4]
 801303a:	e000      	b.n	801303e <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801303c:	bf00      	nop
}
 801303e:	3720      	adds	r7, #32
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}

08013044 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b08a      	sub	sp, #40	@ 0x28
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
 801304c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	613b      	str	r3, [r7, #16]
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	68db      	ldr	r3, [r3, #12]
 801305a:	60fb      	str	r3, [r7, #12]
 801305c:	2300      	movs	r3, #0
 801305e:	617b      	str	r3, [r7, #20]
 8013060:	697b      	ldr	r3, [r7, #20]
 8013062:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8013064:	69bb      	ldr	r3, [r7, #24]
 8013066:	1c5a      	adds	r2, r3, #1
 8013068:	61ba      	str	r2, [r7, #24]
 801306a:	693a      	ldr	r2, [r7, #16]
 801306c:	4413      	add	r3, r2
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8013072:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013074:	2b1f      	cmp	r3, #31
 8013076:	d940      	bls.n	80130fa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8013078:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801307a:	2b2f      	cmp	r3, #47	@ 0x2f
 801307c:	d006      	beq.n	801308c <create_name+0x48>
 801307e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013080:	2b5c      	cmp	r3, #92	@ 0x5c
 8013082:	d110      	bne.n	80130a6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013084:	e002      	b.n	801308c <create_name+0x48>
 8013086:	69bb      	ldr	r3, [r7, #24]
 8013088:	3301      	adds	r3, #1
 801308a:	61bb      	str	r3, [r7, #24]
 801308c:	693a      	ldr	r2, [r7, #16]
 801308e:	69bb      	ldr	r3, [r7, #24]
 8013090:	4413      	add	r3, r2
 8013092:	781b      	ldrb	r3, [r3, #0]
 8013094:	2b2f      	cmp	r3, #47	@ 0x2f
 8013096:	d0f6      	beq.n	8013086 <create_name+0x42>
 8013098:	693a      	ldr	r2, [r7, #16]
 801309a:	69bb      	ldr	r3, [r7, #24]
 801309c:	4413      	add	r3, r2
 801309e:	781b      	ldrb	r3, [r3, #0]
 80130a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80130a2:	d0f0      	beq.n	8013086 <create_name+0x42>
			break;
 80130a4:	e02a      	b.n	80130fc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80130a6:	697b      	ldr	r3, [r7, #20]
 80130a8:	2bfe      	cmp	r3, #254	@ 0xfe
 80130aa:	d901      	bls.n	80130b0 <create_name+0x6c>
 80130ac:	2306      	movs	r3, #6
 80130ae:	e17d      	b.n	80133ac <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80130b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80130b2:	b2db      	uxtb	r3, r3
 80130b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80130b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80130b8:	2101      	movs	r1, #1
 80130ba:	4618      	mov	r0, r3
 80130bc:	f001 fd46 	bl	8014b4c <ff_convert>
 80130c0:	4603      	mov	r3, r0
 80130c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80130c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d101      	bne.n	80130ce <create_name+0x8a>
 80130ca:	2306      	movs	r3, #6
 80130cc:	e16e      	b.n	80133ac <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80130ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80130d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80130d2:	d809      	bhi.n	80130e8 <create_name+0xa4>
 80130d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80130d6:	4619      	mov	r1, r3
 80130d8:	488d      	ldr	r0, [pc, #564]	@ (8013310 <create_name+0x2cc>)
 80130da:	f7fe fb7b 	bl	80117d4 <chk_chr>
 80130de:	4603      	mov	r3, r0
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d001      	beq.n	80130e8 <create_name+0xa4>
 80130e4:	2306      	movs	r3, #6
 80130e6:	e161      	b.n	80133ac <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80130e8:	697b      	ldr	r3, [r7, #20]
 80130ea:	1c5a      	adds	r2, r3, #1
 80130ec:	617a      	str	r2, [r7, #20]
 80130ee:	005b      	lsls	r3, r3, #1
 80130f0:	68fa      	ldr	r2, [r7, #12]
 80130f2:	4413      	add	r3, r2
 80130f4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80130f6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80130f8:	e7b4      	b.n	8013064 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80130fa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80130fc:	693a      	ldr	r2, [r7, #16]
 80130fe:	69bb      	ldr	r3, [r7, #24]
 8013100:	441a      	add	r2, r3
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013106:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013108:	2b1f      	cmp	r3, #31
 801310a:	d801      	bhi.n	8013110 <create_name+0xcc>
 801310c:	2304      	movs	r3, #4
 801310e:	e000      	b.n	8013112 <create_name+0xce>
 8013110:	2300      	movs	r3, #0
 8013112:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013116:	e011      	b.n	801313c <create_name+0xf8>
		w = lfn[di - 1];
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801311e:	3b01      	subs	r3, #1
 8013120:	005b      	lsls	r3, r3, #1
 8013122:	68fa      	ldr	r2, [r7, #12]
 8013124:	4413      	add	r3, r2
 8013126:	881b      	ldrh	r3, [r3, #0]
 8013128:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801312a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801312c:	2b20      	cmp	r3, #32
 801312e:	d002      	beq.n	8013136 <create_name+0xf2>
 8013130:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013132:	2b2e      	cmp	r3, #46	@ 0x2e
 8013134:	d106      	bne.n	8013144 <create_name+0x100>
		di--;
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	3b01      	subs	r3, #1
 801313a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801313c:	697b      	ldr	r3, [r7, #20]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d1ea      	bne.n	8013118 <create_name+0xd4>
 8013142:	e000      	b.n	8013146 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8013144:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8013146:	697b      	ldr	r3, [r7, #20]
 8013148:	005b      	lsls	r3, r3, #1
 801314a:	68fa      	ldr	r2, [r7, #12]
 801314c:	4413      	add	r3, r2
 801314e:	2200      	movs	r2, #0
 8013150:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d101      	bne.n	801315c <create_name+0x118>
 8013158:	2306      	movs	r3, #6
 801315a:	e127      	b.n	80133ac <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	3324      	adds	r3, #36	@ 0x24
 8013160:	220b      	movs	r2, #11
 8013162:	2120      	movs	r1, #32
 8013164:	4618      	mov	r0, r3
 8013166:	f7fe faf3 	bl	8011750 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801316a:	2300      	movs	r3, #0
 801316c:	61bb      	str	r3, [r7, #24]
 801316e:	e002      	b.n	8013176 <create_name+0x132>
 8013170:	69bb      	ldr	r3, [r7, #24]
 8013172:	3301      	adds	r3, #1
 8013174:	61bb      	str	r3, [r7, #24]
 8013176:	69bb      	ldr	r3, [r7, #24]
 8013178:	005b      	lsls	r3, r3, #1
 801317a:	68fa      	ldr	r2, [r7, #12]
 801317c:	4413      	add	r3, r2
 801317e:	881b      	ldrh	r3, [r3, #0]
 8013180:	2b20      	cmp	r3, #32
 8013182:	d0f5      	beq.n	8013170 <create_name+0x12c>
 8013184:	69bb      	ldr	r3, [r7, #24]
 8013186:	005b      	lsls	r3, r3, #1
 8013188:	68fa      	ldr	r2, [r7, #12]
 801318a:	4413      	add	r3, r2
 801318c:	881b      	ldrh	r3, [r3, #0]
 801318e:	2b2e      	cmp	r3, #46	@ 0x2e
 8013190:	d0ee      	beq.n	8013170 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8013192:	69bb      	ldr	r3, [r7, #24]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d009      	beq.n	80131ac <create_name+0x168>
 8013198:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801319c:	f043 0303 	orr.w	r3, r3, #3
 80131a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80131a4:	e002      	b.n	80131ac <create_name+0x168>
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	3b01      	subs	r3, #1
 80131aa:	617b      	str	r3, [r7, #20]
 80131ac:	697b      	ldr	r3, [r7, #20]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d009      	beq.n	80131c6 <create_name+0x182>
 80131b2:	697b      	ldr	r3, [r7, #20]
 80131b4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80131b8:	3b01      	subs	r3, #1
 80131ba:	005b      	lsls	r3, r3, #1
 80131bc:	68fa      	ldr	r2, [r7, #12]
 80131be:	4413      	add	r3, r2
 80131c0:	881b      	ldrh	r3, [r3, #0]
 80131c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80131c4:	d1ef      	bne.n	80131a6 <create_name+0x162>

	i = b = 0; ni = 8;
 80131c6:	2300      	movs	r3, #0
 80131c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80131cc:	2300      	movs	r3, #0
 80131ce:	623b      	str	r3, [r7, #32]
 80131d0:	2308      	movs	r3, #8
 80131d2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80131d4:	69bb      	ldr	r3, [r7, #24]
 80131d6:	1c5a      	adds	r2, r3, #1
 80131d8:	61ba      	str	r2, [r7, #24]
 80131da:	005b      	lsls	r3, r3, #1
 80131dc:	68fa      	ldr	r2, [r7, #12]
 80131de:	4413      	add	r3, r2
 80131e0:	881b      	ldrh	r3, [r3, #0]
 80131e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80131e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	f000 8090 	beq.w	801330c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80131ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131ee:	2b20      	cmp	r3, #32
 80131f0:	d006      	beq.n	8013200 <create_name+0x1bc>
 80131f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80131f6:	d10a      	bne.n	801320e <create_name+0x1ca>
 80131f8:	69ba      	ldr	r2, [r7, #24]
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	429a      	cmp	r2, r3
 80131fe:	d006      	beq.n	801320e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8013200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013204:	f043 0303 	orr.w	r3, r3, #3
 8013208:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801320c:	e07d      	b.n	801330a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801320e:	6a3a      	ldr	r2, [r7, #32]
 8013210:	69fb      	ldr	r3, [r7, #28]
 8013212:	429a      	cmp	r2, r3
 8013214:	d203      	bcs.n	801321e <create_name+0x1da>
 8013216:	69ba      	ldr	r2, [r7, #24]
 8013218:	697b      	ldr	r3, [r7, #20]
 801321a:	429a      	cmp	r2, r3
 801321c:	d123      	bne.n	8013266 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801321e:	69fb      	ldr	r3, [r7, #28]
 8013220:	2b0b      	cmp	r3, #11
 8013222:	d106      	bne.n	8013232 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8013224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013228:	f043 0303 	orr.w	r3, r3, #3
 801322c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013230:	e075      	b.n	801331e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8013232:	69ba      	ldr	r2, [r7, #24]
 8013234:	697b      	ldr	r3, [r7, #20]
 8013236:	429a      	cmp	r2, r3
 8013238:	d005      	beq.n	8013246 <create_name+0x202>
 801323a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801323e:	f043 0303 	orr.w	r3, r3, #3
 8013242:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8013246:	69ba      	ldr	r2, [r7, #24]
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	429a      	cmp	r2, r3
 801324c:	d866      	bhi.n	801331c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	61bb      	str	r3, [r7, #24]
 8013252:	2308      	movs	r3, #8
 8013254:	623b      	str	r3, [r7, #32]
 8013256:	230b      	movs	r3, #11
 8013258:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801325a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801325e:	009b      	lsls	r3, r3, #2
 8013260:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013264:	e051      	b.n	801330a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8013266:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013268:	2b7f      	cmp	r3, #127	@ 0x7f
 801326a:	d914      	bls.n	8013296 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 801326c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801326e:	2100      	movs	r1, #0
 8013270:	4618      	mov	r0, r3
 8013272:	f001 fc6b 	bl	8014b4c <ff_convert>
 8013276:	4603      	mov	r3, r0
 8013278:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801327a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801327c:	2b00      	cmp	r3, #0
 801327e:	d004      	beq.n	801328a <create_name+0x246>
 8013280:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013282:	3b80      	subs	r3, #128	@ 0x80
 8013284:	4a23      	ldr	r2, [pc, #140]	@ (8013314 <create_name+0x2d0>)
 8013286:	5cd3      	ldrb	r3, [r2, r3]
 8013288:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801328a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801328e:	f043 0302 	orr.w	r3, r3, #2
 8013292:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8013296:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013298:	2b00      	cmp	r3, #0
 801329a:	d007      	beq.n	80132ac <create_name+0x268>
 801329c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801329e:	4619      	mov	r1, r3
 80132a0:	481d      	ldr	r0, [pc, #116]	@ (8013318 <create_name+0x2d4>)
 80132a2:	f7fe fa97 	bl	80117d4 <chk_chr>
 80132a6:	4603      	mov	r3, r0
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d008      	beq.n	80132be <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80132ac:	235f      	movs	r3, #95	@ 0x5f
 80132ae:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80132b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80132b4:	f043 0303 	orr.w	r3, r3, #3
 80132b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80132bc:	e01b      	b.n	80132f6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80132be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80132c0:	2b40      	cmp	r3, #64	@ 0x40
 80132c2:	d909      	bls.n	80132d8 <create_name+0x294>
 80132c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80132c6:	2b5a      	cmp	r3, #90	@ 0x5a
 80132c8:	d806      	bhi.n	80132d8 <create_name+0x294>
					b |= 2;
 80132ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80132ce:	f043 0302 	orr.w	r3, r3, #2
 80132d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80132d6:	e00e      	b.n	80132f6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80132d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80132da:	2b60      	cmp	r3, #96	@ 0x60
 80132dc:	d90b      	bls.n	80132f6 <create_name+0x2b2>
 80132de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80132e0:	2b7a      	cmp	r3, #122	@ 0x7a
 80132e2:	d808      	bhi.n	80132f6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80132e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80132e8:	f043 0301 	orr.w	r3, r3, #1
 80132ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80132f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80132f2:	3b20      	subs	r3, #32
 80132f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80132f6:	6a3b      	ldr	r3, [r7, #32]
 80132f8:	1c5a      	adds	r2, r3, #1
 80132fa:	623a      	str	r2, [r7, #32]
 80132fc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80132fe:	b2d1      	uxtb	r1, r2
 8013300:	687a      	ldr	r2, [r7, #4]
 8013302:	4413      	add	r3, r2
 8013304:	460a      	mov	r2, r1
 8013306:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 801330a:	e763      	b.n	80131d4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 801330c:	bf00      	nop
 801330e:	e006      	b.n	801331e <create_name+0x2da>
 8013310:	08017830 	.word	0x08017830
 8013314:	080178b8 	.word	0x080178b8
 8013318:	0801783c 	.word	0x0801783c
			if (si > di) break;			/* No extension */
 801331c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8013324:	2be5      	cmp	r3, #229	@ 0xe5
 8013326:	d103      	bne.n	8013330 <create_name+0x2ec>
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2205      	movs	r2, #5
 801332c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8013330:	69fb      	ldr	r3, [r7, #28]
 8013332:	2b08      	cmp	r3, #8
 8013334:	d104      	bne.n	8013340 <create_name+0x2fc>
 8013336:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801333a:	009b      	lsls	r3, r3, #2
 801333c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013340:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013344:	f003 030c 	and.w	r3, r3, #12
 8013348:	2b0c      	cmp	r3, #12
 801334a:	d005      	beq.n	8013358 <create_name+0x314>
 801334c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013350:	f003 0303 	and.w	r3, r3, #3
 8013354:	2b03      	cmp	r3, #3
 8013356:	d105      	bne.n	8013364 <create_name+0x320>
 8013358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801335c:	f043 0302 	orr.w	r3, r3, #2
 8013360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8013364:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013368:	f003 0302 	and.w	r3, r3, #2
 801336c:	2b00      	cmp	r3, #0
 801336e:	d117      	bne.n	80133a0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8013370:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013374:	f003 0303 	and.w	r3, r3, #3
 8013378:	2b01      	cmp	r3, #1
 801337a:	d105      	bne.n	8013388 <create_name+0x344>
 801337c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013380:	f043 0310 	orr.w	r3, r3, #16
 8013384:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8013388:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801338c:	f003 030c 	and.w	r3, r3, #12
 8013390:	2b04      	cmp	r3, #4
 8013392:	d105      	bne.n	80133a0 <create_name+0x35c>
 8013394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013398:	f043 0308 	orr.w	r3, r3, #8
 801339c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80133a6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80133aa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80133ac:	4618      	mov	r0, r3
 80133ae:	3728      	adds	r7, #40	@ 0x28
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}

080133b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b086      	sub	sp, #24
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80133c2:	693b      	ldr	r3, [r7, #16]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80133c8:	e002      	b.n	80133d0 <follow_path+0x1c>
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	3301      	adds	r3, #1
 80133ce:	603b      	str	r3, [r7, #0]
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	781b      	ldrb	r3, [r3, #0]
 80133d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80133d6:	d0f8      	beq.n	80133ca <follow_path+0x16>
 80133d8:	683b      	ldr	r3, [r7, #0]
 80133da:	781b      	ldrb	r3, [r3, #0]
 80133dc:	2b5c      	cmp	r3, #92	@ 0x5c
 80133de:	d0f4      	beq.n	80133ca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80133e0:	693b      	ldr	r3, [r7, #16]
 80133e2:	2200      	movs	r2, #0
 80133e4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	781b      	ldrb	r3, [r3, #0]
 80133ea:	2b1f      	cmp	r3, #31
 80133ec:	d80a      	bhi.n	8013404 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	2280      	movs	r2, #128	@ 0x80
 80133f2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80133f6:	2100      	movs	r1, #0
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f7fe ff34 	bl	8012266 <dir_sdi>
 80133fe:	4603      	mov	r3, r0
 8013400:	75fb      	strb	r3, [r7, #23]
 8013402:	e043      	b.n	801348c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013404:	463b      	mov	r3, r7
 8013406:	4619      	mov	r1, r3
 8013408:	6878      	ldr	r0, [r7, #4]
 801340a:	f7ff fe1b 	bl	8013044 <create_name>
 801340e:	4603      	mov	r3, r0
 8013410:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013412:	7dfb      	ldrb	r3, [r7, #23]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d134      	bne.n	8013482 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013418:	6878      	ldr	r0, [r7, #4]
 801341a:	f7ff fb7d 	bl	8012b18 <dir_find>
 801341e:	4603      	mov	r3, r0
 8013420:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013428:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801342a:	7dfb      	ldrb	r3, [r7, #23]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d00a      	beq.n	8013446 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013430:	7dfb      	ldrb	r3, [r7, #23]
 8013432:	2b04      	cmp	r3, #4
 8013434:	d127      	bne.n	8013486 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013436:	7afb      	ldrb	r3, [r7, #11]
 8013438:	f003 0304 	and.w	r3, r3, #4
 801343c:	2b00      	cmp	r3, #0
 801343e:	d122      	bne.n	8013486 <follow_path+0xd2>
 8013440:	2305      	movs	r3, #5
 8013442:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013444:	e01f      	b.n	8013486 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013446:	7afb      	ldrb	r3, [r7, #11]
 8013448:	f003 0304 	and.w	r3, r3, #4
 801344c:	2b00      	cmp	r3, #0
 801344e:	d11c      	bne.n	801348a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013450:	693b      	ldr	r3, [r7, #16]
 8013452:	799b      	ldrb	r3, [r3, #6]
 8013454:	f003 0310 	and.w	r3, r3, #16
 8013458:	2b00      	cmp	r3, #0
 801345a:	d102      	bne.n	8013462 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801345c:	2305      	movs	r3, #5
 801345e:	75fb      	strb	r3, [r7, #23]
 8013460:	e014      	b.n	801348c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	695b      	ldr	r3, [r3, #20]
 801346c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013470:	4413      	add	r3, r2
 8013472:	4619      	mov	r1, r3
 8013474:	68f8      	ldr	r0, [r7, #12]
 8013476:	f7ff f87d 	bl	8012574 <ld_clust>
 801347a:	4602      	mov	r2, r0
 801347c:	693b      	ldr	r3, [r7, #16]
 801347e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013480:	e7c0      	b.n	8013404 <follow_path+0x50>
			if (res != FR_OK) break;
 8013482:	bf00      	nop
 8013484:	e002      	b.n	801348c <follow_path+0xd8>
				break;
 8013486:	bf00      	nop
 8013488:	e000      	b.n	801348c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801348a:	bf00      	nop
			}
		}
	}

	return res;
 801348c:	7dfb      	ldrb	r3, [r7, #23]
}
 801348e:	4618      	mov	r0, r3
 8013490:	3718      	adds	r7, #24
 8013492:	46bd      	mov	sp, r7
 8013494:	bd80      	pop	{r7, pc}

08013496 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013496:	b480      	push	{r7}
 8013498:	b087      	sub	sp, #28
 801349a:	af00      	add	r7, sp, #0
 801349c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801349e:	f04f 33ff 	mov.w	r3, #4294967295
 80134a2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d031      	beq.n	8013510 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	617b      	str	r3, [r7, #20]
 80134b2:	e002      	b.n	80134ba <get_ldnumber+0x24>
 80134b4:	697b      	ldr	r3, [r7, #20]
 80134b6:	3301      	adds	r3, #1
 80134b8:	617b      	str	r3, [r7, #20]
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	781b      	ldrb	r3, [r3, #0]
 80134be:	2b1f      	cmp	r3, #31
 80134c0:	d903      	bls.n	80134ca <get_ldnumber+0x34>
 80134c2:	697b      	ldr	r3, [r7, #20]
 80134c4:	781b      	ldrb	r3, [r3, #0]
 80134c6:	2b3a      	cmp	r3, #58	@ 0x3a
 80134c8:	d1f4      	bne.n	80134b4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80134ca:	697b      	ldr	r3, [r7, #20]
 80134cc:	781b      	ldrb	r3, [r3, #0]
 80134ce:	2b3a      	cmp	r3, #58	@ 0x3a
 80134d0:	d11c      	bne.n	801350c <get_ldnumber+0x76>
			tp = *path;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	1c5a      	adds	r2, r3, #1
 80134dc:	60fa      	str	r2, [r7, #12]
 80134de:	781b      	ldrb	r3, [r3, #0]
 80134e0:	3b30      	subs	r3, #48	@ 0x30
 80134e2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80134e4:	68bb      	ldr	r3, [r7, #8]
 80134e6:	2b09      	cmp	r3, #9
 80134e8:	d80e      	bhi.n	8013508 <get_ldnumber+0x72>
 80134ea:	68fa      	ldr	r2, [r7, #12]
 80134ec:	697b      	ldr	r3, [r7, #20]
 80134ee:	429a      	cmp	r2, r3
 80134f0:	d10a      	bne.n	8013508 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d107      	bne.n	8013508 <get_ldnumber+0x72>
					vol = (int)i;
 80134f8:	68bb      	ldr	r3, [r7, #8]
 80134fa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	3301      	adds	r3, #1
 8013500:	617b      	str	r3, [r7, #20]
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	697a      	ldr	r2, [r7, #20]
 8013506:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013508:	693b      	ldr	r3, [r7, #16]
 801350a:	e002      	b.n	8013512 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801350c:	2300      	movs	r3, #0
 801350e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013510:	693b      	ldr	r3, [r7, #16]
}
 8013512:	4618      	mov	r0, r3
 8013514:	371c      	adds	r7, #28
 8013516:	46bd      	mov	sp, r7
 8013518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801351c:	4770      	bx	lr
	...

08013520 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b082      	sub	sp, #8
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
 8013528:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	2200      	movs	r2, #0
 801352e:	70da      	strb	r2, [r3, #3]
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f04f 32ff 	mov.w	r2, #4294967295
 8013536:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013538:	6839      	ldr	r1, [r7, #0]
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f7fe fb16 	bl	8011b6c <move_window>
 8013540:	4603      	mov	r3, r0
 8013542:	2b00      	cmp	r3, #0
 8013544:	d001      	beq.n	801354a <check_fs+0x2a>
 8013546:	2304      	movs	r3, #4
 8013548:	e038      	b.n	80135bc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	3334      	adds	r3, #52	@ 0x34
 801354e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013552:	4618      	mov	r0, r3
 8013554:	f7fe f858 	bl	8011608 <ld_word>
 8013558:	4603      	mov	r3, r0
 801355a:	461a      	mov	r2, r3
 801355c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013560:	429a      	cmp	r2, r3
 8013562:	d001      	beq.n	8013568 <check_fs+0x48>
 8013564:	2303      	movs	r3, #3
 8013566:	e029      	b.n	80135bc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801356e:	2be9      	cmp	r3, #233	@ 0xe9
 8013570:	d009      	beq.n	8013586 <check_fs+0x66>
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013578:	2beb      	cmp	r3, #235	@ 0xeb
 801357a:	d11e      	bne.n	80135ba <check_fs+0x9a>
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8013582:	2b90      	cmp	r3, #144	@ 0x90
 8013584:	d119      	bne.n	80135ba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	3334      	adds	r3, #52	@ 0x34
 801358a:	3336      	adds	r3, #54	@ 0x36
 801358c:	4618      	mov	r0, r3
 801358e:	f7fe f854 	bl	801163a <ld_dword>
 8013592:	4603      	mov	r3, r0
 8013594:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013598:	4a0a      	ldr	r2, [pc, #40]	@ (80135c4 <check_fs+0xa4>)
 801359a:	4293      	cmp	r3, r2
 801359c:	d101      	bne.n	80135a2 <check_fs+0x82>
 801359e:	2300      	movs	r3, #0
 80135a0:	e00c      	b.n	80135bc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	3334      	adds	r3, #52	@ 0x34
 80135a6:	3352      	adds	r3, #82	@ 0x52
 80135a8:	4618      	mov	r0, r3
 80135aa:	f7fe f846 	bl	801163a <ld_dword>
 80135ae:	4603      	mov	r3, r0
 80135b0:	4a05      	ldr	r2, [pc, #20]	@ (80135c8 <check_fs+0xa8>)
 80135b2:	4293      	cmp	r3, r2
 80135b4:	d101      	bne.n	80135ba <check_fs+0x9a>
 80135b6:	2300      	movs	r3, #0
 80135b8:	e000      	b.n	80135bc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80135ba:	2302      	movs	r3, #2
}
 80135bc:	4618      	mov	r0, r3
 80135be:	3708      	adds	r7, #8
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}
 80135c4:	00544146 	.word	0x00544146
 80135c8:	33544146 	.word	0x33544146

080135cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b096      	sub	sp, #88	@ 0x58
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	60f8      	str	r0, [r7, #12]
 80135d4:	60b9      	str	r1, [r7, #8]
 80135d6:	4613      	mov	r3, r2
 80135d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	2200      	movs	r2, #0
 80135de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80135e0:	68f8      	ldr	r0, [r7, #12]
 80135e2:	f7ff ff58 	bl	8013496 <get_ldnumber>
 80135e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80135e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	da01      	bge.n	80135f2 <find_volume+0x26>
 80135ee:	230b      	movs	r3, #11
 80135f0:	e22d      	b.n	8013a4e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80135f2:	4aa1      	ldr	r2, [pc, #644]	@ (8013878 <find_volume+0x2ac>)
 80135f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80135f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135fa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80135fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d101      	bne.n	8013606 <find_volume+0x3a>
 8013602:	230c      	movs	r3, #12
 8013604:	e223      	b.n	8013a4e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013606:	68bb      	ldr	r3, [r7, #8]
 8013608:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801360a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801360c:	79fb      	ldrb	r3, [r7, #7]
 801360e:	f023 0301 	bic.w	r3, r3, #1
 8013612:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013616:	781b      	ldrb	r3, [r3, #0]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d01a      	beq.n	8013652 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801361c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801361e:	785b      	ldrb	r3, [r3, #1]
 8013620:	4618      	mov	r0, r3
 8013622:	f7fd ff51 	bl	80114c8 <disk_status>
 8013626:	4603      	mov	r3, r0
 8013628:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801362c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013630:	f003 0301 	and.w	r3, r3, #1
 8013634:	2b00      	cmp	r3, #0
 8013636:	d10c      	bne.n	8013652 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013638:	79fb      	ldrb	r3, [r7, #7]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d007      	beq.n	801364e <find_volume+0x82>
 801363e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013642:	f003 0304 	and.w	r3, r3, #4
 8013646:	2b00      	cmp	r3, #0
 8013648:	d001      	beq.n	801364e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801364a:	230a      	movs	r3, #10
 801364c:	e1ff      	b.n	8013a4e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801364e:	2300      	movs	r3, #0
 8013650:	e1fd      	b.n	8013a4e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013654:	2200      	movs	r2, #0
 8013656:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801365a:	b2da      	uxtb	r2, r3
 801365c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801365e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013662:	785b      	ldrb	r3, [r3, #1]
 8013664:	4618      	mov	r0, r3
 8013666:	f7fd ff49 	bl	80114fc <disk_initialize>
 801366a:	4603      	mov	r3, r0
 801366c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013670:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013674:	f003 0301 	and.w	r3, r3, #1
 8013678:	2b00      	cmp	r3, #0
 801367a:	d001      	beq.n	8013680 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801367c:	2303      	movs	r3, #3
 801367e:	e1e6      	b.n	8013a4e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013680:	79fb      	ldrb	r3, [r7, #7]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d007      	beq.n	8013696 <find_volume+0xca>
 8013686:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801368a:	f003 0304 	and.w	r3, r3, #4
 801368e:	2b00      	cmp	r3, #0
 8013690:	d001      	beq.n	8013696 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013692:	230a      	movs	r3, #10
 8013694:	e1db      	b.n	8013a4e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013696:	2300      	movs	r3, #0
 8013698:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801369a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801369c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801369e:	f7ff ff3f 	bl	8013520 <check_fs>
 80136a2:	4603      	mov	r3, r0
 80136a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80136a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80136ac:	2b02      	cmp	r3, #2
 80136ae:	d149      	bne.n	8013744 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80136b0:	2300      	movs	r3, #0
 80136b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80136b4:	e01e      	b.n	80136f4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80136b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136b8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80136bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80136be:	011b      	lsls	r3, r3, #4
 80136c0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80136c4:	4413      	add	r3, r2
 80136c6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80136c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136ca:	3304      	adds	r3, #4
 80136cc:	781b      	ldrb	r3, [r3, #0]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d006      	beq.n	80136e0 <find_volume+0x114>
 80136d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136d4:	3308      	adds	r3, #8
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7fd ffaf 	bl	801163a <ld_dword>
 80136dc:	4602      	mov	r2, r0
 80136de:	e000      	b.n	80136e2 <find_volume+0x116>
 80136e0:	2200      	movs	r2, #0
 80136e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80136e4:	009b      	lsls	r3, r3, #2
 80136e6:	3358      	adds	r3, #88	@ 0x58
 80136e8:	443b      	add	r3, r7
 80136ea:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80136ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80136f0:	3301      	adds	r3, #1
 80136f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80136f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80136f6:	2b03      	cmp	r3, #3
 80136f8:	d9dd      	bls.n	80136b6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80136fa:	2300      	movs	r3, #0
 80136fc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80136fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013700:	2b00      	cmp	r3, #0
 8013702:	d002      	beq.n	801370a <find_volume+0x13e>
 8013704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013706:	3b01      	subs	r3, #1
 8013708:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801370a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801370c:	009b      	lsls	r3, r3, #2
 801370e:	3358      	adds	r3, #88	@ 0x58
 8013710:	443b      	add	r3, r7
 8013712:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013716:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013718:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801371a:	2b00      	cmp	r3, #0
 801371c:	d005      	beq.n	801372a <find_volume+0x15e>
 801371e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013720:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013722:	f7ff fefd 	bl	8013520 <check_fs>
 8013726:	4603      	mov	r3, r0
 8013728:	e000      	b.n	801372c <find_volume+0x160>
 801372a:	2303      	movs	r3, #3
 801372c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013730:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013734:	2b01      	cmp	r3, #1
 8013736:	d905      	bls.n	8013744 <find_volume+0x178>
 8013738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801373a:	3301      	adds	r3, #1
 801373c:	643b      	str	r3, [r7, #64]	@ 0x40
 801373e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013740:	2b03      	cmp	r3, #3
 8013742:	d9e2      	bls.n	801370a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013744:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013748:	2b04      	cmp	r3, #4
 801374a:	d101      	bne.n	8013750 <find_volume+0x184>
 801374c:	2301      	movs	r3, #1
 801374e:	e17e      	b.n	8013a4e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013750:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013754:	2b01      	cmp	r3, #1
 8013756:	d901      	bls.n	801375c <find_volume+0x190>
 8013758:	230d      	movs	r3, #13
 801375a:	e178      	b.n	8013a4e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801375c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801375e:	3334      	adds	r3, #52	@ 0x34
 8013760:	330b      	adds	r3, #11
 8013762:	4618      	mov	r0, r3
 8013764:	f7fd ff50 	bl	8011608 <ld_word>
 8013768:	4603      	mov	r3, r0
 801376a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801376e:	d001      	beq.n	8013774 <find_volume+0x1a8>
 8013770:	230d      	movs	r3, #13
 8013772:	e16c      	b.n	8013a4e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013776:	3334      	adds	r3, #52	@ 0x34
 8013778:	3316      	adds	r3, #22
 801377a:	4618      	mov	r0, r3
 801377c:	f7fd ff44 	bl	8011608 <ld_word>
 8013780:	4603      	mov	r3, r0
 8013782:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013786:	2b00      	cmp	r3, #0
 8013788:	d106      	bne.n	8013798 <find_volume+0x1cc>
 801378a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801378c:	3334      	adds	r3, #52	@ 0x34
 801378e:	3324      	adds	r3, #36	@ 0x24
 8013790:	4618      	mov	r0, r3
 8013792:	f7fd ff52 	bl	801163a <ld_dword>
 8013796:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8013798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801379a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801379c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801379e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137a0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80137a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80137a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137aa:	789b      	ldrb	r3, [r3, #2]
 80137ac:	2b01      	cmp	r3, #1
 80137ae:	d005      	beq.n	80137bc <find_volume+0x1f0>
 80137b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137b2:	789b      	ldrb	r3, [r3, #2]
 80137b4:	2b02      	cmp	r3, #2
 80137b6:	d001      	beq.n	80137bc <find_volume+0x1f0>
 80137b8:	230d      	movs	r3, #13
 80137ba:	e148      	b.n	8013a4e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80137bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137be:	789b      	ldrb	r3, [r3, #2]
 80137c0:	461a      	mov	r2, r3
 80137c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137c4:	fb02 f303 	mul.w	r3, r2, r3
 80137c8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80137ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80137d0:	461a      	mov	r2, r3
 80137d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80137d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137d8:	895b      	ldrh	r3, [r3, #10]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d008      	beq.n	80137f0 <find_volume+0x224>
 80137de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137e0:	895b      	ldrh	r3, [r3, #10]
 80137e2:	461a      	mov	r2, r3
 80137e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137e6:	895b      	ldrh	r3, [r3, #10]
 80137e8:	3b01      	subs	r3, #1
 80137ea:	4013      	ands	r3, r2
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d001      	beq.n	80137f4 <find_volume+0x228>
 80137f0:	230d      	movs	r3, #13
 80137f2:	e12c      	b.n	8013a4e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80137f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137f6:	3334      	adds	r3, #52	@ 0x34
 80137f8:	3311      	adds	r3, #17
 80137fa:	4618      	mov	r0, r3
 80137fc:	f7fd ff04 	bl	8011608 <ld_word>
 8013800:	4603      	mov	r3, r0
 8013802:	461a      	mov	r2, r3
 8013804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013806:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801380a:	891b      	ldrh	r3, [r3, #8]
 801380c:	f003 030f 	and.w	r3, r3, #15
 8013810:	b29b      	uxth	r3, r3
 8013812:	2b00      	cmp	r3, #0
 8013814:	d001      	beq.n	801381a <find_volume+0x24e>
 8013816:	230d      	movs	r3, #13
 8013818:	e119      	b.n	8013a4e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801381a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801381c:	3334      	adds	r3, #52	@ 0x34
 801381e:	3313      	adds	r3, #19
 8013820:	4618      	mov	r0, r3
 8013822:	f7fd fef1 	bl	8011608 <ld_word>
 8013826:	4603      	mov	r3, r0
 8013828:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801382a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801382c:	2b00      	cmp	r3, #0
 801382e:	d106      	bne.n	801383e <find_volume+0x272>
 8013830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013832:	3334      	adds	r3, #52	@ 0x34
 8013834:	3320      	adds	r3, #32
 8013836:	4618      	mov	r0, r3
 8013838:	f7fd feff 	bl	801163a <ld_dword>
 801383c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801383e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013840:	3334      	adds	r3, #52	@ 0x34
 8013842:	330e      	adds	r3, #14
 8013844:	4618      	mov	r0, r3
 8013846:	f7fd fedf 	bl	8011608 <ld_word>
 801384a:	4603      	mov	r3, r0
 801384c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801384e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013850:	2b00      	cmp	r3, #0
 8013852:	d101      	bne.n	8013858 <find_volume+0x28c>
 8013854:	230d      	movs	r3, #13
 8013856:	e0fa      	b.n	8013a4e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013858:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801385a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801385c:	4413      	add	r3, r2
 801385e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013860:	8912      	ldrh	r2, [r2, #8]
 8013862:	0912      	lsrs	r2, r2, #4
 8013864:	b292      	uxth	r2, r2
 8013866:	4413      	add	r3, r2
 8013868:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801386a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801386c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801386e:	429a      	cmp	r2, r3
 8013870:	d204      	bcs.n	801387c <find_volume+0x2b0>
 8013872:	230d      	movs	r3, #13
 8013874:	e0eb      	b.n	8013a4e <find_volume+0x482>
 8013876:	bf00      	nop
 8013878:	20002b0c 	.word	0x20002b0c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801387c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801387e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013880:	1ad3      	subs	r3, r2, r3
 8013882:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013884:	8952      	ldrh	r2, [r2, #10]
 8013886:	fbb3 f3f2 	udiv	r3, r3, r2
 801388a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801388c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801388e:	2b00      	cmp	r3, #0
 8013890:	d101      	bne.n	8013896 <find_volume+0x2ca>
 8013892:	230d      	movs	r3, #13
 8013894:	e0db      	b.n	8013a4e <find_volume+0x482>
		fmt = FS_FAT32;
 8013896:	2303      	movs	r3, #3
 8013898:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801389e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80138a2:	4293      	cmp	r3, r2
 80138a4:	d802      	bhi.n	80138ac <find_volume+0x2e0>
 80138a6:	2302      	movs	r3, #2
 80138a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80138ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138ae:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80138b2:	4293      	cmp	r3, r2
 80138b4:	d802      	bhi.n	80138bc <find_volume+0x2f0>
 80138b6:	2301      	movs	r3, #1
 80138b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80138bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138be:	1c9a      	adds	r2, r3, #2
 80138c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138c2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80138c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80138c8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80138ca:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80138cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80138ce:	441a      	add	r2, r3
 80138d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138d2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80138d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80138d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138d8:	441a      	add	r2, r3
 80138da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138dc:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80138de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80138e2:	2b03      	cmp	r3, #3
 80138e4:	d11e      	bne.n	8013924 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80138e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138e8:	3334      	adds	r3, #52	@ 0x34
 80138ea:	332a      	adds	r3, #42	@ 0x2a
 80138ec:	4618      	mov	r0, r3
 80138ee:	f7fd fe8b 	bl	8011608 <ld_word>
 80138f2:	4603      	mov	r3, r0
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d001      	beq.n	80138fc <find_volume+0x330>
 80138f8:	230d      	movs	r3, #13
 80138fa:	e0a8      	b.n	8013a4e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80138fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138fe:	891b      	ldrh	r3, [r3, #8]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d001      	beq.n	8013908 <find_volume+0x33c>
 8013904:	230d      	movs	r3, #13
 8013906:	e0a2      	b.n	8013a4e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801390a:	3334      	adds	r3, #52	@ 0x34
 801390c:	332c      	adds	r3, #44	@ 0x2c
 801390e:	4618      	mov	r0, r3
 8013910:	f7fd fe93 	bl	801163a <ld_dword>
 8013914:	4602      	mov	r2, r0
 8013916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013918:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801391a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801391c:	699b      	ldr	r3, [r3, #24]
 801391e:	009b      	lsls	r3, r3, #2
 8013920:	647b      	str	r3, [r7, #68]	@ 0x44
 8013922:	e01f      	b.n	8013964 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013926:	891b      	ldrh	r3, [r3, #8]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d101      	bne.n	8013930 <find_volume+0x364>
 801392c:	230d      	movs	r3, #13
 801392e:	e08e      	b.n	8013a4e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013932:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013934:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013936:	441a      	add	r2, r3
 8013938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801393a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801393c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013940:	2b02      	cmp	r3, #2
 8013942:	d103      	bne.n	801394c <find_volume+0x380>
 8013944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013946:	699b      	ldr	r3, [r3, #24]
 8013948:	005b      	lsls	r3, r3, #1
 801394a:	e00a      	b.n	8013962 <find_volume+0x396>
 801394c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801394e:	699a      	ldr	r2, [r3, #24]
 8013950:	4613      	mov	r3, r2
 8013952:	005b      	lsls	r3, r3, #1
 8013954:	4413      	add	r3, r2
 8013956:	085a      	lsrs	r2, r3, #1
 8013958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801395a:	699b      	ldr	r3, [r3, #24]
 801395c:	f003 0301 	and.w	r3, r3, #1
 8013960:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013962:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013966:	69da      	ldr	r2, [r3, #28]
 8013968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801396a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 801396e:	0a5b      	lsrs	r3, r3, #9
 8013970:	429a      	cmp	r2, r3
 8013972:	d201      	bcs.n	8013978 <find_volume+0x3ac>
 8013974:	230d      	movs	r3, #13
 8013976:	e06a      	b.n	8013a4e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801397a:	f04f 32ff 	mov.w	r2, #4294967295
 801397e:	615a      	str	r2, [r3, #20]
 8013980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013982:	695a      	ldr	r2, [r3, #20]
 8013984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013986:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801398a:	2280      	movs	r2, #128	@ 0x80
 801398c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801398e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013992:	2b03      	cmp	r3, #3
 8013994:	d149      	bne.n	8013a2a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013998:	3334      	adds	r3, #52	@ 0x34
 801399a:	3330      	adds	r3, #48	@ 0x30
 801399c:	4618      	mov	r0, r3
 801399e:	f7fd fe33 	bl	8011608 <ld_word>
 80139a2:	4603      	mov	r3, r0
 80139a4:	2b01      	cmp	r3, #1
 80139a6:	d140      	bne.n	8013a2a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80139a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80139aa:	3301      	adds	r3, #1
 80139ac:	4619      	mov	r1, r3
 80139ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80139b0:	f7fe f8dc 	bl	8011b6c <move_window>
 80139b4:	4603      	mov	r3, r0
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d137      	bne.n	8013a2a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80139ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139bc:	2200      	movs	r2, #0
 80139be:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80139c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139c2:	3334      	adds	r3, #52	@ 0x34
 80139c4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7fd fe1d 	bl	8011608 <ld_word>
 80139ce:	4603      	mov	r3, r0
 80139d0:	461a      	mov	r2, r3
 80139d2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80139d6:	429a      	cmp	r2, r3
 80139d8:	d127      	bne.n	8013a2a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80139da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139dc:	3334      	adds	r3, #52	@ 0x34
 80139de:	4618      	mov	r0, r3
 80139e0:	f7fd fe2b 	bl	801163a <ld_dword>
 80139e4:	4603      	mov	r3, r0
 80139e6:	4a1c      	ldr	r2, [pc, #112]	@ (8013a58 <find_volume+0x48c>)
 80139e8:	4293      	cmp	r3, r2
 80139ea:	d11e      	bne.n	8013a2a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80139ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ee:	3334      	adds	r3, #52	@ 0x34
 80139f0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80139f4:	4618      	mov	r0, r3
 80139f6:	f7fd fe20 	bl	801163a <ld_dword>
 80139fa:	4603      	mov	r3, r0
 80139fc:	4a17      	ldr	r2, [pc, #92]	@ (8013a5c <find_volume+0x490>)
 80139fe:	4293      	cmp	r3, r2
 8013a00:	d113      	bne.n	8013a2a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a04:	3334      	adds	r3, #52	@ 0x34
 8013a06:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f7fd fe15 	bl	801163a <ld_dword>
 8013a10:	4602      	mov	r2, r0
 8013a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a14:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a18:	3334      	adds	r3, #52	@ 0x34
 8013a1a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f7fd fe0b 	bl	801163a <ld_dword>
 8013a24:	4602      	mov	r2, r0
 8013a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a28:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a2c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8013a30:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013a32:	4b0b      	ldr	r3, [pc, #44]	@ (8013a60 <find_volume+0x494>)
 8013a34:	881b      	ldrh	r3, [r3, #0]
 8013a36:	3301      	adds	r3, #1
 8013a38:	b29a      	uxth	r2, r3
 8013a3a:	4b09      	ldr	r3, [pc, #36]	@ (8013a60 <find_volume+0x494>)
 8013a3c:	801a      	strh	r2, [r3, #0]
 8013a3e:	4b08      	ldr	r3, [pc, #32]	@ (8013a60 <find_volume+0x494>)
 8013a40:	881a      	ldrh	r2, [r3, #0]
 8013a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a44:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013a46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013a48:	f7fe f828 	bl	8011a9c <clear_lock>
#endif
	return FR_OK;
 8013a4c:	2300      	movs	r3, #0
}
 8013a4e:	4618      	mov	r0, r3
 8013a50:	3758      	adds	r7, #88	@ 0x58
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd80      	pop	{r7, pc}
 8013a56:	bf00      	nop
 8013a58:	41615252 	.word	0x41615252
 8013a5c:	61417272 	.word	0x61417272
 8013a60:	20002b10 	.word	0x20002b10

08013a64 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b084      	sub	sp, #16
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	6078      	str	r0, [r7, #4]
 8013a6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013a6e:	2309      	movs	r3, #9
 8013a70:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d01c      	beq.n	8013ab2 <validate+0x4e>
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d018      	beq.n	8013ab2 <validate+0x4e>
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	781b      	ldrb	r3, [r3, #0]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d013      	beq.n	8013ab2 <validate+0x4e>
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	889a      	ldrh	r2, [r3, #4]
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	88db      	ldrh	r3, [r3, #6]
 8013a94:	429a      	cmp	r2, r3
 8013a96:	d10c      	bne.n	8013ab2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	785b      	ldrb	r3, [r3, #1]
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f7fd fd12 	bl	80114c8 <disk_status>
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	f003 0301 	and.w	r3, r3, #1
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d101      	bne.n	8013ab2 <validate+0x4e>
			res = FR_OK;
 8013aae:	2300      	movs	r3, #0
 8013ab0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013ab2:	7bfb      	ldrb	r3, [r7, #15]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d102      	bne.n	8013abe <validate+0x5a>
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	e000      	b.n	8013ac0 <validate+0x5c>
 8013abe:	2300      	movs	r3, #0
 8013ac0:	683a      	ldr	r2, [r7, #0]
 8013ac2:	6013      	str	r3, [r2, #0]
	return res;
 8013ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3710      	adds	r7, #16
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}
	...

08013ad0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b088      	sub	sp, #32
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	60f8      	str	r0, [r7, #12]
 8013ad8:	60b9      	str	r1, [r7, #8]
 8013ada:	4613      	mov	r3, r2
 8013adc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013ade:	68bb      	ldr	r3, [r7, #8]
 8013ae0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013ae2:	f107 0310 	add.w	r3, r7, #16
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f7ff fcd5 	bl	8013496 <get_ldnumber>
 8013aec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013aee:	69fb      	ldr	r3, [r7, #28]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	da01      	bge.n	8013af8 <f_mount+0x28>
 8013af4:	230b      	movs	r3, #11
 8013af6:	e02b      	b.n	8013b50 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013af8:	4a17      	ldr	r2, [pc, #92]	@ (8013b58 <f_mount+0x88>)
 8013afa:	69fb      	ldr	r3, [r7, #28]
 8013afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013b02:	69bb      	ldr	r3, [r7, #24]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d005      	beq.n	8013b14 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013b08:	69b8      	ldr	r0, [r7, #24]
 8013b0a:	f7fd ffc7 	bl	8011a9c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013b0e:	69bb      	ldr	r3, [r7, #24]
 8013b10:	2200      	movs	r2, #0
 8013b12:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d002      	beq.n	8013b20 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	2200      	movs	r2, #0
 8013b1e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013b20:	68fa      	ldr	r2, [r7, #12]
 8013b22:	490d      	ldr	r1, [pc, #52]	@ (8013b58 <f_mount+0x88>)
 8013b24:	69fb      	ldr	r3, [r7, #28]
 8013b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d002      	beq.n	8013b36 <f_mount+0x66>
 8013b30:	79fb      	ldrb	r3, [r7, #7]
 8013b32:	2b01      	cmp	r3, #1
 8013b34:	d001      	beq.n	8013b3a <f_mount+0x6a>
 8013b36:	2300      	movs	r3, #0
 8013b38:	e00a      	b.n	8013b50 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013b3a:	f107 010c 	add.w	r1, r7, #12
 8013b3e:	f107 0308 	add.w	r3, r7, #8
 8013b42:	2200      	movs	r2, #0
 8013b44:	4618      	mov	r0, r3
 8013b46:	f7ff fd41 	bl	80135cc <find_volume>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b50:	4618      	mov	r0, r3
 8013b52:	3720      	adds	r7, #32
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}
 8013b58:	20002b0c 	.word	0x20002b0c

08013b5c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b09a      	sub	sp, #104	@ 0x68
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	60f8      	str	r0, [r7, #12]
 8013b64:	60b9      	str	r1, [r7, #8]
 8013b66:	4613      	mov	r3, r2
 8013b68:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d101      	bne.n	8013b74 <f_open+0x18>
 8013b70:	2309      	movs	r3, #9
 8013b72:	e1b9      	b.n	8013ee8 <f_open+0x38c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013b74:	79fb      	ldrb	r3, [r7, #7]
 8013b76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013b7a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013b7c:	79fa      	ldrb	r2, [r7, #7]
 8013b7e:	f107 0110 	add.w	r1, r7, #16
 8013b82:	f107 0308 	add.w	r3, r7, #8
 8013b86:	4618      	mov	r0, r3
 8013b88:	f7ff fd20 	bl	80135cc <find_volume>
 8013b8c:	4603      	mov	r3, r0
 8013b8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8013b92:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	f040 819d 	bne.w	8013ed6 <f_open+0x37a>
		dj.obj.fs = fs;
 8013b9c:	693b      	ldr	r3, [r7, #16]
 8013b9e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8013ba0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8013ba4:	f001 f898 	bl	8014cd8 <ff_memalloc>
 8013ba8:	65b8      	str	r0, [r7, #88]	@ 0x58
 8013baa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d101      	bne.n	8013bb4 <f_open+0x58>
 8013bb0:	2311      	movs	r3, #17
 8013bb2:	e199      	b.n	8013ee8 <f_open+0x38c>
 8013bb4:	693b      	ldr	r3, [r7, #16]
 8013bb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013bb8:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8013bba:	68ba      	ldr	r2, [r7, #8]
 8013bbc:	f107 0314 	add.w	r3, r7, #20
 8013bc0:	4611      	mov	r1, r2
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f7ff fbf6 	bl	80133b4 <follow_path>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013bce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d118      	bne.n	8013c08 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013bd6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013bda:	b25b      	sxtb	r3, r3
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	da03      	bge.n	8013be8 <f_open+0x8c>
				res = FR_INVALID_NAME;
 8013be0:	2306      	movs	r3, #6
 8013be2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013be6:	e00f      	b.n	8013c08 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013be8:	79fb      	ldrb	r3, [r7, #7]
 8013bea:	2b01      	cmp	r3, #1
 8013bec:	bf8c      	ite	hi
 8013bee:	2301      	movhi	r3, #1
 8013bf0:	2300      	movls	r3, #0
 8013bf2:	b2db      	uxtb	r3, r3
 8013bf4:	461a      	mov	r2, r3
 8013bf6:	f107 0314 	add.w	r3, r7, #20
 8013bfa:	4611      	mov	r1, r2
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7fd fe05 	bl	801180c <chk_lock>
 8013c02:	4603      	mov	r3, r0
 8013c04:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013c08:	79fb      	ldrb	r3, [r7, #7]
 8013c0a:	f003 031c 	and.w	r3, r3, #28
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d07f      	beq.n	8013d12 <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 8013c12:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d017      	beq.n	8013c4a <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013c1a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013c1e:	2b04      	cmp	r3, #4
 8013c20:	d10e      	bne.n	8013c40 <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013c22:	f7fd fe4f 	bl	80118c4 <enq_lock>
 8013c26:	4603      	mov	r3, r0
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d006      	beq.n	8013c3a <f_open+0xde>
 8013c2c:	f107 0314 	add.w	r3, r7, #20
 8013c30:	4618      	mov	r0, r3
 8013c32:	f7ff f831 	bl	8012c98 <dir_register>
 8013c36:	4603      	mov	r3, r0
 8013c38:	e000      	b.n	8013c3c <f_open+0xe0>
 8013c3a:	2312      	movs	r3, #18
 8013c3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013c40:	79fb      	ldrb	r3, [r7, #7]
 8013c42:	f043 0308 	orr.w	r3, r3, #8
 8013c46:	71fb      	strb	r3, [r7, #7]
 8013c48:	e010      	b.n	8013c6c <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013c4a:	7ebb      	ldrb	r3, [r7, #26]
 8013c4c:	f003 0311 	and.w	r3, r3, #17
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d003      	beq.n	8013c5c <f_open+0x100>
					res = FR_DENIED;
 8013c54:	2307      	movs	r3, #7
 8013c56:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013c5a:	e007      	b.n	8013c6c <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013c5c:	79fb      	ldrb	r3, [r7, #7]
 8013c5e:	f003 0304 	and.w	r3, r3, #4
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d002      	beq.n	8013c6c <f_open+0x110>
 8013c66:	2308      	movs	r3, #8
 8013c68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013c6c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d168      	bne.n	8013d46 <f_open+0x1ea>
 8013c74:	79fb      	ldrb	r3, [r7, #7]
 8013c76:	f003 0308 	and.w	r3, r3, #8
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d063      	beq.n	8013d46 <f_open+0x1ea>
				dw = GET_FATTIME();
 8013c7e:	f7fc fcb7 	bl	80105f0 <get_fattime>
 8013c82:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c86:	330e      	adds	r3, #14
 8013c88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	f7fd fd13 	bl	80116b6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c92:	3316      	adds	r3, #22
 8013c94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013c96:	4618      	mov	r0, r3
 8013c98:	f7fd fd0d 	bl	80116b6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c9e:	330b      	adds	r3, #11
 8013ca0:	2220      	movs	r2, #32
 8013ca2:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013ca4:	693b      	ldr	r3, [r7, #16]
 8013ca6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013ca8:	4611      	mov	r1, r2
 8013caa:	4618      	mov	r0, r3
 8013cac:	f7fe fc62 	bl	8012574 <ld_clust>
 8013cb0:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013cb2:	693b      	ldr	r3, [r7, #16]
 8013cb4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f7fe fc7a 	bl	80125b2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cc0:	331c      	adds	r3, #28
 8013cc2:	2100      	movs	r1, #0
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	f7fd fcf6 	bl	80116b6 <st_dword>
					fs->wflag = 1;
 8013cca:	693b      	ldr	r3, [r7, #16]
 8013ccc:	2201      	movs	r2, #1
 8013cce:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013cd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d037      	beq.n	8013d46 <f_open+0x1ea>
						dw = fs->winsect;
 8013cd6:	693b      	ldr	r3, [r7, #16]
 8013cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013cda:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8013cdc:	f107 0314 	add.w	r3, r7, #20
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f7fe f98d 	bl	8012004 <remove_chain>
 8013cea:	4603      	mov	r3, r0
 8013cec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8013cf0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d126      	bne.n	8013d46 <f_open+0x1ea>
							res = move_window(fs, dw);
 8013cf8:	693b      	ldr	r3, [r7, #16]
 8013cfa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f7fd ff35 	bl	8011b6c <move_window>
 8013d02:	4603      	mov	r3, r0
 8013d04:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013d08:	693b      	ldr	r3, [r7, #16]
 8013d0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013d0c:	3a01      	subs	r2, #1
 8013d0e:	611a      	str	r2, [r3, #16]
 8013d10:	e019      	b.n	8013d46 <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013d12:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d115      	bne.n	8013d46 <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013d1a:	7ebb      	ldrb	r3, [r7, #26]
 8013d1c:	f003 0310 	and.w	r3, r3, #16
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d003      	beq.n	8013d2c <f_open+0x1d0>
					res = FR_NO_FILE;
 8013d24:	2304      	movs	r3, #4
 8013d26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013d2a:	e00c      	b.n	8013d46 <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013d2c:	79fb      	ldrb	r3, [r7, #7]
 8013d2e:	f003 0302 	and.w	r3, r3, #2
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d007      	beq.n	8013d46 <f_open+0x1ea>
 8013d36:	7ebb      	ldrb	r3, [r7, #26]
 8013d38:	f003 0301 	and.w	r3, r3, #1
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d002      	beq.n	8013d46 <f_open+0x1ea>
						res = FR_DENIED;
 8013d40:	2307      	movs	r3, #7
 8013d42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8013d46:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d126      	bne.n	8013d9c <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013d4e:	79fb      	ldrb	r3, [r7, #7]
 8013d50:	f003 0308 	and.w	r3, r3, #8
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d003      	beq.n	8013d60 <f_open+0x204>
				mode |= FA_MODIFIED;
 8013d58:	79fb      	ldrb	r3, [r7, #7]
 8013d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d5e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013d60:	693b      	ldr	r3, [r7, #16]
 8013d62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8013d68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013d6e:	79fb      	ldrb	r3, [r7, #7]
 8013d70:	2b01      	cmp	r3, #1
 8013d72:	bf8c      	ite	hi
 8013d74:	2301      	movhi	r3, #1
 8013d76:	2300      	movls	r3, #0
 8013d78:	b2db      	uxtb	r3, r3
 8013d7a:	461a      	mov	r2, r3
 8013d7c:	f107 0314 	add.w	r3, r7, #20
 8013d80:	4611      	mov	r1, r2
 8013d82:	4618      	mov	r0, r3
 8013d84:	f7fd fdc0 	bl	8011908 <inc_lock>
 8013d88:	4602      	mov	r2, r0
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	691b      	ldr	r3, [r3, #16]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d102      	bne.n	8013d9c <f_open+0x240>
 8013d96:	2302      	movs	r3, #2
 8013d98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013d9c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	f040 8095 	bne.w	8013ed0 <f_open+0x374>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013da6:	693b      	ldr	r3, [r7, #16]
 8013da8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013daa:	4611      	mov	r1, r2
 8013dac:	4618      	mov	r0, r3
 8013dae:	f7fe fbe1 	bl	8012574 <ld_clust>
 8013db2:	4602      	mov	r2, r0
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013dba:	331c      	adds	r3, #28
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f7fd fc3c 	bl	801163a <ld_dword>
 8013dc2:	4602      	mov	r2, r0
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	2200      	movs	r2, #0
 8013dcc:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013dce:	693a      	ldr	r2, [r7, #16]
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013dd4:	693b      	ldr	r3, [r7, #16]
 8013dd6:	88da      	ldrh	r2, [r3, #6]
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	79fa      	ldrb	r2, [r7, #7]
 8013de0:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	2200      	movs	r2, #0
 8013de6:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	2200      	movs	r2, #0
 8013dec:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	2200      	movs	r2, #0
 8013df2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	3330      	adds	r3, #48	@ 0x30
 8013df8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013dfc:	2100      	movs	r1, #0
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7fd fca6 	bl	8011750 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013e04:	79fb      	ldrb	r3, [r7, #7]
 8013e06:	f003 0320 	and.w	r3, r3, #32
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d060      	beq.n	8013ed0 <f_open+0x374>
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	68db      	ldr	r3, [r3, #12]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d05c      	beq.n	8013ed0 <f_open+0x374>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	68da      	ldr	r2, [r3, #12]
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013e1e:	693b      	ldr	r3, [r7, #16]
 8013e20:	895b      	ldrh	r3, [r3, #10]
 8013e22:	025b      	lsls	r3, r3, #9
 8013e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	689b      	ldr	r3, [r3, #8]
 8013e2a:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	68db      	ldr	r3, [r3, #12]
 8013e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013e32:	e016      	b.n	8013e62 <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f7fd ff52 	bl	8011ce2 <get_fat>
 8013e3e:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8013e40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013e42:	2b01      	cmp	r3, #1
 8013e44:	d802      	bhi.n	8013e4c <f_open+0x2f0>
 8013e46:	2302      	movs	r3, #2
 8013e48:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013e4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e52:	d102      	bne.n	8013e5a <f_open+0x2fe>
 8013e54:	2301      	movs	r3, #1
 8013e56:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013e5a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e5e:	1ad3      	subs	r3, r2, r3
 8013e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013e62:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d103      	bne.n	8013e72 <f_open+0x316>
 8013e6a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013e6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e6e:	429a      	cmp	r2, r3
 8013e70:	d8e0      	bhi.n	8013e34 <f_open+0x2d8>
				}
				fp->clust = clst;
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013e76:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013e78:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d127      	bne.n	8013ed0 <f_open+0x374>
 8013e80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d022      	beq.n	8013ed0 <f_open+0x374>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f7fd ff08 	bl	8011ca4 <clust2sect>
 8013e94:	64b8      	str	r0, [r7, #72]	@ 0x48
 8013e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d103      	bne.n	8013ea4 <f_open+0x348>
						res = FR_INT_ERR;
 8013e9c:	2302      	movs	r3, #2
 8013e9e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013ea2:	e015      	b.n	8013ed0 <f_open+0x374>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013ea4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013ea6:	0a5a      	lsrs	r2, r3, #9
 8013ea8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013eaa:	441a      	add	r2, r3
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013eb0:	693b      	ldr	r3, [r7, #16]
 8013eb2:	7858      	ldrb	r0, [r3, #1]
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	6a1a      	ldr	r2, [r3, #32]
 8013ebe:	2301      	movs	r3, #1
 8013ec0:	f7fd fb44 	bl	801154c <disk_read>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d002      	beq.n	8013ed0 <f_open+0x374>
 8013eca:	2301      	movs	r3, #1
 8013ecc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8013ed0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8013ed2:	f000 ff0d 	bl	8014cf0 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013ed6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d002      	beq.n	8013ee4 <f_open+0x388>
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013ee4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8013ee8:	4618      	mov	r0, r3
 8013eea:	3768      	adds	r7, #104	@ 0x68
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}

08013ef0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b08c      	sub	sp, #48	@ 0x30
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	60f8      	str	r0, [r7, #12]
 8013ef8:	60b9      	str	r1, [r7, #8]
 8013efa:	607a      	str	r2, [r7, #4]
 8013efc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013efe:	68bb      	ldr	r3, [r7, #8]
 8013f00:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013f02:	683b      	ldr	r3, [r7, #0]
 8013f04:	2200      	movs	r2, #0
 8013f06:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	f107 0210 	add.w	r2, r7, #16
 8013f0e:	4611      	mov	r1, r2
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7ff fda7 	bl	8013a64 <validate>
 8013f16:	4603      	mov	r3, r0
 8013f18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013f1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d107      	bne.n	8013f34 <f_write+0x44>
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	7d5b      	ldrb	r3, [r3, #21]
 8013f28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013f2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d002      	beq.n	8013f3a <f_write+0x4a>
 8013f34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013f38:	e14b      	b.n	80141d2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	7d1b      	ldrb	r3, [r3, #20]
 8013f3e:	f003 0302 	and.w	r3, r3, #2
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d101      	bne.n	8013f4a <f_write+0x5a>
 8013f46:	2307      	movs	r3, #7
 8013f48:	e143      	b.n	80141d2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	699a      	ldr	r2, [r3, #24]
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	441a      	add	r2, r3
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	699b      	ldr	r3, [r3, #24]
 8013f56:	429a      	cmp	r2, r3
 8013f58:	f080 812d 	bcs.w	80141b6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	699b      	ldr	r3, [r3, #24]
 8013f60:	43db      	mvns	r3, r3
 8013f62:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013f64:	e127      	b.n	80141b6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	699b      	ldr	r3, [r3, #24]
 8013f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	f040 80e3 	bne.w	801413a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	699b      	ldr	r3, [r3, #24]
 8013f78:	0a5b      	lsrs	r3, r3, #9
 8013f7a:	693a      	ldr	r2, [r7, #16]
 8013f7c:	8952      	ldrh	r2, [r2, #10]
 8013f7e:	3a01      	subs	r2, #1
 8013f80:	4013      	ands	r3, r2
 8013f82:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013f84:	69bb      	ldr	r3, [r7, #24]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d143      	bne.n	8014012 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	699b      	ldr	r3, [r3, #24]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d10c      	bne.n	8013fac <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	689b      	ldr	r3, [r3, #8]
 8013f96:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d11a      	bne.n	8013fd4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	2100      	movs	r1, #0
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f7fe f893 	bl	80120ce <create_chain>
 8013fa8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013faa:	e013      	b.n	8013fd4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d007      	beq.n	8013fc4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013fb4:	68fb      	ldr	r3, [r7, #12]
 8013fb6:	699b      	ldr	r3, [r3, #24]
 8013fb8:	4619      	mov	r1, r3
 8013fba:	68f8      	ldr	r0, [r7, #12]
 8013fbc:	f7fe f91f 	bl	80121fe <clmt_clust>
 8013fc0:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013fc2:	e007      	b.n	8013fd4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013fc4:	68fa      	ldr	r2, [r7, #12]
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	69db      	ldr	r3, [r3, #28]
 8013fca:	4619      	mov	r1, r3
 8013fcc:	4610      	mov	r0, r2
 8013fce:	f7fe f87e 	bl	80120ce <create_chain>
 8013fd2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	f000 80f2 	beq.w	80141c0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fde:	2b01      	cmp	r3, #1
 8013fe0:	d104      	bne.n	8013fec <f_write+0xfc>
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	2202      	movs	r2, #2
 8013fe6:	755a      	strb	r2, [r3, #21]
 8013fe8:	2302      	movs	r3, #2
 8013fea:	e0f2      	b.n	80141d2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ff2:	d104      	bne.n	8013ffe <f_write+0x10e>
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	2201      	movs	r2, #1
 8013ff8:	755a      	strb	r2, [r3, #21]
 8013ffa:	2301      	movs	r3, #1
 8013ffc:	e0e9      	b.n	80141d2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014002:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	689b      	ldr	r3, [r3, #8]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d102      	bne.n	8014012 <f_write+0x122>
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014010:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	7d1b      	ldrb	r3, [r3, #20]
 8014016:	b25b      	sxtb	r3, r3
 8014018:	2b00      	cmp	r3, #0
 801401a:	da18      	bge.n	801404e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801401c:	693b      	ldr	r3, [r7, #16]
 801401e:	7858      	ldrb	r0, [r3, #1]
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	6a1a      	ldr	r2, [r3, #32]
 801402a:	2301      	movs	r3, #1
 801402c:	f7fd faae 	bl	801158c <disk_write>
 8014030:	4603      	mov	r3, r0
 8014032:	2b00      	cmp	r3, #0
 8014034:	d004      	beq.n	8014040 <f_write+0x150>
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	2201      	movs	r2, #1
 801403a:	755a      	strb	r2, [r3, #21]
 801403c:	2301      	movs	r3, #1
 801403e:	e0c8      	b.n	80141d2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	7d1b      	ldrb	r3, [r3, #20]
 8014044:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014048:	b2da      	uxtb	r2, r3
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801404e:	693a      	ldr	r2, [r7, #16]
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	69db      	ldr	r3, [r3, #28]
 8014054:	4619      	mov	r1, r3
 8014056:	4610      	mov	r0, r2
 8014058:	f7fd fe24 	bl	8011ca4 <clust2sect>
 801405c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801405e:	697b      	ldr	r3, [r7, #20]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d104      	bne.n	801406e <f_write+0x17e>
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	2202      	movs	r2, #2
 8014068:	755a      	strb	r2, [r3, #21]
 801406a:	2302      	movs	r3, #2
 801406c:	e0b1      	b.n	80141d2 <f_write+0x2e2>
			sect += csect;
 801406e:	697a      	ldr	r2, [r7, #20]
 8014070:	69bb      	ldr	r3, [r7, #24]
 8014072:	4413      	add	r3, r2
 8014074:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	0a5b      	lsrs	r3, r3, #9
 801407a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801407c:	6a3b      	ldr	r3, [r7, #32]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d03c      	beq.n	80140fc <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014082:	69ba      	ldr	r2, [r7, #24]
 8014084:	6a3b      	ldr	r3, [r7, #32]
 8014086:	4413      	add	r3, r2
 8014088:	693a      	ldr	r2, [r7, #16]
 801408a:	8952      	ldrh	r2, [r2, #10]
 801408c:	4293      	cmp	r3, r2
 801408e:	d905      	bls.n	801409c <f_write+0x1ac>
					cc = fs->csize - csect;
 8014090:	693b      	ldr	r3, [r7, #16]
 8014092:	895b      	ldrh	r3, [r3, #10]
 8014094:	461a      	mov	r2, r3
 8014096:	69bb      	ldr	r3, [r7, #24]
 8014098:	1ad3      	subs	r3, r2, r3
 801409a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801409c:	693b      	ldr	r3, [r7, #16]
 801409e:	7858      	ldrb	r0, [r3, #1]
 80140a0:	6a3b      	ldr	r3, [r7, #32]
 80140a2:	697a      	ldr	r2, [r7, #20]
 80140a4:	69f9      	ldr	r1, [r7, #28]
 80140a6:	f7fd fa71 	bl	801158c <disk_write>
 80140aa:	4603      	mov	r3, r0
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d004      	beq.n	80140ba <f_write+0x1ca>
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	2201      	movs	r2, #1
 80140b4:	755a      	strb	r2, [r3, #21]
 80140b6:	2301      	movs	r3, #1
 80140b8:	e08b      	b.n	80141d2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	6a1a      	ldr	r2, [r3, #32]
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	1ad3      	subs	r3, r2, r3
 80140c2:	6a3a      	ldr	r2, [r7, #32]
 80140c4:	429a      	cmp	r2, r3
 80140c6:	d915      	bls.n	80140f4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	6a1a      	ldr	r2, [r3, #32]
 80140d2:	697b      	ldr	r3, [r7, #20]
 80140d4:	1ad3      	subs	r3, r2, r3
 80140d6:	025b      	lsls	r3, r3, #9
 80140d8:	69fa      	ldr	r2, [r7, #28]
 80140da:	4413      	add	r3, r2
 80140dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80140e0:	4619      	mov	r1, r3
 80140e2:	f7fd fb14 	bl	801170e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	7d1b      	ldrb	r3, [r3, #20]
 80140ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80140ee:	b2da      	uxtb	r2, r3
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80140f4:	6a3b      	ldr	r3, [r7, #32]
 80140f6:	025b      	lsls	r3, r3, #9
 80140f8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80140fa:	e03f      	b.n	801417c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	6a1b      	ldr	r3, [r3, #32]
 8014100:	697a      	ldr	r2, [r7, #20]
 8014102:	429a      	cmp	r2, r3
 8014104:	d016      	beq.n	8014134 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	699a      	ldr	r2, [r3, #24]
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801410e:	429a      	cmp	r2, r3
 8014110:	d210      	bcs.n	8014134 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014112:	693b      	ldr	r3, [r7, #16]
 8014114:	7858      	ldrb	r0, [r3, #1]
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801411c:	2301      	movs	r3, #1
 801411e:	697a      	ldr	r2, [r7, #20]
 8014120:	f7fd fa14 	bl	801154c <disk_read>
 8014124:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014126:	2b00      	cmp	r3, #0
 8014128:	d004      	beq.n	8014134 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	2201      	movs	r2, #1
 801412e:	755a      	strb	r2, [r3, #21]
 8014130:	2301      	movs	r3, #1
 8014132:	e04e      	b.n	80141d2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	697a      	ldr	r2, [r7, #20]
 8014138:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	699b      	ldr	r3, [r3, #24]
 801413e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014142:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8014146:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	429a      	cmp	r2, r3
 801414e:	d901      	bls.n	8014154 <f_write+0x264>
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	699b      	ldr	r3, [r3, #24]
 801415e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014162:	4413      	add	r3, r2
 8014164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014166:	69f9      	ldr	r1, [r7, #28]
 8014168:	4618      	mov	r0, r3
 801416a:	f7fd fad0 	bl	801170e <mem_cpy>
		fp->flag |= FA_DIRTY;
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	7d1b      	ldrb	r3, [r3, #20]
 8014172:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014176:	b2da      	uxtb	r2, r3
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801417c:	69fa      	ldr	r2, [r7, #28]
 801417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014180:	4413      	add	r3, r2
 8014182:	61fb      	str	r3, [r7, #28]
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	699a      	ldr	r2, [r3, #24]
 8014188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801418a:	441a      	add	r2, r3
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	619a      	str	r2, [r3, #24]
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	68da      	ldr	r2, [r3, #12]
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	699b      	ldr	r3, [r3, #24]
 8014198:	429a      	cmp	r2, r3
 801419a:	bf38      	it	cc
 801419c:	461a      	movcc	r2, r3
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	60da      	str	r2, [r3, #12]
 80141a2:	683b      	ldr	r3, [r7, #0]
 80141a4:	681a      	ldr	r2, [r3, #0]
 80141a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141a8:	441a      	add	r2, r3
 80141aa:	683b      	ldr	r3, [r7, #0]
 80141ac:	601a      	str	r2, [r3, #0]
 80141ae:	687a      	ldr	r2, [r7, #4]
 80141b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141b2:	1ad3      	subs	r3, r2, r3
 80141b4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	f47f aed4 	bne.w	8013f66 <f_write+0x76>
 80141be:	e000      	b.n	80141c2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80141c0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	7d1b      	ldrb	r3, [r3, #20]
 80141c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141ca:	b2da      	uxtb	r2, r3
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80141d0:	2300      	movs	r3, #0
}
 80141d2:	4618      	mov	r0, r3
 80141d4:	3730      	adds	r7, #48	@ 0x30
 80141d6:	46bd      	mov	sp, r7
 80141d8:	bd80      	pop	{r7, pc}

080141da <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80141da:	b580      	push	{r7, lr}
 80141dc:	b086      	sub	sp, #24
 80141de:	af00      	add	r7, sp, #0
 80141e0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	f107 0208 	add.w	r2, r7, #8
 80141e8:	4611      	mov	r1, r2
 80141ea:	4618      	mov	r0, r3
 80141ec:	f7ff fc3a 	bl	8013a64 <validate>
 80141f0:	4603      	mov	r3, r0
 80141f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80141f4:	7dfb      	ldrb	r3, [r7, #23]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d168      	bne.n	80142cc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	7d1b      	ldrb	r3, [r3, #20]
 80141fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014202:	2b00      	cmp	r3, #0
 8014204:	d062      	beq.n	80142cc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	7d1b      	ldrb	r3, [r3, #20]
 801420a:	b25b      	sxtb	r3, r3
 801420c:	2b00      	cmp	r3, #0
 801420e:	da15      	bge.n	801423c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014210:	68bb      	ldr	r3, [r7, #8]
 8014212:	7858      	ldrb	r0, [r3, #1]
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	6a1a      	ldr	r2, [r3, #32]
 801421e:	2301      	movs	r3, #1
 8014220:	f7fd f9b4 	bl	801158c <disk_write>
 8014224:	4603      	mov	r3, r0
 8014226:	2b00      	cmp	r3, #0
 8014228:	d001      	beq.n	801422e <f_sync+0x54>
 801422a:	2301      	movs	r3, #1
 801422c:	e04f      	b.n	80142ce <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	7d1b      	ldrb	r3, [r3, #20]
 8014232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014236:	b2da      	uxtb	r2, r3
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801423c:	f7fc f9d8 	bl	80105f0 <get_fattime>
 8014240:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014242:	68ba      	ldr	r2, [r7, #8]
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014248:	4619      	mov	r1, r3
 801424a:	4610      	mov	r0, r2
 801424c:	f7fd fc8e 	bl	8011b6c <move_window>
 8014250:	4603      	mov	r3, r0
 8014252:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014254:	7dfb      	ldrb	r3, [r7, #23]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d138      	bne.n	80142cc <f_sync+0xf2>
					dir = fp->dir_ptr;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801425e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	330b      	adds	r3, #11
 8014264:	781a      	ldrb	r2, [r3, #0]
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	330b      	adds	r3, #11
 801426a:	f042 0220 	orr.w	r2, r2, #32
 801426e:	b2d2      	uxtb	r2, r2
 8014270:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	6818      	ldr	r0, [r3, #0]
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	689b      	ldr	r3, [r3, #8]
 801427a:	461a      	mov	r2, r3
 801427c:	68f9      	ldr	r1, [r7, #12]
 801427e:	f7fe f998 	bl	80125b2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	f103 021c 	add.w	r2, r3, #28
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	68db      	ldr	r3, [r3, #12]
 801428c:	4619      	mov	r1, r3
 801428e:	4610      	mov	r0, r2
 8014290:	f7fd fa11 	bl	80116b6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	3316      	adds	r3, #22
 8014298:	6939      	ldr	r1, [r7, #16]
 801429a:	4618      	mov	r0, r3
 801429c:	f7fd fa0b 	bl	80116b6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	3312      	adds	r3, #18
 80142a4:	2100      	movs	r1, #0
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7fd f9ea 	bl	8011680 <st_word>
					fs->wflag = 1;
 80142ac:	68bb      	ldr	r3, [r7, #8]
 80142ae:	2201      	movs	r2, #1
 80142b0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80142b2:	68bb      	ldr	r3, [r7, #8]
 80142b4:	4618      	mov	r0, r3
 80142b6:	f7fd fc87 	bl	8011bc8 <sync_fs>
 80142ba:	4603      	mov	r3, r0
 80142bc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	7d1b      	ldrb	r3, [r3, #20]
 80142c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80142c6:	b2da      	uxtb	r2, r3
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80142cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80142ce:	4618      	mov	r0, r3
 80142d0:	3718      	adds	r7, #24
 80142d2:	46bd      	mov	sp, r7
 80142d4:	bd80      	pop	{r7, pc}

080142d6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80142d6:	b580      	push	{r7, lr}
 80142d8:	b084      	sub	sp, #16
 80142da:	af00      	add	r7, sp, #0
 80142dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80142de:	6878      	ldr	r0, [r7, #4]
 80142e0:	f7ff ff7b 	bl	80141da <f_sync>
 80142e4:	4603      	mov	r3, r0
 80142e6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80142e8:	7bfb      	ldrb	r3, [r7, #15]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d118      	bne.n	8014320 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f107 0208 	add.w	r2, r7, #8
 80142f4:	4611      	mov	r1, r2
 80142f6:	4618      	mov	r0, r3
 80142f8:	f7ff fbb4 	bl	8013a64 <validate>
 80142fc:	4603      	mov	r3, r0
 80142fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014300:	7bfb      	ldrb	r3, [r7, #15]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d10c      	bne.n	8014320 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	691b      	ldr	r3, [r3, #16]
 801430a:	4618      	mov	r0, r3
 801430c:	f7fd fb8a 	bl	8011a24 <dec_lock>
 8014310:	4603      	mov	r3, r0
 8014312:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014314:	7bfb      	ldrb	r3, [r7, #15]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d102      	bne.n	8014320 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	2200      	movs	r2, #0
 801431e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014320:	7bfb      	ldrb	r3, [r7, #15]
}
 8014322:	4618      	mov	r0, r3
 8014324:	3710      	adds	r7, #16
 8014326:	46bd      	mov	sp, r7
 8014328:	bd80      	pop	{r7, pc}

0801432a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 801432a:	b580      	push	{r7, lr}
 801432c:	b090      	sub	sp, #64	@ 0x40
 801432e:	af00      	add	r7, sp, #0
 8014330:	6078      	str	r0, [r7, #4]
 8014332:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	f107 0208 	add.w	r2, r7, #8
 801433a:	4611      	mov	r1, r2
 801433c:	4618      	mov	r0, r3
 801433e:	f7ff fb91 	bl	8013a64 <validate>
 8014342:	4603      	mov	r3, r0
 8014344:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014348:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801434c:	2b00      	cmp	r3, #0
 801434e:	d103      	bne.n	8014358 <f_lseek+0x2e>
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	7d5b      	ldrb	r3, [r3, #21]
 8014354:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014358:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801435c:	2b00      	cmp	r3, #0
 801435e:	d002      	beq.n	8014366 <f_lseek+0x3c>
 8014360:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014364:	e1e6      	b.n	8014734 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801436a:	2b00      	cmp	r3, #0
 801436c:	f000 80d1 	beq.w	8014512 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014376:	d15a      	bne.n	801442e <f_lseek+0x104>
			tbl = fp->cltbl;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801437c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014380:	1d1a      	adds	r2, r3, #4
 8014382:	627a      	str	r2, [r7, #36]	@ 0x24
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	617b      	str	r3, [r7, #20]
 8014388:	2302      	movs	r3, #2
 801438a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	689b      	ldr	r3, [r3, #8]
 8014390:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8014392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014394:	2b00      	cmp	r3, #0
 8014396:	d03a      	beq.n	801440e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8014398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801439a:	613b      	str	r3, [r7, #16]
 801439c:	2300      	movs	r3, #0
 801439e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80143a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143a2:	3302      	adds	r3, #2
 80143a4:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80143a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143a8:	60fb      	str	r3, [r7, #12]
 80143aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143ac:	3301      	adds	r3, #1
 80143ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80143b4:	4618      	mov	r0, r3
 80143b6:	f7fd fc94 	bl	8011ce2 <get_fat>
 80143ba:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80143bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143be:	2b01      	cmp	r3, #1
 80143c0:	d804      	bhi.n	80143cc <f_lseek+0xa2>
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	2202      	movs	r2, #2
 80143c6:	755a      	strb	r2, [r3, #21]
 80143c8:	2302      	movs	r3, #2
 80143ca:	e1b3      	b.n	8014734 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80143cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143d2:	d104      	bne.n	80143de <f_lseek+0xb4>
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2201      	movs	r2, #1
 80143d8:	755a      	strb	r2, [r3, #21]
 80143da:	2301      	movs	r3, #1
 80143dc:	e1aa      	b.n	8014734 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	3301      	adds	r3, #1
 80143e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80143e4:	429a      	cmp	r2, r3
 80143e6:	d0de      	beq.n	80143a6 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80143e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80143ea:	697b      	ldr	r3, [r7, #20]
 80143ec:	429a      	cmp	r2, r3
 80143ee:	d809      	bhi.n	8014404 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80143f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143f2:	1d1a      	adds	r2, r3, #4
 80143f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80143f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80143f8:	601a      	str	r2, [r3, #0]
 80143fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143fc:	1d1a      	adds	r2, r3, #4
 80143fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8014400:	693a      	ldr	r2, [r7, #16]
 8014402:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8014404:	68bb      	ldr	r3, [r7, #8]
 8014406:	699b      	ldr	r3, [r3, #24]
 8014408:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801440a:	429a      	cmp	r2, r3
 801440c:	d3c4      	bcc.n	8014398 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014412:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014414:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014416:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014418:	697b      	ldr	r3, [r7, #20]
 801441a:	429a      	cmp	r2, r3
 801441c:	d803      	bhi.n	8014426 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014420:	2200      	movs	r2, #0
 8014422:	601a      	str	r2, [r3, #0]
 8014424:	e184      	b.n	8014730 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014426:	2311      	movs	r3, #17
 8014428:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801442c:	e180      	b.n	8014730 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	68db      	ldr	r3, [r3, #12]
 8014432:	683a      	ldr	r2, [r7, #0]
 8014434:	429a      	cmp	r2, r3
 8014436:	d902      	bls.n	801443e <f_lseek+0x114>
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	68db      	ldr	r3, [r3, #12]
 801443c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	683a      	ldr	r2, [r7, #0]
 8014442:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8014444:	683b      	ldr	r3, [r7, #0]
 8014446:	2b00      	cmp	r3, #0
 8014448:	f000 8172 	beq.w	8014730 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 801444c:	683b      	ldr	r3, [r7, #0]
 801444e:	3b01      	subs	r3, #1
 8014450:	4619      	mov	r1, r3
 8014452:	6878      	ldr	r0, [r7, #4]
 8014454:	f7fd fed3 	bl	80121fe <clmt_clust>
 8014458:	4602      	mov	r2, r0
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801445e:	68ba      	ldr	r2, [r7, #8]
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	69db      	ldr	r3, [r3, #28]
 8014464:	4619      	mov	r1, r3
 8014466:	4610      	mov	r0, r2
 8014468:	f7fd fc1c 	bl	8011ca4 <clust2sect>
 801446c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801446e:	69bb      	ldr	r3, [r7, #24]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d104      	bne.n	801447e <f_lseek+0x154>
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2202      	movs	r2, #2
 8014478:	755a      	strb	r2, [r3, #21]
 801447a:	2302      	movs	r3, #2
 801447c:	e15a      	b.n	8014734 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	3b01      	subs	r3, #1
 8014482:	0a5b      	lsrs	r3, r3, #9
 8014484:	68ba      	ldr	r2, [r7, #8]
 8014486:	8952      	ldrh	r2, [r2, #10]
 8014488:	3a01      	subs	r2, #1
 801448a:	4013      	ands	r3, r2
 801448c:	69ba      	ldr	r2, [r7, #24]
 801448e:	4413      	add	r3, r2
 8014490:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	699b      	ldr	r3, [r3, #24]
 8014496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801449a:	2b00      	cmp	r3, #0
 801449c:	f000 8148 	beq.w	8014730 <f_lseek+0x406>
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	6a1b      	ldr	r3, [r3, #32]
 80144a4:	69ba      	ldr	r2, [r7, #24]
 80144a6:	429a      	cmp	r2, r3
 80144a8:	f000 8142 	beq.w	8014730 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	7d1b      	ldrb	r3, [r3, #20]
 80144b0:	b25b      	sxtb	r3, r3
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	da18      	bge.n	80144e8 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80144b6:	68bb      	ldr	r3, [r7, #8]
 80144b8:	7858      	ldrb	r0, [r3, #1]
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	6a1a      	ldr	r2, [r3, #32]
 80144c4:	2301      	movs	r3, #1
 80144c6:	f7fd f861 	bl	801158c <disk_write>
 80144ca:	4603      	mov	r3, r0
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d004      	beq.n	80144da <f_lseek+0x1b0>
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	2201      	movs	r2, #1
 80144d4:	755a      	strb	r2, [r3, #21]
 80144d6:	2301      	movs	r3, #1
 80144d8:	e12c      	b.n	8014734 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	7d1b      	ldrb	r3, [r3, #20]
 80144de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80144e2:	b2da      	uxtb	r2, r3
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80144e8:	68bb      	ldr	r3, [r7, #8]
 80144ea:	7858      	ldrb	r0, [r3, #1]
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80144f2:	2301      	movs	r3, #1
 80144f4:	69ba      	ldr	r2, [r7, #24]
 80144f6:	f7fd f829 	bl	801154c <disk_read>
 80144fa:	4603      	mov	r3, r0
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d004      	beq.n	801450a <f_lseek+0x1e0>
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	2201      	movs	r2, #1
 8014504:	755a      	strb	r2, [r3, #21]
 8014506:	2301      	movs	r3, #1
 8014508:	e114      	b.n	8014734 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	69ba      	ldr	r2, [r7, #24]
 801450e:	621a      	str	r2, [r3, #32]
 8014510:	e10e      	b.n	8014730 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	68db      	ldr	r3, [r3, #12]
 8014516:	683a      	ldr	r2, [r7, #0]
 8014518:	429a      	cmp	r2, r3
 801451a:	d908      	bls.n	801452e <f_lseek+0x204>
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	7d1b      	ldrb	r3, [r3, #20]
 8014520:	f003 0302 	and.w	r3, r3, #2
 8014524:	2b00      	cmp	r3, #0
 8014526:	d102      	bne.n	801452e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	68db      	ldr	r3, [r3, #12]
 801452c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	699b      	ldr	r3, [r3, #24]
 8014532:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8014534:	2300      	movs	r3, #0
 8014536:	637b      	str	r3, [r7, #52]	@ 0x34
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801453c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801453e:	683b      	ldr	r3, [r7, #0]
 8014540:	2b00      	cmp	r3, #0
 8014542:	f000 80a7 	beq.w	8014694 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014546:	68bb      	ldr	r3, [r7, #8]
 8014548:	895b      	ldrh	r3, [r3, #10]
 801454a:	025b      	lsls	r3, r3, #9
 801454c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801454e:	6a3b      	ldr	r3, [r7, #32]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d01b      	beq.n	801458c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014554:	683b      	ldr	r3, [r7, #0]
 8014556:	1e5a      	subs	r2, r3, #1
 8014558:	69fb      	ldr	r3, [r7, #28]
 801455a:	fbb2 f2f3 	udiv	r2, r2, r3
 801455e:	6a3b      	ldr	r3, [r7, #32]
 8014560:	1e59      	subs	r1, r3, #1
 8014562:	69fb      	ldr	r3, [r7, #28]
 8014564:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014568:	429a      	cmp	r2, r3
 801456a:	d30f      	bcc.n	801458c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801456c:	6a3b      	ldr	r3, [r7, #32]
 801456e:	1e5a      	subs	r2, r3, #1
 8014570:	69fb      	ldr	r3, [r7, #28]
 8014572:	425b      	negs	r3, r3
 8014574:	401a      	ands	r2, r3
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	699b      	ldr	r3, [r3, #24]
 801457e:	683a      	ldr	r2, [r7, #0]
 8014580:	1ad3      	subs	r3, r2, r3
 8014582:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	69db      	ldr	r3, [r3, #28]
 8014588:	63bb      	str	r3, [r7, #56]	@ 0x38
 801458a:	e022      	b.n	80145d2 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	689b      	ldr	r3, [r3, #8]
 8014590:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014594:	2b00      	cmp	r3, #0
 8014596:	d119      	bne.n	80145cc <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	2100      	movs	r1, #0
 801459c:	4618      	mov	r0, r3
 801459e:	f7fd fd96 	bl	80120ce <create_chain>
 80145a2:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80145a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145a6:	2b01      	cmp	r3, #1
 80145a8:	d104      	bne.n	80145b4 <f_lseek+0x28a>
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	2202      	movs	r2, #2
 80145ae:	755a      	strb	r2, [r3, #21]
 80145b0:	2302      	movs	r3, #2
 80145b2:	e0bf      	b.n	8014734 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80145b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145ba:	d104      	bne.n	80145c6 <f_lseek+0x29c>
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	2201      	movs	r2, #1
 80145c0:	755a      	strb	r2, [r3, #21]
 80145c2:	2301      	movs	r3, #1
 80145c4:	e0b6      	b.n	8014734 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80145ca:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80145d0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80145d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d05d      	beq.n	8014694 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 80145d8:	e03a      	b.n	8014650 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 80145da:	683a      	ldr	r2, [r7, #0]
 80145dc:	69fb      	ldr	r3, [r7, #28]
 80145de:	1ad3      	subs	r3, r2, r3
 80145e0:	603b      	str	r3, [r7, #0]
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	699a      	ldr	r2, [r3, #24]
 80145e6:	69fb      	ldr	r3, [r7, #28]
 80145e8:	441a      	add	r2, r3
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	7d1b      	ldrb	r3, [r3, #20]
 80145f2:	f003 0302 	and.w	r3, r3, #2
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d00b      	beq.n	8014612 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80145fe:	4618      	mov	r0, r3
 8014600:	f7fd fd65 	bl	80120ce <create_chain>
 8014604:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014608:	2b00      	cmp	r3, #0
 801460a:	d108      	bne.n	801461e <f_lseek+0x2f4>
							ofs = 0; break;
 801460c:	2300      	movs	r3, #0
 801460e:	603b      	str	r3, [r7, #0]
 8014610:	e022      	b.n	8014658 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014616:	4618      	mov	r0, r3
 8014618:	f7fd fb63 	bl	8011ce2 <get_fat>
 801461c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801461e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014624:	d104      	bne.n	8014630 <f_lseek+0x306>
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	2201      	movs	r2, #1
 801462a:	755a      	strb	r2, [r3, #21]
 801462c:	2301      	movs	r3, #1
 801462e:	e081      	b.n	8014734 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014632:	2b01      	cmp	r3, #1
 8014634:	d904      	bls.n	8014640 <f_lseek+0x316>
 8014636:	68bb      	ldr	r3, [r7, #8]
 8014638:	699b      	ldr	r3, [r3, #24]
 801463a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801463c:	429a      	cmp	r2, r3
 801463e:	d304      	bcc.n	801464a <f_lseek+0x320>
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	2202      	movs	r2, #2
 8014644:	755a      	strb	r2, [r3, #21]
 8014646:	2302      	movs	r3, #2
 8014648:	e074      	b.n	8014734 <f_lseek+0x40a>
					fp->clust = clst;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801464e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014650:	683a      	ldr	r2, [r7, #0]
 8014652:	69fb      	ldr	r3, [r7, #28]
 8014654:	429a      	cmp	r2, r3
 8014656:	d8c0      	bhi.n	80145da <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	699a      	ldr	r2, [r3, #24]
 801465c:	683b      	ldr	r3, [r7, #0]
 801465e:	441a      	add	r2, r3
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801466a:	2b00      	cmp	r3, #0
 801466c:	d012      	beq.n	8014694 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801466e:	68bb      	ldr	r3, [r7, #8]
 8014670:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014672:	4618      	mov	r0, r3
 8014674:	f7fd fb16 	bl	8011ca4 <clust2sect>
 8014678:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801467a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801467c:	2b00      	cmp	r3, #0
 801467e:	d104      	bne.n	801468a <f_lseek+0x360>
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	2202      	movs	r2, #2
 8014684:	755a      	strb	r2, [r3, #21]
 8014686:	2302      	movs	r3, #2
 8014688:	e054      	b.n	8014734 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 801468a:	683b      	ldr	r3, [r7, #0]
 801468c:	0a5b      	lsrs	r3, r3, #9
 801468e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014690:	4413      	add	r3, r2
 8014692:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	699a      	ldr	r2, [r3, #24]
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	68db      	ldr	r3, [r3, #12]
 801469c:	429a      	cmp	r2, r3
 801469e:	d90a      	bls.n	80146b6 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	699a      	ldr	r2, [r3, #24]
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	7d1b      	ldrb	r3, [r3, #20]
 80146ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146b0:	b2da      	uxtb	r2, r3
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	699b      	ldr	r3, [r3, #24]
 80146ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d036      	beq.n	8014730 <f_lseek+0x406>
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	6a1b      	ldr	r3, [r3, #32]
 80146c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80146c8:	429a      	cmp	r2, r3
 80146ca:	d031      	beq.n	8014730 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	7d1b      	ldrb	r3, [r3, #20]
 80146d0:	b25b      	sxtb	r3, r3
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	da18      	bge.n	8014708 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80146d6:	68bb      	ldr	r3, [r7, #8]
 80146d8:	7858      	ldrb	r0, [r3, #1]
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	6a1a      	ldr	r2, [r3, #32]
 80146e4:	2301      	movs	r3, #1
 80146e6:	f7fc ff51 	bl	801158c <disk_write>
 80146ea:	4603      	mov	r3, r0
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d004      	beq.n	80146fa <f_lseek+0x3d0>
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	2201      	movs	r2, #1
 80146f4:	755a      	strb	r2, [r3, #21]
 80146f6:	2301      	movs	r3, #1
 80146f8:	e01c      	b.n	8014734 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	7d1b      	ldrb	r3, [r3, #20]
 80146fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014702:	b2da      	uxtb	r2, r3
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014708:	68bb      	ldr	r3, [r7, #8]
 801470a:	7858      	ldrb	r0, [r3, #1]
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014712:	2301      	movs	r3, #1
 8014714:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014716:	f7fc ff19 	bl	801154c <disk_read>
 801471a:	4603      	mov	r3, r0
 801471c:	2b00      	cmp	r3, #0
 801471e:	d004      	beq.n	801472a <f_lseek+0x400>
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	2201      	movs	r2, #1
 8014724:	755a      	strb	r2, [r3, #21]
 8014726:	2301      	movs	r3, #1
 8014728:	e004      	b.n	8014734 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801472e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014730:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014734:	4618      	mov	r0, r3
 8014736:	3740      	adds	r7, #64	@ 0x40
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}

0801473c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b086      	sub	sp, #24
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
 8014744:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d101      	bne.n	8014750 <f_opendir+0x14>
 801474c:	2309      	movs	r3, #9
 801474e:	e074      	b.n	801483a <f_opendir+0xfe>

	/* Get logical drive */
	obj = &dp->obj;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8014754:	f107 0108 	add.w	r1, r7, #8
 8014758:	463b      	mov	r3, r7
 801475a:	2200      	movs	r2, #0
 801475c:	4618      	mov	r0, r3
 801475e:	f7fe ff35 	bl	80135cc <find_volume>
 8014762:	4603      	mov	r3, r0
 8014764:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014766:	7dfb      	ldrb	r3, [r7, #23]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d15f      	bne.n	801482c <f_opendir+0xf0>
		obj->fs = fs;
 801476c:	68ba      	ldr	r2, [r7, #8]
 801476e:	693b      	ldr	r3, [r7, #16]
 8014770:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8014772:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8014776:	f000 faaf 	bl	8014cd8 <ff_memalloc>
 801477a:	60f8      	str	r0, [r7, #12]
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d101      	bne.n	8014786 <f_opendir+0x4a>
 8014782:	2311      	movs	r3, #17
 8014784:	e059      	b.n	801483a <f_opendir+0xfe>
 8014786:	68bb      	ldr	r3, [r7, #8]
 8014788:	68fa      	ldr	r2, [r7, #12]
 801478a:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801478c:	683b      	ldr	r3, [r7, #0]
 801478e:	4619      	mov	r1, r3
 8014790:	6878      	ldr	r0, [r7, #4]
 8014792:	f7fe fe0f 	bl	80133b4 <follow_path>
 8014796:	4603      	mov	r3, r0
 8014798:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801479a:	7dfb      	ldrb	r3, [r7, #23]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d13d      	bne.n	801481c <f_opendir+0xe0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80147a6:	b25b      	sxtb	r3, r3
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	db12      	blt.n	80147d2 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80147ac:	693b      	ldr	r3, [r7, #16]
 80147ae:	799b      	ldrb	r3, [r3, #6]
 80147b0:	f003 0310 	and.w	r3, r3, #16
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d00a      	beq.n	80147ce <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80147b8:	68ba      	ldr	r2, [r7, #8]
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	6a1b      	ldr	r3, [r3, #32]
 80147be:	4619      	mov	r1, r3
 80147c0:	4610      	mov	r0, r2
 80147c2:	f7fd fed7 	bl	8012574 <ld_clust>
 80147c6:	4602      	mov	r2, r0
 80147c8:	693b      	ldr	r3, [r7, #16]
 80147ca:	609a      	str	r2, [r3, #8]
 80147cc:	e001      	b.n	80147d2 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80147ce:	2305      	movs	r3, #5
 80147d0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80147d2:	7dfb      	ldrb	r3, [r7, #23]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d121      	bne.n	801481c <f_opendir+0xe0>
				obj->id = fs->id;
 80147d8:	68bb      	ldr	r3, [r7, #8]
 80147da:	88da      	ldrh	r2, [r3, #6]
 80147dc:	693b      	ldr	r3, [r7, #16]
 80147de:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80147e0:	2100      	movs	r1, #0
 80147e2:	6878      	ldr	r0, [r7, #4]
 80147e4:	f7fd fd3f 	bl	8012266 <dir_sdi>
 80147e8:	4603      	mov	r3, r0
 80147ea:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80147ec:	7dfb      	ldrb	r3, [r7, #23]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d114      	bne.n	801481c <f_opendir+0xe0>
					if (obj->sclust) {
 80147f2:	693b      	ldr	r3, [r7, #16]
 80147f4:	689b      	ldr	r3, [r3, #8]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d00d      	beq.n	8014816 <f_opendir+0xda>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80147fa:	2100      	movs	r1, #0
 80147fc:	6878      	ldr	r0, [r7, #4]
 80147fe:	f7fd f883 	bl	8011908 <inc_lock>
 8014802:	4602      	mov	r2, r0
 8014804:	693b      	ldr	r3, [r7, #16]
 8014806:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8014808:	693b      	ldr	r3, [r7, #16]
 801480a:	691b      	ldr	r3, [r3, #16]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d105      	bne.n	801481c <f_opendir+0xe0>
 8014810:	2312      	movs	r3, #18
 8014812:	75fb      	strb	r3, [r7, #23]
 8014814:	e002      	b.n	801481c <f_opendir+0xe0>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8014816:	693b      	ldr	r3, [r7, #16]
 8014818:	2200      	movs	r2, #0
 801481a:	611a      	str	r2, [r3, #16]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 801481c:	68f8      	ldr	r0, [r7, #12]
 801481e:	f000 fa67 	bl	8014cf0 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8014822:	7dfb      	ldrb	r3, [r7, #23]
 8014824:	2b04      	cmp	r3, #4
 8014826:	d101      	bne.n	801482c <f_opendir+0xf0>
 8014828:	2305      	movs	r3, #5
 801482a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801482c:	7dfb      	ldrb	r3, [r7, #23]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d002      	beq.n	8014838 <f_opendir+0xfc>
 8014832:	693b      	ldr	r3, [r7, #16]
 8014834:	2200      	movs	r2, #0
 8014836:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014838:	7dfb      	ldrb	r3, [r7, #23]
}
 801483a:	4618      	mov	r0, r3
 801483c:	3718      	adds	r7, #24
 801483e:	46bd      	mov	sp, r7
 8014840:	bd80      	pop	{r7, pc}

08014842 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8014842:	b580      	push	{r7, lr}
 8014844:	b084      	sub	sp, #16
 8014846:	af00      	add	r7, sp, #0
 8014848:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	f107 0208 	add.w	r2, r7, #8
 8014850:	4611      	mov	r1, r2
 8014852:	4618      	mov	r0, r3
 8014854:	f7ff f906 	bl	8013a64 <validate>
 8014858:	4603      	mov	r3, r0
 801485a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801485c:	7bfb      	ldrb	r3, [r7, #15]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d110      	bne.n	8014884 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	691b      	ldr	r3, [r3, #16]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d006      	beq.n	8014878 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	691b      	ldr	r3, [r3, #16]
 801486e:	4618      	mov	r0, r3
 8014870:	f7fd f8d8 	bl	8011a24 <dec_lock>
 8014874:	4603      	mov	r3, r0
 8014876:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8014878:	7bfb      	ldrb	r3, [r7, #15]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d102      	bne.n	8014884 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	2200      	movs	r2, #0
 8014882:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8014884:	7bfb      	ldrb	r3, [r7, #15]
}
 8014886:	4618      	mov	r0, r3
 8014888:	3710      	adds	r7, #16
 801488a:	46bd      	mov	sp, r7
 801488c:	bd80      	pop	{r7, pc}

0801488e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801488e:	b580      	push	{r7, lr}
 8014890:	b086      	sub	sp, #24
 8014892:	af00      	add	r7, sp, #0
 8014894:	6078      	str	r0, [r7, #4]
 8014896:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	f107 020c 	add.w	r2, r7, #12
 801489e:	4611      	mov	r1, r2
 80148a0:	4618      	mov	r0, r3
 80148a2:	f7ff f8df 	bl	8013a64 <validate>
 80148a6:	4603      	mov	r3, r0
 80148a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80148aa:	7dfb      	ldrb	r3, [r7, #23]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d136      	bne.n	801491e <f_readdir+0x90>
		if (!fno) {
 80148b0:	683b      	ldr	r3, [r7, #0]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d106      	bne.n	80148c4 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80148b6:	2100      	movs	r1, #0
 80148b8:	6878      	ldr	r0, [r7, #4]
 80148ba:	f7fd fcd4 	bl	8012266 <dir_sdi>
 80148be:	4603      	mov	r3, r0
 80148c0:	75fb      	strb	r3, [r7, #23]
 80148c2:	e02c      	b.n	801491e <f_readdir+0x90>
		} else {
			INIT_NAMBUF(fs);
 80148c4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80148c8:	f000 fa06 	bl	8014cd8 <ff_memalloc>
 80148cc:	6138      	str	r0, [r7, #16]
 80148ce:	693b      	ldr	r3, [r7, #16]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d101      	bne.n	80148d8 <f_readdir+0x4a>
 80148d4:	2311      	movs	r3, #17
 80148d6:	e023      	b.n	8014920 <f_readdir+0x92>
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	693a      	ldr	r2, [r7, #16]
 80148dc:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 80148de:	2100      	movs	r1, #0
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f7fe f872 	bl	80129ca <dir_read>
 80148e6:	4603      	mov	r3, r0
 80148e8:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80148ea:	7dfb      	ldrb	r3, [r7, #23]
 80148ec:	2b04      	cmp	r3, #4
 80148ee:	d101      	bne.n	80148f4 <f_readdir+0x66>
 80148f0:	2300      	movs	r3, #0
 80148f2:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 80148f4:	7dfb      	ldrb	r3, [r7, #23]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d10e      	bne.n	8014918 <f_readdir+0x8a>
				get_fileinfo(dp, fno);		/* Get the object information */
 80148fa:	6839      	ldr	r1, [r7, #0]
 80148fc:	6878      	ldr	r0, [r7, #4]
 80148fe:	f7fe fac3 	bl	8012e88 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8014902:	2100      	movs	r1, #0
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f7fd fd29 	bl	801235c <dir_next>
 801490a:	4603      	mov	r3, r0
 801490c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801490e:	7dfb      	ldrb	r3, [r7, #23]
 8014910:	2b04      	cmp	r3, #4
 8014912:	d101      	bne.n	8014918 <f_readdir+0x8a>
 8014914:	2300      	movs	r3, #0
 8014916:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 8014918:	6938      	ldr	r0, [r7, #16]
 801491a:	f000 f9e9 	bl	8014cf0 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 801491e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014920:	4618      	mov	r0, r3
 8014922:	3718      	adds	r7, #24
 8014924:	46bd      	mov	sp, r7
 8014926:	bd80      	pop	{r7, pc}

08014928 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8014928:	b580      	push	{r7, lr}
 801492a:	b092      	sub	sp, #72	@ 0x48
 801492c:	af00      	add	r7, sp, #0
 801492e:	60f8      	str	r0, [r7, #12]
 8014930:	60b9      	str	r1, [r7, #8]
 8014932:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8014934:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8014938:	f107 030c 	add.w	r3, r7, #12
 801493c:	2200      	movs	r2, #0
 801493e:	4618      	mov	r0, r3
 8014940:	f7fe fe44 	bl	80135cc <find_volume>
 8014944:	4603      	mov	r3, r0
 8014946:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 801494a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801494e:	2b00      	cmp	r3, #0
 8014950:	f040 8099 	bne.w	8014a86 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8014954:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 801495a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801495c:	695a      	ldr	r2, [r3, #20]
 801495e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014960:	699b      	ldr	r3, [r3, #24]
 8014962:	3b02      	subs	r3, #2
 8014964:	429a      	cmp	r2, r3
 8014966:	d804      	bhi.n	8014972 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8014968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801496a:	695a      	ldr	r2, [r3, #20]
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	601a      	str	r2, [r3, #0]
 8014970:	e089      	b.n	8014a86 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8014972:	2300      	movs	r3, #0
 8014974:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8014976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014978:	781b      	ldrb	r3, [r3, #0]
 801497a:	2b01      	cmp	r3, #1
 801497c:	d128      	bne.n	80149d0 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 801497e:	2302      	movs	r3, #2
 8014980:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014984:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8014986:	f107 0314 	add.w	r3, r7, #20
 801498a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801498c:	4618      	mov	r0, r3
 801498e:	f7fd f9a8 	bl	8011ce2 <get_fat>
 8014992:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8014994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014996:	f1b3 3fff 	cmp.w	r3, #4294967295
 801499a:	d103      	bne.n	80149a4 <f_getfree+0x7c>
 801499c:	2301      	movs	r3, #1
 801499e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80149a2:	e063      	b.n	8014a6c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80149a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149a6:	2b01      	cmp	r3, #1
 80149a8:	d103      	bne.n	80149b2 <f_getfree+0x8a>
 80149aa:	2302      	movs	r3, #2
 80149ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80149b0:	e05c      	b.n	8014a6c <f_getfree+0x144>
					if (stat == 0) nfree++;
 80149b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d102      	bne.n	80149be <f_getfree+0x96>
 80149b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80149ba:	3301      	adds	r3, #1
 80149bc:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 80149be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80149c0:	3301      	adds	r3, #1
 80149c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80149c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149c6:	699b      	ldr	r3, [r3, #24]
 80149c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80149ca:	429a      	cmp	r2, r3
 80149cc:	d3db      	bcc.n	8014986 <f_getfree+0x5e>
 80149ce:	e04d      	b.n	8014a6c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80149d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149d2:	699b      	ldr	r3, [r3, #24]
 80149d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80149d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80149da:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 80149dc:	2300      	movs	r3, #0
 80149de:	637b      	str	r3, [r7, #52]	@ 0x34
 80149e0:	2300      	movs	r3, #0
 80149e2:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 80149e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d113      	bne.n	8014a12 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80149ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80149ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149ee:	1c5a      	adds	r2, r3, #1
 80149f0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80149f2:	4619      	mov	r1, r3
 80149f4:	f7fd f8ba 	bl	8011b6c <move_window>
 80149f8:	4603      	mov	r3, r0
 80149fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 80149fe:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d131      	bne.n	8014a6a <f_getfree+0x142>
							p = fs->win;
 8014a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a08:	3334      	adds	r3, #52	@ 0x34
 8014a0a:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8014a0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014a10:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8014a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a14:	781b      	ldrb	r3, [r3, #0]
 8014a16:	2b02      	cmp	r3, #2
 8014a18:	d10f      	bne.n	8014a3a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8014a1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a1c:	f7fc fdf4 	bl	8011608 <ld_word>
 8014a20:	4603      	mov	r3, r0
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d102      	bne.n	8014a2c <f_getfree+0x104>
 8014a26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014a28:	3301      	adds	r3, #1
 8014a2a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8014a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a2e:	3302      	adds	r3, #2
 8014a30:	633b      	str	r3, [r7, #48]	@ 0x30
 8014a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a34:	3b02      	subs	r3, #2
 8014a36:	637b      	str	r3, [r7, #52]	@ 0x34
 8014a38:	e010      	b.n	8014a5c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8014a3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a3c:	f7fc fdfd 	bl	801163a <ld_dword>
 8014a40:	4603      	mov	r3, r0
 8014a42:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d102      	bne.n	8014a50 <f_getfree+0x128>
 8014a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014a4c:	3301      	adds	r3, #1
 8014a4e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8014a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a52:	3304      	adds	r3, #4
 8014a54:	633b      	str	r3, [r7, #48]	@ 0x30
 8014a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014a58:	3b04      	subs	r3, #4
 8014a5a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8014a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a5e:	3b01      	subs	r3, #1
 8014a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d1bd      	bne.n	80149e4 <f_getfree+0xbc>
 8014a68:	e000      	b.n	8014a6c <f_getfree+0x144>
							if (res != FR_OK) break;
 8014a6a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8014a6c:	68bb      	ldr	r3, [r7, #8]
 8014a6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014a70:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8014a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014a76:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8014a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a7a:	791a      	ldrb	r2, [r3, #4]
 8014a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a7e:	f042 0201 	orr.w	r2, r2, #1
 8014a82:	b2d2      	uxtb	r2, r2
 8014a84:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8014a86:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	3748      	adds	r7, #72	@ 0x48
 8014a8e:	46bd      	mov	sp, r7
 8014a90:	bd80      	pop	{r7, pc}
	...

08014a94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014a94:	b480      	push	{r7}
 8014a96:	b087      	sub	sp, #28
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	60f8      	str	r0, [r7, #12]
 8014a9c:	60b9      	str	r1, [r7, #8]
 8014a9e:	4613      	mov	r3, r2
 8014aa0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014aa2:	2301      	movs	r3, #1
 8014aa4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8014b28 <FATFS_LinkDriverEx+0x94>)
 8014aac:	7a5b      	ldrb	r3, [r3, #9]
 8014aae:	b2db      	uxtb	r3, r3
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d131      	bne.n	8014b18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8014b28 <FATFS_LinkDriverEx+0x94>)
 8014ab6:	7a5b      	ldrb	r3, [r3, #9]
 8014ab8:	b2db      	uxtb	r3, r3
 8014aba:	461a      	mov	r2, r3
 8014abc:	4b1a      	ldr	r3, [pc, #104]	@ (8014b28 <FATFS_LinkDriverEx+0x94>)
 8014abe:	2100      	movs	r1, #0
 8014ac0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014ac2:	4b19      	ldr	r3, [pc, #100]	@ (8014b28 <FATFS_LinkDriverEx+0x94>)
 8014ac4:	7a5b      	ldrb	r3, [r3, #9]
 8014ac6:	b2db      	uxtb	r3, r3
 8014ac8:	4a17      	ldr	r2, [pc, #92]	@ (8014b28 <FATFS_LinkDriverEx+0x94>)
 8014aca:	009b      	lsls	r3, r3, #2
 8014acc:	4413      	add	r3, r2
 8014ace:	68fa      	ldr	r2, [r7, #12]
 8014ad0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014ad2:	4b15      	ldr	r3, [pc, #84]	@ (8014b28 <FATFS_LinkDriverEx+0x94>)
 8014ad4:	7a5b      	ldrb	r3, [r3, #9]
 8014ad6:	b2db      	uxtb	r3, r3
 8014ad8:	461a      	mov	r2, r3
 8014ada:	4b13      	ldr	r3, [pc, #76]	@ (8014b28 <FATFS_LinkDriverEx+0x94>)
 8014adc:	4413      	add	r3, r2
 8014ade:	79fa      	ldrb	r2, [r7, #7]
 8014ae0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014ae2:	4b11      	ldr	r3, [pc, #68]	@ (8014b28 <FATFS_LinkDriverEx+0x94>)
 8014ae4:	7a5b      	ldrb	r3, [r3, #9]
 8014ae6:	b2db      	uxtb	r3, r3
 8014ae8:	1c5a      	adds	r2, r3, #1
 8014aea:	b2d1      	uxtb	r1, r2
 8014aec:	4a0e      	ldr	r2, [pc, #56]	@ (8014b28 <FATFS_LinkDriverEx+0x94>)
 8014aee:	7251      	strb	r1, [r2, #9]
 8014af0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014af2:	7dbb      	ldrb	r3, [r7, #22]
 8014af4:	3330      	adds	r3, #48	@ 0x30
 8014af6:	b2da      	uxtb	r2, r3
 8014af8:	68bb      	ldr	r3, [r7, #8]
 8014afa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014afc:	68bb      	ldr	r3, [r7, #8]
 8014afe:	3301      	adds	r3, #1
 8014b00:	223a      	movs	r2, #58	@ 0x3a
 8014b02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014b04:	68bb      	ldr	r3, [r7, #8]
 8014b06:	3302      	adds	r3, #2
 8014b08:	222f      	movs	r2, #47	@ 0x2f
 8014b0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014b0c:	68bb      	ldr	r3, [r7, #8]
 8014b0e:	3303      	adds	r3, #3
 8014b10:	2200      	movs	r2, #0
 8014b12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014b14:	2300      	movs	r3, #0
 8014b16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	371c      	adds	r7, #28
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b24:	4770      	bx	lr
 8014b26:	bf00      	nop
 8014b28:	20002b34 	.word	0x20002b34

08014b2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b082      	sub	sp, #8
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
 8014b34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014b36:	2200      	movs	r2, #0
 8014b38:	6839      	ldr	r1, [r7, #0]
 8014b3a:	6878      	ldr	r0, [r7, #4]
 8014b3c:	f7ff ffaa 	bl	8014a94 <FATFS_LinkDriverEx>
 8014b40:	4603      	mov	r3, r0
}
 8014b42:	4618      	mov	r0, r3
 8014b44:	3708      	adds	r7, #8
 8014b46:	46bd      	mov	sp, r7
 8014b48:	bd80      	pop	{r7, pc}
	...

08014b4c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8014b4c:	b480      	push	{r7}
 8014b4e:	b085      	sub	sp, #20
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	4603      	mov	r3, r0
 8014b54:	6039      	str	r1, [r7, #0]
 8014b56:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8014b58:	88fb      	ldrh	r3, [r7, #6]
 8014b5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8014b5c:	d802      	bhi.n	8014b64 <ff_convert+0x18>
		c = chr;
 8014b5e:	88fb      	ldrh	r3, [r7, #6]
 8014b60:	81fb      	strh	r3, [r7, #14]
 8014b62:	e025      	b.n	8014bb0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8014b64:	683b      	ldr	r3, [r7, #0]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d00b      	beq.n	8014b82 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8014b6a:	88fb      	ldrh	r3, [r7, #6]
 8014b6c:	2bff      	cmp	r3, #255	@ 0xff
 8014b6e:	d805      	bhi.n	8014b7c <ff_convert+0x30>
 8014b70:	88fb      	ldrh	r3, [r7, #6]
 8014b72:	3b80      	subs	r3, #128	@ 0x80
 8014b74:	4a12      	ldr	r2, [pc, #72]	@ (8014bc0 <ff_convert+0x74>)
 8014b76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014b7a:	e000      	b.n	8014b7e <ff_convert+0x32>
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	81fb      	strh	r3, [r7, #14]
 8014b80:	e016      	b.n	8014bb0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8014b82:	2300      	movs	r3, #0
 8014b84:	81fb      	strh	r3, [r7, #14]
 8014b86:	e009      	b.n	8014b9c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8014b88:	89fb      	ldrh	r3, [r7, #14]
 8014b8a:	4a0d      	ldr	r2, [pc, #52]	@ (8014bc0 <ff_convert+0x74>)
 8014b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014b90:	88fa      	ldrh	r2, [r7, #6]
 8014b92:	429a      	cmp	r2, r3
 8014b94:	d006      	beq.n	8014ba4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8014b96:	89fb      	ldrh	r3, [r7, #14]
 8014b98:	3301      	adds	r3, #1
 8014b9a:	81fb      	strh	r3, [r7, #14]
 8014b9c:	89fb      	ldrh	r3, [r7, #14]
 8014b9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8014ba0:	d9f2      	bls.n	8014b88 <ff_convert+0x3c>
 8014ba2:	e000      	b.n	8014ba6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8014ba4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8014ba6:	89fb      	ldrh	r3, [r7, #14]
 8014ba8:	3380      	adds	r3, #128	@ 0x80
 8014baa:	b29b      	uxth	r3, r3
 8014bac:	b2db      	uxtb	r3, r3
 8014bae:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8014bb0:	89fb      	ldrh	r3, [r7, #14]
}
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	3714      	adds	r7, #20
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bbc:	4770      	bx	lr
 8014bbe:	bf00      	nop
 8014bc0:	08017948 	.word	0x08017948

08014bc4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8014bc4:	b480      	push	{r7}
 8014bc6:	b087      	sub	sp, #28
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	4603      	mov	r3, r0
 8014bcc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8014bce:	88fb      	ldrh	r3, [r7, #6]
 8014bd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014bd4:	d201      	bcs.n	8014bda <ff_wtoupper+0x16>
 8014bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8014cd0 <ff_wtoupper+0x10c>)
 8014bd8:	e000      	b.n	8014bdc <ff_wtoupper+0x18>
 8014bda:	4b3e      	ldr	r3, [pc, #248]	@ (8014cd4 <ff_wtoupper+0x110>)
 8014bdc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8014bde:	697b      	ldr	r3, [r7, #20]
 8014be0:	1c9a      	adds	r2, r3, #2
 8014be2:	617a      	str	r2, [r7, #20]
 8014be4:	881b      	ldrh	r3, [r3, #0]
 8014be6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8014be8:	8a7b      	ldrh	r3, [r7, #18]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d068      	beq.n	8014cc0 <ff_wtoupper+0xfc>
 8014bee:	88fa      	ldrh	r2, [r7, #6]
 8014bf0:	8a7b      	ldrh	r3, [r7, #18]
 8014bf2:	429a      	cmp	r2, r3
 8014bf4:	d364      	bcc.n	8014cc0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8014bf6:	697b      	ldr	r3, [r7, #20]
 8014bf8:	1c9a      	adds	r2, r3, #2
 8014bfa:	617a      	str	r2, [r7, #20]
 8014bfc:	881b      	ldrh	r3, [r3, #0]
 8014bfe:	823b      	strh	r3, [r7, #16]
 8014c00:	8a3b      	ldrh	r3, [r7, #16]
 8014c02:	0a1b      	lsrs	r3, r3, #8
 8014c04:	81fb      	strh	r3, [r7, #14]
 8014c06:	8a3b      	ldrh	r3, [r7, #16]
 8014c08:	b2db      	uxtb	r3, r3
 8014c0a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8014c0c:	88fa      	ldrh	r2, [r7, #6]
 8014c0e:	8a79      	ldrh	r1, [r7, #18]
 8014c10:	8a3b      	ldrh	r3, [r7, #16]
 8014c12:	440b      	add	r3, r1
 8014c14:	429a      	cmp	r2, r3
 8014c16:	da49      	bge.n	8014cac <ff_wtoupper+0xe8>
			switch (cmd) {
 8014c18:	89fb      	ldrh	r3, [r7, #14]
 8014c1a:	2b08      	cmp	r3, #8
 8014c1c:	d84f      	bhi.n	8014cbe <ff_wtoupper+0xfa>
 8014c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8014c24 <ff_wtoupper+0x60>)
 8014c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c24:	08014c49 	.word	0x08014c49
 8014c28:	08014c5b 	.word	0x08014c5b
 8014c2c:	08014c71 	.word	0x08014c71
 8014c30:	08014c79 	.word	0x08014c79
 8014c34:	08014c81 	.word	0x08014c81
 8014c38:	08014c89 	.word	0x08014c89
 8014c3c:	08014c91 	.word	0x08014c91
 8014c40:	08014c99 	.word	0x08014c99
 8014c44:	08014ca1 	.word	0x08014ca1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8014c48:	88fa      	ldrh	r2, [r7, #6]
 8014c4a:	8a7b      	ldrh	r3, [r7, #18]
 8014c4c:	1ad3      	subs	r3, r2, r3
 8014c4e:	005b      	lsls	r3, r3, #1
 8014c50:	697a      	ldr	r2, [r7, #20]
 8014c52:	4413      	add	r3, r2
 8014c54:	881b      	ldrh	r3, [r3, #0]
 8014c56:	80fb      	strh	r3, [r7, #6]
 8014c58:	e027      	b.n	8014caa <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8014c5a:	88fa      	ldrh	r2, [r7, #6]
 8014c5c:	8a7b      	ldrh	r3, [r7, #18]
 8014c5e:	1ad3      	subs	r3, r2, r3
 8014c60:	b29b      	uxth	r3, r3
 8014c62:	f003 0301 	and.w	r3, r3, #1
 8014c66:	b29b      	uxth	r3, r3
 8014c68:	88fa      	ldrh	r2, [r7, #6]
 8014c6a:	1ad3      	subs	r3, r2, r3
 8014c6c:	80fb      	strh	r3, [r7, #6]
 8014c6e:	e01c      	b.n	8014caa <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8014c70:	88fb      	ldrh	r3, [r7, #6]
 8014c72:	3b10      	subs	r3, #16
 8014c74:	80fb      	strh	r3, [r7, #6]
 8014c76:	e018      	b.n	8014caa <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8014c78:	88fb      	ldrh	r3, [r7, #6]
 8014c7a:	3b20      	subs	r3, #32
 8014c7c:	80fb      	strh	r3, [r7, #6]
 8014c7e:	e014      	b.n	8014caa <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8014c80:	88fb      	ldrh	r3, [r7, #6]
 8014c82:	3b30      	subs	r3, #48	@ 0x30
 8014c84:	80fb      	strh	r3, [r7, #6]
 8014c86:	e010      	b.n	8014caa <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8014c88:	88fb      	ldrh	r3, [r7, #6]
 8014c8a:	3b1a      	subs	r3, #26
 8014c8c:	80fb      	strh	r3, [r7, #6]
 8014c8e:	e00c      	b.n	8014caa <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8014c90:	88fb      	ldrh	r3, [r7, #6]
 8014c92:	3308      	adds	r3, #8
 8014c94:	80fb      	strh	r3, [r7, #6]
 8014c96:	e008      	b.n	8014caa <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8014c98:	88fb      	ldrh	r3, [r7, #6]
 8014c9a:	3b50      	subs	r3, #80	@ 0x50
 8014c9c:	80fb      	strh	r3, [r7, #6]
 8014c9e:	e004      	b.n	8014caa <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8014ca0:	88fb      	ldrh	r3, [r7, #6]
 8014ca2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8014ca6:	80fb      	strh	r3, [r7, #6]
 8014ca8:	bf00      	nop
			}
			break;
 8014caa:	e008      	b.n	8014cbe <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8014cac:	89fb      	ldrh	r3, [r7, #14]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d195      	bne.n	8014bde <ff_wtoupper+0x1a>
 8014cb2:	8a3b      	ldrh	r3, [r7, #16]
 8014cb4:	005b      	lsls	r3, r3, #1
 8014cb6:	697a      	ldr	r2, [r7, #20]
 8014cb8:	4413      	add	r3, r2
 8014cba:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8014cbc:	e78f      	b.n	8014bde <ff_wtoupper+0x1a>
			break;
 8014cbe:	bf00      	nop
	}

	return chr;
 8014cc0:	88fb      	ldrh	r3, [r7, #6]
}
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	371c      	adds	r7, #28
 8014cc6:	46bd      	mov	sp, r7
 8014cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ccc:	4770      	bx	lr
 8014cce:	bf00      	nop
 8014cd0:	08017a48 	.word	0x08017a48
 8014cd4:	08017c3c 	.word	0x08017c3c

08014cd8 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b082      	sub	sp, #8
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8014ce0:	6878      	ldr	r0, [r7, #4]
 8014ce2:	f000 f811 	bl	8014d08 <malloc>
 8014ce6:	4603      	mov	r3, r0
}
 8014ce8:	4618      	mov	r0, r3
 8014cea:	3708      	adds	r7, #8
 8014cec:	46bd      	mov	sp, r7
 8014cee:	bd80      	pop	{r7, pc}

08014cf0 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b082      	sub	sp, #8
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8014cf8:	6878      	ldr	r0, [r7, #4]
 8014cfa:	f000 f80d 	bl	8014d18 <free>
}
 8014cfe:	bf00      	nop
 8014d00:	3708      	adds	r7, #8
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd80      	pop	{r7, pc}
	...

08014d08 <malloc>:
 8014d08:	4b02      	ldr	r3, [pc, #8]	@ (8014d14 <malloc+0xc>)
 8014d0a:	4601      	mov	r1, r0
 8014d0c:	6818      	ldr	r0, [r3, #0]
 8014d0e:	f000 b82d 	b.w	8014d6c <_malloc_r>
 8014d12:	bf00      	nop
 8014d14:	20000234 	.word	0x20000234

08014d18 <free>:
 8014d18:	4b02      	ldr	r3, [pc, #8]	@ (8014d24 <free+0xc>)
 8014d1a:	4601      	mov	r1, r0
 8014d1c:	6818      	ldr	r0, [r3, #0]
 8014d1e:	f000 bb7d 	b.w	801541c <_free_r>
 8014d22:	bf00      	nop
 8014d24:	20000234 	.word	0x20000234

08014d28 <sbrk_aligned>:
 8014d28:	b570      	push	{r4, r5, r6, lr}
 8014d2a:	4e0f      	ldr	r6, [pc, #60]	@ (8014d68 <sbrk_aligned+0x40>)
 8014d2c:	460c      	mov	r4, r1
 8014d2e:	6831      	ldr	r1, [r6, #0]
 8014d30:	4605      	mov	r5, r0
 8014d32:	b911      	cbnz	r1, 8014d3a <sbrk_aligned+0x12>
 8014d34:	f000 fb22 	bl	801537c <_sbrk_r>
 8014d38:	6030      	str	r0, [r6, #0]
 8014d3a:	4621      	mov	r1, r4
 8014d3c:	4628      	mov	r0, r5
 8014d3e:	f000 fb1d 	bl	801537c <_sbrk_r>
 8014d42:	1c43      	adds	r3, r0, #1
 8014d44:	d103      	bne.n	8014d4e <sbrk_aligned+0x26>
 8014d46:	f04f 34ff 	mov.w	r4, #4294967295
 8014d4a:	4620      	mov	r0, r4
 8014d4c:	bd70      	pop	{r4, r5, r6, pc}
 8014d4e:	1cc4      	adds	r4, r0, #3
 8014d50:	f024 0403 	bic.w	r4, r4, #3
 8014d54:	42a0      	cmp	r0, r4
 8014d56:	d0f8      	beq.n	8014d4a <sbrk_aligned+0x22>
 8014d58:	1a21      	subs	r1, r4, r0
 8014d5a:	4628      	mov	r0, r5
 8014d5c:	f000 fb0e 	bl	801537c <_sbrk_r>
 8014d60:	3001      	adds	r0, #1
 8014d62:	d1f2      	bne.n	8014d4a <sbrk_aligned+0x22>
 8014d64:	e7ef      	b.n	8014d46 <sbrk_aligned+0x1e>
 8014d66:	bf00      	nop
 8014d68:	20002b40 	.word	0x20002b40

08014d6c <_malloc_r>:
 8014d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d70:	1ccd      	adds	r5, r1, #3
 8014d72:	f025 0503 	bic.w	r5, r5, #3
 8014d76:	3508      	adds	r5, #8
 8014d78:	2d0c      	cmp	r5, #12
 8014d7a:	bf38      	it	cc
 8014d7c:	250c      	movcc	r5, #12
 8014d7e:	2d00      	cmp	r5, #0
 8014d80:	4606      	mov	r6, r0
 8014d82:	db01      	blt.n	8014d88 <_malloc_r+0x1c>
 8014d84:	42a9      	cmp	r1, r5
 8014d86:	d904      	bls.n	8014d92 <_malloc_r+0x26>
 8014d88:	230c      	movs	r3, #12
 8014d8a:	6033      	str	r3, [r6, #0]
 8014d8c:	2000      	movs	r0, #0
 8014d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014e68 <_malloc_r+0xfc>
 8014d96:	f000 f869 	bl	8014e6c <__malloc_lock>
 8014d9a:	f8d8 3000 	ldr.w	r3, [r8]
 8014d9e:	461c      	mov	r4, r3
 8014da0:	bb44      	cbnz	r4, 8014df4 <_malloc_r+0x88>
 8014da2:	4629      	mov	r1, r5
 8014da4:	4630      	mov	r0, r6
 8014da6:	f7ff ffbf 	bl	8014d28 <sbrk_aligned>
 8014daa:	1c43      	adds	r3, r0, #1
 8014dac:	4604      	mov	r4, r0
 8014dae:	d158      	bne.n	8014e62 <_malloc_r+0xf6>
 8014db0:	f8d8 4000 	ldr.w	r4, [r8]
 8014db4:	4627      	mov	r7, r4
 8014db6:	2f00      	cmp	r7, #0
 8014db8:	d143      	bne.n	8014e42 <_malloc_r+0xd6>
 8014dba:	2c00      	cmp	r4, #0
 8014dbc:	d04b      	beq.n	8014e56 <_malloc_r+0xea>
 8014dbe:	6823      	ldr	r3, [r4, #0]
 8014dc0:	4639      	mov	r1, r7
 8014dc2:	4630      	mov	r0, r6
 8014dc4:	eb04 0903 	add.w	r9, r4, r3
 8014dc8:	f000 fad8 	bl	801537c <_sbrk_r>
 8014dcc:	4581      	cmp	r9, r0
 8014dce:	d142      	bne.n	8014e56 <_malloc_r+0xea>
 8014dd0:	6821      	ldr	r1, [r4, #0]
 8014dd2:	1a6d      	subs	r5, r5, r1
 8014dd4:	4629      	mov	r1, r5
 8014dd6:	4630      	mov	r0, r6
 8014dd8:	f7ff ffa6 	bl	8014d28 <sbrk_aligned>
 8014ddc:	3001      	adds	r0, #1
 8014dde:	d03a      	beq.n	8014e56 <_malloc_r+0xea>
 8014de0:	6823      	ldr	r3, [r4, #0]
 8014de2:	442b      	add	r3, r5
 8014de4:	6023      	str	r3, [r4, #0]
 8014de6:	f8d8 3000 	ldr.w	r3, [r8]
 8014dea:	685a      	ldr	r2, [r3, #4]
 8014dec:	bb62      	cbnz	r2, 8014e48 <_malloc_r+0xdc>
 8014dee:	f8c8 7000 	str.w	r7, [r8]
 8014df2:	e00f      	b.n	8014e14 <_malloc_r+0xa8>
 8014df4:	6822      	ldr	r2, [r4, #0]
 8014df6:	1b52      	subs	r2, r2, r5
 8014df8:	d420      	bmi.n	8014e3c <_malloc_r+0xd0>
 8014dfa:	2a0b      	cmp	r2, #11
 8014dfc:	d917      	bls.n	8014e2e <_malloc_r+0xc2>
 8014dfe:	1961      	adds	r1, r4, r5
 8014e00:	42a3      	cmp	r3, r4
 8014e02:	6025      	str	r5, [r4, #0]
 8014e04:	bf18      	it	ne
 8014e06:	6059      	strne	r1, [r3, #4]
 8014e08:	6863      	ldr	r3, [r4, #4]
 8014e0a:	bf08      	it	eq
 8014e0c:	f8c8 1000 	streq.w	r1, [r8]
 8014e10:	5162      	str	r2, [r4, r5]
 8014e12:	604b      	str	r3, [r1, #4]
 8014e14:	4630      	mov	r0, r6
 8014e16:	f000 f82f 	bl	8014e78 <__malloc_unlock>
 8014e1a:	f104 000b 	add.w	r0, r4, #11
 8014e1e:	1d23      	adds	r3, r4, #4
 8014e20:	f020 0007 	bic.w	r0, r0, #7
 8014e24:	1ac2      	subs	r2, r0, r3
 8014e26:	bf1c      	itt	ne
 8014e28:	1a1b      	subne	r3, r3, r0
 8014e2a:	50a3      	strne	r3, [r4, r2]
 8014e2c:	e7af      	b.n	8014d8e <_malloc_r+0x22>
 8014e2e:	6862      	ldr	r2, [r4, #4]
 8014e30:	42a3      	cmp	r3, r4
 8014e32:	bf0c      	ite	eq
 8014e34:	f8c8 2000 	streq.w	r2, [r8]
 8014e38:	605a      	strne	r2, [r3, #4]
 8014e3a:	e7eb      	b.n	8014e14 <_malloc_r+0xa8>
 8014e3c:	4623      	mov	r3, r4
 8014e3e:	6864      	ldr	r4, [r4, #4]
 8014e40:	e7ae      	b.n	8014da0 <_malloc_r+0x34>
 8014e42:	463c      	mov	r4, r7
 8014e44:	687f      	ldr	r7, [r7, #4]
 8014e46:	e7b6      	b.n	8014db6 <_malloc_r+0x4a>
 8014e48:	461a      	mov	r2, r3
 8014e4a:	685b      	ldr	r3, [r3, #4]
 8014e4c:	42a3      	cmp	r3, r4
 8014e4e:	d1fb      	bne.n	8014e48 <_malloc_r+0xdc>
 8014e50:	2300      	movs	r3, #0
 8014e52:	6053      	str	r3, [r2, #4]
 8014e54:	e7de      	b.n	8014e14 <_malloc_r+0xa8>
 8014e56:	230c      	movs	r3, #12
 8014e58:	6033      	str	r3, [r6, #0]
 8014e5a:	4630      	mov	r0, r6
 8014e5c:	f000 f80c 	bl	8014e78 <__malloc_unlock>
 8014e60:	e794      	b.n	8014d8c <_malloc_r+0x20>
 8014e62:	6005      	str	r5, [r0, #0]
 8014e64:	e7d6      	b.n	8014e14 <_malloc_r+0xa8>
 8014e66:	bf00      	nop
 8014e68:	20002b44 	.word	0x20002b44

08014e6c <__malloc_lock>:
 8014e6c:	4801      	ldr	r0, [pc, #4]	@ (8014e74 <__malloc_lock+0x8>)
 8014e6e:	f000 bad2 	b.w	8015416 <__retarget_lock_acquire_recursive>
 8014e72:	bf00      	nop
 8014e74:	20002c88 	.word	0x20002c88

08014e78 <__malloc_unlock>:
 8014e78:	4801      	ldr	r0, [pc, #4]	@ (8014e80 <__malloc_unlock+0x8>)
 8014e7a:	f000 bacd 	b.w	8015418 <__retarget_lock_release_recursive>
 8014e7e:	bf00      	nop
 8014e80:	20002c88 	.word	0x20002c88

08014e84 <std>:
 8014e84:	2300      	movs	r3, #0
 8014e86:	b510      	push	{r4, lr}
 8014e88:	4604      	mov	r4, r0
 8014e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8014e8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014e92:	6083      	str	r3, [r0, #8]
 8014e94:	8181      	strh	r1, [r0, #12]
 8014e96:	6643      	str	r3, [r0, #100]	@ 0x64
 8014e98:	81c2      	strh	r2, [r0, #14]
 8014e9a:	6183      	str	r3, [r0, #24]
 8014e9c:	4619      	mov	r1, r3
 8014e9e:	2208      	movs	r2, #8
 8014ea0:	305c      	adds	r0, #92	@ 0x5c
 8014ea2:	f000 fa2f 	bl	8015304 <memset>
 8014ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8014edc <std+0x58>)
 8014ea8:	6263      	str	r3, [r4, #36]	@ 0x24
 8014eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8014ee0 <std+0x5c>)
 8014eac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014eae:	4b0d      	ldr	r3, [pc, #52]	@ (8014ee4 <std+0x60>)
 8014eb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8014ee8 <std+0x64>)
 8014eb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8014eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8014eec <std+0x68>)
 8014eb8:	6224      	str	r4, [r4, #32]
 8014eba:	429c      	cmp	r4, r3
 8014ebc:	d006      	beq.n	8014ecc <std+0x48>
 8014ebe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014ec2:	4294      	cmp	r4, r2
 8014ec4:	d002      	beq.n	8014ecc <std+0x48>
 8014ec6:	33d0      	adds	r3, #208	@ 0xd0
 8014ec8:	429c      	cmp	r4, r3
 8014eca:	d105      	bne.n	8014ed8 <std+0x54>
 8014ecc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ed4:	f000 ba9e 	b.w	8015414 <__retarget_lock_init_recursive>
 8014ed8:	bd10      	pop	{r4, pc}
 8014eda:	bf00      	nop
 8014edc:	08015155 	.word	0x08015155
 8014ee0:	08015177 	.word	0x08015177
 8014ee4:	080151af 	.word	0x080151af
 8014ee8:	080151d3 	.word	0x080151d3
 8014eec:	20002b48 	.word	0x20002b48

08014ef0 <stdio_exit_handler>:
 8014ef0:	4a02      	ldr	r2, [pc, #8]	@ (8014efc <stdio_exit_handler+0xc>)
 8014ef2:	4903      	ldr	r1, [pc, #12]	@ (8014f00 <stdio_exit_handler+0x10>)
 8014ef4:	4803      	ldr	r0, [pc, #12]	@ (8014f04 <stdio_exit_handler+0x14>)
 8014ef6:	f000 b869 	b.w	8014fcc <_fwalk_sglue>
 8014efa:	bf00      	nop
 8014efc:	20000228 	.word	0x20000228
 8014f00:	08015e05 	.word	0x08015e05
 8014f04:	20000238 	.word	0x20000238

08014f08 <cleanup_stdio>:
 8014f08:	6841      	ldr	r1, [r0, #4]
 8014f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8014f3c <cleanup_stdio+0x34>)
 8014f0c:	4299      	cmp	r1, r3
 8014f0e:	b510      	push	{r4, lr}
 8014f10:	4604      	mov	r4, r0
 8014f12:	d001      	beq.n	8014f18 <cleanup_stdio+0x10>
 8014f14:	f000 ff76 	bl	8015e04 <_fflush_r>
 8014f18:	68a1      	ldr	r1, [r4, #8]
 8014f1a:	4b09      	ldr	r3, [pc, #36]	@ (8014f40 <cleanup_stdio+0x38>)
 8014f1c:	4299      	cmp	r1, r3
 8014f1e:	d002      	beq.n	8014f26 <cleanup_stdio+0x1e>
 8014f20:	4620      	mov	r0, r4
 8014f22:	f000 ff6f 	bl	8015e04 <_fflush_r>
 8014f26:	68e1      	ldr	r1, [r4, #12]
 8014f28:	4b06      	ldr	r3, [pc, #24]	@ (8014f44 <cleanup_stdio+0x3c>)
 8014f2a:	4299      	cmp	r1, r3
 8014f2c:	d004      	beq.n	8014f38 <cleanup_stdio+0x30>
 8014f2e:	4620      	mov	r0, r4
 8014f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f34:	f000 bf66 	b.w	8015e04 <_fflush_r>
 8014f38:	bd10      	pop	{r4, pc}
 8014f3a:	bf00      	nop
 8014f3c:	20002b48 	.word	0x20002b48
 8014f40:	20002bb0 	.word	0x20002bb0
 8014f44:	20002c18 	.word	0x20002c18

08014f48 <global_stdio_init.part.0>:
 8014f48:	b510      	push	{r4, lr}
 8014f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8014f78 <global_stdio_init.part.0+0x30>)
 8014f4c:	4c0b      	ldr	r4, [pc, #44]	@ (8014f7c <global_stdio_init.part.0+0x34>)
 8014f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8014f80 <global_stdio_init.part.0+0x38>)
 8014f50:	601a      	str	r2, [r3, #0]
 8014f52:	4620      	mov	r0, r4
 8014f54:	2200      	movs	r2, #0
 8014f56:	2104      	movs	r1, #4
 8014f58:	f7ff ff94 	bl	8014e84 <std>
 8014f5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014f60:	2201      	movs	r2, #1
 8014f62:	2109      	movs	r1, #9
 8014f64:	f7ff ff8e 	bl	8014e84 <std>
 8014f68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014f6c:	2202      	movs	r2, #2
 8014f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f72:	2112      	movs	r1, #18
 8014f74:	f7ff bf86 	b.w	8014e84 <std>
 8014f78:	20002c80 	.word	0x20002c80
 8014f7c:	20002b48 	.word	0x20002b48
 8014f80:	08014ef1 	.word	0x08014ef1

08014f84 <__sfp_lock_acquire>:
 8014f84:	4801      	ldr	r0, [pc, #4]	@ (8014f8c <__sfp_lock_acquire+0x8>)
 8014f86:	f000 ba46 	b.w	8015416 <__retarget_lock_acquire_recursive>
 8014f8a:	bf00      	nop
 8014f8c:	20002c89 	.word	0x20002c89

08014f90 <__sfp_lock_release>:
 8014f90:	4801      	ldr	r0, [pc, #4]	@ (8014f98 <__sfp_lock_release+0x8>)
 8014f92:	f000 ba41 	b.w	8015418 <__retarget_lock_release_recursive>
 8014f96:	bf00      	nop
 8014f98:	20002c89 	.word	0x20002c89

08014f9c <__sinit>:
 8014f9c:	b510      	push	{r4, lr}
 8014f9e:	4604      	mov	r4, r0
 8014fa0:	f7ff fff0 	bl	8014f84 <__sfp_lock_acquire>
 8014fa4:	6a23      	ldr	r3, [r4, #32]
 8014fa6:	b11b      	cbz	r3, 8014fb0 <__sinit+0x14>
 8014fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fac:	f7ff bff0 	b.w	8014f90 <__sfp_lock_release>
 8014fb0:	4b04      	ldr	r3, [pc, #16]	@ (8014fc4 <__sinit+0x28>)
 8014fb2:	6223      	str	r3, [r4, #32]
 8014fb4:	4b04      	ldr	r3, [pc, #16]	@ (8014fc8 <__sinit+0x2c>)
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d1f5      	bne.n	8014fa8 <__sinit+0xc>
 8014fbc:	f7ff ffc4 	bl	8014f48 <global_stdio_init.part.0>
 8014fc0:	e7f2      	b.n	8014fa8 <__sinit+0xc>
 8014fc2:	bf00      	nop
 8014fc4:	08014f09 	.word	0x08014f09
 8014fc8:	20002c80 	.word	0x20002c80

08014fcc <_fwalk_sglue>:
 8014fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fd0:	4607      	mov	r7, r0
 8014fd2:	4688      	mov	r8, r1
 8014fd4:	4614      	mov	r4, r2
 8014fd6:	2600      	movs	r6, #0
 8014fd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014fdc:	f1b9 0901 	subs.w	r9, r9, #1
 8014fe0:	d505      	bpl.n	8014fee <_fwalk_sglue+0x22>
 8014fe2:	6824      	ldr	r4, [r4, #0]
 8014fe4:	2c00      	cmp	r4, #0
 8014fe6:	d1f7      	bne.n	8014fd8 <_fwalk_sglue+0xc>
 8014fe8:	4630      	mov	r0, r6
 8014fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fee:	89ab      	ldrh	r3, [r5, #12]
 8014ff0:	2b01      	cmp	r3, #1
 8014ff2:	d907      	bls.n	8015004 <_fwalk_sglue+0x38>
 8014ff4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014ff8:	3301      	adds	r3, #1
 8014ffa:	d003      	beq.n	8015004 <_fwalk_sglue+0x38>
 8014ffc:	4629      	mov	r1, r5
 8014ffe:	4638      	mov	r0, r7
 8015000:	47c0      	blx	r8
 8015002:	4306      	orrs	r6, r0
 8015004:	3568      	adds	r5, #104	@ 0x68
 8015006:	e7e9      	b.n	8014fdc <_fwalk_sglue+0x10>

08015008 <iprintf>:
 8015008:	b40f      	push	{r0, r1, r2, r3}
 801500a:	b507      	push	{r0, r1, r2, lr}
 801500c:	4906      	ldr	r1, [pc, #24]	@ (8015028 <iprintf+0x20>)
 801500e:	ab04      	add	r3, sp, #16
 8015010:	6808      	ldr	r0, [r1, #0]
 8015012:	f853 2b04 	ldr.w	r2, [r3], #4
 8015016:	6881      	ldr	r1, [r0, #8]
 8015018:	9301      	str	r3, [sp, #4]
 801501a:	f000 fbcb 	bl	80157b4 <_vfiprintf_r>
 801501e:	b003      	add	sp, #12
 8015020:	f85d eb04 	ldr.w	lr, [sp], #4
 8015024:	b004      	add	sp, #16
 8015026:	4770      	bx	lr
 8015028:	20000234 	.word	0x20000234

0801502c <_puts_r>:
 801502c:	6a03      	ldr	r3, [r0, #32]
 801502e:	b570      	push	{r4, r5, r6, lr}
 8015030:	6884      	ldr	r4, [r0, #8]
 8015032:	4605      	mov	r5, r0
 8015034:	460e      	mov	r6, r1
 8015036:	b90b      	cbnz	r3, 801503c <_puts_r+0x10>
 8015038:	f7ff ffb0 	bl	8014f9c <__sinit>
 801503c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801503e:	07db      	lsls	r3, r3, #31
 8015040:	d405      	bmi.n	801504e <_puts_r+0x22>
 8015042:	89a3      	ldrh	r3, [r4, #12]
 8015044:	0598      	lsls	r0, r3, #22
 8015046:	d402      	bmi.n	801504e <_puts_r+0x22>
 8015048:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801504a:	f000 f9e4 	bl	8015416 <__retarget_lock_acquire_recursive>
 801504e:	89a3      	ldrh	r3, [r4, #12]
 8015050:	0719      	lsls	r1, r3, #28
 8015052:	d502      	bpl.n	801505a <_puts_r+0x2e>
 8015054:	6923      	ldr	r3, [r4, #16]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d135      	bne.n	80150c6 <_puts_r+0x9a>
 801505a:	4621      	mov	r1, r4
 801505c:	4628      	mov	r0, r5
 801505e:	f000 f8fb 	bl	8015258 <__swsetup_r>
 8015062:	b380      	cbz	r0, 80150c6 <_puts_r+0x9a>
 8015064:	f04f 35ff 	mov.w	r5, #4294967295
 8015068:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801506a:	07da      	lsls	r2, r3, #31
 801506c:	d405      	bmi.n	801507a <_puts_r+0x4e>
 801506e:	89a3      	ldrh	r3, [r4, #12]
 8015070:	059b      	lsls	r3, r3, #22
 8015072:	d402      	bmi.n	801507a <_puts_r+0x4e>
 8015074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015076:	f000 f9cf 	bl	8015418 <__retarget_lock_release_recursive>
 801507a:	4628      	mov	r0, r5
 801507c:	bd70      	pop	{r4, r5, r6, pc}
 801507e:	2b00      	cmp	r3, #0
 8015080:	da04      	bge.n	801508c <_puts_r+0x60>
 8015082:	69a2      	ldr	r2, [r4, #24]
 8015084:	429a      	cmp	r2, r3
 8015086:	dc17      	bgt.n	80150b8 <_puts_r+0x8c>
 8015088:	290a      	cmp	r1, #10
 801508a:	d015      	beq.n	80150b8 <_puts_r+0x8c>
 801508c:	6823      	ldr	r3, [r4, #0]
 801508e:	1c5a      	adds	r2, r3, #1
 8015090:	6022      	str	r2, [r4, #0]
 8015092:	7019      	strb	r1, [r3, #0]
 8015094:	68a3      	ldr	r3, [r4, #8]
 8015096:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801509a:	3b01      	subs	r3, #1
 801509c:	60a3      	str	r3, [r4, #8]
 801509e:	2900      	cmp	r1, #0
 80150a0:	d1ed      	bne.n	801507e <_puts_r+0x52>
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	da11      	bge.n	80150ca <_puts_r+0x9e>
 80150a6:	4622      	mov	r2, r4
 80150a8:	210a      	movs	r1, #10
 80150aa:	4628      	mov	r0, r5
 80150ac:	f000 f895 	bl	80151da <__swbuf_r>
 80150b0:	3001      	adds	r0, #1
 80150b2:	d0d7      	beq.n	8015064 <_puts_r+0x38>
 80150b4:	250a      	movs	r5, #10
 80150b6:	e7d7      	b.n	8015068 <_puts_r+0x3c>
 80150b8:	4622      	mov	r2, r4
 80150ba:	4628      	mov	r0, r5
 80150bc:	f000 f88d 	bl	80151da <__swbuf_r>
 80150c0:	3001      	adds	r0, #1
 80150c2:	d1e7      	bne.n	8015094 <_puts_r+0x68>
 80150c4:	e7ce      	b.n	8015064 <_puts_r+0x38>
 80150c6:	3e01      	subs	r6, #1
 80150c8:	e7e4      	b.n	8015094 <_puts_r+0x68>
 80150ca:	6823      	ldr	r3, [r4, #0]
 80150cc:	1c5a      	adds	r2, r3, #1
 80150ce:	6022      	str	r2, [r4, #0]
 80150d0:	220a      	movs	r2, #10
 80150d2:	701a      	strb	r2, [r3, #0]
 80150d4:	e7ee      	b.n	80150b4 <_puts_r+0x88>
	...

080150d8 <puts>:
 80150d8:	4b02      	ldr	r3, [pc, #8]	@ (80150e4 <puts+0xc>)
 80150da:	4601      	mov	r1, r0
 80150dc:	6818      	ldr	r0, [r3, #0]
 80150de:	f7ff bfa5 	b.w	801502c <_puts_r>
 80150e2:	bf00      	nop
 80150e4:	20000234 	.word	0x20000234

080150e8 <sniprintf>:
 80150e8:	b40c      	push	{r2, r3}
 80150ea:	b530      	push	{r4, r5, lr}
 80150ec:	4b18      	ldr	r3, [pc, #96]	@ (8015150 <sniprintf+0x68>)
 80150ee:	1e0c      	subs	r4, r1, #0
 80150f0:	681d      	ldr	r5, [r3, #0]
 80150f2:	b09d      	sub	sp, #116	@ 0x74
 80150f4:	da08      	bge.n	8015108 <sniprintf+0x20>
 80150f6:	238b      	movs	r3, #139	@ 0x8b
 80150f8:	602b      	str	r3, [r5, #0]
 80150fa:	f04f 30ff 	mov.w	r0, #4294967295
 80150fe:	b01d      	add	sp, #116	@ 0x74
 8015100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015104:	b002      	add	sp, #8
 8015106:	4770      	bx	lr
 8015108:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801510c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015110:	f04f 0300 	mov.w	r3, #0
 8015114:	931b      	str	r3, [sp, #108]	@ 0x6c
 8015116:	bf14      	ite	ne
 8015118:	f104 33ff 	addne.w	r3, r4, #4294967295
 801511c:	4623      	moveq	r3, r4
 801511e:	9304      	str	r3, [sp, #16]
 8015120:	9307      	str	r3, [sp, #28]
 8015122:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015126:	9002      	str	r0, [sp, #8]
 8015128:	9006      	str	r0, [sp, #24]
 801512a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801512e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015130:	ab21      	add	r3, sp, #132	@ 0x84
 8015132:	a902      	add	r1, sp, #8
 8015134:	4628      	mov	r0, r5
 8015136:	9301      	str	r3, [sp, #4]
 8015138:	f000 fa16 	bl	8015568 <_svfiprintf_r>
 801513c:	1c43      	adds	r3, r0, #1
 801513e:	bfbc      	itt	lt
 8015140:	238b      	movlt	r3, #139	@ 0x8b
 8015142:	602b      	strlt	r3, [r5, #0]
 8015144:	2c00      	cmp	r4, #0
 8015146:	d0da      	beq.n	80150fe <sniprintf+0x16>
 8015148:	9b02      	ldr	r3, [sp, #8]
 801514a:	2200      	movs	r2, #0
 801514c:	701a      	strb	r2, [r3, #0]
 801514e:	e7d6      	b.n	80150fe <sniprintf+0x16>
 8015150:	20000234 	.word	0x20000234

08015154 <__sread>:
 8015154:	b510      	push	{r4, lr}
 8015156:	460c      	mov	r4, r1
 8015158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801515c:	f000 f8fc 	bl	8015358 <_read_r>
 8015160:	2800      	cmp	r0, #0
 8015162:	bfab      	itete	ge
 8015164:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015166:	89a3      	ldrhlt	r3, [r4, #12]
 8015168:	181b      	addge	r3, r3, r0
 801516a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801516e:	bfac      	ite	ge
 8015170:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015172:	81a3      	strhlt	r3, [r4, #12]
 8015174:	bd10      	pop	{r4, pc}

08015176 <__swrite>:
 8015176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801517a:	461f      	mov	r7, r3
 801517c:	898b      	ldrh	r3, [r1, #12]
 801517e:	05db      	lsls	r3, r3, #23
 8015180:	4605      	mov	r5, r0
 8015182:	460c      	mov	r4, r1
 8015184:	4616      	mov	r6, r2
 8015186:	d505      	bpl.n	8015194 <__swrite+0x1e>
 8015188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801518c:	2302      	movs	r3, #2
 801518e:	2200      	movs	r2, #0
 8015190:	f000 f8d0 	bl	8015334 <_lseek_r>
 8015194:	89a3      	ldrh	r3, [r4, #12]
 8015196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801519a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801519e:	81a3      	strh	r3, [r4, #12]
 80151a0:	4632      	mov	r2, r6
 80151a2:	463b      	mov	r3, r7
 80151a4:	4628      	mov	r0, r5
 80151a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80151aa:	f000 b8f7 	b.w	801539c <_write_r>

080151ae <__sseek>:
 80151ae:	b510      	push	{r4, lr}
 80151b0:	460c      	mov	r4, r1
 80151b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151b6:	f000 f8bd 	bl	8015334 <_lseek_r>
 80151ba:	1c43      	adds	r3, r0, #1
 80151bc:	89a3      	ldrh	r3, [r4, #12]
 80151be:	bf15      	itete	ne
 80151c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80151c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80151c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80151ca:	81a3      	strheq	r3, [r4, #12]
 80151cc:	bf18      	it	ne
 80151ce:	81a3      	strhne	r3, [r4, #12]
 80151d0:	bd10      	pop	{r4, pc}

080151d2 <__sclose>:
 80151d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151d6:	f000 b89d 	b.w	8015314 <_close_r>

080151da <__swbuf_r>:
 80151da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151dc:	460e      	mov	r6, r1
 80151de:	4614      	mov	r4, r2
 80151e0:	4605      	mov	r5, r0
 80151e2:	b118      	cbz	r0, 80151ec <__swbuf_r+0x12>
 80151e4:	6a03      	ldr	r3, [r0, #32]
 80151e6:	b90b      	cbnz	r3, 80151ec <__swbuf_r+0x12>
 80151e8:	f7ff fed8 	bl	8014f9c <__sinit>
 80151ec:	69a3      	ldr	r3, [r4, #24]
 80151ee:	60a3      	str	r3, [r4, #8]
 80151f0:	89a3      	ldrh	r3, [r4, #12]
 80151f2:	071a      	lsls	r2, r3, #28
 80151f4:	d501      	bpl.n	80151fa <__swbuf_r+0x20>
 80151f6:	6923      	ldr	r3, [r4, #16]
 80151f8:	b943      	cbnz	r3, 801520c <__swbuf_r+0x32>
 80151fa:	4621      	mov	r1, r4
 80151fc:	4628      	mov	r0, r5
 80151fe:	f000 f82b 	bl	8015258 <__swsetup_r>
 8015202:	b118      	cbz	r0, 801520c <__swbuf_r+0x32>
 8015204:	f04f 37ff 	mov.w	r7, #4294967295
 8015208:	4638      	mov	r0, r7
 801520a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801520c:	6823      	ldr	r3, [r4, #0]
 801520e:	6922      	ldr	r2, [r4, #16]
 8015210:	1a98      	subs	r0, r3, r2
 8015212:	6963      	ldr	r3, [r4, #20]
 8015214:	b2f6      	uxtb	r6, r6
 8015216:	4283      	cmp	r3, r0
 8015218:	4637      	mov	r7, r6
 801521a:	dc05      	bgt.n	8015228 <__swbuf_r+0x4e>
 801521c:	4621      	mov	r1, r4
 801521e:	4628      	mov	r0, r5
 8015220:	f000 fdf0 	bl	8015e04 <_fflush_r>
 8015224:	2800      	cmp	r0, #0
 8015226:	d1ed      	bne.n	8015204 <__swbuf_r+0x2a>
 8015228:	68a3      	ldr	r3, [r4, #8]
 801522a:	3b01      	subs	r3, #1
 801522c:	60a3      	str	r3, [r4, #8]
 801522e:	6823      	ldr	r3, [r4, #0]
 8015230:	1c5a      	adds	r2, r3, #1
 8015232:	6022      	str	r2, [r4, #0]
 8015234:	701e      	strb	r6, [r3, #0]
 8015236:	6962      	ldr	r2, [r4, #20]
 8015238:	1c43      	adds	r3, r0, #1
 801523a:	429a      	cmp	r2, r3
 801523c:	d004      	beq.n	8015248 <__swbuf_r+0x6e>
 801523e:	89a3      	ldrh	r3, [r4, #12]
 8015240:	07db      	lsls	r3, r3, #31
 8015242:	d5e1      	bpl.n	8015208 <__swbuf_r+0x2e>
 8015244:	2e0a      	cmp	r6, #10
 8015246:	d1df      	bne.n	8015208 <__swbuf_r+0x2e>
 8015248:	4621      	mov	r1, r4
 801524a:	4628      	mov	r0, r5
 801524c:	f000 fdda 	bl	8015e04 <_fflush_r>
 8015250:	2800      	cmp	r0, #0
 8015252:	d0d9      	beq.n	8015208 <__swbuf_r+0x2e>
 8015254:	e7d6      	b.n	8015204 <__swbuf_r+0x2a>
	...

08015258 <__swsetup_r>:
 8015258:	b538      	push	{r3, r4, r5, lr}
 801525a:	4b29      	ldr	r3, [pc, #164]	@ (8015300 <__swsetup_r+0xa8>)
 801525c:	4605      	mov	r5, r0
 801525e:	6818      	ldr	r0, [r3, #0]
 8015260:	460c      	mov	r4, r1
 8015262:	b118      	cbz	r0, 801526c <__swsetup_r+0x14>
 8015264:	6a03      	ldr	r3, [r0, #32]
 8015266:	b90b      	cbnz	r3, 801526c <__swsetup_r+0x14>
 8015268:	f7ff fe98 	bl	8014f9c <__sinit>
 801526c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015270:	0719      	lsls	r1, r3, #28
 8015272:	d422      	bmi.n	80152ba <__swsetup_r+0x62>
 8015274:	06da      	lsls	r2, r3, #27
 8015276:	d407      	bmi.n	8015288 <__swsetup_r+0x30>
 8015278:	2209      	movs	r2, #9
 801527a:	602a      	str	r2, [r5, #0]
 801527c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015280:	81a3      	strh	r3, [r4, #12]
 8015282:	f04f 30ff 	mov.w	r0, #4294967295
 8015286:	e033      	b.n	80152f0 <__swsetup_r+0x98>
 8015288:	0758      	lsls	r0, r3, #29
 801528a:	d512      	bpl.n	80152b2 <__swsetup_r+0x5a>
 801528c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801528e:	b141      	cbz	r1, 80152a2 <__swsetup_r+0x4a>
 8015290:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015294:	4299      	cmp	r1, r3
 8015296:	d002      	beq.n	801529e <__swsetup_r+0x46>
 8015298:	4628      	mov	r0, r5
 801529a:	f000 f8bf 	bl	801541c <_free_r>
 801529e:	2300      	movs	r3, #0
 80152a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80152a2:	89a3      	ldrh	r3, [r4, #12]
 80152a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80152a8:	81a3      	strh	r3, [r4, #12]
 80152aa:	2300      	movs	r3, #0
 80152ac:	6063      	str	r3, [r4, #4]
 80152ae:	6923      	ldr	r3, [r4, #16]
 80152b0:	6023      	str	r3, [r4, #0]
 80152b2:	89a3      	ldrh	r3, [r4, #12]
 80152b4:	f043 0308 	orr.w	r3, r3, #8
 80152b8:	81a3      	strh	r3, [r4, #12]
 80152ba:	6923      	ldr	r3, [r4, #16]
 80152bc:	b94b      	cbnz	r3, 80152d2 <__swsetup_r+0x7a>
 80152be:	89a3      	ldrh	r3, [r4, #12]
 80152c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80152c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80152c8:	d003      	beq.n	80152d2 <__swsetup_r+0x7a>
 80152ca:	4621      	mov	r1, r4
 80152cc:	4628      	mov	r0, r5
 80152ce:	f000 fde7 	bl	8015ea0 <__smakebuf_r>
 80152d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152d6:	f013 0201 	ands.w	r2, r3, #1
 80152da:	d00a      	beq.n	80152f2 <__swsetup_r+0x9a>
 80152dc:	2200      	movs	r2, #0
 80152de:	60a2      	str	r2, [r4, #8]
 80152e0:	6962      	ldr	r2, [r4, #20]
 80152e2:	4252      	negs	r2, r2
 80152e4:	61a2      	str	r2, [r4, #24]
 80152e6:	6922      	ldr	r2, [r4, #16]
 80152e8:	b942      	cbnz	r2, 80152fc <__swsetup_r+0xa4>
 80152ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80152ee:	d1c5      	bne.n	801527c <__swsetup_r+0x24>
 80152f0:	bd38      	pop	{r3, r4, r5, pc}
 80152f2:	0799      	lsls	r1, r3, #30
 80152f4:	bf58      	it	pl
 80152f6:	6962      	ldrpl	r2, [r4, #20]
 80152f8:	60a2      	str	r2, [r4, #8]
 80152fa:	e7f4      	b.n	80152e6 <__swsetup_r+0x8e>
 80152fc:	2000      	movs	r0, #0
 80152fe:	e7f7      	b.n	80152f0 <__swsetup_r+0x98>
 8015300:	20000234 	.word	0x20000234

08015304 <memset>:
 8015304:	4402      	add	r2, r0
 8015306:	4603      	mov	r3, r0
 8015308:	4293      	cmp	r3, r2
 801530a:	d100      	bne.n	801530e <memset+0xa>
 801530c:	4770      	bx	lr
 801530e:	f803 1b01 	strb.w	r1, [r3], #1
 8015312:	e7f9      	b.n	8015308 <memset+0x4>

08015314 <_close_r>:
 8015314:	b538      	push	{r3, r4, r5, lr}
 8015316:	4d06      	ldr	r5, [pc, #24]	@ (8015330 <_close_r+0x1c>)
 8015318:	2300      	movs	r3, #0
 801531a:	4604      	mov	r4, r0
 801531c:	4608      	mov	r0, r1
 801531e:	602b      	str	r3, [r5, #0]
 8015320:	f7ed fa89 	bl	8002836 <_close>
 8015324:	1c43      	adds	r3, r0, #1
 8015326:	d102      	bne.n	801532e <_close_r+0x1a>
 8015328:	682b      	ldr	r3, [r5, #0]
 801532a:	b103      	cbz	r3, 801532e <_close_r+0x1a>
 801532c:	6023      	str	r3, [r4, #0]
 801532e:	bd38      	pop	{r3, r4, r5, pc}
 8015330:	20002c84 	.word	0x20002c84

08015334 <_lseek_r>:
 8015334:	b538      	push	{r3, r4, r5, lr}
 8015336:	4d07      	ldr	r5, [pc, #28]	@ (8015354 <_lseek_r+0x20>)
 8015338:	4604      	mov	r4, r0
 801533a:	4608      	mov	r0, r1
 801533c:	4611      	mov	r1, r2
 801533e:	2200      	movs	r2, #0
 8015340:	602a      	str	r2, [r5, #0]
 8015342:	461a      	mov	r2, r3
 8015344:	f7ed fa9e 	bl	8002884 <_lseek>
 8015348:	1c43      	adds	r3, r0, #1
 801534a:	d102      	bne.n	8015352 <_lseek_r+0x1e>
 801534c:	682b      	ldr	r3, [r5, #0]
 801534e:	b103      	cbz	r3, 8015352 <_lseek_r+0x1e>
 8015350:	6023      	str	r3, [r4, #0]
 8015352:	bd38      	pop	{r3, r4, r5, pc}
 8015354:	20002c84 	.word	0x20002c84

08015358 <_read_r>:
 8015358:	b538      	push	{r3, r4, r5, lr}
 801535a:	4d07      	ldr	r5, [pc, #28]	@ (8015378 <_read_r+0x20>)
 801535c:	4604      	mov	r4, r0
 801535e:	4608      	mov	r0, r1
 8015360:	4611      	mov	r1, r2
 8015362:	2200      	movs	r2, #0
 8015364:	602a      	str	r2, [r5, #0]
 8015366:	461a      	mov	r2, r3
 8015368:	f7ed fa48 	bl	80027fc <_read>
 801536c:	1c43      	adds	r3, r0, #1
 801536e:	d102      	bne.n	8015376 <_read_r+0x1e>
 8015370:	682b      	ldr	r3, [r5, #0]
 8015372:	b103      	cbz	r3, 8015376 <_read_r+0x1e>
 8015374:	6023      	str	r3, [r4, #0]
 8015376:	bd38      	pop	{r3, r4, r5, pc}
 8015378:	20002c84 	.word	0x20002c84

0801537c <_sbrk_r>:
 801537c:	b538      	push	{r3, r4, r5, lr}
 801537e:	4d06      	ldr	r5, [pc, #24]	@ (8015398 <_sbrk_r+0x1c>)
 8015380:	2300      	movs	r3, #0
 8015382:	4604      	mov	r4, r0
 8015384:	4608      	mov	r0, r1
 8015386:	602b      	str	r3, [r5, #0]
 8015388:	f7ed fa8a 	bl	80028a0 <_sbrk>
 801538c:	1c43      	adds	r3, r0, #1
 801538e:	d102      	bne.n	8015396 <_sbrk_r+0x1a>
 8015390:	682b      	ldr	r3, [r5, #0]
 8015392:	b103      	cbz	r3, 8015396 <_sbrk_r+0x1a>
 8015394:	6023      	str	r3, [r4, #0]
 8015396:	bd38      	pop	{r3, r4, r5, pc}
 8015398:	20002c84 	.word	0x20002c84

0801539c <_write_r>:
 801539c:	b538      	push	{r3, r4, r5, lr}
 801539e:	4d07      	ldr	r5, [pc, #28]	@ (80153bc <_write_r+0x20>)
 80153a0:	4604      	mov	r4, r0
 80153a2:	4608      	mov	r0, r1
 80153a4:	4611      	mov	r1, r2
 80153a6:	2200      	movs	r2, #0
 80153a8:	602a      	str	r2, [r5, #0]
 80153aa:	461a      	mov	r2, r3
 80153ac:	f7eb fe21 	bl	8000ff2 <_write>
 80153b0:	1c43      	adds	r3, r0, #1
 80153b2:	d102      	bne.n	80153ba <_write_r+0x1e>
 80153b4:	682b      	ldr	r3, [r5, #0]
 80153b6:	b103      	cbz	r3, 80153ba <_write_r+0x1e>
 80153b8:	6023      	str	r3, [r4, #0]
 80153ba:	bd38      	pop	{r3, r4, r5, pc}
 80153bc:	20002c84 	.word	0x20002c84

080153c0 <__errno>:
 80153c0:	4b01      	ldr	r3, [pc, #4]	@ (80153c8 <__errno+0x8>)
 80153c2:	6818      	ldr	r0, [r3, #0]
 80153c4:	4770      	bx	lr
 80153c6:	bf00      	nop
 80153c8:	20000234 	.word	0x20000234

080153cc <__libc_init_array>:
 80153cc:	b570      	push	{r4, r5, r6, lr}
 80153ce:	4d0d      	ldr	r5, [pc, #52]	@ (8015404 <__libc_init_array+0x38>)
 80153d0:	4c0d      	ldr	r4, [pc, #52]	@ (8015408 <__libc_init_array+0x3c>)
 80153d2:	1b64      	subs	r4, r4, r5
 80153d4:	10a4      	asrs	r4, r4, #2
 80153d6:	2600      	movs	r6, #0
 80153d8:	42a6      	cmp	r6, r4
 80153da:	d109      	bne.n	80153f0 <__libc_init_array+0x24>
 80153dc:	4d0b      	ldr	r5, [pc, #44]	@ (801540c <__libc_init_array+0x40>)
 80153de:	4c0c      	ldr	r4, [pc, #48]	@ (8015410 <__libc_init_array+0x44>)
 80153e0:	f001 fdb4 	bl	8016f4c <_init>
 80153e4:	1b64      	subs	r4, r4, r5
 80153e6:	10a4      	asrs	r4, r4, #2
 80153e8:	2600      	movs	r6, #0
 80153ea:	42a6      	cmp	r6, r4
 80153ec:	d105      	bne.n	80153fa <__libc_init_array+0x2e>
 80153ee:	bd70      	pop	{r4, r5, r6, pc}
 80153f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80153f4:	4798      	blx	r3
 80153f6:	3601      	adds	r6, #1
 80153f8:	e7ee      	b.n	80153d8 <__libc_init_array+0xc>
 80153fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80153fe:	4798      	blx	r3
 8015400:	3601      	adds	r6, #1
 8015402:	e7f2      	b.n	80153ea <__libc_init_array+0x1e>
 8015404:	08017d78 	.word	0x08017d78
 8015408:	08017d78 	.word	0x08017d78
 801540c:	08017d78 	.word	0x08017d78
 8015410:	08017d7c 	.word	0x08017d7c

08015414 <__retarget_lock_init_recursive>:
 8015414:	4770      	bx	lr

08015416 <__retarget_lock_acquire_recursive>:
 8015416:	4770      	bx	lr

08015418 <__retarget_lock_release_recursive>:
 8015418:	4770      	bx	lr
	...

0801541c <_free_r>:
 801541c:	b538      	push	{r3, r4, r5, lr}
 801541e:	4605      	mov	r5, r0
 8015420:	2900      	cmp	r1, #0
 8015422:	d041      	beq.n	80154a8 <_free_r+0x8c>
 8015424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015428:	1f0c      	subs	r4, r1, #4
 801542a:	2b00      	cmp	r3, #0
 801542c:	bfb8      	it	lt
 801542e:	18e4      	addlt	r4, r4, r3
 8015430:	f7ff fd1c 	bl	8014e6c <__malloc_lock>
 8015434:	4a1d      	ldr	r2, [pc, #116]	@ (80154ac <_free_r+0x90>)
 8015436:	6813      	ldr	r3, [r2, #0]
 8015438:	b933      	cbnz	r3, 8015448 <_free_r+0x2c>
 801543a:	6063      	str	r3, [r4, #4]
 801543c:	6014      	str	r4, [r2, #0]
 801543e:	4628      	mov	r0, r5
 8015440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015444:	f7ff bd18 	b.w	8014e78 <__malloc_unlock>
 8015448:	42a3      	cmp	r3, r4
 801544a:	d908      	bls.n	801545e <_free_r+0x42>
 801544c:	6820      	ldr	r0, [r4, #0]
 801544e:	1821      	adds	r1, r4, r0
 8015450:	428b      	cmp	r3, r1
 8015452:	bf01      	itttt	eq
 8015454:	6819      	ldreq	r1, [r3, #0]
 8015456:	685b      	ldreq	r3, [r3, #4]
 8015458:	1809      	addeq	r1, r1, r0
 801545a:	6021      	streq	r1, [r4, #0]
 801545c:	e7ed      	b.n	801543a <_free_r+0x1e>
 801545e:	461a      	mov	r2, r3
 8015460:	685b      	ldr	r3, [r3, #4]
 8015462:	b10b      	cbz	r3, 8015468 <_free_r+0x4c>
 8015464:	42a3      	cmp	r3, r4
 8015466:	d9fa      	bls.n	801545e <_free_r+0x42>
 8015468:	6811      	ldr	r1, [r2, #0]
 801546a:	1850      	adds	r0, r2, r1
 801546c:	42a0      	cmp	r0, r4
 801546e:	d10b      	bne.n	8015488 <_free_r+0x6c>
 8015470:	6820      	ldr	r0, [r4, #0]
 8015472:	4401      	add	r1, r0
 8015474:	1850      	adds	r0, r2, r1
 8015476:	4283      	cmp	r3, r0
 8015478:	6011      	str	r1, [r2, #0]
 801547a:	d1e0      	bne.n	801543e <_free_r+0x22>
 801547c:	6818      	ldr	r0, [r3, #0]
 801547e:	685b      	ldr	r3, [r3, #4]
 8015480:	6053      	str	r3, [r2, #4]
 8015482:	4408      	add	r0, r1
 8015484:	6010      	str	r0, [r2, #0]
 8015486:	e7da      	b.n	801543e <_free_r+0x22>
 8015488:	d902      	bls.n	8015490 <_free_r+0x74>
 801548a:	230c      	movs	r3, #12
 801548c:	602b      	str	r3, [r5, #0]
 801548e:	e7d6      	b.n	801543e <_free_r+0x22>
 8015490:	6820      	ldr	r0, [r4, #0]
 8015492:	1821      	adds	r1, r4, r0
 8015494:	428b      	cmp	r3, r1
 8015496:	bf04      	itt	eq
 8015498:	6819      	ldreq	r1, [r3, #0]
 801549a:	685b      	ldreq	r3, [r3, #4]
 801549c:	6063      	str	r3, [r4, #4]
 801549e:	bf04      	itt	eq
 80154a0:	1809      	addeq	r1, r1, r0
 80154a2:	6021      	streq	r1, [r4, #0]
 80154a4:	6054      	str	r4, [r2, #4]
 80154a6:	e7ca      	b.n	801543e <_free_r+0x22>
 80154a8:	bd38      	pop	{r3, r4, r5, pc}
 80154aa:	bf00      	nop
 80154ac:	20002b44 	.word	0x20002b44

080154b0 <__ssputs_r>:
 80154b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154b4:	688e      	ldr	r6, [r1, #8]
 80154b6:	461f      	mov	r7, r3
 80154b8:	42be      	cmp	r6, r7
 80154ba:	680b      	ldr	r3, [r1, #0]
 80154bc:	4682      	mov	sl, r0
 80154be:	460c      	mov	r4, r1
 80154c0:	4690      	mov	r8, r2
 80154c2:	d82d      	bhi.n	8015520 <__ssputs_r+0x70>
 80154c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80154c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80154cc:	d026      	beq.n	801551c <__ssputs_r+0x6c>
 80154ce:	6965      	ldr	r5, [r4, #20]
 80154d0:	6909      	ldr	r1, [r1, #16]
 80154d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80154d6:	eba3 0901 	sub.w	r9, r3, r1
 80154da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80154de:	1c7b      	adds	r3, r7, #1
 80154e0:	444b      	add	r3, r9
 80154e2:	106d      	asrs	r5, r5, #1
 80154e4:	429d      	cmp	r5, r3
 80154e6:	bf38      	it	cc
 80154e8:	461d      	movcc	r5, r3
 80154ea:	0553      	lsls	r3, r2, #21
 80154ec:	d527      	bpl.n	801553e <__ssputs_r+0x8e>
 80154ee:	4629      	mov	r1, r5
 80154f0:	f7ff fc3c 	bl	8014d6c <_malloc_r>
 80154f4:	4606      	mov	r6, r0
 80154f6:	b360      	cbz	r0, 8015552 <__ssputs_r+0xa2>
 80154f8:	6921      	ldr	r1, [r4, #16]
 80154fa:	464a      	mov	r2, r9
 80154fc:	f000 fd48 	bl	8015f90 <memcpy>
 8015500:	89a3      	ldrh	r3, [r4, #12]
 8015502:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801550a:	81a3      	strh	r3, [r4, #12]
 801550c:	6126      	str	r6, [r4, #16]
 801550e:	6165      	str	r5, [r4, #20]
 8015510:	444e      	add	r6, r9
 8015512:	eba5 0509 	sub.w	r5, r5, r9
 8015516:	6026      	str	r6, [r4, #0]
 8015518:	60a5      	str	r5, [r4, #8]
 801551a:	463e      	mov	r6, r7
 801551c:	42be      	cmp	r6, r7
 801551e:	d900      	bls.n	8015522 <__ssputs_r+0x72>
 8015520:	463e      	mov	r6, r7
 8015522:	6820      	ldr	r0, [r4, #0]
 8015524:	4632      	mov	r2, r6
 8015526:	4641      	mov	r1, r8
 8015528:	f000 fcf6 	bl	8015f18 <memmove>
 801552c:	68a3      	ldr	r3, [r4, #8]
 801552e:	1b9b      	subs	r3, r3, r6
 8015530:	60a3      	str	r3, [r4, #8]
 8015532:	6823      	ldr	r3, [r4, #0]
 8015534:	4433      	add	r3, r6
 8015536:	6023      	str	r3, [r4, #0]
 8015538:	2000      	movs	r0, #0
 801553a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801553e:	462a      	mov	r2, r5
 8015540:	f000 fd34 	bl	8015fac <_realloc_r>
 8015544:	4606      	mov	r6, r0
 8015546:	2800      	cmp	r0, #0
 8015548:	d1e0      	bne.n	801550c <__ssputs_r+0x5c>
 801554a:	6921      	ldr	r1, [r4, #16]
 801554c:	4650      	mov	r0, sl
 801554e:	f7ff ff65 	bl	801541c <_free_r>
 8015552:	230c      	movs	r3, #12
 8015554:	f8ca 3000 	str.w	r3, [sl]
 8015558:	89a3      	ldrh	r3, [r4, #12]
 801555a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801555e:	81a3      	strh	r3, [r4, #12]
 8015560:	f04f 30ff 	mov.w	r0, #4294967295
 8015564:	e7e9      	b.n	801553a <__ssputs_r+0x8a>
	...

08015568 <_svfiprintf_r>:
 8015568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801556c:	4698      	mov	r8, r3
 801556e:	898b      	ldrh	r3, [r1, #12]
 8015570:	061b      	lsls	r3, r3, #24
 8015572:	b09d      	sub	sp, #116	@ 0x74
 8015574:	4607      	mov	r7, r0
 8015576:	460d      	mov	r5, r1
 8015578:	4614      	mov	r4, r2
 801557a:	d510      	bpl.n	801559e <_svfiprintf_r+0x36>
 801557c:	690b      	ldr	r3, [r1, #16]
 801557e:	b973      	cbnz	r3, 801559e <_svfiprintf_r+0x36>
 8015580:	2140      	movs	r1, #64	@ 0x40
 8015582:	f7ff fbf3 	bl	8014d6c <_malloc_r>
 8015586:	6028      	str	r0, [r5, #0]
 8015588:	6128      	str	r0, [r5, #16]
 801558a:	b930      	cbnz	r0, 801559a <_svfiprintf_r+0x32>
 801558c:	230c      	movs	r3, #12
 801558e:	603b      	str	r3, [r7, #0]
 8015590:	f04f 30ff 	mov.w	r0, #4294967295
 8015594:	b01d      	add	sp, #116	@ 0x74
 8015596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801559a:	2340      	movs	r3, #64	@ 0x40
 801559c:	616b      	str	r3, [r5, #20]
 801559e:	2300      	movs	r3, #0
 80155a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80155a2:	2320      	movs	r3, #32
 80155a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80155a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80155ac:	2330      	movs	r3, #48	@ 0x30
 80155ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801574c <_svfiprintf_r+0x1e4>
 80155b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80155b6:	f04f 0901 	mov.w	r9, #1
 80155ba:	4623      	mov	r3, r4
 80155bc:	469a      	mov	sl, r3
 80155be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80155c2:	b10a      	cbz	r2, 80155c8 <_svfiprintf_r+0x60>
 80155c4:	2a25      	cmp	r2, #37	@ 0x25
 80155c6:	d1f9      	bne.n	80155bc <_svfiprintf_r+0x54>
 80155c8:	ebba 0b04 	subs.w	fp, sl, r4
 80155cc:	d00b      	beq.n	80155e6 <_svfiprintf_r+0x7e>
 80155ce:	465b      	mov	r3, fp
 80155d0:	4622      	mov	r2, r4
 80155d2:	4629      	mov	r1, r5
 80155d4:	4638      	mov	r0, r7
 80155d6:	f7ff ff6b 	bl	80154b0 <__ssputs_r>
 80155da:	3001      	adds	r0, #1
 80155dc:	f000 80a7 	beq.w	801572e <_svfiprintf_r+0x1c6>
 80155e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80155e2:	445a      	add	r2, fp
 80155e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80155e6:	f89a 3000 	ldrb.w	r3, [sl]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	f000 809f 	beq.w	801572e <_svfiprintf_r+0x1c6>
 80155f0:	2300      	movs	r3, #0
 80155f2:	f04f 32ff 	mov.w	r2, #4294967295
 80155f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80155fa:	f10a 0a01 	add.w	sl, sl, #1
 80155fe:	9304      	str	r3, [sp, #16]
 8015600:	9307      	str	r3, [sp, #28]
 8015602:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015606:	931a      	str	r3, [sp, #104]	@ 0x68
 8015608:	4654      	mov	r4, sl
 801560a:	2205      	movs	r2, #5
 801560c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015610:	484e      	ldr	r0, [pc, #312]	@ (801574c <_svfiprintf_r+0x1e4>)
 8015612:	f7ea fdfd 	bl	8000210 <memchr>
 8015616:	9a04      	ldr	r2, [sp, #16]
 8015618:	b9d8      	cbnz	r0, 8015652 <_svfiprintf_r+0xea>
 801561a:	06d0      	lsls	r0, r2, #27
 801561c:	bf44      	itt	mi
 801561e:	2320      	movmi	r3, #32
 8015620:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015624:	0711      	lsls	r1, r2, #28
 8015626:	bf44      	itt	mi
 8015628:	232b      	movmi	r3, #43	@ 0x2b
 801562a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801562e:	f89a 3000 	ldrb.w	r3, [sl]
 8015632:	2b2a      	cmp	r3, #42	@ 0x2a
 8015634:	d015      	beq.n	8015662 <_svfiprintf_r+0xfa>
 8015636:	9a07      	ldr	r2, [sp, #28]
 8015638:	4654      	mov	r4, sl
 801563a:	2000      	movs	r0, #0
 801563c:	f04f 0c0a 	mov.w	ip, #10
 8015640:	4621      	mov	r1, r4
 8015642:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015646:	3b30      	subs	r3, #48	@ 0x30
 8015648:	2b09      	cmp	r3, #9
 801564a:	d94b      	bls.n	80156e4 <_svfiprintf_r+0x17c>
 801564c:	b1b0      	cbz	r0, 801567c <_svfiprintf_r+0x114>
 801564e:	9207      	str	r2, [sp, #28]
 8015650:	e014      	b.n	801567c <_svfiprintf_r+0x114>
 8015652:	eba0 0308 	sub.w	r3, r0, r8
 8015656:	fa09 f303 	lsl.w	r3, r9, r3
 801565a:	4313      	orrs	r3, r2
 801565c:	9304      	str	r3, [sp, #16]
 801565e:	46a2      	mov	sl, r4
 8015660:	e7d2      	b.n	8015608 <_svfiprintf_r+0xa0>
 8015662:	9b03      	ldr	r3, [sp, #12]
 8015664:	1d19      	adds	r1, r3, #4
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	9103      	str	r1, [sp, #12]
 801566a:	2b00      	cmp	r3, #0
 801566c:	bfbb      	ittet	lt
 801566e:	425b      	neglt	r3, r3
 8015670:	f042 0202 	orrlt.w	r2, r2, #2
 8015674:	9307      	strge	r3, [sp, #28]
 8015676:	9307      	strlt	r3, [sp, #28]
 8015678:	bfb8      	it	lt
 801567a:	9204      	strlt	r2, [sp, #16]
 801567c:	7823      	ldrb	r3, [r4, #0]
 801567e:	2b2e      	cmp	r3, #46	@ 0x2e
 8015680:	d10a      	bne.n	8015698 <_svfiprintf_r+0x130>
 8015682:	7863      	ldrb	r3, [r4, #1]
 8015684:	2b2a      	cmp	r3, #42	@ 0x2a
 8015686:	d132      	bne.n	80156ee <_svfiprintf_r+0x186>
 8015688:	9b03      	ldr	r3, [sp, #12]
 801568a:	1d1a      	adds	r2, r3, #4
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	9203      	str	r2, [sp, #12]
 8015690:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015694:	3402      	adds	r4, #2
 8015696:	9305      	str	r3, [sp, #20]
 8015698:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801575c <_svfiprintf_r+0x1f4>
 801569c:	7821      	ldrb	r1, [r4, #0]
 801569e:	2203      	movs	r2, #3
 80156a0:	4650      	mov	r0, sl
 80156a2:	f7ea fdb5 	bl	8000210 <memchr>
 80156a6:	b138      	cbz	r0, 80156b8 <_svfiprintf_r+0x150>
 80156a8:	9b04      	ldr	r3, [sp, #16]
 80156aa:	eba0 000a 	sub.w	r0, r0, sl
 80156ae:	2240      	movs	r2, #64	@ 0x40
 80156b0:	4082      	lsls	r2, r0
 80156b2:	4313      	orrs	r3, r2
 80156b4:	3401      	adds	r4, #1
 80156b6:	9304      	str	r3, [sp, #16]
 80156b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80156bc:	4824      	ldr	r0, [pc, #144]	@ (8015750 <_svfiprintf_r+0x1e8>)
 80156be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80156c2:	2206      	movs	r2, #6
 80156c4:	f7ea fda4 	bl	8000210 <memchr>
 80156c8:	2800      	cmp	r0, #0
 80156ca:	d036      	beq.n	801573a <_svfiprintf_r+0x1d2>
 80156cc:	4b21      	ldr	r3, [pc, #132]	@ (8015754 <_svfiprintf_r+0x1ec>)
 80156ce:	bb1b      	cbnz	r3, 8015718 <_svfiprintf_r+0x1b0>
 80156d0:	9b03      	ldr	r3, [sp, #12]
 80156d2:	3307      	adds	r3, #7
 80156d4:	f023 0307 	bic.w	r3, r3, #7
 80156d8:	3308      	adds	r3, #8
 80156da:	9303      	str	r3, [sp, #12]
 80156dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156de:	4433      	add	r3, r6
 80156e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80156e2:	e76a      	b.n	80155ba <_svfiprintf_r+0x52>
 80156e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80156e8:	460c      	mov	r4, r1
 80156ea:	2001      	movs	r0, #1
 80156ec:	e7a8      	b.n	8015640 <_svfiprintf_r+0xd8>
 80156ee:	2300      	movs	r3, #0
 80156f0:	3401      	adds	r4, #1
 80156f2:	9305      	str	r3, [sp, #20]
 80156f4:	4619      	mov	r1, r3
 80156f6:	f04f 0c0a 	mov.w	ip, #10
 80156fa:	4620      	mov	r0, r4
 80156fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015700:	3a30      	subs	r2, #48	@ 0x30
 8015702:	2a09      	cmp	r2, #9
 8015704:	d903      	bls.n	801570e <_svfiprintf_r+0x1a6>
 8015706:	2b00      	cmp	r3, #0
 8015708:	d0c6      	beq.n	8015698 <_svfiprintf_r+0x130>
 801570a:	9105      	str	r1, [sp, #20]
 801570c:	e7c4      	b.n	8015698 <_svfiprintf_r+0x130>
 801570e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015712:	4604      	mov	r4, r0
 8015714:	2301      	movs	r3, #1
 8015716:	e7f0      	b.n	80156fa <_svfiprintf_r+0x192>
 8015718:	ab03      	add	r3, sp, #12
 801571a:	9300      	str	r3, [sp, #0]
 801571c:	462a      	mov	r2, r5
 801571e:	4b0e      	ldr	r3, [pc, #56]	@ (8015758 <_svfiprintf_r+0x1f0>)
 8015720:	a904      	add	r1, sp, #16
 8015722:	4638      	mov	r0, r7
 8015724:	f3af 8000 	nop.w
 8015728:	1c42      	adds	r2, r0, #1
 801572a:	4606      	mov	r6, r0
 801572c:	d1d6      	bne.n	80156dc <_svfiprintf_r+0x174>
 801572e:	89ab      	ldrh	r3, [r5, #12]
 8015730:	065b      	lsls	r3, r3, #25
 8015732:	f53f af2d 	bmi.w	8015590 <_svfiprintf_r+0x28>
 8015736:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015738:	e72c      	b.n	8015594 <_svfiprintf_r+0x2c>
 801573a:	ab03      	add	r3, sp, #12
 801573c:	9300      	str	r3, [sp, #0]
 801573e:	462a      	mov	r2, r5
 8015740:	4b05      	ldr	r3, [pc, #20]	@ (8015758 <_svfiprintf_r+0x1f0>)
 8015742:	a904      	add	r1, sp, #16
 8015744:	4638      	mov	r0, r7
 8015746:	f000 f9bb 	bl	8015ac0 <_printf_i>
 801574a:	e7ed      	b.n	8015728 <_svfiprintf_r+0x1c0>
 801574c:	08017cf8 	.word	0x08017cf8
 8015750:	08017d02 	.word	0x08017d02
 8015754:	00000000 	.word	0x00000000
 8015758:	080154b1 	.word	0x080154b1
 801575c:	08017cfe 	.word	0x08017cfe

08015760 <__sfputc_r>:
 8015760:	6893      	ldr	r3, [r2, #8]
 8015762:	3b01      	subs	r3, #1
 8015764:	2b00      	cmp	r3, #0
 8015766:	b410      	push	{r4}
 8015768:	6093      	str	r3, [r2, #8]
 801576a:	da08      	bge.n	801577e <__sfputc_r+0x1e>
 801576c:	6994      	ldr	r4, [r2, #24]
 801576e:	42a3      	cmp	r3, r4
 8015770:	db01      	blt.n	8015776 <__sfputc_r+0x16>
 8015772:	290a      	cmp	r1, #10
 8015774:	d103      	bne.n	801577e <__sfputc_r+0x1e>
 8015776:	f85d 4b04 	ldr.w	r4, [sp], #4
 801577a:	f7ff bd2e 	b.w	80151da <__swbuf_r>
 801577e:	6813      	ldr	r3, [r2, #0]
 8015780:	1c58      	adds	r0, r3, #1
 8015782:	6010      	str	r0, [r2, #0]
 8015784:	7019      	strb	r1, [r3, #0]
 8015786:	4608      	mov	r0, r1
 8015788:	f85d 4b04 	ldr.w	r4, [sp], #4
 801578c:	4770      	bx	lr

0801578e <__sfputs_r>:
 801578e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015790:	4606      	mov	r6, r0
 8015792:	460f      	mov	r7, r1
 8015794:	4614      	mov	r4, r2
 8015796:	18d5      	adds	r5, r2, r3
 8015798:	42ac      	cmp	r4, r5
 801579a:	d101      	bne.n	80157a0 <__sfputs_r+0x12>
 801579c:	2000      	movs	r0, #0
 801579e:	e007      	b.n	80157b0 <__sfputs_r+0x22>
 80157a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157a4:	463a      	mov	r2, r7
 80157a6:	4630      	mov	r0, r6
 80157a8:	f7ff ffda 	bl	8015760 <__sfputc_r>
 80157ac:	1c43      	adds	r3, r0, #1
 80157ae:	d1f3      	bne.n	8015798 <__sfputs_r+0xa>
 80157b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080157b4 <_vfiprintf_r>:
 80157b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157b8:	460d      	mov	r5, r1
 80157ba:	b09d      	sub	sp, #116	@ 0x74
 80157bc:	4614      	mov	r4, r2
 80157be:	4698      	mov	r8, r3
 80157c0:	4606      	mov	r6, r0
 80157c2:	b118      	cbz	r0, 80157cc <_vfiprintf_r+0x18>
 80157c4:	6a03      	ldr	r3, [r0, #32]
 80157c6:	b90b      	cbnz	r3, 80157cc <_vfiprintf_r+0x18>
 80157c8:	f7ff fbe8 	bl	8014f9c <__sinit>
 80157cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80157ce:	07d9      	lsls	r1, r3, #31
 80157d0:	d405      	bmi.n	80157de <_vfiprintf_r+0x2a>
 80157d2:	89ab      	ldrh	r3, [r5, #12]
 80157d4:	059a      	lsls	r2, r3, #22
 80157d6:	d402      	bmi.n	80157de <_vfiprintf_r+0x2a>
 80157d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80157da:	f7ff fe1c 	bl	8015416 <__retarget_lock_acquire_recursive>
 80157de:	89ab      	ldrh	r3, [r5, #12]
 80157e0:	071b      	lsls	r3, r3, #28
 80157e2:	d501      	bpl.n	80157e8 <_vfiprintf_r+0x34>
 80157e4:	692b      	ldr	r3, [r5, #16]
 80157e6:	b99b      	cbnz	r3, 8015810 <_vfiprintf_r+0x5c>
 80157e8:	4629      	mov	r1, r5
 80157ea:	4630      	mov	r0, r6
 80157ec:	f7ff fd34 	bl	8015258 <__swsetup_r>
 80157f0:	b170      	cbz	r0, 8015810 <_vfiprintf_r+0x5c>
 80157f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80157f4:	07dc      	lsls	r4, r3, #31
 80157f6:	d504      	bpl.n	8015802 <_vfiprintf_r+0x4e>
 80157f8:	f04f 30ff 	mov.w	r0, #4294967295
 80157fc:	b01d      	add	sp, #116	@ 0x74
 80157fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015802:	89ab      	ldrh	r3, [r5, #12]
 8015804:	0598      	lsls	r0, r3, #22
 8015806:	d4f7      	bmi.n	80157f8 <_vfiprintf_r+0x44>
 8015808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801580a:	f7ff fe05 	bl	8015418 <__retarget_lock_release_recursive>
 801580e:	e7f3      	b.n	80157f8 <_vfiprintf_r+0x44>
 8015810:	2300      	movs	r3, #0
 8015812:	9309      	str	r3, [sp, #36]	@ 0x24
 8015814:	2320      	movs	r3, #32
 8015816:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801581a:	f8cd 800c 	str.w	r8, [sp, #12]
 801581e:	2330      	movs	r3, #48	@ 0x30
 8015820:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80159d0 <_vfiprintf_r+0x21c>
 8015824:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015828:	f04f 0901 	mov.w	r9, #1
 801582c:	4623      	mov	r3, r4
 801582e:	469a      	mov	sl, r3
 8015830:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015834:	b10a      	cbz	r2, 801583a <_vfiprintf_r+0x86>
 8015836:	2a25      	cmp	r2, #37	@ 0x25
 8015838:	d1f9      	bne.n	801582e <_vfiprintf_r+0x7a>
 801583a:	ebba 0b04 	subs.w	fp, sl, r4
 801583e:	d00b      	beq.n	8015858 <_vfiprintf_r+0xa4>
 8015840:	465b      	mov	r3, fp
 8015842:	4622      	mov	r2, r4
 8015844:	4629      	mov	r1, r5
 8015846:	4630      	mov	r0, r6
 8015848:	f7ff ffa1 	bl	801578e <__sfputs_r>
 801584c:	3001      	adds	r0, #1
 801584e:	f000 80a7 	beq.w	80159a0 <_vfiprintf_r+0x1ec>
 8015852:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015854:	445a      	add	r2, fp
 8015856:	9209      	str	r2, [sp, #36]	@ 0x24
 8015858:	f89a 3000 	ldrb.w	r3, [sl]
 801585c:	2b00      	cmp	r3, #0
 801585e:	f000 809f 	beq.w	80159a0 <_vfiprintf_r+0x1ec>
 8015862:	2300      	movs	r3, #0
 8015864:	f04f 32ff 	mov.w	r2, #4294967295
 8015868:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801586c:	f10a 0a01 	add.w	sl, sl, #1
 8015870:	9304      	str	r3, [sp, #16]
 8015872:	9307      	str	r3, [sp, #28]
 8015874:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015878:	931a      	str	r3, [sp, #104]	@ 0x68
 801587a:	4654      	mov	r4, sl
 801587c:	2205      	movs	r2, #5
 801587e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015882:	4853      	ldr	r0, [pc, #332]	@ (80159d0 <_vfiprintf_r+0x21c>)
 8015884:	f7ea fcc4 	bl	8000210 <memchr>
 8015888:	9a04      	ldr	r2, [sp, #16]
 801588a:	b9d8      	cbnz	r0, 80158c4 <_vfiprintf_r+0x110>
 801588c:	06d1      	lsls	r1, r2, #27
 801588e:	bf44      	itt	mi
 8015890:	2320      	movmi	r3, #32
 8015892:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015896:	0713      	lsls	r3, r2, #28
 8015898:	bf44      	itt	mi
 801589a:	232b      	movmi	r3, #43	@ 0x2b
 801589c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80158a0:	f89a 3000 	ldrb.w	r3, [sl]
 80158a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80158a6:	d015      	beq.n	80158d4 <_vfiprintf_r+0x120>
 80158a8:	9a07      	ldr	r2, [sp, #28]
 80158aa:	4654      	mov	r4, sl
 80158ac:	2000      	movs	r0, #0
 80158ae:	f04f 0c0a 	mov.w	ip, #10
 80158b2:	4621      	mov	r1, r4
 80158b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80158b8:	3b30      	subs	r3, #48	@ 0x30
 80158ba:	2b09      	cmp	r3, #9
 80158bc:	d94b      	bls.n	8015956 <_vfiprintf_r+0x1a2>
 80158be:	b1b0      	cbz	r0, 80158ee <_vfiprintf_r+0x13a>
 80158c0:	9207      	str	r2, [sp, #28]
 80158c2:	e014      	b.n	80158ee <_vfiprintf_r+0x13a>
 80158c4:	eba0 0308 	sub.w	r3, r0, r8
 80158c8:	fa09 f303 	lsl.w	r3, r9, r3
 80158cc:	4313      	orrs	r3, r2
 80158ce:	9304      	str	r3, [sp, #16]
 80158d0:	46a2      	mov	sl, r4
 80158d2:	e7d2      	b.n	801587a <_vfiprintf_r+0xc6>
 80158d4:	9b03      	ldr	r3, [sp, #12]
 80158d6:	1d19      	adds	r1, r3, #4
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	9103      	str	r1, [sp, #12]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	bfbb      	ittet	lt
 80158e0:	425b      	neglt	r3, r3
 80158e2:	f042 0202 	orrlt.w	r2, r2, #2
 80158e6:	9307      	strge	r3, [sp, #28]
 80158e8:	9307      	strlt	r3, [sp, #28]
 80158ea:	bfb8      	it	lt
 80158ec:	9204      	strlt	r2, [sp, #16]
 80158ee:	7823      	ldrb	r3, [r4, #0]
 80158f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80158f2:	d10a      	bne.n	801590a <_vfiprintf_r+0x156>
 80158f4:	7863      	ldrb	r3, [r4, #1]
 80158f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80158f8:	d132      	bne.n	8015960 <_vfiprintf_r+0x1ac>
 80158fa:	9b03      	ldr	r3, [sp, #12]
 80158fc:	1d1a      	adds	r2, r3, #4
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	9203      	str	r2, [sp, #12]
 8015902:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015906:	3402      	adds	r4, #2
 8015908:	9305      	str	r3, [sp, #20]
 801590a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80159e0 <_vfiprintf_r+0x22c>
 801590e:	7821      	ldrb	r1, [r4, #0]
 8015910:	2203      	movs	r2, #3
 8015912:	4650      	mov	r0, sl
 8015914:	f7ea fc7c 	bl	8000210 <memchr>
 8015918:	b138      	cbz	r0, 801592a <_vfiprintf_r+0x176>
 801591a:	9b04      	ldr	r3, [sp, #16]
 801591c:	eba0 000a 	sub.w	r0, r0, sl
 8015920:	2240      	movs	r2, #64	@ 0x40
 8015922:	4082      	lsls	r2, r0
 8015924:	4313      	orrs	r3, r2
 8015926:	3401      	adds	r4, #1
 8015928:	9304      	str	r3, [sp, #16]
 801592a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801592e:	4829      	ldr	r0, [pc, #164]	@ (80159d4 <_vfiprintf_r+0x220>)
 8015930:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015934:	2206      	movs	r2, #6
 8015936:	f7ea fc6b 	bl	8000210 <memchr>
 801593a:	2800      	cmp	r0, #0
 801593c:	d03f      	beq.n	80159be <_vfiprintf_r+0x20a>
 801593e:	4b26      	ldr	r3, [pc, #152]	@ (80159d8 <_vfiprintf_r+0x224>)
 8015940:	bb1b      	cbnz	r3, 801598a <_vfiprintf_r+0x1d6>
 8015942:	9b03      	ldr	r3, [sp, #12]
 8015944:	3307      	adds	r3, #7
 8015946:	f023 0307 	bic.w	r3, r3, #7
 801594a:	3308      	adds	r3, #8
 801594c:	9303      	str	r3, [sp, #12]
 801594e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015950:	443b      	add	r3, r7
 8015952:	9309      	str	r3, [sp, #36]	@ 0x24
 8015954:	e76a      	b.n	801582c <_vfiprintf_r+0x78>
 8015956:	fb0c 3202 	mla	r2, ip, r2, r3
 801595a:	460c      	mov	r4, r1
 801595c:	2001      	movs	r0, #1
 801595e:	e7a8      	b.n	80158b2 <_vfiprintf_r+0xfe>
 8015960:	2300      	movs	r3, #0
 8015962:	3401      	adds	r4, #1
 8015964:	9305      	str	r3, [sp, #20]
 8015966:	4619      	mov	r1, r3
 8015968:	f04f 0c0a 	mov.w	ip, #10
 801596c:	4620      	mov	r0, r4
 801596e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015972:	3a30      	subs	r2, #48	@ 0x30
 8015974:	2a09      	cmp	r2, #9
 8015976:	d903      	bls.n	8015980 <_vfiprintf_r+0x1cc>
 8015978:	2b00      	cmp	r3, #0
 801597a:	d0c6      	beq.n	801590a <_vfiprintf_r+0x156>
 801597c:	9105      	str	r1, [sp, #20]
 801597e:	e7c4      	b.n	801590a <_vfiprintf_r+0x156>
 8015980:	fb0c 2101 	mla	r1, ip, r1, r2
 8015984:	4604      	mov	r4, r0
 8015986:	2301      	movs	r3, #1
 8015988:	e7f0      	b.n	801596c <_vfiprintf_r+0x1b8>
 801598a:	ab03      	add	r3, sp, #12
 801598c:	9300      	str	r3, [sp, #0]
 801598e:	462a      	mov	r2, r5
 8015990:	4b12      	ldr	r3, [pc, #72]	@ (80159dc <_vfiprintf_r+0x228>)
 8015992:	a904      	add	r1, sp, #16
 8015994:	4630      	mov	r0, r6
 8015996:	f3af 8000 	nop.w
 801599a:	4607      	mov	r7, r0
 801599c:	1c78      	adds	r0, r7, #1
 801599e:	d1d6      	bne.n	801594e <_vfiprintf_r+0x19a>
 80159a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80159a2:	07d9      	lsls	r1, r3, #31
 80159a4:	d405      	bmi.n	80159b2 <_vfiprintf_r+0x1fe>
 80159a6:	89ab      	ldrh	r3, [r5, #12]
 80159a8:	059a      	lsls	r2, r3, #22
 80159aa:	d402      	bmi.n	80159b2 <_vfiprintf_r+0x1fe>
 80159ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80159ae:	f7ff fd33 	bl	8015418 <__retarget_lock_release_recursive>
 80159b2:	89ab      	ldrh	r3, [r5, #12]
 80159b4:	065b      	lsls	r3, r3, #25
 80159b6:	f53f af1f 	bmi.w	80157f8 <_vfiprintf_r+0x44>
 80159ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80159bc:	e71e      	b.n	80157fc <_vfiprintf_r+0x48>
 80159be:	ab03      	add	r3, sp, #12
 80159c0:	9300      	str	r3, [sp, #0]
 80159c2:	462a      	mov	r2, r5
 80159c4:	4b05      	ldr	r3, [pc, #20]	@ (80159dc <_vfiprintf_r+0x228>)
 80159c6:	a904      	add	r1, sp, #16
 80159c8:	4630      	mov	r0, r6
 80159ca:	f000 f879 	bl	8015ac0 <_printf_i>
 80159ce:	e7e4      	b.n	801599a <_vfiprintf_r+0x1e6>
 80159d0:	08017cf8 	.word	0x08017cf8
 80159d4:	08017d02 	.word	0x08017d02
 80159d8:	00000000 	.word	0x00000000
 80159dc:	0801578f 	.word	0x0801578f
 80159e0:	08017cfe 	.word	0x08017cfe

080159e4 <_printf_common>:
 80159e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159e8:	4616      	mov	r6, r2
 80159ea:	4698      	mov	r8, r3
 80159ec:	688a      	ldr	r2, [r1, #8]
 80159ee:	690b      	ldr	r3, [r1, #16]
 80159f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80159f4:	4293      	cmp	r3, r2
 80159f6:	bfb8      	it	lt
 80159f8:	4613      	movlt	r3, r2
 80159fa:	6033      	str	r3, [r6, #0]
 80159fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015a00:	4607      	mov	r7, r0
 8015a02:	460c      	mov	r4, r1
 8015a04:	b10a      	cbz	r2, 8015a0a <_printf_common+0x26>
 8015a06:	3301      	adds	r3, #1
 8015a08:	6033      	str	r3, [r6, #0]
 8015a0a:	6823      	ldr	r3, [r4, #0]
 8015a0c:	0699      	lsls	r1, r3, #26
 8015a0e:	bf42      	ittt	mi
 8015a10:	6833      	ldrmi	r3, [r6, #0]
 8015a12:	3302      	addmi	r3, #2
 8015a14:	6033      	strmi	r3, [r6, #0]
 8015a16:	6825      	ldr	r5, [r4, #0]
 8015a18:	f015 0506 	ands.w	r5, r5, #6
 8015a1c:	d106      	bne.n	8015a2c <_printf_common+0x48>
 8015a1e:	f104 0a19 	add.w	sl, r4, #25
 8015a22:	68e3      	ldr	r3, [r4, #12]
 8015a24:	6832      	ldr	r2, [r6, #0]
 8015a26:	1a9b      	subs	r3, r3, r2
 8015a28:	42ab      	cmp	r3, r5
 8015a2a:	dc26      	bgt.n	8015a7a <_printf_common+0x96>
 8015a2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015a30:	6822      	ldr	r2, [r4, #0]
 8015a32:	3b00      	subs	r3, #0
 8015a34:	bf18      	it	ne
 8015a36:	2301      	movne	r3, #1
 8015a38:	0692      	lsls	r2, r2, #26
 8015a3a:	d42b      	bmi.n	8015a94 <_printf_common+0xb0>
 8015a3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015a40:	4641      	mov	r1, r8
 8015a42:	4638      	mov	r0, r7
 8015a44:	47c8      	blx	r9
 8015a46:	3001      	adds	r0, #1
 8015a48:	d01e      	beq.n	8015a88 <_printf_common+0xa4>
 8015a4a:	6823      	ldr	r3, [r4, #0]
 8015a4c:	6922      	ldr	r2, [r4, #16]
 8015a4e:	f003 0306 	and.w	r3, r3, #6
 8015a52:	2b04      	cmp	r3, #4
 8015a54:	bf02      	ittt	eq
 8015a56:	68e5      	ldreq	r5, [r4, #12]
 8015a58:	6833      	ldreq	r3, [r6, #0]
 8015a5a:	1aed      	subeq	r5, r5, r3
 8015a5c:	68a3      	ldr	r3, [r4, #8]
 8015a5e:	bf0c      	ite	eq
 8015a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015a64:	2500      	movne	r5, #0
 8015a66:	4293      	cmp	r3, r2
 8015a68:	bfc4      	itt	gt
 8015a6a:	1a9b      	subgt	r3, r3, r2
 8015a6c:	18ed      	addgt	r5, r5, r3
 8015a6e:	2600      	movs	r6, #0
 8015a70:	341a      	adds	r4, #26
 8015a72:	42b5      	cmp	r5, r6
 8015a74:	d11a      	bne.n	8015aac <_printf_common+0xc8>
 8015a76:	2000      	movs	r0, #0
 8015a78:	e008      	b.n	8015a8c <_printf_common+0xa8>
 8015a7a:	2301      	movs	r3, #1
 8015a7c:	4652      	mov	r2, sl
 8015a7e:	4641      	mov	r1, r8
 8015a80:	4638      	mov	r0, r7
 8015a82:	47c8      	blx	r9
 8015a84:	3001      	adds	r0, #1
 8015a86:	d103      	bne.n	8015a90 <_printf_common+0xac>
 8015a88:	f04f 30ff 	mov.w	r0, #4294967295
 8015a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a90:	3501      	adds	r5, #1
 8015a92:	e7c6      	b.n	8015a22 <_printf_common+0x3e>
 8015a94:	18e1      	adds	r1, r4, r3
 8015a96:	1c5a      	adds	r2, r3, #1
 8015a98:	2030      	movs	r0, #48	@ 0x30
 8015a9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015a9e:	4422      	add	r2, r4
 8015aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015aa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015aa8:	3302      	adds	r3, #2
 8015aaa:	e7c7      	b.n	8015a3c <_printf_common+0x58>
 8015aac:	2301      	movs	r3, #1
 8015aae:	4622      	mov	r2, r4
 8015ab0:	4641      	mov	r1, r8
 8015ab2:	4638      	mov	r0, r7
 8015ab4:	47c8      	blx	r9
 8015ab6:	3001      	adds	r0, #1
 8015ab8:	d0e6      	beq.n	8015a88 <_printf_common+0xa4>
 8015aba:	3601      	adds	r6, #1
 8015abc:	e7d9      	b.n	8015a72 <_printf_common+0x8e>
	...

08015ac0 <_printf_i>:
 8015ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015ac4:	7e0f      	ldrb	r7, [r1, #24]
 8015ac6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015ac8:	2f78      	cmp	r7, #120	@ 0x78
 8015aca:	4691      	mov	r9, r2
 8015acc:	4680      	mov	r8, r0
 8015ace:	460c      	mov	r4, r1
 8015ad0:	469a      	mov	sl, r3
 8015ad2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015ad6:	d807      	bhi.n	8015ae8 <_printf_i+0x28>
 8015ad8:	2f62      	cmp	r7, #98	@ 0x62
 8015ada:	d80a      	bhi.n	8015af2 <_printf_i+0x32>
 8015adc:	2f00      	cmp	r7, #0
 8015ade:	f000 80d1 	beq.w	8015c84 <_printf_i+0x1c4>
 8015ae2:	2f58      	cmp	r7, #88	@ 0x58
 8015ae4:	f000 80b8 	beq.w	8015c58 <_printf_i+0x198>
 8015ae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015aec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015af0:	e03a      	b.n	8015b68 <_printf_i+0xa8>
 8015af2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015af6:	2b15      	cmp	r3, #21
 8015af8:	d8f6      	bhi.n	8015ae8 <_printf_i+0x28>
 8015afa:	a101      	add	r1, pc, #4	@ (adr r1, 8015b00 <_printf_i+0x40>)
 8015afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015b00:	08015b59 	.word	0x08015b59
 8015b04:	08015b6d 	.word	0x08015b6d
 8015b08:	08015ae9 	.word	0x08015ae9
 8015b0c:	08015ae9 	.word	0x08015ae9
 8015b10:	08015ae9 	.word	0x08015ae9
 8015b14:	08015ae9 	.word	0x08015ae9
 8015b18:	08015b6d 	.word	0x08015b6d
 8015b1c:	08015ae9 	.word	0x08015ae9
 8015b20:	08015ae9 	.word	0x08015ae9
 8015b24:	08015ae9 	.word	0x08015ae9
 8015b28:	08015ae9 	.word	0x08015ae9
 8015b2c:	08015c6b 	.word	0x08015c6b
 8015b30:	08015b97 	.word	0x08015b97
 8015b34:	08015c25 	.word	0x08015c25
 8015b38:	08015ae9 	.word	0x08015ae9
 8015b3c:	08015ae9 	.word	0x08015ae9
 8015b40:	08015c8d 	.word	0x08015c8d
 8015b44:	08015ae9 	.word	0x08015ae9
 8015b48:	08015b97 	.word	0x08015b97
 8015b4c:	08015ae9 	.word	0x08015ae9
 8015b50:	08015ae9 	.word	0x08015ae9
 8015b54:	08015c2d 	.word	0x08015c2d
 8015b58:	6833      	ldr	r3, [r6, #0]
 8015b5a:	1d1a      	adds	r2, r3, #4
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	6032      	str	r2, [r6, #0]
 8015b60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015b64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015b68:	2301      	movs	r3, #1
 8015b6a:	e09c      	b.n	8015ca6 <_printf_i+0x1e6>
 8015b6c:	6833      	ldr	r3, [r6, #0]
 8015b6e:	6820      	ldr	r0, [r4, #0]
 8015b70:	1d19      	adds	r1, r3, #4
 8015b72:	6031      	str	r1, [r6, #0]
 8015b74:	0606      	lsls	r6, r0, #24
 8015b76:	d501      	bpl.n	8015b7c <_printf_i+0xbc>
 8015b78:	681d      	ldr	r5, [r3, #0]
 8015b7a:	e003      	b.n	8015b84 <_printf_i+0xc4>
 8015b7c:	0645      	lsls	r5, r0, #25
 8015b7e:	d5fb      	bpl.n	8015b78 <_printf_i+0xb8>
 8015b80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015b84:	2d00      	cmp	r5, #0
 8015b86:	da03      	bge.n	8015b90 <_printf_i+0xd0>
 8015b88:	232d      	movs	r3, #45	@ 0x2d
 8015b8a:	426d      	negs	r5, r5
 8015b8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015b90:	4858      	ldr	r0, [pc, #352]	@ (8015cf4 <_printf_i+0x234>)
 8015b92:	230a      	movs	r3, #10
 8015b94:	e011      	b.n	8015bba <_printf_i+0xfa>
 8015b96:	6821      	ldr	r1, [r4, #0]
 8015b98:	6833      	ldr	r3, [r6, #0]
 8015b9a:	0608      	lsls	r0, r1, #24
 8015b9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8015ba0:	d402      	bmi.n	8015ba8 <_printf_i+0xe8>
 8015ba2:	0649      	lsls	r1, r1, #25
 8015ba4:	bf48      	it	mi
 8015ba6:	b2ad      	uxthmi	r5, r5
 8015ba8:	2f6f      	cmp	r7, #111	@ 0x6f
 8015baa:	4852      	ldr	r0, [pc, #328]	@ (8015cf4 <_printf_i+0x234>)
 8015bac:	6033      	str	r3, [r6, #0]
 8015bae:	bf14      	ite	ne
 8015bb0:	230a      	movne	r3, #10
 8015bb2:	2308      	moveq	r3, #8
 8015bb4:	2100      	movs	r1, #0
 8015bb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015bba:	6866      	ldr	r6, [r4, #4]
 8015bbc:	60a6      	str	r6, [r4, #8]
 8015bbe:	2e00      	cmp	r6, #0
 8015bc0:	db05      	blt.n	8015bce <_printf_i+0x10e>
 8015bc2:	6821      	ldr	r1, [r4, #0]
 8015bc4:	432e      	orrs	r6, r5
 8015bc6:	f021 0104 	bic.w	r1, r1, #4
 8015bca:	6021      	str	r1, [r4, #0]
 8015bcc:	d04b      	beq.n	8015c66 <_printf_i+0x1a6>
 8015bce:	4616      	mov	r6, r2
 8015bd0:	fbb5 f1f3 	udiv	r1, r5, r3
 8015bd4:	fb03 5711 	mls	r7, r3, r1, r5
 8015bd8:	5dc7      	ldrb	r7, [r0, r7]
 8015bda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015bde:	462f      	mov	r7, r5
 8015be0:	42bb      	cmp	r3, r7
 8015be2:	460d      	mov	r5, r1
 8015be4:	d9f4      	bls.n	8015bd0 <_printf_i+0x110>
 8015be6:	2b08      	cmp	r3, #8
 8015be8:	d10b      	bne.n	8015c02 <_printf_i+0x142>
 8015bea:	6823      	ldr	r3, [r4, #0]
 8015bec:	07df      	lsls	r7, r3, #31
 8015bee:	d508      	bpl.n	8015c02 <_printf_i+0x142>
 8015bf0:	6923      	ldr	r3, [r4, #16]
 8015bf2:	6861      	ldr	r1, [r4, #4]
 8015bf4:	4299      	cmp	r1, r3
 8015bf6:	bfde      	ittt	le
 8015bf8:	2330      	movle	r3, #48	@ 0x30
 8015bfa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015bfe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8015c02:	1b92      	subs	r2, r2, r6
 8015c04:	6122      	str	r2, [r4, #16]
 8015c06:	f8cd a000 	str.w	sl, [sp]
 8015c0a:	464b      	mov	r3, r9
 8015c0c:	aa03      	add	r2, sp, #12
 8015c0e:	4621      	mov	r1, r4
 8015c10:	4640      	mov	r0, r8
 8015c12:	f7ff fee7 	bl	80159e4 <_printf_common>
 8015c16:	3001      	adds	r0, #1
 8015c18:	d14a      	bne.n	8015cb0 <_printf_i+0x1f0>
 8015c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8015c1e:	b004      	add	sp, #16
 8015c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c24:	6823      	ldr	r3, [r4, #0]
 8015c26:	f043 0320 	orr.w	r3, r3, #32
 8015c2a:	6023      	str	r3, [r4, #0]
 8015c2c:	4832      	ldr	r0, [pc, #200]	@ (8015cf8 <_printf_i+0x238>)
 8015c2e:	2778      	movs	r7, #120	@ 0x78
 8015c30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015c34:	6823      	ldr	r3, [r4, #0]
 8015c36:	6831      	ldr	r1, [r6, #0]
 8015c38:	061f      	lsls	r7, r3, #24
 8015c3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8015c3e:	d402      	bmi.n	8015c46 <_printf_i+0x186>
 8015c40:	065f      	lsls	r7, r3, #25
 8015c42:	bf48      	it	mi
 8015c44:	b2ad      	uxthmi	r5, r5
 8015c46:	6031      	str	r1, [r6, #0]
 8015c48:	07d9      	lsls	r1, r3, #31
 8015c4a:	bf44      	itt	mi
 8015c4c:	f043 0320 	orrmi.w	r3, r3, #32
 8015c50:	6023      	strmi	r3, [r4, #0]
 8015c52:	b11d      	cbz	r5, 8015c5c <_printf_i+0x19c>
 8015c54:	2310      	movs	r3, #16
 8015c56:	e7ad      	b.n	8015bb4 <_printf_i+0xf4>
 8015c58:	4826      	ldr	r0, [pc, #152]	@ (8015cf4 <_printf_i+0x234>)
 8015c5a:	e7e9      	b.n	8015c30 <_printf_i+0x170>
 8015c5c:	6823      	ldr	r3, [r4, #0]
 8015c5e:	f023 0320 	bic.w	r3, r3, #32
 8015c62:	6023      	str	r3, [r4, #0]
 8015c64:	e7f6      	b.n	8015c54 <_printf_i+0x194>
 8015c66:	4616      	mov	r6, r2
 8015c68:	e7bd      	b.n	8015be6 <_printf_i+0x126>
 8015c6a:	6833      	ldr	r3, [r6, #0]
 8015c6c:	6825      	ldr	r5, [r4, #0]
 8015c6e:	6961      	ldr	r1, [r4, #20]
 8015c70:	1d18      	adds	r0, r3, #4
 8015c72:	6030      	str	r0, [r6, #0]
 8015c74:	062e      	lsls	r6, r5, #24
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	d501      	bpl.n	8015c7e <_printf_i+0x1be>
 8015c7a:	6019      	str	r1, [r3, #0]
 8015c7c:	e002      	b.n	8015c84 <_printf_i+0x1c4>
 8015c7e:	0668      	lsls	r0, r5, #25
 8015c80:	d5fb      	bpl.n	8015c7a <_printf_i+0x1ba>
 8015c82:	8019      	strh	r1, [r3, #0]
 8015c84:	2300      	movs	r3, #0
 8015c86:	6123      	str	r3, [r4, #16]
 8015c88:	4616      	mov	r6, r2
 8015c8a:	e7bc      	b.n	8015c06 <_printf_i+0x146>
 8015c8c:	6833      	ldr	r3, [r6, #0]
 8015c8e:	1d1a      	adds	r2, r3, #4
 8015c90:	6032      	str	r2, [r6, #0]
 8015c92:	681e      	ldr	r6, [r3, #0]
 8015c94:	6862      	ldr	r2, [r4, #4]
 8015c96:	2100      	movs	r1, #0
 8015c98:	4630      	mov	r0, r6
 8015c9a:	f7ea fab9 	bl	8000210 <memchr>
 8015c9e:	b108      	cbz	r0, 8015ca4 <_printf_i+0x1e4>
 8015ca0:	1b80      	subs	r0, r0, r6
 8015ca2:	6060      	str	r0, [r4, #4]
 8015ca4:	6863      	ldr	r3, [r4, #4]
 8015ca6:	6123      	str	r3, [r4, #16]
 8015ca8:	2300      	movs	r3, #0
 8015caa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015cae:	e7aa      	b.n	8015c06 <_printf_i+0x146>
 8015cb0:	6923      	ldr	r3, [r4, #16]
 8015cb2:	4632      	mov	r2, r6
 8015cb4:	4649      	mov	r1, r9
 8015cb6:	4640      	mov	r0, r8
 8015cb8:	47d0      	blx	sl
 8015cba:	3001      	adds	r0, #1
 8015cbc:	d0ad      	beq.n	8015c1a <_printf_i+0x15a>
 8015cbe:	6823      	ldr	r3, [r4, #0]
 8015cc0:	079b      	lsls	r3, r3, #30
 8015cc2:	d413      	bmi.n	8015cec <_printf_i+0x22c>
 8015cc4:	68e0      	ldr	r0, [r4, #12]
 8015cc6:	9b03      	ldr	r3, [sp, #12]
 8015cc8:	4298      	cmp	r0, r3
 8015cca:	bfb8      	it	lt
 8015ccc:	4618      	movlt	r0, r3
 8015cce:	e7a6      	b.n	8015c1e <_printf_i+0x15e>
 8015cd0:	2301      	movs	r3, #1
 8015cd2:	4632      	mov	r2, r6
 8015cd4:	4649      	mov	r1, r9
 8015cd6:	4640      	mov	r0, r8
 8015cd8:	47d0      	blx	sl
 8015cda:	3001      	adds	r0, #1
 8015cdc:	d09d      	beq.n	8015c1a <_printf_i+0x15a>
 8015cde:	3501      	adds	r5, #1
 8015ce0:	68e3      	ldr	r3, [r4, #12]
 8015ce2:	9903      	ldr	r1, [sp, #12]
 8015ce4:	1a5b      	subs	r3, r3, r1
 8015ce6:	42ab      	cmp	r3, r5
 8015ce8:	dcf2      	bgt.n	8015cd0 <_printf_i+0x210>
 8015cea:	e7eb      	b.n	8015cc4 <_printf_i+0x204>
 8015cec:	2500      	movs	r5, #0
 8015cee:	f104 0619 	add.w	r6, r4, #25
 8015cf2:	e7f5      	b.n	8015ce0 <_printf_i+0x220>
 8015cf4:	08017d09 	.word	0x08017d09
 8015cf8:	08017d1a 	.word	0x08017d1a

08015cfc <__sflush_r>:
 8015cfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d04:	0716      	lsls	r6, r2, #28
 8015d06:	4605      	mov	r5, r0
 8015d08:	460c      	mov	r4, r1
 8015d0a:	d454      	bmi.n	8015db6 <__sflush_r+0xba>
 8015d0c:	684b      	ldr	r3, [r1, #4]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	dc02      	bgt.n	8015d18 <__sflush_r+0x1c>
 8015d12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	dd48      	ble.n	8015daa <__sflush_r+0xae>
 8015d18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015d1a:	2e00      	cmp	r6, #0
 8015d1c:	d045      	beq.n	8015daa <__sflush_r+0xae>
 8015d1e:	2300      	movs	r3, #0
 8015d20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015d24:	682f      	ldr	r7, [r5, #0]
 8015d26:	6a21      	ldr	r1, [r4, #32]
 8015d28:	602b      	str	r3, [r5, #0]
 8015d2a:	d030      	beq.n	8015d8e <__sflush_r+0x92>
 8015d2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015d2e:	89a3      	ldrh	r3, [r4, #12]
 8015d30:	0759      	lsls	r1, r3, #29
 8015d32:	d505      	bpl.n	8015d40 <__sflush_r+0x44>
 8015d34:	6863      	ldr	r3, [r4, #4]
 8015d36:	1ad2      	subs	r2, r2, r3
 8015d38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015d3a:	b10b      	cbz	r3, 8015d40 <__sflush_r+0x44>
 8015d3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015d3e:	1ad2      	subs	r2, r2, r3
 8015d40:	2300      	movs	r3, #0
 8015d42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015d44:	6a21      	ldr	r1, [r4, #32]
 8015d46:	4628      	mov	r0, r5
 8015d48:	47b0      	blx	r6
 8015d4a:	1c43      	adds	r3, r0, #1
 8015d4c:	89a3      	ldrh	r3, [r4, #12]
 8015d4e:	d106      	bne.n	8015d5e <__sflush_r+0x62>
 8015d50:	6829      	ldr	r1, [r5, #0]
 8015d52:	291d      	cmp	r1, #29
 8015d54:	d82b      	bhi.n	8015dae <__sflush_r+0xb2>
 8015d56:	4a2a      	ldr	r2, [pc, #168]	@ (8015e00 <__sflush_r+0x104>)
 8015d58:	40ca      	lsrs	r2, r1
 8015d5a:	07d6      	lsls	r6, r2, #31
 8015d5c:	d527      	bpl.n	8015dae <__sflush_r+0xb2>
 8015d5e:	2200      	movs	r2, #0
 8015d60:	6062      	str	r2, [r4, #4]
 8015d62:	04d9      	lsls	r1, r3, #19
 8015d64:	6922      	ldr	r2, [r4, #16]
 8015d66:	6022      	str	r2, [r4, #0]
 8015d68:	d504      	bpl.n	8015d74 <__sflush_r+0x78>
 8015d6a:	1c42      	adds	r2, r0, #1
 8015d6c:	d101      	bne.n	8015d72 <__sflush_r+0x76>
 8015d6e:	682b      	ldr	r3, [r5, #0]
 8015d70:	b903      	cbnz	r3, 8015d74 <__sflush_r+0x78>
 8015d72:	6560      	str	r0, [r4, #84]	@ 0x54
 8015d74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015d76:	602f      	str	r7, [r5, #0]
 8015d78:	b1b9      	cbz	r1, 8015daa <__sflush_r+0xae>
 8015d7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015d7e:	4299      	cmp	r1, r3
 8015d80:	d002      	beq.n	8015d88 <__sflush_r+0x8c>
 8015d82:	4628      	mov	r0, r5
 8015d84:	f7ff fb4a 	bl	801541c <_free_r>
 8015d88:	2300      	movs	r3, #0
 8015d8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8015d8c:	e00d      	b.n	8015daa <__sflush_r+0xae>
 8015d8e:	2301      	movs	r3, #1
 8015d90:	4628      	mov	r0, r5
 8015d92:	47b0      	blx	r6
 8015d94:	4602      	mov	r2, r0
 8015d96:	1c50      	adds	r0, r2, #1
 8015d98:	d1c9      	bne.n	8015d2e <__sflush_r+0x32>
 8015d9a:	682b      	ldr	r3, [r5, #0]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d0c6      	beq.n	8015d2e <__sflush_r+0x32>
 8015da0:	2b1d      	cmp	r3, #29
 8015da2:	d001      	beq.n	8015da8 <__sflush_r+0xac>
 8015da4:	2b16      	cmp	r3, #22
 8015da6:	d11e      	bne.n	8015de6 <__sflush_r+0xea>
 8015da8:	602f      	str	r7, [r5, #0]
 8015daa:	2000      	movs	r0, #0
 8015dac:	e022      	b.n	8015df4 <__sflush_r+0xf8>
 8015dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015db2:	b21b      	sxth	r3, r3
 8015db4:	e01b      	b.n	8015dee <__sflush_r+0xf2>
 8015db6:	690f      	ldr	r7, [r1, #16]
 8015db8:	2f00      	cmp	r7, #0
 8015dba:	d0f6      	beq.n	8015daa <__sflush_r+0xae>
 8015dbc:	0793      	lsls	r3, r2, #30
 8015dbe:	680e      	ldr	r6, [r1, #0]
 8015dc0:	bf08      	it	eq
 8015dc2:	694b      	ldreq	r3, [r1, #20]
 8015dc4:	600f      	str	r7, [r1, #0]
 8015dc6:	bf18      	it	ne
 8015dc8:	2300      	movne	r3, #0
 8015dca:	eba6 0807 	sub.w	r8, r6, r7
 8015dce:	608b      	str	r3, [r1, #8]
 8015dd0:	f1b8 0f00 	cmp.w	r8, #0
 8015dd4:	dde9      	ble.n	8015daa <__sflush_r+0xae>
 8015dd6:	6a21      	ldr	r1, [r4, #32]
 8015dd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015dda:	4643      	mov	r3, r8
 8015ddc:	463a      	mov	r2, r7
 8015dde:	4628      	mov	r0, r5
 8015de0:	47b0      	blx	r6
 8015de2:	2800      	cmp	r0, #0
 8015de4:	dc08      	bgt.n	8015df8 <__sflush_r+0xfc>
 8015de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015dea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015dee:	81a3      	strh	r3, [r4, #12]
 8015df0:	f04f 30ff 	mov.w	r0, #4294967295
 8015df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015df8:	4407      	add	r7, r0
 8015dfa:	eba8 0800 	sub.w	r8, r8, r0
 8015dfe:	e7e7      	b.n	8015dd0 <__sflush_r+0xd4>
 8015e00:	20400001 	.word	0x20400001

08015e04 <_fflush_r>:
 8015e04:	b538      	push	{r3, r4, r5, lr}
 8015e06:	690b      	ldr	r3, [r1, #16]
 8015e08:	4605      	mov	r5, r0
 8015e0a:	460c      	mov	r4, r1
 8015e0c:	b913      	cbnz	r3, 8015e14 <_fflush_r+0x10>
 8015e0e:	2500      	movs	r5, #0
 8015e10:	4628      	mov	r0, r5
 8015e12:	bd38      	pop	{r3, r4, r5, pc}
 8015e14:	b118      	cbz	r0, 8015e1e <_fflush_r+0x1a>
 8015e16:	6a03      	ldr	r3, [r0, #32]
 8015e18:	b90b      	cbnz	r3, 8015e1e <_fflush_r+0x1a>
 8015e1a:	f7ff f8bf 	bl	8014f9c <__sinit>
 8015e1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d0f3      	beq.n	8015e0e <_fflush_r+0xa>
 8015e26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015e28:	07d0      	lsls	r0, r2, #31
 8015e2a:	d404      	bmi.n	8015e36 <_fflush_r+0x32>
 8015e2c:	0599      	lsls	r1, r3, #22
 8015e2e:	d402      	bmi.n	8015e36 <_fflush_r+0x32>
 8015e30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015e32:	f7ff faf0 	bl	8015416 <__retarget_lock_acquire_recursive>
 8015e36:	4628      	mov	r0, r5
 8015e38:	4621      	mov	r1, r4
 8015e3a:	f7ff ff5f 	bl	8015cfc <__sflush_r>
 8015e3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015e40:	07da      	lsls	r2, r3, #31
 8015e42:	4605      	mov	r5, r0
 8015e44:	d4e4      	bmi.n	8015e10 <_fflush_r+0xc>
 8015e46:	89a3      	ldrh	r3, [r4, #12]
 8015e48:	059b      	lsls	r3, r3, #22
 8015e4a:	d4e1      	bmi.n	8015e10 <_fflush_r+0xc>
 8015e4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015e4e:	f7ff fae3 	bl	8015418 <__retarget_lock_release_recursive>
 8015e52:	e7dd      	b.n	8015e10 <_fflush_r+0xc>

08015e54 <__swhatbuf_r>:
 8015e54:	b570      	push	{r4, r5, r6, lr}
 8015e56:	460c      	mov	r4, r1
 8015e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e5c:	2900      	cmp	r1, #0
 8015e5e:	b096      	sub	sp, #88	@ 0x58
 8015e60:	4615      	mov	r5, r2
 8015e62:	461e      	mov	r6, r3
 8015e64:	da0d      	bge.n	8015e82 <__swhatbuf_r+0x2e>
 8015e66:	89a3      	ldrh	r3, [r4, #12]
 8015e68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015e6c:	f04f 0100 	mov.w	r1, #0
 8015e70:	bf14      	ite	ne
 8015e72:	2340      	movne	r3, #64	@ 0x40
 8015e74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015e78:	2000      	movs	r0, #0
 8015e7a:	6031      	str	r1, [r6, #0]
 8015e7c:	602b      	str	r3, [r5, #0]
 8015e7e:	b016      	add	sp, #88	@ 0x58
 8015e80:	bd70      	pop	{r4, r5, r6, pc}
 8015e82:	466a      	mov	r2, sp
 8015e84:	f000 f862 	bl	8015f4c <_fstat_r>
 8015e88:	2800      	cmp	r0, #0
 8015e8a:	dbec      	blt.n	8015e66 <__swhatbuf_r+0x12>
 8015e8c:	9901      	ldr	r1, [sp, #4]
 8015e8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015e92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015e96:	4259      	negs	r1, r3
 8015e98:	4159      	adcs	r1, r3
 8015e9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015e9e:	e7eb      	b.n	8015e78 <__swhatbuf_r+0x24>

08015ea0 <__smakebuf_r>:
 8015ea0:	898b      	ldrh	r3, [r1, #12]
 8015ea2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ea4:	079d      	lsls	r5, r3, #30
 8015ea6:	4606      	mov	r6, r0
 8015ea8:	460c      	mov	r4, r1
 8015eaa:	d507      	bpl.n	8015ebc <__smakebuf_r+0x1c>
 8015eac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015eb0:	6023      	str	r3, [r4, #0]
 8015eb2:	6123      	str	r3, [r4, #16]
 8015eb4:	2301      	movs	r3, #1
 8015eb6:	6163      	str	r3, [r4, #20]
 8015eb8:	b003      	add	sp, #12
 8015eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ebc:	ab01      	add	r3, sp, #4
 8015ebe:	466a      	mov	r2, sp
 8015ec0:	f7ff ffc8 	bl	8015e54 <__swhatbuf_r>
 8015ec4:	9f00      	ldr	r7, [sp, #0]
 8015ec6:	4605      	mov	r5, r0
 8015ec8:	4639      	mov	r1, r7
 8015eca:	4630      	mov	r0, r6
 8015ecc:	f7fe ff4e 	bl	8014d6c <_malloc_r>
 8015ed0:	b948      	cbnz	r0, 8015ee6 <__smakebuf_r+0x46>
 8015ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ed6:	059a      	lsls	r2, r3, #22
 8015ed8:	d4ee      	bmi.n	8015eb8 <__smakebuf_r+0x18>
 8015eda:	f023 0303 	bic.w	r3, r3, #3
 8015ede:	f043 0302 	orr.w	r3, r3, #2
 8015ee2:	81a3      	strh	r3, [r4, #12]
 8015ee4:	e7e2      	b.n	8015eac <__smakebuf_r+0xc>
 8015ee6:	89a3      	ldrh	r3, [r4, #12]
 8015ee8:	6020      	str	r0, [r4, #0]
 8015eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015eee:	81a3      	strh	r3, [r4, #12]
 8015ef0:	9b01      	ldr	r3, [sp, #4]
 8015ef2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015ef6:	b15b      	cbz	r3, 8015f10 <__smakebuf_r+0x70>
 8015ef8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015efc:	4630      	mov	r0, r6
 8015efe:	f000 f837 	bl	8015f70 <_isatty_r>
 8015f02:	b128      	cbz	r0, 8015f10 <__smakebuf_r+0x70>
 8015f04:	89a3      	ldrh	r3, [r4, #12]
 8015f06:	f023 0303 	bic.w	r3, r3, #3
 8015f0a:	f043 0301 	orr.w	r3, r3, #1
 8015f0e:	81a3      	strh	r3, [r4, #12]
 8015f10:	89a3      	ldrh	r3, [r4, #12]
 8015f12:	431d      	orrs	r5, r3
 8015f14:	81a5      	strh	r5, [r4, #12]
 8015f16:	e7cf      	b.n	8015eb8 <__smakebuf_r+0x18>

08015f18 <memmove>:
 8015f18:	4288      	cmp	r0, r1
 8015f1a:	b510      	push	{r4, lr}
 8015f1c:	eb01 0402 	add.w	r4, r1, r2
 8015f20:	d902      	bls.n	8015f28 <memmove+0x10>
 8015f22:	4284      	cmp	r4, r0
 8015f24:	4623      	mov	r3, r4
 8015f26:	d807      	bhi.n	8015f38 <memmove+0x20>
 8015f28:	1e43      	subs	r3, r0, #1
 8015f2a:	42a1      	cmp	r1, r4
 8015f2c:	d008      	beq.n	8015f40 <memmove+0x28>
 8015f2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015f36:	e7f8      	b.n	8015f2a <memmove+0x12>
 8015f38:	4402      	add	r2, r0
 8015f3a:	4601      	mov	r1, r0
 8015f3c:	428a      	cmp	r2, r1
 8015f3e:	d100      	bne.n	8015f42 <memmove+0x2a>
 8015f40:	bd10      	pop	{r4, pc}
 8015f42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015f46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015f4a:	e7f7      	b.n	8015f3c <memmove+0x24>

08015f4c <_fstat_r>:
 8015f4c:	b538      	push	{r3, r4, r5, lr}
 8015f4e:	4d07      	ldr	r5, [pc, #28]	@ (8015f6c <_fstat_r+0x20>)
 8015f50:	2300      	movs	r3, #0
 8015f52:	4604      	mov	r4, r0
 8015f54:	4608      	mov	r0, r1
 8015f56:	4611      	mov	r1, r2
 8015f58:	602b      	str	r3, [r5, #0]
 8015f5a:	f7ec fc78 	bl	800284e <_fstat>
 8015f5e:	1c43      	adds	r3, r0, #1
 8015f60:	d102      	bne.n	8015f68 <_fstat_r+0x1c>
 8015f62:	682b      	ldr	r3, [r5, #0]
 8015f64:	b103      	cbz	r3, 8015f68 <_fstat_r+0x1c>
 8015f66:	6023      	str	r3, [r4, #0]
 8015f68:	bd38      	pop	{r3, r4, r5, pc}
 8015f6a:	bf00      	nop
 8015f6c:	20002c84 	.word	0x20002c84

08015f70 <_isatty_r>:
 8015f70:	b538      	push	{r3, r4, r5, lr}
 8015f72:	4d06      	ldr	r5, [pc, #24]	@ (8015f8c <_isatty_r+0x1c>)
 8015f74:	2300      	movs	r3, #0
 8015f76:	4604      	mov	r4, r0
 8015f78:	4608      	mov	r0, r1
 8015f7a:	602b      	str	r3, [r5, #0]
 8015f7c:	f7ec fc77 	bl	800286e <_isatty>
 8015f80:	1c43      	adds	r3, r0, #1
 8015f82:	d102      	bne.n	8015f8a <_isatty_r+0x1a>
 8015f84:	682b      	ldr	r3, [r5, #0]
 8015f86:	b103      	cbz	r3, 8015f8a <_isatty_r+0x1a>
 8015f88:	6023      	str	r3, [r4, #0]
 8015f8a:	bd38      	pop	{r3, r4, r5, pc}
 8015f8c:	20002c84 	.word	0x20002c84

08015f90 <memcpy>:
 8015f90:	440a      	add	r2, r1
 8015f92:	4291      	cmp	r1, r2
 8015f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8015f98:	d100      	bne.n	8015f9c <memcpy+0xc>
 8015f9a:	4770      	bx	lr
 8015f9c:	b510      	push	{r4, lr}
 8015f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015fa6:	4291      	cmp	r1, r2
 8015fa8:	d1f9      	bne.n	8015f9e <memcpy+0xe>
 8015faa:	bd10      	pop	{r4, pc}

08015fac <_realloc_r>:
 8015fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fb0:	4607      	mov	r7, r0
 8015fb2:	4614      	mov	r4, r2
 8015fb4:	460d      	mov	r5, r1
 8015fb6:	b921      	cbnz	r1, 8015fc2 <_realloc_r+0x16>
 8015fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015fbc:	4611      	mov	r1, r2
 8015fbe:	f7fe bed5 	b.w	8014d6c <_malloc_r>
 8015fc2:	b92a      	cbnz	r2, 8015fd0 <_realloc_r+0x24>
 8015fc4:	f7ff fa2a 	bl	801541c <_free_r>
 8015fc8:	4625      	mov	r5, r4
 8015fca:	4628      	mov	r0, r5
 8015fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fd0:	f000 f81a 	bl	8016008 <_malloc_usable_size_r>
 8015fd4:	4284      	cmp	r4, r0
 8015fd6:	4606      	mov	r6, r0
 8015fd8:	d802      	bhi.n	8015fe0 <_realloc_r+0x34>
 8015fda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015fde:	d8f4      	bhi.n	8015fca <_realloc_r+0x1e>
 8015fe0:	4621      	mov	r1, r4
 8015fe2:	4638      	mov	r0, r7
 8015fe4:	f7fe fec2 	bl	8014d6c <_malloc_r>
 8015fe8:	4680      	mov	r8, r0
 8015fea:	b908      	cbnz	r0, 8015ff0 <_realloc_r+0x44>
 8015fec:	4645      	mov	r5, r8
 8015fee:	e7ec      	b.n	8015fca <_realloc_r+0x1e>
 8015ff0:	42b4      	cmp	r4, r6
 8015ff2:	4622      	mov	r2, r4
 8015ff4:	4629      	mov	r1, r5
 8015ff6:	bf28      	it	cs
 8015ff8:	4632      	movcs	r2, r6
 8015ffa:	f7ff ffc9 	bl	8015f90 <memcpy>
 8015ffe:	4629      	mov	r1, r5
 8016000:	4638      	mov	r0, r7
 8016002:	f7ff fa0b 	bl	801541c <_free_r>
 8016006:	e7f1      	b.n	8015fec <_realloc_r+0x40>

08016008 <_malloc_usable_size_r>:
 8016008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801600c:	1f18      	subs	r0, r3, #4
 801600e:	2b00      	cmp	r3, #0
 8016010:	bfbc      	itt	lt
 8016012:	580b      	ldrlt	r3, [r1, r0]
 8016014:	18c0      	addlt	r0, r0, r3
 8016016:	4770      	bx	lr

08016018 <pow>:
 8016018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801601a:	ed2d 8b02 	vpush	{d8}
 801601e:	eeb0 8a40 	vmov.f32	s16, s0
 8016022:	eef0 8a60 	vmov.f32	s17, s1
 8016026:	ec55 4b11 	vmov	r4, r5, d1
 801602a:	f000 f8ad 	bl	8016188 <__ieee754_pow>
 801602e:	4622      	mov	r2, r4
 8016030:	462b      	mov	r3, r5
 8016032:	4620      	mov	r0, r4
 8016034:	4629      	mov	r1, r5
 8016036:	ec57 6b10 	vmov	r6, r7, d0
 801603a:	f7ea fd8f 	bl	8000b5c <__aeabi_dcmpun>
 801603e:	2800      	cmp	r0, #0
 8016040:	d13b      	bne.n	80160ba <pow+0xa2>
 8016042:	ec51 0b18 	vmov	r0, r1, d8
 8016046:	2200      	movs	r2, #0
 8016048:	2300      	movs	r3, #0
 801604a:	f7ea fd55 	bl	8000af8 <__aeabi_dcmpeq>
 801604e:	b1b8      	cbz	r0, 8016080 <pow+0x68>
 8016050:	2200      	movs	r2, #0
 8016052:	2300      	movs	r3, #0
 8016054:	4620      	mov	r0, r4
 8016056:	4629      	mov	r1, r5
 8016058:	f7ea fd4e 	bl	8000af8 <__aeabi_dcmpeq>
 801605c:	2800      	cmp	r0, #0
 801605e:	d146      	bne.n	80160ee <pow+0xd6>
 8016060:	ec45 4b10 	vmov	d0, r4, r5
 8016064:	f000 f848 	bl	80160f8 <finite>
 8016068:	b338      	cbz	r0, 80160ba <pow+0xa2>
 801606a:	2200      	movs	r2, #0
 801606c:	2300      	movs	r3, #0
 801606e:	4620      	mov	r0, r4
 8016070:	4629      	mov	r1, r5
 8016072:	f7ea fd4b 	bl	8000b0c <__aeabi_dcmplt>
 8016076:	b300      	cbz	r0, 80160ba <pow+0xa2>
 8016078:	f7ff f9a2 	bl	80153c0 <__errno>
 801607c:	2322      	movs	r3, #34	@ 0x22
 801607e:	e01b      	b.n	80160b8 <pow+0xa0>
 8016080:	ec47 6b10 	vmov	d0, r6, r7
 8016084:	f000 f838 	bl	80160f8 <finite>
 8016088:	b9e0      	cbnz	r0, 80160c4 <pow+0xac>
 801608a:	eeb0 0a48 	vmov.f32	s0, s16
 801608e:	eef0 0a68 	vmov.f32	s1, s17
 8016092:	f000 f831 	bl	80160f8 <finite>
 8016096:	b1a8      	cbz	r0, 80160c4 <pow+0xac>
 8016098:	ec45 4b10 	vmov	d0, r4, r5
 801609c:	f000 f82c 	bl	80160f8 <finite>
 80160a0:	b180      	cbz	r0, 80160c4 <pow+0xac>
 80160a2:	4632      	mov	r2, r6
 80160a4:	463b      	mov	r3, r7
 80160a6:	4630      	mov	r0, r6
 80160a8:	4639      	mov	r1, r7
 80160aa:	f7ea fd57 	bl	8000b5c <__aeabi_dcmpun>
 80160ae:	2800      	cmp	r0, #0
 80160b0:	d0e2      	beq.n	8016078 <pow+0x60>
 80160b2:	f7ff f985 	bl	80153c0 <__errno>
 80160b6:	2321      	movs	r3, #33	@ 0x21
 80160b8:	6003      	str	r3, [r0, #0]
 80160ba:	ecbd 8b02 	vpop	{d8}
 80160be:	ec47 6b10 	vmov	d0, r6, r7
 80160c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160c4:	2200      	movs	r2, #0
 80160c6:	2300      	movs	r3, #0
 80160c8:	4630      	mov	r0, r6
 80160ca:	4639      	mov	r1, r7
 80160cc:	f7ea fd14 	bl	8000af8 <__aeabi_dcmpeq>
 80160d0:	2800      	cmp	r0, #0
 80160d2:	d0f2      	beq.n	80160ba <pow+0xa2>
 80160d4:	eeb0 0a48 	vmov.f32	s0, s16
 80160d8:	eef0 0a68 	vmov.f32	s1, s17
 80160dc:	f000 f80c 	bl	80160f8 <finite>
 80160e0:	2800      	cmp	r0, #0
 80160e2:	d0ea      	beq.n	80160ba <pow+0xa2>
 80160e4:	ec45 4b10 	vmov	d0, r4, r5
 80160e8:	f000 f806 	bl	80160f8 <finite>
 80160ec:	e7c3      	b.n	8016076 <pow+0x5e>
 80160ee:	4f01      	ldr	r7, [pc, #4]	@ (80160f4 <pow+0xdc>)
 80160f0:	2600      	movs	r6, #0
 80160f2:	e7e2      	b.n	80160ba <pow+0xa2>
 80160f4:	3ff00000 	.word	0x3ff00000

080160f8 <finite>:
 80160f8:	b082      	sub	sp, #8
 80160fa:	ed8d 0b00 	vstr	d0, [sp]
 80160fe:	9801      	ldr	r0, [sp, #4]
 8016100:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8016104:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8016108:	0fc0      	lsrs	r0, r0, #31
 801610a:	b002      	add	sp, #8
 801610c:	4770      	bx	lr
	...

08016110 <trunc>:
 8016110:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8016114:	ec5c bb10 	vmov	fp, ip, d0
 8016118:	f3cc 500a 	ubfx	r0, ip, #20, #11
 801611c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8016120:	2913      	cmp	r1, #19
 8016122:	4664      	mov	r4, ip
 8016124:	dc14      	bgt.n	8016150 <trunc+0x40>
 8016126:	2900      	cmp	r1, #0
 8016128:	bfa4      	itt	ge
 801612a:	4b15      	ldrge	r3, [pc, #84]	@ (8016180 <trunc+0x70>)
 801612c:	fa43 f101 	asrge.w	r1, r3, r1
 8016130:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8016134:	bfad      	iteet	ge
 8016136:	4021      	andge	r1, r4
 8016138:	2200      	movlt	r2, #0
 801613a:	4603      	movlt	r3, r0
 801613c:	2200      	movge	r2, #0
 801613e:	bfa8      	it	ge
 8016140:	ea41 0300 	orrge.w	r3, r1, r0
 8016144:	4693      	mov	fp, r2
 8016146:	469c      	mov	ip, r3
 8016148:	ec4c bb10 	vmov	d0, fp, ip
 801614c:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8016150:	2933      	cmp	r1, #51	@ 0x33
 8016152:	dd0b      	ble.n	801616c <trunc+0x5c>
 8016154:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8016158:	d1f6      	bne.n	8016148 <trunc+0x38>
 801615a:	465a      	mov	r2, fp
 801615c:	4663      	mov	r3, ip
 801615e:	4658      	mov	r0, fp
 8016160:	4621      	mov	r1, r4
 8016162:	f7ea f8ab 	bl	80002bc <__adddf3>
 8016166:	4683      	mov	fp, r0
 8016168:	468c      	mov	ip, r1
 801616a:	e7ed      	b.n	8016148 <trunc+0x38>
 801616c:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 8016170:	f04f 33ff 	mov.w	r3, #4294967295
 8016174:	40c3      	lsrs	r3, r0
 8016176:	ea2b 0603 	bic.w	r6, fp, r3
 801617a:	46b3      	mov	fp, r6
 801617c:	46a4      	mov	ip, r4
 801617e:	e7e3      	b.n	8016148 <trunc+0x38>
 8016180:	fff00000 	.word	0xfff00000
 8016184:	00000000 	.word	0x00000000

08016188 <__ieee754_pow>:
 8016188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801618c:	b091      	sub	sp, #68	@ 0x44
 801618e:	ed8d 1b00 	vstr	d1, [sp]
 8016192:	e9dd 1900 	ldrd	r1, r9, [sp]
 8016196:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801619a:	ea5a 0001 	orrs.w	r0, sl, r1
 801619e:	ec57 6b10 	vmov	r6, r7, d0
 80161a2:	d113      	bne.n	80161cc <__ieee754_pow+0x44>
 80161a4:	19b3      	adds	r3, r6, r6
 80161a6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80161aa:	4152      	adcs	r2, r2
 80161ac:	4298      	cmp	r0, r3
 80161ae:	4b9a      	ldr	r3, [pc, #616]	@ (8016418 <__ieee754_pow+0x290>)
 80161b0:	4193      	sbcs	r3, r2
 80161b2:	f080 84ee 	bcs.w	8016b92 <__ieee754_pow+0xa0a>
 80161b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80161ba:	4630      	mov	r0, r6
 80161bc:	4639      	mov	r1, r7
 80161be:	f7ea f87d 	bl	80002bc <__adddf3>
 80161c2:	ec41 0b10 	vmov	d0, r0, r1
 80161c6:	b011      	add	sp, #68	@ 0x44
 80161c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161cc:	4a93      	ldr	r2, [pc, #588]	@ (801641c <__ieee754_pow+0x294>)
 80161ce:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 80161d2:	4295      	cmp	r5, r2
 80161d4:	46b8      	mov	r8, r7
 80161d6:	4633      	mov	r3, r6
 80161d8:	d80a      	bhi.n	80161f0 <__ieee754_pow+0x68>
 80161da:	d104      	bne.n	80161e6 <__ieee754_pow+0x5e>
 80161dc:	2e00      	cmp	r6, #0
 80161de:	d1ea      	bne.n	80161b6 <__ieee754_pow+0x2e>
 80161e0:	45aa      	cmp	sl, r5
 80161e2:	d8e8      	bhi.n	80161b6 <__ieee754_pow+0x2e>
 80161e4:	e001      	b.n	80161ea <__ieee754_pow+0x62>
 80161e6:	4592      	cmp	sl, r2
 80161e8:	d802      	bhi.n	80161f0 <__ieee754_pow+0x68>
 80161ea:	4592      	cmp	sl, r2
 80161ec:	d10f      	bne.n	801620e <__ieee754_pow+0x86>
 80161ee:	b171      	cbz	r1, 801620e <__ieee754_pow+0x86>
 80161f0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80161f4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80161f8:	ea58 0803 	orrs.w	r8, r8, r3
 80161fc:	d1db      	bne.n	80161b6 <__ieee754_pow+0x2e>
 80161fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016202:	18db      	adds	r3, r3, r3
 8016204:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8016208:	4152      	adcs	r2, r2
 801620a:	4598      	cmp	r8, r3
 801620c:	e7cf      	b.n	80161ae <__ieee754_pow+0x26>
 801620e:	f1b8 0f00 	cmp.w	r8, #0
 8016212:	46ab      	mov	fp, r5
 8016214:	da43      	bge.n	801629e <__ieee754_pow+0x116>
 8016216:	4a82      	ldr	r2, [pc, #520]	@ (8016420 <__ieee754_pow+0x298>)
 8016218:	4592      	cmp	sl, r2
 801621a:	d856      	bhi.n	80162ca <__ieee754_pow+0x142>
 801621c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8016220:	4592      	cmp	sl, r2
 8016222:	f240 84c5 	bls.w	8016bb0 <__ieee754_pow+0xa28>
 8016226:	ea4f 522a 	mov.w	r2, sl, asr #20
 801622a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801622e:	2a14      	cmp	r2, #20
 8016230:	dd18      	ble.n	8016264 <__ieee754_pow+0xdc>
 8016232:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8016236:	fa21 f402 	lsr.w	r4, r1, r2
 801623a:	fa04 f202 	lsl.w	r2, r4, r2
 801623e:	428a      	cmp	r2, r1
 8016240:	f040 84b6 	bne.w	8016bb0 <__ieee754_pow+0xa28>
 8016244:	f004 0401 	and.w	r4, r4, #1
 8016248:	f1c4 0402 	rsb	r4, r4, #2
 801624c:	2900      	cmp	r1, #0
 801624e:	d159      	bne.n	8016304 <__ieee754_pow+0x17c>
 8016250:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8016254:	d148      	bne.n	80162e8 <__ieee754_pow+0x160>
 8016256:	4632      	mov	r2, r6
 8016258:	463b      	mov	r3, r7
 801625a:	4630      	mov	r0, r6
 801625c:	4639      	mov	r1, r7
 801625e:	f7ea f9e3 	bl	8000628 <__aeabi_dmul>
 8016262:	e7ae      	b.n	80161c2 <__ieee754_pow+0x3a>
 8016264:	2900      	cmp	r1, #0
 8016266:	d14c      	bne.n	8016302 <__ieee754_pow+0x17a>
 8016268:	f1c2 0214 	rsb	r2, r2, #20
 801626c:	fa4a f402 	asr.w	r4, sl, r2
 8016270:	fa04 f202 	lsl.w	r2, r4, r2
 8016274:	4552      	cmp	r2, sl
 8016276:	f040 8498 	bne.w	8016baa <__ieee754_pow+0xa22>
 801627a:	f004 0401 	and.w	r4, r4, #1
 801627e:	f1c4 0402 	rsb	r4, r4, #2
 8016282:	4a68      	ldr	r2, [pc, #416]	@ (8016424 <__ieee754_pow+0x29c>)
 8016284:	4592      	cmp	sl, r2
 8016286:	d1e3      	bne.n	8016250 <__ieee754_pow+0xc8>
 8016288:	f1b9 0f00 	cmp.w	r9, #0
 801628c:	f280 8489 	bge.w	8016ba2 <__ieee754_pow+0xa1a>
 8016290:	4964      	ldr	r1, [pc, #400]	@ (8016424 <__ieee754_pow+0x29c>)
 8016292:	4632      	mov	r2, r6
 8016294:	463b      	mov	r3, r7
 8016296:	2000      	movs	r0, #0
 8016298:	f7ea faf0 	bl	800087c <__aeabi_ddiv>
 801629c:	e791      	b.n	80161c2 <__ieee754_pow+0x3a>
 801629e:	2400      	movs	r4, #0
 80162a0:	bb81      	cbnz	r1, 8016304 <__ieee754_pow+0x17c>
 80162a2:	4a5e      	ldr	r2, [pc, #376]	@ (801641c <__ieee754_pow+0x294>)
 80162a4:	4592      	cmp	sl, r2
 80162a6:	d1ec      	bne.n	8016282 <__ieee754_pow+0xfa>
 80162a8:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 80162ac:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80162b0:	431a      	orrs	r2, r3
 80162b2:	f000 846e 	beq.w	8016b92 <__ieee754_pow+0xa0a>
 80162b6:	4b5c      	ldr	r3, [pc, #368]	@ (8016428 <__ieee754_pow+0x2a0>)
 80162b8:	429d      	cmp	r5, r3
 80162ba:	d908      	bls.n	80162ce <__ieee754_pow+0x146>
 80162bc:	f1b9 0f00 	cmp.w	r9, #0
 80162c0:	f280 846b 	bge.w	8016b9a <__ieee754_pow+0xa12>
 80162c4:	2000      	movs	r0, #0
 80162c6:	2100      	movs	r1, #0
 80162c8:	e77b      	b.n	80161c2 <__ieee754_pow+0x3a>
 80162ca:	2402      	movs	r4, #2
 80162cc:	e7e8      	b.n	80162a0 <__ieee754_pow+0x118>
 80162ce:	f1b9 0f00 	cmp.w	r9, #0
 80162d2:	f04f 0000 	mov.w	r0, #0
 80162d6:	f04f 0100 	mov.w	r1, #0
 80162da:	f6bf af72 	bge.w	80161c2 <__ieee754_pow+0x3a>
 80162de:	e9dd 0300 	ldrd	r0, r3, [sp]
 80162e2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80162e6:	e76c      	b.n	80161c2 <__ieee754_pow+0x3a>
 80162e8:	4a50      	ldr	r2, [pc, #320]	@ (801642c <__ieee754_pow+0x2a4>)
 80162ea:	4591      	cmp	r9, r2
 80162ec:	d10a      	bne.n	8016304 <__ieee754_pow+0x17c>
 80162ee:	f1b8 0f00 	cmp.w	r8, #0
 80162f2:	db07      	blt.n	8016304 <__ieee754_pow+0x17c>
 80162f4:	ec47 6b10 	vmov	d0, r6, r7
 80162f8:	b011      	add	sp, #68	@ 0x44
 80162fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162fe:	f000 bd4f 	b.w	8016da0 <__ieee754_sqrt>
 8016302:	2400      	movs	r4, #0
 8016304:	ec47 6b10 	vmov	d0, r6, r7
 8016308:	9302      	str	r3, [sp, #8]
 801630a:	f000 fc87 	bl	8016c1c <fabs>
 801630e:	9b02      	ldr	r3, [sp, #8]
 8016310:	ec51 0b10 	vmov	r0, r1, d0
 8016314:	bb43      	cbnz	r3, 8016368 <__ieee754_pow+0x1e0>
 8016316:	4b43      	ldr	r3, [pc, #268]	@ (8016424 <__ieee754_pow+0x29c>)
 8016318:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 801631c:	429a      	cmp	r2, r3
 801631e:	d000      	beq.n	8016322 <__ieee754_pow+0x19a>
 8016320:	bb15      	cbnz	r5, 8016368 <__ieee754_pow+0x1e0>
 8016322:	f1b9 0f00 	cmp.w	r9, #0
 8016326:	da05      	bge.n	8016334 <__ieee754_pow+0x1ac>
 8016328:	4602      	mov	r2, r0
 801632a:	460b      	mov	r3, r1
 801632c:	2000      	movs	r0, #0
 801632e:	493d      	ldr	r1, [pc, #244]	@ (8016424 <__ieee754_pow+0x29c>)
 8016330:	f7ea faa4 	bl	800087c <__aeabi_ddiv>
 8016334:	f1b8 0f00 	cmp.w	r8, #0
 8016338:	f6bf af43 	bge.w	80161c2 <__ieee754_pow+0x3a>
 801633c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8016340:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8016344:	4325      	orrs	r5, r4
 8016346:	d108      	bne.n	801635a <__ieee754_pow+0x1d2>
 8016348:	4602      	mov	r2, r0
 801634a:	460b      	mov	r3, r1
 801634c:	4610      	mov	r0, r2
 801634e:	4619      	mov	r1, r3
 8016350:	f7e9 ffb2 	bl	80002b8 <__aeabi_dsub>
 8016354:	4602      	mov	r2, r0
 8016356:	460b      	mov	r3, r1
 8016358:	e79e      	b.n	8016298 <__ieee754_pow+0x110>
 801635a:	2c01      	cmp	r4, #1
 801635c:	f47f af31 	bne.w	80161c2 <__ieee754_pow+0x3a>
 8016360:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016364:	4619      	mov	r1, r3
 8016366:	e72c      	b.n	80161c2 <__ieee754_pow+0x3a>
 8016368:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 801636c:	3b01      	subs	r3, #1
 801636e:	ea53 0204 	orrs.w	r2, r3, r4
 8016372:	d102      	bne.n	801637a <__ieee754_pow+0x1f2>
 8016374:	4632      	mov	r2, r6
 8016376:	463b      	mov	r3, r7
 8016378:	e7e8      	b.n	801634c <__ieee754_pow+0x1c4>
 801637a:	3c01      	subs	r4, #1
 801637c:	431c      	orrs	r4, r3
 801637e:	d016      	beq.n	80163ae <__ieee754_pow+0x226>
 8016380:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8016408 <__ieee754_pow+0x280>
 8016384:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8016388:	ed8d 7b02 	vstr	d7, [sp, #8]
 801638c:	f240 8110 	bls.w	80165b0 <__ieee754_pow+0x428>
 8016390:	4b27      	ldr	r3, [pc, #156]	@ (8016430 <__ieee754_pow+0x2a8>)
 8016392:	459a      	cmp	sl, r3
 8016394:	4b24      	ldr	r3, [pc, #144]	@ (8016428 <__ieee754_pow+0x2a0>)
 8016396:	d916      	bls.n	80163c6 <__ieee754_pow+0x23e>
 8016398:	429d      	cmp	r5, r3
 801639a:	d80b      	bhi.n	80163b4 <__ieee754_pow+0x22c>
 801639c:	f1b9 0f00 	cmp.w	r9, #0
 80163a0:	da0b      	bge.n	80163ba <__ieee754_pow+0x232>
 80163a2:	2000      	movs	r0, #0
 80163a4:	b011      	add	sp, #68	@ 0x44
 80163a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163aa:	f000 bcf1 	b.w	8016d90 <__math_oflow>
 80163ae:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8016410 <__ieee754_pow+0x288>
 80163b2:	e7e7      	b.n	8016384 <__ieee754_pow+0x1fc>
 80163b4:	f1b9 0f00 	cmp.w	r9, #0
 80163b8:	dcf3      	bgt.n	80163a2 <__ieee754_pow+0x21a>
 80163ba:	2000      	movs	r0, #0
 80163bc:	b011      	add	sp, #68	@ 0x44
 80163be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163c2:	f000 bcdd 	b.w	8016d80 <__math_uflow>
 80163c6:	429d      	cmp	r5, r3
 80163c8:	d20c      	bcs.n	80163e4 <__ieee754_pow+0x25c>
 80163ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80163ce:	2200      	movs	r2, #0
 80163d0:	2300      	movs	r3, #0
 80163d2:	f7ea fb9b 	bl	8000b0c <__aeabi_dcmplt>
 80163d6:	3800      	subs	r0, #0
 80163d8:	bf18      	it	ne
 80163da:	2001      	movne	r0, #1
 80163dc:	f1b9 0f00 	cmp.w	r9, #0
 80163e0:	daec      	bge.n	80163bc <__ieee754_pow+0x234>
 80163e2:	e7df      	b.n	80163a4 <__ieee754_pow+0x21c>
 80163e4:	4b0f      	ldr	r3, [pc, #60]	@ (8016424 <__ieee754_pow+0x29c>)
 80163e6:	429d      	cmp	r5, r3
 80163e8:	f04f 0200 	mov.w	r2, #0
 80163ec:	d922      	bls.n	8016434 <__ieee754_pow+0x2ac>
 80163ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80163f2:	2300      	movs	r3, #0
 80163f4:	f7ea fb8a 	bl	8000b0c <__aeabi_dcmplt>
 80163f8:	3800      	subs	r0, #0
 80163fa:	bf18      	it	ne
 80163fc:	2001      	movne	r0, #1
 80163fe:	f1b9 0f00 	cmp.w	r9, #0
 8016402:	dccf      	bgt.n	80163a4 <__ieee754_pow+0x21c>
 8016404:	e7da      	b.n	80163bc <__ieee754_pow+0x234>
 8016406:	bf00      	nop
 8016408:	00000000 	.word	0x00000000
 801640c:	3ff00000 	.word	0x3ff00000
 8016410:	00000000 	.word	0x00000000
 8016414:	bff00000 	.word	0xbff00000
 8016418:	fff00000 	.word	0xfff00000
 801641c:	7ff00000 	.word	0x7ff00000
 8016420:	433fffff 	.word	0x433fffff
 8016424:	3ff00000 	.word	0x3ff00000
 8016428:	3fefffff 	.word	0x3fefffff
 801642c:	3fe00000 	.word	0x3fe00000
 8016430:	43f00000 	.word	0x43f00000
 8016434:	4b5a      	ldr	r3, [pc, #360]	@ (80165a0 <__ieee754_pow+0x418>)
 8016436:	f7e9 ff3f 	bl	80002b8 <__aeabi_dsub>
 801643a:	a351      	add	r3, pc, #324	@ (adr r3, 8016580 <__ieee754_pow+0x3f8>)
 801643c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016440:	4604      	mov	r4, r0
 8016442:	460d      	mov	r5, r1
 8016444:	f7ea f8f0 	bl	8000628 <__aeabi_dmul>
 8016448:	a34f      	add	r3, pc, #316	@ (adr r3, 8016588 <__ieee754_pow+0x400>)
 801644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801644e:	4606      	mov	r6, r0
 8016450:	460f      	mov	r7, r1
 8016452:	4620      	mov	r0, r4
 8016454:	4629      	mov	r1, r5
 8016456:	f7ea f8e7 	bl	8000628 <__aeabi_dmul>
 801645a:	4b52      	ldr	r3, [pc, #328]	@ (80165a4 <__ieee754_pow+0x41c>)
 801645c:	4682      	mov	sl, r0
 801645e:	468b      	mov	fp, r1
 8016460:	2200      	movs	r2, #0
 8016462:	4620      	mov	r0, r4
 8016464:	4629      	mov	r1, r5
 8016466:	f7ea f8df 	bl	8000628 <__aeabi_dmul>
 801646a:	4602      	mov	r2, r0
 801646c:	460b      	mov	r3, r1
 801646e:	a148      	add	r1, pc, #288	@ (adr r1, 8016590 <__ieee754_pow+0x408>)
 8016470:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016474:	f7e9 ff20 	bl	80002b8 <__aeabi_dsub>
 8016478:	4622      	mov	r2, r4
 801647a:	462b      	mov	r3, r5
 801647c:	f7ea f8d4 	bl	8000628 <__aeabi_dmul>
 8016480:	4602      	mov	r2, r0
 8016482:	460b      	mov	r3, r1
 8016484:	2000      	movs	r0, #0
 8016486:	4948      	ldr	r1, [pc, #288]	@ (80165a8 <__ieee754_pow+0x420>)
 8016488:	f7e9 ff16 	bl	80002b8 <__aeabi_dsub>
 801648c:	4622      	mov	r2, r4
 801648e:	4680      	mov	r8, r0
 8016490:	4689      	mov	r9, r1
 8016492:	462b      	mov	r3, r5
 8016494:	4620      	mov	r0, r4
 8016496:	4629      	mov	r1, r5
 8016498:	f7ea f8c6 	bl	8000628 <__aeabi_dmul>
 801649c:	4602      	mov	r2, r0
 801649e:	460b      	mov	r3, r1
 80164a0:	4640      	mov	r0, r8
 80164a2:	4649      	mov	r1, r9
 80164a4:	f7ea f8c0 	bl	8000628 <__aeabi_dmul>
 80164a8:	a33b      	add	r3, pc, #236	@ (adr r3, 8016598 <__ieee754_pow+0x410>)
 80164aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164ae:	f7ea f8bb 	bl	8000628 <__aeabi_dmul>
 80164b2:	4602      	mov	r2, r0
 80164b4:	460b      	mov	r3, r1
 80164b6:	4650      	mov	r0, sl
 80164b8:	4659      	mov	r1, fp
 80164ba:	f7e9 fefd 	bl	80002b8 <__aeabi_dsub>
 80164be:	4602      	mov	r2, r0
 80164c0:	460b      	mov	r3, r1
 80164c2:	4680      	mov	r8, r0
 80164c4:	4689      	mov	r9, r1
 80164c6:	4630      	mov	r0, r6
 80164c8:	4639      	mov	r1, r7
 80164ca:	f7e9 fef7 	bl	80002bc <__adddf3>
 80164ce:	2400      	movs	r4, #0
 80164d0:	4632      	mov	r2, r6
 80164d2:	463b      	mov	r3, r7
 80164d4:	4620      	mov	r0, r4
 80164d6:	460d      	mov	r5, r1
 80164d8:	f7e9 feee 	bl	80002b8 <__aeabi_dsub>
 80164dc:	4602      	mov	r2, r0
 80164de:	460b      	mov	r3, r1
 80164e0:	4640      	mov	r0, r8
 80164e2:	4649      	mov	r1, r9
 80164e4:	f7e9 fee8 	bl	80002b8 <__aeabi_dsub>
 80164e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80164ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80164f0:	2300      	movs	r3, #0
 80164f2:	9304      	str	r3, [sp, #16]
 80164f4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80164f8:	4606      	mov	r6, r0
 80164fa:	460f      	mov	r7, r1
 80164fc:	465b      	mov	r3, fp
 80164fe:	4652      	mov	r2, sl
 8016500:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016504:	f7e9 fed8 	bl	80002b8 <__aeabi_dsub>
 8016508:	4622      	mov	r2, r4
 801650a:	462b      	mov	r3, r5
 801650c:	f7ea f88c 	bl	8000628 <__aeabi_dmul>
 8016510:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016514:	4680      	mov	r8, r0
 8016516:	4689      	mov	r9, r1
 8016518:	4630      	mov	r0, r6
 801651a:	4639      	mov	r1, r7
 801651c:	f7ea f884 	bl	8000628 <__aeabi_dmul>
 8016520:	4602      	mov	r2, r0
 8016522:	460b      	mov	r3, r1
 8016524:	4640      	mov	r0, r8
 8016526:	4649      	mov	r1, r9
 8016528:	f7e9 fec8 	bl	80002bc <__adddf3>
 801652c:	465b      	mov	r3, fp
 801652e:	4606      	mov	r6, r0
 8016530:	460f      	mov	r7, r1
 8016532:	4652      	mov	r2, sl
 8016534:	4620      	mov	r0, r4
 8016536:	4629      	mov	r1, r5
 8016538:	f7ea f876 	bl	8000628 <__aeabi_dmul>
 801653c:	460b      	mov	r3, r1
 801653e:	4602      	mov	r2, r0
 8016540:	4680      	mov	r8, r0
 8016542:	4689      	mov	r9, r1
 8016544:	4630      	mov	r0, r6
 8016546:	4639      	mov	r1, r7
 8016548:	f7e9 feb8 	bl	80002bc <__adddf3>
 801654c:	4b17      	ldr	r3, [pc, #92]	@ (80165ac <__ieee754_pow+0x424>)
 801654e:	4299      	cmp	r1, r3
 8016550:	4604      	mov	r4, r0
 8016552:	460d      	mov	r5, r1
 8016554:	468b      	mov	fp, r1
 8016556:	f340 820b 	ble.w	8016970 <__ieee754_pow+0x7e8>
 801655a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 801655e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8016562:	4303      	orrs	r3, r0
 8016564:	f000 81ea 	beq.w	801693c <__ieee754_pow+0x7b4>
 8016568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801656c:	2200      	movs	r2, #0
 801656e:	2300      	movs	r3, #0
 8016570:	f7ea facc 	bl	8000b0c <__aeabi_dcmplt>
 8016574:	3800      	subs	r0, #0
 8016576:	bf18      	it	ne
 8016578:	2001      	movne	r0, #1
 801657a:	e713      	b.n	80163a4 <__ieee754_pow+0x21c>
 801657c:	f3af 8000 	nop.w
 8016580:	60000000 	.word	0x60000000
 8016584:	3ff71547 	.word	0x3ff71547
 8016588:	f85ddf44 	.word	0xf85ddf44
 801658c:	3e54ae0b 	.word	0x3e54ae0b
 8016590:	55555555 	.word	0x55555555
 8016594:	3fd55555 	.word	0x3fd55555
 8016598:	652b82fe 	.word	0x652b82fe
 801659c:	3ff71547 	.word	0x3ff71547
 80165a0:	3ff00000 	.word	0x3ff00000
 80165a4:	3fd00000 	.word	0x3fd00000
 80165a8:	3fe00000 	.word	0x3fe00000
 80165ac:	408fffff 	.word	0x408fffff
 80165b0:	4bd5      	ldr	r3, [pc, #852]	@ (8016908 <__ieee754_pow+0x780>)
 80165b2:	ea08 0303 	and.w	r3, r8, r3
 80165b6:	2200      	movs	r2, #0
 80165b8:	b92b      	cbnz	r3, 80165c6 <__ieee754_pow+0x43e>
 80165ba:	4bd4      	ldr	r3, [pc, #848]	@ (801690c <__ieee754_pow+0x784>)
 80165bc:	f7ea f834 	bl	8000628 <__aeabi_dmul>
 80165c0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80165c4:	468b      	mov	fp, r1
 80165c6:	ea4f 532b 	mov.w	r3, fp, asr #20
 80165ca:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80165ce:	4413      	add	r3, r2
 80165d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80165d2:	4bcf      	ldr	r3, [pc, #828]	@ (8016910 <__ieee754_pow+0x788>)
 80165d4:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80165d8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80165dc:	459b      	cmp	fp, r3
 80165de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80165e2:	dd08      	ble.n	80165f6 <__ieee754_pow+0x46e>
 80165e4:	4bcb      	ldr	r3, [pc, #812]	@ (8016914 <__ieee754_pow+0x78c>)
 80165e6:	459b      	cmp	fp, r3
 80165e8:	f340 81a5 	ble.w	8016936 <__ieee754_pow+0x7ae>
 80165ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80165ee:	3301      	adds	r3, #1
 80165f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80165f2:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80165f6:	f04f 0a00 	mov.w	sl, #0
 80165fa:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80165fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016600:	4bc5      	ldr	r3, [pc, #788]	@ (8016918 <__ieee754_pow+0x790>)
 8016602:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016606:	ed93 7b00 	vldr	d7, [r3]
 801660a:	4629      	mov	r1, r5
 801660c:	ec53 2b17 	vmov	r2, r3, d7
 8016610:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016614:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016618:	f7e9 fe4e 	bl	80002b8 <__aeabi_dsub>
 801661c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016620:	4606      	mov	r6, r0
 8016622:	460f      	mov	r7, r1
 8016624:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016628:	f7e9 fe48 	bl	80002bc <__adddf3>
 801662c:	4602      	mov	r2, r0
 801662e:	460b      	mov	r3, r1
 8016630:	2000      	movs	r0, #0
 8016632:	49ba      	ldr	r1, [pc, #744]	@ (801691c <__ieee754_pow+0x794>)
 8016634:	f7ea f922 	bl	800087c <__aeabi_ddiv>
 8016638:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801663c:	4602      	mov	r2, r0
 801663e:	460b      	mov	r3, r1
 8016640:	4630      	mov	r0, r6
 8016642:	4639      	mov	r1, r7
 8016644:	f7e9 fff0 	bl	8000628 <__aeabi_dmul>
 8016648:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801664c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8016650:	106d      	asrs	r5, r5, #1
 8016652:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8016656:	f04f 0b00 	mov.w	fp, #0
 801665a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801665e:	4661      	mov	r1, ip
 8016660:	2200      	movs	r2, #0
 8016662:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8016666:	4658      	mov	r0, fp
 8016668:	46e1      	mov	r9, ip
 801666a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801666e:	4614      	mov	r4, r2
 8016670:	461d      	mov	r5, r3
 8016672:	f7e9 ffd9 	bl	8000628 <__aeabi_dmul>
 8016676:	4602      	mov	r2, r0
 8016678:	460b      	mov	r3, r1
 801667a:	4630      	mov	r0, r6
 801667c:	4639      	mov	r1, r7
 801667e:	f7e9 fe1b 	bl	80002b8 <__aeabi_dsub>
 8016682:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016686:	4606      	mov	r6, r0
 8016688:	460f      	mov	r7, r1
 801668a:	4620      	mov	r0, r4
 801668c:	4629      	mov	r1, r5
 801668e:	f7e9 fe13 	bl	80002b8 <__aeabi_dsub>
 8016692:	4602      	mov	r2, r0
 8016694:	460b      	mov	r3, r1
 8016696:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801669a:	f7e9 fe0d 	bl	80002b8 <__aeabi_dsub>
 801669e:	465a      	mov	r2, fp
 80166a0:	464b      	mov	r3, r9
 80166a2:	f7e9 ffc1 	bl	8000628 <__aeabi_dmul>
 80166a6:	4602      	mov	r2, r0
 80166a8:	460b      	mov	r3, r1
 80166aa:	4630      	mov	r0, r6
 80166ac:	4639      	mov	r1, r7
 80166ae:	f7e9 fe03 	bl	80002b8 <__aeabi_dsub>
 80166b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80166b6:	f7e9 ffb7 	bl	8000628 <__aeabi_dmul>
 80166ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80166be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80166c2:	4610      	mov	r0, r2
 80166c4:	4619      	mov	r1, r3
 80166c6:	f7e9 ffaf 	bl	8000628 <__aeabi_dmul>
 80166ca:	a37d      	add	r3, pc, #500	@ (adr r3, 80168c0 <__ieee754_pow+0x738>)
 80166cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166d0:	4604      	mov	r4, r0
 80166d2:	460d      	mov	r5, r1
 80166d4:	f7e9 ffa8 	bl	8000628 <__aeabi_dmul>
 80166d8:	a37b      	add	r3, pc, #492	@ (adr r3, 80168c8 <__ieee754_pow+0x740>)
 80166da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166de:	f7e9 fded 	bl	80002bc <__adddf3>
 80166e2:	4622      	mov	r2, r4
 80166e4:	462b      	mov	r3, r5
 80166e6:	f7e9 ff9f 	bl	8000628 <__aeabi_dmul>
 80166ea:	a379      	add	r3, pc, #484	@ (adr r3, 80168d0 <__ieee754_pow+0x748>)
 80166ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166f0:	f7e9 fde4 	bl	80002bc <__adddf3>
 80166f4:	4622      	mov	r2, r4
 80166f6:	462b      	mov	r3, r5
 80166f8:	f7e9 ff96 	bl	8000628 <__aeabi_dmul>
 80166fc:	a376      	add	r3, pc, #472	@ (adr r3, 80168d8 <__ieee754_pow+0x750>)
 80166fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016702:	f7e9 fddb 	bl	80002bc <__adddf3>
 8016706:	4622      	mov	r2, r4
 8016708:	462b      	mov	r3, r5
 801670a:	f7e9 ff8d 	bl	8000628 <__aeabi_dmul>
 801670e:	a374      	add	r3, pc, #464	@ (adr r3, 80168e0 <__ieee754_pow+0x758>)
 8016710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016714:	f7e9 fdd2 	bl	80002bc <__adddf3>
 8016718:	4622      	mov	r2, r4
 801671a:	462b      	mov	r3, r5
 801671c:	f7e9 ff84 	bl	8000628 <__aeabi_dmul>
 8016720:	a371      	add	r3, pc, #452	@ (adr r3, 80168e8 <__ieee754_pow+0x760>)
 8016722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016726:	f7e9 fdc9 	bl	80002bc <__adddf3>
 801672a:	4622      	mov	r2, r4
 801672c:	4606      	mov	r6, r0
 801672e:	460f      	mov	r7, r1
 8016730:	462b      	mov	r3, r5
 8016732:	4620      	mov	r0, r4
 8016734:	4629      	mov	r1, r5
 8016736:	f7e9 ff77 	bl	8000628 <__aeabi_dmul>
 801673a:	4602      	mov	r2, r0
 801673c:	460b      	mov	r3, r1
 801673e:	4630      	mov	r0, r6
 8016740:	4639      	mov	r1, r7
 8016742:	f7e9 ff71 	bl	8000628 <__aeabi_dmul>
 8016746:	465a      	mov	r2, fp
 8016748:	4604      	mov	r4, r0
 801674a:	460d      	mov	r5, r1
 801674c:	464b      	mov	r3, r9
 801674e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016752:	f7e9 fdb3 	bl	80002bc <__adddf3>
 8016756:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801675a:	f7e9 ff65 	bl	8000628 <__aeabi_dmul>
 801675e:	4622      	mov	r2, r4
 8016760:	462b      	mov	r3, r5
 8016762:	f7e9 fdab 	bl	80002bc <__adddf3>
 8016766:	465a      	mov	r2, fp
 8016768:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801676c:	464b      	mov	r3, r9
 801676e:	4658      	mov	r0, fp
 8016770:	4649      	mov	r1, r9
 8016772:	f7e9 ff59 	bl	8000628 <__aeabi_dmul>
 8016776:	4b6a      	ldr	r3, [pc, #424]	@ (8016920 <__ieee754_pow+0x798>)
 8016778:	2200      	movs	r2, #0
 801677a:	4606      	mov	r6, r0
 801677c:	460f      	mov	r7, r1
 801677e:	f7e9 fd9d 	bl	80002bc <__adddf3>
 8016782:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016786:	f7e9 fd99 	bl	80002bc <__adddf3>
 801678a:	46d8      	mov	r8, fp
 801678c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8016790:	460d      	mov	r5, r1
 8016792:	465a      	mov	r2, fp
 8016794:	460b      	mov	r3, r1
 8016796:	4640      	mov	r0, r8
 8016798:	4649      	mov	r1, r9
 801679a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801679e:	f7e9 ff43 	bl	8000628 <__aeabi_dmul>
 80167a2:	465c      	mov	r4, fp
 80167a4:	4680      	mov	r8, r0
 80167a6:	4689      	mov	r9, r1
 80167a8:	4b5d      	ldr	r3, [pc, #372]	@ (8016920 <__ieee754_pow+0x798>)
 80167aa:	2200      	movs	r2, #0
 80167ac:	4620      	mov	r0, r4
 80167ae:	4629      	mov	r1, r5
 80167b0:	f7e9 fd82 	bl	80002b8 <__aeabi_dsub>
 80167b4:	4632      	mov	r2, r6
 80167b6:	463b      	mov	r3, r7
 80167b8:	f7e9 fd7e 	bl	80002b8 <__aeabi_dsub>
 80167bc:	4602      	mov	r2, r0
 80167be:	460b      	mov	r3, r1
 80167c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80167c4:	f7e9 fd78 	bl	80002b8 <__aeabi_dsub>
 80167c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80167cc:	f7e9 ff2c 	bl	8000628 <__aeabi_dmul>
 80167d0:	4622      	mov	r2, r4
 80167d2:	4606      	mov	r6, r0
 80167d4:	460f      	mov	r7, r1
 80167d6:	462b      	mov	r3, r5
 80167d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80167dc:	f7e9 ff24 	bl	8000628 <__aeabi_dmul>
 80167e0:	4602      	mov	r2, r0
 80167e2:	460b      	mov	r3, r1
 80167e4:	4630      	mov	r0, r6
 80167e6:	4639      	mov	r1, r7
 80167e8:	f7e9 fd68 	bl	80002bc <__adddf3>
 80167ec:	4606      	mov	r6, r0
 80167ee:	460f      	mov	r7, r1
 80167f0:	4602      	mov	r2, r0
 80167f2:	460b      	mov	r3, r1
 80167f4:	4640      	mov	r0, r8
 80167f6:	4649      	mov	r1, r9
 80167f8:	f7e9 fd60 	bl	80002bc <__adddf3>
 80167fc:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8016800:	a33b      	add	r3, pc, #236	@ (adr r3, 80168f0 <__ieee754_pow+0x768>)
 8016802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016806:	4658      	mov	r0, fp
 8016808:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801680c:	460d      	mov	r5, r1
 801680e:	f7e9 ff0b 	bl	8000628 <__aeabi_dmul>
 8016812:	465c      	mov	r4, fp
 8016814:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016818:	4642      	mov	r2, r8
 801681a:	464b      	mov	r3, r9
 801681c:	4620      	mov	r0, r4
 801681e:	4629      	mov	r1, r5
 8016820:	f7e9 fd4a 	bl	80002b8 <__aeabi_dsub>
 8016824:	4602      	mov	r2, r0
 8016826:	460b      	mov	r3, r1
 8016828:	4630      	mov	r0, r6
 801682a:	4639      	mov	r1, r7
 801682c:	f7e9 fd44 	bl	80002b8 <__aeabi_dsub>
 8016830:	a331      	add	r3, pc, #196	@ (adr r3, 80168f8 <__ieee754_pow+0x770>)
 8016832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016836:	f7e9 fef7 	bl	8000628 <__aeabi_dmul>
 801683a:	a331      	add	r3, pc, #196	@ (adr r3, 8016900 <__ieee754_pow+0x778>)
 801683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016840:	4606      	mov	r6, r0
 8016842:	460f      	mov	r7, r1
 8016844:	4620      	mov	r0, r4
 8016846:	4629      	mov	r1, r5
 8016848:	f7e9 feee 	bl	8000628 <__aeabi_dmul>
 801684c:	4602      	mov	r2, r0
 801684e:	460b      	mov	r3, r1
 8016850:	4630      	mov	r0, r6
 8016852:	4639      	mov	r1, r7
 8016854:	f7e9 fd32 	bl	80002bc <__adddf3>
 8016858:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801685a:	4b32      	ldr	r3, [pc, #200]	@ (8016924 <__ieee754_pow+0x79c>)
 801685c:	4413      	add	r3, r2
 801685e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016862:	f7e9 fd2b 	bl	80002bc <__adddf3>
 8016866:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801686a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801686c:	f7e9 fe72 	bl	8000554 <__aeabi_i2d>
 8016870:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016872:	4b2d      	ldr	r3, [pc, #180]	@ (8016928 <__ieee754_pow+0x7a0>)
 8016874:	4413      	add	r3, r2
 8016876:	e9d3 8900 	ldrd	r8, r9, [r3]
 801687a:	4606      	mov	r6, r0
 801687c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016880:	460f      	mov	r7, r1
 8016882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016886:	f7e9 fd19 	bl	80002bc <__adddf3>
 801688a:	4642      	mov	r2, r8
 801688c:	464b      	mov	r3, r9
 801688e:	f7e9 fd15 	bl	80002bc <__adddf3>
 8016892:	4632      	mov	r2, r6
 8016894:	463b      	mov	r3, r7
 8016896:	f7e9 fd11 	bl	80002bc <__adddf3>
 801689a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801689e:	4632      	mov	r2, r6
 80168a0:	463b      	mov	r3, r7
 80168a2:	4658      	mov	r0, fp
 80168a4:	460d      	mov	r5, r1
 80168a6:	f7e9 fd07 	bl	80002b8 <__aeabi_dsub>
 80168aa:	4642      	mov	r2, r8
 80168ac:	464b      	mov	r3, r9
 80168ae:	f7e9 fd03 	bl	80002b8 <__aeabi_dsub>
 80168b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80168b6:	f7e9 fcff 	bl	80002b8 <__aeabi_dsub>
 80168ba:	465c      	mov	r4, fp
 80168bc:	e036      	b.n	801692c <__ieee754_pow+0x7a4>
 80168be:	bf00      	nop
 80168c0:	4a454eef 	.word	0x4a454eef
 80168c4:	3fca7e28 	.word	0x3fca7e28
 80168c8:	93c9db65 	.word	0x93c9db65
 80168cc:	3fcd864a 	.word	0x3fcd864a
 80168d0:	a91d4101 	.word	0xa91d4101
 80168d4:	3fd17460 	.word	0x3fd17460
 80168d8:	518f264d 	.word	0x518f264d
 80168dc:	3fd55555 	.word	0x3fd55555
 80168e0:	db6fabff 	.word	0xdb6fabff
 80168e4:	3fdb6db6 	.word	0x3fdb6db6
 80168e8:	33333303 	.word	0x33333303
 80168ec:	3fe33333 	.word	0x3fe33333
 80168f0:	e0000000 	.word	0xe0000000
 80168f4:	3feec709 	.word	0x3feec709
 80168f8:	dc3a03fd 	.word	0xdc3a03fd
 80168fc:	3feec709 	.word	0x3feec709
 8016900:	145b01f5 	.word	0x145b01f5
 8016904:	be3e2fe0 	.word	0xbe3e2fe0
 8016908:	7ff00000 	.word	0x7ff00000
 801690c:	43400000 	.word	0x43400000
 8016910:	0003988e 	.word	0x0003988e
 8016914:	000bb679 	.word	0x000bb679
 8016918:	08017d50 	.word	0x08017d50
 801691c:	3ff00000 	.word	0x3ff00000
 8016920:	40080000 	.word	0x40080000
 8016924:	08017d30 	.word	0x08017d30
 8016928:	08017d40 	.word	0x08017d40
 801692c:	4602      	mov	r2, r0
 801692e:	460b      	mov	r3, r1
 8016930:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016934:	e5d6      	b.n	80164e4 <__ieee754_pow+0x35c>
 8016936:	f04f 0a01 	mov.w	sl, #1
 801693a:	e65e      	b.n	80165fa <__ieee754_pow+0x472>
 801693c:	a3b5      	add	r3, pc, #724	@ (adr r3, 8016c14 <__ieee754_pow+0xa8c>)
 801693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016942:	4630      	mov	r0, r6
 8016944:	4639      	mov	r1, r7
 8016946:	f7e9 fcb9 	bl	80002bc <__adddf3>
 801694a:	4642      	mov	r2, r8
 801694c:	e9cd 0100 	strd	r0, r1, [sp]
 8016950:	464b      	mov	r3, r9
 8016952:	4620      	mov	r0, r4
 8016954:	4629      	mov	r1, r5
 8016956:	f7e9 fcaf 	bl	80002b8 <__aeabi_dsub>
 801695a:	4602      	mov	r2, r0
 801695c:	460b      	mov	r3, r1
 801695e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016962:	f7ea f8f1 	bl	8000b48 <__aeabi_dcmpgt>
 8016966:	2800      	cmp	r0, #0
 8016968:	f47f adfe 	bne.w	8016568 <__ieee754_pow+0x3e0>
 801696c:	4ba2      	ldr	r3, [pc, #648]	@ (8016bf8 <__ieee754_pow+0xa70>)
 801696e:	e022      	b.n	80169b6 <__ieee754_pow+0x82e>
 8016970:	4ca2      	ldr	r4, [pc, #648]	@ (8016bfc <__ieee754_pow+0xa74>)
 8016972:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8016976:	42a3      	cmp	r3, r4
 8016978:	d919      	bls.n	80169ae <__ieee754_pow+0x826>
 801697a:	4ba1      	ldr	r3, [pc, #644]	@ (8016c00 <__ieee754_pow+0xa78>)
 801697c:	440b      	add	r3, r1
 801697e:	4303      	orrs	r3, r0
 8016980:	d009      	beq.n	8016996 <__ieee754_pow+0x80e>
 8016982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016986:	2200      	movs	r2, #0
 8016988:	2300      	movs	r3, #0
 801698a:	f7ea f8bf 	bl	8000b0c <__aeabi_dcmplt>
 801698e:	3800      	subs	r0, #0
 8016990:	bf18      	it	ne
 8016992:	2001      	movne	r0, #1
 8016994:	e512      	b.n	80163bc <__ieee754_pow+0x234>
 8016996:	4642      	mov	r2, r8
 8016998:	464b      	mov	r3, r9
 801699a:	f7e9 fc8d 	bl	80002b8 <__aeabi_dsub>
 801699e:	4632      	mov	r2, r6
 80169a0:	463b      	mov	r3, r7
 80169a2:	f7ea f8c7 	bl	8000b34 <__aeabi_dcmpge>
 80169a6:	2800      	cmp	r0, #0
 80169a8:	d1eb      	bne.n	8016982 <__ieee754_pow+0x7fa>
 80169aa:	4b96      	ldr	r3, [pc, #600]	@ (8016c04 <__ieee754_pow+0xa7c>)
 80169ac:	e003      	b.n	80169b6 <__ieee754_pow+0x82e>
 80169ae:	4a96      	ldr	r2, [pc, #600]	@ (8016c08 <__ieee754_pow+0xa80>)
 80169b0:	4293      	cmp	r3, r2
 80169b2:	f240 80e7 	bls.w	8016b84 <__ieee754_pow+0x9fc>
 80169b6:	151b      	asrs	r3, r3, #20
 80169b8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80169bc:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80169c0:	fa4a fa03 	asr.w	sl, sl, r3
 80169c4:	44da      	add	sl, fp
 80169c6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80169ca:	4890      	ldr	r0, [pc, #576]	@ (8016c0c <__ieee754_pow+0xa84>)
 80169cc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80169d0:	4108      	asrs	r0, r1
 80169d2:	ea00 030a 	and.w	r3, r0, sl
 80169d6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80169da:	f1c1 0114 	rsb	r1, r1, #20
 80169de:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80169e2:	fa4a fa01 	asr.w	sl, sl, r1
 80169e6:	f1bb 0f00 	cmp.w	fp, #0
 80169ea:	4640      	mov	r0, r8
 80169ec:	4649      	mov	r1, r9
 80169ee:	f04f 0200 	mov.w	r2, #0
 80169f2:	bfb8      	it	lt
 80169f4:	f1ca 0a00 	rsblt	sl, sl, #0
 80169f8:	f7e9 fc5e 	bl	80002b8 <__aeabi_dsub>
 80169fc:	4680      	mov	r8, r0
 80169fe:	4689      	mov	r9, r1
 8016a00:	4632      	mov	r2, r6
 8016a02:	463b      	mov	r3, r7
 8016a04:	4640      	mov	r0, r8
 8016a06:	4649      	mov	r1, r9
 8016a08:	f7e9 fc58 	bl	80002bc <__adddf3>
 8016a0c:	2400      	movs	r4, #0
 8016a0e:	a36a      	add	r3, pc, #424	@ (adr r3, 8016bb8 <__ieee754_pow+0xa30>)
 8016a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a14:	4620      	mov	r0, r4
 8016a16:	460d      	mov	r5, r1
 8016a18:	f7e9 fe06 	bl	8000628 <__aeabi_dmul>
 8016a1c:	4642      	mov	r2, r8
 8016a1e:	e9cd 0100 	strd	r0, r1, [sp]
 8016a22:	464b      	mov	r3, r9
 8016a24:	4620      	mov	r0, r4
 8016a26:	4629      	mov	r1, r5
 8016a28:	f7e9 fc46 	bl	80002b8 <__aeabi_dsub>
 8016a2c:	4602      	mov	r2, r0
 8016a2e:	460b      	mov	r3, r1
 8016a30:	4630      	mov	r0, r6
 8016a32:	4639      	mov	r1, r7
 8016a34:	f7e9 fc40 	bl	80002b8 <__aeabi_dsub>
 8016a38:	a361      	add	r3, pc, #388	@ (adr r3, 8016bc0 <__ieee754_pow+0xa38>)
 8016a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a3e:	f7e9 fdf3 	bl	8000628 <__aeabi_dmul>
 8016a42:	a361      	add	r3, pc, #388	@ (adr r3, 8016bc8 <__ieee754_pow+0xa40>)
 8016a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a48:	4680      	mov	r8, r0
 8016a4a:	4689      	mov	r9, r1
 8016a4c:	4620      	mov	r0, r4
 8016a4e:	4629      	mov	r1, r5
 8016a50:	f7e9 fdea 	bl	8000628 <__aeabi_dmul>
 8016a54:	4602      	mov	r2, r0
 8016a56:	460b      	mov	r3, r1
 8016a58:	4640      	mov	r0, r8
 8016a5a:	4649      	mov	r1, r9
 8016a5c:	f7e9 fc2e 	bl	80002bc <__adddf3>
 8016a60:	4604      	mov	r4, r0
 8016a62:	460d      	mov	r5, r1
 8016a64:	4602      	mov	r2, r0
 8016a66:	460b      	mov	r3, r1
 8016a68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016a6c:	f7e9 fc26 	bl	80002bc <__adddf3>
 8016a70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a74:	4680      	mov	r8, r0
 8016a76:	4689      	mov	r9, r1
 8016a78:	f7e9 fc1e 	bl	80002b8 <__aeabi_dsub>
 8016a7c:	4602      	mov	r2, r0
 8016a7e:	460b      	mov	r3, r1
 8016a80:	4620      	mov	r0, r4
 8016a82:	4629      	mov	r1, r5
 8016a84:	f7e9 fc18 	bl	80002b8 <__aeabi_dsub>
 8016a88:	4642      	mov	r2, r8
 8016a8a:	4606      	mov	r6, r0
 8016a8c:	460f      	mov	r7, r1
 8016a8e:	464b      	mov	r3, r9
 8016a90:	4640      	mov	r0, r8
 8016a92:	4649      	mov	r1, r9
 8016a94:	f7e9 fdc8 	bl	8000628 <__aeabi_dmul>
 8016a98:	a34d      	add	r3, pc, #308	@ (adr r3, 8016bd0 <__ieee754_pow+0xa48>)
 8016a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a9e:	4604      	mov	r4, r0
 8016aa0:	460d      	mov	r5, r1
 8016aa2:	f7e9 fdc1 	bl	8000628 <__aeabi_dmul>
 8016aa6:	a34c      	add	r3, pc, #304	@ (adr r3, 8016bd8 <__ieee754_pow+0xa50>)
 8016aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aac:	f7e9 fc04 	bl	80002b8 <__aeabi_dsub>
 8016ab0:	4622      	mov	r2, r4
 8016ab2:	462b      	mov	r3, r5
 8016ab4:	f7e9 fdb8 	bl	8000628 <__aeabi_dmul>
 8016ab8:	a349      	add	r3, pc, #292	@ (adr r3, 8016be0 <__ieee754_pow+0xa58>)
 8016aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016abe:	f7e9 fbfd 	bl	80002bc <__adddf3>
 8016ac2:	4622      	mov	r2, r4
 8016ac4:	462b      	mov	r3, r5
 8016ac6:	f7e9 fdaf 	bl	8000628 <__aeabi_dmul>
 8016aca:	a347      	add	r3, pc, #284	@ (adr r3, 8016be8 <__ieee754_pow+0xa60>)
 8016acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ad0:	f7e9 fbf2 	bl	80002b8 <__aeabi_dsub>
 8016ad4:	4622      	mov	r2, r4
 8016ad6:	462b      	mov	r3, r5
 8016ad8:	f7e9 fda6 	bl	8000628 <__aeabi_dmul>
 8016adc:	a344      	add	r3, pc, #272	@ (adr r3, 8016bf0 <__ieee754_pow+0xa68>)
 8016ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ae2:	f7e9 fbeb 	bl	80002bc <__adddf3>
 8016ae6:	4622      	mov	r2, r4
 8016ae8:	462b      	mov	r3, r5
 8016aea:	f7e9 fd9d 	bl	8000628 <__aeabi_dmul>
 8016aee:	4602      	mov	r2, r0
 8016af0:	460b      	mov	r3, r1
 8016af2:	4640      	mov	r0, r8
 8016af4:	4649      	mov	r1, r9
 8016af6:	f7e9 fbdf 	bl	80002b8 <__aeabi_dsub>
 8016afa:	4604      	mov	r4, r0
 8016afc:	460d      	mov	r5, r1
 8016afe:	4602      	mov	r2, r0
 8016b00:	460b      	mov	r3, r1
 8016b02:	4640      	mov	r0, r8
 8016b04:	4649      	mov	r1, r9
 8016b06:	f7e9 fd8f 	bl	8000628 <__aeabi_dmul>
 8016b0a:	2200      	movs	r2, #0
 8016b0c:	e9cd 0100 	strd	r0, r1, [sp]
 8016b10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016b14:	4620      	mov	r0, r4
 8016b16:	4629      	mov	r1, r5
 8016b18:	f7e9 fbce 	bl	80002b8 <__aeabi_dsub>
 8016b1c:	4602      	mov	r2, r0
 8016b1e:	460b      	mov	r3, r1
 8016b20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b24:	f7e9 feaa 	bl	800087c <__aeabi_ddiv>
 8016b28:	4632      	mov	r2, r6
 8016b2a:	4604      	mov	r4, r0
 8016b2c:	460d      	mov	r5, r1
 8016b2e:	463b      	mov	r3, r7
 8016b30:	4640      	mov	r0, r8
 8016b32:	4649      	mov	r1, r9
 8016b34:	f7e9 fd78 	bl	8000628 <__aeabi_dmul>
 8016b38:	4632      	mov	r2, r6
 8016b3a:	463b      	mov	r3, r7
 8016b3c:	f7e9 fbbe 	bl	80002bc <__adddf3>
 8016b40:	4602      	mov	r2, r0
 8016b42:	460b      	mov	r3, r1
 8016b44:	4620      	mov	r0, r4
 8016b46:	4629      	mov	r1, r5
 8016b48:	f7e9 fbb6 	bl	80002b8 <__aeabi_dsub>
 8016b4c:	4642      	mov	r2, r8
 8016b4e:	464b      	mov	r3, r9
 8016b50:	f7e9 fbb2 	bl	80002b8 <__aeabi_dsub>
 8016b54:	460b      	mov	r3, r1
 8016b56:	4602      	mov	r2, r0
 8016b58:	492d      	ldr	r1, [pc, #180]	@ (8016c10 <__ieee754_pow+0xa88>)
 8016b5a:	2000      	movs	r0, #0
 8016b5c:	f7e9 fbac 	bl	80002b8 <__aeabi_dsub>
 8016b60:	ec41 0b10 	vmov	d0, r0, r1
 8016b64:	ee10 3a90 	vmov	r3, s1
 8016b68:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8016b6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016b70:	da0b      	bge.n	8016b8a <__ieee754_pow+0xa02>
 8016b72:	4650      	mov	r0, sl
 8016b74:	f000 f85c 	bl	8016c30 <scalbn>
 8016b78:	ec51 0b10 	vmov	r0, r1, d0
 8016b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016b80:	f7ff bb6d 	b.w	801625e <__ieee754_pow+0xd6>
 8016b84:	f8dd a010 	ldr.w	sl, [sp, #16]
 8016b88:	e73a      	b.n	8016a00 <__ieee754_pow+0x878>
 8016b8a:	ec51 0b10 	vmov	r0, r1, d0
 8016b8e:	4619      	mov	r1, r3
 8016b90:	e7f4      	b.n	8016b7c <__ieee754_pow+0x9f4>
 8016b92:	491f      	ldr	r1, [pc, #124]	@ (8016c10 <__ieee754_pow+0xa88>)
 8016b94:	2000      	movs	r0, #0
 8016b96:	f7ff bb14 	b.w	80161c2 <__ieee754_pow+0x3a>
 8016b9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b9e:	f7ff bb10 	b.w	80161c2 <__ieee754_pow+0x3a>
 8016ba2:	4630      	mov	r0, r6
 8016ba4:	4639      	mov	r1, r7
 8016ba6:	f7ff bb0c 	b.w	80161c2 <__ieee754_pow+0x3a>
 8016baa:	460c      	mov	r4, r1
 8016bac:	f7ff bb69 	b.w	8016282 <__ieee754_pow+0xfa>
 8016bb0:	2400      	movs	r4, #0
 8016bb2:	f7ff bb4b 	b.w	801624c <__ieee754_pow+0xc4>
 8016bb6:	bf00      	nop
 8016bb8:	00000000 	.word	0x00000000
 8016bbc:	3fe62e43 	.word	0x3fe62e43
 8016bc0:	fefa39ef 	.word	0xfefa39ef
 8016bc4:	3fe62e42 	.word	0x3fe62e42
 8016bc8:	0ca86c39 	.word	0x0ca86c39
 8016bcc:	be205c61 	.word	0xbe205c61
 8016bd0:	72bea4d0 	.word	0x72bea4d0
 8016bd4:	3e663769 	.word	0x3e663769
 8016bd8:	c5d26bf1 	.word	0xc5d26bf1
 8016bdc:	3ebbbd41 	.word	0x3ebbbd41
 8016be0:	af25de2c 	.word	0xaf25de2c
 8016be4:	3f11566a 	.word	0x3f11566a
 8016be8:	16bebd93 	.word	0x16bebd93
 8016bec:	3f66c16c 	.word	0x3f66c16c
 8016bf0:	5555553e 	.word	0x5555553e
 8016bf4:	3fc55555 	.word	0x3fc55555
 8016bf8:	40900000 	.word	0x40900000
 8016bfc:	4090cbff 	.word	0x4090cbff
 8016c00:	3f6f3400 	.word	0x3f6f3400
 8016c04:	4090cc00 	.word	0x4090cc00
 8016c08:	3fe00000 	.word	0x3fe00000
 8016c0c:	fff00000 	.word	0xfff00000
 8016c10:	3ff00000 	.word	0x3ff00000
 8016c14:	652b82fe 	.word	0x652b82fe
 8016c18:	3c971547 	.word	0x3c971547

08016c1c <fabs>:
 8016c1c:	ec51 0b10 	vmov	r0, r1, d0
 8016c20:	4602      	mov	r2, r0
 8016c22:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8016c26:	ec43 2b10 	vmov	d0, r2, r3
 8016c2a:	4770      	bx	lr
 8016c2c:	0000      	movs	r0, r0
	...

08016c30 <scalbn>:
 8016c30:	b570      	push	{r4, r5, r6, lr}
 8016c32:	ec55 4b10 	vmov	r4, r5, d0
 8016c36:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8016c3a:	4606      	mov	r6, r0
 8016c3c:	462b      	mov	r3, r5
 8016c3e:	b991      	cbnz	r1, 8016c66 <scalbn+0x36>
 8016c40:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8016c44:	4323      	orrs	r3, r4
 8016c46:	d03b      	beq.n	8016cc0 <scalbn+0x90>
 8016c48:	4b33      	ldr	r3, [pc, #204]	@ (8016d18 <scalbn+0xe8>)
 8016c4a:	4620      	mov	r0, r4
 8016c4c:	4629      	mov	r1, r5
 8016c4e:	2200      	movs	r2, #0
 8016c50:	f7e9 fcea 	bl	8000628 <__aeabi_dmul>
 8016c54:	4b31      	ldr	r3, [pc, #196]	@ (8016d1c <scalbn+0xec>)
 8016c56:	429e      	cmp	r6, r3
 8016c58:	4604      	mov	r4, r0
 8016c5a:	460d      	mov	r5, r1
 8016c5c:	da0f      	bge.n	8016c7e <scalbn+0x4e>
 8016c5e:	a326      	add	r3, pc, #152	@ (adr r3, 8016cf8 <scalbn+0xc8>)
 8016c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c64:	e01e      	b.n	8016ca4 <scalbn+0x74>
 8016c66:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8016c6a:	4291      	cmp	r1, r2
 8016c6c:	d10b      	bne.n	8016c86 <scalbn+0x56>
 8016c6e:	4622      	mov	r2, r4
 8016c70:	4620      	mov	r0, r4
 8016c72:	4629      	mov	r1, r5
 8016c74:	f7e9 fb22 	bl	80002bc <__adddf3>
 8016c78:	4604      	mov	r4, r0
 8016c7a:	460d      	mov	r5, r1
 8016c7c:	e020      	b.n	8016cc0 <scalbn+0x90>
 8016c7e:	460b      	mov	r3, r1
 8016c80:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8016c84:	3936      	subs	r1, #54	@ 0x36
 8016c86:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8016c8a:	4296      	cmp	r6, r2
 8016c8c:	dd0d      	ble.n	8016caa <scalbn+0x7a>
 8016c8e:	2d00      	cmp	r5, #0
 8016c90:	a11b      	add	r1, pc, #108	@ (adr r1, 8016d00 <scalbn+0xd0>)
 8016c92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c96:	da02      	bge.n	8016c9e <scalbn+0x6e>
 8016c98:	a11b      	add	r1, pc, #108	@ (adr r1, 8016d08 <scalbn+0xd8>)
 8016c9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c9e:	a318      	add	r3, pc, #96	@ (adr r3, 8016d00 <scalbn+0xd0>)
 8016ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ca4:	f7e9 fcc0 	bl	8000628 <__aeabi_dmul>
 8016ca8:	e7e6      	b.n	8016c78 <scalbn+0x48>
 8016caa:	1872      	adds	r2, r6, r1
 8016cac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8016cb0:	428a      	cmp	r2, r1
 8016cb2:	dcec      	bgt.n	8016c8e <scalbn+0x5e>
 8016cb4:	2a00      	cmp	r2, #0
 8016cb6:	dd06      	ble.n	8016cc6 <scalbn+0x96>
 8016cb8:	f36f 531e 	bfc	r3, #20, #11
 8016cbc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016cc0:	ec45 4b10 	vmov	d0, r4, r5
 8016cc4:	bd70      	pop	{r4, r5, r6, pc}
 8016cc6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8016cca:	da08      	bge.n	8016cde <scalbn+0xae>
 8016ccc:	2d00      	cmp	r5, #0
 8016cce:	a10a      	add	r1, pc, #40	@ (adr r1, 8016cf8 <scalbn+0xc8>)
 8016cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016cd4:	dac3      	bge.n	8016c5e <scalbn+0x2e>
 8016cd6:	a10e      	add	r1, pc, #56	@ (adr r1, 8016d10 <scalbn+0xe0>)
 8016cd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016cdc:	e7bf      	b.n	8016c5e <scalbn+0x2e>
 8016cde:	3236      	adds	r2, #54	@ 0x36
 8016ce0:	f36f 531e 	bfc	r3, #20, #11
 8016ce4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016ce8:	4620      	mov	r0, r4
 8016cea:	4b0d      	ldr	r3, [pc, #52]	@ (8016d20 <scalbn+0xf0>)
 8016cec:	4629      	mov	r1, r5
 8016cee:	2200      	movs	r2, #0
 8016cf0:	e7d8      	b.n	8016ca4 <scalbn+0x74>
 8016cf2:	bf00      	nop
 8016cf4:	f3af 8000 	nop.w
 8016cf8:	c2f8f359 	.word	0xc2f8f359
 8016cfc:	01a56e1f 	.word	0x01a56e1f
 8016d00:	8800759c 	.word	0x8800759c
 8016d04:	7e37e43c 	.word	0x7e37e43c
 8016d08:	8800759c 	.word	0x8800759c
 8016d0c:	fe37e43c 	.word	0xfe37e43c
 8016d10:	c2f8f359 	.word	0xc2f8f359
 8016d14:	81a56e1f 	.word	0x81a56e1f
 8016d18:	43500000 	.word	0x43500000
 8016d1c:	ffff3cb0 	.word	0xffff3cb0
 8016d20:	3c900000 	.word	0x3c900000

08016d24 <with_errno>:
 8016d24:	b510      	push	{r4, lr}
 8016d26:	ed2d 8b02 	vpush	{d8}
 8016d2a:	eeb0 8a40 	vmov.f32	s16, s0
 8016d2e:	eef0 8a60 	vmov.f32	s17, s1
 8016d32:	4604      	mov	r4, r0
 8016d34:	f7fe fb44 	bl	80153c0 <__errno>
 8016d38:	eeb0 0a48 	vmov.f32	s0, s16
 8016d3c:	eef0 0a68 	vmov.f32	s1, s17
 8016d40:	ecbd 8b02 	vpop	{d8}
 8016d44:	6004      	str	r4, [r0, #0]
 8016d46:	bd10      	pop	{r4, pc}

08016d48 <xflow>:
 8016d48:	4603      	mov	r3, r0
 8016d4a:	b507      	push	{r0, r1, r2, lr}
 8016d4c:	ec51 0b10 	vmov	r0, r1, d0
 8016d50:	b183      	cbz	r3, 8016d74 <xflow+0x2c>
 8016d52:	4602      	mov	r2, r0
 8016d54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016d58:	e9cd 2300 	strd	r2, r3, [sp]
 8016d5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016d60:	f7e9 fc62 	bl	8000628 <__aeabi_dmul>
 8016d64:	ec41 0b10 	vmov	d0, r0, r1
 8016d68:	2022      	movs	r0, #34	@ 0x22
 8016d6a:	b003      	add	sp, #12
 8016d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d70:	f7ff bfd8 	b.w	8016d24 <with_errno>
 8016d74:	4602      	mov	r2, r0
 8016d76:	460b      	mov	r3, r1
 8016d78:	e7ee      	b.n	8016d58 <xflow+0x10>
 8016d7a:	0000      	movs	r0, r0
 8016d7c:	0000      	movs	r0, r0
	...

08016d80 <__math_uflow>:
 8016d80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016d88 <__math_uflow+0x8>
 8016d84:	f7ff bfe0 	b.w	8016d48 <xflow>
 8016d88:	00000000 	.word	0x00000000
 8016d8c:	10000000 	.word	0x10000000

08016d90 <__math_oflow>:
 8016d90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016d98 <__math_oflow+0x8>
 8016d94:	f7ff bfd8 	b.w	8016d48 <xflow>
 8016d98:	00000000 	.word	0x00000000
 8016d9c:	70000000 	.word	0x70000000

08016da0 <__ieee754_sqrt>:
 8016da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016da4:	4a66      	ldr	r2, [pc, #408]	@ (8016f40 <__ieee754_sqrt+0x1a0>)
 8016da6:	ec55 4b10 	vmov	r4, r5, d0
 8016daa:	43aa      	bics	r2, r5
 8016dac:	462b      	mov	r3, r5
 8016dae:	4621      	mov	r1, r4
 8016db0:	d110      	bne.n	8016dd4 <__ieee754_sqrt+0x34>
 8016db2:	4622      	mov	r2, r4
 8016db4:	4620      	mov	r0, r4
 8016db6:	4629      	mov	r1, r5
 8016db8:	f7e9 fc36 	bl	8000628 <__aeabi_dmul>
 8016dbc:	4602      	mov	r2, r0
 8016dbe:	460b      	mov	r3, r1
 8016dc0:	4620      	mov	r0, r4
 8016dc2:	4629      	mov	r1, r5
 8016dc4:	f7e9 fa7a 	bl	80002bc <__adddf3>
 8016dc8:	4604      	mov	r4, r0
 8016dca:	460d      	mov	r5, r1
 8016dcc:	ec45 4b10 	vmov	d0, r4, r5
 8016dd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dd4:	2d00      	cmp	r5, #0
 8016dd6:	dc0e      	bgt.n	8016df6 <__ieee754_sqrt+0x56>
 8016dd8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8016ddc:	4322      	orrs	r2, r4
 8016dde:	d0f5      	beq.n	8016dcc <__ieee754_sqrt+0x2c>
 8016de0:	b19d      	cbz	r5, 8016e0a <__ieee754_sqrt+0x6a>
 8016de2:	4622      	mov	r2, r4
 8016de4:	4620      	mov	r0, r4
 8016de6:	4629      	mov	r1, r5
 8016de8:	f7e9 fa66 	bl	80002b8 <__aeabi_dsub>
 8016dec:	4602      	mov	r2, r0
 8016dee:	460b      	mov	r3, r1
 8016df0:	f7e9 fd44 	bl	800087c <__aeabi_ddiv>
 8016df4:	e7e8      	b.n	8016dc8 <__ieee754_sqrt+0x28>
 8016df6:	152a      	asrs	r2, r5, #20
 8016df8:	d115      	bne.n	8016e26 <__ieee754_sqrt+0x86>
 8016dfa:	2000      	movs	r0, #0
 8016dfc:	e009      	b.n	8016e12 <__ieee754_sqrt+0x72>
 8016dfe:	0acb      	lsrs	r3, r1, #11
 8016e00:	3a15      	subs	r2, #21
 8016e02:	0549      	lsls	r1, r1, #21
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d0fa      	beq.n	8016dfe <__ieee754_sqrt+0x5e>
 8016e08:	e7f7      	b.n	8016dfa <__ieee754_sqrt+0x5a>
 8016e0a:	462a      	mov	r2, r5
 8016e0c:	e7fa      	b.n	8016e04 <__ieee754_sqrt+0x64>
 8016e0e:	005b      	lsls	r3, r3, #1
 8016e10:	3001      	adds	r0, #1
 8016e12:	02dc      	lsls	r4, r3, #11
 8016e14:	d5fb      	bpl.n	8016e0e <__ieee754_sqrt+0x6e>
 8016e16:	1e44      	subs	r4, r0, #1
 8016e18:	1b12      	subs	r2, r2, r4
 8016e1a:	f1c0 0420 	rsb	r4, r0, #32
 8016e1e:	fa21 f404 	lsr.w	r4, r1, r4
 8016e22:	4323      	orrs	r3, r4
 8016e24:	4081      	lsls	r1, r0
 8016e26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016e2a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8016e2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016e32:	07d2      	lsls	r2, r2, #31
 8016e34:	bf5c      	itt	pl
 8016e36:	005b      	lslpl	r3, r3, #1
 8016e38:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8016e3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016e40:	bf58      	it	pl
 8016e42:	0049      	lslpl	r1, r1, #1
 8016e44:	2600      	movs	r6, #0
 8016e46:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8016e4a:	107f      	asrs	r7, r7, #1
 8016e4c:	0049      	lsls	r1, r1, #1
 8016e4e:	2016      	movs	r0, #22
 8016e50:	4632      	mov	r2, r6
 8016e52:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8016e56:	1915      	adds	r5, r2, r4
 8016e58:	429d      	cmp	r5, r3
 8016e5a:	bfde      	ittt	le
 8016e5c:	192a      	addle	r2, r5, r4
 8016e5e:	1b5b      	suble	r3, r3, r5
 8016e60:	1936      	addle	r6, r6, r4
 8016e62:	0fcd      	lsrs	r5, r1, #31
 8016e64:	3801      	subs	r0, #1
 8016e66:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8016e6a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016e6e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8016e72:	d1f0      	bne.n	8016e56 <__ieee754_sqrt+0xb6>
 8016e74:	4605      	mov	r5, r0
 8016e76:	2420      	movs	r4, #32
 8016e78:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8016e7c:	4293      	cmp	r3, r2
 8016e7e:	eb0c 0e00 	add.w	lr, ip, r0
 8016e82:	dc02      	bgt.n	8016e8a <__ieee754_sqrt+0xea>
 8016e84:	d113      	bne.n	8016eae <__ieee754_sqrt+0x10e>
 8016e86:	458e      	cmp	lr, r1
 8016e88:	d811      	bhi.n	8016eae <__ieee754_sqrt+0x10e>
 8016e8a:	f1be 0f00 	cmp.w	lr, #0
 8016e8e:	eb0e 000c 	add.w	r0, lr, ip
 8016e92:	da3f      	bge.n	8016f14 <__ieee754_sqrt+0x174>
 8016e94:	2800      	cmp	r0, #0
 8016e96:	db3d      	blt.n	8016f14 <__ieee754_sqrt+0x174>
 8016e98:	f102 0801 	add.w	r8, r2, #1
 8016e9c:	1a9b      	subs	r3, r3, r2
 8016e9e:	458e      	cmp	lr, r1
 8016ea0:	bf88      	it	hi
 8016ea2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8016ea6:	eba1 010e 	sub.w	r1, r1, lr
 8016eaa:	4465      	add	r5, ip
 8016eac:	4642      	mov	r2, r8
 8016eae:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8016eb2:	3c01      	subs	r4, #1
 8016eb4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8016eb8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016ebc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8016ec0:	d1dc      	bne.n	8016e7c <__ieee754_sqrt+0xdc>
 8016ec2:	4319      	orrs	r1, r3
 8016ec4:	d01b      	beq.n	8016efe <__ieee754_sqrt+0x15e>
 8016ec6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8016f44 <__ieee754_sqrt+0x1a4>
 8016eca:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8016f48 <__ieee754_sqrt+0x1a8>
 8016ece:	e9da 0100 	ldrd	r0, r1, [sl]
 8016ed2:	e9db 2300 	ldrd	r2, r3, [fp]
 8016ed6:	f7e9 f9ef 	bl	80002b8 <__aeabi_dsub>
 8016eda:	e9da 8900 	ldrd	r8, r9, [sl]
 8016ede:	4602      	mov	r2, r0
 8016ee0:	460b      	mov	r3, r1
 8016ee2:	4640      	mov	r0, r8
 8016ee4:	4649      	mov	r1, r9
 8016ee6:	f7e9 fe1b 	bl	8000b20 <__aeabi_dcmple>
 8016eea:	b140      	cbz	r0, 8016efe <__ieee754_sqrt+0x15e>
 8016eec:	f1b5 3fff 	cmp.w	r5, #4294967295
 8016ef0:	e9da 0100 	ldrd	r0, r1, [sl]
 8016ef4:	e9db 2300 	ldrd	r2, r3, [fp]
 8016ef8:	d10e      	bne.n	8016f18 <__ieee754_sqrt+0x178>
 8016efa:	3601      	adds	r6, #1
 8016efc:	4625      	mov	r5, r4
 8016efe:	1073      	asrs	r3, r6, #1
 8016f00:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8016f04:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8016f08:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8016f0c:	086b      	lsrs	r3, r5, #1
 8016f0e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8016f12:	e759      	b.n	8016dc8 <__ieee754_sqrt+0x28>
 8016f14:	4690      	mov	r8, r2
 8016f16:	e7c1      	b.n	8016e9c <__ieee754_sqrt+0xfc>
 8016f18:	f7e9 f9d0 	bl	80002bc <__adddf3>
 8016f1c:	e9da 8900 	ldrd	r8, r9, [sl]
 8016f20:	4602      	mov	r2, r0
 8016f22:	460b      	mov	r3, r1
 8016f24:	4640      	mov	r0, r8
 8016f26:	4649      	mov	r1, r9
 8016f28:	f7e9 fdf0 	bl	8000b0c <__aeabi_dcmplt>
 8016f2c:	b120      	cbz	r0, 8016f38 <__ieee754_sqrt+0x198>
 8016f2e:	1cab      	adds	r3, r5, #2
 8016f30:	bf08      	it	eq
 8016f32:	3601      	addeq	r6, #1
 8016f34:	3502      	adds	r5, #2
 8016f36:	e7e2      	b.n	8016efe <__ieee754_sqrt+0x15e>
 8016f38:	1c6b      	adds	r3, r5, #1
 8016f3a:	f023 0501 	bic.w	r5, r3, #1
 8016f3e:	e7de      	b.n	8016efe <__ieee754_sqrt+0x15e>
 8016f40:	7ff00000 	.word	0x7ff00000
 8016f44:	08017d68 	.word	0x08017d68
 8016f48:	08017d60 	.word	0x08017d60

08016f4c <_init>:
 8016f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f4e:	bf00      	nop
 8016f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f52:	bc08      	pop	{r3}
 8016f54:	469e      	mov	lr, r3
 8016f56:	4770      	bx	lr

08016f58 <_fini>:
 8016f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f5a:	bf00      	nop
 8016f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f5e:	bc08      	pop	{r3}
 8016f60:	469e      	mov	lr, r3
 8016f62:	4770      	bx	lr
